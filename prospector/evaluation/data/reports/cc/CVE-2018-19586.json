{
    "advisory_record": {
        "cve_id": "CVE-2018-19586",
        "description": "Silverpeas 5.15 through 6.0.2 is affected by an authenticated Directory Traversal vulnerability that can be triggered during file uploads because core/webapi/upload/FileUploadData.java mishandles a StringUtil.java call. This vulnerability enables regular users to write arbitrary files on the underlying system with privileges of the user running the application. Especially, an attacker may leverage the vulnerability to write an executable JSP file in an exposed web directory to execute commands on the underlying system.",
        "reserved_timestamp": 1543190400,
        "published_timestamp": 1554831510,
        "updated_timestamp": 1554831510,
        "repository_url": null,
        "references": {
            "": 31,
            "https://github.com/Silverpeas/Silverpeas-Core/blob/d8c3bbb0695a4907db013401bd16c6527e2b4f41/core-web/src/main/java/org/silverpeas/core/webapi/upload/FileUploadData.java#L89": 2,
            "https://www.bishopfox.com/news/2019/01/silverpeas-5-15-to-6-0-2-path-traversal/": 2,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 2,
            "https://github.com/features/actions": 1,
            "https://github.com/features/packages": 1,
            "https://github.com/features/security": 1,
            "https://github.com/features/codespaces": 1,
            "https://github.com/features/copilot": 1,
            "https://github.com/features/code-review": 1,
            "https://github.com/features/issues": 1,
            "https://github.com/features/discussions": 1,
            "https://github.com/features": 1,
            "https://docs.github.com": 1,
            "https://skills.github.com": 1,
            "https://github.blog": 1,
            "https://github.com/enterprise": 1,
            "https://github.com/team": 1,
            "https://github.com/enterprise/startups": 1,
            "https://github.com/solutions/industries/healthcare": 1,
            "https://github.com/solutions/industries/financial-services": 1,
            "https://github.com/solutions/industries/manufacturing": 1,
            "https://github.com/solutions/ci-cd": 1,
            "https://github.com/solutions/devops": 1,
            "https://github.com/solutions/devsecops": 1,
            "https://resources.github.com/learn/pathways": 1,
            "https://resources.github.com": 1,
            "https://github.com/customer-stories": 1,
            "https://partner.github.com": 1,
            "https://github.com/readme": 1,
            "https://github.com/topics": 1,
            "https://github.com/trending": 1,
            "https://github.com/collections": 1,
            "https://github.com/enterprise/advanced-security": 1,
            "https://github.com/pricing": 1,
            "https://github.com": 1,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 1,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 1,
            "https://github.com/security": 1,
            "https://www.githubstatus.com/": 1,
            "https://docs.github.com/": 1,
            "https://support.github.com?tags=dotcom-footer": 1
        },
        "affected_products": [
            "n/a",
            "Traversal",
            "Directory",
            "JSP"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "FileUploadData",
            "JSP",
            "StringUtil"
        ],
        "keywords": [
            "silverpea",
            "system",
            "traversal",
            "attacker",
            "affect",
            "mishandle",
            "privilege",
            "file",
            "upload",
            "expose",
            "underlie",
            "directory",
            "webapi",
            "enable",
            "core",
            "application",
            "trigger",
            "leverage",
            "command",
            "execute",
            "write",
            "vulnerability",
            "call",
            "user"
        ],
        "files_extension": [
            "java"
        ],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "38731376077cc9bf527a5277d4ba70e9ac3c9fa3",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1536765934,
            "hunks": 4,
            "message": "Fix a bug in the encoding of the parameters in ajaxRequest defined in silverpeas.js . Add method requireDefined in StringUtil in the same way of Objects#requireNonNull Add supports for additional SQL types in DefaultJdbcSqlExecutor when setting the parameters in a SQL request.",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "index a50c4e8e28..b87b666a9e 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "@@ -34,2 +34,6 @@ import java.lang.reflect.InvocationTargetException;",
                " import java.lang.reflect.Method;",
                "+import java.math.BigDecimal;",
                "+import java.math.BigInteger;",
                "+import java.sql.Blob;",
                "+import java.sql.Clob;",
                " import java.sql.Connection;",
                "@@ -204,2 +208,6 @@ class DefaultJdbcSqlExecutor implements JdbcSqlExecutor {",
                "         preparedStatement.setLong(paramIndex, (Long) parameter);",
                "+      } else if (parameter instanceof BigInteger) {",
                "+        preparedStatement.setBigDecimal(paramIndex, new BigDecimal((BigInteger) parameter));",
                "+      } else if (parameter instanceof BigDecimal) {",
                "+        preparedStatement.setBigDecimal(paramIndex, (BigDecimal) parameter);",
                "       } else if (parameter instanceof Timestamp) {",
                "@@ -212,2 +220,6 @@ class DefaultJdbcSqlExecutor implements JdbcSqlExecutor {",
                "             new java.sql.Date(toInstant(parameter).toEpochMilli()));",
                "+      } else if (parameter instanceof Blob) {",
                "+        preparedStatement.setBlob(paramIndex, (Blob) parameter);",
                "+      } else if (parameter instanceof Clob) {",
                "+        preparedStatement.setClob(paramIndex, (Clob) parameter);",
                "       } else {",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/util/StringUtil.java b/core-api/src/main/java/org/silverpeas/core/util/StringUtil.java",
                "index 998d0b86b5..509c2ca825 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/util/StringUtil.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/util/StringUtil.java",
                "@@ -56,2 +56,8 @@ public class StringUtil extends StringUtils {",
                "+  public static void requireDefined(final String name) {",
                "+    if (isNotDefined(name)) {",
                "+      throw new AssertionError(name + \" isn't defined!\");",
                "+    }",
                "+  }",
                "+",
                "   /**"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "core-api/src/main/java/org/silverpeas/core/util/StringUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: core-api/src/main/java/org/silverpeas/core/util/StringUtil.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7510ea52a00667438cf9672b3053b6ab7168fcfd",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1544782189,
            "hunks": 135,
            "message": "Feature #9884 Centralize the manual user notification into the UserNotification transverse web service. This service provides: - a widget that is defined both by the silverpeas-messager.js javascript file   and by the notificationSender.jsp JSP file - a computation that is defined by the couple UserNotificationRequestRouter/   UserNotificationSessionController. The UserNotification service uses the UserNotificationSuppliers to get the correct notification object to prepare and to send for a given component instance. The ManualUserNotificationSuppliers is a dictionnary containing all the suppliers of UserNotification object (an object representing a notification from a user, not here the service). Such suppliers have to be defined and added in the dictionnary by each Silverpeas component that want to profit of the UserNotification service. Such a supplier must implement the interface ManualUserNotificationSupplier; it gives them a way to build a personalized notification. A mechanism is coded to automatically register a ManualUserNotificationSupplier object into the ManualUserNotificationSuppliers dictionnary for each Silverpeas application. Firstly, a new method is defined by the ComponentSessionController interface with a default implementation that returns simply a NullUserNotification instance. Secondly, the abstract class ComponentRequestRouter asks for a ManualUserNotificationSupplier instance to the session controller to add it into the ManualUserNotificationSuppliers dictionnary. Hence, each ComponentSessionController implementation has to implement the new method (getManualUserNotificationSupplier()) to define their own supplier and therefore their own build of a user notification.",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/ManualUserNotificationSupplier.java b/core-api/src/main/java/org/silverpeas/core/notification/user/ManualUserNotificationSupplier.java",
                "new file mode 100644",
                "index 0000000000..6e1b403aa0",
                "--- /dev/null",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/ManualUserNotificationSupplier.java",
                "@@ -0,0 +1,21 @@",
                "+package org.silverpeas.core.notification.user;",
                "+",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * A supplier of a manual user notifications. Such notifications are messages sent explicitly by",
                "+ *  a given user to a set of one or more other users in order to notify them about an information,",
                "+ *  usually the availability or the content of a contribution that could interest them.",
                "+ * @author mmoquillon",
                "+ */",
                "+@FunctionalInterface",
                "+public interface ManualUserNotificationSupplier {",
                "+",
                "+  /**",
                "+   * Gets a {@link UserNotification} object that matches the specified notification context.",
                "+   * @param context a {@link Map} of key-values describing the context within which the user",
                "+   * notification has to be built.",
                "+   * @return a {@link UserNotification} object.",
                "+   */",
                "+  UserNotification get(final NotificationContext context);",
                "+}",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/ManualUserNotificationSuppliers.java b/core-api/src/main/java/org/silverpeas/core/notification/user/ManualUserNotificationSuppliers.java",
                "new file mode 100644",
                "index 0000000000..02bbb1a3d6",
                "--- /dev/null",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/ManualUserNotificationSuppliers.java",
                "@@ -0,0 +1,58 @@",
                "+package org.silverpeas.core.notification.user;",
                "+",
                "+import org.silverpeas.core.SilverpeasRuntimeException;",
                "+",
                "+import javax.inject.Singleton;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * A collection of suppliers of manual user notifications. The mechanism of sending manual user",
                "+ * notification is centralized and transverse. This collection is a way for this mechanism to get",
                "+ * the {@link UserNotification} object related to a Silverpeas component and that matches a given",
                "+ * notification context.",
                "+ * <p>",
                "+ * Because the way each notifications are built depends both on their context and on the",
                "+ * resources or, more specifically, the contributions they are related to, each component in",
                "+ * Silverpeas with which a manual notification is available has to specify its own supplier of",
                "+ * {@link UserNotification} object to this {@link ManualUserNotificationSuppliers} singleton. So,",
                "+ * when a manual notification has to be sent for a given component instance, the mechanism of",
                "+ * sending manual notifications will ask for a {@link UserNotification} object to the",
                "+ * corresponding supplier's Silverpeas component through this collection.",
                "+ * </p>",
                "+ * @author mmoquillon",
                "+ */",
                "+@Singleton",
                "+public class ManualUserNotificationSuppliers {",
                "+",
                "+  private final Map<String, ManualUserNotificationSupplier> suppliers =",
                "+      new HashMap<>();",
                "+",
                "+  /**",
                "+   * Sets for the given Silverpeas component the specified {@link UserNotification} provider.",
                "+   * @param componentName the name of a Silverpeas component in lower case (kmelia for example).",
                "+   * @param supplier a function that accepts as argument the context of the notification and",
                "+   * that returns the {@link UserNotification} object.",
                "+   */",
                "+  public void set(final String componentName, final ManualUserNotificationSupplier supplier) {",
                "+    this.suppliers.putIfAbsent(componentName, supplier);",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets a {@link UserNotification} object from the specified Silverpeas component and matching",
                "+   * the specified notification context.",
                "+   * @param componentName the name of a Silverpeas component in lower case (kmelia for example).",
                "+   * @param context the context within which the manual notification will be built and then",
                "+   * sent.",
                "+   * @return a {@link UserNotification} object.",
                "+   */",
                "+  public UserNotification get(final String componentName, final NotificationContext context) {",
                "+    ManualUserNotificationSupplier supplier = this.suppliers.get(componentName);",
                "+    if (supplier == null) {",
                "+      throw new SilverpeasRuntimeException(",
                "+          \"No User Notification Supplier defined for component \" + componentName);",
                "+    }",
                "+    return supplier.get(context);",
                "+  }",
                "+}",
                "+  ",
                "\\ No newline at end of file",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java b/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "new file mode 100644",
                "index 0000000000..edca2bce3d",
                "--- /dev/null",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "@@ -0,0 +1,28 @@",
                "+package org.silverpeas.core.notification.user;",
                "+",
                "+import org.silverpeas.core.util.StringUtil;",
                "+",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+",
                "+import static java.util.Arrays.asList;",
                "+import static org.apache.commons.lang3.StringUtils.split;",
                "+",
                "+/**",
                "+ * Context about a user notification. The context a dictionary of notification properties from",
                "+ * which a user notification can be built.",
                "+ * @author mmoquillon",
                "+ */",
                "+public class NotificationContext extends HashMap<String, String> {",
                "+",
                "+  public List<String> getAsList(final String key) {",
                "+    final String value = get(key);",
                "+    return asList(split(value, \",\"));",
                "+  }",
                "+",
                "+  public boolean getAsBoolean(final String key) {",
                "+    final String value = get(key);",
                "+    return StringUtil.getBooleanValue(key);",
                "+  }",
                "+}",
                "+  ",
                "\\ No newline at end of file",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "index ba0086eae1..1dca0c650d 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "@@ -38,11 +38,3 @@ import org.silverpeas.core.util.logging.SilverLogger;",
                "-import java.util.ArrayList;",
                "-import java.util.Arrays;",
                "-import java.util.Collection;",
                "-import java.util.Collections;",
                "-import java.util.Date;",
                "-import java.util.HashMap;",
                "-import java.util.HashSet;",
                "-import java.util.Map;",
                "-import java.util.Set;",
                "+import java.util.*;",
                "@@ -66,6 +58,6 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   private String sessionId;",
                "-  private Collection<UserRecipient> userRecipients;",
                "-  private Collection<UserRecipient> userRecipientsToExclude;",
                "-  private Collection<GroupRecipient> groupRecipients;",
                "-  private Collection<ExternalRecipient> externalRecipients;",
                "+  private final Collection<UserRecipient> userRecipients = new ArrayList<>();",
                "+  private final Collection<UserRecipient> userRecipientsToExclude = new ArrayList<>();",
                "+  private final Collection<GroupRecipient> groupRecipients = new ArrayList<>();",
                "+  private final Collection<ExternalRecipient> externalRecipients = new ArrayList<>();",
                "   private String componentId;",
                "@@ -131,6 +123,2 @@ public class NotificationMetaData implements java.io.Serializable {",
                "     sessionId = \"\";",
                "-    userRecipients = new ArrayList<>();",
                "-    userRecipientsToExclude = new ArrayList<>();",
                "-    groupRecipients = new ArrayList<>();",
                "-    externalRecipients = new ArrayList<>();",
                "     componentId = \"\";",
                "@@ -433,6 +421,5 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   public void setUserRecipients(Collection<UserRecipient> users) {",
                "+    this.userRecipients.clear();",
                "     if (users != null) {",
                "-      this.userRecipients = new ArrayList<>(users);",
                "-    } else {",
                "-      this.userRecipients = new ArrayList<>();",
                "+      addUserRecipients(users);",
                "     }",
                "@@ -445,3 +432,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   public Collection<UserRecipient> getUserRecipients() {",
                "-    return userRecipients;",
                "+    return Collections.unmodifiableCollection(userRecipients);",
                "   }",
                "@@ -464,7 +451,5 @@ public class NotificationMetaData implements java.io.Serializable {",
                "    */",
                "-  public void addUserRecipients(UserRecipient[] users) {",
                "+  public void addUserRecipients(UserRecipient... users) {",
                "     if (users != null) {",
                "-      for (UserRecipient userRecipient : users) {",
                "-        addUserRecipient(userRecipient);",
                "-      }",
                "+      addUserRecipients(Arrays.asList(users));",
                "     }",
                "@@ -490,6 +475,7 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   public void setUserRecipientsToExclude(Collection<UserRecipient> users) {",
                "+    this.userRecipientsToExclude.clear();",
                "     if (users != null) {",
                "-      this.userRecipientsToExclude = new ArrayList<>(users);",
                "-    } else {",
                "-      this.userRecipientsToExclude = new ArrayList<>();",
                "+      for(UserRecipient recipient: users) {",
                "+        addUserRecipient(recipient);",
                "+      }",
                "     }",
                "@@ -502,3 +488,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   public Collection<UserRecipient> getUserRecipientsToExclude() {",
                "-    return userRecipientsToExclude;",
                "+    return Collections.unmodifiableCollection(userRecipientsToExclude);",
                "   }",
                "@@ -537,3 +523,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   public Collection<ExternalRecipient> getExternalRecipients() {",
                "-    return externalRecipients;",
                "+    return Collections.unmodifiableCollection(externalRecipients);",
                "   }",
                "@@ -544,4 +530,7 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   public void setExternalRecipients(Collection<ExternalRecipient> externalRecipients) {",
                "+    this.externalRecipients.clear();",
                "     if (externalRecipients != null) {",
                "-      this.externalRecipients = externalRecipients;",
                "+      for(ExternalRecipient recipient: externalRecipients) {",
                "+        addExternalRecipient(recipient);",
                "+      }",
                "     }",
                "@@ -561,6 +550,5 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   public void setGroupRecipients(Collection<GroupRecipient> groups) {",
                "+    this.groupRecipients.clear();",
                "     if (groups != null) {",
                "-      this.groupRecipients = new ArrayList<>(groups);",
                "-    } else {",
                "-      this.groupRecipients = new ArrayList<>();",
                "+      addGroupRecipients(groups);",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java b/core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java",
                "index 44c7c15897..cb8f4679af 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java",
                "@@ -47,2 +47,6 @@ public class DefaultUserNotification implements UserNotification {",
                "+  public DefaultUserNotification(final NotificationMetaData metaData) {",
                "+    this.notification = metaData;",
                "+  }",
                "+",
                "   public DefaultUserNotification(final String title, final String content) {",
                "@@ -72,9 +76,10 @@ public class DefaultUserNotification implements UserNotification {",
                "   public void send(final BuiltInNotifAddress notificationAddress) {",
                "-    if (notification != null) {",
                "+    final NotificationMetaData notifMetaData = getNotificationMetaData();",
                "+    if (notifMetaData != null) {",
                "       try {",
                "-        final NotificationSender sender = new NotificationSender(notification.getComponentId());",
                "+        final NotificationSender sender = new NotificationSender(notifMetaData.getComponentId());",
                "         if (notificationAddress != null) {",
                "-          sender.notifyUser(notificationAddress.getId(), notification);",
                "+          sender.notifyUser(notificationAddress.getId(), notifMetaData);",
                "         } else {",
                "-          sender.notifyUser(notification);",
                "+          sender.notifyUser(notifMetaData);",
                "         }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/NullUserNotification.java b/core-library/src/main/java/org/silverpeas/core/notification/user/NullUserNotification.java",
                "index 3c428650cb..75dce9a8e8 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/NullUserNotification.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/NullUserNotification.java",
                "@@ -50,2 +50,3 @@ import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                " import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -62,3 +63,3 @@ public class NullUserNotification implements UserNotification {",
                "   public NotificationMetaData getNotificationMetaData() {",
                "-    return null;",
                "+    return new NotificationMetaData();",
                "   }",
                "@@ -73,2 +74,3 @@ public class NullUserNotification implements UserNotification {",
                "     // Nothing to do",
                "+    SilverLogger.getLogger(this).warn(\"No user notification implemented yet\");",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/util/URLUtil.java b/core-library/src/main/java/org/silverpeas/core/util/URLUtil.java",
                "index a64b8dfab9..f1fa90da74 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/util/URLUtil.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/util/URLUtil.java",
                "@@ -59,3 +59,3 @@ public class URLUtil {",
                "   public static final String CMP_CLIPBOARD = \"clipboard\";",
                "-  public static final String CMP_NOTIFICATIONUSER = \"notificationUser\";",
                "+  public static final String CMP_NOTIFICATIONUSER = \"userNotification\";",
                "   public static final String CMP_JOBMANAGERPEAS = \"jobManagerPeas\";",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/clipboard/servlets/ClipboardRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/clipboard/servlets/ClipboardRequestRouter.java",
                "index 663f25003f..0b7b7e9578 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/clipboard/servlets/ClipboardRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/clipboard/servlets/ClipboardRequestRouter.java",
                "@@ -107,3 +107,2 @@ public class ClipboardRequestRouter extends ComponentRequestRouter<ClipboardSess",
                "   public void updateSessionManagement(HttpSession session, String destination) {",
                "-",
                "     SessionManagement sessionManagement = SessionManagementProvider.getSessionManagement();",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/Notification.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/Notification.java",
                "index ea56ff8ee1..27b49525e8 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/Notification.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/Notification.java",
                "@@ -25,154 +25,70 @@ package org.silverpeas.web.notificationuser;",
                "-import org.owasp.encoder.Encode;",
                "-import org.silverpeas.core.admin.user.model.Group;",
                "-import org.silverpeas.core.admin.user.model.UserDetail;",
                "-import org.silverpeas.core.notification.user.client.GroupRecipient;",
                "+import org.silverpeas.core.notification.NotificationException;",
                "+import org.silverpeas.core.notification.user.DefaultUserNotification;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.UserRecipient;",
                "-import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                "-import org.silverpeas.core.ui.DisplayI18NHelper;",
                "-import org.silverpeas.core.util.LocalizationBundle;",
                "-import org.silverpeas.core.util.ResourceLocator;",
                "+import org.silverpeas.core.notification.user.client.NotificationSender;",
                " import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-",
                "-public class Notification {",
                "+/**",
                "+ * User notification defined in the Notification User personal component.",
                "+ */",
                "+public class Notification extends DefaultUserNotification {",
                "-  private String subject;",
                "-  private String body;",
                "-  private int priority = 0;",
                "-  private int addressId = BuiltInNotifAddress.COMPONENT_DEFINED.getId();",
                "-  private List<UserDetail> users;",
                "-  private List<Group> groups;",
                "+  private final NotificationMetaData metaData;",
                "+  private String addressId;",
                "+  /**",
                "+   * Constructs an empty user notification.",
                "+   */",
                "   public Notification() {",
                "-",
                "-  }",
                "-",
                "-  public Notification(String subject, String body) {",
                "-    setSubject(subject);",
                "-    setBody(body);",
                "-  }",
                "-",
                "-  public String getSubject() {",
                "-    return subject;",
                "-  }",
                "-  public void setSubject(String subject) {",
                "-    this.subject = subject;",
                "-  }",
                "-  public String getBody() {",
                "-    return body;",
                "-  }",
                "-  public void setBody(String body) {",
                "-    this.body = body;",
                "-  }",
                "-  public int getPriority() {",
                "-    return priority;",
                "-  }",
                "-  public void setPriority(int priority) {",
                "-    this.priority = priority;",
                "+    metaData = new NotificationMetaData();",
                "   }",
                "-  public void setPriority(String priority) {",
                "-    if (StringUtil.isInteger(priority)) {",
                "-      this.priority = Integer.parseInt(priority);",
                "-    }",
                "+  /**",
                "+   * Sets the priority of this notification.",
                "+   * @param priority the priority level.",
                "+   */",
                "+  public void setPriority(final int priority) {",
                "+    metaData.setMessageType(priority);",
                "   }",
                "-  public int getAddressId() {",
                "-    return addressId;",
                "-  }",
                "-  public void setAddressId(String channel) {",
                "-    if (StringUtil.isInteger(channel)) {",
                "-      this.addressId = Integer.parseInt(channel);",
                "-    }",
                "-  }",
                "-  public List<UserDetail> getUsers() {",
                "-    if (users == null) {",
                "-      users = new ArrayList<>();",
                "-    }",
                "-    return users;",
                "-  }",
                "-  public List<String> getUserIds() {",
                "-    List<String> ids = new ArrayList<>();",
                "-    if (users != null) {",
                "-      for (UserDetail user : users) {",
                "-        ids.add(user.getId());",
                "-      }",
                "-    }",
                "-    return ids;",
                "+  /**",
                "+   * Sets the source of this notification. The source is the component from which this notification",
                "+   * is sent.",
                "+   * @param source the name of the source of this notification.",
                "+   */",
                "+  public void setSource(final String source) {",
                "+    this.metaData.setSource(source);",
                "   }",
                "-  public void setUsers(List<UserDetail> users) {",
                "-    this.users = users;",
                "-  }",
                "-  public void setUsers(String... ids) {",
                "-    getUsers().clear();",
                "-    for (String id : ids) {",
                "-      UserDetail user = UserDetail.getById(id);",
                "-      if (user != null) {",
                "-        getUsers().add(user);",
                "-      }",
                "-    }",
                "-  }",
                "-  public List<Group> getGroups() {",
                "-    if (groups == null) {",
                "-      groups = new ArrayList<>();",
                "-    }",
                "-    return groups;",
                "-  }",
                "-  public List<String> getGroupIds() {",
                "-    List<String> ids = new ArrayList<>();",
                "-    if (getGroups() != null) {",
                "-      for (Group group : groups) {",
                "-        ids.add(group.getId());",
                "-      }",
                "-    }",
                "-    return ids;",
                "-  }",
                "-  public void setGroups(List<Group> groups) {",
                "-    this.groups = groups;",
                "+  @Override",
                "+  public NotificationMetaData getNotificationMetaData() {",
                "+    return metaData;",
                "   }",
                "-  public void setGroups(String... groupIds) {",
                "-    getGroups().clear();",
                "-    for (String id : groupIds) {",
                "-      Group group = Group.getById(id);",
                "-      if (group != null) {",
                "-        getGroups().add(group);",
                "-      }",
                "-    }",
                "+  /**",
                "+   * Sets the identifier of a notification address to which this notification has to be sent.",
                "+   * @param addressId the unique identifier of a notification address.",
                "+   */",
                "+  public void setAddressId(final String addressId) {",
                "+    this.addressId = addressId;",
                "   }",
                "-  public NotificationMetaData toNotificationMetaData() {",
                "-    NotificationMetaData notifMetaData =",
                "-        new NotificationMetaData(getPriority(), Encode.forHtml(getSubject()),",
                "-            Encode.forHtml(getBody()));",
                "-    List<UserRecipient> userRecipients = new ArrayList<>();",
                "-    if (getUsers() != null) {",
                "-      for (UserDetail user : getUsers()) {",
                "-        userRecipients.add(new UserRecipient(user));",
                "+  @Override",
                "+  public void send() {",
                "+    try {",
                "+      final NotificationSender sender = new NotificationSender(metaData.getComponentId());",
                "+      if (StringUtil.isDefined(addressId) && StringUtil.isInteger(addressId)) {",
                "+        sender.notifyUser(Integer.parseInt(addressId), metaData);",
                "+      } else {",
                "+        sender.notifyUser(metaData);",
                "       }",
                "+    } catch (final NotificationException e) {",
                "+      SilverLogger.getLogger(this).warn(e);",
                "+    } catch (Exception e) {",
                "+      SilverLogger.getLogger(this).error(e);",
                "     }",
                "-    notifMetaData.addUserRecipients(userRecipients);",
                "-    List<GroupRecipient> groupRecipients = new ArrayList<>();",
                "-    if (getGroups() != null) {",
                "-      for (Group group : getGroups()) {",
                "-        groupRecipients.add(new GroupRecipient(group));",
                "-      }",
                "-    }",
                "-    notifMetaData.addGroupRecipients(groupRecipients);",
                "-    for (String language : DisplayI18NHelper.getLanguages()) {",
                "-      LocalizationBundle bundle = ResourceLocator.getLocalizationBundle(",
                "-          \"org.silverpeas.alertUserPeas.multilang.alertUserPeasBundle\", language);",
                "-      notifMetaData.addLanguage(language, getSubject(), bundle.getString(\"AuthorMessage\") + \" :\");",
                "-      notifMetaData.addExtraMessage(getBody(), language);",
                "-    }",
                "-    return notifMetaData;",
                "   }",
                "-",
                "-",
                " }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java",
                "deleted file mode 100644",
                "index a6dd250313..0000000000",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java",
                "+++ /dev/null",
                "@@ -1,124 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.web.notificationuser.control;",
                "-",
                "-import org.silverpeas.core.notification.NotificationException;",
                "-import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.NotificationSender;",
                "-import org.silverpeas.core.util.StringUtil;",
                "-import org.silverpeas.core.util.URLUtil;",
                "-import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;",
                "-import org.silverpeas.core.web.mvc.controller.ComponentContext;",
                "-import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "-import org.silverpeas.web.notificationuser.Notification;",
                "-",
                "-public class NotificationUserSessionController extends AbstractComponentSessionController {",
                "-",
                "-  /* parameters of a notification */",
                "-  private Notification notification = null;",
                "-",
                "-  /**",
                "-   * Constructor declaration",
                "-   */",
                "-  public NotificationUserSessionController(",
                "-      MainSessionController mainSessionCtrl, ComponentContext componentContext) {",
                "-    super(mainSessionCtrl, componentContext,",
                "-        \"org.silverpeas.notificationUser.multilang.notificationUserBundle\");",
                "-    setComponentRootName(URLUtil.CMP_NOTIFICATIONUSER);",
                "-  }",
                "-",
                "-  public Notification resetNotification() {",
                "-    notification = new Notification();",
                "-    return notification;",
                "-  }",
                "-",
                "-  /**",
                "-   * @param notification the notification to send",
                "-   * @throws NotificationException thrown on error",
                "-   */",
                "-  @SuppressWarnings(\"StatementWithEmptyBody\")",
                "-  public void sendMessage(Notification notification) throws NotificationException {",
                "-    NotificationSender notifSender = new NotificationSender(null);",
                "-    NotificationMetaData notifMetaData = notification.toNotificationMetaData();",
                "-    notifMetaData.setSender(getUserId());",
                "-    notifMetaData.setSource(getString(\"manualNotification\"));",
                "-    if (getNotification() != null && getNotification().getUsers().isEmpty() &&",
                "-        getNotification().getGroups().isEmpty()) {",
                "-      // The selection container has been set from the user panel, so the notification must be",
                "-      // tagged as a manuel one.",
                "-      notifMetaData.manualUserNotification();",
                "-    } else {",
                "-      // The user panel has not been displayed and the receiver container has been set",
                "-      // automatically, so the notification is not tagged as a manual one (and centralized",
                "-      // verifications will be skipped).",
                "-    }",
                "-",
                "-    notifSender.notifyUser(notification.getAddressId(), notifMetaData);",
                "-  }",
                "-",
                "-  private static String[] lineToArray(String src) {",
                "-    final String[] result;",
                "-    if (StringUtil.isNotDefined(src)) {",
                "-      result = new String[0];",
                "-    } else {",
                "-      result = src.split(\"_\");",
                "-    }",
                "-    return result;",
                "-  }",
                "-",
                "-  public Notification initTargets(String theTargetsUsers, String theTargetsGroups) {",
                "-    Notification notif = resetNotification();",
                "-    notif.setUsers(initTargetsUsers(theTargetsUsers));",
                "-    notif.setGroups(initTargetsGroups(theTargetsGroups));",
                "-    return notif;",
                "-  }",
                "-",
                "-  private String[] initTargetsUsers(String theTargetsUsers) {",
                "-    String[] idUsers = new String[0];",
                "-    if (StringUtil.isDefined(theTargetsUsers)) {",
                "-      if (\"Administrators\".equals(theTargetsUsers)) {",
                "-        idUsers = getOrganisationController().getAdministratorUserIds(getUserId());",
                "-      } else {",
                "-        idUsers = lineToArray(theTargetsUsers);",
                "-      }",
                "-    }",
                "-    return idUsers;",
                "-  }",
                "-",
                "-  private String[] initTargetsGroups(String theTargetsGroups) {",
                "-    String[] idGroups = new String[0];",
                "-    if (theTargetsGroups != null && theTargetsGroups.length() > 0) {",
                "-      idGroups = lineToArray(theTargetsGroups);",
                "-    }",
                "-    return idGroups;",
                "-  }",
                "-",
                "-  /**",
                "-   * Gets the notification used to initialize data on page.",
                "-   * @return the notification data.",
                "-   */",
                "-  public Notification getNotification() {",
                "-    return notification;",
                "-  }",
                "-}",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "new file mode 100644",
                "index 0000000000..81eb9db0b9",
                "--- /dev/null",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "@@ -0,0 +1,173 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+package org.silverpeas.web.notificationuser.control;",
                "+",
                "+import org.silverpeas.core.admin.component.model.ComponentInst;",
                "+import org.silverpeas.core.admin.component.model.PersonalComponentInstance;",
                "+import org.silverpeas.core.admin.user.model.Group;",
                "+import org.silverpeas.core.admin.user.model.User;",
                "+import org.silverpeas.core.notification.user.ManualUserNotificationSupplier;",
                "+import org.silverpeas.core.notification.user.ManualUserNotificationSuppliers;",
                "+import org.silverpeas.core.notification.user.NotificationContext;",
                "+import org.silverpeas.core.notification.user.UserNotification;",
                "+import org.silverpeas.core.util.ServiceProvider;",
                "+import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.util.URLUtil;",
                "+import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;",
                "+import org.silverpeas.core.web.mvc.controller.ComponentContext;",
                "+import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "+import org.silverpeas.web.notificationuser.Notification;",
                "+",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+import java.util.stream.Collectors;",
                "+import java.util.stream.Stream;",
                "+",
                "+public class UserNotificationSessionController extends AbstractComponentSessionController {",
                "+",
                "+  private UserNotificationWrapper currentNotification;",
                "+",
                "+  /**",
                "+   * Constructor declaration",
                "+   */",
                "+  public UserNotificationSessionController(MainSessionController mainSessionCtrl,",
                "+      ComponentContext componentContext) {",
                "+    super(mainSessionCtrl, componentContext,",
                "+        \"org.silverpeas.notificationUser.multilang.notificationUserBundle\");",
                "+    setComponentRootName(URLUtil.CMP_NOTIFICATIONUSER);",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the list of users whose the identifiers are specified in the given line.",
                "+   * @param userIdsLine a line of underscore-separated user's unique identifiers.",
                "+   * @return a list of users.",
                "+   */",
                "+  public List<User> getUsersFrom(String userIdsLine) {",
                "+    final List<User> users;",
                "+    if (StringUtil.isDefined(userIdsLine)) {",
                "+      final String[] userIds;",
                "+      if (\"Administrators\".equals(userIdsLine)) {",
                "+        userIds = getOrganisationController().getAdministratorUserIds(getUserId());",
                "+      } else {",
                "+        userIds = userIdsLine.split(\"_\");",
                "+      }",
                "+      users = Stream.of(userIds).map(User::getById).collect(Collectors.toList());",
                "+    } else {",
                "+      users = Collections.emptyList();",
                "+    }",
                "+    return users;",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the list of groups whose the identifiers are specified in the given line.",
                "+   * @param groupIdsLine a line of underscore-separated group's unique identifiers.",
                "+   * @return a list of groups.",
                "+   */",
                "+  public List<Group> getGroupsFrom(String groupIdsLine) {",
                "+    final List<Group> groups;",
                "+    if (StringUtil.isDefined(groupIdsLine)) {",
                "+      final String[] groupIds = groupIdsLine.split(\"_\");",
                "+      groups = Stream.of(groupIds).map(Group::getById).collect(Collectors.toList());",
                "+    } else {",
                "+      groups = Collections.emptyList();",
                "+    }",
                "+    return groups;",
                "+  }",
                "+",
                "+  /**",
                "+   * Prepares a user notification from the specified context ready to be customized by the",
                "+   * notification editor and then to be sent later.",
                "+   * @param context a notification context. It can contain additional parameters specific to a",
                "+   * given Silverpeas component instance.",
                "+   * @return the user notification that will be sent later.",
                "+   */",
                "+  public UserNotification prepareNotification(final NotificationContext context) {",
                "+    this.currentNotification = supplyUserNotification(context);",
                "+    return currentNotification;",
                "+  }",
                "+",
                "+  /**",
                "+   * Clears any prepared notification.",
                "+   */",
                "+  public void clearNotification() {",
                "+    this.currentNotification = null;",
                "+  }",
                "+",
                "+  @Override",
                "+  public ManualUserNotificationSupplier getManualUserNotificationSupplier() {",
                "+    return c -> {",
                "+      final int priority;",
                "+      if (c.containsKey(\"priorityId\")) {",
                "+        priority = Integer.parseInt(c.get(\"priorityId\"));",
                "+      } else {",
                "+        priority = 0;",
                "+      }",
                "+      Notification manualNotification = new Notification();",
                "+      manualNotification.setPriority(priority);",
                "+      manualNotification.setSource(getString(\"manualNotification\"));",
                "+      manualNotification.setAddressId(c.get(\"notificationId\"));",
                "+      return manualNotification;",
                "+    };",
                "+  }",
                "+",
                "+  /**",
                "+   * Sends the notification described by the specified context.",
                "+   * @param context the context of the notification to send. It contains all the properties",
                "+   * required to build the notification and to send it.",
                "+   */",
                "+  public void sendNotification(final NotificationContext context) {",
                "+    final UserNotificationWrapper userNotification = getUserNotification(context);",
                "+    userNotification.setTitle(context.get(\"title\"))",
                "+        .setContent(context.get(\"content\"))",
                "+        .setSender(getUserDetail())",
                "+        .setRecipientUsers(context.getAsList(\"recipientUsers\"))",
                "+        .setRecipientGroups(context.getAsList(\"recipientGroups\"))",
                "+        .setAsManual(context.getAsBoolean(\"manual\"))",
                "+        .send();",
                "+  }",
                "+",
                "+  private UserNotificationWrapper supplyUserNotification(final NotificationContext context) {",
                "+    final String componentId = context.getOrDefault(\"componentId\", getComponentRootName());",
                "+    final String componentName;",
                "+    if (!getComponentRootName().equals(componentId) &&",
                "+        !PersonalComponentInstance.from(componentId).isPresent()) {",
                "+      componentName = ComponentInst.getComponentName(componentId);",
                "+    } else {",
                "+      componentName = componentId;",
                "+    }",
                "+    final ManualUserNotificationSuppliers suppliers =",
                "+        ServiceProvider.getService(ManualUserNotificationSuppliers.class);",
                "+    return new UserNotificationWrapper(suppliers.get(componentName, context), getLanguage());",
                "+  }",
                "+",
                "+  private UserNotificationWrapper getUserNotification(final NotificationContext context) {",
                "+    final UserNotificationWrapper notification;",
                "+    if (this.currentNotification == null) {",
                "+      notification = supplyUserNotification(context);",
                "+    } else {",
                "+      notification = this.currentNotification;",
                "+    }",
                "+    return notification;",
                "+  }",
                "+}",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "new file mode 100644",
                "index 0000000000..42a3b89fa8",
                "--- /dev/null",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "@@ -0,0 +1,146 @@",
                "+package org.silverpeas.web.notificationuser.control;",
                "+",
                "+import org.owasp.encoder.Encode;",
                "+import org.silverpeas.core.admin.user.model.User;",
                "+import org.silverpeas.core.notification.user.UserNotification;",
                "+import org.silverpeas.core.notification.user.client.GroupRecipient;",
                "+import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "+import org.silverpeas.core.notification.user.client.UserRecipient;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                "+import org.silverpeas.core.template.SilverpeasTemplate;",
                "+import org.silverpeas.core.ui.DisplayI18NHelper;",
                "+import org.silverpeas.core.util.LocalizationBundle;",
                "+import org.silverpeas.core.util.ResourceLocator;",
                "+import org.silverpeas.core.util.StringUtil;",
                "+",
                "+import java.util.Collection;",
                "+import java.util.Objects;",
                "+import java.util.stream.Collectors;",
                "+",
                "+/**",
                "+ * A wrapper of a {@link org.silverpeas.core.notification.user.UserNotification} object with",
                "+ * additional methods to customize the user notification that was built and returned by a given",
                "+ * Silverpeas component instance. The customization is provided by the sender of such a",
                "+ * notification and they consist mainly by setting a title other than the provided one or by",
                "+ * setting an additional message.",
                "+ * @author mmoquillon",
                "+ */",
                "+public class UserNotificationWrapper implements UserNotification {",
                "+",
                "+  private final UserNotification notification;",
                "+  private final String language;",
                "+",
                "+  /**",
                "+   * Constructs a new wrapper of the specified user notification and with the given language.",
                "+   * @param notification the {@link UserNotification} object to wrap",
                "+   * @param senderLanguage an ISO-631-1 code of the language of the notification sender.",
                "+   */",
                "+  UserNotificationWrapper(final UserNotification notification, final String senderLanguage) {",
                "+    Objects.requireNonNull(notification);",
                "+    StringUtil.requireDefined(senderLanguage);",
                "+    this.notification = notification;",
                "+    this.language = senderLanguage;",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets a title to this notification.",
                "+   * @param title the title to set.",
                "+   * @return itself.",
                "+   */",
                "+  public UserNotificationWrapper setTitle(final String title) {",
                "+    if (StringUtil.isDefined(title) &&",
                "+        !title.equals(getNotificationMetaData().getTitle(this.language))) {",
                "+      final NotificationMetaData metaData = notification.getNotificationMetaData();",
                "+      metaData.setTitle(Encode.forHtml(title));",
                "+      for (String language : DisplayI18NHelper.getLanguages()) {",
                "+        LocalizationBundle bundle = ResourceLocator.getLocalizationBundle(",
                "+            \"org.silverpeas.alertUserPeas.multilang.alertUserPeasBundle\", language);",
                "+        metaData.addLanguage(language, title, bundle.getString(\"AuthorMessage\") + \" :\");",
                "+      }",
                "+    }",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets a content to this notification.",
                "+   * @param content the content to set.",
                "+   * @return itself.",
                "+   */",
                "+  public UserNotificationWrapper setContent(final String content) {",
                "+    if (StringUtil.isDefined(content)) {",
                "+      final NotificationMetaData metaData = notification.getNotificationMetaData();",
                "+      metaData.setContent(Encode.forHtml(content));",
                "+      for (String language : DisplayI18NHelper.getLanguages()) {",
                "+        metaData.addExtraMessage(content, language);",
                "+      }",
                "+    }",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets the sender of this notification.",
                "+   * @param sender the sender to set.",
                "+   * @return itself.",
                "+   */",
                "+  public UserNotificationWrapper setSender(final User sender) {",
                "+    final NotificationMetaData metaData = notification.getNotificationMetaData();",
                "+    metaData.setSender(sender.getId());",
                "+    for (SilverpeasTemplate template : metaData.getTemplates().values()) {",
                "+      template.setAttribute(\"sender\", sender);",
                "+      template.setAttribute(\"senderName\", sender.getDisplayedName());",
                "+    }",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets one or more recipients to this notification.",
                "+   * @param userIds a collection of user's unique identifiers.",
                "+   * @return itself.",
                "+   */",
                "+  public UserNotificationWrapper setRecipientUsers(final Collection<String> userIds) {",
                "+    final Collection<UserRecipient> userRecipients =",
                "+        userIds.stream().map(UserRecipient::new).collect(Collectors.toList());",
                "+    notification.getNotificationMetaData().setUserRecipients(userRecipients);",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets one or more recipients to this notification.",
                "+   * @param groupIds a collection of group's unique identifiers.",
                "+   * @return itself.",
                "+   */",
                "+  public UserNotificationWrapper setRecipientGroups(final Collection<String> groupIds) {",
                "+    final Collection<GroupRecipient> groupRecipients =",
                "+        groupIds.stream().map(GroupRecipient::new).collect(Collectors.toList());",
                "+    notification.getNotificationMetaData().setGroupRecipients(groupRecipients);",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets this notification as manual or not.",
                "+   * @param yesOrFalse either true for a manual notification or false otherwise.",
                "+   * @return itself.",
                "+   */",
                "+  public UserNotificationWrapper setAsManual(final boolean yesOrFalse) {",
                "+    if (yesOrFalse) {",
                "+      notification.getNotificationMetaData().manualUserNotification();",
                "+    }",
                "+    return this;",
                "+  }",
                "+",
                "+  @Override",
                "+  public NotificationMetaData getNotificationMetaData() {",
                "+    return notification.getNotificationMetaData();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void send() {",
                "+    notification.send();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void send(final BuiltInNotifAddress notificationAddress) {",
                "+    notification.send(notificationAddress);",
                "+  }",
                "+}",
                "+  ",
                "\\ No newline at end of file",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java",
                "deleted file mode 100644",
                "index 0d90284ab9..0000000000",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java",
                "+++ /dev/null",
                "@@ -1,130 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.web.notificationuser.servlets;",
                "-",
                "-import org.silverpeas.core.util.StringUtil;",
                "-import org.silverpeas.core.web.http.HttpRequest;",
                "-import org.silverpeas.core.web.mvc.controller.ComponentContext;",
                "-import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "-import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;",
                "-import org.silverpeas.web.notificationuser.Notification;",
                "-import org.silverpeas.web.notificationuser.control.NotificationUserSessionController;",
                "-",
                "-import java.util.List;",
                "-",
                "-public class NotificationUserRequestRouter extends ComponentRequestRouter<NotificationUserSessionController> {",
                "-",
                "-  private static final long serialVersionUID = -5858231857279380747L;",
                "-  private static final String POPUP_MODE_PARAM = \"popupMode\";",
                "-  private static final String EDIT_TARGETS_PARAM = \"editTargets\";",
                "-  private static final String POPIN_MODE_PARAM = \"popinMode\";",
                "-  private static final String COMPONENT_ID = \"componentId\";",
                "-",
                "-  @Override",
                "-  public NotificationUserSessionController createComponentSessionController(",
                "-      MainSessionController mainSessionCtrl, ComponentContext componentContext) {",
                "-    return new NotificationUserSessionController(mainSessionCtrl, componentContext);",
                "-  }",
                "-",
                "-  /**",
                "-   * This method has to be implemented in the component request rooter class. returns the session",
                "-   * control bean name to be put in the request object ex : for notificationUser, returns",
                "-   * \"notificationUser\"",
                "-   */",
                "-  @Override",
                "-  public String getSessionControlBeanName() {",
                "-    return \"notificationUser\";",
                "-  }",
                "-",
                "-  /**",
                "-   * Compute a destination page.",
                "-   * @param function The entering request function (ex : \"Main.jsp\")",
                "-   * @param nuSC The component Session Control, build and initialised.",
                "-   * @param request The entering request. The request rooter need it to get parameters",
                "-   * @return The complete destination URL for a forward (ex :",
                "-   * \"/notificationUser/jsp/notificationUser.jsp?flag=user\")",
                "-   */",
                "-  @Override",
                "-  public String getDestination(String function, NotificationUserSessionController nuSC,",
                "-      HttpRequest request) {",
                "-    String destination;",
                "-    try {",
                "-      request.setCharacterEncoding(\"UTF-8\");",
                "-      if (function.startsWith(\"Main\")) {",
                "-        String theTargetsUsers = request.getParameter(\"theTargetsUsers\");",
                "-        String theTargetsGroups = request.getParameter(\"theTargetsGroups\");",
                "-",
                "-        final Notification notification;",
                "-        if (theTargetsUsers != null || theTargetsGroups != null) {",
                "-          // predefined targets are given",
                "-          notification = nuSC.initTargets(theTargetsUsers, theTargetsGroups);",
                "-        } else {",
                "-          notification = nuSC.resetNotification();",
                "-        }",
                "-        request.setAttribute(\"Notification\", notification);",
                "-",
                "-        final boolean popupMode = request.getParameterAsBoolean(POPUP_MODE_PARAM);",
                "-        final boolean popinMode = request.getParameterAsBoolean(POPIN_MODE_PARAM);",
                "-        final String instanceId = request.getParameter(COMPONENT_ID);",
                "-        final String param = request.getParameter(EDIT_TARGETS_PARAM);",
                "-        final boolean editTargets;",
                "-        if (StringUtil.isDefined(param)) {",
                "-          editTargets = StringUtil.getBooleanValue(param);",
                "-        } else {",
                "-          editTargets = true;",
                "-        }",
                "-        request.setAttribute(POPUP_MODE_PARAM, popupMode);",
                "-        request.setAttribute(POPIN_MODE_PARAM, popinMode);",
                "-        request.setAttribute(COMPONENT_ID, instanceId);",
                "-        request.setAttribute(EDIT_TARGETS_PARAM, editTargets);",
                "-        destination = \"/notificationUser/jsp/notificationSender.jsp\";",
                "-      } else if (\"SendNotif\".equals(function)) {",
                "-        final Notification notification = request2Notification(request);",
                "-        nuSC.sendMessage(notification);",
                "-        nuSC.getAlertUser().resetAll();",
                "-        destination = \"/peasCore/jsp/close.jsp\";",
                "-      } else {",
                "-        destination = \"/notificationUser/jsp/\" + function;",
                "-      }",
                "-    } catch (Exception e) {",
                "-      request.setAttribute(\"javax.servlet.jsp.jspException\", e);",
                "-      destination = \"/admin/jsp/errorpageMain.jsp\";",
                "-    }",
                "-",
                "-    return destination;",
                "-  }",
                "-",
                "-  private Notification request2Notification(HttpRequest request) {",
                "-    Notification notification = new Notification();",
                "-    notification.setSubject(request.getParameter(\"txtTitle\"));",
                "-    notification.setBody(request.getParameter(\"txtMessage\"));",
                "-    notification.setAddressId(request.getParameter(\"notificationId\"));",
                "-    notification.setPriority(request.getParameter(\"priorityId\"));",
                "-    final List<String> selectedUsers = request.getParameterAsList(\"selectedUsers\");",
                "-    final List<String> selectedGroups = request.getParameterAsList(\"selectedGroups\");",
                "-    notification.setUsers(selectedUsers.toArray(new String[selectedUsers.size()]));",
                "-    notification.setGroups(selectedGroups.toArray(new String[selectedGroups.size()]));",
                "-    return notification;",
                "-  }",
                "-}",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "new file mode 100644",
                "index 0000000000..309b72e4ff",
                "--- /dev/null",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "@@ -0,0 +1,127 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+package org.silverpeas.web.notificationuser.servlets;",
                "+",
                "+import org.silverpeas.core.notification.user.NotificationContext;",
                "+import org.silverpeas.core.notification.user.UserNotification;",
                "+import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.web.http.HttpRequest;",
                "+import org.silverpeas.core.web.mvc.controller.ComponentContext;",
                "+import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "+import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;",
                "+import org.silverpeas.web.notificationuser.control.UserNotificationSessionController;",
                "+",
                "+import java.util.Enumeration;",
                "+",
                "+public class UserNotificationRequestRouter",
                "+    extends ComponentRequestRouter<UserNotificationSessionController> {",
                "+",
                "+  private static final long serialVersionUID = -5858231857279380747L;",
                "+  private static final String RECIPIENT_EDITION_PARAM = \"recipientEdition\";",
                "+  private static final String COMPONENT_ID = \"componentId\";",
                "+  private static final String RECIPIENT_USERS = \"recipientUsers\";",
                "+  private static final String RECIPIENT_GROUPS = \"recipientGroups\";",
                "+  private static final String MESSAGE_TITLE = \"title\";",
                "+  private static final String MAIN_FUNCTION = \"Main\";",
                "+  private static final String SENDING_FUNCTION = \"SendNotif\";",
                "+  private static final String RELEASE_FUNCTION = \"ClearNotif\";",
                "+",
                "+  @Override",
                "+  public UserNotificationSessionController createComponentSessionController(",
                "+      MainSessionController mainSessionCtrl, ComponentContext componentContext) {",
                "+    return new UserNotificationSessionController(mainSessionCtrl, componentContext);",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getSessionControlBeanName() {",
                "+    return \"userNotification\";",
                "+  }",
                "+",
                "+  /**",
                "+   * Compute a destination page.",
                "+   * @param function The entering request function (ex : \"Main.jsp\")",
                "+   * @param nuSC The component Session Control, build and initialised.",
                "+   * @param request The entering request. The request rooter need it to get parameters",
                "+   * @return The complete destination URL for a forward (ex :",
                "+   * \"/notificationUser/jsp/notificationUser.jsp?flag=user\")",
                "+   */",
                "+  @Override",
                "+  public String getDestination(String function, UserNotificationSessionController nuSC,",
                "+      HttpRequest request) {",
                "+    String destination;",
                "+    try {",
                "+      request.setCharacterEncoding(\"UTF-8\");",
                "+      if (function.startsWith(MAIN_FUNCTION)) {",
                "+        final NotificationContext context = getNotificationContext(request);",
                "+        UserNotification notification = nuSC.prepareNotification(context);",
                "+        final String title = notification.getNotificationMetaData().getTitle(nuSC.getLanguage());",
                "+        request.setAttribute(MESSAGE_TITLE, title);",
                "+        String recipientUsers = request.getParameter(RECIPIENT_USERS);",
                "+        String recipientGroups = request.getParameter(RECIPIENT_GROUPS);",
                "+        if (recipientUsers != null || recipientGroups != null) {",
                "+          request.setAttribute(RECIPIENT_USERS, nuSC.getUsersFrom(recipientUsers));",
                "+          request.setAttribute(RECIPIENT_GROUPS, nuSC.getGroupsFrom(recipientGroups));",
                "+        }",
                "+        final String instanceId = request.getParameter(COMPONENT_ID);",
                "+        final String param = request.getParameter(RECIPIENT_EDITION_PARAM);",
                "+        final boolean areRecipientsEditable;",
                "+        if (StringUtil.isDefined(param)) {",
                "+          areRecipientsEditable = StringUtil.getBooleanValue(param);",
                "+        } else {",
                "+          areRecipientsEditable = true;",
                "+        }",
                "+        request.setAttribute(COMPONENT_ID, instanceId);",
                "+        request.setAttribute(RECIPIENT_EDITION_PARAM, areRecipientsEditable);",
                "+        destination = \"/userNotification/jsp/notificationSender.jsp\";",
                "+      } else if (SENDING_FUNCTION.equals(function)) {",
                "+        final NotificationContext context = getNotificationContext(request);",
                "+        nuSC.sendNotification(context);",
                "+        nuSC.getAlertUser().resetAll();",
                "+        nuSC.clearNotification();",
                "+        destination = \"/peasCore/jsp/close.jsp\";",
                "+      } else if (RELEASE_FUNCTION.equals(function)) {",
                "+        nuSC.getAlertUser().resetAll();",
                "+        nuSC.clearNotification();",
                "+        destination = \"/peasCore/jsp/close.jsp\";",
                "+      } else {",
                "+        destination = \"/userNotification/jsp/\" + function;",
                "+      }",
                "+    } catch (Exception e) {",
                "+      request.setAttribute(\"javax.servlet.jsp.jspException\", e);",
                "+      destination = \"/admin/jsp/errorpageMain.jsp\";",
                "+    }",
                "+",
                "+    return destination;",
                "+  }",
                "+",
                "+  private NotificationContext getNotificationContext(final HttpRequest request) {",
                "+    final NotificationContext context = new NotificationContext();",
                "+    Enumeration<String> parameters = request.getParameterNames();",
                "+    while (parameters.hasMoreElements()) {",
                "+      final String name = parameters.nextElement();",
                "+      context.put(name, request.getParameter(name));",
                "+    }",
                "+    return context;",
                "+  }",
                "+}",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/ComponentSessionController.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/ComponentSessionController.java",
                "index 379f4ebd03..622a7a1e03 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/ComponentSessionController.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/ComponentSessionController.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.web.mvc.controller;",
                "+import org.silverpeas.core.SilverpeasException;",
                " import org.silverpeas.core.admin.component.constant.ComponentInstanceParameterName;",
                "@@ -30,2 +31,4 @@ import org.silverpeas.core.admin.user.model.UserDetail;",
                " import org.silverpeas.core.clipboard.ClipboardSelection;",
                "+import org.silverpeas.core.notification.user.ManualUserNotificationSupplier;",
                "+import org.silverpeas.core.notification.user.NullUserNotification;",
                " import org.silverpeas.core.personalization.UserPreferences;",
                "@@ -34,2 +37,3 @@ import org.silverpeas.core.util.SettingBundle;",
                "+import java.io.Serializable;",
                " import java.util.Collection;",
                "@@ -41,3 +45,3 @@ import java.util.Collection;",
                "-public interface ComponentSessionController {",
                "+public interface ComponentSessionController extends Serializable {",
                "   /** Return the organizationController */",
                "@@ -121,19 +125,23 @@ public interface ComponentSessionController {",
                "-  Collection getClipboardSelectedObjects() throws Exception;",
                "+  Collection getClipboardSelectedObjects() throws SilverpeasException;",
                "-  String getClipboardErrorMessage() throws Exception;",
                "+  String getClipboardErrorMessage() throws SilverpeasException;",
                "-  Exception getClipboardExceptionError() throws Exception;",
                "+  Exception getClipboardExceptionError() throws SilverpeasException;",
                "-  Collection getClipboardObjects() throws Exception;",
                "+  Collection getClipboardObjects() throws SilverpeasException;",
                "-  void addClipboardSelection(ClipboardSelection selection) throws Exception;",
                "+  void addClipboardSelection(ClipboardSelection selection) throws SilverpeasException;",
                "-  void clipboardPasteDone() throws Exception;",
                "+  void clipboardPasteDone() throws SilverpeasException;",
                "-  void setClipboardSelectedElement(int index, boolean selected) throws Exception;",
                "+  void setClipboardSelectedElement(int index, boolean selected) throws SilverpeasException;",
                "-  int getClipboardSize() throws Exception;",
                "+  int getClipboardSize() throws SilverpeasException;",
                "-  void removeClipboardElement(int index) throws Exception;",
                "+  void removeClipboardElement(int index) throws SilverpeasException;",
                "+",
                "+  default ManualUserNotificationSupplier getManualUserNotificationSupplier() {",
                "+    return c -> new NullUserNotification();",
                "+  }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/PeasCoreException.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/PeasCoreException.java",
                "index cb32b62526..a065c5181a 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/PeasCoreException.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/PeasCoreException.java",
                "@@ -61,2 +61,7 @@ public class PeasCoreException extends SilverpeasException {",
                "+  public PeasCoreException(String callingClass, String message, String extraParams,",
                "+      Exception nested) {",
                "+    super(callingClass, SilverpeasException.ERROR, message, extraParams, nested);",
                "+  }",
                "+",
                "   /**",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "index 3681b63909..129a2f6a78 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.web.mvc.route;",
                "+import org.silverpeas.core.admin.component.model.ComponentInst;",
                " import org.silverpeas.core.admin.component.model.ComponentInstLight;",
                "@@ -31,2 +32,3 @@ import org.silverpeas.core.contribution.model.CoreContributionType;",
                " import org.silverpeas.core.i18n.I18NHelper;",
                "+import org.silverpeas.core.notification.user.ManualUserNotificationSuppliers;",
                " import org.silverpeas.core.notification.user.UserSubscriptionNotificationSendingHandler;",
                "@@ -36,3 +38,2 @@ import org.silverpeas.core.security.token.Token;",
                " import org.silverpeas.core.silverstatistics.volume.service.SilverStatisticsManager;",
                "-import org.silverpeas.core.silvertrace.SilverTrace;",
                " import org.silverpeas.core.util.JSONCodec;",
                "@@ -41,2 +42,3 @@ import org.silverpeas.core.util.ResourceLocator;",
                " import org.silverpeas.core.util.ServiceProvider;",
                "+import org.silverpeas.core.util.StringUtil;",
                " import org.silverpeas.core.util.URLUtil;",
                "@@ -60,3 +62,2 @@ import javax.inject.Inject;",
                " import javax.servlet.RequestDispatcher;",
                "-import javax.servlet.ServletException;",
                " import javax.servlet.http.HttpServletRequest;",
                "@@ -78,2 +79,3 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "   private static final String MANUAL_JSON_RESPONSE_PREFIX = \"MANUAL_JSON_RESPONSE_\";",
                "+  private static final String SESSION_ATTR_PREFIX = \"Silverpeas_\";",
                "   @Inject",
                "@@ -153,3 +155,2 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "   public void doPost(HttpServletRequest request, HttpServletResponse response) {",
                "-",
                "     String destination = computeDestination(request);",
                "@@ -162,4 +163,3 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "   @Override",
                "-  public void doGet(HttpServletRequest request, HttpServletResponse response)",
                "-      throws ServletException {",
                "+  public void doGet(HttpServletRequest request, HttpServletResponse response) {",
                "     doPost(request, response);",
                "@@ -175,3 +175,3 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "     // App in Maintenance ?",
                "-    if (mainSessionCtrl.isAppInMaintenance() && !mainSessionCtrl.getCurrentUserDetail().",
                "+    if (MainSessionController.isAppInMaintenance() && !mainSessionCtrl.getCurrentUserDetail().",
                "         isAccessAdmin()) {",
                "@@ -188,5 +188,3 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "     setGefSpaceId(request, componentId, spaceId);",
                "-",
                "     boolean isSpaceInMaintenance = mainSessionCtrl.isSpaceInMaintenance(spaceId);",
                "-",
                "     // Space in Maintenance ?",
                "@@ -196,4 +194,4 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "-    T component = this.getComponentSessionController(session, componentId);",
                "-    if (component == null) {",
                "+    T ctrl = this.getComponentSessionController(session, componentId);",
                "+    if (ctrl == null) {",
                "       // isUserStateValid that the user has an access to this component instance",
                "@@ -202,4 +200,3 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "         SilverLogger.getLogger(this)",
                "-            .warn(\"User {0} not allowed to access application {1} in space {2}\",",
                "-                mainSessionCtrl.getUserId(), componentId, spaceId);",
                "+            .warn(\"User {0} not allowed to access application {1} in space {2}\", mainSessionCtrl.getUserId(), componentId, spaceId);",
                "         destination = ResourceLocator.getGeneralSettingBundle()",
                "@@ -208,34 +205,11 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "       }",
                "-      component = setComponentSessionController(session, mainSessionCtrl, spaceId, componentId);",
                "+      ctrl = setComponentSessionController(session, mainSessionCtrl, spaceId, componentId);",
                "+      registerManualUserNotificationSupplier(componentId, ctrl);",
                "     }",
                "-    MultiSilverpeasBundle resources =",
                "-        new MultiSilverpeasBundle(component.getMultilang(), component.getIcon(), component.getSettings(),",
                "-            component.getLanguage());",
                "-    request.setAttribute(\"resources\", resources);",
                "-    String[] browseContext = new String[]{component.getSpaceLabel(), component.getComponentLabel(),",
                "-        component.getSpaceId(), component.getComponentId(), component.getComponentUrl()};",
                "-    request.setAttribute(\"browseContext\", browseContext);",
                "-    request.setAttribute(\"myComponentURL\", URLUtil.getApplicationURL() + component.",
                "-        getComponentUrl());",
                "+    setNavigationContext(request, ctrl);",
                "     HttpRequest httpRequest = HttpRequest.decorate(request);",
                "-    if (!\"Idle.jsp\".equals(function) && !\"ChangeSearchTypeToExpert\".equals(function) &&",
                "-        !\"markAsRead\".equals(function)) {",
                "-      GraphicElementFactory gef = (GraphicElementFactory) session",
                "-          .getAttribute(GraphicElementFactory.GE_FACTORY_SESSION_ATT);",
                "-      gef.setComponentIdForCurrentRequest(component.getComponentId());",
                "-      gef.setHttpRequest(httpRequest);",
                "-    }",
                "-",
                "-    // notify silverstatistics",
                "-    if (function.equals(\"Main\") || function.startsWith(\"searchResult\") ||",
                "-        function.startsWith(\"portlet\") || function.equals(\"GoToFilesTab\")) {",
                "-      // only for instanciable components",
                "-      if (componentId != null) {",
                "-        SilverStatisticsManager.getInstance()",
                "-            .addStatAccess(component.getUserId(), new Date(), component.getComponentName(),",
                "-                component.getSpaceId(), component.getComponentId());",
                "-      }",
                "-    }",
                "+    initGraphicElementFactory(httpRequest, session, function, ctrl);",
                "+    updateSilverStatistics(componentId, function, ctrl);",
                "@@ -250,17 +224,3 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "     UserSubscriptionNotificationSendingHandler.verifyRequest(request);",
                "-",
                "-    // retourne la page jsp de destination et place dans la request les objets",
                "-    // utilises par cette page",
                "-    if (checkUserAuthorization(function, component)) {",
                "-      if (\"EditComponentInstanceIntro\".equals(function)) {",
                "-        destination = getComponentInstanceIntroDestination(component);",
                "-      } else {",
                "-        destination = getDestination(function, component, httpRequest);",
                "-      }",
                "-    } else {",
                "-      SilverLogger.getLogger(this)",
                "-          .warn(\"User {0} not allowed to invoke {1} for application {2}\",",
                "-              component.getUserId(), function, componentId);",
                "-      destination = \"/admin/jsp/accessForbidden.jsp\";",
                "-    }",
                "+    destination = computeNextDestination(httpRequest, componentId, function, ctrl);",
                "@@ -272,3 +232,3 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "     // Check existence of a transverse exception",
                "-    SilverpeasTransverseWebErrorUtil.verifyErrorFromRequest(request, component.getLanguage());",
                "+    SilverpeasTransverseWebErrorUtil.verifyErrorFromRequest(request, ctrl.getLanguage());",
                "@@ -285,6 +245,75 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "-    request.setAttribute(getSessionControlBeanName(), component);",
                "+    request.setAttribute(getSessionControlBeanName(), ctrl);",
                "+",
                "+    return destination;",
                "+",
                "+  }",
                "+",
                "+  private void registerManualUserNotificationSupplier(final String componentId, final T ctrl) {",
                "+    if (StringUtil.isNotDefined(componentId)) {",
                "+      final String componentName = getSessionControlBeanName();",
                "+      ManualUserNotificationSuppliers suppliers =",
                "+          ServiceProvider.getService(ManualUserNotificationSuppliers.class);",
                "+      suppliers.set(componentName, ctrl.getManualUserNotificationSupplier());",
                "+    } else if (!PersonalComponentInstance.from(componentId).isPresent()) {",
                "+      final String componentName = ComponentInst.getComponentName(componentId);",
                "+      ManualUserNotificationSuppliers suppliers =",
                "+          ServiceProvider.getService(ManualUserNotificationSuppliers.class);",
                "+      suppliers.set(componentName, ctrl.getManualUserNotificationSupplier());",
                "+    }",
                "+  }",
                "+  private String computeNextDestination(final HttpRequest httpRequest, final String componentId,",
                "+      final String function, final T component) {",
                "+    final String",
                "+        destination;// retourne la page jsp de destination et place dans la request les objets",
                "+    // utilises par cette page",
                "+    if (checkUserAuthorization(function, component)) {",
                "+      if (\"EditComponentInstanceIntro\".equals(function)) {",
                "+        destination = getComponentInstanceIntroDestination(component);",
                "+      } else {",
                "+        destination = getDestination(function, component, httpRequest);",
                "+      }",
                "+    } else {",
                "+      SilverLogger.getLogger(this)",
                "+          .warn(\"User {0} not allowed to invoke {1} for application {2}\", component.getUserId(),",
                "+              function, componentId);",
                "+      destination = \"/admin/jsp/accessForbidden.jsp\";",
                "+    }",
                "     return destination;",
                "+  }",
                "+  private void updateSilverStatistics(final String componentId, final String function,",
                "+      final T component) {",
                "+    // notify silverstatistics",
                "+    if (componentId != null && function.equals(\"Main\") || function.startsWith(\"searchResult\") ||",
                "+        function.startsWith(\"portlet\") || function.equals(\"GoToFilesTab\")) {",
                "+      // only for instanciable components",
                "+      SilverStatisticsManager.getInstance()",
                "+          .addStatAccess(component.getUserId(), new Date(), component.getComponentName(),",
                "+              component.getSpaceId(), component.getComponentId());",
                "+    }",
                "+  }",
                "+",
                "+  private void initGraphicElementFactory(final HttpRequest httpRequest, final HttpSession session,",
                "+      final String function, final T component) {",
                "+    if (!\"Idle.jsp\".equals(function) && !\"ChangeSearchTypeToExpert\".equals(function) &&",
                "+        !\"markAsRead\".equals(function)) {",
                "+      GraphicElementFactory gef = (GraphicElementFactory) session.getAttribute(",
                "+          GraphicElementFactory.GE_FACTORY_SESSION_ATT);",
                "+      gef.setComponentIdForCurrentRequest(component.getComponentId());",
                "+      gef.setHttpRequest(httpRequest);",
                "+    }",
                "+  }",
                "+",
                "+  private void setNavigationContext(final HttpServletRequest request, final T component) {",
                "+    MultiSilverpeasBundle resources =",
                "+        new MultiSilverpeasBundle(component.getMultilang(), component.getIcon(),",
                "+            component.getSettings(), component.getLanguage());",
                "+    request.setAttribute(\"resources\", resources);",
                "+    String[] browseContext = new String[]{component.getSpaceLabel(), component.getComponentLabel(),",
                "+        component.getSpaceId(), component.getComponentId(), component.getComponentUrl()};",
                "+    request.setAttribute(\"browseContext\", browseContext);",
                "+    request.setAttribute(\"myComponentURL\", URLUtil.getApplicationURL() + component.",
                "+        getComponentUrl());",
                "   }",
                "@@ -292,2 +321,3 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "   public void updateSessionManagement(HttpSession session, String destination) {",
                "+    StringUtil.requireDefined(destination);",
                "     SessionManagement sessionManagement = SessionManagementProvider.getSessionManagement();",
                "@@ -351,4 +381,3 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "             new PeasCoreException(\"ComponentRequestRouter.redirectService\",",
                "-                SilverTrace.TRACE_LEVEL_ERROR, \"peasCore.EX_REDIRECT_SERVICE_FAILED\",",
                "-                \"Destination=\" + destination, e));",
                "+                \"peasCore.EX_REDIRECT_SERVICE_FAILED\", \"Destination=\" + destination, e));",
                "         getServletConfig().getServletContext().getRequestDispatcher(\"/admin/jsp/errorpageMain.jsp\")",
                "@@ -365,3 +394,3 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "   @SuppressWarnings(\"UnusedParameters\")",
                "-  static public String[] getComponentId(HttpServletRequest request,",
                "+  public static String[] getComponentId(HttpServletRequest request,",
                "       MainSessionController mainSessionCtrl) {",
                "@@ -383,6 +412,6 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "     if (componentId == null) {",
                "-      return (T) session.getAttribute(\"Silverpeas_\" + getSessionControlBeanName());",
                "+      return (T) session.getAttribute(SESSION_ATTR_PREFIX + getSessionControlBeanName());",
                "     }",
                "-    return (T) session",
                "-        .getAttribute(\"Silverpeas_\" + getSessionControlBeanName() + \"_\" + componentId);",
                "+    return (T) session.getAttribute(",
                "+        SESSION_ATTR_PREFIX + getSessionControlBeanName() + \"_\" + componentId);",
                "   }",
                "@@ -397,6 +426,6 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "     if (componentId == null) {",
                "-      session.setAttribute(\"Silverpeas_\" + getSessionControlBeanName(), component);",
                "+      session.setAttribute(SESSION_ATTR_PREFIX + getSessionControlBeanName(), component);",
                "     } else {",
                "-      session",
                "-          .setAttribute(\"Silverpeas_\" + getSessionControlBeanName() + \"_\" + componentId, component);",
                "+      session.setAttribute(SESSION_ATTR_PREFIX + getSessionControlBeanName() + \"_\" + componentId,",
                "+          component);",
                "     }",
                "@@ -424,7 +453,5 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "       }",
                "-    } else if (isDefined(spaceId)) {",
                "-      if (gef != null && helper != null) {",
                "-        helper.setSpaceId(spaceId);",
                "-        gef.setSpaceIdForCurrentRequest(spaceId);",
                "-      }",
                "+    } else if (isDefined(spaceId) && gef != null && helper != null) {",
                "+      helper.setSpaceId(spaceId);",
                "+      gef.setSpaceIdForCurrentRequest(spaceId);",
                "     }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/SilverpeasHttpServlet.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/SilverpeasHttpServlet.java",
                "index 1c731f8173..ba785fc764 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/SilverpeasHttpServlet.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/SilverpeasHttpServlet.java",
                "@@ -113,3 +113,3 @@ public class SilverpeasHttpServlet extends HttpServlet {",
                "   protected void throwHttpPreconditionFailedError() {",
                "-    throw new HttpError(HttpServletResponse.SC_PRECONDITION_FAILED);",
                "+    throw preconditionFailed(\"\");",
                "   }",
                "@@ -123,3 +123,3 @@ public class SilverpeasHttpServlet extends HttpServlet {",
                "   protected void throwHttpForbiddenError() {",
                "-    throw new HttpError(HttpServletResponse.SC_FORBIDDEN);",
                "+    throw forbidden(\"\");",
                "   }",
                "@@ -133,3 +133,3 @@ public class SilverpeasHttpServlet extends HttpServlet {",
                "   protected void throwHttpNotFoundError() {",
                "-    throw new HttpError(HttpServletResponse.SC_NOT_FOUND);",
                "+    throw notFound(\"\");",
                "   }",
                "@@ -143,3 +143,3 @@ public class SilverpeasHttpServlet extends HttpServlet {",
                "   protected void throwHttpPreconditionFailedError(String message) {",
                "-    throw new HttpError(HttpServletResponse.SC_PRECONDITION_FAILED, message);",
                "+    throw preconditionFailed(message);",
                "   }",
                "@@ -153,3 +153,3 @@ public class SilverpeasHttpServlet extends HttpServlet {",
                "   protected void throwHttpForbiddenError(String message) {",
                "-    throw new HttpError(HttpServletResponse.SC_FORBIDDEN, message);",
                "+    throw forbidden(message);",
                "   }",
                "@@ -163,3 +163,3 @@ public class SilverpeasHttpServlet extends HttpServlet {",
                "   protected void throwHttpNotFoundError(String message) {",
                "-    throw new HttpError(HttpServletResponse.SC_NOT_FOUND, message);",
                "+    throw notFound(message);",
                "   }",
                "@@ -192,3 +192,2 @@ public class SilverpeasHttpServlet extends HttpServlet {",
                "       }",
                "-      return;",
                "     } catch (IOException e1) {",
                "@@ -198,2 +197,32 @@ public class SilverpeasHttpServlet extends HttpServlet {",
                "+  protected HttpError preconditionFailed(final String msg) {",
                "+    final HttpError error;",
                "+    if (StringUtil.isDefined(msg)) {",
                "+      error = new HttpError(HttpServletResponse.SC_PRECONDITION_FAILED, msg);",
                "+    } else {",
                "+      error = new HttpError(HttpServletResponse.SC_PRECONDITION_FAILED);",
                "+    }",
                "+    return error;",
                "+  }",
                "+",
                "+  protected HttpError forbidden(final String msg) {",
                "+    final HttpError error;",
                "+    if (StringUtil.isDefined(msg)) {",
                "+      error = new HttpError(HttpServletResponse.SC_FORBIDDEN, msg);",
                "+    } else {",
                "+      error = new HttpError(HttpServletResponse.SC_FORBIDDEN);",
                "+    }",
                "+    return error;",
                "+  }",
                "+",
                "+  protected HttpError notFound(final String msg) {",
                "+    final HttpError error;",
                "+    if (StringUtil.isDefined(msg)) {",
                "+      error = new HttpError(HttpServletResponse.SC_NOT_FOUND, msg);",
                "+    } else {",
                "+      error = new HttpError(HttpServletResponse.SC_NOT_FOUND);",
                "+    }",
                "+    return error;",
                "+  }",
                "+",
                "   protected static class UserSessionStatus {",
                "@@ -230,3 +259,3 @@ public class SilverpeasHttpServlet extends HttpServlet {",
                "    */",
                "-  private class HttpError extends RuntimeException {",
                "+  protected class HttpError extends RuntimeException {",
                "     private static final long serialVersionUID = -4303217388313620495L;",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentController.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentController.java",
                "index 3dd9d09b08..51b192d68b 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentController.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentController.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.web.mvc.webcomponent;",
                "+import org.silverpeas.core.notification.user.UserNotification;",
                " import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;",
                "@@ -29,2 +30,5 @@ import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "+import java.util.Map;",
                "+import java.util.function.Function;",
                "+",
                " /**",
                "@@ -33,7 +37,6 @@ import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "  * web.xml.",
                "- * @param <WEB_COMPONENT_REQUEST_CONTEXT>",
                "+ * @param <T> the type of the implementation of the {@link WebComponentRequestContext} class.",
                "  * @author Yohann Chastagnier",
                "  */",
                "-public abstract class WebComponentController<WEB_COMPONENT_REQUEST_CONTEXT extends",
                "-    WebComponentRequestContext>",
                "+public abstract class WebComponentController<T extends WebComponentRequestContext>",
                "     extends AbstractComponentSessionController {",
                "@@ -42,2 +45,12 @@ public abstract class WebComponentController<WEB_COMPONENT_REQUEST_CONTEXT exten",
                "+  /**",
                "+   * This static method has to be implemented by each web component controller concrete class if",
                "+   * the corresponding Silverpeas component supports the manual notification.",
                "+   * @return a provider of {@link UserNotification} objects for manual notification. By default,",
                "+   * returns null.",
                "+   */",
                "+  public static Function<Map<String, String>, UserNotification> getManualUserNotificationProvider() {",
                "+    return null;",
                "+  }",
                "+",
                "   public WebComponentController(final MainSessionController controller, final String spaceId,",
                "@@ -73,3 +86,3 @@ public abstract class WebComponentController<WEB_COMPONENT_REQUEST_CONTEXT exten",
                "    */",
                "-  protected abstract void onInstantiation(final WEB_COMPONENT_REQUEST_CONTEXT context);",
                "+  protected abstract void onInstantiation(final T context);",
                "@@ -80,3 +93,3 @@ public abstract class WebComponentController<WEB_COMPONENT_REQUEST_CONTEXT exten",
                "    */",
                "-  protected void beforeRequestProcessing(WEB_COMPONENT_REQUEST_CONTEXT context) {",
                "+  protected void beforeRequestProcessing(T context) {",
                "     context.getRequest().setAttribute(\"currentUser\", context.getUser());",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentManager.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentManager.java",
                "index e60b384ed6..b55e061928 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentManager.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentManager.java",
                "@@ -27,3 +27,2 @@ import org.silverpeas.core.cache.model.SimpleCache;",
                " import org.silverpeas.core.cache.service.CacheServiceProvider;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                " import org.silverpeas.core.util.StringUtil;",
                "@@ -32,3 +31,2 @@ import org.silverpeas.core.util.logging.SilverLogger;",
                " import org.silverpeas.core.web.http.HttpRequest;",
                "-import org.silverpeas.core.web.mvc.util.AccessForbiddenException;",
                " import org.silverpeas.core.web.mvc.webcomponent.annotation.*;",
                "@@ -44,2 +42,3 @@ import javax.ws.rs.WebApplicationException;",
                " import javax.ws.rs.core.MediaType;",
                "+import javax.ws.rs.core.Response;",
                " import javax.ws.rs.core.UriBuilder;",
                "@@ -57,4 +56,3 @@ import java.util.concurrent.ConcurrentHashMap;",
                " import static org.silverpeas.core.util.StringUtil.isDefined;",
                "-import static org.silverpeas.core.web.mvc.webcomponent.NavigationContext.NavigationStep",
                "-    .PREVIOUS_PAGE_FULL_URI_ID;",
                "+import static org.silverpeas.core.web.mvc.webcomponent.NavigationContext.NavigationStep.PREVIOUS_PAGE_FULL_URI_ID;",
                " import static org.silverpeas.core.web.mvc.webcomponent.PathExecutionResponse.hasProduced;",
                "@@ -87,10 +85,9 @@ public class WebComponentManager {",
                "    * @param response the response itself.",
                "-   * @param <CONTROLLER> the type of the Web Component Controller that provides a lot of stuff",
                "+   * @param <T> the type of the Web Component Controller that provides a lot of stuff",
                "    * around",
                "    * the component, the user, etc.",
                "-   * @param <WEB_COMPONENT_REQUEST_CONTEXT> the type of the web component request context.",
                "+   * @param <R> the type of the web component request context.",
                "    */",
                "-  public static <CONTROLLER extends WebComponentController<WEB_COMPONENT_REQUEST_CONTEXT>,",
                "-      WEB_COMPONENT_REQUEST_CONTEXT extends WebComponentRequestContext> void manageRequestFor(",
                "-      Class<CONTROLLER> webComponentControllerClass, Class<? extends Annotation> httpMethodClass,",
                "+  public static <T extends WebComponentController<R>, R extends WebComponentRequestContext> void manageRequestFor(",
                "+      Class<T> webComponentControllerClass, Class<? extends Annotation> httpMethodClass,",
                "       HttpRequest request, HttpServletResponse response) {",
                "@@ -113,3 +110,3 @@ public class WebComponentManager {",
                "       // Retrieving the class of the web context associated to the given resource.",
                "-      Class<WEB_COMPONENT_REQUEST_CONTEXT> webComponentContextClass = ClassAnnotationUtil",
                "+      Class<R> webComponentContextClass = ClassAnnotationUtil",
                "           .searchParameterizedTypeFrom(WebComponentRequestContext.class,",
                "@@ -119,3 +116,3 @@ public class WebComponentManager {",
                "         // Instantiating, and caching into the request, the web context.",
                "-        WEB_COMPONENT_REQUEST_CONTEXT webComponentContext = webComponentContextClass.newInstance();",
                "+        R webComponentContext = webComponentContextClass.newInstance();",
                "         webComponentContext.setHttpMethodClass(httpMethodClass);",
                "@@ -325,4 +322,4 @@ public class WebComponentManager {",
                "    * @param path the path that must be matched in finding of the method to invoke.",
                "-   * @param <CONTROLLER> the type of the resource which hosts the method that must be invoked.",
                "-   * @param <WEB_COMPONENT_REQUEST_CONTEXT> the type of the web component context.",
                "+   * @param <T> the type of the resource which hosts the method that must be invoked.",
                "+   * @param <R> the type of the web component context.",
                "    * @return the resulting of processing.",
                "@@ -331,10 +328,7 @@ public class WebComponentManager {",
                "   @SuppressWarnings({\"unchecked\", \"ConstantConditions\"})",
                "-  public static <CONTROLLER extends WebComponentController<WEB_COMPONENT_REQUEST_CONTEXT>,",
                "-      WEB_COMPONENT_REQUEST_CONTEXT extends WebComponentRequestContext> PathExecutionResponse",
                "-  perform(",
                "-      CONTROLLER webComponentController, String path) throws Exception {",
                "+  public static <T extends WebComponentController<R>, R extends WebComponentRequestContext> PathExecutionResponse perform(",
                "+      T webComponentController, String path) throws Exception {",
                "     // Retrieving the web component request context",
                "-    WEB_COMPONENT_REQUEST_CONTEXT webComponentRequestContext =",
                "-        (WEB_COMPONENT_REQUEST_CONTEXT) CacheServiceProvider.getRequestCacheService().getCache()",
                "+    R webComponentRequestContext = (R) CacheServiceProvider.getRequestCacheService().getCache()",
                "             .get(WebComponentRequestContext.class.getName());",
                "@@ -373,4 +367,4 @@ public class WebComponentManager {",
                "    * @param webComponentContext the context of the web component routing.",
                "-   * @param <CONTROLLER> the type of the resource which hosts the method that must be invoked.",
                "-   * @param <WEB_COMPONENT_REQUEST_CONTEXT> the type of the web component context.",
                "+   * @param <T> the type of the resource which hosts the method that must be invoked.",
                "+   * @param <R> the type of the web component context.",
                "    * @return the {@link PathExecutionResponse} instance.",
                "@@ -378,7 +372,4 @@ public class WebComponentManager {",
                "    */",
                "-  private <CONTROLLER extends WebComponentController<WEB_COMPONENT_REQUEST_CONTEXT>,",
                "-      WEB_COMPONENT_REQUEST_CONTEXT extends WebComponentRequestContext> PathExecutionResponse",
                "-  executePath(",
                "-      CONTROLLER webComponentController, String path,",
                "-      WEB_COMPONENT_REQUEST_CONTEXT webComponentContext) throws Exception {",
                "+  private <T extends WebComponentController<R>, R extends WebComponentRequestContext> PathExecutionResponse",
                "+  executePath(T webComponentController, String path, R webComponentContext) throws Exception {",
                "     org.silverpeas.core.web.mvc.webcomponent.Path pathToPerform = null;",
                "@@ -429,6 +420,5 @@ public class WebComponentManager {",
                "         // No redirection on access error",
                "-        webComponentContext.getResponse().sendError(HttpServletResponse.SC_FORBIDDEN);",
                "-        throw new AccessForbiddenException(\"WebRouteManager.executePath\", SilverpeasException.ERROR,",
                "+        throw new WebApplicationException(",
                "             \"User id \" + webComponentContext.getUser().getId() + \" has not right access to \" +",
                "-                webComponentContext.getRequest().getRequestURI());",
                "+                webComponentContext.getRequest().getRequestURI(), Response.Status.FORBIDDEN);",
                "       }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestContext.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestContext.java",
                "index 39e0620915..c8eb947613 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestContext.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestContext.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.web.mvc.webcomponent;",
                "+import org.silverpeas.core.SilverpeasRuntimeException;",
                " import org.silverpeas.core.admin.user.model.SilverpeasRole;",
                "@@ -53,7 +54,7 @@ import java.util.regex.Pattern;",
                " /**",
                "- * @param <CONTROLLER>",
                "+ * @param <T> The type of the implementation of the {@link WebComponentController} abstract class.",
                "  * @author Yohann Chastagnier",
                "  */",
                "-public class WebComponentRequestContext<CONTROLLER extends WebComponentController> {",
                "-  private final static Pattern REDIRECT_VARIABLE_MATCHER = Pattern.compile(\"(\\\\{[\\\\w_]+\\\\})+\");",
                "+public abstract class WebComponentRequestContext<T extends WebComponentController> {",
                "+  private static final Pattern REDIRECT_VARIABLE_MATCHER = Pattern.compile(\"(\\\\{[\\\\w_]+\\\\})+\");",
                "@@ -62,3 +63,3 @@ public class WebComponentRequestContext<CONTROLLER extends WebComponentControlle",
                "   private HttpServletResponse response;",
                "-  private CONTROLLER controller = null;",
                "+  private T controller = null;",
                "   private boolean comingFromRedirect = false;",
                "@@ -67,4 +68,4 @@ public class WebComponentRequestContext<CONTROLLER extends WebComponentControlle",
                "-  private Map<String, String> pathVariables = new LinkedHashMap<String, String>();",
                "-  private Map<String, String> redirectVariables = new LinkedHashMap<String, String>();",
                "+  private Map<String, String> pathVariables = new LinkedHashMap<>();",
                "+  private Map<String, String> redirectVariables = new LinkedHashMap<>();",
                "   private Collection<SilverpeasRole> userRoles;",
                "@@ -92,3 +93,3 @@ public class WebComponentRequestContext<CONTROLLER extends WebComponentControlle",
                "-  void setController(final CONTROLLER controller) {",
                "+  void setController(final T controller) {",
                "     this.controller = controller;",
                "@@ -119,3 +120,3 @@ public class WebComponentRequestContext<CONTROLLER extends WebComponentControlle",
                "-  CONTROLLER getController() {",
                "+  T getController() {",
                "     return controller;",
                "@@ -356,3 +357,3 @@ public class WebComponentRequestContext<CONTROLLER extends WebComponentControlle",
                "     } catch (RoutingException e) {",
                "-      throw new RuntimeException(e);",
                "+      throw new SilverpeasRuntimeException(e);",
                "     }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestRouter.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestRouter.java",
                "index 75da4c1f26..cab7d871be 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestRouter.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestRouter.java",
                "@@ -25,5 +25,5 @@ package org.silverpeas.core.web.mvc.webcomponent;",
                "+import org.silverpeas.core.web.http.HttpRequest;",
                " import org.silverpeas.core.web.mvc.controller.ComponentContext;",
                " import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "-import org.silverpeas.core.web.http.HttpRequest;",
                " import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;",
                "@@ -38,3 +38,2 @@ import javax.ws.rs.POST;",
                " import javax.ws.rs.PUT;",
                "-import java.io.IOException;",
                "@@ -45,8 +44,6 @@ import java.io.IOException;",
                "  * the component, the user, etc.",
                "- * @param <WEB_COMPONENT_REQUEST_CONTEXT> the type of the web component context.",
                "+ * @param <R> the type of the web component context.",
                "  */",
                "-public final class WebComponentRequestRouter<",
                "-    T extends WebComponentController<WEB_COMPONENT_REQUEST_CONTEXT>,",
                "-    WEB_COMPONENT_REQUEST_CONTEXT extends WebComponentRequestContext<? extends",
                "-        WebComponentController>>",
                "+public final class WebComponentRequestRouter<T extends WebComponentController<R>,",
                "+    R extends WebComponentRequestContext<? extends WebComponentController>>",
                "     extends ComponentRequestRouter<T> {",
                "@@ -54,3 +51,3 @@ public final class WebComponentRequestRouter<",
                "-  private final static String WEB_COMPONENT_CONTROLLER_CLASS_NAME_PARAM =",
                "+  private static final String WEB_COMPONENT_CONTROLLER_CLASS_NAME_PARAM =",
                "       org.silverpeas.core.web.mvc.webcomponent.annotation.WebComponentController.class",
                "@@ -63,4 +60,4 @@ public final class WebComponentRequestRouter<",
                "   @Override",
                "-  public void init(ServletConfig servletConfig) throws ServletException {",
                "-    super.init(servletConfig);",
                "+  public void init() throws ServletException {",
                "+    ServletConfig servletConfig = getServletConfig();",
                "     String webComponentClassName =",
                "@@ -80,2 +77,3 @@ public final class WebComponentRequestRouter<",
                "     }",
                "+    super.init();",
                "   }",
                "@@ -101,4 +99,3 @@ public final class WebComponentRequestRouter<",
                "   @Override",
                "-  protected void doPut(final HttpServletRequest request, final HttpServletResponse response)",
                "-      throws ServletException, IOException {",
                "+  protected void doPut(final HttpServletRequest request, final HttpServletResponse response) {",
                "     WebComponentManager",
                "@@ -109,4 +106,3 @@ public final class WebComponentRequestRouter<",
                "   @Override",
                "-  protected void doDelete(final HttpServletRequest request, final HttpServletResponse response)",
                "-      throws ServletException, IOException {",
                "+  protected void doDelete(final HttpServletRequest request, final HttpServletResponse response) {",
                "     WebComponentManager",
                "@@ -125,4 +121,3 @@ public final class WebComponentRequestRouter<",
                "   @Override",
                "-  public void doGet(final HttpServletRequest request, final HttpServletResponse response)",
                "-      throws ServletException {",
                "+  public void doGet(final HttpServletRequest request, final HttpServletResponse response) {",
                "     WebComponentManager",
                "@@ -135,12 +130,7 @@ public final class WebComponentRequestRouter<",
                "       final HttpRequest request) {",
                "-    String destination = null;",
                "+    String destination;",
                "     try {",
                "       PathExecutionResponse response = WebComponentManager.perform(componentSC, path);",
                "-      if (response.produces().isPresent()) {",
                "-        destination = response.produces().get();",
                "-      } else if (response.navigation().isPresent()) {",
                "-        destination = response.navigation().get().getDestination();",
                "-      } else {",
                "-        throwHttpForbiddenError();",
                "-      }",
                "+      destination = response.produces()",
                "+          .orElseGet(() -> response.navigation().orElseThrow(() -> forbidden(\"\")).getDestination());",
                "     } catch (Exception e) {",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "index 4691558600..9d3d5fdf64 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "@@ -936,2 +936,24 @@ public class JavascriptPluginInclusion {",
                "+  /**",
                "+   * Includes the Silverpeas Messager plugin that handles the message sending from the current user",
                "+   * to one or more other users in Silverpeas.",
                "+   * @param xhtml the HTML container within which the plugin will be inserted.",
                "+   * @param language the language of the current user.",
                "+   * @return the HTML container with the messager.",
                "+   */",
                "+  static ElementContainer includeMessager(final ElementContainer xhtml, final String language) {",
                "+    final LocalizationBundle notifBundle = ResourceLocator.getLocalizationBundle(",
                "+        \"org.silverpeas.notificationUser.multilang.notificationUserBundle\", language);",
                "+    xhtml.addElement(scriptContent(bundleVariableName(\"NotificationBundle\")",
                "+        .add(\"send\", notifBundle.getString(\"Envoyer\"))",
                "+        .add(\"cancel\", notifBundle.getString(\"GML.cancel\"))",
                "+        .add(\"theField\", notifBundle.getString(\"GML.theField\"))",
                "+        .add(\"addressees\", notifBundle.getString(\"addressees\"))",
                "+        .add(\"title\", notifBundle.getString(\"GML.notification.subject\"))",
                "+        .add(\"isRequired\", notifBundle.getString(\"GML.isRequired\"))",
                "+        .produce()));",
                "+    xhtml.addElement(script(JAVASCRIPT_PATH + \"silverpeas-messager.js\"));",
                "+    return xhtml;",
                "+  }",
                "+",
                "   /**",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/WebCommonLookAndFeel.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/WebCommonLookAndFeel.java",
                "index dbedd24bce..446781cd26 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/WebCommonLookAndFeel.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/WebCommonLookAndFeel.java",
                "@@ -226,2 +226,3 @@ class WebCommonLookAndFeel {",
                "         STR_NEW_LINE);",
                "+    code.append(includeMessager(new ElementContainer(), language).toString()).append(STR_NEW_LINE);"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/notification/user/ManualUserNotificationSupplier.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/ManualUserNotificationSuppliers.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/NullUserNotification.java",
                "core-library/src/main/java/org/silverpeas/core/util/URLUtil.java",
                "core-war/src/main/java/org/silverpeas/web/clipboard/servlets/ClipboardRequestRouter.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/Notification.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/controller/ComponentSessionController.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/controller/PeasCoreException.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/SilverpeasHttpServlet.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentController.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentManager.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestContext.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestRouter.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/WebCommonLookAndFeel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9884": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: JSP",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea, application, file, call, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9884",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a88577c0c9665980acd8aa20399925be982a66ee",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1547231356,
            "hunks": 31,
            "message": "Feature #: modifying the interpretation of DC_property in order to user % character as the like operator in SQL.",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/util/StringUtil.java b/core-api/src/main/java/org/silverpeas/core/util/StringUtil.java",
                "index 509c2ca825..fcfecd3996 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/util/StringUtil.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/util/StringUtil.java",
                "@@ -48,2 +48,3 @@ public class StringUtil extends StringUtils {",
                "+",
                "   public static boolean isDefined(String parameter) {",
                "@@ -442,2 +443,78 @@ public class StringUtil extends StringUtils {",
                "+  public static boolean likeIgnoreCase(final String actualValue, String expectedValue) {",
                "+    return new Like(actualValue, expectedValue, true).test();",
                "+  }",
                "+",
                "+  public static boolean like(final String actualValue, String expectedValue) {",
                "+    return new Like(actualValue, expectedValue, false).test();",
                "+  }",
                "+",
                "+  private static class Like {",
                "+    private final String actual;",
                "+    private final String expected;",
                "+    private String currentActual;",
                "+    private int tokenIndex;",
                "+",
                "+    private Like(final String actual, final String expected, final boolean ignoreCase) {",
                "+      if (ignoreCase) {",
                "+        this.actual = defaultStringIfNotDefined(actual).toLowerCase();",
                "+        this.expected = defaultStringIfNotDefined(expected).toLowerCase();",
                "+      } else {",
                "+        this.actual = defaultStringIfNotDefined(actual);",
                "+        this.expected = defaultStringIfNotDefined(expected);",
                "+      }",
                "+    }",
                "+",
                "+    boolean test() {",
                "+      currentActual = actual;",
                "+      tokenIndex = 0;",
                "+      boolean like = true;",
                "+      boolean mustStart = true;",
                "+      String currentToken = nextExpectedToken();",
                "+      while(like && currentToken != null) {",
                "+        if (currentToken.isEmpty()) {",
                "+          mustStart = false;",
                "+          tokenIndex++;",
                "+        } else {",
                "+          like = verifyToken(currentToken, mustStart);",
                "+          mustStart = true;",
                "+        }",
                "+        currentToken = nextExpectedToken();",
                "+      }",
                "+      return like && (!mustStart || currentActual.isEmpty());",
                "+    }",
                "+",
                "+    private boolean verifyToken(final String token, final boolean mustStart) {",
                "+      final String escapedToken = token.replace(\"\\\\%\", \"%\");",
                "+      final int currentIndex = currentActual.indexOf(escapedToken);",
                "+      final int nextActualIndex = currentIndex + escapedToken.length();",
                "+      currentActual = nextActualIndex < currentActual.length()",
                "+          ? currentActual.substring(nextActualIndex)",
                "+          : \"\";",
                "+      tokenIndex += token.length();",
                "+      return mustStart ? currentIndex == 0 : currentIndex >= 0;",
                "+    }",
                "+",
                "+    private String nextExpectedToken() {",
                "+      if (tokenIndex >= expected.length()) {",
                "+        return null;",
                "+      }",
                "+      int index = expected.indexOf('%', tokenIndex);",
                "+      boolean found = false;",
                "+      while(!found) {",
                "+        if (index < 0) {",
                "+          index = expected.length();",
                "+          found = true;",
                "+        } else if (index > 0 && expected.charAt(index - 1) != '\\\\') {",
                "+          found = true;",
                "+        } else if (index == 0) {",
                "+          found = true;",
                "+        } else {",
                "+          index = expected.indexOf('%', index + 1);",
                "+        }",
                "+      }",
                "+      return expected.substring(tokenIndex, index);",
                "+    }",
                "+  }",
                "+",
                "   private StringUtil() {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SPUser.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SPUser.java",
                "index eed07ad468..0d857c0a6f 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SPUser.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SPUser.java",
                "@@ -45,22 +45,25 @@ import java.util.Set;",
                " @Table(name = \"domainsp_user\")",
                "-@NamedQueries({@NamedQuery(name = \"SPUser.findByFirstname\",",
                "-    query = \"SELECT s FROM SPUser s WHERE s.firstname = :firstname\"),",
                "+@NamedQueries({",
                "+    @NamedQuery(name = \"SPUser.findByFirstname\",",
                "+        query = \"SELECT s FROM SPUser s WHERE lower(s.firstname) like lower(:firstname)\"),",
                "     @NamedQuery(name = \"SPUser.findByLastname\",",
                "-        query = \"SELECT s FROM SPUser s WHERE s.lastname = :lastname\"),",
                "+        query = \"SELECT s FROM SPUser s WHERE lower(s.lastname) like lower(:lastname)\"),",
                "     @NamedQuery(name = \"SPUser.findByPhone\",",
                "-        query = \"SELECT s FROM SPUser s WHERE s.phone = :phone\"),",
                "+        query = \"SELECT s FROM SPUser s WHERE lower(s.phone) like lower(:phone)\"),",
                "     @NamedQuery(name = \"SPUser.findByHomephone\",",
                "-        query = \"SELECT s FROM SPUser s WHERE s.homephone = :homephone\"),",
                "+        query = \"SELECT s FROM SPUser s WHERE lower(s.homephone) like lower(:homephone)\"),",
                "     @NamedQuery(name = \"SPUser.findByCellphone\",",
                "-        query = \"SELECT s FROM SPUser s WHERE s.cellphone = :cellphone\"),",
                "-    @NamedQuery(name = \"SPUser.findByFax\", query = \"SELECT s FROM SPUser s WHERE s.fax = :fax\"),",
                "+        query = \"SELECT s FROM SPUser s WHERE lower(s.cellphone) like lower(:cellphone)\"),",
                "+    @NamedQuery(name = \"SPUser.findByFax\",",
                "+        query = \"SELECT s FROM SPUser s WHERE lower(s.fax) like lower(:fax)\"),",
                "     @NamedQuery(name = \"SPUser.findByAddress\",",
                "-        query = \"SELECT s FROM SPUser s WHERE s.address = :address\"),",
                "+        query = \"SELECT s FROM SPUser s WHERE lower(s.address) like lower(:address)\"),",
                "     @NamedQuery(name = \"SPUser.findByTitle\",",
                "-        query = \"SELECT s FROM SPUser s WHERE s.title = :title\"),",
                "+        query = \"SELECT s FROM SPUser s WHERE lower(s.title) like lower(:title)\"),",
                "     @NamedQuery(name = \"SPUser.findByCompany\",",
                "-        query = \"SELECT s FROM SPUser s WHERE s.company = :company\"),",
                "+        query = \"SELECT s FROM SPUser s WHERE lower(s.company) like lower(:company)\"),",
                "     @NamedQuery(name = \"SPUser.findByPosition\",",
                "-        query = \"SELECT s FROM SPUser s WHERE s.position = :position\"),",
                "-    @NamedQuery(name = \"SPUser.findByBoss\", query = \"SELECT s FROM SPUser s WHERE s.boss = :boss\"),",
                "+        query = \"SELECT s FROM SPUser s WHERE lower(s.position) like lower(:position)\"),",
                "+    @NamedQuery(name = \"SPUser.findByBoss\",",
                "+        query = \"SELECT s FROM SPUser s WHERE lower(s.boss) like lower(:boss)\"),",
                "     @NamedQuery(name = \"SPUser.findByLogin\",",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "index e339ba0f9f..e576c27091 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "@@ -38,3 +38,2 @@ import java.util.List;",
                " import java.util.Map;",
                "-import java.util.Objects;",
                " import java.util.Optional;",
                "@@ -48,2 +47,3 @@ import static org.silverpeas.core.admin.user.constant.UserState.DEACTIVATED;",
                " import static org.silverpeas.core.admin.user.constant.UserState.VALID;",
                "+import static org.silverpeas.core.util.StringUtil.likeIgnoreCase;",
                "@@ -189,3 +189,3 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "           final String attributeValue = (String) resolve(u, attributePathDecoder);",
                "-          return Objects.equals(attributeValue, propertyValue);",
                "+          return likeIgnoreCase(attributeValue, propertyValue);",
                "         }).map(userDetailMapper).toArray(UserDetail[]::new);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "index 0366e5d1fa..22399924af 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "@@ -33,8 +33,5 @@ import java.util.ArrayList;",
                " import java.util.Collections;",
                "-import java.util.HashMap;",
                " import java.util.List;",
                " import java.util.Map;",
                "-import java.util.Objects;",
                " import java.util.Set;",
                "-import java.util.function.BiPredicate;",
                " import java.util.function.Function;",
                "@@ -103,3 +100,2 @@ class GoogleUserFilter<T extends GenericJson> {",
                "   private static final String CRITERION_PART_DECODER = \"(?i)^\\\\s*(\\\\S+)\\\\s*\";",
                "-  private static final Map<String, BiPredicate<String, String>> OPERATORS = new HashMap<>(4);",
                "   private final List<T> allUsers;",
                "@@ -234,12 +230,3 @@ class GoogleUserFilter<T extends GenericJson> {",
                "     } else {",
                "-      final BiPredicate<String, String> ope = OPERATORS.get(criterionDecoder.getOperator());",
                "-      if (ope == null) {",
                "-        throw new UserFilterException(BAD_OPERATOR).withCriterion(criterion)",
                "-            .withPath(path).withPathPart(attr);",
                "-      }",
                "-      Object o = attributeValues.get(attr);",
                "-      if (o != null) {",
                "-        o = o.toString().toLowerCase();",
                "-      }",
                "-      filterResult = ope.test((String) o, expectedValue);",
                "+      filterResult = likeIgnoreCase((String) attributeValues.get(attr), expectedValue);",
                "     }",
                "@@ -372,11 +359,3 @@ class GoogleUserFilter<T extends GenericJson> {",
                "       if (match) {",
                "-        path = explodedCriterion[0];",
                "-        final String lastChar = String.valueOf(path.charAt(path.length() - 1));",
                "-        operator = lastChar + \"=\";",
                "-        if (!OPERATORS.containsKey(operator)) {",
                "-          operator = \"=\";",
                "-        } else {",
                "-          path = path.substring(0, path.length() - 1);",
                "-        }",
                "-        path = path.replaceAll(CRITERION_PART_DECODER, \"$1\");",
                "+        path = explodedCriterion[0].replaceAll(CRITERION_PART_DECODER, \"$1\");",
                "         explodedPath = path.split(\"[.]\");",
                "@@ -445,9 +424,2 @@ class GoogleUserFilter<T extends GenericJson> {",
                "   }",
                "-",
                "-  static {",
                "-    OPERATORS.put(\"^=\", String::startsWith);",
                "-    OPERATORS.put(\"$=\", String::endsWith);",
                "-    OPERATORS.put(\"*=\", String::contains);",
                "-    OPERATORS.put(\"=\", Objects::equals);",
                "-  }",
                " }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUtility.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUtility.java",
                "index c0b68a78bb..5c913a3796 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUtility.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUtility.java",
                "@@ -369,2 +369,5 @@ public class LDAPUtility {",
                "           break;",
                "+        case '%':",
                "+          sb.append(\"*\");",
                "+          break;",
                "         case '(':",
                "@@ -382,3 +385,3 @@ public class LDAPUtility {",
                "     }",
                "-    return sb.toString();",
                "+    return sb.toString().replace(\"\\\\5c*\", \"%\");",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLUserTable.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLUserTable.java",
                "index 5db3b2cc8a..024d165fee 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLUserTable.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLUserTable.java",
                "@@ -203,3 +203,3 @@ public class SQLUserTable {",
                "     PreparedStatement statement = null;",
                "-    List<Integer> theResult = new ArrayList<Integer>();",
                "+    List<Integer> theResult = new ArrayList<>();",
                "     String theQuery = \"select \" + drvSettings.getUserSpecificIdColumnName()",
                "@@ -227,3 +227,3 @@ public class SQLUserTable {",
                "     PreparedStatement statement = null;",
                "-    List<UserDetail> theResult = new ArrayList<UserDetail>();",
                "+    List<UserDetail> theResult = new ArrayList<>();",
                "     String theQuery = \"select \" + getColumns() + \" from \"",
                "@@ -252,6 +252,6 @@ public class SQLUserTable {",
                "     PreparedStatement statement = null;",
                "-    List<UserDetail> theResult = new ArrayList<UserDetail>();",
                "+    List<UserDetail> theResult = new ArrayList<>();",
                "     String theQuery = \"select \" + getColumns() + \" from \"",
                "         + drvSettings.getUserTableName();",
                "-    theQuery += \" where \" + propertyName + \" = ? \";",
                "+    theQuery += \" where lower(\" + propertyName + \") like lower(?) \";",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/content/form/record/GenericRecordSetManager.java b/core-library/src/main/java/org/silverpeas/core/contribution/content/form/record/GenericRecordSetManager.java",
                "index 4e3a01b145..d65033c1b3 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/content/form/record/GenericRecordSetManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/content/form/record/GenericRecordSetManager.java",
                "@@ -1298,3 +1298,7 @@ public class GenericRecordSetManager {",
                "           \" tpl WHERE tpl.templateid = ? AND rec.templateId = tpl.templateId AND tf.recordId = rec.recordId\" +",
                "-          \" AND tf.fieldName = ? AND (tf.fieldvalue = ? OR tf.fieldvalue like ? OR tf.fieldvalue like ? OR tf.fieldvalue like ?)\";",
                "+          \" AND tf.fieldName = ? \" +",
                "+          \" AND (lower(tf.fieldvalue) like lower(?)\" +",
                "+          \"  OR lower(tf.fieldvalue) like lower(?)\" +",
                "+          \"  OR lower(tf.fieldvalue) like lower(?)\" +",
                "+          \"  OR lower(tf.fieldvalue) like lower(?))\";",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "index 6bf267ff91..9e13336b56 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "@@ -43,3 +43,2 @@ import org.silverpeas.core.template.SilverpeasTemplate;",
                " import org.silverpeas.core.template.SilverpeasTemplateFactory;",
                "-import org.silverpeas.core.util.Charsets;",
                " import org.silverpeas.core.util.ServiceProvider;",
                "@@ -64,3 +63,2 @@ import org.silverpeas.web.jobdomain.control.JobDomainPeasSessionController;",
                " import javax.servlet.http.HttpServletRequest;",
                "-import java.net.URLDecoder;",
                " import java.util.ArrayList;",
                "@@ -899,4 +897,3 @@ public class JobDomainPeasRequestRouter extends",
                "     try {",
                "-      final String encodedRule = defaultStringIfNotDefined(request.getParameter(DOMAIN_USER_FILTER_RULE_PARAM));",
                "-      final String newRule = URLDecoder.decode(encodedRule, Charsets.UTF_8.name());",
                "+      final String newRule = defaultStringIfNotDefined(request.getParameter(DOMAIN_USER_FILTER_RULE_PARAM));",
                "       if (\"verify\".equals(action)) {"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/util/StringUtil.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SPUser.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUtility.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLUserTable.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/content/form/record/GenericRecordSetManager.java",
                "core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: core-api/src/main/java/org/silverpeas/core/util/StringUtil.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "5c96cf985b6b019f97515d98e422e792ef397974",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1544785757,
            "hunks": 11,
            "message": "Sending an HTTP forbidden code error when detecting transversal path for HTTP header X-FULL-PATH.",
            "diff": [
                "diff --git a/core-web/src/main/java/org/silverpeas/core/webapi/upload/FileUploadData.java b/core-web/src/main/java/org/silverpeas/core/webapi/upload/FileUploadData.java",
                "index 1d0d708b3f..5519096e7b 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/webapi/upload/FileUploadData.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/webapi/upload/FileUploadData.java",
                "@@ -27,6 +27,13 @@ import org.silverpeas.core.util.Charsets;",
                " import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                " import javax.servlet.http.HttpServletRequest;",
                "+import javax.ws.rs.WebApplicationException;",
                "+import javax.ws.rs.core.Response;",
                " import java.io.File;",
                "+import java.io.UnsupportedEncodingException;",
                " import java.net.URLDecoder;",
                "+import java.time.LocalDateTime;",
                "+",
                "+import static org.silverpeas.core.util.StringUtil.isDefined;",
                "@@ -37,5 +44,5 @@ public class FileUploadData {",
                "-  final static String X_COMPONENT_INSTANCE_ID = \"X-COMPONENT-INSTANCE-ID\";",
                "-  final static String X_UPLOAD_SESSION = \"X-UPLOAD-SESSION\";",
                "-  final static String X_FULL_PATH = \"X-FULL-PATH\";",
                "+  static final String X_COMPONENT_INSTANCE_ID = \"X-COMPONENT-INSTANCE-ID\";",
                "+  static final String X_UPLOAD_SESSION = \"X-UPLOAD-SESSION\";",
                "+  static final String X_FULL_PATH = \"X-FULL-PATH\";",
                "@@ -48,5 +55,2 @@ public class FileUploadData {",
                "    * Hidden constructor.",
                "-   * @param uploadSessionId",
                "-   * @param fullPath",
                "-   * @param componentInstanceId",
                "    */",
                "@@ -54,5 +58,10 @@ public class FileUploadData {",
                "       final String componentInstanceId) {",
                "+    if (isDefined(fullPath) && fullPath.contains(\"..\")) {",
                "+      SilverLogger.getLogger(\"silverpeas.core.security\")",
                "+          .error(\"Path Traversal attack detected at {0}\", LocalDateTime.now().toString());",
                "+      throw new WebApplicationException(Response.Status.FORBIDDEN);",
                "+    }",
                "     this.uploadSessionId = uploadSessionId;",
                "     this.fullPath = fullPath;",
                "-    this.name = StringUtil.isDefined(fullPath) ? new File(fullPath).getName() : \"\";",
                "+    this.name = isDefined(fullPath) ? new File(fullPath).getName() : \"\";",
                "     this.componentInstanceId = componentInstanceId;",
                "@@ -80,5 +89,6 @@ public class FileUploadData {",
                "    * @return a new initialized instance.",
                "-   * @throws Exception",
                "+   * @throws UnsupportedEncodingException on encoding error.",
                "    */",
                "-  public static FileUploadData from(HttpServletRequest request) throws Exception {",
                "+  public static FileUploadData from(HttpServletRequest request)",
                "+      throws UnsupportedEncodingException {",
                "     String brutFullPath = request.getHeader(X_FULL_PATH);",
                "@@ -97,3 +107,2 @@ public class FileUploadData {",
                "    * @return a new initialized instance.",
                "-   * @throws Exception",
                "    */"
            ],
            "changed_files": [
                "core-web/src/main/java/org/silverpeas/core/webapi/upload/FileUploadData.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5ffafda8b751328294a34b743f43b408e402d344"
                ],
                [
                    "no-tag",
                    "3ca3103ebc0813a3b2b4bcb89ca12f5257696e2b"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: FileUploadData, StringUtil",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: core-web/src/main/java/org/silverpeas/core/webapi/upload/FileUploadData.java",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, file, upload, webapi",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e982c0500b163360272e23d33b95df1febb5ede3",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1539241285,
            "hunks": 108,
            "message": "Feature #8329: - counting only component instance documents - counting all files - adding coherency verifications about administration services - cleaning some code - fixing the error logging about pdf2swf tool detection at server starting - fixing wrong class package definition of two implementations of ContentPeas",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java b/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "index 8241390684..6659c266a7 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "@@ -94,2 +94,3 @@ import java.sql.SQLException;",
                " import java.util.*;",
                "+import java.util.function.Supplier;",
                " import java.util.regex.Matcher;",
                "@@ -100,2 +101,3 @@ import static org.silverpeas.core.SilverpeasExceptionMessages.*;",
                " import static org.silverpeas.core.admin.domain.DomainDriver.ActionConstants.ACTION_MASK_MIXED_GROUPS;",
                "+import static org.silverpeas.core.util.StringUtil.isLong;",
                "@@ -790,2 +792,5 @@ class Admin implements Administration {",
                "           null);",
                "+      componentInst = checkComponentInstanceById(componentInst, sClientComponentId,",
                "+          nullComponentInstSupplier);",
                "+      Objects.requireNonNull(componentInst);",
                "       componentInst.setDomainFatherId(getClientSpaceId(componentInst.getDomainFatherId()));",
                "@@ -800,4 +805,5 @@ class Admin implements Administration {",
                "     try {",
                "-      int driverComponentId = getDriverComponentId(componentId);",
                "-      return componentManager.getComponentInstLight(driverComponentId);",
                "+      final int driverComponentId = getDriverComponentId(componentId);",
                "+      final ComponentInstLight instance = componentManager.getComponentInstLight(driverComponentId);",
                "+      return checkComponentInstanceById(instance, componentId, null);",
                "     } catch (Exception e) {",
                "@@ -807,2 +813,27 @@ class Admin implements Administration {",
                "+  private <T extends SilverpeasComponentInstance> T checkComponentInstanceById(",
                "+      final T componentInstance, final String componentId,",
                "+      final Supplier<T> nullComponentInstance) {",
                "+    if (componentInstance != null) {",
                "+      if (componentInstance.getId().equals(componentId)",
                "+          || \"-1\".equals(componentInstance.getId())",
                "+          || isLong(componentId)) {",
                "+        return componentInstance;",
                "+      }",
                "+      SilverLogger.getLogger(this).error(\"{0}. Wrong component {1} has been found!!\",",
                "+          failureOnGetting(COMPONENT, componentId), componentInstance.getId());",
                "+      return nullComponentInstance != null ? nullComponentInstance.get() : null;",
                "+    }",
                "+    return null;",
                "+  }",
                "+",
                "+  private final Supplier<ComponentInst> nullComponentInstSupplier = () -> {",
                "+    try {",
                "+      return getComponentInst(-1, -1);",
                "+    } catch (AdminException e) {",
                "+      SilverLogger.getLogger(this).error(e);",
                "+      return null;",
                "+    }",
                "+  };",
                "+",
                "   /**",
                "@@ -1010,2 +1041,5 @@ class Admin implements Administration {",
                "       ComponentInst componentInst = getComponentInst(sDriverComponentId, null);",
                "+      componentInst = checkComponentInstanceById(componentInst, componentId,",
                "+          nullComponentInstSupplier);",
                "+      Objects.requireNonNull(componentInst);",
                "@@ -1582,3 +1616,4 @@ class Admin implements Administration {",
                "     try {",
                "-      int driverFatherId = getDriverComponentId(profileInst.getComponentFatherId());",
                "+      final String componentFatherId = profileInst.getComponentFatherId();",
                "+      int driverFatherId = getDriverComponentId(componentFatherId);",
                "       String sProfileId = profileManager.createProfileInst(profileInst, driverFatherId);",
                "@@ -1588,2 +1623,5 @@ class Admin implements Administration {",
                "         ComponentInst componentInstFather = getComponentInst(driverFatherId, null);",
                "+        componentInstFather = checkComponentInstanceById(componentInstFather, componentFatherId,",
                "+            nullComponentInstSupplier);",
                "+        Objects.requireNonNull(componentInstFather);",
                "         componentInstFather.addProfileInst(profileInst);",
                "@@ -1623,6 +1661,10 @@ class Admin implements Administration {",
                "       profileManager.deleteProfileInst(profile);",
                "-      if (StringUtil.isDefined(",
                "-          userId) && (profile.getObjectId() == -1 || profile.getObjectId() == 0)) {",
                "-        int driverFatherId = getDriverComponentId(profile.getComponentFatherId());",
                "+      if (StringUtil.isDefined(userId)",
                "+          && (profile.getObjectId() == -1 || profile.getObjectId() == 0)) {",
                "+        final String componentFatherId = profile.getComponentFatherId();",
                "+        int driverFatherId = getDriverComponentId(componentFatherId);",
                "         ComponentInst component = getComponentInst(driverFatherId, null);",
                "+        component = checkComponentInstanceById(component, componentFatherId,",
                "+            nullComponentInstSupplier);",
                "+        Objects.requireNonNull(component);",
                "@@ -1670,4 +1712,8 @@ class Admin implements Administration {",
                "           userId) && (newProfile.getObjectId() == -1 || newProfile.getObjectId() == 0)) {",
                "-        int driverFatherId = getDriverComponentId(newProfile.getComponentFatherId());",
                "+        final String componentFatherId = newProfile.getComponentFatherId();",
                "+        int driverFatherId = getDriverComponentId(componentFatherId);",
                "         ComponentInst component = getComponentInst(driverFatherId, null);",
                "+        component = checkComponentInstanceById(component, componentFatherId,",
                "+            nullComponentInstSupplier);",
                "+        Objects.requireNonNull(component);",
                "         component.setUpdaterUserId(userId);",
                "@@ -3721,2 +3767,5 @@ class Admin implements Administration {",
                "           getDriverComponentId(sClientComponentId), getDriverSpaceId(sClientSpaceId));",
                "+      componentInst = checkComponentInstanceById(componentInst, sClientComponentId,",
                "+          nullComponentInstSupplier);",
                "+      Objects.requireNonNull(componentInst);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/contentcontainer/content/ContentPeas.java b/core-library/src/main/java/org/silverpeas/core/contribution/contentcontainer/content/ContentPeas.java",
                "index 63f96b83a4..5a8633e6ab 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/contentcontainer/content/ContentPeas.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/contentcontainer/content/ContentPeas.java",
                "@@ -54,3 +54,3 @@ public class ContentPeas {",
                "     } else if (\"survey\".equals(sContentDescriptorPath)) {",
                "-      this.init(\"survey\", \"com.stratelia.webactiv.survey.SurveyContentManager\");",
                "+      this.init(\"survey\", \"org.silverpeas.components.survey.SurveyContentManager\");",
                "     } else if (\"toolbox\".equals(sContentDescriptorPath)) {",
                "@@ -66,3 +66,3 @@ public class ContentPeas {",
                "     } else if (\"pollingStation\".equals(sContentDescriptorPath)) {",
                "-      this.init(\"pollingStation\", \"com.stratelia.webactiv.survey.SurveyContentManager\");",
                "+      this.init(\"pollingStation\", \"org.silverpeas.components.survey.SurveyContentManager\");",
                "     } else if (\"bookmark\".equals(sContentDescriptorPath)) {",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/model/DirectoryStats.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/model/DirectoryStats.java",
                "index 6c2414db5e..cc01842680 100644",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/model/DirectoryStats.java",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/model/DirectoryStats.java",
                "@@ -25,5 +25,2 @@ package org.silverpeas.core.silverstatistics.volume.model;",
                "-import org.silverpeas.core.util.UnitUtil;",
                "-import org.silverpeas.core.util.memory.MemoryUnit;",
                "-",
                " /**",
                "@@ -33,9 +30,7 @@ public class DirectoryStats {",
                "   private final String directoryName;",
                "-  private Long directorySize;",
                "-  private Long numberOfFiles;",
                "+  private long directorySize = 0L;",
                "+  private long numberOfFiles = 0L;",
                "-  public DirectoryStats(String name, long sizeOfDirectory, long numberOfFiles) {",
                "-    this.numberOfFiles = numberOfFiles;",
                "+  public DirectoryStats(String name) {",
                "     this.directoryName = name;",
                "-    this.directorySize = sizeOfDirectory;",
                "   }",
                "@@ -46,3 +41,3 @@ public class DirectoryStats {",
                "-  public Long getDirectorySize() {",
                "+  public long getDirectorySize() {",
                "     return directorySize;",
                "@@ -50,7 +45,3 @@ public class DirectoryStats {",
                "-  public String getFormattedDirectorySize() {",
                "-    return UnitUtil.formatValue(directorySize, MemoryUnit.B, MemoryUnit.MB);",
                "-  }",
                "-",
                "-  public Long getNumberOfFiles() {",
                "+  public long getNumberOfFiles() {",
                "     return numberOfFiles;",
                "@@ -58,7 +49,9 @@ public class DirectoryStats {",
                "-  public void addFile(long size) {",
                "-    numberOfFiles++;",
                "-    directorySize = directorySize + size;",
                "+  public void addDirectorySize(final long directorySize) {",
                "+    this.directorySize += directorySize;",
                "   }",
                "+  public void addFileNumber(final long numberOfFiles) {",
                "+    this.numberOfFiles += numberOfFiles;",
                "+  }",
                " }",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/AbstractComputer.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/AbstractComputer.java",
                "new file mode 100644",
                "index 0000000000..a287007a13",
                "--- /dev/null",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/AbstractComputer.java",
                "@@ -0,0 +1,142 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+",
                "+package org.silverpeas.core.silverstatistics.volume.service;",
                "+",
                "+import org.silverpeas.core.admin.component.model.SilverpeasComponent;",
                "+import org.silverpeas.core.silverstatistics.volume.model.DirectoryStats;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "+",
                "+import java.io.File;",
                "+import java.io.IOException;",
                "+import java.nio.file.FileVisitResult;",
                "+import java.nio.file.FileVisitor;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                "+import java.nio.file.attribute.BasicFileAttributes;",
                "+import java.util.Optional;",
                "+import java.util.concurrent.Callable;",
                "+",
                "+/**",
                "+ * @author silveryocha",
                "+ */",
                "+abstract class AbstractComputer implements Callable<DirectoryStats> {",
                "+",
                "+  protected final File directory;",
                "+  private final boolean onlyComponentData;",
                "+",
                "+  AbstractComputer(File directory, final boolean onlyComponentData) {",
                "+    this.directory = directory;",
                "+    this.onlyComponentData = onlyComponentData;",
                "+  }",
                "+",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  @Override",
                "+  public final DirectoryStats call() {",
                "+    final DirectoryStats result = new DirectoryStats(directory.getName());",
                "+    final Optional<SilverpeasComponent> component = SilverpeasComponent",
                "+        .getByInstanceId(directory.getName());",
                "+    if (onlyComponentData && !component.isPresent()) {",
                "+      // root directory is not a component instance one, no computing is performed",
                "+      return result;",
                "+    }",
                "+    final FileVisitorOfTransverseServices fileVisitor = new FileVisitorOfTransverseServices(this,",
                "+        onlyComponentData);",
                "+    // transverse files",
                "+    try {",
                "+      Files.walkFileTree(Paths.get(directory.getPath()), fileVisitor);",
                "+    } catch (IOException e) {",
                "+      SilverLogger.getLogger(this).error(e);",
                "+    }",
                "+    setTransverseResult(result);",
                "+    // specific files",
                "+    component",
                "+        .ifPresent(",
                "+            c -> ComponentStatisticsProvider.getByComponentName(c.getName())",
                "+              .ifPresent(",
                "+                  s -> setSpecificResult(result, s)));",
                "+    return result;",
                "+  }",
                "+",
                "+  protected abstract void handleTransverseFile(final Path file, final BasicFileAttributes attrs);",
                "+",
                "+  protected abstract void setTransverseResult(final DirectoryStats result);",
                "+",
                "+  protected abstract void setSpecificResult(final DirectoryStats result,",
                "+      final ComponentStatisticsProvider componentStatistics);",
                "+",
                "+  private static class FileVisitorOfTransverseServices<C extends AbstractComputer>",
                "+      implements FileVisitor<Path> {",
                "+",
                "+    private final C computer;",
                "+    private final boolean onlyComponentData;",
                "+    private boolean canVisitFile;",
                "+",
                "+    private FileVisitorOfTransverseServices(final C computer, final boolean onlyComponentData) {",
                "+      this.computer = computer;",
                "+      this.onlyComponentData = onlyComponentData;",
                "+      this.canVisitFile = !onlyComponentData;",
                "+    }",
                "+",
                "+    @Override",
                "+    public final FileVisitResult preVisitDirectory(final Path dir,",
                "+        final BasicFileAttributes attrs) {",
                "+      if (onlyComponentData && isAttachmentRepository(dir)) {",
                "+        canVisitFile = true;",
                "+      }",
                "+      return FileVisitResult.CONTINUE;",
                "+    }",
                "+",
                "+    @Override",
                "+    public final FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) {",
                "+      if (canVisitFile && !isWysiwygContent(file)) {",
                "+        computer.handleTransverseFile(file, attrs);",
                "+      }",
                "+      return FileVisitResult.CONTINUE;",
                "+    }",
                "+",
                "+    @Override",
                "+    public final FileVisitResult visitFileFailed(final Path file, final IOException exc) {",
                "+      SilverLogger.getLogger(this).warn(exc);",
                "+      return FileVisitResult.CONTINUE;",
                "+    }",
                "+",
                "+    @Override",
                "+    public final FileVisitResult postVisitDirectory(final Path dir, final IOException exc) {",
                "+      if (onlyComponentData && isAttachmentRepository(dir)) {",
                "+        canVisitFile = false;",
                "+      }",
                "+      return FileVisitResult.CONTINUE;",
                "+    }",
                "+",
                "+    private boolean isAttachmentRepository(final Path dir) {",
                "+      return dir.getFileName().toString().startsWith(\"simpledoc_\");",
                "+    }",
                "+",
                "+    private boolean isWysiwygContent(final Path file) {",
                "+      return file.getFileName().toString().matches(\".+wysiwyg_[a-z]+[.]txt\");",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/ComponentStatisticsProvider.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/ComponentStatisticsProvider.java",
                "index 099a85239b..1703c926f2 100644",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/ComponentStatisticsProvider.java",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/ComponentStatisticsProvider.java",
                "@@ -25,5 +25,10 @@ package org.silverpeas.core.silverstatistics.volume.service;",
                "+import org.silverpeas.core.SilverpeasException;",
                " import org.silverpeas.core.silverstatistics.volume.model.UserIdCountVolumeCouple;",
                "+import org.silverpeas.core.util.ResourceLocator;",
                "+import org.silverpeas.core.util.ServiceProvider;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                " import java.util.Collection;",
                "+import java.util.Optional;",
                "@@ -44,4 +49,57 @@ public interface ComponentStatisticsProvider {",
                "-  Collection<UserIdCountVolumeCouple> getVolume(String spaceId, String componentId) throws",
                "-      Exception;",
                "+  static Optional<ComponentStatisticsProvider> getByComponentName(final String componentName) {",
                "+    /*",
                "+     * Gets the component statistics qualifier defined into SilverStatistics.properties file",
                "+     * associated to the component identified by the given name.",
                "+     * If no qualifier is defined for the component, a default conventional one is computed.",
                "+     */",
                "+    final String qualifier = ResourceLocator",
                "+        .getSettingBundle(\"org.silverpeas.silverstatistics.SilverStatistics\")",
                "+        .getString(componentName, componentName + QUALIFIER_SUFFIX);",
                "+",
                "+    try {",
                "+      return Optional.of(ServiceProvider.getService(qualifier));",
                "+    } catch (Exception e) {",
                "+      SilverLogger.getLogger(e).silent(e);",
                "+    }",
                "+    return Optional.empty();",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets by user the number of owned contributions.",
                "+   * @param spaceId the identifier of space which the component represented by componentId",
                "+   * parameter is linked to.",
                "+   * @param componentId the identifier of the current looked component instance.",
                "+   * @return a collection of {@link UserIdCountVolumeCouple}. The collection can contains several",
                "+   * {@link UserIdCountVolumeCouple} with the same user identifier.",
                "+   * @throws SilverpeasException on technical error.",
                "+   */",
                "+  Collection<UserIdCountVolumeCouple> getVolume(String spaceId, String componentId)",
                "+      throws SilverpeasException;",
                "+",
                "+  /**",
                "+   * Gets the memory size of documents of the application instance by taking into account only",
                "+   * the specific files handled by the application.",
                "+   * <p>",
                "+   * The files handled by transverse services are taken into account by other statistic services.",
                "+   * </p>",
                "+   * @param componentId the identifier of the current looked component instance.",
                "+   * @return a long.",
                "+   */",
                "+  default long memorySizeOfSpecificFiles(final String componentId) {",
                "+    return 0L;",
                "+  }",
                "+",
                "+  /**",
                "+   * Counts the number of document the application instance uses by taking into account only the",
                "+   * specific files handled by the application.",
                "+   * <p>",
                "+   * The files handled by transverse services are taken into account by other statistic services.",
                "+   * </p>",
                "+   * @param componentId the identifier of the current looked component instance.",
                "+   * @return a long.",
                "+   */",
                "+  default long countSpecificFiles(final String componentId) {",
                "+    return 0L;",
                "+  }",
                " }",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectorySizeComputer.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectorySizeComputer.java",
                "index 1da2713e0c..22fcb05b49 100644",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectorySizeComputer.java",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectorySizeComputer.java",
                "@@ -25,9 +25,7 @@ package org.silverpeas.core.silverstatistics.volume.service;",
                "-import java.io.File;",
                "-import java.util.concurrent.Callable;",
                "-",
                "-import org.apache.commons.io.FileUtils;",
                "-",
                " import org.silverpeas.core.silverstatistics.volume.model.DirectoryStats;",
                "-import org.silverpeas.core.silvertrace.SilverTrace;",
                "+",
                "+import java.io.File;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.attribute.BasicFileAttributes;",
                "@@ -36,9 +34,18 @@ import org.silverpeas.core.silvertrace.SilverTrace;",
                "  */",
                "-public class DirectorySizeComputer implements Callable<DirectoryStats> {",
                "+public class DirectorySizeComputer extends AbstractComputer {",
                "-  private final File directory;",
                "+  private long size = 0L;",
                "+  DirectorySizeComputer(File directory, final boolean onlyComponentData) {",
                "+    super(directory, onlyComponentData);",
                "+  }",
                "-  public DirectorySizeComputer(File directory) {",
                "-    this.directory = directory;",
                "+  @Override",
                "+  protected void handleTransverseFile(final Path file, final BasicFileAttributes attrs) {",
                "+    size += attrs.size();",
                "+  }",
                "+",
                "+  @Override",
                "+  protected void setTransverseResult(final DirectoryStats result) {",
                "+    result.addDirectorySize(size);",
                "   }",
                "@@ -46,12 +53,6 @@ public class DirectorySizeComputer implements Callable<DirectoryStats> {",
                "   @Override",
                "-  public DirectoryStats call() throws Exception {",
                "-    long size = 0L;",
                "-    try {",
                "-      size = FileUtils.sizeOfDirectory(directory);",
                "-    } catch (Exception e) {",
                "-      // preventing bug http://tracker.silverpeas.org/issues/5340",
                "-      SilverTrace.error(\"silverstatistics\", \"DirectorySizeComputer.call\", \"root.EX_CANT_READ_FILE\",",
                "-          \"Directory : \" + directory.getAbsolutePath(), e);",
                "-    }",
                "-    return new DirectoryStats(directory.getName(), size, 0L);",
                "+  protected void setSpecificResult(final DirectoryStats result,",
                "+      final ComponentStatisticsProvider componentStatistics) {",
                "+    result",
                "+        .addDirectorySize(componentStatistics.memorySizeOfSpecificFiles(result.getDirectoryName()));",
                "   }",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectoryVolumeService.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectoryVolumeService.java",
                "index 65fa280050..933ce36a8f 100644",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectoryVolumeService.java",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectoryVolumeService.java",
                "@@ -29,6 +29,5 @@ import org.apache.commons.io.filefilter.NameFileFilter;",
                " import org.silverpeas.core.admin.service.OrganizationController;",
                "-import org.silverpeas.core.admin.service.OrganizationControllerProvider;",
                " import org.silverpeas.core.silverstatistics.volume.model.DirectoryStats;",
                "-import org.silverpeas.core.util.file.FileRepositoryManager;",
                " import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.util.file.FileRepositoryManager;",
                "@@ -45,2 +44,3 @@ import java.util.concurrent.Executors;",
                " import java.util.concurrent.Future;",
                "+import java.util.stream.Collectors;",
                "@@ -53,19 +53,12 @@ public class DirectoryVolumeService {",
                "   private final File workspace;",
                "+  private boolean onlyComponentData;",
                "   public DirectoryVolumeService() {",
                "-    workspace = new File(FileRepositoryManager.getUploadPath());",
                "+    this(new File(FileRepositoryManager.getUploadPath()));",
                "+    onlyComponentData = true;",
                "   }",
                "-  public DirectoryVolumeService(File workspace) {",
                "+  DirectoryVolumeService(File workspace) {",
                "     this.workspace = workspace;",
                "-  }",
                "-",
                "-  private List<DirectoryWalkerSizeComputer> buildScanners(File dataDirectory, String userId) {",
                "-    File[] files = listDirectoriesToScan(dataDirectory, userId);",
                "-    List<DirectoryWalkerSizeComputer> result = new ArrayList<>(",
                "-        files.length);",
                "-    for (File componentDir : files) {",
                "-      result.add(new DirectoryWalkerSizeComputer((componentDir)));",
                "-    }",
                "-    return result;",
                "+    onlyComponentData = false;",
                "   }",
                "@@ -76,3 +69,3 @@ public class DirectoryVolumeService {",
                "     for (File componentDir : files) {",
                "-      result.add(new DirectorySizeComputer((componentDir)));",
                "+      result.add(new DirectorySizeComputer(componentDir, onlyComponentData));",
                "     }",
                "@@ -85,3 +78,3 @@ public class DirectoryVolumeService {",
                "     for (File componentDir : files) {",
                "-      result.add(new FileNumberComputer((componentDir)));",
                "+      result.add(new FileNumberComputer(componentDir, onlyComponentData));",
                "     }",
                "@@ -90,20 +83,4 @@ public class DirectoryVolumeService {",
                "-  public List<DirectoryStats> getVolumes(String userId) throws",
                "-      InterruptedException, ExecutionException {",
                "-    List<DirectoryWalkerSizeComputer> scanners = buildScanners(workspace, userId);",
                "-    List<DirectoryStats> volume = new ArrayList<>(scanners.size());",
                "-    ExecutorService executor = Executors.newFixedThreadPool(getNumberOfThread());",
                "-    List<Future<DirectoryStats>> result = executor.invokeAll(scanners);",
                "-    try {",
                "-      for (Future<DirectoryStats> future : result) {",
                "-        volume.add(future.get());",
                "-      }",
                "-    } finally {",
                "-      executor.shutdown();",
                "-    }",
                "-    return volume;",
                "-  }",
                "-",
                "-  public long getTotalSize(String userId) throws InterruptedException, ExecutionException {",
                "-    List<DirectorySizeComputer> scanners = buildSizeScanners(workspace, userId);",
                "+  long getTotalSize() throws InterruptedException, ExecutionException {",
                "+    List<DirectorySizeComputer> scanners = buildSizeScanners(workspace, null);",
                "     long totalSize = 0L;",
                "@@ -159,4 +136,4 @@ public class DirectoryVolumeService {",
                "   private File[] listDirectoriesToScan(File dataDirectory, String userId) {",
                "-    FileFilter filter;",
                "-    OrganizationController controller = OrganizationControllerProvider.getOrganisationController();",
                "+    final OrganizationController controller = OrganizationController.get();",
                "+    final FileFilter filter;",
                "     if (!StringUtil.isDefined(userId) || controller.getUserDetail(userId).isAccessAdmin()) {",
                "@@ -164,7 +141,6 @@ public class DirectoryVolumeService {",
                "     } else {",
                "-      String[] spaceIds = controller.getAllSpaceIds(userId);",
                "-      List<String> componentIds = new ArrayList<>(spaceIds.length * 10);",
                "-      for (String spaceId : spaceIds) {",
                "-        componentIds.addAll(Arrays.asList(controller.getAllComponentIdsRecur(spaceId)));",
                "-      }",
                "+      final String[] spaceIds = controller.getAllSpaceIds(userId);",
                "+      final List<String> componentIds = Arrays.stream(spaceIds)",
                "+          .flatMap(i -> Arrays.stream(controller.getAllComponentIdsRecur(i)))",
                "+          .collect(Collectors.toList());",
                "       filter = new AndFileFilter(DirectoryFileFilter.DIRECTORY, new NameFileFilter(componentIds));",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectoryWalkerSizeComputer.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectoryWalkerSizeComputer.java",
                "deleted file mode 100644",
                "index df20c887e6..0000000000",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectoryWalkerSizeComputer.java",
                "+++ /dev/null",
                "@@ -1,50 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.silverstatistics.volume.service;",
                "-",
                "-import java.io.File;",
                "-import java.util.concurrent.Callable;",
                "-",
                "-import org.apache.commons.io.filefilter.TrueFileFilter;",
                "-import org.silverpeas.core.silverstatistics.volume.model.DirectoryStats;",
                "-",
                "-/**",
                "- * Compute the size in terms of number of files and total size of a directory.",
                "- */",
                "-public class DirectoryWalkerSizeComputer implements Callable<DirectoryStats> {",
                "-",
                "-  private final File directory;",
                "-",
                "-",
                "-  public DirectoryWalkerSizeComputer(File directory) {",
                "-    this.directory = directory;",
                "-  }",
                "-",
                "-  @Override",
                "-  public DirectoryStats call() throws Exception {",
                "-    StatisticDirectoryWalker walker = new StatisticDirectoryWalker(directory.getName(),",
                "-        TrueFileFilter.TRUE, -1);",
                "-    return walker.scan(directory);",
                "-  }",
                "-}",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/FileNumberComputer.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/FileNumberComputer.java",
                "index a1ee202aa7..59d45cf8b1 100644",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/FileNumberComputer.java",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/FileNumberComputer.java",
                "@@ -25,8 +25,8 @@ package org.silverpeas.core.silverstatistics.volume.service;",
                "-import java.io.File;",
                "-import java.util.concurrent.Callable;",
                "-",
                "-import org.apache.commons.io.FileUtils;",
                " import org.silverpeas.core.silverstatistics.volume.model.DirectoryStats;",
                "+import java.io.File;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.attribute.BasicFileAttributes;",
                "+",
                " /**",
                "@@ -34,8 +34,18 @@ import org.silverpeas.core.silverstatistics.volume.model.DirectoryStats;",
                "  */",
                "-public class FileNumberComputer implements Callable<DirectoryStats> {",
                "+public class FileNumberComputer extends AbstractComputer {",
                "+",
                "+  private long count = 0L;",
                "-  private final File directory;",
                "+  FileNumberComputer(File directory, final boolean onlyComponentData) {",
                "+    super(directory, onlyComponentData);",
                "+  }",
                "-  public FileNumberComputer(File directory) {",
                "-    this.directory = directory;",
                "+  @Override",
                "+  protected void handleTransverseFile(final Path file, final BasicFileAttributes attrs) {",
                "+    count++;",
                "+  }",
                "+",
                "+  @Override",
                "+  protected void setTransverseResult(final DirectoryStats result) {",
                "+    result.addFileNumber(count);",
                "   }",
                "@@ -43,5 +53,5 @@ public class FileNumberComputer implements Callable<DirectoryStats> {",
                "   @Override",
                "-  public DirectoryStats call() throws Exception {",
                "-    return new DirectoryStats(directory.getName(), 0L, FileUtils.listFiles(directory, null, true)",
                "-        .size());",
                "+  protected void setSpecificResult(final DirectoryStats result,",
                "+      final ComponentStatisticsProvider componentStatistics) {",
                "+    result.addFileNumber(componentStatistics.countSpecificFiles(result.getDirectoryName()));",
                "   }",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsManager.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsManager.java",
                "index 19b31e7132..563148eace 100644",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsManager.java",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsManager.java",
                "@@ -167,3 +167,3 @@ public class SilverStatisticsManager implements Initialization {",
                "         DirectoryVolumeService service = new DirectoryVolumeService(new File(aDirectoryToScan));",
                "-        addStatSize(currentDate, aDirectoryToScan, service.getTotalSize(null));",
                "+        addStatSize(currentDate, aDirectoryToScan, service.getTotalSize());",
                "       }",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsService.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsService.java",
                "index a005c4cf80..249c9828c1 100644",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsService.java",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsService.java",
                "@@ -25,8 +25,4 @@ package org.silverpeas.core.silverstatistics.volume.service;",
                "-import java.sql.Connection;",
                "-import java.sql.SQLException;",
                "-import java.util.List;",
                "-",
                "-import javax.inject.Singleton;",
                "-",
                "+import org.apache.commons.lang3.text.StrTokenizer;",
                "+import org.silverpeas.core.persistence.jdbc.DBUtil;",
                " import org.silverpeas.core.silverstatistics.volume.dao.SilverStatisticsDAO;",
                "@@ -34,9 +30,11 @@ import org.silverpeas.core.silverstatistics.volume.dao.SilverStatisticsManagerDA",
                " import org.silverpeas.core.silverstatistics.volume.model.SilverStatisticsConfigException;",
                "+import org.silverpeas.core.silverstatistics.volume.model.StatType;",
                " import org.silverpeas.core.silverstatistics.volume.model.StatisticsConfig;",
                " import org.silverpeas.core.silverstatistics.volume.model.StatisticsRuntimeException;",
                "-import org.silverpeas.core.silverstatistics.volume.model.StatType;",
                "-import org.silverpeas.core.silvertrace.SilverTrace;",
                "-import org.silverpeas.core.persistence.jdbc.DBUtil;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "-import org.apache.commons.lang3.text.StrTokenizer;",
                "+import javax.inject.Singleton;",
                "+import java.sql.Connection;",
                "+import java.sql.SQLException;",
                "+import java.util.List;",
                "@@ -70,9 +68,7 @@ public class SilverStatisticsService implements SilverStatistics {",
                "       } catch (SQLException | StatisticsRuntimeException e) {",
                "-        SilverTrace.error(\"silverstatistics\", \"SilverStatisticsEJB.putStats\",",
                "-            \"silverstatistics.MSG_ALIMENTATION_BD\",",
                "-            \"typeOfStats = \" + type + \", dataArray = \" + dataArray, e);",
                "+        SilverLogger.getLogger(this)",
                "+            .error(\"typeOfStats={0}, dataArray={1}\", new Object[]{type, dataArray}, e);",
                "       }",
                "     } else {",
                "-      SilverTrace.error(\"silverstatistics\", \"SilverStatisticsEJB.putStats\",",
                "-          \"MSG_CONFIG_DATAS\", \"data en entree=\" + data + \" pour \" + type);",
                "+      SilverLogger.getLogger(this).error(\"input data={0} for {1}\", data, type);",
                "     }",
                "@@ -100,4 +96,3 @@ public class SilverStatisticsService implements SilverStatistics {",
                "     } catch (SilverStatisticsConfigException e) {",
                "-      SilverTrace.error(\"silverstatistics\", \"SilverStatisticsEJB.setSessionContext\",",
                "-          \"silverstatistics.MSG_CONFIG_FILE\", e);",
                "+      SilverLogger.getLogger(this).error(e);",
                "     }",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsVolumeAlimentation.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsVolumeAlimentation.java",
                "index 2f13ac18ba..500bcee09c 100644",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsVolumeAlimentation.java",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsVolumeAlimentation.java",
                "@@ -29,6 +29,4 @@ import org.silverpeas.core.admin.space.SpaceInst;",
                " import org.silverpeas.core.silverstatistics.volume.model.UserIdCountVolumeCouple;",
                "-import org.silverpeas.core.util.ResourceLocator;",
                "+import org.silverpeas.core.util.CollectionUtil;",
                " import org.silverpeas.core.util.ServiceProvider;",
                "-import org.silverpeas.core.util.SettingBundle;",
                "-import org.silverpeas.core.util.StringUtil;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -38,3 +36,5 @@ import java.util.Arrays;",
                " import java.util.Collection;",
                "+import java.util.Collections;",
                " import java.util.List;",
                "+import java.util.Optional;",
                "@@ -45,17 +45,10 @@ import java.util.List;",
                "  */",
                "-public class SilverStatisticsVolumeAlimentation {",
                "+class SilverStatisticsVolumeAlimentation {",
                "-  private static final SettingBundle settings =",
                "-      ResourceLocator.getSettingBundle(\"org.silverpeas.silverstatistics.SilverStatistics\");",
                "-",
                "-  /**",
                "-   * Method declaration",
                "-   * @see",
                "-   */",
                "-  public static void makeVolumeAlimentationForAllComponents() {",
                "+  static void makeVolumeAlimentationForAllComponents() {",
                "     java.util.Date now = new java.util.Date();",
                "     // get all spaces",
                "-    List<String> listAllSpacesId = getAllSpacesAndAllSubSpacesId();",
                "+    final List<String> listAllSpacesId = getAllSpacesAndAllSubSpacesId();",
                "-    if (listAllSpacesId != null && !listAllSpacesId.isEmpty()) {",
                "+    if (!listAllSpacesId.isEmpty()) {",
                "@@ -68,14 +61,7 @@ public class SilverStatisticsVolumeAlimentation {",
                "           // get all elements from a component",
                "-          Collection<UserIdCountVolumeCouple> collectionUserIdCountVolume =",
                "-              getCollectionUserIdCountVolume(currentSpaceId, ci);",
                "-",
                "-          if (collectionUserIdCountVolume != null) {",
                "-            for (UserIdCountVolumeCouple currentUserIdCountVolume : collectionUserIdCountVolume) {",
                "+          getCollectionUserIdCountVolume(currentSpaceId, ci).forEach(v ->",
                "               // notify statistics",
                "-              SilverStatisticsManager.getInstance().addStatVolume(",
                "-                  currentUserIdCountVolume.getUserId(),",
                "-                  currentUserIdCountVolume.getCountVolume(), now, ci.getName(), currentSpaceId,",
                "-                  currentComponentsId);",
                "-            }",
                "-          }",
                "+              SilverStatisticsManager.getInstance()",
                "+                  .addStatVolume(v.getUserId(), v.getCountVolume(), now, ci.getName(),",
                "+                      currentSpaceId, currentComponentsId));",
                "         }",
                "@@ -85,9 +71,4 @@ public class SilverStatisticsVolumeAlimentation {",
                "-  /**",
                "-   * Method declaration",
                "-   * @return",
                "-   * @see",
                "-   */",
                "   private static List<String> getAllSpacesAndAllSubSpacesId() {",
                "-    List<String> resultList = new ArrayList<String>();",
                "+    List<String> resultList = new ArrayList<>();",
                "     String[] spaceIds = getAdminController().getAllSpaceIds();",
                "@@ -99,8 +80,2 @@ public class SilverStatisticsVolumeAlimentation {",
                "-  /**",
                "-   * Method declaration",
                "-   * @param spaceId",
                "-   * @return",
                "-   * @see",
                "-   */",
                "   private static List<ComponentInst> getAllComponentsInst(String spaceId) {",
                "@@ -110,18 +85,11 @@ public class SilverStatisticsVolumeAlimentation {",
                "-  /**",
                "-   * Method declaration",
                "-   * @param spaceId",
                "-   * @param ci",
                "-   * @return",
                "-   * @see",
                "-   */",
                "   private static Collection<UserIdCountVolumeCouple> getCollectionUserIdCountVolume(String spaceId,",
                "       ComponentInst ci) {",
                "-    Collection<UserIdCountVolumeCouple> c = null;",
                "+    Collection<UserIdCountVolumeCouple> result = Collections.emptyList();",
                "     try {",
                "-      String qualifier = getComponentStatisticsQualifier(ci.getName());",
                "-      if (StringUtil.isDefined(qualifier)) {",
                "-        ComponentStatisticsProvider statistics = ServiceProvider.getService(qualifier);",
                "-        Collection<UserIdCountVolumeCouple> v = statistics.getVolume(spaceId, ci.getId());",
                "-        c = agregateUser(v);",
                "+      final Optional<ComponentStatisticsProvider> statistics = ComponentStatisticsProvider",
                "+          .getByComponentName(ci.getName());",
                "+      if (statistics.isPresent()) {",
                "+        Collection<UserIdCountVolumeCouple> v = statistics.get().getVolume(spaceId, ci.getId());",
                "+        result = aggregateUser(v);",
                "       }",
                "@@ -130,35 +98,21 @@ public class SilverStatisticsVolumeAlimentation {",
                "     }",
                "-    return c;",
                "-  }",
                "-",
                "-  /**",
                "-   * Gets the component statistics qualifier defined into SilverStatistics.properties file",
                "-   * associated to the component identified by the given name.<br>",
                "-   * If no qualifier is defined for the component, that is because it does not exist statistics",
                "-   * treatment for the component.",
                "-   * @param componentName the name of the component for which the qualifier is searched.",
                "-   * @return a string that represents the qualifier name of the implementation of the statistic",
                "-   * treatment associated to the aimed component, empty if no qualifier.",
                "-   */",
                "-  private static String getComponentStatisticsQualifier(String componentName) {",
                "-    return settings.getString(componentName, \"\");",
                "+    return result;",
                "   }",
                "-  private static Collection<UserIdCountVolumeCouple> agregateUser(",
                "+  private static Collection<UserIdCountVolumeCouple> aggregateUser(",
                "       Collection<UserIdCountVolumeCouple> in) {",
                "-    if (in == null) {",
                "-      return null;",
                "+    if (CollectionUtil.isEmpty(in)) {",
                "+      return Collections.emptyList();",
                "     }",
                "-    List<UserIdCountVolumeCouple> myArrayList = new ArrayList<UserIdCountVolumeCouple>(in.size());",
                "+    List<UserIdCountVolumeCouple> myArrayList = new ArrayList<>(in.size());",
                "-    // parcours collection initiale",
                "+    // loop on initial collection",
                "     for (UserIdCountVolumeCouple eltIn : in) {",
                "-      // lecture d'un userId",
                "-      // s'il n'existe pas dans la collection finale alors on l'ajoute",
                "-      // sinon on modifie le countVolume et on passe au suivant",
                "       UserIdCountVolumeCouple eltOut = getCouple(myArrayList, eltIn);",
                "       if (eltOut == null) {",
                "+        // no user matching",
                "         myArrayList.add(eltIn);",
                "       } else {",
                "+        // user matching",
                "         eltOut.setCountVolume(eltIn.getCountVolume() + eltOut.getCountVolume());",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/StatisticDirectoryWalker.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/StatisticDirectoryWalker.java",
                "deleted file mode 100644",
                "index 1cfed38177..0000000000",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/StatisticDirectoryWalker.java",
                "+++ /dev/null",
                "@@ -1,68 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.silverstatistics.volume.service;",
                "-",
                "-import java.io.File;",
                "-import java.io.FileFilter;",
                "-import java.io.IOException;",
                "-import java.util.Collection;",
                "-",
                "-import org.apache.commons.io.DirectoryWalker;",
                "-import org.apache.commons.io.filefilter.IOFileFilter;",
                "-import org.silverpeas.core.silverstatistics.volume.model.DirectoryStats;",
                "-",
                "-/**",
                "- * @author ehugonnet",
                "- */",
                "-public class StatisticDirectoryWalker extends DirectoryWalker<Object> {",
                "-",
                "-  private final DirectoryStats stats;",
                "-",
                "-  public StatisticDirectoryWalker(String dirName) {",
                "-    super();",
                "-    this.stats = new DirectoryStats(dirName, 0L, 0L);",
                "-  }",
                "-",
                "-  public StatisticDirectoryWalker(String dirName, FileFilter filter, int depthLimit) {",
                "-    super(filter, depthLimit);",
                "-    this.stats = new DirectoryStats(dirName, 0L, 0L);",
                "-  }",
                "-",
                "-  public StatisticDirectoryWalker(String dirName, IOFileFilter directoryFilter,",
                "-      IOFileFilter fileFilter, int depthLimit) {",
                "-    super(directoryFilter, fileFilter, depthLimit);",
                "-    this.stats = new DirectoryStats(dirName, 0L, 0L);",
                "-  }",
                "-",
                "-  public DirectoryStats scan(File directory) throws IOException {",
                "-    walk(directory, null);",
                "-    return this.stats;",
                "-  }",
                "-",
                "-  @Override",
                "-  protected void handleFile(File file, int depth, Collection<Object> results) throws IOException {",
                "-    this.stats.addFile(file.length());",
                "-    super.handleFile(file, depth, results);",
                "-  }",
                "-}",
                "diff --git a/core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/SwfToolManager.java b/core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/SwfToolManager.java",
                "index ea0d0d680d..6669795a4b 100644",
                "--- a/core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/SwfToolManager.java",
                "+++ b/core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/SwfToolManager.java",
                "@@ -28,2 +28,3 @@ import org.silverpeas.core.initialization.Initialization;",
                " import org.silverpeas.core.util.exec.ExternalExecution;",
                "+import org.silverpeas.core.util.exec.ExternalExecution.Config;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -48,3 +49,3 @@ public class SwfToolManager implements Initialization {",
                "           commandLine.addArgument(\"--version\");",
                "-          ExternalExecution.exec(commandLine);",
                "+          ExternalExecution.exec(commandLine, Config.init().doNotDisplayErrorTrace());",
                "           isActivated = true;",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/AbstractPieChartBuilder.java b/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/AbstractPieChartBuilder.java",
                "index 5d4dd8bb85..35c942ed93 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/AbstractPieChartBuilder.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/AbstractPieChartBuilder.java",
                "@@ -25,5 +25,6 @@ package org.silverpeas.web.silverstatistics.control;",
                "-import org.silverpeas.core.admin.component.model.ComponentInstLight;",
                "+import org.silverpeas.core.admin.component.model.SilverpeasComponentInstance;",
                " import org.silverpeas.core.admin.service.AdminException;",
                " import org.silverpeas.core.admin.service.AdministrationServiceProvider;",
                "+import org.silverpeas.core.admin.service.OrganizationController;",
                " import org.silverpeas.core.admin.space.SpaceInstLight;",
                "@@ -31,2 +32,3 @@ import org.silverpeas.core.admin.user.model.UserDetail;",
                " import org.silverpeas.core.chart.pie.PieChart;",
                "+import org.silverpeas.core.util.Mutable;",
                " import org.silverpeas.core.util.StringUtil;",
                "@@ -67,17 +69,14 @@ public abstract class AbstractPieChartBuilder {",
                "   private void buildStatItems(final Map<String, String[]> cmpStats) {",
                "-    String[] tabValue = null;",
                "+    Mutable<String[]> tabValue = Mutable.empty();",
                "     for (Map.Entry<String, String[]> stat : cmpStats.entrySet()) {",
                "       String componentId = stat.getKey();",
                "-      tabValue = stat.getValue();",
                "-      ComponentInstLight cmp = getComponentInstLight(componentId);",
                "-      if (cmp != null) {",
                "-        addStateItemForComponentInstance(tabValue, cmp);",
                "-      }",
                "+      tabValue.set(stat.getValue());",
                "+      OrganizationController.get().getComponentInstance(componentId)",
                "+          .ifPresent(i -> addStateItemForComponentInstance(tabValue.get(), i));",
                "     }",
                "-",
                "-    if (tabValue != null) {",
                "-      if (tabValue[1] != null) {",
                "+    if (tabValue.isPresent()) {",
                "+      if (tabValue.get()[1] != null) {",
                "         niveauFinesse = FINESSE_GROUPE;",
                "       }",
                "-      if (tabValue[2] != null) {",
                "+      if (tabValue.get()[2] != null) {",
                "         niveauFinesse = FINESSE_USER;",
                "@@ -88,3 +87,3 @@ public abstract class AbstractPieChartBuilder {",
                "   private void addStateItemForComponentInstance(final String[] tabValue,",
                "-      final ComponentInstLight cmp) {",
                "+      final SilverpeasComponentInstance cmp) {",
                "     long[] countValues = new long[3];",
                "@@ -108,12 +107,2 @@ public abstract class AbstractPieChartBuilder {",
                "-  private ComponentInstLight getComponentInstLight(final String componentId) {",
                "-    ComponentInstLight cmp = null;",
                "-    try {",
                "-      cmp = AdministrationServiceProvider.getAdminService().getComponentInstLight(componentId);",
                "-    } catch (AdminException e) {",
                "-      SilverLogger.getLogger(this).error(e);",
                "-    }",
                "-    return cmp;",
                "-  }",
                "-",
                "   private boolean isIdBelongsTo(String spaceId, String[] tabAllSpaceIds) {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/DocPieChartBuilder.java b/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/DocPieChartBuilder.java",
                "index a199b6a736..c98d214188 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/DocPieChartBuilder.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/DocPieChartBuilder.java",
                "@@ -26,6 +26,6 @@ package org.silverpeas.web.silverstatistics.control;",
                " import org.silverpeas.core.admin.service.AdministrationServiceProvider;",
                "+import org.silverpeas.core.admin.space.SpaceInstLight;",
                " import org.silverpeas.core.util.LocalizationBundle;",
                " import org.silverpeas.core.util.StringUtil;",
                "-import org.silverpeas.core.silvertrace.SilverTrace;",
                "-import org.silverpeas.core.admin.space.SpaceInstLight;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -39,3 +39,3 @@ public class DocPieChartBuilder extends AbstractPieChartBuilder {",
                "-  public DocPieChartBuilder(String spaceId, LocalizationBundle message) {",
                "+  DocPieChartBuilder(String spaceId, LocalizationBundle message) {",
                "     this.spaceId = spaceId;",
                "@@ -59,4 +59,3 @@ public class DocPieChartBuilder extends AbstractPieChartBuilder {",
                "     } catch (Exception e) {",
                "-      SilverTrace.error(\"silverStatisticsPeas\", \"DocPieChartBuilder.getChartTitle()\",",
                "-          \"root.EX_SQL_QUERY_FAILED\", e);",
                "+      SilverLogger.getLogger(this).error(e);",
                "     }",
                "@@ -75,6 +74,5 @@ public class DocPieChartBuilder extends AbstractPieChartBuilder {",
                "     } catch (Exception e) {",
                "-      SilverTrace.error(\"silverStatisticsPeas\", \"DocPieChartBuilder.getCmpStats()\",",
                "-          \"root.EX_SQL_QUERY_FAILED\", e);",
                "+      SilverLogger.getLogger(this).error(e);",
                "     }",
                "-    return new HashMap<String, String[]>(0);",
                "+    return new HashMap<>(0);",
                "   }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasDAOVolumeServer.java b/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasDAOVolumeServer.java",
                "index c017cc2a5e..9d7e518ad0 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasDAOVolumeServer.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasDAOVolumeServer.java",
                "@@ -25,16 +25,15 @@ package org.silverpeas.web.silverstatistics.control;",
                "+import org.silverpeas.core.SilverpeasException;",
                " import org.silverpeas.core.admin.user.model.UserDetail;",
                "-import org.silverpeas.core.persistence.jdbc.DBUtil;",
                "+import org.silverpeas.core.persistence.jdbc.sql.JdbcSqlQuery;",
                " import org.silverpeas.core.silverstatistics.volume.service.DirectoryVolumeService;",
                "-import org.silverpeas.core.util.UnitUtil;",
                "-import org.silverpeas.core.util.memory.MemoryUnit;",
                "-import java.sql.Connection;",
                "-import java.sql.ResultSet;",
                " import java.sql.SQLException;",
                "-import java.sql.Statement;",
                "-import java.util.ArrayList;",
                " import java.util.Collection;",
                "-import java.util.List;",
                " import java.util.Map;",
                "+import java.util.concurrent.ExecutionException;",
                "+",
                "+import static org.silverpeas.core.util.UnitUtil.convertTo;",
                "+import static org.silverpeas.core.util.memory.MemoryUnit.B;",
                "+import static org.silverpeas.core.util.memory.MemoryUnit.KB;",
                "@@ -42,34 +41,7 @@ import java.util.Map;",
                "  * Class declaration Get stat size directory data from database",
                "- * <p>",
                "- * @author",
                "  */",
                "-public class SilverStatisticsPeasDAOVolumeServer {",
                "-",
                "-  public static final int INDICE_DATE = 0;",
                "-  public static final int INDICE_LIB = 1;",
                "-  public static final int INDICE_SIZE = 2;",
                "-  private static final String selectQuery =",
                "-      \" SELECT dateStat, fileDir, sizeDir FROM SB_Stat_SizeDirCumul ORDER BY dateStat\";",
                "+class SilverStatisticsPeasDAOVolumeServer {",
                "-  /**",
                "-   * donne les stats global pour l'ensemble de tous les users cad 2 infos, la collection contient",
                "-   * donc un seul element",
                "-   *",
                "-   * @return",
                "-   * @throws SQLException",
                "-   *",
                "-   */",
                "-  public static Collection<String[]> getStatsVolumeServer() throws SQLException {",
                "-    Statement stmt = null;",
                "-    ResultSet rs = null;",
                "-    Connection myCon = null;",
                "-    try {",
                "-      myCon = DBUtil.openConnection();",
                "-      stmt = myCon.createStatement();",
                "-      rs = stmt.executeQuery(selectQuery);",
                "-      return getStatsVolumeServerFromResultSet(rs);",
                "-    } finally {",
                "-      DBUtil.close(rs, stmt);",
                "-      DBUtil.close(myCon);",
                "-    }",
                "+  private SilverStatisticsPeasDAOVolumeServer() {",
                "+    throw new IllegalStateException(\"Stateless DAO class\");",
                "   }",
                "@@ -77,31 +49,42 @@ public class SilverStatisticsPeasDAOVolumeServer {",
                "   /**",
                "-   * Method declaration",
                "-   *",
                "-   * @param rs",
                "-   * @return",
                "-   * @throws SQLException",
                "+   * Gives global stats for all users.",
                "+   * @return Collection of array of string.",
                "+   * @throws SQLException on technical error with database.",
                "    *",
                "    */",
                "-  private static Collection<String[]> getStatsVolumeServerFromResultSet(ResultSet rs)",
                "-      throws SQLException {",
                "-    List<String[]> myList = new ArrayList<String[]>();",
                "-    while (rs.next()) {",
                "-      String[] stat = new String[3];",
                "-      stat[INDICE_DATE] = rs.getString(1);",
                "-      stat[INDICE_LIB] = rs.getString(2);",
                "-      stat[INDICE_SIZE] = String.valueOf(UnitUtil.convertTo(rs.getLong(3), MemoryUnit.B,",
                "-          MemoryUnit.KB));",
                "-      myList.add(stat);",
                "-    }",
                "-    return myList;",
                "+  static Collection<String[]> getStatsVolumeServer() throws SQLException {",
                "+    return JdbcSqlQuery",
                "+        .createSelect(\"dateStat, fileDir, sizeDir\")",
                "+        .from(\"SB_Stat_SizeDirCumul\")",
                "+        .orderBy(\"dateStat\")",
                "+        .execute(r -> {",
                "+          final String date = r.getString(1);",
                "+          final String repository = r.getString(2);",
                "+          final String size = String.valueOf(convertTo(r.getLong(3), B, KB));",
                "+          return new String[]{date, repository, size};",
                "+        });",
                "   }",
                "-  public static Map<String, String[]> getStatsSizeVentil() throws Exception {",
                "-    DirectoryVolumeService service = new DirectoryVolumeService();",
                "-    return service.getSizeVentilation(UserDetail.getCurrentRequester().getId());",
                "+  static Map<String, String[]> getStatsSizeVentil() throws SilverpeasException {",
                "+    final DirectoryVolumeService service = new DirectoryVolumeService();",
                "+    try {",
                "+      return service.getSizeVentilation(UserDetail.getCurrentRequester().getId());",
                "+    } catch (InterruptedException e) {",
                "+      Thread.currentThread().interrupt();",
                "+      throw new SilverpeasException(e);",
                "+    } catch (ExecutionException e) {",
                "+      throw new SilverpeasException(e);",
                "+    }",
                "   }",
                "-  public static Map<String, String[]> getStatsVentil() throws Exception {",
                "-    DirectoryVolumeService service = new DirectoryVolumeService();",
                "-    return service.getFileNumberVentilation(UserDetail.getCurrentRequester().getId());",
                "+  static Map<String, String[]> getStatsVentil() throws SilverpeasException {",
                "+    final DirectoryVolumeService service = new DirectoryVolumeService();",
                "+    try {",
                "+      return service.getFileNumberVentilation(UserDetail.getCurrentRequester().getId());",
                "+    } catch (InterruptedException e) {",
                "+      Thread.currentThread().interrupt();",
                "+      throw new SilverpeasException(e);",
                "+    } catch (ExecutionException e) {",
                "+      throw new SilverpeasException(e);",
                "+    }",
                "   }",
                "diff --git a/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/PerfVolumeTest.java b/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/PerfVolumeTest.java",
                "index 7c35a53545..fb47e05901 100644",
                "--- a/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/PerfVolumeTest.java",
                "+++ b/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/PerfVolumeTest.java",
                "@@ -50,21 +50,2 @@ public class PerfVolumeTest {",
                "-  @Test",
                "-  @Ignore",
                "-  public void computeDataFromFs() throws Exception {",
                "-    String dataHomeDir = \"/media/DATA/opt/silverpeas/data/workspaces/\";",
                "-    File dataDirectory = new File(dataHomeDir);",
                "-    long total = 0L;",
                "-    DirectoryVolumeService service = new DirectoryVolumeService(dataDirectory);",
                "-    for (int i = 0; i < forLoop; i++) {",
                "-      long start = System.currentTimeMillis();",
                "-      service.getVolumes(userId);",
                "-      total = total + (System.currentTimeMillis() - start);",
                "-    }",
                "-    System.out.println(\"Mean duration for \" + forLoop + \" is \" + (total / forLoop)",
                "-        + \" for scanning mode\");",
                "-  }",
                "-",
                "-",
                "-",
                "-",
                "   @BeforeClass"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/contentcontainer/content/ContentPeas.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/model/DirectoryStats.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/AbstractComputer.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/ComponentStatisticsProvider.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectorySizeComputer.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectoryVolumeService.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/DirectoryWalkerSizeComputer.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/FileNumberComputer.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsManager.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsService.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/SilverStatisticsVolumeAlimentation.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/volume/service/StatisticDirectoryWalker.java",
                "core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/SwfToolManager.java",
                "core-war/src/main/java/org/silverpeas/web/silverstatistics/control/AbstractPieChartBuilder.java",
                "core-war/src/main/java/org/silverpeas/web/silverstatistics/control/DocPieChartBuilder.java",
                "core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasDAOVolumeServer.java",
                "core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/PerfVolumeTest.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "8329": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, file, directory",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 8329",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "07233cf7ef4236c91f50cac777c4789c29efb6b5",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1546855849,
            "hunks": 14,
            "message": "Feature #10255 Replace the textarea by a wysiwyg editor in the user notification window (popup). In order to reference the attachments of a contribution in a manual user notification, the identifier of a contribution concerned by the notification (if any) is now specified within the notification context by a predefined notification context key: contributionId.",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java b/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "index 43eb21cabc..25c2d03732 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "@@ -18,2 +18,15 @@ public class NotificationContext extends HashMap<String, String> {",
                "+  /**",
                "+   * The predefined key in the context mapped with the unique identifier of a Silverpeas component",
                "+   * instance.",
                "+   */",
                "+  public static final String COMPONENT_ID = \"componentId\";",
                "+",
                "+  /**",
                "+   * The predefined key in the context mapped with the unique identifier of a contribution in",
                "+   * Silverpeas. If the contribution is managed by a given component instance, then the key",
                "+   * {@link NotificationContext#COMPONENT_ID} must be defined.",
                "+   */",
                "+  public static final String CONTRIBUTION_ID = \"contributionId\";",
                "+",
                "   public List<String> getAsList(final String key) {",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "index 1dca0c650d..3850b4a2f6 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "@@ -296,4 +296,5 @@ public class NotificationMetaData implements java.io.Serializable {",
                "     final String extraMessage = getOriginalExtraMessage();",
                "-    if (isDefined(extraMessage) &&",
                "-        !messageContent.toString().replace(\"\\r\", \"\").contains(extraMessage.replace(\"\\r\", \"\"))) {",
                "+    if (isDefined(extraMessage) && !messageContent.toString()",
                "+        .replaceAll(\"[\\\\n\\\\r]\", \"\")",
                "+        .contains(extraMessage.replaceAll(\"[\\\\n\\\\r]\", \"\"))) {",
                "       SilverpeasTemplate templateRepository =",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "index ccb6d16eed..1571605bba 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "@@ -143,3 +143,4 @@ public class UserNotificationSessionController extends AbstractComponentSessionC",
                "     userNotification.setTitle(context.get(\"title\"))",
                "-        .setContent(context.get(\"content\"))",
                "+        .setContent(context.get(\"content\").replaceAll(\"[\\\\n\\\\r]\", \"\"))",
                "+        .setAttachmentLinks(context.get(NotificationContext.CONTRIBUTION_ID))",
                "         .setSender(getUserDetail())",
                "@@ -153,3 +154,4 @@ public class UserNotificationSessionController extends AbstractComponentSessionC",
                "   private UserNotificationWrapper supplyUserNotification(final NotificationContext context) {",
                "-    final String componentId = context.getOrDefault(\"componentId\", getComponentRootName());",
                "+    final String componentId =",
                "+        context.getOrDefault(NotificationContext.COMPONENT_ID, getComponentRootName());",
                "     final String componentName;",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "index ee2bea2d6f..f9333b4c90 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "@@ -3,3 +3,6 @@ package org.silverpeas.web.notificationuser.control;",
                " import org.owasp.encoder.Encode;",
                "+import org.silverpeas.core.ResourceReference;",
                " import org.silverpeas.core.admin.user.model.User;",
                "+import org.silverpeas.core.contribution.attachment.AttachmentService;",
                "+import org.silverpeas.core.contribution.attachment.model.SimpleDocument;",
                " import org.silverpeas.core.notification.user.UserNotification;",
                "@@ -11,2 +14,3 @@ import org.silverpeas.core.template.SilverpeasTemplate;",
                " import org.silverpeas.core.ui.DisplayI18NHelper;",
                "+import org.silverpeas.core.util.Link;",
                " import org.silverpeas.core.util.LocalizationBundle;",
                "@@ -16,2 +20,3 @@ import org.silverpeas.core.util.StringUtil;",
                " import java.util.Collection;",
                "+import java.util.List;",
                " import java.util.Objects;",
                "@@ -71,6 +76,26 @@ public class UserNotificationWrapper implements UserNotification {",
                "       final NotificationMetaData metaData = notification.getNotificationMetaData();",
                "-      final String htmlContent = Encode.forHtml(content);",
                "-      metaData.setContent(htmlContent);",
                "+      metaData.setContent(content);",
                "       for (String lang : DisplayI18NHelper.getLanguages()) {",
                "-        metaData.addExtraMessage(htmlContent, lang);",
                "+        metaData.addExtraMessage(content, lang);",
                "+      }",
                "+    }",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets a link for all the attachments of the specified contribution.",
                "+   * @param contributionId the unique identifier of the contribution in the component instance",
                "+   * from which this notification was built.",
                "+   * @return itself.",
                "+   */",
                "+  public UserNotificationWrapper setAttachmentLinks(final String contributionId) {",
                "+    if (StringUtil.isDefined(contributionId)) {",
                "+      final AttachmentService attachmentService = AttachmentService.get();",
                "+      final NotificationMetaData metaData = notification.getNotificationMetaData();",
                "+      for (String lang : DisplayI18NHelper.getLanguages()) {",
                "+        final ResourceReference ref =",
                "+            new ResourceReference(contributionId, metaData.getComponentId());",
                "+        final List<SimpleDocument> documents =",
                "+            attachmentService.listDocumentsByForeignKey(ref, lang);",
                "+        documents.forEach(d -> metaData.setLink(new Link(d.getAttachmentURL(), d.getTitle()), lang));",
                "       }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "index e997700aa7..788ff203e7 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "@@ -34,4 +34,6 @@ import org.silverpeas.web.notificationuser.control.UserNotificationSessionContro",
                "+import javax.servlet.annotation.WebServlet;",
                " import java.util.Enumeration;",
                "+@WebServlet()",
                " public class UserNotificationRequestRouter",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebController.java b/core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebController.java",
                "index d090b21c1f..0648619e90 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebController.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebController.java",
                "@@ -32,2 +32,3 @@ import org.silverpeas.core.calendar.notification.user.CalendarEventOccurrenceNot",
                " import org.silverpeas.core.notification.user.ManualUserNotificationSupplier;",
                "+import org.silverpeas.core.notification.user.NotificationContext;",
                " import org.silverpeas.core.util.Pair;",
                "@@ -120,3 +121,3 @@ public abstract class AbstractCalendarWebController<C extends AbstractCalendarWe",
                "     return c -> {",
                "-      final String occurrenceId = c.get(\"eventId\");",
                "+      final String occurrenceId = c.get(NotificationContext.CONTRIBUTION_ID);",
                "       final CalendarEventOccurrence occurrence ="
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebController.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10255": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10255",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cfca0d4d19bf2c9d919775f028b5bda741239085",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1545058727,
            "hunks": 75,
            "message": "Feature #10284: - adding a new UserFilterManagement which is able to apply prefixed notation rules on result requests performed on external identity repository - adding the possibility to update settings from the application",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/util/CollectionUtil.java b/core-api/src/main/java/org/silverpeas/core/util/CollectionUtil.java",
                "index 76e2adb4ef..51ead8ac2a 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/util/CollectionUtil.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/util/CollectionUtil.java",
                "@@ -36,6 +36,9 @@ import java.util.Optional;",
                " import java.util.Set;",
                "+import java.util.function.Function;",
                " import java.util.function.Predicate;",
                "-import java.util.stream.Collectors;",
                " import java.util.stream.Stream;",
                "+import static java.util.stream.Collectors.toList;",
                "+import static java.util.stream.Collectors.toSet;",
                "+",
                " /**",
                "@@ -242,2 +245,30 @@ public class CollectionUtil {",
                "   public static <T> Collection<T> intersection(Collection<T> col1, Collection<T> col2) {",
                "+    return intersection(col1, col2, t -> t);",
                "+  }",
                "+",
                "+  /**",
                "+   * Makes an intersection between both of the given lists.<br>",
                "+   * The result contains unique values.",
                "+   * @param list1 the first list.",
                "+   * @param list2 the second list.",
                "+   * @param discriminator get the discriminator data.",
                "+   * @param <T> the type of the items in the list",
                "+   * @return the intersection between the two lists.",
                "+   */",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  public static <T> List<T> intersection(List<T> list1, List<T> list2, Function<T, Object> discriminator) {",
                "+    return (List) intersection(list1, (Collection) list2, discriminator);",
                "+  }",
                "+",
                "+  /**",
                "+   * Makes an intersection between both of the given collections.<br>",
                "+   * The result contains unique values.",
                "+   * @param col1 the first collection.",
                "+   * @param col2 the second collection.",
                "+   * @param discriminator get the discriminator data.",
                "+   * @param <T> the type of the items in the list",
                "+   * @return the intersection between the two collections.",
                "+   */",
                "+  public static <T> Collection<T> intersection(Collection<T> col1, Collection<T> col2,",
                "+      Function<T, Object> discriminator) {",
                "     Collection<T> smaller = col1;",
                "@@ -248,8 +279,8 @@ public class CollectionUtil {",
                "     }",
                "-    final HashSet<T> matcher = new HashSet<T>(smaller);",
                "-    final Stream<T> intersection = larger.stream().filter(matcher::remove);",
                "+    final Set<Object> matcher = smaller.stream().map(discriminator).collect(toSet());",
                "+    final Stream<T> intersection = larger.stream().filter(o -> matcher.remove(discriminator.apply(o)));",
                "     if (col1 instanceof Set && col2 instanceof Set) {",
                "-      return intersection.collect(Collectors.toSet());",
                "+      return intersection.collect(toSet());",
                "     }",
                "-    return intersection.collect(Collectors.toList());",
                "+    return intersection.collect(toList());",
                "   }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/util/ResourceLocator.java b/core-api/src/main/java/org/silverpeas/core/util/ResourceLocator.java",
                "index 8d0748b2dd..e682d97d2f 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/util/ResourceLocator.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/util/ResourceLocator.java",
                "@@ -25,4 +25,7 @@ package org.silverpeas.core.util;",
                "+import org.silverpeas.core.SilverpeasRuntimeException;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "+import java.io.File;",
                "+import java.io.FileOutputStream;",
                " import java.io.IOException;",
                "@@ -31,2 +34,3 @@ import java.util.Locale;",
                " import java.util.MissingResourceException;",
                "+import java.util.Objects;",
                " import java.util.Optional;",
                "@@ -154,2 +158,19 @@ public class ResourceLocator {",
                "+  /**",
                "+   * Save the given properties for {@link SettingBundle} and refreshing its cache.",
                "+   * @param settings a loaded setting bundle.",
                "+   * @param properties the properties, usually initialized from {@link SettingBundle#asProperties()}.",
                "+   */",
                "+  public static synchronized void saveSettingBundle(SettingBundle settings,",
                "+      Properties properties) {",
                "+    try {",
                "+      final String bundleName = \"/\" + settings.getBaseBundleName().replaceAll(\"\\\\.\", \"/\") + \".properties\";",
                "+      properties.store(new FileOutputStream(new File(",
                "+          Objects.requireNonNull(loader.getResource(bundleName)).toURI())), null);",
                "+      ResourceBundle.clearCache(loader);",
                "+    } catch (Exception e) {",
                "+      throw new SilverpeasRuntimeException(e);",
                "+    }",
                "+  }",
                "+",
                "   /**",
                "@@ -241,8 +262,8 @@ public class ResourceLocator {",
                "       checkBundleName(bundleName);",
                "-        return ResourceBundle.getBundle(bundleName, locale, loader, configurationControl);",
                "-      } catch (MissingResourceException mex) {",
                "-        if (mandatory) {",
                "-          SilverLogger.getLogger(ResourceLocator.class).error(mex.getMessage());",
                "-          throw mex;",
                "-        }",
                "+      return ResourceBundle.getBundle(bundleName, locale, loader, configurationControl);",
                "+    } catch (MissingResourceException mex) {",
                "+      if (mandatory) {",
                "+        SilverLogger.getLogger(ResourceLocator.class).error(mex.getMessage());",
                "+        throw mex;",
                "+      }",
                "     }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/util/SilverpeasList.java b/core-api/src/main/java/org/silverpeas/core/util/SilverpeasList.java",
                "index e51f46a1fe..67960a6888 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/util/SilverpeasList.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/util/SilverpeasList.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.util;",
                "+import java.util.Arrays;",
                " import java.util.List;",
                "@@ -66,2 +67,14 @@ public interface SilverpeasList<T> extends List<T> {",
                "+  /**",
                "+   * Gets an array as a {@link SilverpeasList}.",
                "+   * @param arrayToConvert the array to get as {@link SilverpeasList}.",
                "+   * @param <T> the type of the elements into the array.",
                "+   * @return the {@link SilverpeasList} instance.",
                "+   */",
                "+  static <T> SilverpeasList<T> as(final T[] arrayToConvert) {",
                "+    final SilverpeasArrayList<T> list = new SilverpeasArrayList<>(arrayToConvert.length);",
                "+    list.addAll(Arrays.asList(arrayToConvert));",
                "+    return list;",
                "+  }",
                "+",
                "   /**",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java",
                "index 96087b0402..927f7a0731 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java",
                "@@ -28,2 +28,3 @@ import org.silverpeas.core.admin.service.AdminException;",
                " import org.silverpeas.core.admin.user.model.GroupDetail;",
                "+import org.silverpeas.core.admin.user.model.User;",
                " import org.silverpeas.core.admin.user.model.UserDetail;",
                "@@ -34,2 +35,5 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Optional;",
                "+",
                "+import static java.util.Optional.empty;",
                "@@ -270,2 +274,52 @@ public interface DomainDriver {",
                "   void resetEncryptedPassword(UserDetail user, String encryptedPassword) throws AdminException;",
                "+",
                "+  /**",
                "+   * Gets an optional {@link UserFilterManager} which permits to manage a filter to apply on the",
                "+   * user request results obtained from external user account repository.",
                "+   * @return an optional {@link UserFilterManager} implementation.",
                "+   */",
                "+  default Optional<UserFilterManager> getUserFilterManager() {",
                "+    return empty();",
                "+  }",
                "+",
                "+  /**",
                "+   * Definition of a user filter manager.",
                "+   */",
                "+  interface UserFilterManager {",
                "+",
                "+    /**",
                "+     * Gets the rule key.",
                "+     * @return a string.",
                "+     */",
                "+    String getRuleKey();",
                "+",
                "+    /**",
                "+     * Gets the current rule.",
                "+     * @return a string.",
                "+     */",
                "+    String getRule();",
                "+",
                "+    /**",
                "+     * Validates the given rule by performing a request of all users on external repository.",
                "+     * <p>",
                "+     *   In case of success, the filtered users are returned.",
                "+     * </p>",
                "+     * @param rule the rule to validate.",
                "+     * @return an array of {@link User}.",
                "+     * @throws AdminException in case of validation error.",
                "+     */",
                "+    User[] validateRule(final String rule) throws AdminException;",
                "+",
                "+    /**",
                "+     * Validates the given rule by performing a request of all users on external repository and",
                "+     * save it on Silverpeas's domain repository.",
                "+     * <p>",
                "+     *   In case of success, the filtered users of validation processing are returned.",
                "+     * </p>",
                "+     * @param rule the rule to validate.",
                "+     * @return an array of {@link User}.",
                "+     * @throws AdminException in case of validation error.",
                "+     */",
                "+    User[] saveRule(final String rule) throws AdminException;",
                "+  }",
                " }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "index baeea96c12..c48cceb463 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "@@ -59,2 +59,3 @@ public class GoogleDirectoryRequester {",
                "   private final String jsonKeyPath;",
                "+  private final String filter;",
                "@@ -68,5 +69,7 @@ public class GoogleDirectoryRequester {",
                "-  GoogleDirectoryRequester(final String serviceAccountUser, final String jsonKeyPath) {",
                "+  GoogleDirectoryRequester(final String serviceAccountUser, final String jsonKeyPath,",
                "+      final String filter) {",
                "     this.serviceAccountUser = serviceAccountUser;",
                "     this.jsonKeyPath = jsonKeyPath;",
                "+    this.filter = filter;",
                "   }",
                "@@ -109,6 +112,7 @@ public class GoogleDirectoryRequester {",
                "     try {",
                "-      final List<User> result = new LinkedList<>();",
                "+      List<User> result = new LinkedList<>();",
                "       final long start = System.currentTimeMillis();",
                "       final Directory.Users.List users = getDirectoryService().users().list()",
                "-          .setMaxResults(QUERY_MAX_RESULTS).setCustomer(MY_CUSTOMER);",
                "+          .setMaxResults(QUERY_MAX_RESULTS).setCustomer(MY_CUSTOMER)",
                "+          .setProjection(\"full\");",
                "       String pageToken = null;",
                "@@ -123,5 +127,6 @@ public class GoogleDirectoryRequester {",
                "       }",
                "+      result = applyFilter(result);",
                "       result.sort(Comparator",
                "-          .comparing((User g) -> g.getName().getFamilyName())",
                "-          .thenComparing(g -> g.getName().getGivenName()));",
                "+          .comparing((User g) -> g.getName().getFamilyName().toLowerCase())",
                "+          .thenComparing(g -> g.getName().getGivenName().toLowerCase()));",
                "       final long end = System.currentTimeMillis();",
                "@@ -135,2 +140,6 @@ public class GoogleDirectoryRequester {",
                "+  private List<User> applyFilter(final List<User> result) {",
                "+    return new GoogleUserFilter<>(result, filter).apply();",
                "+  }",
                "+",
                "   public User user(final String id) throws AdminException {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "index 528d3f7bd2..088258f820 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "@@ -32,5 +32,3 @@ import org.silverpeas.core.admin.user.model.UserFull;",
                " import org.silverpeas.core.util.SettingBundle;",
                "-import org.silverpeas.core.util.StringUtil;",
                "-import javax.annotation.Nonnull;",
                " import java.util.Collections;",
                "@@ -38,5 +36,4 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Optional;",
                " import java.util.function.Function;",
                "-import java.util.function.Predicate;",
                "-import java.util.stream.Stream;",
                "@@ -55,3 +52,4 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "-  private SettingBundle settings;",
                "+  protected SettingBundle settings;",
                "+  private UserFilterManager userFilterManager;",
                "@@ -65,2 +63,3 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "     settings = rs;",
                "+    userFilterManager = new GoogleUserFilterManager(this, rs);",
                "   }",
                "@@ -159,3 +158,3 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "   public UserDetail[] getAllUsers() throws AdminException {",
                "-    return request().users().stream().filter(byOU).map(userDetailMapper).toArray(UserDetail[]::new);",
                "+    return request().users().stream().map(userDetailMapper).toArray(UserDetail[]::new);",
                "   }",
                "@@ -298,18 +297,11 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "-  GoogleDirectoryRequester request() {",
                "-    return new GoogleDirectoryRequester(settings.getString(\"service.account.user\"),",
                "-        settings.getString(\"service.account.jsonKey\"));",
                "+  @Override",
                "+  public Optional<UserFilterManager> getUserFilterManager() {",
                "+    return Optional.of(userFilterManager);",
                "   }",
                "-  private Predicate<User> byOU = u -> {",
                "-    final String userOu = u.getOrgUnitPath();",
                "-    final Stream<String> inclusion = streamSetting(\"synchro.ou.include\", \"/\");",
                "-    final Stream<String> exclusion = streamSetting(\"synchro.ou.exclude\", \"\");",
                "-    return inclusion.anyMatch(userOu::startsWith) && exclusion.noneMatch(userOu::startsWith);",
                "-  };",
                "-",
                "-  @Nonnull",
                "-  private Stream<String> streamSetting(final String key, final String defaultValue) {",
                "-    return Stream.of(settings.getString(key, defaultValue).split(\";\")).map(String::trim)",
                "-        .filter(StringUtil::isDefined);",
                "+  GoogleDirectoryRequester request() {",
                "+    return new GoogleDirectoryRequester(settings.getString(\"service.account.user\"),",
                "+        settings.getString(\"service.account.jsonKey\"),",
                "+        userFilterManager.getRule());",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "new file mode 100644",
                "index 0000000000..10cf10c302",
                "--- /dev/null",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "@@ -0,0 +1,453 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+package org.silverpeas.core.admin.domain.driver.googledriver;",
                "+",
                "+import com.google.api.client.json.GenericJson;",
                "+import org.silverpeas.core.SilverpeasRuntimeException;",
                "+import org.silverpeas.core.util.expression.PrefixedNotationExpressionEngine;",
                "+import org.silverpeas.core.util.expression.PrefixedNotationExpressionEngine.OperatorFunction;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.Collections;",
                "+import java.util.HashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Objects;",
                "+import java.util.Set;",
                "+import java.util.function.BiPredicate;",
                "+import java.util.function.Function;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+import java.util.stream.Collectors;",
                "+",
                "+import static java.text.MessageFormat.format;",
                "+import static java.util.Collections.EMPTY_LIST;",
                "+import static java.util.Collections.emptyList;",
                "+import static org.apache.commons.lang3.StringUtils.EMPTY;",
                "+import static org.silverpeas.core.admin.domain.driver.googledriver.GoogleUserFilter.ERROR.*;",
                "+import static org.silverpeas.core.util.CollectionUtil.intersection;",
                "+import static org.silverpeas.core.util.CollectionUtil.union;",
                "+import static org.silverpeas.core.util.StringUtil.*;",
                "+import static org.silverpeas.core.util.expression.PrefixedNotationExpressionEngine.from;",
                "+",
                "+/**",
                "+ * This class handles the evaluation of a filter rule of Google user accounts.",
                "+ * <p>",
                "+ * A filter rule is represented by a {@link String} composed by:",
                "+ * <ul>",
                "+ * <li>",
                "+ * a simple rule, with <b>[resource attribute]</b> representing the full path in JSON structure,",
                "+ * <b>[resource attribute]</b> is case sensitive and <b>[string value]</b> is not:",
                "+ * <ul>",
                "+ * <li><b>[resource attribute] = <i>[string value]</i></b> targets all accounts which the",
                "+ * attribute value is equal to the specified value </li>",
                "+ * <li><b>[resource attribute] ^= <i>[string value]</i></b> targets all accounts which the",
                "+ * attribute value is equal to or begins with the specified value </li>",
                "+ * <li><b>[resource attribute] $= <i>[string value]</i></b> targets all accounts which the",
                "+ * attribute value is equal to or ends with the specified value </li>",
                "+ * <li><b>[resource attribute] *= <i>[string value]</i></b> targets all accounts which the",
                "+ * attribute value contains the specified value </li>",
                "+ * </ul>",
                "+ * </li>",
                "+ * <li>",
                "+ * a combination of simple rules. The language to write the combination is the one of",
                "+ * prefixed notation expression. Please take a look at documentation of",
                "+ * {@link PrefixedNotationExpressionEngine} class to get more information about this",
                "+ * language.<br>",
                "+ * Each operand, here, can be:",
                "+ * <ul>",
                "+ * <li><b>a simple rule</b> one of those defined above</li>",
                "+ * <li><b>an operation with</b> one or several operands</li>",
                "+ * </ul>",
                "+ * The possible operators here:",
                "+ * <ul>",
                "+ * <li><b>&</b>: apply an AND operation between each operand, so an intersection between the",
                "+ * users ids guessed from each operand</li>",
                "+ * <li><b>|</b>: apply an OR operation between each operand, so an intersection between the",
                "+ * users ids guessed from each operand</li>",
                "+ * <li><b>!</b>: apply a negation on one operand only, so all the users ids of the",
                "+ * platform unless those guessed from the operand. Not working if several one are defined</li>",
                "+ * </ul>",
                "+ * </li>",
                "+ * </ul>",
                "+ * </p>",
                "+ * @author Yohann Chastagnier",
                "+ */",
                "+class GoogleUserFilter<T extends GenericJson> {",
                "+",
                "+  private static final Pattern EXPRESSION_PATTERN = Pattern.compile(\"(?i)^\\\\s*[(].+[)]\\\\s*$\");",
                "+  private static final Pattern CRITERION_ARRAY_PATTERN = Pattern",
                "+      .compile(\"(?i)^\\\\s*(\\\\S+)\\\\s*\\\\[\\\\s*(\\\\S+)\\\\s*]$\");",
                "+  private static final String CRITERION_PART_DECODER = \"(?i)^\\\\s*(\\\\S+)\\\\s*\";",
                "+  private static final Map<String, BiPredicate<String, String>> OPERATORS = new HashMap<>(3);",
                "+  private final List<T> allUsers;",
                "+  private final String combinationRule;",
                "+",
                "+  /**",
                "+   * Hidden constructor",
                "+   * @param allUsers all the users before evaluation.",
                "+   * @param combinationRule the filter rules.",
                "+   */",
                "+  GoogleUserFilter(final List<T> allUsers, final String combinationRule) {",
                "+    this.allUsers = allUsers;",
                "+    this.combinationRule = combinationRule;",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the list of user identifiers represented by the synchronization rule.",
                "+   * @return list of strings where each one represents a Silverpeas user identifier.",
                "+   */",
                "+  public List<T> apply() {",
                "+    if (isNotDefined(combinationRule)) {",
                "+      return new ArrayList<>(allUsers);",
                "+    }",
                "+    return evaluateCombinationRule();",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the expression of the rule.<br>",
                "+   * If simple value, and if no escaped character detected, parentheses are escaped.",
                "+   * @return the expression.",
                "+   */",
                "+  private String getRuleExpression(PrefixedNotationExpressionEngine<List<T>> combinationEngine) {",
                "+    String rule = combinationRule != null ? combinationRule : \"\";",
                "+    Matcher matcher = EXPRESSION_PATTERN.matcher(rule);",
                "+    if (!matcher.matches() && !rule.contains(\"\\\\\") && !combinationEngine.detectOperator(rule)) {",
                "+      rule = rule.replaceAll(\"[(]\", \"\\\\\\\\(\").replaceAll(\"[)]\", \"\\\\\\\\)\");",
                "+    } else {",
                "+      final StringBuilder newRule = new StringBuilder();",
                "+      int i = 0;",
                "+      int nbOpening = 0;",
                "+      while (i < rule.length()) {",
                "+        char currentChar = rule.charAt(i);",
                "+        if (currentChar == '[') {",
                "+          nbOpening++;",
                "+        } else if (currentChar == ']') {",
                "+          nbOpening--;",
                "+        } else if (nbOpening > 0 && (currentChar == '(' || currentChar == ')')) {",
                "+          newRule.append(\"\\\\\");",
                "+        }",
                "+        newRule.append(currentChar);",
                "+        i++;",
                "+      }",
                "+      rule = newRule.toString();",
                "+    }",
                "+    return rule;",
                "+  }",
                "+",
                "+  /**",
                "+   * Evaluates a combination of simple rules.",
                "+   * @return a list of user identifiers.",
                "+   */",
                "+  private List<T> evaluateCombinationRule() {",
                "+    final OperatorFunction<List<T>> negate = new OperatorFunction<>(\"!\", (computed, users) -> {",
                "+      if (computed != EMPTY_LIST) {",
                "+        return new ArrayList<>();",
                "+      }",
                "+      final Set<String> idsToRemove = users.stream().map(u -> (String) u.get(\"id\")).collect(Collectors.toSet());",
                "+      return allUsers.stream().filter(u -> {",
                "+        final String id = (String) u.get(\"id\");",
                "+        return !idsToRemove.contains(id);",
                "+      })",
                "+      .collect(Collectors.toList());",
                "+    });",
                "+    final OperatorFunction<List<T>> and = new OperatorFunction<>(\"&\", (computed, users) -> {",
                "+      List<T> safeComputed = computed == EMPTY_LIST ? users : computed;",
                "+      return intersection(safeComputed, users, u -> u.get(\"id\"));",
                "+    });",
                "+    final OperatorFunction<List<T>> or = new OperatorFunction<>(\"|\", (computed, users) -> {",
                "+      List<T> safeComputed = computed == EMPTY_LIST ? emptyList() : computed;",
                "+      return union(safeComputed, users);",
                "+    });",
                "+    final Function<String, List<T>> customMaskRuleToUsers = this::evaluateCriterion;",
                "+    @SuppressWarnings(\"unchecked\")",
                "+    final PrefixedNotationExpressionEngine<List<T>> combinationEngine = from(",
                "+        customMaskRuleToUsers, negate, and, or);",
                "+    final String expression = getRuleExpression(combinationEngine);",
                "+    return combinationEngine.evaluate(expression);",
                "+  }",
                "+",
                "+  /**",
                "+   * Evaluates a criterion.",
                "+   * @param criterion a criterion.",
                "+   * @return a list of matching users.",
                "+   */",
                "+  private List<T> evaluateCriterion(final String criterion) {",
                "+    if (criterion == null) {",
                "+      return Collections.emptyList();",
                "+    }",
                "+    CriterionDecoder criterionDecoder = new WithArrayCriterionDecoder(criterion);",
                "+    if (!criterionDecoder.isMatching()) {",
                "+      criterionDecoder = new SimpleCriterionDecoder(criterion);",
                "+    }",
                "+    if (!criterionDecoder.isMatching()) {",
                "+      final String message = \"ground rule '\" + criterion + \"' is not correct !\";",
                "+      SilverLogger.getLogger(this).error(message);",
                "+      throw new SilverpeasRuntimeException(message);",
                "+    }",
                "+",
                "+    final CriterionDecoder decoder = criterionDecoder;",
                "+    return allUsers.stream().filter(u -> filterUser(decoder, u))",
                "+        .collect(Collectors.toList());",
                "+  }",
                "+",
                "+  private boolean filterUser(final CriterionDecoder criterionDecoder, final T data) {",
                "+    final String criterion = criterionDecoder.getCriterion();",
                "+    final String path = criterionDecoder.getPath();",
                "+    final String[] explodedPath = criterionDecoder.getExplodedPath();",
                "+    final String subRule = criterionDecoder.getSubRule();",
                "+    final String expectedValue = criterionDecoder.getExpectedValue().toLowerCase();",
                "+    final GenericJson attributeValues;",
                "+    try {",
                "+      attributeValues = resolvePath(criterionDecoder, 0, data);",
                "+    } catch (UserFilterException e) {",
                "+      throw e.withCriterion(criterion).withPath(path);",
                "+    }",
                "+    final String attr = defaultStringIfNotDefined(explodedPath[explodedPath.length - 1]);",
                "+    final boolean filterResult;",
                "+    if (isNotDefined(attr)) {",
                "+      filterResult = false;",
                "+    } else if (isDefined(subRule)) {",
                "+      filterResult = applySubRule(subRule, data, attr);",
                "+    } else {",
                "+      final BiPredicate<String, String> ope = OPERATORS.get(criterionDecoder.getOperator());",
                "+      if (ope == null) {",
                "+        throw new UserFilterException(BAD_OPERATOR).withCriterion(criterion)",
                "+            .withPath(path).withPathPart(attr);",
                "+      }",
                "+      Object o = attributeValues.get(attr);",
                "+      if (o != null) {",
                "+        o = o.toString().toLowerCase();",
                "+      }",
                "+      filterResult = ope.test((String) o, expectedValue);",
                "+    }",
                "+    return filterResult;",
                "+  }",
                "+",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  private boolean applySubRule(final String subRule, final T data, final String attr) {",
                "+    final boolean filterResult;",
                "+    final Object o = data.get(attr);",
                "+    if (o instanceof List) {",
                "+      final List<T> subData = ((List<Map<String, Object>>)o).stream().map(m -> {",
                "+        final T j = (T) new GenericJson();",
                "+        m.forEach(j::set);",
                "+        j.set(\"id\", data.get(\"id\"));",
                "+        return j;",
                "+      }).collect(Collectors.toList());",
                "+      filterResult = !new GoogleUserFilter<>(subData, subRule).apply().isEmpty();",
                "+    } else {",
                "+      filterResult = false;",
                "+    }",
                "+    return filterResult;",
                "+  }",
                "+",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  private GenericJson resolvePath(final CriterionDecoder criterionDecoder, final int pathLevel,",
                "+      final GenericJson data) {",
                "+    final String[] path = criterionDecoder.getExplodedPath();",
                "+    if (path.length == (pathLevel + 1)) {",
                "+      return data;",
                "+    }",
                "+    final String pathPart = path[pathLevel];",
                "+    Object subData = data.get(pathPart);",
                "+    if (!(subData instanceof GenericJson) && subData instanceof Map) {",
                "+      final T temp = (T) new GenericJson();",
                "+      ((Map<String, Object>) subData).forEach(temp::set);",
                "+      temp.set(\"id\", data.get(\"id\"));",
                "+      subData = temp;",
                "+    } else if (\"customSchemas\".equals(path[0]) && subData == null) {",
                "+      subData = new GenericJson();",
                "+    }",
                "+    if (subData == null) {",
                "+      throw new UserFilterException(NOT_VALID_PATH_PART).withPathPart(pathPart);",
                "+    } else if (!(subData instanceof GenericJson)) {",
                "+      throw new UserFilterException(FINAL_VALUE_PATH_PART).withPathPart(pathPart);",
                "+    }",
                "+    return resolvePath(criterionDecoder, pathLevel + 1, (GenericJson) subData);",
                "+  }",
                "+",
                "+  public enum ERROR {",
                "+    BAD_OPERATOR,",
                "+    NOT_VALID_PATH_PART,",
                "+    FINAL_VALUE_PATH_PART",
                "+  }",
                "+",
                "+  private abstract static class CriterionDecoder {",
                "+    private final String criterion;",
                "+    String path = EMPTY;",
                "+    String[] explodedPath;",
                "+    String operator = EMPTY;",
                "+    String expectedValue = EMPTY;",
                "+    String subRule = EMPTY;",
                "+    boolean match = false;",
                "+",
                "+    CriterionDecoder(final String criterion) {",
                "+      this.criterion = criterion;",
                "+      decode();",
                "+      this.explodedPath = path.split(\"[.]\");",
                "+    }",
                "+",
                "+    protected abstract void decode();",
                "+",
                "+    public boolean isMatching() {",
                "+      return match;",
                "+    }",
                "+",
                "+    public String getCriterion() {",
                "+      return criterion;",
                "+    }",
                "+",
                "+    public String getPath() {",
                "+      return path;",
                "+    }",
                "+",
                "+    String[] getExplodedPath() {",
                "+      return explodedPath;",
                "+    }",
                "+",
                "+    public String getOperator() {",
                "+      return operator;",
                "+    }",
                "+",
                "+    String getExpectedValue() {",
                "+      return expectedValue;",
                "+    }",
                "+",
                "+    String getSubRule() {",
                "+      return subRule;",
                "+    }",
                "+  }",
                "+",
                "+  private static class WithArrayCriterionDecoder extends CriterionDecoder {",
                "+",
                "+    WithArrayCriterionDecoder(final String criterion) {",
                "+      super(criterion);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void decode() {",
                "+      final Matcher matcher = CRITERION_ARRAY_PATTERN.matcher(getCriterion());",
                "+      if (matcher.find()) {",
                "+        this.path = matcher.group(1);",
                "+        explodedPath = path.split(\"[.]\");",
                "+        subRule = matcher.group(2);",
                "+        match = true;",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  private static class SimpleCriterionDecoder extends CriterionDecoder {",
                "+",
                "+    SimpleCriterionDecoder(final String criterion) {",
                "+      super(criterion);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void decode() {",
                "+      final String[] explodedCriterion = getCriterion().split(\"[=]\");",
                "+      match = explodedCriterion.length == 2;",
                "+      if (match) {",
                "+        path = explodedCriterion[0];",
                "+        final String lastChar = String.valueOf(path.charAt(path.length() - 1));",
                "+        operator = lastChar + \"=\";",
                "+        if (!OPERATORS.containsKey(operator)) {",
                "+          operator = \"=\";",
                "+        } else {",
                "+          path = path.substring(0, path.length() - 1);",
                "+        }",
                "+        path = path.replaceAll(CRITERION_PART_DECODER, \"$1\");",
                "+        explodedPath = path.split(\"[.]\");",
                "+        expectedValue = explodedCriterion[1].replaceAll(CRITERION_PART_DECODER, \"$1\");",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  public static class UserFilterException extends IllegalArgumentException {",
                "+    private static final long serialVersionUID = 1541302731885140639L;",
                "+    private final ERROR type;",
                "+    private final String[] elements = new String[3];",
                "+",
                "+    UserFilterException(final ERROR type) {",
                "+      super();",
                "+      this.type = type;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getMessage() {",
                "+      final String message;",
                "+      if (type == BAD_OPERATOR) {",
                "+        message = format(\"clause ''{0}'' uses a bad operator\", elements[0]);",
                "+      } else if (type == NOT_VALID_PATH_PART) {",
                "+        message = format(\"path part ''{2}'' of ''{1}'' in clause ''{0}'' is not valid\",",
                "+            (Object[]) elements);",
                "+      } else if (type == FINAL_VALUE_PATH_PART) {",
                "+        message =  format(\"path part ''{2}'' of ''{1}'' in clause ''{0}'' represents a final value\",",
                "+            (Object[]) elements);",
                "+      } else {",
                "+        message = super.getMessage();",
                "+      }",
                "+      return message;",
                "+    }",
                "+",
                "+    public ERROR getType() {",
                "+      return type;",
                "+    }",
                "+",
                "+    public String getCriterion() {",
                "+      return elements[0];",
                "+    }",
                "+",
                "+    UserFilterException withCriterion(final String clause) {",
                "+      this.elements[0] = clause;",
                "+      return this;",
                "+    }",
                "+",
                "+    public String getPath() {",
                "+      return elements[1];",
                "+    }",
                "+",
                "+    UserFilterException withPath(final String path) {",
                "+      this.elements[1] = path;",
                "+      return this;",
                "+    }",
                "+",
                "+    String getPathPart() {",
                "+      return elements[2];",
                "+    }",
                "+",
                "+    UserFilterException withPathPart(final String pathPart) {",
                "+      this.elements[2] = pathPart;",
                "+      return this;",
                "+    }",
                "+  }",
                "+",
                "+  static {",
                "+    OPERATORS.put(\"^=\", String::startsWith);",
                "+    OPERATORS.put(\"$=\", String::endsWith);",
                "+    OPERATORS.put(\"*=\", String::contains);",
                "+    OPERATORS.put(\"=\", Objects::equals);",
                "+  }",
                "+}",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilterManager.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilterManager.java",
                "new file mode 100644",
                "index 0000000000..cfe3db9c48",
                "--- /dev/null",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilterManager.java",
                "@@ -0,0 +1,93 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+",
                "+package org.silverpeas.core.admin.domain.driver.googledriver;",
                "+",
                "+import org.silverpeas.core.admin.domain.DomainDriver;",
                "+import org.silverpeas.core.admin.service.AdminException;",
                "+import org.silverpeas.core.admin.user.model.User;",
                "+import org.silverpeas.core.util.SettingBundle;",
                "+import org.silverpeas.core.util.StringUtil;",
                "+",
                "+import java.util.Properties;",
                "+",
                "+import static org.silverpeas.core.util.ResourceLocator.saveSettingBundle;",
                "+import static org.silverpeas.core.util.StringUtil.defaultStringIfNotDefined;",
                "+import static org.silverpeas.core.util.StringUtil.isDefined;",
                "+",
                "+/**",
                "+ * @author silveryocha",
                "+ */",
                "+public class GoogleUserFilterManager implements DomainDriver.UserFilterManager {",
                "+",
                "+  private static final String USER_FILTER_RULE = \"google.user.filter.rule\";",
                "+  private final DomainDriver driver;",
                "+  private final SettingBundle settings;",
                "+",
                "+  GoogleUserFilterManager(final DomainDriver driver, final SettingBundle settings) {",
                "+    this.driver = driver;",
                "+    this.settings = settings;",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getRuleKey() {",
                "+    return USER_FILTER_RULE;",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getRule() {",
                "+    return settings.getString(USER_FILTER_RULE, \"\");",
                "+  }",
                "+",
                "+  @Override",
                "+  public User[] validateRule(final String rule) throws AdminException {",
                "+    final String previous = getRule();",
                "+    final Properties properties = settings.asProperties();",
                "+    try {",
                "+      properties.setProperty(USER_FILTER_RULE, defaultStringIfNotDefined(rule));",
                "+      saveSettingBundle(settings, properties);",
                "+      return driver.getAllUsers();",
                "+    } catch (Exception e) {",
                "+      throw new AdminException(e);",
                "+    } finally {",
                "+      properties.setProperty(USER_FILTER_RULE, previous);",
                "+      saveSettingBundle(settings, properties);",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public User[] saveRule(final String rule) throws AdminException {",
                "+    final String previous = getRule();",
                "+    final Properties properties = settings.asProperties();",
                "+    try {",
                "+      properties.setProperty(USER_FILTER_RULE, defaultStringIfNotDefined(rule));",
                "+      saveSettingBundle(settings, properties);",
                "+      return driver.getAllUsers();",
                "+    } catch (Exception e) {",
                "+      properties.setProperty(USER_FILTER_RULE, previous);",
                "+      saveSettingBundle(settings, properties);",
                "+      throw new AdminException(e);",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/service/AdminController.java b/core-library/src/main/java/org/silverpeas/core/admin/service/AdminController.java",
                "index 7f1d8c6dca..7be4a44309 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/service/AdminController.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/service/AdminController.java",
                "@@ -794,3 +794,2 @@ public class AdminController implements java.io.Serializable {",
                "   public Domain getDomain(String domainId) {",
                "-",
                "     try {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java b/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "index 2226183f1d..c379be74f6 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "@@ -30,2 +30,4 @@ import org.silverpeas.core.admin.component.model.WAComponent;",
                " import org.silverpeas.core.admin.domain.DomainDriver;",
                "+import org.silverpeas.core.admin.domain.DomainDriver.UserFilterManager;",
                "+import org.silverpeas.core.admin.domain.DomainDriverManager;",
                " import org.silverpeas.core.admin.domain.DomainServiceProvider;",
                "@@ -99,2 +101,3 @@ import static java.util.Collections.synchronizedList;",
                " import static org.silverpeas.core.SilverpeasExceptionMessages.*;",
                "+import static org.silverpeas.core.admin.domain.DomainDriverManagerProvider.getCurrentDomainDriverManager;",
                " import static org.silverpeas.core.personalization.service.PersonalizationServiceProvider.getPersonalizationService;",
                "@@ -2339,2 +2342,23 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "   }",
                "+",
                "+  public Optional<UserFilterManager> getUserFilterManager() throws AdminException {",
                "+    final DomainDriverManager driverManager = getCurrentDomainDriverManager();",
                "+    final DomainDriver driver = driverManager.getDomainDriver(getTargetDomain().getId());",
                "+    return driver.getUserFilterManager();",
                "+  }",
                "+",
                "+  public User[] verifyUserFilterRule(final String rule) throws AdminException {",
                "+    final Optional<UserFilterManager> manager = getUserFilterManager();",
                "+    if (manager.isPresent()) {",
                "+      return manager.get().validateRule(rule);",
                "+    }",
                "+    return new User[0];",
                "+  }",
                "+",
                "+  public void saveUserFilterRule(final String rule) throws AdminException {",
                "+    final Optional<UserFilterManager> manager = getUserFilterManager();",
                "+    if (manager.isPresent()) {",
                "+      manager.get().saveRule(rule);",
                "+    }",
                "+  }",
                " }",
                "\\ No newline at end of file",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "index ff4c61be95..6bf267ff91 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "@@ -33,2 +33,3 @@ import org.silverpeas.core.admin.domain.synchro.SynchroDomainReport;",
                " import org.silverpeas.core.admin.service.AdminController;",
                "+import org.silverpeas.core.admin.service.AdminException;",
                " import org.silverpeas.core.admin.service.OrganizationController;",
                "@@ -36,2 +37,3 @@ import org.silverpeas.core.admin.user.model.Group;",
                " import org.silverpeas.core.admin.user.model.GroupDetail;",
                "+import org.silverpeas.core.admin.user.model.User;",
                " import org.silverpeas.core.admin.user.model.UserDetail;",
                "@@ -41,3 +43,3 @@ import org.silverpeas.core.template.SilverpeasTemplate;",
                " import org.silverpeas.core.template.SilverpeasTemplateFactory;",
                "-import org.silverpeas.core.util.ResourceLocator;",
                "+import org.silverpeas.core.util.Charsets;",
                " import org.silverpeas.core.util.ServiceProvider;",
                "@@ -62,2 +64,3 @@ import org.silverpeas.web.jobdomain.control.JobDomainPeasSessionController;",
                " import javax.servlet.http.HttpServletRequest;",
                "+import java.net.URLDecoder;",
                " import java.util.ArrayList;",
                "@@ -74,2 +77,5 @@ import static java.util.Collections.emptySet;",
                " import static org.silverpeas.core.admin.domain.DomainDriver.ActionConstants.*;",
                "+import static org.silverpeas.core.util.ResourceLocator.getSettingBundle;",
                "+import static org.silverpeas.core.util.StringUtil.defaultStringIfNotDefined;",
                "+import static org.silverpeas.core.util.StringUtil.isDefined;",
                " import static org.silverpeas.core.web.token.SynchronizerTokenService.SESSION_TOKEN_KEY;",
                "@@ -101,2 +107,4 @@ public class JobDomainPeasRequestRouter extends",
                "   private static final String USER_DOMAIN_QUOTA_MAX_COUNT_PARAM = \"userDomainQuotaMaxCount\";",
                "+  private static final String DOMAIN_USER_FILTER_RULE_PARAM = \"domainUserFilterRule\";",
                "+  private static final String DOMAIN_ATTR = \"domain\";",
                "   private static final String GROUP_OBJECT_ATTR = \"groupObject\";",
                "@@ -121,2 +129,3 @@ public class JobDomainPeasRequestRouter extends",
                "   private static final String DISPLAY_REMOVED_USERS_DEST = \"displayRemovedUsers\";",
                "+  private static final String DOMAIN_USER_FILTER_MANAGEMENT_DEST = \"domainUserFilterManagement.jsp\";",
                "@@ -215,3 +224,3 @@ public class JobDomainPeasRequestRouter extends",
                "         if (function.startsWith(USER_CONTENT_FCT)) {",
                "-          if (StringUtil.isDefined(userId)) {",
                "+          if (isDefined(userId)) {",
                "             jobDomainSC.setTargetUser(userId);",
                "@@ -280,3 +289,3 @@ public class JobDomainPeasRequestRouter extends",
                "           String fromArray = request.getParameter(\"FromArray\");",
                "-          if (StringUtil.isDefined(fromArray)) {",
                "+          if (isDefined(fromArray)) {",
                "             query = jobDomainSC.getQueryToImport();",
                "@@ -292,3 +301,3 @@ public class JobDomainPeasRequestRouter extends",
                "                 paramValue = request.getParameter(paramName);",
                "-                if (StringUtil.isDefined(paramValue)) {",
                "+                if (isDefined(paramValue)) {",
                "                   query.put(paramName, paramValue);",
                "@@ -316,3 +325,3 @@ public class JobDomainPeasRequestRouter extends",
                "             String specificId = request.getParameter(\"specificIds\");",
                "-            if (StringUtil.isDefined(specificId)) {",
                "+            if (isDefined(specificId)) {",
                "               jobDomainSC.importUser(specificId);",
                "@@ -394,3 +403,3 @@ public class JobDomainPeasRequestRouter extends",
                "           String groupId = request.getParameter(IDGROUP_PARAM);",
                "-          if (StringUtil.isDefined(groupId)) {",
                "+          if (isDefined(groupId)) {",
                "             jobDomainSC.goIntoGroup(groupId);",
                "@@ -399,3 +408,3 @@ public class JobDomainPeasRequestRouter extends",
                "           String groupId = request.getParameter(IDGROUP_PARAM);",
                "-          if (StringUtil.isDefined(groupId)) {",
                "+          if (isDefined(groupId)) {",
                "             jobDomainSC.goIntoGroup(request.getParameter(IDGROUP_PARAM));",
                "@@ -500,6 +509,7 @@ public class JobDomainPeasRequestRouter extends",
                "         // DOMAIN Actions --------------------------------------------",
                "-      } else if (function.startsWith(\"domain\")) {",
                "+      } else if (function.startsWith(DOMAIN_ATTR)) {",
                "         jobDomainSC.setTargetUser(null);",
                "-",
                "-        if (function.startsWith(\"domainGoTo\")) {",
                "+        if (function.startsWith(\"domainModifyUserFilter\")) {",
                "+          destination = handleUserFilterModification(jobDomainSC, request);",
                "+        } else if (function.startsWith(\"domainGoTo\")) {",
                "           jobDomainSC.setTargetDomain(request.getParameter(IDDOMAIN_PARAM));",
                "@@ -530,3 +540,2 @@ public class JobDomainPeasRequestRouter extends",
                "             }",
                "-",
                "             String newDomainId = jobDomainSC.createDomain(request2Domain(request), domainType);",
                "@@ -727,3 +736,3 @@ public class JobDomainPeasRequestRouter extends",
                "           request.setAttribute(\"removedUsers\", convertRemovedUserList(removedUsers, emptySet()));",
                "-          request.setAttribute(\"domain\", jobDomainSC.getTargetDomain());",
                "+          request.setAttribute(DOMAIN_ATTR, jobDomainSC.getTargetDomain());",
                "           request.setAttribute(THE_USER_ATTR, jobDomainSC.getUserDetail());",
                "@@ -733,3 +742,3 @@ public class JobDomainPeasRequestRouter extends",
                "           request.setAttribute(\"deletedUsers\", deletedUsers);",
                "-          request.setAttribute(\"domain\", jobDomainSC.getTargetDomain());",
                "+          request.setAttribute(DOMAIN_ATTR, jobDomainSC.getTargetDomain());",
                "           request.setAttribute(THE_USER_ATTR, jobDomainSC.getUserDetail());",
                "@@ -741,3 +750,3 @@ public class JobDomainPeasRequestRouter extends",
                "-        SettingBundle rs = ResourceLocator.getSettingBundle(\"org.silverpeas.jobDomainPeas.settings.jobDomainPeasSettings\");",
                "+        SettingBundle rs = getSettingBundle(\"org.silverpeas.jobDomainPeas.settings.jobDomainPeasSettings\");",
                "         Properties configuration = new Properties();",
                "@@ -885,2 +894,22 @@ public class JobDomainPeasRequestRouter extends",
                "+  private String handleUserFilterModification(final JobDomainPeasSessionController jobDomainSC,",
                "+      final HttpRequest request) throws AdminException {",
                "+    jobDomainSC.getUserFilterManager().ifPresent(m -> request.setAttribute(\"domainUserFilterManager\", m));",
                "+    final String action = request.getParameter(ACTION_ATTR);",
                "+    try {",
                "+      final String encodedRule = defaultStringIfNotDefined(request.getParameter(DOMAIN_USER_FILTER_RULE_PARAM));",
                "+      final String newRule = URLDecoder.decode(encodedRule, Charsets.UTF_8.name());",
                "+      if (\"verify\".equals(action)) {",
                "+        final User[] arrayToConvert = jobDomainSC.verifyUserFilterRule(newRule);",
                "+        final SilverpeasList<User> users = SilverpeasList.as(arrayToConvert);",
                "+        request.setAttribute(\"users\", UserUIEntity.convertList(users, emptySet()));",
                "+      } else if (\"validate\".equals(action)) {",
                "+        jobDomainSC.saveUserFilterRule(newRule);",
                "+      }",
                "+    } catch (Exception e) {",
                "+      request.setAttribute(\"technicalError\", defaultStringIfNotDefined(e.getMessage(), \"unknown error\"));",
                "+    }",
                "+    return DOMAIN_USER_FILTER_MANAGEMENT_DEST;",
                "+  }",
                "+",
                "   private void setRightManagementAttributes(final HttpRequest request, final long domainRight) {",
                "@@ -950,3 +979,2 @@ public class JobDomainPeasRequestRouter extends",
                "         SILVERPEAS_SERVER_URL_PARAM));",
                "-    String timeStamp = WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"domainTimeStamp\"));",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/DefaultWebPlugin.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/DefaultWebPlugin.java",
                "index bc7af9139e..5b818805bb 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/DefaultWebPlugin.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/DefaultWebPlugin.java",
                "@@ -35,2 +35,3 @@ import java.util.function.BiConsumer;",
                " import static org.silverpeas.core.html.SupportedWebPlugins.*;",
                "+import static org.silverpeas.core.html.WebPluginConsumerRegistry.add;",
                " import static org.silverpeas.core.web.util.viewgenerator.html.JavascriptPluginInclusion.*;",
                "@@ -43,47 +44,50 @@ public class DefaultWebPlugin implements WebPlugin, Initialization {",
                "+  /**",
                "+   * Using here {@link WebPluginConsumerRegistry#add}",
                "+   */",
                "   @Override",
                "   public void init() {",
                "-    WebPluginConsumerRegistry.add(POLYFILLS, (xhtml, language) -> includePolyfills(xhtml));",
                "-    WebPluginConsumerRegistry.add(EMBEDPLAYER, (xhtml, language) -> includeEmbedPlayer(xhtml));",
                "-    WebPluginConsumerRegistry.add(MEDIAPLAYER, (xhtml, language) -> includeMediaPlayer(xhtml));",
                "-    WebPluginConsumerRegistry.add(QTIP, (xhtml, language) -> includeQTip(xhtml));",
                "-    WebPluginConsumerRegistry.add(DATEPICKER, JavascriptPluginInclusion::includeDatePicker);",
                "-    WebPluginConsumerRegistry.add(PAGINATION, (xhtml, language) -> includePagination(xhtml));",
                "-    WebPluginConsumerRegistry.add(BREADCRUMB, (xhtml, language) -> includeBreadCrumb(xhtml));",
                "-    WebPluginConsumerRegistry.add(USERZOOM, JavascriptPluginInclusion::includeUserZoom);",
                "-    WebPluginConsumerRegistry.add(RELATIONSHIP, JavascriptPluginInclusion::includeRelationship);",
                "-    WebPluginConsumerRegistry.add(WYSIWYG, JavascriptPluginInclusion::includeWysiwygEditor);",
                "-    WebPluginConsumerRegistry.add(RESPONSIBLES, JavascriptPluginInclusion::includeResponsibles);",
                "-    WebPluginConsumerRegistry.add(POPUP, (xhtml, language) -> includePopup(xhtml));",
                "-    WebPluginConsumerRegistry.add(CALENDAR, JavascriptPluginInclusion::includeCalendar);",
                "-    WebPluginConsumerRegistry.add(IFRAMEAJAXTRANSPORT, (xhtml, language) -> includeIFrameAjaxTransport(xhtml));",
                "-    WebPluginConsumerRegistry.add(PREVIEW, (xhtml, language) -> includePreview(xhtml));",
                "-    WebPluginConsumerRegistry.add(FPVIEWER, (xhtml, language) -> includeFlexPaperViewer(xhtml));",
                "-    WebPluginConsumerRegistry.add(PDFVIEWER, JavascriptPluginInclusion::includePdfViewer);",
                "-    WebPluginConsumerRegistry.add(NOTIFIER, (xhtml, language) -> includeNotifier(xhtml));",
                "-    WebPluginConsumerRegistry.add(PASSWORD, (xhtml, language) -> includePassword(xhtml));",
                "-    WebPluginConsumerRegistry.add(GAUGE, (xhtml, language) -> includeGauge(xhtml));",
                "-    WebPluginConsumerRegistry.add(JQUERY, (xhtml, language) -> includeJQuery(xhtml));",
                "-    WebPluginConsumerRegistry.add(TAGS, (xhtml, language) -> includeTags(xhtml));",
                "-    WebPluginConsumerRegistry.add(PDC, (xhtml, language) -> JavascriptPluginInclusion.includePdc(xhtml, language, false));",
                "-    WebPluginConsumerRegistry.add(PDCDYNAMICALLY, (xhtml, language) -> JavascriptPluginInclusion.includePdc(xhtml, language, true));",
                "-    WebPluginConsumerRegistry.add(TKN, (xhtml, language) -> includeSecurityTokenizing(xhtml));",
                "-    WebPluginConsumerRegistry.add(RATING, (xhtml, language) -> includeRating(xhtml));",
                "-    WebPluginConsumerRegistry.add(TOGGLE, (xhtml, language) -> includeToggle(xhtml));",
                "-    WebPluginConsumerRegistry.add(TABS, (xhtml, language) -> includeTabsWebComponent(xhtml));",
                "-    WebPluginConsumerRegistry.add(COLORPICKER, (xhtml, language) -> includeColorPickerWebComponent(xhtml));",
                "-    WebPluginConsumerRegistry.add(LIGHTSLIDESHOW, (xhtml, language) -> includeLightweightSlideshow(xhtml));",
                "-    WebPluginConsumerRegistry.add(LANG, (xhtml, language) -> includeLang(xhtml));",
                "-    WebPluginConsumerRegistry.add(TICKER, JavascriptPluginInclusion::includeTicker);",
                "-    WebPluginConsumerRegistry.add(SUBSCRIPTION, (xhtml, language) -> includeDynamicallySubscription(xhtml, null));",
                "-    WebPluginConsumerRegistry.add(DRAGANDDROPUPLOAD, JavascriptPluginInclusion::includeDragAndDropUpload);",
                "-    WebPluginConsumerRegistry.add(CHART, JavascriptPluginInclusion::includeChart);",
                "-    WebPluginConsumerRegistry.add(CHAT, (xhtml, language) -> includeChat(xhtml));",
                "-    WebPluginConsumerRegistry.add(SELECTIZE, (xhtml, language) -> includeSelectize(xhtml));",
                "-    WebPluginConsumerRegistry.add(LISTOFUSERSANDGROUPS, JavascriptPluginInclusion::includeListOfUsersAndGroups);",
                "-    WebPluginConsumerRegistry.add(USERNOTIFICATION, (xhtml, language) -> includeUserNotification(xhtml));",
                "-    WebPluginConsumerRegistry.add(ATTACHMENT, (xhtml, language) -> includeAttachment(xhtml));",
                "-    WebPluginConsumerRegistry.add(CRUD, (xhtml, language) -> includeCrud(xhtml));",
                "-    WebPluginConsumerRegistry.add(PANES, (xhtml, language) -> includePanes(xhtml));",
                "-    WebPluginConsumerRegistry.add(CONTRIBUTIONREMINDER, JavascriptPluginInclusion::includeContributionReminder);",
                "+    add(POLYFILLS, (xhtml, language) -> includePolyfills(xhtml));",
                "+    add(EMBEDPLAYER, (xhtml, language) -> includeEmbedPlayer(xhtml));",
                "+    add(MEDIAPLAYER, (xhtml, language) -> includeMediaPlayer(xhtml));",
                "+    add(QTIP, JavascriptPluginInclusion::includeQTip);",
                "+    add(DATEPICKER, JavascriptPluginInclusion::includeDatePicker);",
                "+    add(PAGINATION, (xhtml, language) -> includePagination(xhtml));",
                "+    add(BREADCRUMB, (xhtml, language) -> includeBreadCrumb(xhtml));",
                "+    add(USERZOOM, JavascriptPluginInclusion::includeUserZoom);",
                "+    add(RELATIONSHIP, JavascriptPluginInclusion::includeRelationship);",
                "+    add(WYSIWYG, JavascriptPluginInclusion::includeWysiwygEditor);",
                "+    add(RESPONSIBLES, JavascriptPluginInclusion::includeResponsibles);",
                "+    add(POPUP, (xhtml, language) -> includePopup(xhtml));",
                "+    add(CALENDAR, JavascriptPluginInclusion::includeCalendar);",
                "+    add(IFRAMEAJAXTRANSPORT, (xhtml, language) -> includeIFrameAjaxTransport(xhtml));",
                "+    add(PREVIEW, (xhtml, language) -> includePreview(xhtml));",
                "+    add(FPVIEWER, (xhtml, language) -> includeFlexPaperViewer(xhtml));",
                "+    add(PDFVIEWER, JavascriptPluginInclusion::includePdfViewer);",
                "+    add(NOTIFIER, (xhtml, language) -> includeNotifier(xhtml));",
                "+    add(PASSWORD, (xhtml, language) -> includePassword(xhtml));",
                "+    add(GAUGE, (xhtml, language) -> includeGauge(xhtml));",
                "+    add(JQUERY, (xhtml, language) -> includeJQuery(xhtml));",
                "+    add(TAGS, (xhtml, language) -> includeTags(xhtml));",
                "+    add(PDC, (xhtml, language) -> JavascriptPluginInclusion.includePdc(xhtml, language, false));",
                "+    add(PDCDYNAMICALLY, (xhtml, language) -> JavascriptPluginInclusion.includePdc(xhtml, language, true));",
                "+    add(TKN, (xhtml, language) -> includeSecurityTokenizing(xhtml));",
                "+    add(RATING, (xhtml, language) -> includeRating(xhtml));",
                "+    add(TOGGLE, (xhtml, language) -> includeToggle(xhtml));",
                "+    add(TABS, (xhtml, language) -> includeTabsWebComponent(xhtml));",
                "+    add(COLORPICKER, JavascriptPluginInclusion::includeColorPickerWebComponent);",
                "+    add(LIGHTSLIDESHOW, (xhtml, language) -> includeLightweightSlideshow(xhtml));",
                "+    add(LANG, (xhtml, language) -> includeLang(xhtml));",
                "+    add(TICKER, JavascriptPluginInclusion::includeTicker);",
                "+    add(SUBSCRIPTION, (xhtml, language) -> includeDynamicallySubscription(xhtml, null));",
                "+    add(DRAGANDDROPUPLOAD, JavascriptPluginInclusion::includeDragAndDropUpload);",
                "+    add(CHART, JavascriptPluginInclusion::includeChart);",
                "+    add(CHAT, (xhtml, language) -> includeChat(xhtml));",
                "+    add(SELECTIZE, (xhtml, language) -> includeSelectize(xhtml));",
                "+    add(LISTOFUSERSANDGROUPS, JavascriptPluginInclusion::includeListOfUsersAndGroups);",
                "+    add(USERNOTIFICATION, (xhtml, language) -> includeUserNotification(xhtml));",
                "+    add(ATTACHMENT, (xhtml, language) -> includeAttachment(xhtml));",
                "+    add(CRUD, (xhtml, language) -> includeCrud(xhtml));",
                "+    add(PANES, (xhtml, language) -> includePanes(xhtml));",
                "+    add(CONTRIBUTIONREMINDER, JavascriptPluginInclusion::includeContributionReminder);",
                "   }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "index 58446799ad..ae6ddcb01a 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "@@ -369,5 +369,9 @@ public class JavascriptPluginInclusion {",
                "-  static ElementContainer includeQTip(final ElementContainer xhtml) {",
                "+  static ElementContainer includeQTip(final ElementContainer xhtml, final String language) {",
                "     xhtml.addElement(link(JQUERY_CSS_PATH + JQUERY_QTIP + \".min.css\"));",
                "     xhtml.addElement(script(JQUERY_PATH + JQUERY_QTIP + \".min.js\"));",
                "+    final LocalizationBundle bundle = ResourceLocator.getGeneralLocalizationBundle(language);",
                "+    final JavascriptBundleProducer bundleProducer = bundleVariableName(\"TipBundle\");",
                "+    bundleProducer.add(\"tip.c\", bundle.getString(\"GML.close\"));",
                "+    xhtml.addElement(scriptContent(bundleProducer.produce()));",
                "     xhtml.addElement(script(JAVASCRIPT_PATH + SILVERPEAS_TIP));",
                "@@ -421,4 +425,5 @@ public class JavascriptPluginInclusion {",
                "-  static ElementContainer includeColorPickerWebComponent(final ElementContainer xhtml) {",
                "-    includeQTip(xhtml);",
                "+  static ElementContainer includeColorPickerWebComponent(final ElementContainer xhtml,",
                "+      final String language) {",
                "+    includeQTip(xhtml, language);",
                "     xhtml.addElement(script(ANGULARJS_DIRECTIVES_PATH + \"util/silverpeas-color-picker.js\"));",
                "@@ -654,5 +659,5 @@ public class JavascriptPluginInclusion {",
                "     includeAttachment(xhtml);",
                "-    includeQTip(xhtml);",
                "+    includeQTip(xhtml, language);",
                "     includeTabsWebComponent(xhtml);",
                "-    includeColorPickerWebComponent(xhtml);",
                "+    includeColorPickerWebComponent(xhtml, language);",
                "     includeDatePicker(xhtml, language);",
                "@@ -799,3 +804,3 @@ public class JavascriptPluginInclusion {",
                "     includeDatePicker(xhtml, language);",
                "-    includeQTip(xhtml);",
                "+    includeQTip(xhtml, language);",
                "     xhtml.addElement(script(JQUERY_PATH + CHART_JS));",
                "@@ -879,3 +884,3 @@ public class JavascriptPluginInclusion {",
                "       final String language) {",
                "-    includeQTip(xhtml);",
                "+    includeQTip(xhtml, language);",
                "     xhtml.addElement(scriptContent(JavascriptBundleProducer",
                "@@ -897,3 +902,3 @@ public class JavascriptPluginInclusion {",
                "       LayoutConfiguration layout = lookHelper.getLayoutConfiguration();",
                "-      includeQTip(xhtml);",
                "+      includeQTip(xhtml, lookHelper.getLanguage());",
                "       xhtml.addElement(scriptContent(settingVariableName(\"LayoutSettings\")",
                "@@ -974,3 +979,3 @@ public class JavascriptPluginInclusion {",
                "     includePopup(xhtml);",
                "-    includeQTip(xhtml);",
                "+    includeQTip(xhtml, language);",
                "     xhtml.addElement(scriptContent(settingVariableName(\"UserGroupListSettings\")",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/arraypanes/ArrayPane.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/arraypanes/ArrayPane.java",
                "index 6b4505a953..c9fd6e6feb 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/arraypanes/ArrayPane.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/arraypanes/ArrayPane.java",
                "@@ -26,2 +26,3 @@ package org.silverpeas.core.web.util.viewgenerator.html.arraypanes;",
                " import org.apache.commons.lang3.tuple.Pair;",
                "+import org.silverpeas.core.cache.model.SimpleCache;",
                " import org.silverpeas.core.web.util.viewgenerator.html.SimpleGraphicElement;",
                "@@ -34,3 +35,5 @@ import javax.servlet.jsp.PageContext;",
                " import java.util.Map;",
                "+import java.util.function.Supplier;",
                "+import static org.silverpeas.core.cache.service.CacheServiceProvider.getSessionCacheService;",
                " import static org.silverpeas.core.web.portlets.PortletUtil.getHttpServletRequest;",
                "@@ -107,2 +110,26 @@ public interface ArrayPane extends SimpleGraphicElement {",
                "+  /**",
                "+   * Gets data from session from a given cache key or compute them from the given supplier if",
                "+   * absent.",
                "+   * <p>",
                "+   *   If the parameter <b>ajaxRequest</b> (set automatically by sp.arrayPane JavaScript API)",
                "+   *   exists, then the data are retrieved from the user session.",
                "+   * </p>",
                "+   * @param request the HTTP request.",
                "+   * @param cacheKey the key into the cache.",
                "+   * @param valueSupplier the data supplier.",
                "+   * @param <T> the type of data.",
                "+   * @return the data.",
                "+   */",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  static <T> T computeDataUserSessionIfAbsent(final HttpServletRequest request, final String cacheKey,",
                "+      final Supplier<T> valueSupplier) {",
                "+    final SimpleCache sessionCache = getSessionCacheService().getCache();",
                "+    if (request.getParameter(\"ajaxRequest\") == null) {",
                "+      sessionCache.remove(cacheKey);",
                "+    }",
                "+    return (T) sessionCache",
                "+        .computeIfAbsent(cacheKey, Object.class, (Supplier<Object>) valueSupplier);",
                "+  }",
                "+",
                "   /**"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/util/CollectionUtil.java",
                "core-api/src/main/java/org/silverpeas/core/util/ResourceLocator.java",
                "core-api/src/main/java/org/silverpeas/core/util/SilverpeasList.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilterManager.java",
                "core-library/src/main/java/org/silverpeas/core/admin/service/AdminController.java",
                "core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/DefaultWebPlugin.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/arraypanes/ArrayPane.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10284": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: application, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, directory, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10284",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e1209aa1966e940b92e012deee5406ee8d9a8fc3",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1543919351,
            "hunks": 265,
            "message": "Feature #8335: - adding new UserState: REMOVED - adding the management of removed users - updating the management of users to blank - making CheckBoxMonitor compliant with SilverpeasFormRequest - filtering or not on REMOVED state - improving user synchronization process and deleting also the manipulation of a timestamp which is indeed a specific thing about LDAP - sending a mail to administrators on technical synchronization error - adding a JOB in charge of automatic deletion of removed users - modifying TemporalFormatter in order to use Silverpeas's pattern choices",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/SilverpeasExceptionMessages.java b/core-api/src/main/java/org/silverpeas/core/SilverpeasExceptionMessages.java",
                "index ba9db5365b..58834add27 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/SilverpeasExceptionMessages.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/SilverpeasExceptionMessages.java",
                "@@ -37,2 +37,3 @@ public class SilverpeasExceptionMessages {",
                "   private static final MessageFormat DELETION_FAILURE = new MessageFormat(\"Fail to delete {0} {1}\");",
                "+  private static final MessageFormat REMOVE_FAILURE = new MessageFormat(\"Fail to remove {0} {1}\");",
                "   private static final MessageFormat GETTING_FAILURE = new MessageFormat(\"Fail to get {0} {1}\");",
                "@@ -110,2 +111,17 @@ public class SilverpeasExceptionMessages {",
                "+  /**",
                "+   * Computes a message about the failure to remove a given resource with the specified",
                "+   * identifier.",
                "+   * <p>",
                "+   * This message is for when an exception has been caught during the remove of a resource in",
                "+   * Silverpeas.",
                "+   * </p>",
                "+   * @param resource the resource concerned by the failure; for example a user, a file, ...",
                "+   * @param id an identifier of the resource (a name, a unique identifier, ...)",
                "+   * @return an exception message.",
                "+   */",
                "+  public static String failureOnRemoving(String resource, Object id) {",
                "+    return REMOVE_FAILURE.format(new Object[]{resource, id});",
                "+  }",
                "+",
                "   /**",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/admin/user/constant/UserState.java b/core-api/src/main/java/org/silverpeas/core/admin/user/constant/UserState.java",
                "index c77206216c..f4f4bc5706 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/admin/user/constant/UserState.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/admin/user/constant/UserState.java",
                "@@ -58,2 +58,7 @@ public enum UserState {",
                "+  /**",
                "+   * The user account is removed.",
                "+   */",
                "+  REMOVED,",
                "+",
                "   /**",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/admin/user/model/User.java b/core-api/src/main/java/org/silverpeas/core/admin/user/model/User.java",
                "index 74c0cc6bff..e1741493b9 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/admin/user/model/User.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/admin/user/model/User.java",
                "@@ -259,2 +259,9 @@ public interface User extends Serializable, Comparable<User> {",
                "+  /**",
                "+   * This method is the only one able to indicate the user removed state. Please do not use",
                "+   * {@link User#getState()} to retrieve user removed information.",
                "+   * @return true if deleted state, false otherwise.",
                "+   */",
                "+  boolean isRemovedState();",
                "+",
                "   /**",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/date/TemporalFormatter.java b/core-api/src/main/java/org/silverpeas/core/date/TemporalFormatter.java",
                "index 8cfbc88277..54a4c3b863 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/date/TemporalFormatter.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/date/TemporalFormatter.java",
                "@@ -30,3 +30,2 @@ import java.time.ZoneId;",
                " import java.time.ZonedDateTime;",
                "-import java.time.chrono.IsoChronology;",
                " import java.time.format.DateTimeFormatter;",
                "@@ -34,3 +33,2 @@ import java.time.format.DateTimeFormatterBuilder;",
                " import java.time.format.DateTimeParseException;",
                "-import java.time.format.FormatStyle;",
                " import java.time.temporal.ChronoField;",
                "@@ -38,3 +36,2 @@ import java.time.temporal.ChronoUnit;",
                " import java.time.temporal.Temporal;",
                "-import java.util.Locale;",
                " import java.util.Objects;",
                "@@ -44,2 +41,3 @@ import static java.time.temporal.ChronoField.MINUTE_OF_HOUR;",
                " import static org.silverpeas.core.date.TemporalConverter.asZonedDateTime;",
                "+import static org.silverpeas.core.util.ResourceLocator.getLocalizationBundle;",
                "@@ -53,2 +51,4 @@ public class TemporalFormatter {",
                "+  private static final String DATE_BUNDLE = \"org.silverpeas.util.date.multilang.date\";",
                "+",
                "   private TemporalFormatter() {",
                "@@ -155,3 +155,3 @@ public class TemporalFormatter {",
                "     }",
                "-    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder().parseCaseInsensitive()",
                "+    final DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder().parseCaseInsensitive()",
                "         .append(DateTimeFormatter.ISO_LOCAL_DATE)",
                "@@ -162,3 +162,3 @@ public class TemporalFormatter {",
                "     if (temporal.isSupported(ChronoField.OFFSET_SECONDS)) {",
                "-      builder = builder.appendOffsetId();",
                "+      builder.appendOffsetId();",
                "     }",
                "@@ -198,10 +198,7 @@ public class TemporalFormatter {",
                "     Objects.requireNonNull(language);",
                "-    String pattern;",
                "+    final String pattern;",
                "     if (temporal.isSupported(ChronoUnit.HOURS)) {",
                "-      pattern =",
                "-          DateTimeFormatterBuilder.getLocalizedDateTimePattern(FormatStyle.SHORT, FormatStyle.SHORT,",
                "-              IsoChronology.INSTANCE, Locale.forLanguageTag(language)).replace(\"yy\", \"yyyy\");",
                "+      pattern = getDateTimePattern(language);",
                "     } else {",
                "-      pattern = DateTimeFormatterBuilder.getLocalizedDateTimePattern(FormatStyle.SHORT, null,",
                "-          IsoChronology.INSTANCE, Locale.forLanguageTag(language)).replace(\"yy\", \"yyyy\");",
                "+      pattern = getDatePattern(language);",
                "     }",
                "@@ -210,2 +207,18 @@ public class TemporalFormatter {",
                "+  /**",
                "+   * @see #toLocalized(Temporal, String)",
                "+   * @return only time part if time exists, empty otherwise.",
                "+   */",
                "+  public static String toLocalizedTime(final Temporal temporal, final String language) {",
                "+    Objects.requireNonNull(temporal);",
                "+    Objects.requireNonNull(language);",
                "+    final String result;",
                "+    if (temporal.isSupported(ChronoUnit.HOURS)) {",
                "+      result = DateTimeFormatter.ofPattern(getTimePattern(language)).format(temporal);",
                "+    } else {",
                "+      result = \"\";",
                "+    }",
                "+    return result;",
                "+  }",
                "+",
                "   /**",
                "@@ -256,14 +269,5 @@ public class TemporalFormatter {",
                "         ZonedDateTime.now(zoneId).get(ChronoField.OFFSET_SECONDS)) {",
                "-      ZoneId actualZoneId = asZonedDateTime(temporal).getZone();",
                "-      String pattern =",
                "-          DateTimeFormatterBuilder.getLocalizedDateTimePattern(FormatStyle.SHORT, FormatStyle.SHORT,",
                "-              IsoChronology.INSTANCE, Locale.forLanguageTag(language)).replace(\"yy\", \"yyyy\");",
                "-      return new DateTimeFormatterBuilder().appendPattern(pattern)",
                "-          .appendLiteral(\" (\")",
                "-          .parseCaseSensitive()",
                "-          .appendZoneRegionId()",
                "-          .appendLiteral(\")\")",
                "-          .toFormatter()",
                "-          .withZone(actualZoneId)",
                "-          .format(temporal);",
                "+      final ZoneId actualZoneId = asZonedDateTime(temporal).getZone();",
                "+      final String pattern = getDateTimePattern(language);",
                "+      return toZonedFormat(pattern, temporal, actualZoneId);",
                "     } else {",
                "@@ -272,2 +276,52 @@ public class TemporalFormatter {",
                "   }",
                "+",
                "+  /**",
                "+   * @see #toLocalized(Temporal, ZoneId, String)",
                "+   * @return only time part if time exists, empty otherwise.",
                "+   */",
                "+  public static String toLocalizedTime(final Temporal temporal, final ZoneId zoneId,",
                "+      final String language) {",
                "+    if (temporal.isSupported(ChronoUnit.HOURS) && temporal.get(ChronoField.OFFSET_SECONDS) !=",
                "+        ZonedDateTime.now(zoneId).get(ChronoField.OFFSET_SECONDS)) {",
                "+      final ZoneId actualZoneId = asZonedDateTime(temporal).getZone();",
                "+      final String pattern = getTimePattern(language);",
                "+      return toZonedFormat(pattern, temporal, actualZoneId);",
                "+    } else {",
                "+      return toLocalizedTime(temporal, language);",
                "+    }",
                "+  }",
                "+",
                "+  private static String toZonedFormat(final String pattern, final Temporal temporal,",
                "+      final ZoneId actualZoneId) {",
                "+    return new DateTimeFormatterBuilder().appendPattern(pattern).appendLiteral(\" (\")",
                "+        .parseCaseSensitive().appendZoneRegionId().appendLiteral(\")\").toFormatter()",
                "+        .withZone(actualZoneId).format(temporal);",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the date pattern according to given locale.",
                "+   * @param locale the ISO 631-1 locale.",
                "+   * @return the pattern as string.",
                "+   */",
                "+  private static String getDatePattern(final String locale) {",
                "+    return getLocalizationBundle(DATE_BUNDLE, locale).getString(\"dateOutputFormat\");",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the time pattern according to given locale.",
                "+   * @param locale the ISO 631-1 locale.",
                "+   * @return the pattern as string.",
                "+   */",
                "+  private static String getTimePattern(final String locale) {",
                "+    return getLocalizationBundle(DATE_BUNDLE, locale).getString(\"hourOutputFormat\");",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the date time pattern according to given locale.",
                "+   * @param locale the ISO 631-1 locale.",
                "+   * @return the pattern as string.",
                "+   */",
                "+  private static String getDateTimePattern(final String locale) {",
                "+    return getLocalizationBundle(DATE_BUNDLE, locale).getString(\"dateTimeOutputFormat\");",
                "+  }",
                " }",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/admin/StubbedAdministration.java b/core-library/src/integration-test/java/org/silverpeas/core/admin/StubbedAdministration.java",
                "index f96dc89cd0..fec2b00c36 100644",
                "--- a/core-library/src/integration-test/java/org/silverpeas/core/admin/StubbedAdministration.java",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/admin/StubbedAdministration.java",
                "@@ -589,2 +589,12 @@ public class StubbedAdministration implements Administration {",
                "+  @Override",
                "+  public String restoreUser(final String sUserId) throws AdminException {",
                "+    return null;",
                "+  }",
                "+",
                "+  @Override",
                "+  public String removeUser(final String sUserId) throws AdminException {",
                "+    return null;",
                "+  }",
                "+",
                "   @Override",
                "@@ -1130,2 +1140,7 @@ public class StubbedAdministration implements Administration {",
                "+  @Override",
                "+  public List<UserDetail> getRemovedUsers(final String... domainIds) throws AdminException {",
                "+    return null;",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/admin/UsersAndGroupsIT.java b/core-library/src/integration-test/java/org/silverpeas/core/admin/UsersAndGroupsIT.java",
                "index e884c23a7c..3843e38a12 100644",
                "--- a/core-library/src/integration-test/java/org/silverpeas/core/admin/UsersAndGroupsIT.java",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/admin/UsersAndGroupsIT.java",
                "@@ -268,2 +268,23 @@ public class UsersAndGroupsIT {",
                "+  @Test",
                "+  public void shouldRemoveAndRestoreUser() throws Exception {",
                "+    final String userIdToRemove = \"1\";",
                "+    final String userIdToRestore = \"1\";",
                "+",
                "+    String userId = admin.removeUser(userIdToRemove);",
                "+    assertThat(userId, is(userIdToRemove));",
                "+    UserDetail user = admin.getUserDetail(userId);",
                "+    assertThat(user.getAccessLevel(), is(UserAccessLevel.ADMINISTRATOR));",
                "+    assertThat(user.getState(), is(UserState.REMOVED));",
                "+    assertThat(user.isRemovedState(), is(true));",
                "+    assertThat(user.isValidState(), is(false));",
                "+",
                "+    userId = admin.restoreUser(userIdToRestore);",
                "+    assertThat(userId, is(userIdToRestore));",
                "+    user = admin.getUserDetail(userId);",
                "+    assertThat(user.getAccessLevel(), is(UserAccessLevel.ADMINISTRATOR));",
                "+    assertThat(user.getState(), is(UserState.VALID));",
                "+    assertThat(user.isRemovedState(), is(false));",
                "+    assertThat(user.isValidState(), is(true));",
                "+  }",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/admin/domain/SQLDomainServiceIT.java b/core-library/src/integration-test/java/org/silverpeas/core/admin/domain/SQLDomainServiceIT.java",
                "index 86de32c5e3..031ddb487c 100644",
                "--- a/core-library/src/integration-test/java/org/silverpeas/core/admin/domain/SQLDomainServiceIT.java",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/admin/domain/SQLDomainServiceIT.java",
                "@@ -27,3 +27,2 @@ import com.ninja_squad.dbsetup.Operations;",
                " import com.ninja_squad.dbsetup.operation.Operation;",
                "-import org.silverpeas.core.admin.domain.driver.sqldriver.SQLSettings;",
                " import org.apache.commons.io.FileUtils;",
                "@@ -37,5 +36,3 @@ import org.junit.Test;",
                " import org.junit.runner.RunWith;",
                "-import org.silverpeas.core.test.DataSetTest;",
                "-import org.silverpeas.core.test.WarBuilder4LibCore;",
                "-import org.silverpeas.core.test.rule.MavenTargetDirectoryRule;",
                "+import org.silverpeas.core.admin.domain.driver.sqldriver.SQLSettings;",
                " import org.silverpeas.core.admin.domain.exception.DomainAuthenticationPropertiesAlreadyExistsException;",
                "@@ -44,5 +41,8 @@ import org.silverpeas.core.admin.domain.exception.NameAlreadyExistsInDatabaseExc",
                " import org.silverpeas.core.admin.domain.model.Domain;",
                "+import org.silverpeas.core.test.DataSetTest;",
                "+import org.silverpeas.core.test.WarBuilder4LibCore;",
                "+import org.silverpeas.core.test.rule.MavenTargetDirectoryRule;",
                "+import org.silverpeas.core.util.StringUtil;",
                " import org.silverpeas.core.util.file.FileRepositoryManager;",
                " import org.silverpeas.core.util.file.FileServerUtils;",
                "-import org.silverpeas.core.util.StringUtil;",
                " import org.silverpeas.core.util.lang.SystemWrapper;",
                "@@ -91,3 +91,2 @@ public class SQLDomainServiceIT extends DataSetTest {",
                "     newDomain.setSilverpeasServerURL(\"http://localhost:8000/silverpeas\");",
                "-    newDomain.setTheTimeStamp(\"0\");",
                "     return newDomain;",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/AdminSettings.java b/core-library/src/main/java/org/silverpeas/core/admin/AdminSettings.java",
                "new file mode 100644",
                "index 0000000000..3fcf5f835e",
                "--- /dev/null",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/AdminSettings.java",
                "@@ -0,0 +1,67 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+package org.silverpeas.core.admin;",
                "+",
                "+import org.silverpeas.core.util.ResourceLocator;",
                "+import org.silverpeas.core.util.SettingBundle;",
                "+",
                "+import static org.silverpeas.core.util.StringUtil.isDefined;",
                "+",
                "+/**",
                "+ * Handled the settings around the attachments.",
                "+ * @author silveryocha",
                "+ */",
                "+public class AdminSettings {",
                "+",
                "+  private static SettingBundle settings = ResourceLocator",
                "+      .getSettingBundle(\"org.silverpeas.admin.admin\");",
                "+",
                "+  private AdminSettings() {",
                "+    throw new IllegalStateException(\"Utility class\");",
                "+  }",
                "+",
                "+  /**",
                "+   * Indicates if the automatic deletion of removed users is enabled.",
                "+   * @return true if enabled, false otherwise.",
                "+   */",
                "+  public static boolean isAutomaticDeletionOfRemovedUsersEnabled() {",
                "+    return isDefined(getDeletionOfRemovedUsersCron()) && getDeletionOfRemovedUsersDayDelay() > 0;",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the cron of the JOB execution in charge of deleting the removed users.",
                "+   * @return cron as string, empty to deactivate the JOB.",
                "+   */",
                "+  public static String getDeletionOfRemovedUsersCron() {",
                "+    return settings.getString(\"DeleteRemovedUsersCron\", \"\");",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the delay in days after which a removed user can be deleted.",
                "+   * @return day delay as int, 0 to deactivate the automatic deletion of removed users.",
                "+   */",
                "+  public static int getDeletionOfRemovedUsersDayDelay() {",
                "+    return settings.getInteger(\"DeleteRemovedUsersDelay\", 30);",
                "+  }",
                "+}",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/AbstractDomainDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/AbstractDomainDriver.java",
                "index 070fc5a48a..3ad714a1aa 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/AbstractDomainDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/AbstractDomainDriver.java",
                "@@ -240,12 +240,2 @@ public abstract class AbstractDomainDriver implements DomainDriver {",
                "-  @Override",
                "-  public String getTimeStamp(String minTimeStamp) throws AdminException {",
                "-    return \"\";",
                "-  }",
                "-",
                "-  @Override",
                "-  public String getTimeStampField() throws AdminException {",
                "-    return null;",
                "-  }",
                "-",
                "   @Override",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java",
                "index 9caa7f4ab1..96087b0402 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java",
                "@@ -202,12 +202,4 @@ public interface DomainDriver {",
                "-  String getTimeStamp(String minTimeStamp) throws AdminException;",
                "-",
                "-  String getTimeStampField() throws AdminException;",
                "-",
                "   boolean isX509CertificateEnabled();",
                "-  UserDetail[] getAllChangedUsers(String fromTimeStamp, String toTimeStamp) throws AdminException;",
                "-",
                "-  GroupDetail[] getAllChangedGroups(String fromTimeStamp, String toTimeStamp) throws AdminException;",
                "-",
                "   void beginSynchronization() throws AdminException;",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java",
                "index e6d94ad475..efc7279e39 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java",
                "@@ -23,22 +23,3 @@",
                "  */",
                "-/**",
                "-* Copyright (C) 2000 - 2018 Silverpeas",
                "-*",
                "-* This program is free software: you can redistribute it and/or modify it under the terms of the",
                "-* GNU Affero General Public License as published by the Free Software Foundation, either version 3",
                "-* of the License, or (at your option) any later version.",
                "-*",
                "-* As a special exception to the terms and conditions of version 3.0 of the GPL, you may",
                "-* redistribute this Program in connection with Free/Libre Open Source Software (\"FLOSS\")",
                "-* applications as described in Silverpeas's FLOSS exception. You should have received a copy of the",
                "-* text describing the FLOSS exception, and it is also available here:",
                "-* \"http://www.silverpeas.org/docs/core/legal/floss_exception.html\"",
                "-*",
                "-* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without",
                "-* even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU",
                "-* Affero General Public License for more details.",
                "-*",
                "-* You should have received a copy of the GNU Affero General Public License along with this program.",
                "-* If not, see <http://www.gnu.org/licenses/>.",
                "-*/",
                "+",
                " package org.silverpeas.core.admin.domain;",
                "@@ -103,12 +84,2 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "-  @Override",
                "-  public UserDetail[] getAllChangedUsers(String fromTimeStamp, String toTimeStamp) throws AdminException {",
                "-    return new UserDetail[0];",
                "-  }",
                "-",
                "-  @Override",
                "-  public GroupDetail[] getAllChangedGroups(String fromTimeStamp, String toTimeStamp) throws AdminException {",
                "-    return new GroupDetail[0];",
                "-  }",
                "-",
                "   /**",
                "@@ -215,4 +186,4 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "     try(Connection connection = DBUtil.openConnection()) {",
                "-      List<String> domainIds = userDAO.getUserIdsInDomain(connection, domainId);",
                "-      return domainIds.toArray(new String[domainIds.size()]);",
                "+      List<String> userIds = userDAO.getUserIdsInDomain(connection, domainId);",
                "+      return userIds.toArray(new String[0]);",
                "     } catch (SQLException e) {",
                "@@ -674,3 +645,2 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "         valret[i].setAuthenticationServer(drs[i].authenticationServer);",
                "-        valret[i].setTheTimeStamp(drs[i].theTimeStamp);",
                "       }",
                "@@ -692,9 +662,4 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "     try {",
                "-      DomainRow dr = new DomainRow();",
                "-      dr.id = StringUtil.isInteger(theDomain.getId()) ? Integer.valueOf(theDomain.getId()) : -1;",
                "-      setDomainRow(theDomain, dr);",
                "-",
                "-      // Create domain",
                "+      final DomainRow dr = toDomainRow(theDomain);",
                "       getOrganizationSchema().domain().createDomain(dr);",
                "-",
                "       return idAsString(dr.id);",
                "@@ -705,19 +670,5 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "-  private void setDomainRow(final Domain theDomain, final DomainRow dr) {",
                "-    dr.name = theDomain.getName();",
                "-    dr.description = theDomain.getDescription();",
                "-    dr.className = theDomain.getDriverClassName();",
                "-    dr.propFileName = theDomain.getPropFileName();",
                "-    dr.authenticationServer = theDomain.getAuthenticationServer();",
                "-    dr.theTimeStamp = theDomain.getTheTimeStamp();",
                "-    dr.silverpeasServerURL = theDomain.getSilverpeasServerURL();",
                "-  }",
                "-",
                "   public String updateDomain(Domain theDomain) throws AdminException {",
                "     try {",
                "-      DomainRow dr = new DomainRow();",
                "-      dr.id = idAsInt(theDomain.getId());",
                "-      setDomainRow(theDomain, dr);",
                "-",
                "-      // Create domain",
                "+      final DomainRow dr = toDomainRow(theDomain);",
                "       getOrganizationSchema().domain().updateDomain(dr);",
                "@@ -726,3 +677,2 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "       }",
                "-",
                "       return theDomain.getId();",
                "@@ -733,2 +683,15 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "+  private DomainRow toDomainRow(final Domain domain) {",
                "+    final DomainRow row = new DomainRow();",
                "+    row.id = idAsInt(domain.getId());",
                "+    row.name = domain.getName();",
                "+    row.description = domain.getDescription();",
                "+    row.className = domain.getDriverClassName();",
                "+    row.propFileName = domain.getPropFileName();",
                "+    row.authenticationServer = domain.getAuthenticationServer();",
                "+    row.theTimeStamp = \"0\";",
                "+    row.silverpeasServerURL = domain.getSilverpeasServerURL();",
                "+    return row;",
                "+  }",
                "+",
                "   public String removeDomain(String domainId) throws AdminException {",
                "@@ -763,3 +726,2 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "       valret.setAuthenticationServer(dr.authenticationServer);",
                "-      valret.setTheTimeStamp(dr.theTimeStamp);",
                "       valret.setSilverpeasServerURL(dr.silverpeasServerURL);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/SQLDomainService.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/SQLDomainService.java",
                "index a92b887a22..53aa9ab4c3 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/SQLDomainService.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/SQLDomainService.java",
                "@@ -26,5 +26,2 @@ package org.silverpeas.core.admin.domain;",
                " import org.silverpeas.core.admin.domain.driver.sqldriver.SQLSettings;",
                "-import org.silverpeas.core.admin.domain.model.Domain;",
                "-import org.silverpeas.core.silvertrace.SilverTrace;",
                "-import org.silverpeas.core.admin.service.AdminException;",
                " import org.silverpeas.core.admin.domain.exception.DomainAuthenticationPropertiesAlreadyExistsException;",
                "@@ -34,5 +31,8 @@ import org.silverpeas.core.admin.domain.exception.DomainDeletionException;",
                " import org.silverpeas.core.admin.domain.exception.DomainPropertiesAlreadyExistsException;",
                "+import org.silverpeas.core.admin.domain.model.Domain;",
                " import org.silverpeas.core.admin.domain.repository.SQLDomainRepository;",
                "-import org.silverpeas.core.util.file.FileRepositoryManager;",
                "-import org.silverpeas.core.util.file.FileServerUtils;",
                "+import org.silverpeas.core.admin.service.AdminException;",
                "+import org.silverpeas.core.silvertrace.SilverTrace;",
                "+import org.silverpeas.core.template.SilverpeasTemplate;",
                "+import org.silverpeas.core.template.SilverpeasTemplateFactory;",
                " import org.silverpeas.core.util.ResourceLocator;",
                "@@ -40,4 +40,4 @@ import org.silverpeas.core.util.SettingBundle;",
                " import org.silverpeas.core.util.StringUtil;",
                "-import org.silverpeas.core.template.SilverpeasTemplate;",
                "-import org.silverpeas.core.template.SilverpeasTemplateFactory;",
                "+import org.silverpeas.core.util.file.FileRepositoryManager;",
                "+import org.silverpeas.core.util.file.FileServerUtils;",
                "@@ -172,3 +172,2 @@ public class SQLDomainService extends AbstractDomainService {",
                "       domainToCreate.setAuthenticationServer(\"autDomain\" + technicalDomainName);",
                "-      domainToCreate.setTheTimeStamp(\"0\");",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SilverpeasDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SilverpeasDriver.java",
                "index d15e5ff8e2..a4aec5cb36 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SilverpeasDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SilverpeasDriver.java",
                "@@ -86,13 +86,2 @@ public class SilverpeasDriver extends AbstractDomainDriver implements Silverpeas",
                "-  @Override",
                "-  public UserDetail[] getAllChangedUsers(String fromTimeStamp, String toTimeStamp)",
                "-      throws AdminException {",
                "-    return new UserDetail[0];",
                "-  }",
                "-",
                "-  @Override",
                "-  public GroupDetail[] getAllChangedGroups(String fromTimeStamp, String toTimeStamp) throws AdminException {",
                "-    return new GroupDetail[0];",
                "-  }",
                "-",
                "   @Override",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "index d3827acd67..baeea96c12 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "@@ -136,2 +136,3 @@ public class GoogleDirectoryRequester {",
                "   public User user(final String id) throws AdminException {",
                "+    final long start = System.currentTimeMillis();",
                "     try {",
                "@@ -140,2 +141,7 @@ public class GoogleDirectoryRequester {",
                "       throw new AdminException(e);",
                "+    } finally {",
                "+      final long end = System.currentTimeMillis();",
                "+      SilverLogger.getLogger(this).debug(() -> MessageFormat",
                "+          .format(\"Getting account {0} in {1}\", id,",
                "+              DurationFormatUtils.formatDurationHMS(end - start)));",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "index ec241fc1fc..528d3f7bd2 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "@@ -77,10 +77,4 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "   @Override",
                "-  public UserDetail[] getAllChangedUsers(String fromTimeStamp, String toTimeStamp)",
                "-      throws AdminException {",
                "-    return getAllUsers();",
                "-  }",
                "-",
                "-  @Override",
                "-  public GroupDetail[] getAllChangedGroups(String fromTimeStamp, String toTimeStamp) {",
                "-    return getAllGroups();",
                "+  public boolean isSynchroThreaded() {",
                "+    return settings.getBoolean(\"synchro.Threaded\", false);",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/AbstractLDAPGroup.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/AbstractLDAPGroup.java",
                "index baa81041f3..060f093976 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/AbstractLDAPGroup.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/AbstractLDAPGroup.java",
                "@@ -257,11 +257,2 @@ abstract public class AbstractLDAPGroup {",
                "-  public AbstractLDAPTimeStamp getMaxTimeStamp(String lds, String minTimeStamp)",
                "-      throws AdminException {",
                "-    AbstractLDAPTimeStamp theTimeStamp = driverSettings.newLDAPTimeStamp(minTimeStamp);",
                "-    theTimeStamp.initFromServer(lds, driverSettings.getGroupsSpecificGroupsBaseDN(), driverSettings.",
                "-        getGroupsFullFilter(),",
                "-        driverSettings.getGroupsNameField());",
                "-    return theTimeStamp;",
                "-  }",
                "-",
                "   /**",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPDriver.java",
                "index 23ad7324ab..0ddab41ade 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPDriver.java",
                "@@ -139,73 +139,2 @@ public class LDAPDriver extends AbstractDomainDriver {",
                "-  @Override",
                "-  public String getTimeStamp(String minTimeStamp) throws AdminException {",
                "-    if (driverSettings.getTimeStampVar().length() > 0) {",
                "-      String ld = LDAPUtility.openConnection(driverSettings);",
                "-      AbstractLDAPTimeStamp timeStampU, timeStampG;",
                "-",
                "-      try {",
                "-        timeStampU = userTranslator.getMaxTimeStamp(ld, minTimeStamp);",
                "-        timeStampG = groupTranslator.getMaxTimeStamp(ld, minTimeStamp);",
                "-        if (timeStampU.compareTo(timeStampG) >= 0) {",
                "-          return timeStampU.toString();",
                "-        } else {",
                "-          return timeStampG.toString();",
                "-        }",
                "-      } finally {",
                "-        LDAPUtility.closeConnection(ld);",
                "-      }",
                "-    } else {",
                "-      return \"0\";",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public String getTimeStampField() {",
                "-    String timeStampField = driverSettings.getTimeStampVar();",
                "-    if (timeStampField != null && timeStampField.trim().length() > 0) {",
                "-      return timeStampField;",
                "-    } else {",
                "-      return null;",
                "-    }",
                "-  }",
                "-",
                "-  @Override",
                "-  public UserDetail[] getAllChangedUsers(String fromTimeStamp, String toTimeStamp)",
                "-      throws AdminException {",
                "-    String ld = LDAPUtility.openConnection(driverSettings);",
                "-    UserDetail[] usersReturned;",
                "-",
                "-    try {",
                "-      if (driverSettings.getTimeStampVar().length() > 0) {",
                "-        usersReturned = userTranslator.getAllUsers(ld,",
                "-            \"(|(&(\" + driverSettings.getTimeStampVar() + \">=\" + fromTimeStamp + \")(\" +",
                "-                driverSettings.getTimeStampVar() + \"<=\" + toTimeStamp + \"))\" + \"(!(\" +",
                "-                driverSettings.getTimeStampVar() + \"=*)))\");",
                "-      } else {",
                "-        usersReturned = userTranslator.getAllUsers(ld, \"\");",
                "-      }",
                "-    } finally {",
                "-      LDAPUtility.closeConnection(ld);",
                "-    }",
                "-    return usersReturned;",
                "-  }",
                "-",
                "-  @Override",
                "-  public GroupDetail[] getAllChangedGroups(String fromTimeStamp, String toTimeStamp)",
                "-      throws AdminException {",
                "-    String ld = LDAPUtility.openConnection(driverSettings);",
                "-",
                "-    try {",
                "-      if (driverSettings.getTimeStampVar().length() > 0) {",
                "-        return groupTranslator.getAllChangedGroups(ld,",
                "-            \"(&(\" + driverSettings.getTimeStampVar() + \">=\" + fromTimeStamp + \")(\" +",
                "-                driverSettings.getTimeStampVar() + \"<=\" + toTimeStamp + \"))\");",
                "-      } else {",
                "-        return groupTranslator.getAllChangedGroups(ld, \"\");",
                "-      }",
                "-    } finally {",
                "-      LDAPUtility.closeConnection(ld);",
                "-    }",
                "-  }",
                "-",
                "   /**",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPSettings.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPSettings.java",
                "index f1039d345d..6f9a08a2d0 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPSettings.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPSettings.java",
                "@@ -62,3 +62,2 @@ public class LDAPSettings implements DriverSettings {",
                "   protected boolean SYNCHROthreaded = false;",
                "-  protected String SYNCHROtimeStampVar = \"uSNChanged\";",
                "   protected boolean SYNCHROCacheEnabled = true;",
                "@@ -135,3 +134,2 @@ public class LDAPSettings implements DriverSettings {",
                "     SYNCHROthreaded = rs.getBoolean(\"synchro.Threaded\", SYNCHROthreaded);",
                "-    SYNCHROtimeStampVar = rs.getString(\"synchro.timeStampVar\", SYNCHROtimeStampVar);",
                "     SYNCHROCacheEnabled = rs.getBoolean(\"synchro.CacheEnabled\", SYNCHROCacheEnabled);",
                "@@ -188,6 +186,2 @@ public class LDAPSettings implements DriverSettings {",
                "-  public String getTimeStampVar() {",
                "-    return SYNCHROtimeStampVar;",
                "-  }",
                "-",
                "   public boolean isSynchroCacheEnabled() {",
                "@@ -200,10 +194,2 @@ public class LDAPSettings implements DriverSettings {",
                "-  public AbstractLDAPTimeStamp newLDAPTimeStamp(String theValue) {",
                "-    if (TIME_STAMP_MSAD.equalsIgnoreCase(getTimeStampVar())) {",
                "-      return new LDAPTimeStampMSAD(this, theValue);",
                "-    } else {",
                "-      return new LDAPTimeStampNDS(this, theValue);",
                "-    }",
                "-  }",
                "-",
                "   public String getLDAPImpl() {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPTimeStampMSAD.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPTimeStampMSAD.java",
                "deleted file mode 100644",
                "index 2cea8473aa..0000000000",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPTimeStampMSAD.java",
                "+++ /dev/null",
                "@@ -1,87 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.admin.domain.driver.ldapdriver;",
                "-",
                "-import com.novell.ldap.LDAPEntry;",
                "-import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "-import org.silverpeas.core.admin.service.AdminException;",
                "-",
                "-public class LDAPTimeStampMSAD extends AbstractLDAPTimeStamp {",
                "-  long lTimeStamp;",
                "-",
                "-  public LDAPTimeStampMSAD(LDAPSettings ds, String theValue) {",
                "-    driverSettings = ds;",
                "-    timeStamp = theValue;",
                "-    lTimeStamp = Long.parseLong(theValue);",
                "-  }",
                "-",
                "-  public String toString() {",
                "-    return timeStamp;",
                "-  }",
                "-",
                "-  public int compareTo(Object other) {",
                "-    if (lTimeStamp > ((LDAPTimeStampMSAD) other).lTimeStamp)",
                "-      return 1;",
                "-    else if (lTimeStamp < ((LDAPTimeStampMSAD) other).lTimeStamp)",
                "-      return -1;",
                "-    else",
                "-      return 0;",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean equals(final Object other) {",
                "-    return compareTo(other) == 0;",
                "-  }",
                "-",
                "-  @Override",
                "-  public int hashCode() {",
                "-    return new HashCodeBuilder().append(lTimeStamp).toHashCode();",
                "-  }",
                "-",
                "-",
                "-  public void initFromServer(String lds, String baseDN, String filter,",
                "-      String fallbackSortBy) throws AdminException {",
                "-",
                "-    LDAPEntry[] theEntries = LDAPUtility.search1000Plus(lds, baseDN,",
                "-        driverSettings.getScope(), \"(&(\" + driverSettings.getTimeStampVar()",
                "-        + \">=\" + timeStamp + \")\" + filter + \")\", driverSettings",
                "-        .getTimeStampVar(), driverSettings.getGroupAttributes());",
                "-    if (theEntries.length > 0) {",
                "-      // Problem is : the search1000Plus function sorts normaly by descending",
                "-      // order. BUT most LDAP server can't performs this type of order (like",
                "-      // Active Directory)",
                "-      // So, it may be ordered in the oposite way....",
                "-      long firstVal = Long.parseLong(LDAPUtility.getFirstAttributeValue(",
                "-          theEntries[0], driverSettings.getTimeStampVar()));",
                "-      long lastVal = Long.parseLong(LDAPUtility.getFirstAttributeValue(",
                "-          theEntries[theEntries.length - 1], driverSettings.getTimeStampVar()));",
                "-      if (firstVal >= lastVal) {",
                "-        lTimeStamp = firstVal;",
                "-      } else {",
                "-        lTimeStamp = lastVal;",
                "-      }",
                "-      timeStamp = Long.toString(lTimeStamp);",
                "-    }",
                "-  }",
                "-}",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPTimeStampNDS.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPTimeStampNDS.java",
                "deleted file mode 100644",
                "index 14eee567ba..0000000000",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPTimeStampNDS.java",
                "+++ /dev/null",
                "@@ -1,72 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.admin.domain.driver.ldapdriver;",
                "-",
                "-import com.novell.ldap.LDAPEntry;",
                "-import org.apache.commons.lang3.builder.HashCodeBuilder;",
                "-import org.silverpeas.core.admin.service.AdminException;",
                "-",
                "-public class LDAPTimeStampNDS extends AbstractLDAPTimeStamp {",
                "-  public LDAPTimeStampNDS(LDAPSettings ds, String theValue) {",
                "-    driverSettings = ds;",
                "-    timeStamp = theValue;",
                "-  }",
                "-",
                "-  public String toString() {",
                "-    return timeStamp;",
                "-  }",
                "-",
                "-  public int compareTo(Object other) {",
                "-    return timeStamp.compareTo(((LDAPTimeStampNDS) other).timeStamp);",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean equals(final Object other) {",
                "-    return compareTo(other) == 0;",
                "-  }",
                "-",
                "-  @Override",
                "-  public int hashCode() {",
                "-    return new HashCodeBuilder().append(timeStamp).toHashCode();",
                "-  }",
                "-",
                "-  public void initFromServer(String lds, String baseDN, String filter,",
                "-      String fallbackSortBy) throws AdminException {",
                "-",
                "-    String[] ttv = { driverSettings.getTimeStampVar(), fallbackSortBy };",
                "-",
                "-    LDAPEntry[] theEntries = LDAPUtility.search1000Plus(lds, baseDN,",
                "-        driverSettings.getScope(), \"(&(\" + driverSettings.getTimeStampVar()",
                "-        + \">=\" + timeStamp + \")\" + filter + \")\", fallbackSortBy, ttv);",
                "-",
                "-",
                "-    String ttCurrent;",
                "-    for (LDAPEntry theEntry : theEntries) {",
                "-      ttCurrent = LDAPUtility.getFirstAttributeValue(theEntry, driverSettings.getTimeStampVar());",
                "-      if (ttCurrent.compareTo(timeStamp) > 0) {",
                "-        timeStamp = ttCurrent;",
                "-      }",
                "-    }",
                "-  }",
                "-}",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUser.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUser.java",
                "index 66a6629348..5b6ac86ed7 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUser.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUser.java",
                "@@ -101,3 +101,3 @@ public class LDAPUser {",
                "         .info(\"LDAPUser.getAllUsers()\", \"Recherche des utilisateurs du domaine LDAP distant...\");",
                "-    List<UserDetail> usersVector = new ArrayList<>();",
                "+    List<UserDetail> ldapUsers = new ArrayList<>();",
                "     LDAPEntry[] theEntries = LDAPUtility",
                "@@ -106,10 +106,10 @@ public class LDAPUser {",
                "     for (i = 0; i < theEntries.length; i++) {",
                "-      usersVector.add(translateUser(lds, theEntries[i]));",
                "+      ldapUsers.add(translateUser(lds, theEntries[i]));",
                "-      usersVector.get(i).traceUser();// Trace niveau Info ds",
                "+      ldapUsers.get(i).traceUser();// Trace niveau Info ds",
                "       // module 'admin' des infos user courant : ID, domaine, login, e-mail,...",
                "       SynchroDomainReport.debug(\"LDAPUser.getAllUsers()\",",
                "-          \"Utilisateur trouv\u00c3\u00a9 no : \" + i + \", login : \" + usersVector.get(i).getLogin() + \", \" +",
                "-              usersVector.get(i).getFirstName() + \", \" + usersVector.get(i).getLastName() + \", \" +",
                "-              usersVector.get(i).geteMail());",
                "+          \"Utilisateur trouv\u00c3\u00a9 no : \" + i + \", login : \" + ldapUsers.get(i).getLogin() + \", \" +",
                "+              ldapUsers.get(i).getFirstName() + \", \" + ldapUsers.get(i).getLastName() + \", \" +",
                "+              ldapUsers.get(i).geteMail());",
                "     }",
                "@@ -117,3 +117,3 @@ public class LDAPUser {",
                "         \"R\u00c3\u00a9cup\u00c3\u00a9ration de \" + theEntries.length + \" utilisateurs du domaine LDAP distant\");",
                "-    return usersVector.toArray(new UserDetail[usersVector.size()]);",
                "+    return ldapUsers.toArray(new UserDetail[ldapUsers.size()]);",
                "   }",
                "@@ -314,10 +314,2 @@ public class LDAPUser {",
                "-  public AbstractLDAPTimeStamp getMaxTimeStamp(String lds, String minTimeStamp)",
                "-      throws AdminException {",
                "-    AbstractLDAPTimeStamp theTimeStamp = driverSettings.newLDAPTimeStamp(minTimeStamp);",
                "-    theTimeStamp.initFromServer(lds, driverSettings.getLDAPUserBaseDN(),",
                "-        driverSettings.getUsersFullFilter(), driverSettings.getUsersLoginField());",
                "-    return theTimeStamp;",
                "-  }",
                "-",
                "   public String[] getUserAttributes() {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUtility.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUtility.java",
                "index a24eb2a968..c0b68a78bb 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUtility.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUtility.java",
                "@@ -505,30 +505,2 @@ public class LDAPUtility {",
                "-  public static AbstractLDAPTimeStamp getTimeStamp(String lds, String baseDN,",
                "-      int scope, String filter, String timeStampVar, String minTimeStamp)",
                "-      throws AdminException {",
                "-",
                "-    LDAPSettings driverSettings = connectInfos.get(lds).getSettings();",
                "-    LDAPEntry[] theEntries = search1000Plus(lds, baseDN, scope, \"(&(\"",
                "-        + timeStampVar + \">=\" + minTimeStamp + \")\" + filter + \")\",",
                "-        timeStampVar, null);",
                "-",
                "-    if (theEntries.length > 0) {",
                "-      // Problem is : the search1000Plus function sorts normaly by descending",
                "-      // order. BUT most LDAP server can't performs this type of order (like",
                "-      // Active Directory)",
                "-      // So, it may be ordered in the opposite way....",
                "-      AbstractLDAPTimeStamp firstVal = driverSettings.newLDAPTimeStamp(getFirstAttributeValue(",
                "-          theEntries[0], timeStampVar));",
                "-      AbstractLDAPTimeStamp lastVal = driverSettings.newLDAPTimeStamp(getFirstAttributeValue(",
                "-          theEntries[theEntries.length - 1], timeStampVar));",
                "-      if (firstVal.compareTo(lastVal) >= 0) {",
                "-        return firstVal;",
                "-      } else {",
                "-        return lastVal;",
                "-      }",
                "-    } else {",
                "-      return driverSettings.newLDAPTimeStamp(minTimeStamp);",
                "-    }",
                "-  }",
                "-",
                "   static String[] extractBaseDNs(String baseDN) {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/scimdriver/SCIMDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/scimdriver/SCIMDriver.java",
                "index 4dddefbcac..bdf7ec814a 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/scimdriver/SCIMDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/scimdriver/SCIMDriver.java",
                "@@ -89,14 +89,2 @@ public class SCIMDriver extends AbstractDomainDriver {",
                "-  @Override",
                "-  public UserDetail[] getAllChangedUsers(String fromTimeStamp, String toTimeStamp) {",
                "-    // In this driver, do nothing",
                "-    return new UserDetail[0];",
                "-  }",
                "-",
                "-  @Override",
                "-  public GroupDetail[] getAllChangedGroups(String fromTimeStamp, String toTimeStamp) {",
                "-    // In this driver, do nothing",
                "-    return new GroupDetail[0];",
                "-  }",
                "-",
                "   @Override",
                "@@ -201,3 +189,3 @@ public class SCIMDriver extends AbstractDomainDriver {",
                "     // In this driver, returning silverpeas data",
                "-    return userManager.getAllUsersInDomain(String.valueOf(domainId));",
                "+    return userManager.getAllUsersInDomain(String.valueOf(domainId), false);",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLDriver.java",
                "index 62de680a68..bbcb0cf287 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLDriver.java",
                "@@ -96,13 +96,2 @@ public class SQLDriver extends AbstractDomainDriver {",
                "-  @Override",
                "-  public UserDetail[] getAllChangedUsers(String fromTimeStamp, String toTimeStamp)",
                "-      throws AdminException {",
                "-    return new UserDetail[0];",
                "-  }",
                "-",
                "-  @Override",
                "-  public GroupDetail[] getAllChangedGroups(String fromTimeStamp, String toTimeStamp) throws AdminException {",
                "-    return new GroupDetail[0];",
                "-  }",
                "-",
                "   @Override",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/model/Domain.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/model/Domain.java",
                "index 630135bd43..5aa7117438 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/model/Domain.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/model/Domain.java",
                "@@ -25,3 +25,2 @@ package org.silverpeas.core.admin.domain.model;",
                "-import org.apache.commons.lang3.time.FastDateFormat;",
                " import org.silverpeas.core.admin.domain.DomainServiceProvider;",
                "@@ -34,3 +33,2 @@ import org.silverpeas.core.util.SettingBundle;",
                " import org.silverpeas.core.util.StringUtil;",
                "-import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -38,3 +36,2 @@ import java.io.Serializable;",
                " import java.util.Arrays;",
                "-import java.util.Date;",
                " import java.util.List;",
                "@@ -45,5 +42,2 @@ public class Domain implements Serializable {",
                "   private static final long serialVersionUID = 7451639218436788229L;",
                "-  private static final FastDateFormat TIMESTAMP_FORMATTER =",
                "-      FastDateFormat.getInstance(\"yyyyMMddHHmmss\");",
                "-  private static final int TIMESTAMP_PATTERN_LENGTH = 14;",
                "@@ -56,3 +50,2 @@ public class Domain implements Serializable {",
                "   private String authenticationServer;",
                "-  private String theTimeStamp = \"0\";",
                "   private String silverpeasServerURL = \"\";",
                "@@ -78,16 +71,2 @@ public class Domain implements Serializable {",
                "-  /**",
                "-   * @return String",
                "-   */",
                "-  public String getTheTimeStamp() {",
                "-    return this.theTimeStamp;",
                "-  }",
                "-",
                "-  /**",
                "-   * @param tt",
                "-   */",
                "-  public void setTheTimeStamp(String tt) {",
                "-    this.theTimeStamp = tt;",
                "-  }",
                "-",
                "   /**",
                "@@ -236,14 +215,2 @@ public class Domain implements Serializable {",
                "-  public Date getLastSyncDate() {",
                "-    if (StringUtil.isDefined(theTimeStamp) && !\"0\".equals(theTimeStamp)) {",
                "-      try {",
                "-        String normalizedTimeStamp = theTimeStamp.substring(0, TIMESTAMP_PATTERN_LENGTH);",
                "-        return TIMESTAMP_FORMATTER.parse(normalizedTimeStamp);",
                "-      } catch (Exception e) {",
                "-        SilverLogger.getLogger(this).warn(e);",
                "-      }",
                "-    }",
                "-    return null;",
                "-  }",
                "-",
                "   @Override",
                "@@ -263,4 +230,2 @@ public class Domain implements Serializable {",
                "     sb.append(authenticationServer);",
                "-    sb.append(\", theTimeStamp=\");",
                "-    sb.append(theTimeStamp);",
                "     sb.append(\", silverpeasServerURL=\");",
                "@@ -289,3 +254,2 @@ public class Domain implements Serializable {",
                "         Objects.equals(authenticationServer, domain.authenticationServer) &&",
                "-        Objects.equals(theTimeStamp, domain.theTimeStamp) &&",
                "         Objects.equals(silverpeasServerURL, domain.silverpeasServerURL) &&",
                "@@ -297,3 +261,3 @@ public class Domain implements Serializable {",
                "     return Objects.hash(id, name, description, driverClassName, propFileName, authenticationServer,",
                "-        theTimeStamp, silverpeasServerURL, userDomainQuota);",
                "+        silverpeasServerURL, userDomainQuota);",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/synchro/SynchroDomainScheduler.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/synchro/SynchroDomainScheduler.java",
                "index 05a98171ac..7a13f241f6 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/synchro/SynchroDomainScheduler.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/synchro/SynchroDomainScheduler.java",
                "@@ -25,3 +25,8 @@ package org.silverpeas.core.admin.domain.synchro;",
                "+import org.silverpeas.core.admin.domain.model.Domain;",
                " import org.silverpeas.core.admin.service.AdministrationServiceProvider;",
                "+import org.silverpeas.core.admin.service.OrganizationController;",
                "+import org.silverpeas.core.admin.user.constant.UserAccessLevel;",
                "+import org.silverpeas.core.admin.user.model.UserDetailsSearchCriteria;",
                "+import org.silverpeas.core.notification.user.SimpleUserNotification;",
                " import org.silverpeas.core.scheduler.Scheduler;",
                "@@ -31,2 +36,4 @@ import org.silverpeas.core.scheduler.SchedulerProvider;",
                " import org.silverpeas.core.scheduler.trigger.JobTrigger;",
                "+import org.silverpeas.core.util.LocalizationBundle;",
                "+import org.silverpeas.core.util.ResourceLocator;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -38,3 +45,3 @@ public class SynchroDomainScheduler implements SchedulerEventListener {",
                "-  public static final String ADMINSYNCHRODOMAIN_JOB_NAME = \"AdminSynchroDomainJob\";",
                "+  private static final String ADMINSYNCHRODOMAIN_JOB_NAME = \"AdminSynchroDomainJob\";",
                "   private List<String> domainIds = null;",
                "@@ -44,3 +51,2 @@ public class SynchroDomainScheduler implements SchedulerEventListener {",
                "       this.domainIds = domainIds;",
                "-",
                "       Scheduler scheduler = SchedulerProvider.getVolatileScheduler();",
                "@@ -67,4 +73,3 @@ public class SynchroDomainScheduler implements SchedulerEventListener {",
                "-  public void doSynchro() {",
                "-",
                "+  private void doSynchro() {",
                "     if (domainIds != null) {",
                "@@ -75,2 +80,11 @@ public class SynchroDomainScheduler implements SchedulerEventListener {",
                "           SilverLogger.getLogger(this).error(e.getMessage(), e);",
                "+          final OrganizationController organizationController = OrganizationController.get();",
                "+          final Domain domain = organizationController.getDomain(domainId);",
                "+          final UserDetailsSearchCriteria criteria = new UserDetailsSearchCriteria();",
                "+          criteria.onAccessLevels(UserAccessLevel.ADMINISTRATOR);",
                "+          SimpleUserNotification.fromSystem()",
                "+              .toUsers(organizationController.searchUsers(criteria))",
                "+              .withTitle(l -> bundle(l).getStringWithParams(\"admin.domain.sync.error.notif.title\", domain.getName()))",
                "+              .andMessage(l -> bundle(l).getStringWithParams(\"admin.domain.sync.error.notif.message\", domain.getName()))",
                "+              .send();",
                "         }",
                "@@ -78,3 +92,6 @@ public class SynchroDomainScheduler implements SchedulerEventListener {",
                "     }",
                "+  }",
                "+  private LocalizationBundle bundle(final String locale) {",
                "+    return ResourceLocator.getLocalizationBundle(\"org.silverpeas.admin.multilang.admin\", locale);",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/persistence/GroupUserRoleTable.java b/core-library/src/main/java/org/silverpeas/core/admin/persistence/GroupUserRoleTable.java",
                "index 4ac390dc3c..3327d52c57 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/persistence/GroupUserRoleTable.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/persistence/GroupUserRoleTable.java",
                "@@ -167,3 +167,3 @@ public class GroupUserRoleTable extends Table<GroupUserRoleRow> {",
                "       List<String> userIds =",
                "-          userDAO.getDirectUserIdsByGroupUserRole(connection, String.valueOf(id));",
                "+          userDAO.getDirectUserIdsByGroupUserRole(connection, String.valueOf(id), true);",
                "       for (String userId : userIds) {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java b/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "index b320abc743..0764abe4c2 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "@@ -25,2 +25,4 @@ package org.silverpeas.core.admin.service;",
                "+import org.apache.commons.lang3.time.DurationFormatUtils;",
                "+import org.jetbrains.annotations.Nullable;",
                " import org.silverpeas.core.admin.RightProfile;",
                "@@ -67,2 +69,4 @@ import org.silverpeas.core.admin.user.dao.UserSearchCriteriaForDAO;",
                " import org.silverpeas.core.admin.user.model.*;",
                "+import org.silverpeas.core.backgroundprocess.AbstractBackgroundProcessRequest;",
                "+import org.silverpeas.core.backgroundprocess.BackgroundProcessTask;",
                " import org.silverpeas.core.contribution.contentcontainer.content.ContentManager;",
                "@@ -75,10 +79,4 @@ import org.silverpeas.core.persistence.Transaction;",
                " import org.silverpeas.core.persistence.jdbc.DBUtil;",
                "-import org.silverpeas.core.util.ArrayUtil;",
                "-import org.silverpeas.core.util.CollectionUtil;",
                "-import org.silverpeas.core.util.DateUtil;",
                "-import org.silverpeas.core.util.ListSlice;",
                "-import org.silverpeas.core.util.ResourceLocator;",
                "-import org.silverpeas.core.util.ServiceProvider;",
                "-import org.silverpeas.core.util.SettingBundle;",
                "-import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.util.Process;",
                "+import org.silverpeas.core.util.*;",
                " import org.silverpeas.core.util.file.FileRepositoryManager;",
                "@@ -87,2 +85,3 @@ import org.silverpeas.core.util.logging.SilverLogger;",
                "+import javax.annotation.Nonnull;",
                " import javax.annotation.PostConstruct;",
                "@@ -99,2 +98,4 @@ import java.util.stream.Collectors;",
                "+import static java.text.MessageFormat.format;",
                "+import static java.util.Collections.singletonList;",
                " import static org.silverpeas.core.SilverpeasExceptionMessages.*;",
                "@@ -2353,3 +2354,3 @@ class Admin implements Administration {",
                "       // add user",
                "-      String sUserId = userManager.addUser(userDetail, addOnlyInSilverpeas);",
                "+      String sUserId = userManager.addUser(userDetail, addOnlyInSilverpeas, true);",
                "@@ -2436,2 +2437,38 @@ class Admin implements Administration {",
                "+  @Override",
                "+  public String restoreUser(final String sUserId) throws AdminException {",
                "+    final UserDetail user = getUserDetail(sUserId);",
                "+    if (user == null) {",
                "+      throw new AdminException(unknown(\"user\", sUserId));",
                "+    }",
                "+    try {",
                "+      final String removedUserId = userManager.restoreUser(user, true);",
                "+      cache.resetCache();",
                "+      return removedUserId;",
                "+    } catch (Exception e) {",
                "+      throw new AdminException(failureOnRemoving(\"user\", sUserId), e);",
                "+    }",
                "+  }",
                "+",
                "+  @Override",
                "+  public String removeUser(final String sUserId) throws AdminException {",
                "+    if (ADMIN_ID.equals(sUserId)) {",
                "+      SilverLogger.getLogger(this).warn(",
                "+          \"Attempt to remove the main administrator account by user \" +",
                "+              User.getCurrentRequester().getId());",
                "+      return null;",
                "+    }",
                "+    final UserDetail user = getUserDetail(sUserId);",
                "+    if (user == null) {",
                "+      throw new AdminException(unknown(\"user\", sUserId));",
                "+    }",
                "+    try {",
                "+      final String removedUserId = userManager.removeUser(user, true);",
                "+      cache.opRemoveUser(user);",
                "+      return removedUserId;",
                "+    } catch (Exception e) {",
                "+      throw new AdminException(failureOnRemoving(\"user\", sUserId), e);",
                "+    }",
                "+  }",
                "+",
                "   @Override",
                "@@ -2476,3 +2513,3 @@ class Admin implements Administration {",
                "       // Update user",
                "-      String sUserId = userManager.updateUser(user);",
                "+      String sUserId = userManager.updateUser(user, true);",
                "@@ -2626,3 +2663,3 @@ class Admin implements Administration {",
                "       // Remove all users",
                "-      UserDetail[] toRemoveUDs = userManager.getAllUsersInDomain(domainId);",
                "+      UserDetail[] toRemoveUDs = userManager.getAllUsersInDomain(domainId, true);",
                "       if (toRemoveUDs != null) {",
                "@@ -2733,6 +2770,6 @@ class Admin implements Administration {",
                "     try {",
                "-      if (domainId != null && \"-1\".equals(domainId)) {",
                "+      if (\"-1\".equals(domainId)) {",
                "         return new UserDetail[0];",
                "       }",
                "-      return userManager.getAllUsersInDomain(domainId);",
                "+      return userManager.getAllUsersInDomain(domainId, false);",
                "     } catch (Exception e) {",
                "@@ -2756,3 +2793,3 @@ class Admin implements Administration {",
                "     try {",
                "-      if (domainId != null && \"-1\".equals(domainId)) {",
                "+      if (\"-1\".equals(domainId)) {",
                "         return ArrayUtil.EMPTY_STRING_ARRAY;",
                "@@ -2760,3 +2797,3 @@ class Admin implements Administration {",
                "       List<String> userIds = userManager.getAllUserIdsInDomain(domainId);",
                "-      return userIds.toArray(new String[userIds.size()]);",
                "+      return userIds.toArray(new String[0]);",
                "     } catch (Exception e) {",
                "@@ -3147,5 +3184,10 @@ class Admin implements Administration {",
                "+  @Override",
                "+  public List<UserDetail> getRemovedUsers(final String... domainIds) throws AdminException {",
                "+    return userManager.getRemovedUsersOfDomains(domainIds);",
                "+  }",
                "+",
                "   @Override",
                "   public List<UserDetail> getNonBlankedDeletedUsers(final String... domainIds) throws AdminException {",
                "-    return userManager.getNonBlankedDeletedUserOfDomains(domainIds);",
                "+    return userManager.getNonBlankedDeletedUsersOfDomains(domainIds);",
                "   }",
                "@@ -4290,4 +4332,4 @@ class Admin implements Administration {",
                "           (ud.getState() != UserState.UNKNOWN && ud.getState() != theUserDetail.getState())) {",
                "-        copyDistantUserIntoSilverpeasUser(ud, theUserDetail);",
                "-        userManager.updateUser(theUserDetail);",
                "+        mergeDistantUserIntoSilverpeasUser(ud, theUserDetail);",
                "+        userManager.updateUser(theUserDetail, true);",
                "         cache.opUpdateUser(userManager.getUserDetail(userId));",
                "@@ -4376,6 +4418,4 @@ class Admin implements Administration {",
                "     synchroDomain.removeUser(theUserDetail.getSpecificId());",
                "-    deleteUser(userId, true);",
                "-    List<UserDetail> listUsersRemove = new ArrayList<>();",
                "-    listUsersRemove.add(theUserDetail);",
                "-    processSpecificSynchronization(theUserDetail.getDomainId(), null, null, listUsersRemove);",
                "+    removeUser(userId);",
                "+    processSpecificSynchronization(theUserDetail.getDomainId(), null, null, singletonList(theUserDetail));",
                "     return userId;",
                "@@ -4391,58 +4431,65 @@ class Admin implements Administration {",
                "       throws AdminException {",
                "-    String sReport = \"Starting synchronization...\\n\\n\";",
                "-    synchronized (semaphore) {",
                "-",
                "-      // D\u00c3\u00a9marrage de la synchro avec la Popup d'affichage",
                "-      if (threaded) {",
                "-        SynchroDomainReport.setReportLevel(Level.WARNING);",
                "-      }",
                "-      SynchroDomainReport.startSynchro();",
                "-      try {",
                "-        SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_DOMAIN,",
                "-            \"Domain '\" + domainDriverManager.getDomain(sDomainId).getName() + \"', Id : \"",
                "-            + sDomainId);",
                "-        // Start synchronization",
                "-        domainDriverManager.beginSynchronization(sDomainId);",
                "-",
                "-        DomainDriver synchroDomain = domainDriverManager.getDomainDriver(sDomainId);",
                "-        Domain theDomain = domainDriverManager.getDomain(sDomainId);",
                "-        String fromTimeStamp = theDomain.getTheTimeStamp();",
                "-        String toTimeStamp = synchroDomain.getTimeStamp(fromTimeStamp);",
                "-",
                "-        // Synchronize users",
                "-        boolean importUsers = synchroDomain.mustImportUsers() || threaded;",
                "-        sReport += synchronizeUsers(sDomainId, fromTimeStamp, toTimeStamp, threaded, importUsers);",
                "-",
                "-        // Synchronize groups",
                "-        // Get all users of the domain from Silverpeas",
                "-        UserDetail[] silverpeasUDs = userManager.getAllUsersInDomain(sDomainId);",
                "-        HashMap<String, String> userIdsMapping = getUserIdsMapping(silverpeasUDs);",
                "-        sReport += \"\\n\" + synchronizeGroups(sDomainId, userIdsMapping);",
                "-",
                "-        // All the synchro is finished -> set the new timestamp",
                "-        // ----------------------------------------------------",
                "-        theDomain.setTheTimeStamp(toTimeStamp);",
                "-        updateDomain(theDomain);",
                "-",
                "-        // End synchronization",
                "-        String sDomainSpecificErrors = domainDriverManager.endSynchronization(sDomainId, false);",
                "-        SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_DOMAIN, \"----------------\"",
                "-            + sDomainSpecificErrors);",
                "-        return sReport + \"\\n----------------\\n\" + sDomainSpecificErrors;",
                "-      } catch (Exception e) {",
                "-        try {",
                "-          // End synchronization",
                "-          domainDriverManager.endSynchronization(sDomainId, true);",
                "-        } catch (Exception e1) {",
                "-          SilverLogger.getLogger(this).error(e1);",
                "+    try {",
                "+      final Pair<String, List<AbstractBackgroundProcessRequest>> result = Transaction",
                "+          .performInNew(new Process<Pair<String, List<AbstractBackgroundProcessRequest>>>() {",
                "+        @Override",
                "+        public Pair<String, List<AbstractBackgroundProcessRequest>> execute() throws Exception {",
                "+          String sReport = \"Starting synchronization...\\n\\n\";",
                "+          synchronized (semaphore) {",
                "+            // Starting synchronization with a status popup",
                "+            if (threaded) {",
                "+              SynchroDomainReport.setReportLevel(Level.WARNING);",
                "+            }",
                "+            SynchroDomainReport.startSynchro();",
                "+            try {",
                "+              SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_DOMAIN,",
                "+                  \"Domain '\" + domainDriverManager.getDomain(sDomainId).getName() + \"', Id : \" +",
                "+                      sDomainId);",
                "+              // Start synchronization",
                "+              domainDriverManager.beginSynchronization(sDomainId);",
                "+              final DomainDriver synchroDomain = domainDriverManager.getDomainDriver(sDomainId);",
                "+              // Synchronize users",
                "+              final boolean addUserIntoSilverpeas = synchroDomain.mustImportUsers() || threaded;",
                "+              final SyncOfUsersContext context = new SyncOfUsersContext(sDomainId, threaded,",
                "+                  addUserIntoSilverpeas, delUsersOnDiffSynchro);",
                "+              final SyncOfUsersContext syncOfUsersContext = synchronizeUsers(context);",
                "+              sReport += syncOfUsersContext.getReport();",
                "+              // Synchronize groups",
                "+              // Get all users of the domain from Silverpeas",
                "+              final UserDetail[] silverpeasUDs = userManager.getAllUsersInDomain(sDomainId, true);",
                "+              final Map<String, String> userIdsMapping = getUserIdsMapping(silverpeasUDs);",
                "+              sReport += \"\\n\" + synchronizeGroups(sDomainId, userIdsMapping);",
                "+              // End synchronization",
                "+              final String sDomainSpecificErrors = domainDriverManager.endSynchronization(sDomainId, false);",
                "+              SynchroDomainReport",
                "+                  .warn(ADMIN_SYNCHRONIZE_DOMAIN, \"----------------\" + sDomainSpecificErrors);",
                "+              return Pair.of(",
                "+                  sReport + \"\\n----------------\\n\" + sDomainSpecificErrors,",
                "+                  singletonList(syncOfUsersContext.getIndexationBackgroundProcess()));",
                "+            } catch (Exception e) {",
                "+              try {",
                "+                // End synchronization",
                "+                domainDriverManager.endSynchronization(sDomainId, true);",
                "+              } catch (Exception e1) {",
                "+                SilverLogger.getLogger(this).error(e1);",
                "+              }",
                "+              SynchroDomainReport.error(ADMIN_SYNCHRONIZE_DOMAIN,",
                "+                  \"Probl\u00c3\u00a8me lors de la synchronisation : \" + e.getMessage(), null);",
                "+              throw new AdminException(",
                "+                  \"Fail to synchronize domain \" + sDomainId + \". Report: \" + sReport, e);",
                "+            } finally {",
                "+              SynchroDomainReport.stopSynchro();// Fin de synchro avec la Popup d'affichage",
                "+              // Reset the cache",
                "+              cache.resetCache();",
                "+            }",
                "+          }",
                "         }",
                "-        SynchroDomainReport.error(ADMIN_SYNCHRONIZE_DOMAIN,",
                "-            \"Probl\u00c3\u00a8me lors de la synchronisation : \" + e.getMessage(), null);",
                "-        throw new AdminException(",
                "-            \"Fail to synchronize domain \" + sDomainId + \". Report: \" + sReport, e);",
                "-      } finally {",
                "-        SynchroDomainReport.stopSynchro();// Fin de synchro avec la Popup d'affichage",
                "-        // Reset the cache",
                "-        cache.resetCache();",
                "+      });",
                "+      result.getSecond().forEach(BackgroundProcessTask::push);",
                "+      return result.getFirst();",
                "+    } catch (Exception e) {",
                "+      if (e.getCause() instanceof AdminException) {",
                "+        throw e;",
                "       }",
                "+      throw new AdminException(e);",
                "     }",
                "@@ -4453,12 +4500,21 @@ class Admin implements Administration {",
                "    * distant one) - first name - last name - e-mail - login",
                "-   *",
                "-   * @param distantUser",
                "-   * @param silverpeasUser",
                "+   * @param distantUser {@link UserDetail} representing data on externam repository.",
                "+   * @param silverpeasUser {@link UserDetail} representing data on silverpeas.",
                "+   * @return true if a data has changed, false otherwise.",
                "    */",
                "-  private void copyDistantUserIntoSilverpeasUser(UserDetail distantUser, UserDetail silverpeasUser) {",
                "+  static boolean mergeDistantUserIntoSilverpeasUser(final UserDetail distantUser,",
                "+      final UserDetail silverpeasUser) {",
                "+    boolean dataUpdated =  !Objects.equals(silverpeasUser.getSpecificId(), distantUser.getSpecificId());",
                "     silverpeasUser.setSpecificId(distantUser.getSpecificId());",
                "+    dataUpdated |= !Objects.equals(silverpeasUser.getFirstName(), distantUser.getFirstName());",
                "     silverpeasUser.setFirstName(distantUser.getFirstName());",
                "+    dataUpdated |= !Objects.equals(silverpeasUser.getLastName(), distantUser.getLastName());",
                "     silverpeasUser.setLastName(distantUser.getLastName());",
                "+    dataUpdated |= !Objects.equals(silverpeasUser.geteMail(), distantUser.geteMail());",
                "     silverpeasUser.seteMail(distantUser.geteMail());",
                "+    dataUpdated |= !Objects.equals(silverpeasUser.getLogin(), distantUser.getLogin());",
                "     silverpeasUser.setLogin(distantUser.getLogin());",
                "+    if (silverpeasUser.isRemovedState()) {",
                "+      return dataUpdated;",
                "+    }",
                "     if (distantUser.isDeactivatedState() ||",
                "@@ -4470,4 +4526,6 @@ class Admin implements Administration {",
                "       // for example, it is still blocked after a synchronization",
                "+      dataUpdated |= !Objects.equals(silverpeasUser.getState(), distantUser.getState());",
                "       silverpeasUser.setState(distantUser.getState());",
                "     }",
                "+    return dataUpdated;",
                "   }",
                "@@ -4475,96 +4533,164 @@ class Admin implements Administration {",
                "   /**",
                "-   * Synchronize users between cache and domain's datastore",
                "+   * Synchronize users between cache and domain's datasource",
                "    */",
                "-  private String synchronizeUsers(String domainId, String fromTimeStamp, String toTimeStamp,",
                "-      boolean threaded, boolean importUsers) throws AdminException {",
                "-    String specificId;",
                "-    StringBuilder sReport = new StringBuilder(\"User synchronization : \\n\");",
                "+  private SyncOfUsersContext synchronizeUsers(final SyncOfUsersContext context)",
                "+      throws AdminException {",
                "+    final String domainId = context.getDomainId();",
                "+    context.appendToReport(\"User synchronization : \\n\");",
                "     String message;",
                "-    Collection<UserDetail> addedUsers = new ArrayList<>();",
                "-    Collection<UserDetail> updateUsers = new ArrayList<>();",
                "-    Collection<UserDetail> removedUsers = new ArrayList<>();",
                "-",
                "-    SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, \"Starting users synchronization...\");",
                "+    SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, \"Starting synchronization of users...\");",
                "+    final UserDetail[] distantUDs = domainDriverManager.getAllUsers(context.getDomainId());",
                "+    SynchroDomainReport.info(ADMIN_SYNCHRONIZE_USERS,",
                "+        format(\"Existing currently {0} users in external repository before synchronization\",",
                "+            distantUDs.length));",
                "+    final UserDetail[] silverpeasUDs = userManager.getAllUsersInDomain(domainId, true);",
                "+    SynchroDomainReport.info(ADMIN_SYNCHRONIZE_USERS,",
                "+        format(\"Existing currently {0} users in Silverpeas before synchronization\",",
                "+            silverpeasUDs.length));",
                "     try {",
                "-      // Get all users of the domain from distant datasource",
                "-      DomainDriver domainDriver = domainDriverManager.getDomainDriver(domainId);",
                "-      UserDetail[] distantUDs = domainDriver.getAllChangedUsers(fromTimeStamp, toTimeStamp);",
                "-",
                "-      message = distantUDs.length",
                "-          + \" user(s) have been changed in external repository since the last synchronization\";",
                "-      sReport.append(message).append(\"\\n\");",
                "-      SynchroDomainReport.info(ADMIN_SYNCHRONIZE_USERS, message);",
                "-",
                "-      // Get all users of the domain from Silverpeas",
                "-      UserDetail[] silverpeasUDs = userManager.getAllUsersInDomain(domainId);",
                "-      SynchroDomainReport.info(ADMIN_SYNCHRONIZE_USERS, \"Adding or updating users in database...\");",
                "-",
                "-      // Add new users or update existing ones from distant datasource",
                "-      for (UserDetail distantUD : distantUDs) {",
                "-        UserDetail userToUpdateFromDistantUser = null;",
                "-        specificId = distantUD.getSpecificId();",
                "-",
                "-",
                "-        // search for user in Silverpeas database",
                "-        for (final UserDetail silverpeasUD : silverpeasUDs) {",
                "-          if (silverpeasUD.getSpecificId().equals(specificId) || (shouldFallbackUserLogins",
                "-              && silverpeasUD.getLogin().equals(distantUD.getLogin()))) {",
                "-            userToUpdateFromDistantUser = silverpeasUD;",
                "-            copyDistantUserIntoSilverpeasUser(distantUD, userToUpdateFromDistantUser);",
                "-            break;",
                "-          }",
                "-        }",
                "+      performRemoveOfUsersDuringSynchronization(context, distantUDs, silverpeasUDs);",
                "+      performSaveOfUsersDuringSynchronization(context, distantUDs, silverpeasUDs);",
                "+      processSpecificSynchronization(domainId, context.getAddedUsers().values(),",
                "+          context.getUpdatedUsers().values(), context.getRemovedUsers().values());",
                "+      message = \"Synchronization of users terminated\";",
                "+      context.appendToReport(message).appendToReport(\"\\n\");",
                "+      SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "+      message = \"# of updated users: \" + context.getUpdatedUsers().size() +",
                "+          \", added: \" + context.getAddedUsers().size() +",
                "+          \", removed: \" + context.getRemovedUsers().size() +",
                "+          \", restored: \" + context.getRestoredUsers().size() +",
                "+          \", deleted: \" + context.getDeletedUsers().size();",
                "+      context.appendToReport(message).appendToReport(\"\\n\");",
                "+      SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "+      context.setIndexationBackgroundProcess(",
                "+          new BackgroundUserIndexationProcess(domainDriverManager, context));",
                "+      return context;",
                "+    } catch (Exception e) {",
                "+      SynchroDomainReport.error(ADMIN_SYNCHRONIZE_USERS,",
                "+          \"Problem during synchronization of users : \" + e.getMessage(), null);",
                "+      throw new AdminException(",
                "+          \"Fail to synchronize domain \" + domainId + \". Report: \" + context.getReport(), e);",
                "+    }",
                "+  }",
                "-        if (userToUpdateFromDistantUser != null) {",
                "-          // update user",
                "-          updateUserDuringSynchronization(userToUpdateFromDistantUser, updateUsers, sReport);",
                "-        } else if (importUsers) {",
                "-          // add user",
                "-          distantUD.setDomainId(domainId);",
                "-          addUserDuringSynchronization(distantUD, addedUsers, sReport);",
                "+  private void performRemoveOfUsersDuringSynchronization(final SyncOfUsersContext context,",
                "+      final UserDetail[] distantUDs, final UserDetail[] silverpeasUDs) {",
                "+    if (context.isRemoveOperationToPerform()) {",
                "+      SynchroDomainReport.info(ADMIN_SYNCHRONIZE_USERS, \"Removing users from database...\");",
                "+      final Set<String> indexedDistantUsers = extractUserSpecificIdAndFallbackLogin(distantUDs);",
                "+      for (UserDetail silverpeasUD : silverpeasUDs) {",
                "+        // search for user in distant datasource",
                "+        if (!silverpeasUD.isRemovedState() &&",
                "+            !existsUserBySpecificIdOrFallbackLoginIn(silverpeasUD, indexedDistantUsers)) {",
                "+          removeUserDuringSynchronization(context, silverpeasUD);",
                "         }",
                "       }",
                "+    }",
                "+  }",
                "-      if (!threaded || (threaded && delUsersOnDiffSynchro)) {",
                "-        // Delete obsolete users from Silverpeas",
                "-        SynchroDomainReport.info(ADMIN_SYNCHRONIZE_USERS, \"Removing users from database...\");",
                "-        distantUDs = domainDriverManager.getAllUsers(domainId);",
                "-        for (UserDetail silverpeasUD : silverpeasUDs) {",
                "-          boolean bFound = false;",
                "-          specificId = silverpeasUD.getSpecificId();",
                "-",
                "-          // search for user in distant datasource",
                "-          for (final UserDetail distantUD : distantUDs) {",
                "-            if (distantUD.getSpecificId().equals(specificId) || (shouldFallbackUserLogins",
                "-                && silverpeasUD.getLogin().equals(distantUD.getLogin()))) {",
                "-              bFound = true;",
                "-              break;",
                "-            }",
                "-          }",
                "-",
                "-          // if found, do nothing, else delete",
                "-          if (!bFound) {",
                "-            deleteUserDuringSynchronization(silverpeasUD, removedUsers,",
                "-                sReport);",
                "-          }",
                "+  private void performSaveOfUsersDuringSynchronization(final SyncOfUsersContext context,",
                "+      final UserDetail[] distantUDs, final UserDetail[] silverpeasUDs) {",
                "+    SynchroDomainReport.info(ADMIN_SYNCHRONIZE_USERS, \"Saving users in database...\");",
                "+    final Map<String, UserDetail> indexedSpUsers = indexUsersBySpecificIdAndLogin(silverpeasUDs);",
                "+    for (final UserDetail distantUD : distantUDs) {",
                "+      final UserDetail userToUpdateFromDistantUser = getUserBySpecificIdOrFallbackLoginFrom(distantUD, indexedSpUsers);",
                "+      if (userToUpdateFromDistantUser != null) {",
                "+        if (userToUpdateFromDistantUser.isRemovedState()) {",
                "+          restoreUserDuringSynchronization(context, distantUD, userToUpdateFromDistantUser);",
                "+        } else if (mergeDistantUserIntoSilverpeasUser(distantUD, userToUpdateFromDistantUser)) {",
                "+          updateUserDuringSynchronization(context, userToUpdateFromDistantUser);",
                "         }",
                "+      } else if (context.isAddOperationToPerform()) {",
                "+        deleteRemovedUserDuringSynchronization(context, distantUD, indexedSpUsers);",
                "+        distantUD.setDomainId(context.getDomainId());",
                "+        addUserDuringSynchronization(context, distantUD);",
                "       }",
                "+    }",
                "+  }",
                "-      // traitement sp\u00c3\u00a9cifique des users selon l'interface impl\u00c3\u00a9ment\u00c3\u00a9e",
                "-      processSpecificSynchronization(domainId, addedUsers, updateUsers, removedUsers);",
                "+  /**",
                "+   * Background process request which ensure the reminder scheduler to not be disturbed by user",
                "+   * notification send processing.",
                "+   */",
                "+  private static class BackgroundUserIndexationProcess extends AbstractBackgroundProcessRequest {",
                "+",
                "+    private final DomainDriverManager domainDriverManager;",
                "+    private final SyncOfUsersContext context;",
                "+",
                "+    private BackgroundUserIndexationProcess(final DomainDriverManager domainDriverManager,",
                "+        final SyncOfUsersContext context) {",
                "+      super();",
                "+      this.domainDriverManager = domainDriverManager;",
                "+      this.context = context;",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void process() {",
                "+      final SilverLogger logger = SilverLogger.getLogger(this);",
                "+      final long start = System.currentTimeMillis();",
                "+      final String totalOfUsers = String.valueOf(",
                "+          context.getAddedUsers().size() + context.getUpdatedUsers().size() +",
                "+              context.getRemovedUsers().size() + context.getRestoredUsers().size());",
                "+      logger.debug(format(\"Starting indexation of {0} users on domain id {1}...\", totalOfUsers,",
                "+          context.getDomainId()));",
                "+      Transaction.performInOne(() -> {",
                "+        logger.debug(format(\"unindexation of {0} removed users on domain id {1}...\",",
                "+            String.valueOf(context.getRemovedUsers().size()), context.getDomainId()));",
                "+        context.getRemovedUsers().keySet().forEach(domainDriverManager::unindexUser);",
                "+        logger.debug(format(\"indexation of {0} restored users on domain id {1}...\",",
                "+            String.valueOf(context.getRestoredUsers().size()), context.getDomainId()));",
                "+        context.getRestoredUsers().keySet().forEach(domainDriverManager::indexUser);",
                "+        logger.debug(format(\"indexation of {0} added users on domain id {1}...\",",
                "+            String.valueOf(context.getAddedUsers().size()), context.getDomainId()));",
                "+        context.getAddedUsers().keySet().forEach(domainDriverManager::indexUser);",
                "+        logger.debug(format(\"indexation of {0} updated users on domain id {1}...\",",
                "+            String.valueOf(context.getUpdatedUsers().size()), context.getDomainId()));",
                "+        context.getUpdatedUsers().keySet().forEach(domainDriverManager::indexUser);",
                "+        return null;",
                "+      });",
                "+      final long end = System.currentTimeMillis();",
                "+      logger.debug(",
                "+          () -> format(\"Ending indexation of {0} users on domain id {1} in {2}\", totalOfUsers,",
                "+              context.getDomainId(), DurationFormatUtils.formatDurationHMS(end - start)));",
                "+    }",
                "+  }",
                "-      message = \"Users synchronization terminated\";",
                "-      sReport.append(message).append(\"\\n\");",
                "-      SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "-      message = \"# of updated users : \" + updateUsers.size() + \", added : \" + addedUsers.size()",
                "-          + \", removed : \" + removedUsers.size();",
                "-      sReport.append(message).append(\"\\n\");",
                "-      SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "-      return sReport.toString();",
                "-    } catch (Exception e) {",
                "-      SynchroDomainReport.error(ADMIN_SYNCHRONIZE_USERS, \"Problem during synchronization of users : \"",
                "-          + e.getMessage(), null);",
                "-      throw new AdminException(\"Fail to synchronize domain \" + domainId",
                "-          + \". Report: \" + sReport, e);",
                "+  @Nullable",
                "+  private UserDetail getUserBySpecificIdOrFallbackLoginFrom(@Nonnull final UserDetail user,",
                "+      final Map<String, UserDetail> indexedUsers) {",
                "+    UserDetail indexedUser = indexedUsers.get(user.getSpecificId());",
                "+    if (indexedUser == null && shouldFallbackUserLogins) {",
                "+      indexedUser = indexedUsers.get(user.getLogin());",
                "     }",
                "+    return indexedUser;",
                "+  }",
                "+",
                "+  private boolean existsUserBySpecificIdOrFallbackLoginIn(final UserDetail user,",
                "+      final Set<String> indexedUsers) {",
                "+    return indexedUsers.contains(user.getSpecificId()) ||",
                "+        (shouldFallbackUserLogins && indexedUsers.contains(user.getLogin()));",
                "+  }",
                "+",
                "+  @Nonnull",
                "+  private Map<String, UserDetail> indexUsersBySpecificIdAndLogin(",
                "+      final UserDetail[] silverpeasUDs) {",
                "+    final Map<String, UserDetail> indexedSilverpeasUsers = new HashMap<>(silverpeasUDs.length * 2);",
                "+    Arrays.stream(silverpeasUDs).forEach(u -> {",
                "+      indexedSilverpeasUsers.put(u.getSpecificId(), u);",
                "+      indexedSilverpeasUsers.put(u.getLogin(), u);",
                "+    });",
                "+    return indexedSilverpeasUsers;",
                "+  }",
                "+",
                "+  @Nonnull",
                "+  private Set<String> extractUserSpecificIdAndFallbackLogin(final UserDetail[] users) {",
                "+    final Set<String> indexedUsers = new HashSet<>(",
                "+        shouldFallbackUserLogins ? (users.length * 2) : users.length);",
                "+    Arrays.stream(users).forEach(u -> {",
                "+      indexedUsers.add(u.getSpecificId());",
                "+      if (shouldFallbackUserLogins) {",
                "+        indexedUsers.add(u.getLogin());",
                "+      }",
                "+    });",
                "+    return indexedUsers;",
                "   }",
                "@@ -4583,20 +4709,20 @@ class Admin implements Administration {",
                "-  private void updateUserDuringSynchronization(UserDetail distantUD,",
                "-      Collection<UserDetail> updatedUsers, StringBuilder sReport) {",
                "-    String specificId = distantUD.getSpecificId();",
                "+  private void updateUserDuringSynchronization(final SyncOfUsersContext context,",
                "+      final UserDetail distantUD) {",
                "+    final String specificId = distantUD.getSpecificId();",
                "     try {",
                "-      String silverpeasId = userManager.updateUser(distantUD);",
                "-      updatedUsers.add(distantUD);",
                "-      String message = USER + distantUD.getDisplayedName() + \" updated (id:\" + silverpeasId",
                "-          + \" / specificId:\" + specificId + \")\";",
                "+      final String silverpeasId = userManager.updateUser(distantUD, false);",
                "+      context.getUpdatedUsers().put(silverpeasId, distantUD);",
                "+      final String message = format(\"{0} {1} updated (id:{2} / specificId:{3})\", USER,",
                "+          distantUD.getDisplayedName(), silverpeasId, specificId);",
                "       SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "-      sReport.append(message).append(\"\\n\");",
                "+      context.appendToReport(message).appendToReport(\"\\n\");",
                "     } catch (AdminException aeMaj) {",
                "-      SilverLogger.getLogger(this).error(\"Full synchro: error while updating user \" + specificId,",
                "-          aeMaj);",
                "-      String errorMessage = \"problem updating user \" + distantUD.getDisplayedName() + \" (specificId:\"",
                "-          + specificId + \") - \" + aeMaj.getMessage();",
                "-      sReport.append(errorMessage).append(\"\\n\");",
                "+      SilverLogger.getLogger(this)",
                "+          .error(\"Full synchro: error while updating user \" + specificId, aeMaj);",
                "+      final String errorMessage = format(\"problem updating user {0} (specificId:{1}) - {2}\",",
                "+          distantUD.getDisplayedName(), specificId, aeMaj.getMessage());",
                "+      context.appendToReport(errorMessage).appendToReport(\"\\n\");",
                "       SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, errorMessage);",
                "-      sReport.append(\"user hasn't been updated\\n\");",
                "+      context.appendToReport(\"user hasn't been updated\\n\");",
                "     }",
                "@@ -4604,19 +4730,19 @@ class Admin implements Administration {",
                "-  private void addUserDuringSynchronization(UserDetail distantUD, Collection<UserDetail> addedUsers,",
                "-      StringBuilder sReport) {",
                "-    String specificId = distantUD.getSpecificId();",
                "+  private void addUserDuringSynchronization(final SyncOfUsersContext context,",
                "+      final UserDetail distantUD) {",
                "+    final String specificId = distantUD.getSpecificId();",
                "     try {",
                "-      String silverpeasId = userManager.addUser(distantUD, true);",
                "+      final String silverpeasId = userManager.addUser(distantUD, true, false);",
                "       if (silverpeasId.equals(\"\")) {",
                "-        String message = \"problem adding user \" + distantUD.getDisplayedName() + \"(specificId:\"",
                "-            + specificId + \") - Login and LastName must be set !!!\";",
                "-        sReport.append(message).append(\"\\n\");",
                "+        final String message = format(",
                "+            \"problem adding user {0} (specificId:{1}) - Login and LastName must be set !!!\",",
                "+            distantUD.getDisplayedName(), specificId);",
                "+        context.appendToReport(message).appendToReport(\"\\n\");",
                "         SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "-        sReport.append(\"user has not been added\\n\");",
                "+        context.appendToReport(\"user has not been added\\n\");",
                "       } else {",
                "-",
                "-        addedUsers.add(distantUD);",
                "-        String message = USER + distantUD.getDisplayedName() + \" added (id:\" + silverpeasId",
                "-            + \" / specificId:\" + specificId + \")\";",
                "-        sReport.append(message).append(\"\\n\");",
                "+        context.getAddedUsers().put(silverpeasId, distantUD);",
                "+        final String message = format(\"{0} {1} added (id:{2} / specificId:{3})\", USER,",
                "+            distantUD.getDisplayedName(), silverpeasId, specificId);",
                "+        context.appendToReport(message).appendToReport(\"\\n\");",
                "         SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "@@ -4625,7 +4751,29 @@ class Admin implements Administration {",
                "       SilverLogger.getLogger(this).error(\"Full synchro: error while adding user \" + specificId, ae);",
                "-      String message = \"problem adding user \" + distantUD.getDisplayedName() + \"(specificId:\"",
                "-          + specificId + \") - \" + ae.getMessage();",
                "+      final String message = format(\"problem adding user {0}(specificId:{1}) - {2}\",",
                "+          distantUD.getDisplayedName(), specificId, ae.getMessage());",
                "+      SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "+      context.appendToReport(message).appendToReport(\"\\n\");",
                "+      context.appendToReport(\"user has not been added\\n\");",
                "+    }",
                "+  }",
                "+",
                "+  private void removeUserDuringSynchronization(final SyncOfUsersContext context,",
                "+      final UserDetail silverpeasUD) {",
                "+    final String specificId = silverpeasUD.getSpecificId();",
                "+    try {",
                "+      userManager.removeUser(silverpeasUD, false);",
                "+      silverpeasUD.setState(UserState.REMOVED);",
                "+      context.getRemovedUsers().put(silverpeasUD.getId(), silverpeasUD);",
                "+      final String message = format(\"{0} {1} removed (id:{2} / specificId:{3})\", USER,",
                "+          silverpeasUD.getDisplayedName(), silverpeasUD.getId(), specificId);",
                "+      context.appendToReport(message).appendToReport(\"\\n\");",
                "+      SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "+    } catch (AdminException aeDel) {",
                "+      SilverLogger.getLogger(this)",
                "+          .error(\"Full synchro: error while removing user \" + specificId, aeDel);",
                "+      final String message = format(\"problem removing user {0} (specificId:{1}) - {2}\",",
                "+          silverpeasUD.getDisplayedName(), specificId, aeDel.getMessage());",
                "+      context.appendToReport(message).appendToReport(\"\\n\");",
                "       SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "-      sReport.append(message).append(\"\\n\");",
                "-      sReport.append(\"user has not been added\\n\");",
                "+      context.appendToReport(\"user has not been removed\\n\");",
                "     }",
                "@@ -4633,20 +4781,58 @@ class Admin implements Administration {",
                "-  private void deleteUserDuringSynchronization(UserDetail silverpeasUD,",
                "-      Collection<UserDetail> deletedUsers, StringBuilder sReport) {",
                "-    String specificId = silverpeasUD.getSpecificId();",
                "+  private void restoreUserDuringSynchronization(final SyncOfUsersContext context,",
                "+      final UserDetail distantUD, final UserDetail silverpeasUD) {",
                "+    final String specificId = silverpeasUD.getSpecificId();",
                "     try {",
                "-      userManager.deleteUser(silverpeasUD, true);",
                "-      deletedUsers.add(silverpeasUD);",
                "-      String message = USER + silverpeasUD.getDisplayedName() + \" deleted (id:\" + specificId",
                "-          + \")\";",
                "-      sReport.append(message).append(\"\\n\");",
                "+      userManager.restoreUser(silverpeasUD, false);",
                "+      silverpeasUD.setState(UserState.VALID);",
                "+      if (mergeDistantUserIntoSilverpeasUser(distantUD, silverpeasUD)) {",
                "+        userManager.updateUser(silverpeasUD, false);",
                "+      }",
                "+      context.getRestoredUsers().put(silverpeasUD.getId(), silverpeasUD);",
                "+      final String message = format(\"{0} {1} restored (id:{2} / specificId:{3})\", USER,",
                "+          silverpeasUD.getDisplayedName(), silverpeasUD.getId(), specificId);",
                "+      context.appendToReport(message).appendToReport(\"\\n\");",
                "       SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "     } catch (AdminException aeDel) {",
                "-      SilverLogger.getLogger(this).error(\"Full synchro: error while deleting user \" + specificId,",
                "-          aeDel);",
                "-      String message = \"problem deleting user \" + silverpeasUD.getDisplayedName() + \" (specificId:\"",
                "-          + specificId + \") - \" + aeDel.getMessage();",
                "-      sReport.append(message).append(\"\\n\");",
                "+      SilverLogger.getLogger(this)",
                "+          .error(\"Full synchro: error while restoring user \" + specificId, aeDel);",
                "+      final String message = format(\"problem restoring user {0} (specificId:{1}) - {2}\",",
                "+          silverpeasUD.getDisplayedName(), specificId, aeDel.getMessage());",
                "+      context.appendToReport(message).appendToReport(\"\\n\");",
                "+      SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "+      context.appendToReport(\"user has not been restored\\n\");",
                "+    }",
                "+  }",
                "+",
                "+  private void deleteRemovedUserDuringSynchronization(final SyncOfUsersContext context,",
                "+      final UserDetail distantUD, final Map<String, UserDetail> indexedSpUsers) {",
                "+    final String login = distantUD.getLogin();",
                "+    try {",
                "+      if (!shouldFallbackUserLogins) {",
                "+        final UserDetail silverpeasUser = indexedSpUsers.get(login);",
                "+        if (silverpeasUser != null) {",
                "+          if (!distantUD.getSpecificId().equals(silverpeasUser.getSpecificId()) &&",
                "+              silverpeasUser.isRemovedState()) {",
                "+            userManager.deleteUser(silverpeasUser, true);",
                "+            context.getDeletedUsers().put(silverpeasUser.getId(), silverpeasUser);",
                "+            final String message = format(\"{0} {1} deleted (id:{2} / login:{3})\", USER,",
                "+                distantUD.getDisplayedName(), distantUD.getId(), login);",
                "+            context.appendToReport(message).appendToReport(\"\\n\");",
                "+            SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "+          } else {",
                "+            final String message = format(",
                "+                \"{0} {1} must have 'REMOVED' state for deletion (id:{2} / login:{3})\", USER,",
                "+                distantUD.getDisplayedName(), distantUD.getId(), login);",
                "+            throw new AdminException(message);",
                "+          }",
                "+        }",
                "+      }",
                "+    } catch (AdminException aeDel) {",
                "+      SilverLogger.getLogger(this)",
                "+          .error(\"Full synchro: error while deleting user with login \" + login, aeDel);",
                "+      final String message = format(\"problem deleting user {0} (domainId:{1}, login:{2}) - {3}\",",
                "+          distantUD.getDisplayedName(), context.getDomainId(), login, aeDel.getMessage());",
                "+      context.appendToReport(message).appendToReport(\"\\n\");",
                "       SynchroDomainReport.warn(ADMIN_SYNCHRONIZE_USERS, message);",
                "-      sReport.append(\"user has not been deleted\\n\");",
                "+      context.appendToReport(\"user has not been deleted\\n\");",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/service/AdminController.java b/core-library/src/main/java/org/silverpeas/core/admin/service/AdminController.java",
                "index fe093454d6..7f1d8c6dca 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/service/AdminController.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/service/AdminController.java",
                "@@ -1213,5 +1213,24 @@ public class AdminController implements java.io.Serializable {",
                "+  /** Restores the given user */",
                "+  public String restoreUser(String sUserId) {",
                "+    try {",
                "+      return admin.restoreUser(sUserId);",
                "+    } catch (Exception e) {",
                "+      SilverLogger.getLogger(this).error(e.getLocalizedMessage(), e);",
                "+      return \"\";",
                "+    }",
                "+  }",
                "+",
                "+  /** Removes the given user */",
                "+  public String removeUser(String sUserId) {",
                "+    try {",
                "+      return admin.removeUser(sUserId);",
                "+    } catch (Exception e) {",
                "+      SilverLogger.getLogger(this).error(e.getLocalizedMessage(), e);",
                "+      return \"\";",
                "+    }",
                "+  }",
                "+",
                "   /** Update the given user */",
                "   public String updateUser(UserDetail userDetail) {",
                "-",
                "     try {",
                "@@ -1535,2 +1554,6 @@ public class AdminController implements java.io.Serializable {",
                "+  public List<UserDetail> getRemovedUsersInDomain(final String domainId) throws AdminException {",
                "+    return admin.getRemovedUsers(domainId);",
                "+  }",
                "+",
                "   public List<UserDetail> getDeletedUsersInDomain(final String domainId) throws AdminException {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/service/Administration.java b/core-library/src/main/java/org/silverpeas/core/admin/service/Administration.java",
                "index 37ec2ece9c..8281b9fd38 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/service/Administration.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/service/Administration.java",
                "@@ -679,2 +679,12 @@ public interface Administration {",
                "+  /**",
                "+   * Restores the given user from silverpeas and specific domain",
                "+   */",
                "+  String restoreUser(String sUserId) throws AdminException;",
                "+",
                "+  /**",
                "+   * Removes the given user from silverpeas and specific domain",
                "+   */",
                "+  String removeUser(String sUserId) throws AdminException;",
                "+",
                "   /**",
                "@@ -1266,2 +1276,10 @@ public interface Administration {",
                "+  /**",
                "+   * Gets all the users that were removed in the specified domains.",
                "+   * If no domains are specified, then all the domains are taken into account.",
                "+   * @param domainIds the unique identifiers of the domains.",
                "+   * @return a list of users or an empty list if there is no removed users in the specified domains.",
                "+   */",
                "+  List<UserDetail> getRemovedUsers(String ... domainIds) throws AdminException;",
                "+",
                "   /**",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/service/DeleteRemovedUsersScheduler.java b/core-library/src/main/java/org/silverpeas/core/admin/service/DeleteRemovedUsersScheduler.java",
                "new file mode 100644",
                "index 0000000000..527909606b",
                "--- /dev/null",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/service/DeleteRemovedUsersScheduler.java",
                "@@ -0,0 +1,88 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+package org.silverpeas.core.admin.service;",
                "+",
                "+import org.silverpeas.core.admin.domain.model.Domain;",
                "+import org.silverpeas.core.admin.user.model.User;",
                "+import org.silverpeas.core.initialization.Initialization;",
                "+import org.silverpeas.core.scheduler.Job;",
                "+import org.silverpeas.core.scheduler.JobExecutionContext;",
                "+import org.silverpeas.core.scheduler.Scheduler;",
                "+import org.silverpeas.core.scheduler.SchedulerProvider;",
                "+import org.silverpeas.core.scheduler.trigger.JobTrigger;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "+",
                "+import java.time.LocalDate;",
                "+",
                "+import static org.silverpeas.core.admin.AdminSettings.*;",
                "+import static org.silverpeas.core.admin.service.OrganizationControllerProvider.getOrganisationController;",
                "+import static org.silverpeas.core.util.DateUtil.toLocalDate;",
                "+",
                "+/**",
                "+ * Batch in charge of the deletion of removed users.",
                "+ * @author silveryocha",
                "+ */",
                "+public class DeleteRemovedUsersScheduler implements Initialization {",
                "+",
                "+  protected static final String JOB_NAME = \"DeleteRemovedUsersJob\";",
                "+",
                "+  @Override",
                "+  public void init() throws Exception {",
                "+    if (isAutomaticDeletionOfRemovedUsersEnabled()) {",
                "+      final Scheduler scheduler = SchedulerProvider.getVolatileScheduler();",
                "+      scheduler.unscheduleJob(JOB_NAME);",
                "+      scheduler.scheduleJob(new DeleteRemovedUsersJob(),",
                "+          JobTrigger.triggerAt(getDeletionOfRemovedUsersCron()));",
                "+    }",
                "+  }",
                "+",
                "+  private class DeleteRemovedUsersJob extends Job {",
                "+",
                "+    DeleteRemovedUsersJob() {",
                "+      super(JOB_NAME);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void execute(final JobExecutionContext context) {",
                "+      if (isAutomaticDeletionOfRemovedUsersEnabled()) {",
                "+        final Administration administration = Administration.get();",
                "+        for (final Domain domain : getOrganisationController().getAllDomains()) {",
                "+          try {",
                "+            for (final User user : administration.getRemovedUsers(domain.getId())) {",
                "+              final LocalDate stateSaveDayDateWithDelay = toLocalDate(user.getStateSaveDate())",
                "+                  .plusDays(getDeletionOfRemovedUsersDayDelay());",
                "+              final LocalDate now = LocalDate.now();",
                "+              if (stateSaveDayDateWithDelay.isBefore(now) ||",
                "+                  stateSaveDayDateWithDelay.isEqual(now)) {",
                "+                administration.deleteUser(user.getId());",
                "+              }",
                "+            }",
                "+          } catch (Exception e) {",
                "+            SilverLogger.getLogger(this).error(e.getMessage(), e);",
                "+          }",
                "+        }",
                "+      }",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/service/GroupSynchronizationRule.java b/core-library/src/main/java/org/silverpeas/core/admin/service/GroupSynchronizationRule.java",
                "index 62eea55fe0..bc5c86d003 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/service/GroupSynchronizationRule.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/service/GroupSynchronizationRule.java",
                "@@ -383,2 +383,6 @@ class GroupSynchronizationRule {",
                "           String userId = record.getId();",
                "+          final User user = User.getById(userId);",
                "+          if (user == null || user.isRemovedState()) {",
                "+            continue;",
                "+          }",
                "           if (isSharedDomain) {",
                "@@ -386,4 +390,3 @@ class GroupSynchronizationRule {",
                "           } else {",
                "-            User user = User.getById(userId);",
                "-            if (user != null && user.getDomainId().equals(group.getDomainId())) {",
                "+            if (user.getDomainId().equals(group.getDomainId())) {",
                "               userIds.add(userId);",
                "@@ -452,3 +455,6 @@ class GroupSynchronizationRule {",
                "-    return usersInDomain.stream().map(UserDetail::getId).collect(Collectors.toList());",
                "+    return usersInDomain.stream()",
                "+        .filter(u -> !u.isRemovedState())",
                "+        .map(UserDetail::getId)",
                "+        .collect(Collectors.toList());",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/service/SyncOfUsersContext.java b/core-library/src/main/java/org/silverpeas/core/admin/service/SyncOfUsersContext.java",
                "new file mode 100644",
                "index 0000000000..41369a8aa1",
                "--- /dev/null",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/service/SyncOfUsersContext.java",
                "@@ -0,0 +1,106 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+",
                "+package org.silverpeas.core.admin.service;",
                "+",
                "+import org.silverpeas.core.admin.user.model.UserDetail;",
                "+import org.silverpeas.core.backgroundprocess.AbstractBackgroundProcessRequest;",
                "+",
                "+import java.util.LinkedHashMap;",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * @author silveryocha",
                "+ */",
                "+class SyncOfUsersContext {",
                "+  private final String domainId;",
                "+  private final boolean threaded;",
                "+  private final boolean addUserIntoSilverpeas;",
                "+  private final boolean delUsersOnDiffSync;",
                "+  private final StringBuilder report = new StringBuilder(5000);",
                "+  private final Map<String, UserDetail> addedUsers = new LinkedHashMap<>();",
                "+  private final Map<String, UserDetail> updatedUsers = new LinkedHashMap<>();",
                "+  private final Map<String, UserDetail> removedUsers = new LinkedHashMap<>();",
                "+  private final Map<String, UserDetail> restoredUsers = new LinkedHashMap<>();",
                "+  private final Map<String, UserDetail> deletedUsers = new LinkedHashMap<>();",
                "+  private AbstractBackgroundProcessRequest indexationBackgroundProcess;",
                "+",
                "+  SyncOfUsersContext(final String domainId, final boolean threaded,",
                "+      final boolean addUserIntoSilverpeas, final boolean delUsersOnDiffSync) {",
                "+    this.domainId = domainId;",
                "+    this.threaded = threaded;",
                "+    this.addUserIntoSilverpeas = addUserIntoSilverpeas;",
                "+    this.delUsersOnDiffSync = delUsersOnDiffSync;",
                "+  }",
                "+",
                "+  boolean isRemoveOperationToPerform() {",
                "+    return !threaded || delUsersOnDiffSync;",
                "+  }",
                "+",
                "+  boolean isAddOperationToPerform() {",
                "+    return addUserIntoSilverpeas;",
                "+  }",
                "+",
                "+  SyncOfUsersContext appendToReport(final String reportPart) {",
                "+    report.append(reportPart);",
                "+    return this;",
                "+  }",
                "+",
                "+  String getDomainId() {",
                "+    return domainId;",
                "+  }",
                "+",
                "+  String getReport() {",
                "+    return report.toString();",
                "+  }",
                "+",
                "+  Map<String, UserDetail> getAddedUsers() {",
                "+    return addedUsers;",
                "+  }",
                "+",
                "+  Map<String, UserDetail> getUpdatedUsers() {",
                "+    return updatedUsers;",
                "+  }",
                "+",
                "+  Map<String, UserDetail> getRemovedUsers() {",
                "+    return removedUsers;",
                "+  }",
                "+",
                "+  Map<String, UserDetail> getRestoredUsers() {",
                "+    return restoredUsers;",
                "+  }",
                "+",
                "+  Map<String, UserDetail> getDeletedUsers() {",
                "+    return deletedUsers;",
                "+  }",
                "+",
                "+  AbstractBackgroundProcessRequest getIndexationBackgroundProcess() {",
                "+    return indexationBackgroundProcess;",
                "+  }",
                "+",
                "+  void setIndexationBackgroundProcess(",
                "+      final AbstractBackgroundProcessRequest indexationBackgroundProcess) {",
                "+    this.indexationBackgroundProcess = indexationBackgroundProcess;",
                "+  }",
                "+}",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/user/GroupManager.java b/core-library/src/main/java/org/silverpeas/core/admin/user/GroupManager.java",
                "index a092542e52..6c365b0266 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/user/GroupManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/user/GroupManager.java",
                "@@ -512,3 +512,3 @@ public class GroupManager {",
                "       SynchroDomainReport.info(GROUP_MANAGER_GET_GROUPS_OF_DOMAIN,",
                "-              \"Recherche des groupes du domaine LDAP dans la base...\");",
                "+              \"Recherche des groupes du domaine dans la base...\");",
                "       // Get groups of domain from Silverpeas database",
                "@@ -525,3 +525,3 @@ public class GroupManager {",
                "       SynchroDomainReport.info(GROUP_MANAGER_GET_GROUPS_OF_DOMAIN,",
                "-          \"R\u00c3\u00a9cup\u00c3\u00a9ration de \" + grs.size() + \" groupes du domaine LDAP dans la base\");",
                "+          \"R\u00c3\u00a9cup\u00c3\u00a9ration de \" + grs.size() + \" groupes du domaine dans la base\");",
                "       return groups;",
                "@@ -688,8 +688,3 @@ public class GroupManager {",
                "     // remove from the group any user.",
                "-    List<String> userIds;",
                "-    try {",
                "-      userIds = UserManager.get().getDirectUserIdsInGroup(group.getId());",
                "-    } catch (AdminException e) {",
                "-      throw new SQLException(e);",
                "-    }",
                "+    final List<String> userIds = userDao.getDirectUserIdsInGroup(connection, group.getId(), true);",
                "     for (String userId : userIds) {",
                "@@ -751,3 +746,3 @@ public class GroupManager {",
                "-      List<String> asOldUsersId = userDao.getDirectUserIdsInGroup(connection, sGroupId);",
                "+      List<String> asOldUsersId = userDao.getDirectUserIdsInGroup(connection, sGroupId, false);",
                "@@ -858,4 +853,4 @@ public class GroupManager {",
                "       throws SQLException {",
                "-    List<String> userIds = userDao.getDirectUserIdsInGroup(connection, group.getId());",
                "-    group.setUserIds(userIds.toArray(new String[userIds.size()]));",
                "+    final List<String> userIds = userDao.getDirectUserIdsInGroup(connection, group.getId(), false);",
                "+    group.setUserIds(userIds.toArray(new String[0]));",
                "     return group;",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/user/UserManager.java b/core-library/src/main/java/org/silverpeas/core/admin/user/UserManager.java",
                "index a4fd224f7e..fe0762e94f 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/user/UserManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/user/UserManager.java",
                "@@ -76,4 +76,7 @@ public class UserManager {",
                "   private static final String SPECIFIC_ID = \"(specificId:\";",
                "+  private static final String USER_TABLE_RESTORE_USER = \"UserTable.restoreUser()\";",
                "   private static final String USER_TABLE_REMOVE_USER = \"UserTable.removeUser()\";",
                "+  private static final String AWAITING_DELETION_MESSAGE = \"En attente de suppression de \";",
                "   private static final String REMOVING_MESSAGE = \"Suppression de \";",
                "+  private static final String ID_PART = \" (ID=\";",
                "@@ -138,5 +141,4 @@ public class UserManager {",
                "     try (Connection connection = DBUtil.openConnection()) {",
                "-      return userDAO.getUserCountByCriteria(connection, UserSearchCriteriaForDAO.newCriteria()",
                "-          .onDomainIds(domainId)",
                "-          .onUserStatesToExclude(UserState.DELETED));",
                "+      return userDAO.getUserCountByCriteria(connection,",
                "+          UserSearchCriteriaForDAO.newCriteria().onDomainIds(domainId));",
                "     } catch (Exception e) {",
                "@@ -153,4 +155,3 @@ public class UserManager {",
                "     try (Connection connection = DBUtil.openConnection()) {",
                "-      return userDAO.getUserCountByCriteria(connection,",
                "-          UserSearchCriteriaForDAO.newCriteria().onUserStatesToExclude(UserState.DELETED));",
                "+      return userDAO.getUserCountByCriteria(connection, UserSearchCriteriaForDAO.newCriteria());",
                "     } catch (Exception e) {",
                "@@ -196,18 +197,2 @@ public class UserManager {",
                "-  /**",
                "-   * Gets the identifier of the users that are directly in the specified group. The users that are",
                "-   * in the sub groups of the given group aren't taken into account; to take also such users, then",
                "-   * use the method {@link UserManager#getAllUserIdsInGroups(List)}.",
                "-   * @param groupId the unique identifier of the group.",
                "-   * @return a list of user identifiers.",
                "-   * @throws AdminException if the getting of user identifiers fails.",
                "-   */",
                "-  public List<String> getDirectUserIdsInGroup(final String groupId) throws AdminException {",
                "-    try(Connection connection = DBUtil.openConnection()) {",
                "-      return userDAO.getDirectUserIdsInGroup(connection, groupId);",
                "-    } catch(Exception e) {",
                "-      throw new AdminException(failureOnGetting(\"direct users in group\", groupId), e);",
                "-    }",
                "-  }",
                "-",
                "   /**",
                "@@ -249,3 +234,3 @@ public class UserManager {",
                "     try(Connection connection = DBUtil.openConnection()) {",
                "-      return userDAO.getDirectUserIdsByGroupUserRole(connection, groupRoleId);",
                "+      return userDAO.getDirectUserIdsByGroupUserRole(connection, groupRoleId, false);",
                "     } catch (Exception e) {",
                "@@ -259,2 +244,3 @@ public class UserManager {",
                "    * @param sDomainId the unique identifier of a domain in Silverpeas.",
                "+   * @param includeRemoved true to include removed users, false otherwise.",
                "    * @return an array with all the users in that domain.",
                "@@ -262,3 +248,4 @@ public class UserManager {",
                "    */",
                "-  public UserDetail[] getAllUsersInDomain(String sDomainId) throws AdminException {",
                "+  public UserDetail[] getAllUsersInDomain(String sDomainId, final boolean includeRemoved)",
                "+      throws AdminException {",
                "     try (Connection connection = DBUtil.openConnection()) {",
                "@@ -266,4 +253,7 @@ public class UserManager {",
                "       SynchroDomainReport.info(USERMANAGER_SYNCHRO_REPORT + usersOfDomain,",
                "-          \"Recherche des utilisateurs du domaine LDAP (domaine \" + sDomainId + \") dans la base...\");",
                "+          \"Recherche des utilisateurs du domaine (domaine \" + sDomainId + \") dans la base...\");",
                "       // Get users of domain from Silverpeas database",
                "+      final UserState[] userStatesToExclude = includeRemoved",
                "+          ? new UserState[]{UserState.DELETED}",
                "+          : new UserState[]{UserState.REMOVED, UserState.DELETED};",
                "       ListSlice<UserDetail> users = userDAO.getUsersByCriteria(connection,",
                "@@ -271,3 +261,3 @@ public class UserManager {",
                "               .onDomainIds(sDomainId)",
                "-              .onUserStatesToExclude(UserState.DELETED));",
                "+              .onUserStatesToExclude(userStatesToExclude));",
                "@@ -282,3 +272,3 @@ public class UserManager {",
                "       SynchroDomainReport.info(USERMANAGER_SYNCHRO_REPORT + usersOfDomain,",
                "-          \"R\u00c3\u00a9cup\u00c3\u00a9ration de \" + users.size() + \" utilisateurs du domaine LDAP dans la base\");",
                "+          \"R\u00c3\u00a9cup\u00c3\u00a9ration de \" + users.size() + \" utilisateurs du domaine dans la base\");",
                "       return usersInDomain;",
                "@@ -504,3 +494,3 @@ public class UserManager {",
                "       // update user",
                "-      updateUser(userFull);",
                "+      updateUser(userFull, true);",
                "     } catch (Exception e) {",
                "@@ -516,2 +506,3 @@ public class UserManager {",
                "    * will be also registered into the domain the user has to belong to.",
                "+   * @param indexation true to perform indexation.",
                "    * @return the unique identifier of the added user. This identifier is set by the registering",
                "@@ -520,3 +511,4 @@ public class UserManager {",
                "    */",
                "-  public String addUser(UserDetail userDetail, boolean addOnlyInSilverpeas) throws AdminException {",
                "+  public String addUser(UserDetail userDetail, boolean addOnlyInSilverpeas,",
                "+      final boolean indexation) throws AdminException {",
                "     final String addUser = \".addUser()\";",
                "@@ -565,5 +557,5 @@ public class UserManager {",
                "       notifier.notifyEventOn(ResourceEvent.Type.CREATION, userDetail);",
                "-",
                "-      domainDriverManager.indexUser(userDetail.getId());",
                "-",
                "+      if (indexation) {",
                "+        domainDriverManager.indexUser(userDetail.getId());",
                "+      }",
                "       // X509?",
                "@@ -585,2 +577,58 @@ public class UserManager {",
                "+  /**",
                "+   * Restores the given user in Silverpeas.",
                "+   * @param user the user to restore.",
                "+   * @param indexation true to perform indexation.",
                "+   * @return the unique identifier of the restored user.",
                "+   * @throws AdminException if the restore fails.",
                "+   */",
                "+  public String restoreUser(UserDetail user, final boolean indexation) throws AdminException {",
                "+    final String restoreUser = \".restoreUser()\";",
                "+    try (Connection connection = DBUtil.openConnection()) {",
                "+      SynchroDomainReport",
                "+          .info(USERMANAGER_SYNCHRO_REPORT + restoreUser, \"Restauration de l'utilisateur \" + user.",
                "+              getSpecificId());",
                "+      restoreUser(connection, user);",
                "+      if (indexation) {",
                "+        // Add index of user information",
                "+        domainDriverManager.indexUser(user.getId());",
                "+      }",
                "+      return user.getId();",
                "+    } catch (Exception e) {",
                "+      SynchroDomainReport.error(USERMANAGER_SYNCHRO_REPORT + restoreUser,",
                "+          \"probl\u00c3\u00a8me \u00c3\u00a0 la restauration de l'utilisateur \" + user.getFirstName() + \" \" +",
                "+              user.getLastName() + SPECIFIC_ID + user.getSpecificId() + \") - \" + e.getMessage(),",
                "+          null);",
                "+      throw new AdminException(failureOnRestoring(\"user\", user.getId()), e);",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * Removes the given user in Silverpeas.",
                "+   * @param user the user to remove.",
                "+   * @param indexation true to perform indexation.",
                "+   * @return the unique identifier of the removed user.",
                "+   * @throws AdminException if the remove fails.",
                "+   */",
                "+  public String removeUser(UserDetail user, final boolean indexation) throws AdminException {",
                "+    final String removeUser = \".removeUser()\";",
                "+    try (Connection connection = DBUtil.openConnection()) {",
                "+      SynchroDomainReport.info(USERMANAGER_SYNCHRO_REPORT + removeUser,",
                "+          \"En attente de suppression de l'utilisateur \" + user.",
                "+              getSpecificId() + \" de la base...\");",
                "+      removeUser(connection, user);",
                "+      if (indexation) {",
                "+        // Delete index of user information",
                "+        domainDriverManager.unindexUser(user.getId());",
                "+      }",
                "+      return user.getId();",
                "+    } catch (Exception e) {",
                "+      SynchroDomainReport.error(USERMANAGER_SYNCHRO_REPORT + removeUser,",
                "+          \"probl\u00c3\u00a8me \u00c3\u00a0 la mise en attente de suppression de l'utilisateur \" + user.getFirstName() +",
                "+              \" \" + user.getLastName() + SPECIFIC_ID + user.getSpecificId() + \") - \" +",
                "+              e.getMessage(), null);",
                "+      throw new AdminException(failureOnRemoving(\"user\", user.getId()), e);",
                "+    }",
                "+  }",
                "+",
                "   /**",
                "@@ -657,2 +705,14 @@ public class UserManager {",
                "+  private void restoreUser(final Connection connection, final UserDetail user) throws SQLException {",
                "+    SynchroDomainReport.debug(USER_TABLE_RESTORE_USER,",
                "+        AWAITING_DELETION_MESSAGE + user.getLogin() + ID_PART + user.getId() + \")\");",
                "+    userDAO.restoreUser(connection, user);",
                "+  }",
                "+",
                "+  private void removeUser(final Connection connection, final UserDetail user) throws SQLException {",
                "+    SynchroDomainReport.debug(USER_TABLE_REMOVE_USER,",
                "+        AWAITING_DELETION_MESSAGE + user.getLogin() + ID_PART + user.getId() + \")\");",
                "+    userDAO.removeUser(connection, user);",
                "+  }",
                "+",
                "   private void deleteUser(final Connection connection, final UserDetail user) throws SQLException {",
                "@@ -700,3 +760,3 @@ public class UserManager {",
                "     SynchroDomainReport",
                "-        .debug(USER_TABLE_REMOVE_USER, REMOVING_MESSAGE + userLogin + \" (ID=\" + userId + \")\");",
                "+        .debug(USER_TABLE_REMOVE_USER, REMOVING_MESSAGE + userLogin + ID_PART + userId + \")\");",
                "     userDAO.deleteUser(connection, user);",
                "@@ -719,2 +779,3 @@ public class UserManager {",
                "    * @param user the user to update.",
                "+   * @param indexation true to perform indexation.",
                "    * @return the unique identifier of the user that was updated.",
                "@@ -722,3 +783,3 @@ public class UserManager {",
                "    */",
                "-  public String updateUser(UserDetail user) throws AdminException {",
                "+  public String updateUser(UserDetail user, final boolean indexation) throws AdminException {",
                "     try(Connection connection = DBUtil.openConnection()) {",
                "@@ -730,3 +791,5 @@ public class UserManager {",
                "       // index user information",
                "-      domainDriverManager.indexUser(user.getId());",
                "+      if (indexation) {",
                "+        domainDriverManager.indexUser(user.getId());",
                "+      }",
                "       return user.getId();",
                "@@ -813,2 +876,21 @@ public class UserManager {",
                "+  /**",
                "+   * Gets all the removed users in the specified domains. If no domains are given, then all the",
                "+   * removed users in Silverpeas are returned.",
                "+   * @param domainIds zero, one or more unique identifiers of user domains in Silverpeas.",
                "+   * @return a list of the removed users in Silverpeas. If no users are removed in the specified",
                "+   * domains, then an empty list is returned.",
                "+   * @throws AdminException if the removed users cannot be fetched or if an unexpected exception",
                "+   * is thrown.",
                "+   */",
                "+  public List<UserDetail> getRemovedUsersOfDomains(final String... domainIds)",
                "+      throws AdminException {",
                "+    try (Connection connection = DBUtil.openConnection()) {",
                "+      return userDAO.getRemovedUsers(connection, domainIds);",
                "+    } catch (Exception e) {",
                "+      throw new AdminException(",
                "+          failureOnGetting(\"deleted users in domains\", String.join(\", \", domainIds)), e);",
                "+    }",
                "+  }",
                "+",
                "   /**",
                "@@ -822,3 +904,4 @@ public class UserManager {",
                "    */",
                "-  public List<UserDetail> getNonBlankedDeletedUserOfDomains(final String... domainIds) throws AdminException {",
                "+  public List<UserDetail> getNonBlankedDeletedUsersOfDomains(final String... domainIds)",
                "+      throws AdminException {",
                "     try (Connection connection = DBUtil.openConnection()) {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/user/dao/GroupSearchCriteriaForDAO.java b/core-library/src/main/java/org/silverpeas/core/admin/user/dao/GroupSearchCriteriaForDAO.java",
                "index c77f7b9be1..22f2f3af5b 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/user/dao/GroupSearchCriteriaForDAO.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/user/dao/GroupSearchCriteriaForDAO.java",
                "@@ -59,3 +59,3 @@ public class GroupSearchCriteriaForDAO implements SearchCriteria {",
                "   public static GroupSearchCriteriaForDAO newCriteria() {",
                "-    return new GroupSearchCriteriaForDAO(new GroupsSearchCriteria());",
                "+    return newCriteriaFrom(new GroupsSearchCriteria());",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserDAO.java b/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserDAO.java",
                "index fb60bd05d2..0ebd62b449 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserDAO.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserDAO.java",
                "@@ -56,3 +56,2 @@ public class UserDAO {",
                "       + \"state,stateSaveDate, notifManualReceiverLimit\";",
                "-  private static final String STATE_CRITERION_NOT = \"state <> ?\";",
                "   private static final String STATE_CRITERION = \"state = ?\";",
                "@@ -111,2 +110,24 @@ public class UserDAO {",
                "+  public void restoreUser(final Connection connection, final UserDetail user) throws SQLException {",
                "+    Instant now = new Date().toInstant();",
                "+    JdbcSqlQuery.createUpdateFor(USER_TABLE)",
                "+        .addUpdateParam(STATE, UserState.VALID)",
                "+        .addUpdateParam(STATE_SAVE_DATE, now)",
                "+        .addUpdateParam(SAVE_DATE, now)",
                "+        .where(ID_CRITERION, Integer.parseInt(user.getId()))",
                "+        .and(STATE).in(UserState.REMOVED)",
                "+        .executeWith(connection);",
                "+  }",
                "+",
                "+  public void removeUser(final Connection connection, final UserDetail user) throws SQLException {",
                "+    Instant now = new Date().toInstant();",
                "+    JdbcSqlQuery.createUpdateFor(USER_TABLE)",
                "+        .addUpdateParam(STATE, UserState.REMOVED)",
                "+        .addUpdateParam(STATE_SAVE_DATE, now)",
                "+        .addUpdateParam(SAVE_DATE, now)",
                "+        .where(ID_CRITERION, Integer.parseInt(user.getId()))",
                "+        .and(STATE).notIn(UserState.REMOVED, UserState.DELETED)",
                "+        .executeWith(connection);",
                "+  }",
                "+",
                "   public void deleteUser(final Connection connection, final UserDetail user) throws SQLException {",
                "@@ -141,3 +162,4 @@ public class UserDAO {",
                "         .from(USER_TABLE)",
                "-        .where(ID_CRITERION, Integer.parseInt(id)).and(STATE_CRITERION_NOT, UserState.DELETED)",
                "+        .where(ID_CRITERION, Integer.parseInt(id))",
                "+        .and(STATE).notIn(UserState.DELETED)",
                "         .executeUniqueWith(connection, row -> row.getInt(1)) == 1;",
                "@@ -163,2 +185,25 @@ public class UserDAO {",
                "+  /**",
                "+   * Gets all the users that were removed in the specified domains.",
                "+   * @param connection a connection to the data source.",
                "+   * @param domainIds zero, one or more unique identifiers of Silverpeas domains. If no domains",
                "+   * are passed, then all the domains are taken by the request.",
                "+   * @return a list of user details.",
                "+   * @throws SQLException if an error while requesting the users.",
                "+   */",
                "+  public List<UserDetail> getRemovedUsers(final Connection connection, final String... domainIds)",
                "+      throws SQLException {",
                "+    Objects.requireNonNull(connection);",
                "+    Objects.requireNonNull(domainIds);",
                "+    final JdbcSqlQuery query = JdbcSqlQuery.createSelect(USER_COLUMNS)",
                "+        .from(USER_TABLE)",
                "+        .where(STATE_CRITERION, UserState.REMOVED);",
                "+    final List<Integer> requestedDomainIds =",
                "+        Stream.of(domainIds).map(Integer::parseInt).collect(Collectors.toList());",
                "+    if (!requestedDomainIds.isEmpty()) {",
                "+      query.and(DOMAIN_ID).in(requestedDomainIds);",
                "+    }",
                "+    return query.executeWith(connection, UserDAO::fetchUser);",
                "+  }",
                "+",
                "   /**",
                "@@ -175,3 +220,3 @@ public class UserDAO {",
                "     Objects.requireNonNull(domainIds);",
                "-    JdbcSqlQuery query = JdbcSqlQuery.createSelect(USER_COLUMNS)",
                "+    final JdbcSqlQuery query = JdbcSqlQuery.createSelect(USER_COLUMNS)",
                "         .from(USER_TABLE)",
                "@@ -182,3 +227,3 @@ public class UserDAO {",
                "     if (!requestedDomainIds.isEmpty()) {",
                "-      query = query.and(DOMAIN_ID).in(requestedDomainIds);",
                "+      query.and(DOMAIN_ID).in(requestedDomainIds);",
                "     }",
                "@@ -193,3 +238,3 @@ public class UserDAO {",
                "         .and(\"lower(login) = lower(?)\", login)",
                "-        .and(STATE_CRITERION_NOT, UserState.DELETED)",
                "+        .and(STATE).notIn(UserState.DELETED)",
                "         .executeUniqueWith(connection, r -> Integer.toString(r.getInt(1)));",
                "@@ -217,3 +262,3 @@ public class UserDAO {",
                "         .from(USER_TABLE)",
                "-        .where(\"state NOT IN ('DELETED', 'UNKNOWN', 'BLOCKED', 'DEACTIVATED', 'EXPIRED')\")",
                "+        .where(STATE).notIn(UserState.DELETED)",
                "         .and(\"login = ?\", login)",
                "@@ -304,3 +349,3 @@ public class UserDAO {",
                "         .where(USER_ID_JOINTURE).and(\"groupid\").in(groupIdsAsInt)",
                "-        .and(STATE_CRITERION_NOT, UserState.DELETED)",
                "+        .and(STATE).notIn(UserState.REMOVED, UserState.DELETED)",
                "         .orderBy(LAST_NAME)",
                "@@ -311,3 +356,4 @@ public class UserDAO {",
                "     return JdbcSqlQuery.createSelect(\"id\")",
                "-        .from(USER_TABLE).where(STATE_CRITERION_NOT, UserState.DELETED)",
                "+        .from(USER_TABLE)",
                "+        .where(STATE).notIn(UserState.REMOVED, UserState.DELETED)",
                "         .orderBy(LAST_NAME)",
                "@@ -320,3 +366,4 @@ public class UserDAO {",
                "         .from(USER_TABLE)",
                "-        .where(STATE_CRITERION_NOT, UserState.DELETED);",
                "+        .where(STATE)",
                "+        .notIn(UserState.REMOVED, UserState.DELETED);",
                "     if (fromUser.isAccessAdmin() || fromUser.isAccessDomainManager()) {",
                "@@ -331,4 +378,8 @@ public class UserDAO {",
                "-  public List<String> getDirectUserIdsInGroup(Connection connection, final String groupId)",
                "+  public List<String> getDirectUserIdsInGroup(Connection connection, final String groupId,",
                "+      final boolean includeRemoved)",
                "       throws SQLException {",
                "+    final Object[] userStatesToExclude = includeRemoved",
                "+        ? new UserState[]{UserState.DELETED}",
                "+        : new UserState[]{UserState.REMOVED, UserState.DELETED};",
                "     return JdbcSqlQuery.createSelect(\"id\")",
                "@@ -336,3 +387,4 @@ public class UserDAO {",
                "         .where(USER_ID_JOINTURE)",
                "-        .and(\"groupId = ?\", Integer.parseInt(groupId)).and(STATE_CRITERION_NOT, UserState.DELETED)",
                "+        .and(\"groupId = ?\", Integer.parseInt(groupId))",
                "+        .and(STATE).notIn(userStatesToExclude)",
                "         .orderBy(LAST_NAME)",
                "@@ -348,3 +400,3 @@ public class UserDAO {",
                "         .where(USER_ID_JOINTURE).and(\"groupid\").in(groupIdsAsInt)",
                "-        .and(STATE_CRITERION_NOT, UserState.DELETED)",
                "+        .and(STATE).notIn(UserState.REMOVED, UserState.DELETED)",
                "         .orderBy(LAST_NAME)",
                "@@ -356,3 +408,4 @@ public class UserDAO {",
                "     return JdbcSqlQuery.createSelect(\"id\")",
                "-        .from(USER_TABLE).where(STATE_CRITERION_NOT, UserState.DELETED)",
                "+        .from(USER_TABLE)",
                "+        .where(STATE).notIn(UserState.REMOVED, UserState.DELETED)",
                "         .and(DOMAIN_ID_CRITERION, Integer.parseInt(domainId))",
                "@@ -365,3 +418,4 @@ public class UserDAO {",
                "     return JdbcSqlQuery.createSelect(\"id\")",
                "-        .from(USER_TABLE).where(STATE_CRITERION_NOT, UserState.DELETED)",
                "+        .from(USER_TABLE)",
                "+        .where(STATE).notIn(UserState.REMOVED, UserState.DELETED)",
                "         .and(ACCESS_LEVEL_CRITERION, accessLevel.code())",
                "@@ -374,3 +428,4 @@ public class UserDAO {",
                "     return JdbcSqlQuery.createSelect(\"id\")",
                "-        .from(USER_TABLE).where(STATE_CRITERION_NOT, UserState.DELETED)",
                "+        .from(USER_TABLE)",
                "+        .where(STATE).notIn(UserState.REMOVED, UserState.DELETED)",
                "         .and(DOMAIN_ID_CRITERION, Integer.parseInt(domainId))",
                "@@ -387,3 +442,3 @@ public class UserDAO {",
                "         .and(\"userRoleId = ?\", Integer.parseInt(userRoleId))",
                "-        .and(STATE_CRITERION_NOT, UserState.DELETED)",
                "+        .and(STATE).notIn(UserState.REMOVED, UserState.DELETED)",
                "         .orderBy(LAST_NAME)",
                "@@ -404,3 +459,3 @@ public class UserDAO {",
                "         .and(\"spaceUserRoleId = ?\", Integer.parseInt(spaceUserRoleId))",
                "-        .and(STATE_CRITERION_NOT, UserState.DELETED)",
                "+        .and(STATE).notIn(UserState.REMOVED, UserState.DELETED)",
                "         .orderBy(LAST_NAME)",
                "@@ -410,3 +465,6 @@ public class UserDAO {",
                "   public List<String> getDirectUserIdsByGroupUserRole(final Connection connection,",
                "-      final String groupUserRoleId) throws SQLException {",
                "+      final String groupUserRoleId, final boolean includeRemoved) throws SQLException {",
                "+    final Object[] userStatesToExclude = includeRemoved",
                "+        ? new UserState[]{UserState.DELETED}",
                "+        : new UserState[]{UserState.REMOVED, UserState.DELETED};",
                "     return JdbcSqlQuery.createSelect(\"id\")",
                "@@ -415,3 +473,3 @@ public class UserDAO {",
                "         .and(\"groupUserRoleId = ?\", Integer.parseInt(groupUserRoleId))",
                "-        .and(STATE_CRITERION_NOT, UserState.DELETED)",
                "+        .and(STATE).notIn(userStatesToExclude)",
                "         .orderBy(LAST_NAME)",
                "@@ -432,3 +490,4 @@ public class UserDAO {",
                "     JdbcSqlQuery query = JdbcSqlQuery.createSelect(USER_COLUMNS)",
                "-        .from(USER_TABLE).where(STATE_CRITERION_NOT, UserState.DELETED);",
                "+        .from(USER_TABLE)",
                "+        .where(STATE).notIn(UserState.REMOVED, UserState.DELETED);",
                "     if (domainIds != null && !domainIds.isEmpty()) {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserSearchCriteriaForDAO.java b/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserSearchCriteriaForDAO.java",
                "index 4d37f90cde..123671ecbc 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserSearchCriteriaForDAO.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserSearchCriteriaForDAO.java",
                "@@ -61,3 +61,5 @@ public class UserSearchCriteriaForDAO implements SearchCriteria {",
                "   public static UserSearchCriteriaForDAO newCriteria() {",
                "-    return new UserSearchCriteriaForDAO(new UserDetailsSearchCriteria());",
                "+    final UserSearchCriteriaForDAO newCriteria = newCriteriaFrom(new UserDetailsSearchCriteria());",
                "+    newCriteria.onUserStatesToExclude(UserState.REMOVED);",
                "+    return newCriteria;",
                "   }",
                "@@ -270,3 +272,3 @@ public class UserSearchCriteriaForDAO implements SearchCriteria {",
                "   private JdbcSqlQuery prepareJdbcSqlQuery(final String fields) {",
                "-    List<UserState> userStatesToExclude = new ArrayList<>();",
                "+    final Set<UserState> userStatesToExclude = new HashSet<>();",
                "     if (criteria.isCriterionOnUserStatesToExcludeSet()) {",
                "@@ -275,5 +277,4 @@ public class UserSearchCriteriaForDAO implements SearchCriteria {",
                "     userStatesToExclude.add(UserState.DELETED);",
                "-",
                "     return JdbcSqlQuery.createSelect(fields)",
                "-        .from(tables.stream().collect(Collectors.joining(\",\")))",
                "+        .from(String.join(\",\", tables))",
                "         .where(\"st_user.state\").notIn(userStatesToExclude);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/user/model/GroupProfileInstManager.java b/core-library/src/main/java/org/silverpeas/core/admin/user/model/GroupProfileInstManager.java",
                "index d1ffbb0d88..9be363181a 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/user/model/GroupProfileInstManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/user/model/GroupProfileInstManager.java",
                "@@ -140,3 +140,3 @@ public class GroupProfileInstManager {",
                "         // set the users",
                "-        userDAO.getDirectUserIdsByGroupUserRole(connection, profileId)",
                "+        userDAO.getDirectUserIdsByGroupUserRole(connection, profileId, false)",
                "             .forEach(groupProfileInst::addUser);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/user/model/UserDetail.java b/core-library/src/main/java/org/silverpeas/core/admin/user/model/UserDetail.java",
                "index 83fa9b2aed..9f5dc92039 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/user/model/UserDetail.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/user/model/UserDetail.java",
                "@@ -546,4 +546,5 @@ public class UserDetail implements User {",
                "   public boolean isValidState() {",
                "-    return isAnonymous() || (!UserState.UNKNOWN.equals(state) && !isDeletedState()",
                "-        && !isBlockedState() && !isDeactivatedState() && !isExpiredState());",
                "+    return isAnonymous() ||",
                "+        (!UserState.UNKNOWN.equals(state) && !isDeletedState() && !isRemovedState() &&",
                "+            !isBlockedState() && !isDeactivatedState() && !isExpiredState());",
                "   }",
                "@@ -555,2 +556,7 @@ public class UserDetail implements User {",
                "+  @Override",
                "+  public boolean isRemovedState() {",
                "+    return UserState.REMOVED.equals(state);",
                "+  }",
                "+",
                "   @Override",
                "@@ -686,2 +692,3 @@ public class UserDetail implements User {",
                "     } catch (IllegalAccessException|NoSuchMethodException|InvocationTargetException e) {",
                "+      SilverLogger.getLogger(this).silent(e);",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java",
                "index 406da0295c..f8a3734fb6 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java",
                "@@ -42,4 +42,2 @@ import org.silverpeas.core.util.Pair;",
                " import java.time.ZoneId;",
                "-import java.time.format.DateTimeFormatter;",
                "-import java.time.format.FormatStyle;",
                " import java.time.temporal.ChronoUnit;",
                "@@ -47,3 +45,2 @@ import java.time.temporal.Temporal;",
                " import java.util.HashMap;",
                "-import java.util.Locale;",
                " import java.util.Map;",
                "@@ -53,2 +50,3 @@ import static org.silverpeas.core.date.TemporalConverter.asLocalDate;",
                " import static org.silverpeas.core.date.TemporalFormatter.toLocalized;",
                "+import static org.silverpeas.core.date.TemporalFormatter.toLocalizedTime;",
                "@@ -322,5 +320,15 @@ public abstract class AbstractTemplateUserNotificationBuilder<T> extends",
                "       if (isTimeExisting()) {",
                "-        hour = DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT)",
                "-            .withLocale(Locale.forLanguageTag(language))",
                "-            .format(temporal);",
                "+        hour = toLocalizedTime(temporal, language);",
                "+      }",
                "+      return hour;",
                "+    }",
                "+",
                "+    /**",
                "+     * Gets the time data if the temporal supports such a chronology unit.",
                "+     * @return a string.",
                "+     */",
                "+    public String getZonedDayTime() {",
                "+      String hour = \"\";",
                "+      if (isTimeExisting()) {",
                "+        hour = toLocalizedTime(temporal, zoneIdReference, language);",
                "       }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/security/authentication/AuthenticationService.java b/core-library/src/main/java/org/silverpeas/core/security/authentication/AuthenticationService.java",
                "index efc5c4beb7..05d9a3ddf7 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/security/authentication/AuthenticationService.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/security/authentication/AuthenticationService.java",
                "@@ -268,3 +268,3 @@ public class AuthenticationService {",
                "-      // Authentification test",
                "+      // Authentication test",
                "       authenticationServer.authenticate(credential);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/security/authentication/verifier/UserCanLoginVerifier.java b/core-library/src/main/java/org/silverpeas/core/security/authentication/verifier/UserCanLoginVerifier.java",
                "index 4da22c4c95..b1d33fe330 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/security/authentication/verifier/UserCanLoginVerifier.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/security/authentication/verifier/UserCanLoginVerifier.java",
                "@@ -100,4 +100,4 @@ public class UserCanLoginVerifier extends AbstractAuthenticationVerifier {",
                "     } else if (!isUserStateValid()) {",
                "-      // For now, if user is not valid (BLOCKED, DEACTIVATED, EXPIRED, DELETED, UNKNOWN) he is",
                "-      // considered as BLOCKED.",
                "+      // For now, if user is not valid (BLOCKED, DEACTIVATED, EXPIRED, REMOVED, DELETED, UNKNOWN)",
                "+      // he is considered as BLOCKED.",
                "       if (getUser().isDeactivatedState()) {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/socialnetwork/relationship/RelationShipDao.java b/core-library/src/main/java/org/silverpeas/core/socialnetwork/relationship/RelationShipDao.java",
                "index 32460a8311..02de6c7080 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/socialnetwork/relationship/RelationShipDao.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/socialnetwork/relationship/RelationShipDao.java",
                "@@ -159,3 +159,3 @@ public class RelationShipDao {",
                "     PreparedStatement pstmt = null;",
                "-    List<RelationShip> listMyRelation = new ArrayList<RelationShip>();",
                "+    List<RelationShip> listMyRelation = new ArrayList<>();",
                "     try {",
                "@@ -189,3 +189,3 @@ public class RelationShipDao {",
                "     PreparedStatement pstmt = null;",
                "-    List<SocialInformation> listMyRelation = new ArrayList<SocialInformation>();",
                "+    List<SocialInformation> listMyRelation = new ArrayList<>();",
                "     String query =",
                "@@ -225,3 +225,3 @@ public class RelationShipDao {",
                "     PreparedStatement pstmt = null;",
                "-    List<SocialInformation> listMyRelation = new ArrayList<SocialInformation>();",
                "+    List<SocialInformation> listMyRelation = new ArrayList<>();",
                "     String query =",
                "@@ -278,3 +278,3 @@ public class RelationShipDao {",
                "     PreparedStatement pstmt = null;",
                "-    List<String> myContactsIds = new ArrayList<String>();",
                "+    List<String> myContactsIds = new ArrayList<>();",
                "     try {",
                "@@ -284,3 +284,3 @@ public class RelationShipDao {",
                "           \"and user2Id = st_user.id \" +",
                "-          \"and st_user.state <> 'DELETED'\";",
                "+          \"and st_user.state not in ('DELETED', 'REMOVED')\";",
                "       pstmt = connection.prepareStatement(query);",
                "@@ -295,3 +295,2 @@ public class RelationShipDao {",
                "     return myContactsIds;",
                "-",
                "   }",
                "@@ -302,3 +301,3 @@ public class RelationShipDao {",
                "     PreparedStatement pstmt = null;",
                "-    List<String> myContactsIds = new ArrayList<String>();",
                "+    List<String> myContactsIds = new ArrayList<>();",
                "     try {",
                "@@ -310,3 +309,3 @@ public class RelationShipDao {",
                "                     \"and user2Id = st_user.id \"+",
                "-                    \"and st_user.state <> 'DELETED'\";",
                "+                    \"and st_user.state not in ('DELETED', 'REMOVED')\";",
                "       pstmt = connection.prepareStatement(query);",
                "@@ -322,3 +321,2 @@ public class RelationShipDao {",
                "     return myContactsIds;",
                "-",
                "   }",
                "diff --git a/core-services/chat/src/main/java/org/silverpeas/core/chat/ChatUser.java b/core-services/chat/src/main/java/org/silverpeas/core/chat/ChatUser.java",
                "index 8b87f45f74..ef36b0dca5 100644",
                "--- a/core-services/chat/src/main/java/org/silverpeas/core/chat/ChatUser.java",
                "+++ b/core-services/chat/src/main/java/org/silverpeas/core/chat/ChatUser.java",
                "@@ -261,2 +261,7 @@ public class ChatUser extends UserDetail {",
                "+  @Override",
                "+  public boolean isRemovedState() {",
                "+    return user.isRemovedState();",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java b/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "index 6f29f8e418..2226183f1d 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "@@ -95,11 +95,3 @@ import java.io.StringWriter;",
                " import java.text.MessageFormat;",
                "-import java.util.ArrayList;",
                "-import java.util.Arrays;",
                "-import java.util.Collection;",
                "-import java.util.Collections;",
                "-import java.util.HashMap;",
                "-import java.util.Iterator;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.Properties;",
                "+import java.util.*;",
                "@@ -978,2 +970,21 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "+  public void restoreUser(String idUser) throws JobDomainPeasException {",
                "+    final String restoreUserId = adminCtrl.restoreUser(idUser);",
                "+    if (!StringUtil.isDefined(restoreUserId)) {",
                "+      throw new JobDomainPeasException(failureOnRestoring(\"user\", idUser));",
                "+    }",
                "+    refresh();",
                "+  }",
                "+",
                "+  public void removeUser(String idUser) throws JobDomainPeasException {",
                "+    final String removedUserId = adminCtrl.removeUser(idUser);",
                "+    if (!StringUtil.isDefined(removedUserId)) {",
                "+      throw new JobDomainPeasException(failureOnRemoving(\"user\", idUser));",
                "+    }",
                "+    if (targetUserId.equals(idUser)) {",
                "+      targetUserId = null;",
                "+    }",
                "+    refresh();",
                "+  }",
                "+",
                "   public void deleteUser(String idUser) throws JobDomainPeasException {",
                "@@ -992,5 +1003,5 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "       if (!StringUtil.isDefined(idRet)) {",
                "-        throw new JobDomainPeasException(failureOnUpdate(\"user\", idUser));",
                "+        throw new JobDomainPeasException(failureOnDeleting(\"user\", idUser));",
                "       }",
                "-      if (targetUserId.equals(idUser)) {",
                "+      if (idUser.equals(targetUserId)) {",
                "         targetUserId = null;",
                "@@ -1093,4 +1104,2 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "   public void unsynchroUser(String idUser) throws JobDomainPeasException {",
                "-",
                "-",
                "     String idRet = adminCtrl.synchronizeRemoveUser(idUser);",
                "@@ -1676,3 +1685,2 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "     theNewDomain.setSilverpeasServerURL(domain.getSilverpeasServerURL());",
                "-    theNewDomain.setTheTimeStamp(domain.getTheTimeStamp());",
                "@@ -2314,2 +2322,12 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "+  public List<UserDetail> getRemovedUsers() throws AdminException {",
                "+    final List<UserDetail> removedUsers = adminCtrl.getRemovedUsersInDomain(this.targetDomainId);",
                "+    removedUsers.sort(Comparator",
                "+        .comparing(UserDetail::getStateSaveDate)",
                "+        .thenComparing(UserDetail::getLastName)",
                "+        .thenComparing(UserDetail::getFirstName)",
                "+        .thenComparing(UserDetail::getId));",
                "+    return removedUsers;",
                "+  }",
                "+",
                "   public List<UserDetail> getDeletedUsers() throws AdminException {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "index 462d483380..ff4c61be95 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "@@ -44,2 +44,3 @@ import org.silverpeas.core.util.ServiceProvider;",
                " import org.silverpeas.core.util.SettingBundle;",
                "+import org.silverpeas.core.util.SilverpeasList;",
                " import org.silverpeas.core.util.StringUtil;",
                "@@ -71,10 +72,7 @@ import java.util.StringTokenizer;",
                "+import static java.util.Collections.emptySet;",
                " import static org.silverpeas.core.admin.domain.DomainDriver.ActionConstants.*;",
                " import static org.silverpeas.core.web.token.SynchronizerTokenService.SESSION_TOKEN_KEY;",
                "+import static org.silverpeas.web.jobdomain.servlets.RemovedUserUIEntity.convertRemovedUserList;",
                "-/**",
                "- * Class declaration",
                "- *",
                "- * @author",
                "- */",
                " public class JobDomainPeasRequestRouter extends",
                "@@ -113,2 +111,3 @@ public class JobDomainPeasRequestRouter extends",
                "   private static final String USERS_ATTR = \"Users\";",
                "+  private static final String THE_USER_ATTR = \"theUser\";",
                "   private static final String DOMAIN_NAVIGATION_DEST = \"domainNavigation.jsp\";",
                "@@ -121,11 +120,4 @@ public class JobDomainPeasRequestRouter extends",
                "   private static final String GO_BACK_DEST = \"goBack.jsp\";",
                "+  private static final String DISPLAY_REMOVED_USERS_DEST = \"displayRemovedUsers\";",
                "-  /**",
                "-   * Method declaration",
                "-   *",
                "-   * @param mainSessionCtrl",
                "-   * @param componentContext",
                "-   * @return",
                "-   *",
                "-   */",
                "   @Override",
                "@@ -151,3 +143,3 @@ public class JobDomainPeasRequestRouter extends",
                "    * @param jobDomainSC The component Session Control, build and initialised.",
                "-   * @param request",
                "+   * @param request the current request.",
                "    * @return The complete destination URL for a forward (ex :",
                "@@ -185,10 +177,4 @@ public class JobDomainPeasRequestRouter extends",
                "       if (\"blankUsers\".equals(function)) {",
                "-        final Enumeration<String> paramNames = request.getParameterNames();",
                "         final List<String> userIds = new ArrayList<>();",
                "-        while(paramNames.hasMoreElements()) {",
                "-          final String paramName = paramNames.nextElement();",
                "-          if (paramName.startsWith(\"blank_\")) {",
                "-            userIds.add(request.getParameter(paramName));",
                "-          }",
                "-        }",
                "+        request.mergeSelectedItemsInto(userIds);",
                "         if (!userIds.isEmpty()) {",
                "@@ -211,2 +197,16 @@ public class JobDomainPeasRequestRouter extends",
                "         destination = USER_CONTENT_DEST;",
                "+      } else if (\"restoreUsers\".equals(function)) {",
                "+        final List<String> userIds = new ArrayList<>();",
                "+        request.mergeSelectedItemsInto(userIds);",
                "+        for (final String u : userIds) {",
                "+          jobDomainSC.restoreUser(u);",
                "+        }",
                "+        destination = getDestination(DISPLAY_REMOVED_USERS_DEST, jobDomainSC, request);",
                "+      } else if (\"deleteUsers\".equals(function)) {",
                "+        final List<String> userIds = new ArrayList<>();",
                "+        request.mergeSelectedItemsInto(userIds);",
                "+        for (final String u : userIds) {",
                "+          jobDomainSC.deleteUser(u);",
                "+        }",
                "+        destination = getDestination(DISPLAY_REMOVED_USERS_DEST, jobDomainSC, request);",
                "       } else if (function.startsWith(\"user\")) {",
                "@@ -259,2 +259,4 @@ public class JobDomainPeasRequestRouter extends",
                "           jobDomainSC.deleteUser(userId);",
                "+        } else if (function.startsWith(\"userRemove\")) {",
                "+          jobDomainSC.removeUser(userId);",
                "         } else if (function.startsWith(\"userAvatarDelete\")) {",
                "@@ -722,7 +724,13 @@ public class JobDomainPeasRequestRouter extends",
                "           destination = \"dynamicSynchroReport.jsp\";",
                "+        } else if (function.startsWith(DISPLAY_REMOVED_USERS_DEST)) {",
                "+          final SilverpeasList<UserDetail> removedUsers = SilverpeasList.wrap(jobDomainSC.getRemovedUsers());",
                "+          request.setAttribute(\"removedUsers\", convertRemovedUserList(removedUsers, emptySet()));",
                "+          request.setAttribute(\"domain\", jobDomainSC.getTargetDomain());",
                "+          request.setAttribute(THE_USER_ATTR, jobDomainSC.getUserDetail());",
                "+          destination = \"removedUsers.jsp\";",
                "         } else if (function.startsWith(\"displayDeletedUsers\")) {",
                "-          List<UserDetail> deletedUsers = jobDomainSC.getDeletedUsers();",
                "+          final List<UserDetail> deletedUsers = jobDomainSC.getDeletedUsers();",
                "           request.setAttribute(\"deletedUsers\", deletedUsers);",
                "           request.setAttribute(\"domain\", jobDomainSC.getTargetDomain());",
                "-          request.setAttribute(\"theUser\", jobDomainSC.getUserDetail());",
                "+          request.setAttribute(THE_USER_ATTR, jobDomainSC.getUserDetail());",
                "           destination = \"deletedUsers.jsp\";",
                "@@ -799,3 +807,3 @@ public class JobDomainPeasRequestRouter extends",
                "         long domainRight = jobDomainSC.getDomainActions();",
                "-        request.setAttribute(\"theUser\", jobDomainSC.getUserDetail());",
                "+        request.setAttribute(THE_USER_ATTR, jobDomainSC.getUserDetail());",
                "         request.setAttribute(\"subGroups\", jobDomainSC.getSubGroups(false));",
                "@@ -951,3 +959,2 @@ public class JobDomainPeasRequestRouter extends",
                "     domain.setSilverpeasServerURL(url);",
                "-    domain.setTheTimeStamp(timeStamp);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/RemovedUserUIEntity.java b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/RemovedUserUIEntity.java",
                "new file mode 100644",
                "index 0000000000..6e598a6d63",
                "--- /dev/null",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/RemovedUserUIEntity.java",
                "@@ -0,0 +1,76 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+",
                "+package org.silverpeas.web.jobdomain.servlets;",
                "+",
                "+import org.silverpeas.core.admin.user.model.User;",
                "+import org.silverpeas.core.util.SilverpeasList;",
                "+",
                "+import java.time.LocalDate;",
                "+import java.time.temporal.ChronoUnit;",
                "+import java.util.Set;",
                "+import java.util.function.Function;",
                "+",
                "+import static org.silverpeas.core.admin.AdminSettings.getDeletionOfRemovedUsersDayDelay;",
                "+import static org.silverpeas.core.util.DateUtil.toLocalDate;",
                "+",
                "+/**",
                "+ * UI item for a {@link User} instance which {@link User#isRemovedState()} returns true.",
                "+ */",
                "+public class RemovedUserUIEntity extends UserUIEntity {",
                "+",
                "+  private RemovedUserUIEntity(final User data, final Set<String> selectedIds) {",
                "+    super(data, selectedIds);",
                "+  }",
                "+",
                "+  /**",
                "+   * Converts the given data list into a {@link SilverpeasList} of item wrapping the {@link",
                "+   * User}.",
                "+   * @param values the list of {@link User}.",
                "+   * @return the {@link SilverpeasList} of {@link RemovedUserUIEntity}.",
                "+   */",
                "+  public static <U extends User> SilverpeasList<RemovedUserUIEntity> convertRemovedUserList(",
                "+      final SilverpeasList<U> values, final Set<String> selectedIds) {",
                "+    final Function<User, RemovedUserUIEntity> converter = c -> new RemovedUserUIEntity(c,",
                "+        selectedIds);",
                "+    return values.stream().map(converter).collect(SilverpeasList.collector(values));",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the day date of automatic deletion.",
                "+   * @return a {@link LocalDate}.",
                "+   */",
                "+  public LocalDate getAutomaticDeletionDayDate() {",
                "+    return toLocalDate(getData().getStateSaveDate()).plusDays(getDeletionOfRemovedUsersDayDelay());",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the number of days before automatic deletion.",
                "+   * @return an integer.",
                "+   */",
                "+  public int getAutomaticDeletionDayDelay() {",
                "+    final long dayDelay = LocalDate.now().until(getAutomaticDeletionDayDate(), ChronoUnit.DAYS);",
                "+    return (int) (dayDelay > 0 ? dayDelay : 0);",
                "+  }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/UserUIEntity.java b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/UserUIEntity.java",
                "new file mode 100644",
                "index 0000000000..d4f243217d",
                "--- /dev/null",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/UserUIEntity.java",
                "@@ -0,0 +1,59 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+",
                "+package org.silverpeas.web.jobdomain.servlets;",
                "+",
                "+import org.silverpeas.core.admin.user.model.User;",
                "+import org.silverpeas.core.util.SilverpeasList;",
                "+import org.silverpeas.core.web.util.SelectableUIEntity;",
                "+",
                "+import java.util.Set;",
                "+import java.util.function.Function;",
                "+",
                "+/**",
                "+ * UI item for a {@link User} instance.",
                "+ */",
                "+public class UserUIEntity extends SelectableUIEntity<User> {",
                "+",
                "+  UserUIEntity(final User data, final Set<String> selectedIds) {",
                "+    super(data, selectedIds);",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getId() {",
                "+    return String.valueOf(getData().getId());",
                "+  }",
                "+",
                "+  /**",
                "+   * Converts the given data list into a {@link SilverpeasList} of item wrapping the {@link",
                "+   * User}.",
                "+   * @param values the list of {@link User}.",
                "+   * @return the {@link SilverpeasList} of {@link UserUIEntity}.",
                "+   */",
                "+  public static <U extends User> SilverpeasList<UserUIEntity> convertList(",
                "+      final SilverpeasList<U> values, final Set<String> selectedIds) {",
                "+    final Function<User, UserUIEntity> converter = c -> new UserUIEntity(c, selectedIds);",
                "+    return values.stream().map(converter).collect(SilverpeasList.collector(values));",
                "+  }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/todo/control/ToDoHeaderUIEntity.java b/core-war/src/main/java/org/silverpeas/web/todo/control/ToDoHeaderUIEntity.java",
                "index 7ed5bc03a4..dee6a0870a 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/todo/control/ToDoHeaderUIEntity.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/todo/control/ToDoHeaderUIEntity.java",
                "@@ -47,3 +47,3 @@ import static org.silverpeas.core.util.StringUtil.isDefined;",
                " /**",
                "- * UI item if a {@link SILVERMAILMessage} instance.",
                "+ * UI item for a {@link SILVERMAILMessage} instance.",
                "  * @author Yohann Chastagnier",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/variables/VariableUIEntity.java b/core-war/src/main/java/org/silverpeas/web/variables/VariableUIEntity.java",
                "index be19c3b217..0ea31e1ebf 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/variables/VariableUIEntity.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/variables/VariableUIEntity.java",
                "@@ -23,3 +23,3 @@ public class VariableUIEntity extends SelectableUIEntity<Variable> {",
                "-  VariableUIEntity(final Variable data, final Set<String> selectedIds) {",
                "+  private VariableUIEntity(final Variable data, final Set<String> selectedIds) {",
                "     super(data, selectedIds);",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/webapi/admin/scim/SilverpeasScimServerConverter.java b/core-web/src/main/java/org/silverpeas/core/webapi/admin/scim/SilverpeasScimServerConverter.java",
                "index a65d6a0147..c5b42235bb 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/webapi/admin/scim/SilverpeasScimServerConverter.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/webapi/admin/scim/SilverpeasScimServerConverter.java",
                "@@ -74,8 +74,10 @@ class SilverpeasScimServerConverter {",
                "     user.setPassword(scimUser.getPassword());",
                "-    if (scimUser.getActive()) {",
                "-      if (user.isDeactivatedState() || user.isDeletedState()) {",
                "-        user.setState(UserState.VALID);",
                "+    if (!user.isRemovedState()) {",
                "+      if (scimUser.getActive()) {",
                "+        if (user.isDeactivatedState() || user.isDeletedState()) {",
                "+          user.setState(UserState.VALID);",
                "+        }",
                "+      } else {",
                "+        user.setState(UserState.DEACTIVATED);",
                "       }",
                "-    } else {",
                "-      user.setState(UserState.DEACTIVATED);",
                "     }",
                "@@ -110,2 +112,3 @@ class SilverpeasScimServerConverter {",
                "         scimUser.getName().setFamilyName(user.getLastName());",
                "+        scimUser.getName().setFormatted(user.getDisplayedName());",
                "       }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/webapi/profile/UserGroupProfileResource.java b/core-web/src/main/java/org/silverpeas/core/webapi/profile/UserGroupProfileResource.java",
                "index 3da2eeefdb..586b2964ce 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/webapi/profile/UserGroupProfileResource.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/webapi/profile/UserGroupProfileResource.java",
                "@@ -46,2 +46,3 @@ import javax.ws.rs.core.Response;",
                " import java.net.URI;",
                "+import java.util.HashSet;",
                " import java.util.List;",
                "@@ -123,4 +124,5 @@ public class UserGroupProfileResource extends RESTWebService {",
                "     if (CollectionUtil.isNotEmpty(userStatesToExclude)) {",
                "-      criteriaBuilder.withUserStatesToExclude(",
                "-          userStatesToExclude.toArray(new UserState[userStatesToExclude.size()]));",
                "+      final Set<UserState> statesToExclude = new HashSet<>(userStatesToExclude);",
                "+      statesToExclude.add(UserState.REMOVED);",
                "+      criteriaBuilder.withUserStatesToExclude(statesToExclude.toArray(new UserState[0]));",
                "     }",
                "@@ -195,4 +197,5 @@ public class UserGroupProfileResource extends RESTWebService {",
                "     if (CollectionUtil.isNotEmpty(userStatesToExclude)) {",
                "-      criteriaBuilder.withUserStatesToExclude(",
                "-          userStatesToExclude.toArray(new UserState[userStatesToExclude.size()]));",
                "+      final Set<UserState> statesToExclude = new HashSet<>(userStatesToExclude);",
                "+      statesToExclude.add(UserState.REMOVED);",
                "+      criteriaBuilder.withUserStatesToExclude(statesToExclude.toArray(new UserState[0]));",
                "     }",
                "@@ -263,4 +266,5 @@ public class UserGroupProfileResource extends RESTWebService {",
                "     if (CollectionUtil.isNotEmpty(userStatesToExclude)) {",
                "-      criteriaBuilder.withUserStatesToExclude(",
                "-          userStatesToExclude.toArray(new UserState[userStatesToExclude.size()]));",
                "+      final Set<UserState> statesToExclude = new HashSet<>(userStatesToExclude);",
                "+      statesToExclude.add(UserState.REMOVED);",
                "+      criteriaBuilder.withUserStatesToExclude(statesToExclude.toArray(new UserState[0]));",
                "     }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/webapi/profile/UserProfileEntity.java b/core-web/src/main/java/org/silverpeas/core/webapi/profile/UserProfileEntity.java",
                "index 6e030264d1..e6d68bf376 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/webapi/profile/UserProfileEntity.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/webapi/profile/UserProfileEntity.java",
                "@@ -182,2 +182,8 @@ public class UserProfileEntity extends UserDetail implements WebEntity {",
                "+  @Override",
                "+  @XmlElement",
                "+  public boolean isRemovedState() {",
                "+    return this.user.isRemovedState();",
                "+  }",
                "+",
                "   @Override",
                "@@ -294,2 +300,3 @@ public class UserProfileEntity extends UserDetail implements WebEntity {",
                "+  @Override",
                "   @XmlElement(defaultValue = \"\")",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/webapi/profile/UserProfileResource.java b/core-web/src/main/java/org/silverpeas/core/webapi/profile/UserProfileResource.java",
                "index 1f10a65d0c..1112ee8757 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/webapi/profile/UserProfileResource.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/webapi/profile/UserProfileResource.java",
                "@@ -59,2 +59,3 @@ import java.util.ArrayList;",
                " import java.util.Collections;",
                "+import java.util.HashSet;",
                " import java.util.List;",
                "@@ -184,4 +185,5 @@ public class UserProfileResource extends RESTWebService {",
                "     if (CollectionUtil.isNotEmpty(userStatesToExclude)) {",
                "-      criteriaBuilder.withUserStatesToExclude(",
                "-          userStatesToExclude.toArray(new UserState[userStatesToExclude.size()]));",
                "+      final Set<UserState> statesToExclude = new HashSet<>(userStatesToExclude);",
                "+      statesToExclude.add(UserState.REMOVED);",
                "+      criteriaBuilder.withUserStatesToExclude(statesToExclude.toArray(new UserState[0]));",
                "     }",
                "@@ -284,4 +286,5 @@ public class UserProfileResource extends RESTWebService {",
                "     if (CollectionUtil.isNotEmpty(userStatesToExclude)) {",
                "-      criteriaBuilder.withUserStatesToExclude(",
                "-          userStatesToExclude.toArray(new UserState[userStatesToExclude.size()]));",
                "+      final Set<UserState> statesToExclude = new HashSet<>(userStatesToExclude);",
                "+      statesToExclude.add(UserState.REMOVED);",
                "+      criteriaBuilder.withUserStatesToExclude(statesToExclude.toArray(new UserState[0]));",
                "     }",
                "@@ -350,4 +353,5 @@ public class UserProfileResource extends RESTWebService {",
                "       if (CollectionUtil.isNotEmpty(userStatesToExclude)) {",
                "-        criteriaBuilder.withUserStatesToExclude(",
                "-            userStatesToExclude.toArray(new UserState[userStatesToExclude.size()]));",
                "+        final Set<UserState> statesToExclude = new HashSet<>(userStatesToExclude);",
                "+        statesToExclude.add(UserState.REMOVED);",
                "+        criteriaBuilder.withUserStatesToExclude(statesToExclude.toArray(new UserState[0]));",
                "       }"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/SilverpeasExceptionMessages.java",
                "core-api/src/main/java/org/silverpeas/core/admin/user/constant/UserState.java",
                "core-api/src/main/java/org/silverpeas/core/admin/user/model/User.java",
                "core-api/src/main/java/org/silverpeas/core/date/TemporalFormatter.java",
                "core-library/src/integration-test/java/org/silverpeas/core/admin/StubbedAdministration.java",
                "core-library/src/integration-test/java/org/silverpeas/core/admin/UsersAndGroupsIT.java",
                "core-library/src/integration-test/java/org/silverpeas/core/admin/domain/SQLDomainServiceIT.java",
                "core-library/src/main/java/org/silverpeas/core/admin/AdminSettings.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/AbstractDomainDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/SQLDomainService.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SilverpeasDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/AbstractLDAPGroup.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPSettings.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPTimeStampMSAD.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPTimeStampNDS.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUser.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPUtility.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/scimdriver/SCIMDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/model/Domain.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/synchro/SynchroDomainScheduler.java",
                "core-library/src/main/java/org/silverpeas/core/admin/persistence/GroupUserRoleTable.java",
                "core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "core-library/src/main/java/org/silverpeas/core/admin/service/AdminController.java",
                "core-library/src/main/java/org/silverpeas/core/admin/service/Administration.java",
                "core-library/src/main/java/org/silverpeas/core/admin/service/DeleteRemovedUsersScheduler.java",
                "core-library/src/main/java/org/silverpeas/core/admin/service/GroupSynchronizationRule.java",
                "core-library/src/main/java/org/silverpeas/core/admin/service/SyncOfUsersContext.java",
                "core-library/src/main/java/org/silverpeas/core/admin/user/GroupManager.java",
                "core-library/src/main/java/org/silverpeas/core/admin/user/UserManager.java",
                "core-library/src/main/java/org/silverpeas/core/admin/user/dao/GroupSearchCriteriaForDAO.java",
                "core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserDAO.java",
                "core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserSearchCriteriaForDAO.java",
                "core-library/src/main/java/org/silverpeas/core/admin/user/model/GroupProfileInstManager.java",
                "core-library/src/main/java/org/silverpeas/core/admin/user/model/UserDetail.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java",
                "core-library/src/main/java/org/silverpeas/core/security/authentication/AuthenticationService.java",
                "core-library/src/main/java/org/silverpeas/core/security/authentication/verifier/UserCanLoginVerifier.java",
                "core-library/src/main/java/org/silverpeas/core/socialnetwork/relationship/RelationShipDao.java",
                "core-services/chat/src/main/java/org/silverpeas/core/chat/ChatUser.java",
                "core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/RemovedUserUIEntity.java",
                "core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/UserUIEntity.java",
                "core-war/src/main/java/org/silverpeas/web/todo/control/ToDoHeaderUIEntity.java",
                "core-war/src/main/java/org/silverpeas/web/variables/VariableUIEntity.java",
                "core-web/src/main/java/org/silverpeas/core/webapi/admin/scim/SilverpeasScimServerConverter.java",
                "core-web/src/main/java/org/silverpeas/core/webapi/profile/UserGroupProfileResource.java",
                "core-web/src/main/java/org/silverpeas/core/webapi/profile/UserProfileEntity.java",
                "core-web/src/main/java/org/silverpeas/core/webapi/profile/UserProfileResource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "8335": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, file, directory, webapi, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 8335",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e470deab6dc438f58db1a48b5778030dd89072cc",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1547139001,
            "hunks": 16,
            "message": "Feature #10284: adding the possibility to handle specific data of Google user accounts",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "index 088258f820..e339ba0f9f 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "@@ -27,2 +27,4 @@ import com.google.api.services.admin.directory.model.User;",
                " import org.silverpeas.core.admin.domain.AbstractDomainDriver;",
                "+import org.silverpeas.core.admin.domain.driver.googledriver.GoogleEntitySimpleAttributePathResolver.AttributePathDecoder;",
                "+import org.silverpeas.core.admin.domain.model.DomainProperty;",
                " import org.silverpeas.core.admin.service.AdminException;",
                "@@ -36,2 +38,3 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Objects;",
                " import java.util.Optional;",
                "@@ -40,2 +43,4 @@ import java.util.function.Function;",
                " import static org.silverpeas.core.admin.domain.DomainDriver.ActionConstants.ACTION_MASK_RO_PULL_USER;",
                "+import static org.silverpeas.core.admin.domain.driver.googledriver.GoogleEntitySimpleAttributePathResolver.decodePath;",
                "+import static org.silverpeas.core.admin.domain.driver.googledriver.GoogleEntitySimpleAttributePathResolver.resolve;",
                " import static org.silverpeas.core.admin.user.constant.UserAccessLevel.USER;",
                "@@ -52,2 +57,3 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "+  private static final String ATTRIBUTE_PATH_MSG_ERROR = \"Verify the attribute path to access entity data, it must target a single value\";",
                "   protected SettingBundle settings;",
                "@@ -68,3 +74,3 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "    * Called when Admin starts the synchronization",
                "-   * @return",
                "+   * @return the available actions as hexadecimal.",
                "    */",
                "@@ -133,3 +139,3 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "    * @return The User object that contain new user information",
                "-   * @throws AdminException",
                "+   * @throws AdminException on error.",
                "    */",
                "@@ -137,3 +143,12 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "   public UserFull getUserFull(String specificId) throws AdminException {",
                "-    return userFullMapper.apply(request().user(specificId));",
                "+    UserFull uf = null;",
                "+    final User user = request().user(specificId);",
                "+    if (user != null) {",
                "+      try {",
                "+        uf = userFullMapper.apply(user);",
                "+      } catch (ClassCastException e) {",
                "+        throw new AdminException(ATTRIBUTE_PATH_MSG_ERROR, e);",
                "+      }",
                "+    }",
                "+    return uf;",
                "   }",
                "@@ -144,3 +159,3 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "    * @return The User object that contain new user information",
                "-   * @throws AdminException",
                "+   * @throws AdminException on error.",
                "    */",
                "@@ -154,3 +169,3 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "    * @return User[] An array of User Objects that contain users information",
                "-   * @throws AdminException",
                "+   * @throws AdminException on error.",
                "    */",
                "@@ -162,5 +177,20 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "   @Override",
                "-  public UserDetail[] getUsersBySpecificProperty(String propertyName, String propertyValue) {",
                "-    // No specific property handled for now",
                "-    return new UserDetail[0];",
                "+  public UserDetail[] getUsersBySpecificProperty(String propertyName, String propertyValue)",
                "+      throws AdminException {",
                "+    final DomainProperty property = getProperty(propertyName);",
                "+    if (property == null) {",
                "+      // This property is not defined in this domain",
                "+      return new UserDetail[0];",
                "+    } else {",
                "+      final String googleEntityAttributePath = property.getMapParameter();",
                "+      final AttributePathDecoder attributePathDecoder = decodePath(googleEntityAttributePath);",
                "+      try {",
                "+        return request().users().stream().filter(u -> {",
                "+          final String attributeValue = (String) resolve(u, attributePathDecoder);",
                "+          return Objects.equals(attributeValue, propertyValue);",
                "+        }).map(userDetailMapper).toArray(UserDetail[]::new);",
                "+      } catch (ClassCastException e) {",
                "+        throw new AdminException(ATTRIBUTE_PATH_MSG_ERROR, e);",
                "+      }",
                "+    }",
                "   }",
                "@@ -315,5 +345,11 @@ public class GoogleDriver extends AbstractDomainDriver {",
                "   private Function<User, UserFull> userFullMapper = u -> {",
                "-    final UserFull user = new UserFull();",
                "+    final UserFull user = new UserFull(this);",
                "     setCommonUserProps(u, user);",
                "-    // No specific property handled for now",
                "+    final String[] specificProps = getPropertiesNames();",
                "+    for (String specificProp : specificProps) {",
                "+      final DomainProperty property = getProperty(specificProp);",
                "+      final String googleEntityAttributePath = property.getMapParameter();",
                "+      final String value = (String) resolve(u, googleEntityAttributePath);",
                "+      user.setValue(property.getName(), value);",
                "+    }",
                "     return user;",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleEntitySimpleAttributePathResolver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleEntitySimpleAttributePathResolver.java",
                "new file mode 100644",
                "index 0000000000..fe901f36f1",
                "--- /dev/null",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleEntitySimpleAttributePathResolver.java",
                "@@ -0,0 +1,176 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2019 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+",
                "+package org.silverpeas.core.admin.domain.driver.googledriver;",
                "+",
                "+import com.google.api.client.json.GenericJson;",
                "+import org.silverpeas.core.SilverpeasRuntimeException;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "+",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Objects;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+import java.util.stream.Collectors;",
                "+import java.util.stream.Stream;",
                "+",
                "+/**",
                "+ * @author silveryocha",
                "+ */",
                "+class GoogleEntitySimpleAttributePathResolver {",
                "+",
                "+  private static final Pattern PATH_PART_DECODER = Pattern.compile(\"(?i)^\\\\s*(\\\\S+)\\\\s*\");",
                "+",
                "+  static <T extends GenericJson> Object resolve(final T entity, final String attributePath) {",
                "+    return resolve(entity, decodePath(attributePath));",
                "+  }",
                "+",
                "+  static <T extends GenericJson> Object resolve(final T entity,",
                "+      final AttributePathDecoder decoder) {",
                "+    return resolvePath(entity, decoder, 0, entity);",
                "+  }",
                "+",
                "+  private GoogleEntitySimpleAttributePathResolver() {",
                "+    throw new IllegalAccessError(\"Utility class\");",
                "+  }",
                "+",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  private static <T extends GenericJson> Object resolvePath(final T entity,",
                "+      final AttributePathDecoder attributePathDecoder, final int pathLevel, final Object data) {",
                "+    if (data instanceof GenericJson) {",
                "+      final GenericJson json = (GenericJson) data;",
                "+      final String[] path = attributePathDecoder.getExplodedPath();",
                "+      final String pathPart = path[pathLevel];",
                "+      Object subData = json.get(pathPart);",
                "+      if (path.length == pathLevel + 1) {",
                "+        return decodeResult(subData);",
                "+      }",
                "+      if (subData instanceof List) {",
                "+        subData = ((List) subData)",
                "+            .stream()",
                "+            .map(i -> decodeValue(entity, attributePathDecoder, i))",
                "+            .filter(Objects::nonNull)",
                "+            .collect(Collectors.toList());",
                "+      }",
                "+      return resolvePath(entity, attributePathDecoder, pathLevel + 1, subData);",
                "+    } else if (data instanceof List) {",
                "+      final Object result = ((List) data)",
                "+          .stream()",
                "+          .flatMap(o -> Stream.of(resolvePath(entity, attributePathDecoder, pathLevel, o)))",
                "+          .filter(Objects::nonNull)",
                "+          .collect(Collectors.toList());",
                "+      return decodeResult(result);",
                "+    } else {",
                "+      throw new SilverpeasRuntimeException(\"unknown \");",
                "+    }",
                "+  }",
                "+",
                "+  private static Object decodeResult(Object subData) {",
                "+    if (subData instanceof List) {",
                "+      final List list = (List) subData;",
                "+      if (list.size() == 1) {",
                "+        subData = list.get(0);",
                "+      } else if (list.isEmpty()) {",
                "+        subData = null;",
                "+      }",
                "+    }",
                "+    return subData;",
                "+  }",
                "+",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  private static <T extends GenericJson> GenericJson decodeValue(final T entity,",
                "+      final AttributePathDecoder attributePathDecoder, final Object data) {",
                "+    final GenericJson result;",
                "+    if (!(data instanceof GenericJson) && data instanceof Map) {",
                "+      final GenericJson temp = new GenericJson();",
                "+      ((Map<String, Object>) data).forEach(temp::set);",
                "+      temp.set(\"id\", entity.get(\"id\"));",
                "+      result = temp;",
                "+    } else if (\"customSchemas\".equals(attributePathDecoder.getExplodedPath()[0]) && data == null) {",
                "+      result = new GenericJson();",
                "+    } else {",
                "+      result = null;",
                "+    }",
                "+    return result;",
                "+  }",
                "+",
                "+  /**",
                "+   * Decodes the attribute path.",
                "+   * @param attributePath attribute path.",
                "+   * @return an {@link AttributePathDecoder} instance.",
                "+   */",
                "+  static AttributePathDecoder decodePath(final String attributePath) {",
                "+    AttributePathDecoder attrPathDecoder = new SimpleAttributePathDecoder(attributePath);",
                "+    if (!attrPathDecoder.isMatching()) {",
                "+      final String message = \"attribute path '\" + attributePath + \"' is not correct !\";",
                "+      SilverLogger.getLogger(GoogleEntitySimpleAttributePathResolver.class).error(message);",
                "+      throw new SilverpeasRuntimeException(message);",
                "+    }",
                "+    return attrPathDecoder;",
                "+  }",
                "+",
                "+  abstract static class AttributePathDecoder {",
                "+    String path;",
                "+    String[] explodedPath;",
                "+    boolean match = false;",
                "+",
                "+    AttributePathDecoder(final String attributePath) {",
                "+      this.path = attributePath;",
                "+      decode();",
                "+      this.explodedPath = path.split(\"[.]\");",
                "+    }",
                "+",
                "+    protected abstract void decode();",
                "+",
                "+    public boolean isMatching() {",
                "+      return match;",
                "+    }",
                "+",
                "+    public String getPath() {",
                "+      return path;",
                "+    }",
                "+",
                "+    String[] getExplodedPath() {",
                "+      return explodedPath;",
                "+    }",
                "+  }",
                "+",
                "+  static class SimpleAttributePathDecoder extends AttributePathDecoder {",
                "+",
                "+    SimpleAttributePathDecoder(final String attributePath) {",
                "+      super(attributePath);",
                "+    }",
                "+",
                "+    @Override",
                "+    protected void decode() {",
                "+      final Matcher matcher = PATH_PART_DECODER.matcher(getPath());",
                "+      if (matcher.find()) {",
                "+        this.path = matcher.group(1);",
                "+        explodedPath = path.split(\"[.]\");",
                "+        match = true;",
                "+      }",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "index 10cf10c302..0366e5d1fa 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "@@ -103,3 +103,3 @@ class GoogleUserFilter<T extends GenericJson> {",
                "   private static final String CRITERION_PART_DECODER = \"(?i)^\\\\s*(\\\\S+)\\\\s*\";",
                "-  private static final Map<String, BiPredicate<String, String>> OPERATORS = new HashMap<>(3);",
                "+  private static final Map<String, BiPredicate<String, String>> OPERATORS = new HashMap<>(4);",
                "   private final List<T> allUsers;",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilterManager.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilterManager.java",
                "index cfe3db9c48..b1940c33b5 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilterManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilterManager.java",
                "@@ -30,3 +30,2 @@ import org.silverpeas.core.admin.user.model.User;",
                " import org.silverpeas.core.util.SettingBundle;",
                "-import org.silverpeas.core.util.StringUtil;",
                "@@ -36,3 +35,2 @@ import static org.silverpeas.core.util.ResourceLocator.saveSettingBundle;",
                " import static org.silverpeas.core.util.StringUtil.defaultStringIfNotDefined;",
                "-import static org.silverpeas.core.util.StringUtil.isDefined;"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleEntitySimpleAttributePathResolver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilterManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10284": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10284",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4538d187dcd9bf0374b759f43779bc2c07511e1e",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1543589821,
            "hunks": 113,
            "message": "Feature #9884 When a notification is sent, if the source of it isn't explicitly set and the notification is fired from a component instance, then a default source is computed with the path of that component instance. The change here is to set the name of the spaces or the name of the component instance in the path only if the properties in the notificationManagerSettings.properties file are explicitly set to true. By default, for compatibility, these properties are set to true. The consequence of this change is that: - for notifications received by email the path of the component instance can   be or not appear in the suhject (that is a concatenation of both the source   and the original subject) - for notification sent through other channels, the source can appear or not   among the displayed information of the notification. Fix the bugs in the improvement of the code in the user notification engine. The request handlers of the SILVERMAIL treatment are now managed by CDI.",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "index 1998e58320..0cf91d20b4 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "@@ -274,2 +274,22 @@ public class NotificationManagerSettings {",
                "   }",
                "+",
                "+  /**",
                "+   * Is the space label should be set in the source of a notification when this property isn't set",
                "+   * explicitly.",
                "+   * @return true if the space label should be set in the notification source. False otherwise.",
                "+   */",
                "+  public static boolean isSpaceLabelInNotificationSource() {",
                "+    return settings.getBoolean(\"notification.source.spaceLabel\");",
                "+  }",
                "+",
                "+  /**",
                "+   * Is the component instance label should be set in the source of a notification when this",
                "+   * property isn't set explicitly.",
                "+   * @return true if the component instance label should be set in the notification source. False",
                "+   * otherwise.",
                "+   */",
                "+  public static boolean isComponentInstanceLabelInNotificationSource() {",
                "+    return settings.getBoolean(\"notification.source.componentLabel\");",
                "+  }",
                "+",
                " }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "index 720cc60b7c..1b05ac9441 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "@@ -67,2 +67,3 @@ import java.util.ArrayList;",
                " import java.util.Collection;",
                "+import java.util.Collections;",
                " import java.util.HashMap;",
                "@@ -91,3 +92,2 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   private static final String HTML_BREAK_LINES = \"<br><br>\";",
                "-  private static final String SUBJECT = \"subject\";",
                "   private static final String OF_THE_USER = \" of the user \";",
                "@@ -415,6 +415,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       throws NotificationException {",
                "-    // First Tests if the user is a guest",
                "-    // Then notify himself that he cant notify anyone",
                "-    final Collection<String> senderIds;",
                "+    final Collection<String> recipientIds;",
                "     if (UserAccessLevel.GUEST.equals(getUserAccessLevel(params.getFromUserId()))) {",
                "+      // If the user is a guest then notify himself that he can't notify anyone",
                "       params.setMessage(multilang.getString(\"guestNotAllowedBody1\") + \"<br>\" + params.getTitle() +",
                "@@ -425,6 +424,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "           .setComponentInstance(-1);",
                "-      senderIds = new ArrayList<>(1);",
                "-      senderIds.add(String.valueOf(params.getFromUserId()));",
                "+      recipientIds = Collections.singleton(String.valueOf(params.getFromUserId()));",
                "     } else {",
                "-      senderIds = userIds;",
                "+      recipientIds = userIds;",
                "     }",
                "@@ -436,3 +434,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       params.trace();",
                "-      for (String userId : senderIds) {",
                "+      for (String userId : recipientIds) {",
                "         doNewDelayedNotifications(params, userId);",
                "@@ -510,14 +508,7 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       final ComponentInst instance = AdministrationServiceProvider.getAdminService().getComponentInst(compInst);",
                "+      NotificationManagerSettings.isComponentInstanceLabelInNotificationSource();",
                "       if (!isPathToComponent) {",
                "-        final SpaceInst space =",
                "-            AdministrationServiceProvider.getAdminService().getSpaceInstById(instance.getDomainFatherId());",
                "-        sb.append(space.getName());",
                "-        sb.append(separator);",
                "+        sb.append(getSpaceLabelOf(instance)).append(separator);",
                "       } else {",
                "-        final List<SpaceInstLight> spaces =",
                "-            AdministrationServiceProvider.getAdminService().getPathToComponent(compInst);",
                "-        for (final SpaceInstLight space : spaces) {",
                "-          sb.append(space.getName());",
                "-          sb.append(separator);",
                "-        }",
                "+        sb.append(getSpaceLabelPathOf(instance, separator)).append(separator);",
                "       }",
                "@@ -530,2 +521,37 @@ public class DefaultNotificationManager extends AbstractNotification",
                "+  private String computeDefaultSource(final String compInst) throws AdminException {",
                "+    final String separator = \" - \";",
                "+    final boolean isSpaceLabelSet = NotificationManagerSettings.isSpaceLabelInNotificationSource();",
                "+    final boolean isCompInstLabelSet =",
                "+        NotificationManagerSettings.isComponentInstanceLabelInNotificationSource();",
                "+    final StringBuilder source = new StringBuilder();",
                "+    if (isSpaceLabelSet || isCompInstLabelSet) {",
                "+      final ComponentInst instance =",
                "+          AdministrationServiceProvider.getAdminService().getComponentInst(compInst);",
                "+      if (isSpaceLabelSet) {",
                "+        source.append(getSpaceLabelOf(instance));",
                "+      }",
                "+      if (isCompInstLabelSet) {",
                "+        if (isSpaceLabelSet) {",
                "+          source.append(separator);",
                "+        }",
                "+        source.append(instance.getLabel());",
                "+      }",
                "+    }",
                "+    return source.toString();",
                "+  }",
                "+",
                "+  private String getSpaceLabelPathOf(final ComponentInst instance, final String pathSeparator)",
                "+      throws AdminException {",
                "+    final List<SpaceInstLight> spaces =",
                "+        AdministrationServiceProvider.getAdminService().getPathToComponent(instance.getId());",
                "+    return spaces.stream().map(SpaceInstLight::getName).collect(Collectors.joining(pathSeparator));",
                "+  }",
                "+",
                "+  private String getSpaceLabelOf(final ComponentInst instance) throws AdminException {",
                "+    final SpaceInst space = AdministrationServiceProvider.getAdminService()",
                "+        .getSpaceInstById(instance.getDomainFatherId());",
                "+    return space.getName();",
                "+  }",
                "+",
                "   private String getUserEmail(final String userId) {",
                "@@ -752,30 +778,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     // Set Source parameter",
                "-    setSource(params, theExtraParams);",
                "-",
                "-    // Set sessionId parameter",
                "-    if (StringUtil.isDefined(params.getSessionId())) {",
                "-      theExtraParams.put(SESSIONID, params.getSessionId());",
                "-    }",
                "+    setSource(params, theExtraParams, null);",
                "     // Set date parameter",
                "-    if (params.getDate() != null) {",
                "-      theExtraParams.put(DATE, params.getDate());",
                "-    }",
                "-",
                "-    if (params.getLanguage() != null) {",
                "-      theExtraParams.put(LANGUAGE, params.getLanguage());",
                "-    }",
                "-",
                "-    nd.setSenderName(senderName);",
                "-",
                "-    if (theExtraParams.size() > 0) {",
                "-      nd.setTargetParam(theExtraParams);",
                "-    }",
                "-",
                "-    theMessage.append(params.getMessage());",
                "-",
                "-    nd.setMessage(theMessage.toString());",
                "-    nd.setAnswerAllowed(params.isAnswerAllowed());",
                "-",
                "-    return nd;",
                "+    return setCommonNotifData(params, theExtraParams, theMessage, senderName, nd);",
                "   }",
                "@@ -787,3 +789,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } else if (params.getFromUserId() < 0) {",
                "-      theMessage.append(multilang.getString(SUBJECT)).append(\" : \").append(params.getTitle())",
                "+      theMessage.append(multilang.getString(\"subject\")).append(\" : \").append(params.getTitle())",
                "           .append(HTML_BREAK_LINES);",
                "@@ -837,4 +839,12 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     // Set Source parameter",
                "-    setSource(params, theExtraParams);",
                "+    setSource(params, theExtraParams, null);",
                "+    // Set date parameter",
                "+    return setCommonNotifData(params, theExtraParams, theMessage, senderName, nd);",
                "+  }",
                "+",
                "+  @NotNull",
                "+  private NotificationData setCommonNotifData(final NotificationParameters params,",
                "+      final Map<String, Object> theExtraParams, final StringBuilder theMessage,",
                "+      final String senderName, final NotificationData nd) {",
                "     // Set sessionId parameter",
                "@@ -844,3 +854,2 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-    // Set date parameter",
                "     if (params.getDate() != null) {",
                "@@ -869,3 +878,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   private void setSource(final NotificationParameters params,",
                "-      final Map<String, Object> theExtraParams) {",
                "+      final Map<String, Object> theExtraParams,",
                "+      final DelayedNotificationData delayedNotificationData) {",
                "     if (StringUtil.isDefined(params.getSource())) {",
                "@@ -874,6 +884,13 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       if (params.isComponentInstanceDefined()) {",
                "+        final String instanceId = String.valueOf(params.getComponentInstance());",
                "         try {",
                "-          // New feature : if source is not set, we display space's name and",
                "-          // component's label",
                "-          theExtraParams.put(SOURCE, getComponentFullName(\"\" + params.getComponentInstance()));",
                "+          final String source = computeDefaultSource(instanceId);",
                "+          theExtraParams.put(SOURCE, source);",
                "+          if (delayedNotificationData != null && delayedNotificationData.getResource() != null &&",
                "+              StringUtils.isBlank(delayedNotificationData.getResource().getResourceLocation())) {",
                "+            final String resourceLocation =",
                "+                getComponentFullName(instanceId, NotificationResourceData.LOCATION_SEPARATOR, true);",
                "+            delayedNotificationData.getResource().setResourceLocation(resourceLocation);",
                "+",
                "+          }",
                "         } catch (Exception e) {",
                "@@ -903,3 +920,2 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     NotifChannelRow notifChannelRow;",
                "-    DelayedNotificationData delayedNotificationData;",
                "     NotificationData notificationData;",
                "@@ -914,3 +930,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-      delayedNotificationData =",
                "+      final DelayedNotificationData delayedNotificationData =",
                "           initDelayedNotificationData(aUserId, params, notificationData, curAddresseRow);",
                "@@ -936,28 +952,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       // Set Source parameter",
                "-      setSource(params, delayedNotificationData, theExtraParams);",
                "-",
                "-      // Set sessionId parameter",
                "-      if (StringUtil.isDefined(params.getSessionId())) {",
                "-        theExtraParams.put(SESSIONID, params.getSessionId());",
                "-      }",
                "-",
                "-      // Set date parameter",
                "-      if (params.getDate() != null) {",
                "-        theExtraParams.put(DATE, params.getDate());",
                "-      }",
                "+      setSource(params, theExtraParams, delayedNotificationData);",
                "-      if (params.getLanguage() != null) {",
                "-        theExtraParams.put(LANGUAGE, params.getLanguage());",
                "-      }",
                "-",
                "-      notificationData.setSenderName(senderName);",
                "-",
                "-      if (theExtraParams.size() > 0) {",
                "-        notificationData.setTargetParam(theExtraParams);",
                "-      }",
                "-",
                "-      theMessage.append(params.getMessage());",
                "-",
                "-      notificationData.setMessage(theMessage.toString());",
                "-      notificationData.setAnswerAllowed(params.isAnswerAllowed());",
                "+      setCommonNotifData(params, theExtraParams, theMessage, senderName, notificationData);",
                "     }",
                "@@ -966,28 +959,2 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  private void setSource(final NotificationParameters params,",
                "-      final DelayedNotificationData delayedNotificationData,",
                "-      final Map<String, Object> theExtraParams) {",
                "-    if (StringUtil.isDefined(params.getSource())) {",
                "-      theExtraParams.put(SOURCE, params.getSource());",
                "-    } else {",
                "-      if (params.isComponentInstanceDefined()) {",
                "-        try {",
                "-          // New feature : if source is not set, we display space's name and component's label",
                "-          final String componentFullName =",
                "-              getComponentFullName(String.valueOf(params.getComponentInstance()));",
                "-          theExtraParams.put(SOURCE, componentFullName);",
                "-          if (delayedNotificationData.getResource() != null &&",
                "-              StringUtils.isBlank(delayedNotificationData.getResource().getResourceLocation())) {",
                "-            delayedNotificationData.getResource()",
                "-                .setResourceLocation(",
                "-                    getComponentFullName(String.valueOf(params.getComponentInstance()),",
                "-                    NotificationResourceData.LOCATION_SEPARATOR, true));",
                "-          }",
                "-        } catch (Exception e) {",
                "-          SilverLogger.getLogger(this).warn(e);",
                "-        }",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "   @NotNull",
                "@@ -1014,7 +981,7 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   private String getSenderName(final NotificationParameters params) {",
                "-    String senderName;",
                "+    final String senderName;",
                "     if (params.isFromUserIdDefined()) {",
                "-      senderName = params.getSenderName();",
                "-    } else {",
                "       senderName = getUserFullName(params.getFromUserId());",
                "+    } else {",
                "+      senderName = params.getSenderName();",
                "     }",
                "@@ -1050,3 +1017,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  protected String getSureString(String s) {",
                "+  private String getSureString(String s) {",
                "     if (s != null) {",
                "@@ -1073,2 +1040,7 @@ public class DefaultNotificationManager extends AbstractNotification",
                "+  @FunctionalInterface",
                "+  private interface Callback {",
                "+",
                "+    void call() throws NotificationException;",
                "+  }",
                " }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/AbstractListener.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/AbstractListener.java",
                "index 7a0a81c1d8..2f704a9599 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/AbstractListener.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/AbstractListener.java",
                "@@ -58,3 +58,2 @@ public abstract class AbstractListener implements INotificationServerChannel {",
                "     if (nd != null) {",
                "-",
                "       nd.traceObject();",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/popup/POPUPListener.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/popup/POPUPListener.java",
                "index 4f9d325686..2bb758c0c5 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/popup/POPUPListener.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/popup/POPUPListener.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.notification.user.server.channel.popup;",
                "+import org.silverpeas.core.notification.user.client.NotificationParameterNames;",
                " import org.silverpeas.core.notification.user.server.NotificationData;",
                "@@ -73,9 +74,12 @@ public class POPUPListener extends AbstractListener implements MessageListener {",
                "     try {",
                "-      StringBuilder content = new StringBuilder(500);",
                "-      if (message.getTargetParam().get(\"SOURCE\") != null) {",
                "-        content.append(\"Source : \").append(message.getTargetParam().get(\"SOURCE\")).append(\"\\n\");",
                "+      final StringBuilder content = new StringBuilder(500);",
                "+      final String source =",
                "+          (String) message.getTargetParam().get(NotificationParameterNames.SOURCE);",
                "+      final Date date = (Date) message.getTargetParam().get(NotificationParameterNames.DATE);",
                "+      if (source != null) {",
                "+        content.append(\"Source : \").append(source).append(\"\\n\");",
                "       }",
                "-      if (message.getTargetParam().get(\"DATE\") != null) {",
                "+      if (date != null) {",
                "         content.append(\"Date : \")",
                "-            .append(DateUtil.dateToString(((Date) message.getTargetParam().get(\"DATE\")), \"\"))",
                "+            .append(DateUtil.dateToString(date, \"\"))",
                "             .append(\"\\n\");",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/remove/REMOVEListener.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/remove/REMOVEListener.java",
                "index db11c96209..03afb2f0f2 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/remove/REMOVEListener.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/remove/REMOVEListener.java",
                "@@ -26,3 +26,2 @@ package org.silverpeas.core.notification.user.server.channel.remove;",
                " import org.silverpeas.core.notification.user.server.NotificationData;",
                "-import org.silverpeas.core.notification.user.server.NotificationServerException;",
                " import org.silverpeas.core.notification.user.server.channel.AbstractListener;",
                "@@ -59,3 +58,3 @@ public class REMOVEListener extends AbstractListener implements MessageListener",
                "   @Override",
                "-  public void send(NotificationData notificationData) throws NotificationServerException {",
                "+  public void send(NotificationData notificationData) {",
                "     // we only remove this message",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/server/SERVERListener.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/server/SERVERListener.java",
                "index 79a2751310..f6662428b6 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/server/SERVERListener.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/server/SERVERListener.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.notification.user.server.channel.server;",
                "+import org.silverpeas.core.notification.user.client.NotificationParameterNames;",
                " import org.silverpeas.core.notification.user.server.NotificationData;",
                "@@ -66,5 +67,5 @@ public class SERVERListener extends AbstractListener implements MessageListener",
                "   @Override",
                "-  public void send(NotificationData notification) throws NotificationServerException {",
                "+  public void send(NotificationData notification) {",
                "     Map<String, Object> params = notification.getTargetParam();",
                "-    String sessionId = (String) params.get(\"SESSIONID\");",
                "+    String sessionId = (String) params.get(NotificationParameterNames.SESSIONID);",
                "     ServerMessageService.get()",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILListener.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILListener.java",
                "index d3805e88ed..be5e04e147 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILListener.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILListener.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.notification.user.server.channel.silvermail;",
                "+import org.silverpeas.core.notification.user.client.NotificationParameterNames;",
                " import org.silverpeas.core.notification.user.server.NotificationData;",
                "@@ -68,9 +69,9 @@ public class SILVERMAILListener extends AbstractListener implements MessageListe",
                "       // retrieves the SUBJECT key value.",
                "-      String tmpSubjectString = (String) keyValue.get(\"SUBJECT\");",
                "+      String tmpSubjectString = (String) keyValue.get(NotificationParameterNames.SUBJECT);",
                "       // retrieves the SOURCE key value.",
                "-      String tmpSourceString = (String) keyValue.get(\"SOURCE\");",
                "+      String tmpSourceString = (String) keyValue.get(NotificationParameterNames.SOURCE);",
                "       // retrieves the URL key value.",
                "-      String tmpUrlString = (String) keyValue.get(\"URL\");",
                "+      String tmpUrlString = (String) keyValue.get(NotificationParameterNames.URL);",
                "       // retrieves the DATE key value.",
                "-      Date tmpDate = (Date) keyValue.get(\"DATE\");",
                "+      Date tmpDate = (Date) keyValue.get(NotificationParameterNames.DATE);",
                "       SILVERMAILMessage sm = new SILVERMAILMessage();",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestHandler.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestHandler.java",
                "index cb4f089e97..145f74b401 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestHandler.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestHandler.java",
                "@@ -28,4 +28,2 @@ package org.silverpeas.web.notificationserver.channel.silvermail;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-",
                " import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                "@@ -33,2 +31,4 @@ import org.silverpeas.core.web.mvc.controller.ComponentSessionController;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+",
                " /**",
                "@@ -36,2 +36,3 @@ import org.silverpeas.core.web.mvc.controller.ComponentSessionController;",
                "  */",
                "+@FunctionalInterface",
                " public interface SILVERMAILRequestHandler {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestRouter.java",
                "index 0da7249488..b65a913411 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestRouter.java",
                "@@ -31,2 +31,3 @@ package org.silverpeas.web.notificationserver.channel.silvermail;",
                " import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                "+import org.silverpeas.core.util.ServiceProvider;",
                " import org.silverpeas.core.web.http.HttpRequest;",
                "@@ -87,2 +88,4 @@ public class SILVERMAILRequestRouter extends ComponentRequestRouter<SILVERMAILSe",
                "       requestHandler = getHandlerInstance(function);",
                "+      componentSC.setCurrentFunction(function);",
                "+",
                "       // Return the URL of the view the RequestHandler instance",
                "@@ -99,5 +102,4 @@ public class SILVERMAILRequestRouter extends ComponentRequestRouter<SILVERMAILSe",
                "   /**",
                "-   * Locate and return the RequestHandler instance for this action. Instances are stored in a hash",
                "-   * table once instantiated, so after the initial use of Class.forName() this method is very fast",
                "-   * and does not rely on reflection.",
                "+   * Locate and return the RequestHandler instance for this action. Request handlers are managed",
                "+   * by the {@link ServiceProvider} subsystem.",
                "    */",
                "@@ -105,32 +107,8 @@ public class SILVERMAILRequestRouter extends ComponentRequestRouter<SILVERMAILSe",
                "       throws SILVERMAILException {",
                "-    String handlerName = REQUEST_HANDLER_PACKAGE + \".\" + action;",
                "-    SILVERMAILRequestHandler requestHandler = handlerHash.get(handlerName);",
                "-",
                "-    if (requestHandler == null) {",
                "-      // We don't have a handler instance associated with this action,",
                "-      // so we need to instantiate one and put in in our hash table",
                "-      try {",
                "-        // Use reflection to load the class by name",
                "-        Class handlerClass = Class.forName(handlerName);",
                "-",
                "-        // Check the class we obtained implements the RequestHandler interface",
                "-        if (!SILVERMAILRequestHandler.class.isAssignableFrom(handlerClass)) {",
                "-          throw new SILVERMAILException(\"No such request handler \" + handlerName);",
                "-        }",
                "-        // Instantiate the request handler object",
                "-        requestHandler = (SILVERMAILRequestHandler) handlerClass.newInstance();",
                "-        // Save the instance so we don't have to load it dynamically to process",
                "-        // further requests from this user",
                "-        handlerHash.put(handlerName, requestHandler);",
                "-      } catch (ClassNotFoundException ex) {",
                "-        throw new SILVERMAILException(\"No such request handler \" + handlerName, ex);",
                "-      } catch (InstantiationException | IllegalAccessException ex) {",
                "-        // It probably doesn't have a no-argument constructor",
                "-        throw new SILVERMAILException(\"Cannot execute the request handler \" + handlerName,",
                "-            ex);",
                "-      }",
                "+    try {",
                "+      return ServiceProvider.getService(action);",
                "+    } catch (IllegalStateException e) {",
                "+      final String handlerName = REQUEST_HANDLER_PACKAGE + \".\" + action;",
                "+      throw new SILVERMAILException(\"No such request handler \" + handlerName, e);",
                "     }",
                "-    // If we get to here, we have a valid RequestHandler instance,",
                "-    // whether it came from the hash table or from dynamical class loading",
                "-    return requestHandler;",
                "   }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILSessionController.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILSessionController.java",
                "index bf92953300..15f4563f6a 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILSessionController.java",
                "@@ -73,2 +73,4 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "   private static final int DEFAULT_PAGINATION_SIZE = 25;",
                "+  private String currentFunction;",
                "+  private long currentMessageId = -1;",
                "   private Set<String> selectedUserNotificationIds = new HashSet<>();",
                "@@ -103,2 +105,22 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "+  /**",
                "+   * Method declaration",
                "+   *",
                "+   * @return",
                "+   * @see",
                "+   */",
                "+  public String getCurrentFunction() {",
                "+    return currentFunction;",
                "+  }",
                "+",
                "+  /**",
                "+   * Method declaration",
                "+   *",
                "+   * @param currentFunction",
                "+   * @see",
                "+   */",
                "+  public void setCurrentFunction(String currentFunction) {",
                "+    this.currentFunction = currentFunction;",
                "+  }",
                "+",
                "   public Set<String> getSelectedUserNotificationIds() {",
                "@@ -189,2 +211,26 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "+  /**",
                "+   * Method declaration",
                "+   *",
                "+   * @return",
                "+   * @see",
                "+   */",
                "+  public long getCurrentMessageId() {",
                "+    return currentMessageId;",
                "+  }",
                "+",
                "+  /**",
                "+   * Method declaration",
                "+   *",
                "+   * @param value",
                "+   * @see",
                "+   */",
                "+  public void setCurrentMessageId(long value) {",
                "+    currentMessageId = value;",
                "+  }",
                "+",
                "+  public SILVERMAILMessage getCurrentMessage() throws SILVERMAILException {",
                "+    return getMessage(currentMessageId);",
                "+  }",
                "+",
                "   /**",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Compose.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Compose.java",
                "index 68f40ca58f..d3d4c965dc 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Compose.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Compose.java",
                "@@ -28,25 +28,16 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                "-import javax.servlet.http.HttpServletRequest;",
                "-",
                "-import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                "-import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILRequestHandler;",
                " import org.silverpeas.core.web.mvc.controller.ComponentSessionController;",
                "+import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILRequestHandler;",
                "-/**",
                "- * Class declaration",
                "- * @author",
                "- * @version %I%, %G%",
                "- */",
                "+import javax.inject.Named;",
                "+import javax.inject.Singleton;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+",
                "+@Singleton",
                "+@Named(\"Compose\")",
                " public class Compose implements SILVERMAILRequestHandler {",
                "-  /**",
                "-   * Method declaration",
                "-   * @param componentSC",
                "-   * @param request",
                "-   * @return",
                "-   * @throws SILVERMAILException",
                "-   *",
                "-   */",
                "+  @Override",
                "   public String handleRequest(ComponentSessionController componentSC,",
                "-      HttpServletRequest request) throws SILVERMAILException {",
                "+      HttpServletRequest request) {",
                "     return \"/SILVERMAIL/jsp/main.jsp\";",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllMessages.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllMessages.java",
                "index 43a7c295cb..a80e1e1969 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllMessages.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllMessages.java",
                "@@ -28,3 +28,2 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                "-import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                " import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILPersistence;",
                "@@ -35,8 +34,13 @@ import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILSessio",
                "+import javax.inject.Named;",
                "+import javax.inject.Singleton;",
                " import javax.servlet.http.HttpServletRequest;",
                "+@Singleton",
                "+@Named(\"DeleteAllMessages\")",
                " public class DeleteAllMessages implements SILVERMAILRequestHandler {",
                "+  @Override",
                "   public String handleRequest(ComponentSessionController componentSC,",
                "-      HttpServletRequest request) throws SILVERMAILException {",
                "+      HttpServletRequest request) {",
                "     SILVERMAILSessionController silvermailScc = (SILVERMAILSessionController) componentSC;",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllSentNotifications.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllSentNotifications.java",
                "index 79412f56ba..3e801e88a0 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllSentNotifications.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllSentNotifications.java",
                "@@ -29,3 +29,2 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                " import org.silverpeas.core.notification.NotificationException;",
                "-import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -36,2 +35,4 @@ import org.silverpeas.web.notificationserver.channel.silvermail.SentUserNotifica",
                "+import javax.inject.Named;",
                "+import javax.inject.Singleton;",
                " import javax.servlet.http.HttpServletRequest;",
                "@@ -39,19 +40,9 @@ import java.util.List;",
                "-/**",
                "- * Class declaration",
                "- * @author",
                "- * @version %I%, %G%",
                "- */",
                "+@Singleton",
                "+@Named(\"DeleteAllSentNotifications\")",
                " public class DeleteAllSentNotifications implements SILVERMAILRequestHandler {",
                "-  /**",
                "-   * Method declaration",
                "-   * @param componentSC",
                "-   * @param request",
                "-   * @return",
                "-   * @throws SILVERMAILException",
                "-   *",
                "-   */",
                "+  @Override",
                "   public String handleRequest(ComponentSessionController componentSC,",
                "-      HttpServletRequest request) throws SILVERMAILException {",
                "+      HttpServletRequest request) {",
                "     try {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteMessage.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteMessage.java",
                "index bd5af3b1f0..e3926b7a43 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteMessage.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteMessage.java",
                "@@ -33,19 +33,11 @@ import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILSessio",
                "+import javax.inject.Named;",
                "+import javax.inject.Singleton;",
                " import javax.servlet.http.HttpServletRequest;",
                "-/**",
                "- * Class declaration",
                "- * @author",
                "- * @version %I%, %G%",
                "- */",
                "+@Singleton",
                "+@Named(\"DeleteMessage\")",
                " public class DeleteMessage implements SILVERMAILRequestHandler {",
                "-  /**",
                "-   * Method declaration",
                "-   * @param componentSC",
                "-   * @param request",
                "-   * @return",
                "-   * @throws SILVERMAILException",
                "-   *",
                "-   */",
                "+  @Override",
                "   public String handleRequest(ComponentSessionController componentSC, HttpServletRequest request)",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSelectedMessages.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSelectedMessages.java",
                "index 2b787b9591..562b76e308 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSelectedMessages.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSelectedMessages.java",
                "@@ -28,3 +28,2 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                "-import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                " import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILPersistence;",
                "@@ -36,21 +35,13 @@ import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILSessio",
                "+import javax.inject.Named;",
                "+import javax.inject.Singleton;",
                " import javax.servlet.http.HttpServletRequest;",
                "-/**",
                "- * Class declaration",
                "- * @author",
                "- * @version %I%, %G%",
                "- */",
                "+@Singleton",
                "+@Named(\"DeleteSelectedMessages\")",
                " public class DeleteSelectedMessages implements SILVERMAILRequestHandler {",
                "-  /**",
                "-   * Method declaration",
                "-   * @param componentSC",
                "-   * @param request",
                "-   * @return",
                "-   * @throws SILVERMAILException",
                "-   *",
                "-   */",
                "+  @Override",
                "   public String handleRequest(ComponentSessionController componentSC,",
                "-      HttpServletRequest request) throws SILVERMAILException {",
                "+      HttpServletRequest request) {",
                "     HttpRequest httpRequest = HttpRequest.decorate(request);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSentNotification.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSentNotification.java",
                "index 14a71a17c1..5c6ce5e0ae 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSentNotification.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSentNotification.java",
                "@@ -29,3 +29,2 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                " import org.silverpeas.core.notification.NotificationException;",
                "-import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -36,2 +35,4 @@ import org.silverpeas.web.notificationserver.channel.silvermail.SentUserNotifica",
                "+import javax.inject.Named;",
                "+import javax.inject.Singleton;",
                " import javax.servlet.http.HttpServletRequest;",
                "@@ -39,23 +40,12 @@ import java.util.List;",
                "-/**",
                "- * Class declaration",
                "- * @author",
                "- * @version %I%, %G%",
                "- */",
                "+@Singleton",
                "+@Named(\"DeleteSentNotification\")",
                " public class DeleteSentNotification implements SILVERMAILRequestHandler {",
                "-  /**",
                "-   * Method declaration",
                "-   * @param componentSC",
                "-   * @param request",
                "-   * @return",
                "-   * @throws NotificationException",
                "-   * @throws SILVERMAILException",
                "-   *",
                "-   */",
                "+  @Override",
                "   public String handleRequest(ComponentSessionController componentSC,",
                "-      HttpServletRequest request) throws SILVERMAILException {",
                "+      HttpServletRequest request) {",
                "     try {",
                "       SILVERMAILSessionController silvermailScc = (SILVERMAILSessionController) componentSC;",
                "-      String notifId = (String) request.getParameter(\"NotifId\");",
                "+      String notifId = request.getParameter(\"NotifId\");",
                "       silvermailScc.deleteSentNotif(notifId);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Main.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Main.java",
                "index 689a7d2d67..36fab987b4 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Main.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Main.java",
                "@@ -30,2 +30,4 @@ import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILSessio",
                "+import javax.inject.Named;",
                "+import javax.inject.Singleton;",
                " import javax.servlet.http.HttpServletRequest;",
                "@@ -36,10 +38,7 @@ import static org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAI",
                "-/**",
                "- * Class declaration",
                "- */",
                "+@Singleton",
                "+@Named(\"Main\")",
                " public class Main implements SILVERMAILRequestHandler {",
                "-  /**",
                "-   * Handles the Main request.",
                "-   */",
                "+  @Override",
                "   public String handleRequest(ComponentSessionController componentSC, HttpServletRequest request) {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/MarkAllMessagesAsRead.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/MarkAllMessagesAsRead.java",
                "index 7468bee507..1eda473bf7 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/MarkAllMessagesAsRead.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/MarkAllMessagesAsRead.java",
                "@@ -28,3 +28,2 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                "-import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                " import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILPersistence;",
                "@@ -35,21 +34,12 @@ import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILSessio",
                "+import javax.inject.Named;",
                "+import javax.inject.Singleton;",
                " import javax.servlet.http.HttpServletRequest;",
                "-/**",
                "- * Class declaration",
                "- * @author",
                "- * @version %I%, %G%",
                "- */",
                "+@Singleton",
                "+@Named(\"MarkAllMessagesAsRead\")",
                " public class MarkAllMessagesAsRead implements SILVERMAILRequestHandler {",
                "-  /**",
                "-   * Method declaration",
                "-   * @param componentSC",
                "-   * @param request",
                "-   * @return",
                "-   * @throws SILVERMAILException",
                "-   *",
                "-   */",
                "-  public String handleRequest(ComponentSessionController componentSC, HttpServletRequest request)",
                "-      throws SILVERMAILException {",
                "+  @Override",
                "+  public String handleRequest(ComponentSessionController componentSC, HttpServletRequest request) {",
                "     SILVERMAILSessionController silvermailScc = (SILVERMAILSessionController) componentSC;",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/MarkSelectedMessagesAsRead.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/MarkSelectedMessagesAsRead.java",
                "index 98d373341e..7f357b4fec 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/MarkSelectedMessagesAsRead.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/MarkSelectedMessagesAsRead.java",
                "@@ -28,3 +28,2 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                "-import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                " import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILPersistence;",
                "@@ -36,21 +35,12 @@ import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILSessio",
                "+import javax.inject.Named;",
                "+import javax.inject.Singleton;",
                " import javax.servlet.http.HttpServletRequest;",
                "-/**",
                "- * Class declaration",
                "- * @author",
                "- * @version %I%, %G%",
                "- */",
                "+@Singleton",
                "+@Named(\"MarkSelectedMessagesAsRead\")",
                " public class MarkSelectedMessagesAsRead implements SILVERMAILRequestHandler {",
                "-  /**",
                "-   * Method declaration",
                "-   * @param componentSC",
                "-   * @param request",
                "-   * @return",
                "-   * @throws SILVERMAILException",
                "-   *",
                "-   */",
                "-  public String handleRequest(ComponentSessionController componentSC, HttpServletRequest request)",
                "-      throws SILVERMAILException {",
                "+  @Override",
                "+  public String handleRequest(ComponentSessionController componentSC, HttpServletRequest request) {",
                "     HttpRequest httpRequest = HttpRequest.decorate(request);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadMessage.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadMessage.java",
                "index 0c965f4ecb..7987742a92 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadMessage.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadMessage.java",
                "@@ -28,11 +28,26 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                " import org.silverpeas.core.web.mvc.controller.ComponentSessionController;",
                " import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILRequestHandler;",
                "+import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILSessionController;",
                "+import javax.inject.Named;",
                "+import javax.inject.Singleton;",
                " import javax.servlet.http.HttpServletRequest;",
                "+@Singleton",
                "+@Named(\"ReadMessage\")",
                " public class ReadMessage implements SILVERMAILRequestHandler {",
                "+  @Override",
                "   public String handleRequest(ComponentSessionController componentSC,",
                "       HttpServletRequest request) {",
                "+    try {",
                "+      String sId = request.getParameter(\"ID\");",
                "+      long id = Long.parseLong(sId);",
                "+",
                "+      ((SILVERMAILSessionController) componentSC).setCurrentMessageId(id);",
                "+    } catch (NumberFormatException e) {",
                "+      SilverLogger.getLogger(this).error(e.getMessage(), e);",
                "+    }",
                "     return \"/SILVERMAIL/jsp/readMessage.jsp\";",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadSentNotification.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadSentNotification.java",
                "index 79c971af48..9fe14f0f64 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadSentNotification.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadSentNotification.java",
                "@@ -28,31 +28,22 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                "-import javax.servlet.http.HttpServletRequest;",
                "-",
                " import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.model.SentNotificationDetail;",
                "-import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                "+import org.silverpeas.core.web.mvc.controller.ComponentSessionController;",
                " import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILRequestHandler;",
                " import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILSessionController;",
                "-import org.silverpeas.core.web.mvc.controller.ComponentSessionController;",
                "-/**",
                "- * Class declaration",
                "- * @author",
                "- * @version %I%, %G%",
                "- */",
                "+import javax.inject.Named;",
                "+import javax.inject.Singleton;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+",
                "+@Singleton",
                "+@Named(\"ReadSentNotification\")",
                " public class ReadSentNotification implements SILVERMAILRequestHandler {",
                "-  /**",
                "-   * Method declaration",
                "-   * @param componentSC",
                "-   * @param request",
                "-   * @return",
                "-   * @throws SILVERMAILException",
                "-   *",
                "-   */",
                "+  @Override",
                "   public String handleRequest(ComponentSessionController componentSC,",
                "-      HttpServletRequest request) throws SILVERMAILException {",
                "+      HttpServletRequest request) {",
                "     SILVERMAILSessionController silvermailScc = (SILVERMAILSessionController) componentSC;",
                "-    SentNotificationDetail sentNotification = null;",
                "+    SentNotificationDetail sentNotification;",
                "     String notifId = request.getParameter(\"NotifId\");",
                "@@ -61,3 +52,3 @@ public class ReadSentNotification implements SILVERMAILRequestHandler {",
                "     } catch (NotificationException e) {",
                "-",
                "+      sentNotification = null;",
                "     }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/SentUserNotifications.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/SentUserNotifications.java",
                "index 4890be875d..0b8bef2379 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/SentUserNotifications.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/SentUserNotifications.java",
                "@@ -28,3 +28,2 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                " import org.silverpeas.core.notification.NotificationException;",
                "-import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -35,2 +34,4 @@ import org.silverpeas.web.notificationserver.channel.silvermail.SentUserNotifica",
                "+import javax.inject.Named;",
                "+import javax.inject.Singleton;",
                " import javax.servlet.http.HttpServletRequest;",
                "@@ -39,22 +40,9 @@ import java.util.List;",
                "-/**",
                "- * Class declaration",
                "- *",
                "- * @author",
                "- * @version %I%, %G%",
                "- */",
                "+@Singleton",
                "+@Named(\"SentUserNotifications\")",
                " public class SentUserNotifications implements SILVERMAILRequestHandler {",
                "-  /**",
                "-   * Method declaration",
                "-   *",
                "-   * @param componentSC",
                "-   * @param request",
                "-   * @return",
                "-   * @throws SILVERMAILException",
                "-   *",
                "-   */",
                "-  @Override",
                "+ @Override",
                "   public String handleRequest(ComponentSessionController componentSC,",
                "-      HttpServletRequest request) throws SILVERMAILException {",
                "+      HttpServletRequest request) {",
                "@@ -62,3 +50,3 @@ public class SentUserNotifications implements SILVERMAILRequestHandler {",
                "     SILVERMAILSessionController silvermailScc = (SILVERMAILSessionController) componentSC;",
                "-    List<SentUserNotificationItem> sentNotifs = new ArrayList<>();",
                "+    List<SentUserNotificationItem> sentNotifs;",
                "     try {",
                "@@ -67,2 +55,3 @@ public class SentUserNotifications implements SILVERMAILRequestHandler {",
                "       SilverLogger.getLogger(this).warn(e);",
                "+      sentNotifs = new ArrayList<>();",
                "     }"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/AbstractListener.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/popup/POPUPListener.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/remove/REMOVEListener.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/server/SERVERListener.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILListener.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestHandler.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestRouter.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Compose.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllMessages.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllSentNotifications.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteMessage.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSelectedMessages.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSentNotification.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Main.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/MarkAllMessagesAsRead.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/MarkSelectedMessagesAsRead.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadMessage.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadSentNotification.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/SentUserNotifications.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9884": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9884",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f37eebfa2ed167e32c8e9dce0ce5c598ea006a5c",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1547041715,
            "hunks": 130,
            "message": "Feature #10255 Now, automatically the Manual User Notification system adds in the notification data the information about the contribution which can have attachments. With this information, the notification processing mechanism checks then the contribution has effectively attachments and then for each of them it creates a link that will be added in the notification message. This information is treated both by the SMTP notification endpoint and by the delayed notification processor.",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java b/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "index 25c2d03732..6181a3c7f4 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "@@ -27,3 +27,6 @@ public class NotificationContext extends HashMap<String, String> {",
                "    * Silverpeas. If the contribution is managed by a given component instance, then the key",
                "-   * {@link NotificationContext#COMPONENT_ID} must be defined.",
                "+   * {@link NotificationContext#COMPONENT_ID} must be defined. This key is used by the user",
                "+   * notification mechanism to get any attachments of such a contribution in order to automatically",
                "+   * indicate them in the notification message. (Those links to attachment can be or not processed",
                "+   * by the notification service at the endpoint.)",
                "    */",
                "@@ -31,2 +34,12 @@ public class NotificationContext extends HashMap<String, String> {",
                "+  /**",
                "+   * The predefined key in the context mapped with the unique identifier of a publication. Used to",
                "+   * specify the unique identifier of a contribution with attachments. In the case the contributions",
                "+   * managed by a Silverpeas component don't have attachments in themselves but another resource",
                "+   * mapped with them, this key is a way to specify the identifier of that resource in order to get",
                "+   * the attachments to automatically indicate in the notification message. (Those links to",
                "+   * attachment can be or not processed by the notification service at the endpoint.)",
                "+   */",
                "+  public static final String PUBLICATION_ID = \"publicationId\";",
                "+",
                "   public List<String> getAsList(final String key) {",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "index 3850b4a2f6..146457f0db 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "@@ -38,6 +38,14 @@ import org.silverpeas.core.util.logging.SilverLogger;",
                "-import java.util.*;",
                "-",
                "-import static org.silverpeas.core.notification.user.client.NotificationTemplateKey.notification_receiver_groups;",
                "-import static org.silverpeas.core.notification.user.client.NotificationTemplateKey.notification_receiver_users;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                "+import java.util.Date;",
                "+import java.util.HashMap;",
                "+import java.util.HashSet;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+",
                "+import static org.silverpeas.core.notification.user.client.NotificationTemplateKey.NOTIFICATION_RECEIVER_GROUPS;",
                "+import static org.silverpeas.core.notification.user.client.NotificationTemplateKey.NOTIFICATION_RECEIVER_USERS;",
                " import static org.silverpeas.core.ui.DisplayI18NHelper.verifyLanguage;",
                "@@ -51,2 +59,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   private static final String SENDER_MESSAGE_ATTRIBUTE = \"senderMessage\";",
                "+  private static final String BREAK_LINE_REGEXP = \"[\\\\n\\\\r]\";",
                "@@ -56,3 +65,2 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   private String source;",
                "-  private String link;",
                "   private String sessionId;",
                "@@ -67,9 +75,7 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   private NotifAction action;",
                "-  private Map<String, NotificationResourceData> notificationResourceData =",
                "+  private final Map<String, NotificationResourceData> notificationResourceData =",
                "       new HashMap<>();",
                "-",
                "-  private Map<String, String> titles = new HashMap<>();",
                "-  private Map<String, String> contents = new HashMap<>();",
                "-  private Map<String, String> linkLabels = new HashMap<>();",
                "-",
                "+  private final Map<String, String> titles = new HashMap<>();",
                "+  private final Map<String, String> contents = new HashMap<>();",
                "+  private final Map<String, Link> links = new HashMap<>();",
                "   private Map<String, SilverpeasTemplate> templates;",
                "@@ -82,5 +88,2 @@ public class NotificationMetaData implements java.io.Serializable {",
                "-  protected NotificationManager notificationManager = null;",
                "-",
                "-",
                "   /**",
                "@@ -121,3 +124,2 @@ public class NotificationMetaData implements java.io.Serializable {",
                "     source = \"\";",
                "-    link = \"\";",
                "     sessionId = \"\";",
                "@@ -247,3 +249,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "           templateMessageFooter",
                "-              .setAttribute(notification_receiver_users.toString(), receiverUsers);",
                "+              .setAttribute(NOTIFICATION_RECEIVER_USERS.toString(), receiverUsers);",
                "         }",
                "@@ -252,3 +254,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "           templateMessageFooter",
                "-              .setAttribute(notification_receiver_groups.toString(), receiverGroups);",
                "+              .setAttribute(NOTIFICATION_RECEIVER_GROUPS.toString(), receiverGroups);",
                "         }",
                "@@ -260,3 +262,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "           templateMessageFooter.applyFileTemplate(\"messageFooter\" + '_' + language)",
                "-              .replaceAll(\"[\\\\n\\\\r]\", \"\");",
                "+              .replaceAll(BREAK_LINE_REGEXP, \"\");",
                "       if (messageFooter.length() > 0) {",
                "@@ -297,4 +299,4 @@ public class NotificationMetaData implements java.io.Serializable {",
                "     if (isDefined(extraMessage) && !messageContent.toString()",
                "-        .replaceAll(\"[\\\\n\\\\r]\", \"\")",
                "-        .contains(extraMessage.replaceAll(\"[\\\\n\\\\r]\", \"\"))) {",
                "+        .replaceAll(BREAK_LINE_REGEXP, \"\")",
                "+        .contains(extraMessage.replaceAll(BREAK_LINE_REGEXP, \"\"))) {",
                "       SilverpeasTemplate templateRepository =",
                "@@ -356,7 +358,7 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   /**",
                "-   * Set message link",
                "-   * @param link the link to be set",
                "+   * Gets message link in the default language of the platform.",
                "+   * @return the message link",
                "    */",
                "-  public void setLink(String link) {",
                "-    this.link = link;",
                "+  public Link getLink() {",
                "+    return getLink(DisplayI18NHelper.getDefaultLanguage());",
                "   }",
                "@@ -364,6 +366,11 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   /**",
                "-   * Get message link",
                "-   * @return the message link",
                "+   * Gets the message link in the given language.",
                "+   * @param language the ISO 631-1 code of a language supported by Silverpeas.",
                "+   * @return the message link.",
                "    */",
                "-  public String getLink() {",
                "+  public Link getLink(final String language) {",
                "+    final Link link = this.links.get(language);",
                "+    if (link == null) {",
                "+      return Link.EMPTY_LINK;",
                "+    }",
                "     return link;",
                "@@ -371,2 +378,10 @@ public class NotificationMetaData implements java.io.Serializable {",
                "+  /**",
                "+   * Set message link",
                "+   * @param link the link to be set",
                "+   */",
                "+  public void setLink(String link) {",
                "+    this.links.put(DisplayI18NHelper.getDefaultLanguage(), new Link(link, \"\"));",
                "+  }",
                "+",
                "   /**",
                "@@ -385,16 +400,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   public void setLink(Link link, String language) {",
                "-    this.link = link.getLinkUrl();",
                "-    linkLabels.put(language, link.getLinkLabel());",
                "-  }",
                "-",
                "-  /**",
                "-   * Get message linkLabel",
                "-   * @return the message linkLabel",
                "-   */",
                "-  public String getLinkLabel() {",
                "-    return getLinkLabel(DisplayI18NHelper.getDefaultLanguage());",
                "-  }",
                "-",
                "-  public String getLinkLabel(String language) {",
                "-    return linkLabels.get(language);",
                "+    this.links.put(language, link);",
                "   }",
                "@@ -417,2 +419,15 @@ public class NotificationMetaData implements java.io.Serializable {",
                "+  /**",
                "+   * Sets the unique identifier of a resource in Silverpeas that can have attachments. The target",
                "+   * is set for each {@link NotificationResourceData} instances embedded by this metadata.",
                "+   * @param attachmentTargetId the unique identifier of a resource. Generally, the one of a",
                "+   * contribution. If not defined, then nothing is done.",
                "+   */",
                "+  public void setAttachmentTargetId(final String attachmentTargetId) {",
                "+    if (StringUtil.isDefined(attachmentTargetId)) {",
                "+      this.notificationResourceData.forEach(",
                "+          (key, value) -> value.setAttachmentTargetId(attachmentTargetId));",
                "+    }",
                "+  }",
                "+",
                "   /**",
                "@@ -706,5 +721,5 @@ public class NotificationMetaData implements java.io.Serializable {",
                "     // Then get users included in groups",
                "+    final NotificationManager notificationManager = getNotificationManager();",
                "     for (GroupRecipient group : groups) {",
                "-      allUniqueUserRecipients",
                "-          .addAll(getNotificationManager().getUsersFromGroup(group.getGroupId()));",
                "+      allUniqueUserRecipients.addAll(notificationManager.getUsersFromGroup(group.getGroupId()));",
                "     }",
                "@@ -722,5 +737,6 @@ public class NotificationMetaData implements java.io.Serializable {",
                "     usersSet.addAll(getUserRecipients());",
                "+    final NotificationManager notificationManager = getNotificationManager();",
                "     for (GroupRecipient group : getGroupRecipients()) {",
                "       if (!displayGroup(group.getGroupId())) {",
                "-        usersSet.addAll(getNotificationManager().getUsersFromGroup(group.getGroupId()));",
                "+        usersSet.addAll(notificationManager.getUsersFromGroup(group.getGroupId()));",
                "       }",
                "@@ -822,6 +838,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   private NotificationManager getNotificationManager() {",
                "-    if (notificationManager == null) {",
                "-      notificationManager = NotificationManager.get();",
                "-    }",
                "-    return notificationManager;",
                "+    return NotificationManager.get();",
                "   }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameters.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameters.java",
                "index 5bda41e7b3..746c48c52d 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameters.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameters.java",
                "@@ -31,2 +31,3 @@ import org.silverpeas.core.notification.user.client.constant.NotifAction;",
                " import org.silverpeas.core.notification.user.model.NotificationResourceData;",
                "+import org.silverpeas.core.util.Link;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -71,4 +72,3 @@ public class NotificationParameters {",
                "   private String sMessage = \"\";",
                "-  private String sURL = \"\";",
                "-  private String sLinkLabel = \"\";",
                "+  private Link link = Link.EMPTY_LINK;",
                "   private String sSource = \"\";",
                "@@ -160,17 +160,8 @@ public class NotificationParameters {",
                "-  public String getURL() {",
                "-    return sURL;",
                "+  public Link getLink() {",
                "+    return link;",
                "   }",
                "-  public NotificationParameters setURL(final String sURL) {",
                "-    this.sURL = sURL;",
                "-    return this;",
                "-  }",
                "-",
                "-  public String getLinkLabel() {",
                "-    return sLinkLabel;",
                "-  }",
                "-",
                "-  public NotificationParameters setLinkLabel(final String sLinkLabel) {",
                "-    this.sLinkLabel = sLinkLabel;",
                "+  public NotificationParameters setLink(final Link link) {",
                "+    this.link = link;",
                "     return this;",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationTemplateKey.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationTemplateKey.java",
                "index 598f9c8491..343b3b406a 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationTemplateKey.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationTemplateKey.java",
                "@@ -26,9 +26,21 @@ package org.silverpeas.core.notification.user.client;",
                " public enum NotificationTemplateKey {",
                "-  notification_sendername,",
                "-  notification_senderemail,",
                "-  notification_receiver_users,",
                "-  notification_receiver_groups,",
                "-  notification_serverurl,",
                "-  notification_link,",
                "-  notification_linkLabel;",
                "+  NOTIFICATION_SENDER_NAME(\"notification_sendername\"),",
                "+  NOTIFICATION_SENDER_EMAIL(\"notification_senderemail\"),",
                "+  NOTIFICATION_RECEIVER_USERS(\"notification_receiver_users\"),",
                "+  NOTIFICATION_RECEIVER_GROUPS(\"notification_receiver_groups\"),",
                "+  NOTIFICATION_SERVER_URL(\"notification_serverurl\"),",
                "+  NOTIFICATION_LINK(\"notification_link\"),",
                "+  NOTIFICATION_LINK_LABEL(\"notification_linkLabel\"),",
                "+  NOTIFICATION_ATTACHMENTS(\"notification_attachments\");",
                "+",
                "+  private final String name;",
                "+",
                "+  NotificationTemplateKey(final String name) {",
                "+    this.name = name;",
                "+  }",
                "+",
                "+  @Override",
                "+  public String toString() {",
                "+    return this.name;",
                "+  }",
                " }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/model/NotificationResourceData.java b/core-api/src/main/java/org/silverpeas/core/notification/user/model/NotificationResourceData.java",
                "index 8fd5bd235a..1f0a997ef1 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/model/NotificationResourceData.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/model/NotificationResourceData.java",
                "@@ -50,6 +50,5 @@ import static org.apache.commons.lang3.StringUtils.isNotBlank;",
                " public class NotificationResourceData",
                "-    extends BasicJpaEntity<NotificationResourceData, UniqueLongIdentifier>",
                "-    implements Cloneable {",
                "+    extends BasicJpaEntity<NotificationResourceData, UniqueLongIdentifier> {",
                "-  public final static String LOCATION_SEPARATOR = \"@#@#@\";",
                "+  public static final String LOCATION_SEPARATOR = \"@#@#@\";",
                "@@ -64,3 +63,3 @@ public class NotificationResourceData",
                "-  @Column(name = \"resourceDescription\", nullable = true)",
                "+  @Column(name = \"resourceDescription\")",
                "   private String resourceDescription;",
                "@@ -70,3 +69,3 @@ public class NotificationResourceData",
                "-  @Column(name = \"resourceUrl\", nullable = true)",
                "+  @Column(name = \"resourceUrl\")",
                "   private String resourceUrl;",
                "@@ -76,2 +75,5 @@ public class NotificationResourceData",
                "+  @Column(name = \"attachmentTargetId\")",
                "+  private String attachmentTargetId;",
                "+",
                "   /**",
                "@@ -88,2 +90,3 @@ public class NotificationResourceData",
                "     setComponentInstanceId(notificationResourceData.getComponentInstanceId());",
                "+    setAttachmentTargetId(notificationResourceData.getAttachmentTargetId());",
                "   }",
                "@@ -186,2 +189,20 @@ public class NotificationResourceData",
                "   }",
                "+",
                "+  public void setAttachmentTargetId(final String targetId) {",
                "+    this.attachmentTargetId = targetId;",
                "+  }",
                "+",
                "+  public String getAttachmentTargetId() {",
                "+    return this.attachmentTargetId;",
                "+  }",
                "+",
                "+  @Override",
                "+  public int hashCode() {",
                "+    return super.hashCode();",
                "+  }",
                "+",
                "+  @Override",
                "+  public boolean equals(final Object obj) {",
                "+    return super.equals(obj);",
                "+  }",
                " }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/util/FileLink.java b/core-api/src/main/java/org/silverpeas/core/util/FileLink.java",
                "new file mode 100644",
                "index 0000000000..0ef0ea4145",
                "--- /dev/null",
                "+++ b/core-api/src/main/java/org/silverpeas/core/util/FileLink.java",
                "@@ -0,0 +1,33 @@",
                "+package org.silverpeas.core.util;",
                "+",
                "+/**",
                "+ * A link to a file that can be accessed through the Web.",
                "+ * @author mmoquillon",
                "+ */",
                "+public class FileLink extends Link {",
                "+",
                "+  private final long size;",
                "+",
                "+  /**",
                "+   * Constructs a new link with the specified URL, labels and file size.",
                "+   * @param linkUrl the URL of the linked file.",
                "+   * @param linkLabel the label to render for that link.",
                "+   * @param linkSize the size in byte of the linked file.",
                "+   */",
                "+  public FileLink(final String linkUrl, final String linkLabel, final long linkSize) {",
                "+    super(linkUrl, linkLabel);",
                "+    if (linkSize < 0) {",
                "+      throw new AssertionError(\"The size of the linked file must be non-negative\");",
                "+    }",
                "+    this.size = linkSize;",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the size of the file referred by this link.",
                "+   * @return the size in bytes of the linked file.",
                "+   */",
                "+  public long getLinkSize() {",
                "+    return size;",
                "+  }",
                "+}",
                "+  ",
                "\\ No newline at end of file",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/util/Link.java b/core-api/src/main/java/org/silverpeas/core/util/Link.java",
                "index 207407e124..cb9977f4b1 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/util/Link.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/util/Link.java",
                "@@ -25,8 +25,26 @@ package org.silverpeas.core.util;",
                "+import java.util.Objects;",
                "+",
                "+/**",
                "+ * Link to a given web resource. The resource is defined by the URL at which it can be accessed",
                "+ * through the Web.",
                "+ */",
                " public class Link {",
                "-  private String linkUrl;",
                "-  private String linkLabel;",
                "+  /**",
                "+   * An empty link is a link whose the URL and label is an empty string.",
                "+   */",
                "+  public static final Link EMPTY_LINK = new Link(\"\", \"\");",
                "-  public Link(String linkUrl, String linkLabel) {",
                "+  private final String linkUrl;",
                "+  private final String linkLabel;",
                "+",
                "+  /**",
                "+   * Constructs a new link with the specified URL and labels.",
                "+   * @param linkUrl the URL of the linked resource.",
                "+   * @param linkLabel the label to render for that link.",
                "+   */",
                "+  public Link(final String linkUrl, final String linkLabel) {",
                "+    Objects.requireNonNull(linkUrl);",
                "+    Objects.requireNonNull(linkLabel);",
                "     this.linkUrl = linkUrl;",
                "@@ -35,2 +53,6 @@ public class Link {",
                "+  /**",
                "+   * Gets the URL of the resource referred by this link.",
                "+   * @return the resource URL.",
                "+   */",
                "   public String getLinkUrl() {",
                "@@ -39,6 +61,6 @@ public class Link {",
                "-  public void setLinkUrl(String linkUrl) {",
                "-    this.linkUrl = linkUrl;",
                "-  }",
                "-",
                "+  /**",
                "+   * Gets the label with which this link should be referred.",
                "+   * @return this link's label.",
                "+   */",
                "   public String getLinkLabel() {",
                "@@ -47,5 +69,2 @@ public class Link {",
                "-  public void setLinkLabel(String linkLabel) {",
                "-    this.linkLabel = linkLabel;",
                "-  }",
                " }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/util/memory/MemoryUnit.java b/core-api/src/main/java/org/silverpeas/core/util/memory/MemoryUnit.java",
                "index 9a0e85bd05..4b6caefc2b 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/util/memory/MemoryUnit.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/util/memory/MemoryUnit.java",
                "@@ -36,3 +36,3 @@ import static org.silverpeas.core.util.StringUtil.defaultStringIfNotDefined;",
                "  * Date: 15/11/13",
                "- */ /* Byte, Kilo-Byte, Mega-Byte, ... */",
                "+ */",
                " public enum MemoryUnit {",
                "@@ -65,2 +65,7 @@ public enum MemoryUnit {",
                "+  public String getLabel(final String language) {",
                "+    return defaultStringIfNotDefined(getStringTranslation(getBundleKey(), language),",
                "+        getBundleDefault());",
                "+  }",
                "+",
                "   public BigDecimal getLimit() {",
                "@@ -76,9 +81,7 @@ public enum MemoryUnit {",
                "-  /**",
                "-   * Gets the translation of an element",
                "-   * @param key",
                "-   * @return",
                "-   */",
                "   private static String getStringTranslation(final String key) {",
                "-    String language = MessageManager.getLanguage();",
                "+    return getStringTranslation(key, MessageManager.getLanguage());",
                "+  }",
                "+",
                "+  private static String getStringTranslation(final String key, final String language) {",
                "     LocalizationBundle rl =",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/SeeAlsoDAO.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/SeeAlsoDAO.java",
                "index 67e7dd00af..726dcb548c 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/SeeAlsoDAO.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/SeeAlsoDAO.java",
                "@@ -32,3 +32,3 @@ import java.util.List;",
                "-import org.silverpeas.core.contribution.publication.model.Link;",
                "+import org.silverpeas.core.contribution.publication.model.PublicationLink;",
                " import org.silverpeas.core.contribution.publication.model.PublicationPK;",
                "@@ -134,3 +134,3 @@ public class SeeAlsoDAO {",
                "    */",
                "-  public static List<Link> getLinks(Connection con, PublicationPK pubPK) throws SQLException {",
                "+  public static List<PublicationLink> getLinks(Connection con, PublicationPK pubPK) throws SQLException {",
                "     ResultSet rs = null;",
                "@@ -145,3 +145,3 @@ public class SeeAlsoDAO {",
                "-      List<Link> list = new ArrayList<>();",
                "+      List<PublicationLink> list = new ArrayList<>();",
                "       while (rs.next()) {",
                "@@ -162,3 +162,3 @@ public class SeeAlsoDAO {",
                "    */",
                "-  public static List<Link> getReverseLinks(Connection con, PublicationPK pubPK)",
                "+  public static List<PublicationLink> getReverseLinks(Connection con, PublicationPK pubPK)",
                "       throws SQLException {",
                "@@ -174,5 +174,5 @@ public class SeeAlsoDAO {",
                "-      List<Link> list = new ArrayList<>();",
                "+      List<PublicationLink> list = new ArrayList<>();",
                "       while (rs.next()) {",
                "-        Link link = getLink(pubPK, rs);",
                "+        PublicationLink link = getLink(pubPK, rs);",
                "         link.setReverse(true);",
                "@@ -186,3 +186,3 @@ public class SeeAlsoDAO {",
                "-  private static Link getLink(PublicationPK pubPK, ResultSet rs) throws SQLException {",
                "+  private static PublicationLink getLink(PublicationPK pubPK, ResultSet rs) throws SQLException {",
                "     String id = Integer.toString(rs.getInt(1));",
                "@@ -192,3 +192,3 @@ public class SeeAlsoDAO {",
                "-    return new Link(id, pubPK, targetPK);",
                "+    return new PublicationLink(id, pubPK, targetPK);",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/CompletePublication.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/CompletePublication.java",
                "index 3a5cca33b4..20702e4eac 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/CompletePublication.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/CompletePublication.java",
                "@@ -47,3 +47,3 @@ public class CompletePublication implements Serializable {",
                "    */",
                "-  private List<Link> linkList;",
                "+  private List<PublicationLink> linkList;",
                "@@ -52,3 +52,3 @@ public class CompletePublication implements Serializable {",
                "    */",
                "-  private List<Link> reverseLinkList;",
                "+  private List<PublicationLink> reverseLinkList;",
                "@@ -61,4 +61,4 @@ public class CompletePublication implements Serializable {",
                "    */",
                "-  public CompletePublication(PublicationDetail pubDetail, List<Link> linkList,",
                "-      List<Link> reverseLinkList) {",
                "+  public CompletePublication(PublicationDetail pubDetail, List<PublicationLink> linkList,",
                "+      List<PublicationLink> reverseLinkList) {",
                "     this.pubDetail = pubDetail;",
                "@@ -80,3 +80,3 @@ public class CompletePublication implements Serializable {",
                "    */",
                "-  public List<Link> getLinkList() {",
                "+  public List<PublicationLink> getLinkList() {",
                "     return linkList;",
                "@@ -87,3 +87,3 @@ public class CompletePublication implements Serializable {",
                "    */",
                "-  public List<Link> getReverseLinkList() {",
                "+  public List<PublicationLink> getReverseLinkList() {",
                "     return reverseLinkList;",
                "@@ -99,7 +99,7 @@ public class CompletePublication implements Serializable {",
                "-  public List<Link> getLinkedPublications(String userId) {",
                "-    List<Link> publications = getAuthorizedLinks(userId, linkList);",
                "+  public List<PublicationLink> getLinkedPublications(String userId) {",
                "+    List<PublicationLink> publications = getAuthorizedLinks(userId, linkList);",
                "     // remove reverse link linked by the same publication",
                "-    List<Link> reverseLinkListWithoutDuplicates = new ArrayList<>();",
                "-    for (Link reverseLink : reverseLinkList) {",
                "+    List<PublicationLink> reverseLinkListWithoutDuplicates = new ArrayList<>();",
                "+    for (PublicationLink reverseLink : reverseLinkList) {",
                "       if (!isReverseLinkADuplication(publications, reverseLink)) {",
                "@@ -112,4 +112,4 @@ public class CompletePublication implements Serializable {",
                "-  private boolean isReverseLinkADuplication(List<Link> links, Link linkToTest) {",
                "-    for (Link link : links) {",
                "+  private boolean isReverseLinkADuplication(List<PublicationLink> links, PublicationLink linkToTest) {",
                "+    for (PublicationLink link : links) {",
                "       if (link.getTarget().equals(linkToTest.getTarget())) {",
                "@@ -121,3 +121,3 @@ public class CompletePublication implements Serializable {",
                "-  private List<Link> getAuthorizedLinks(String userId, List<Link> links) {",
                "+  private List<PublicationLink> getAuthorizedLinks(String userId, List<PublicationLink> links) {",
                "     PublicationService publicationService = PublicationService.get();",
                "@@ -125,4 +125,4 @@ public class CompletePublication implements Serializable {",
                "         ServiceProvider.getService(PublicationAccessController.class);",
                "-    List<Link> authorizedLinks = new ArrayList<>();",
                "-    for (Link link : links) {",
                "+    List<PublicationLink> authorizedLinks = new ArrayList<>();",
                "+    for (PublicationLink link : links) {",
                "       PublicationPK pk = new PublicationPK(link.getTarget().getLocalId(),",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/PublicationLink.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/PublicationLink.java",
                "new file mode 100644",
                "index 0000000000..687099a8db",
                "--- /dev/null",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/PublicationLink.java",
                "@@ -0,0 +1,63 @@",
                "+package org.silverpeas.core.contribution.publication.model;",
                "+",
                "+import org.silverpeas.core.ResourceReference;",
                "+",
                "+import java.io.Serializable;",
                "+",
                "+/**",
                "+ * Links from a publication to a contribution.",
                "+ */",
                "+public class PublicationLink implements Serializable {",
                "+",
                "+  private String id;",
                "+  private PublicationPK pubPK;",
                "+  private ResourceReference target;",
                "+  private PublicationDetail pub;",
                "+  private boolean reverse = false;",
                "+",
                "+  public PublicationLink(String id, PublicationPK pubPK, ResourceReference target) {",
                "+    setId(id);",
                "+    setPubPK(pubPK);",
                "+    setTarget(target);",
                "+  }",
                "+",
                "+  public String getId() {",
                "+    return id;",
                "+  }",
                "+",
                "+  public void setId(final String id) {",
                "+    this.id = id;",
                "+  }",
                "+",
                "+  public PublicationPK getPubPK() {",
                "+    return pubPK;",
                "+  }",
                "+",
                "+  public void setPubPK(final PublicationPK pubPK) {",
                "+    this.pubPK = pubPK;",
                "+  }",
                "+",
                "+  public ResourceReference getTarget() {",
                "+    return target;",
                "+  }",
                "+",
                "+  public void setTarget(final ResourceReference target) {",
                "+    this.target = target;",
                "+  }",
                "+",
                "+  public PublicationDetail getPub() {",
                "+    return pub;",
                "+  }",
                "+",
                "+  public void setPub(final PublicationDetail pub) {",
                "+    this.pub = pub;",
                "+  }",
                "+",
                "+  public boolean isReverse() {",
                "+    return reverse;",
                "+  }",
                "+",
                "+  public void setReverse(final boolean reverse) {",
                "+    this.reverse = reverse;",
                "+  }",
                "+}",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java",
                "index f0e99ee2f8..6d9d746493 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java",
                "@@ -43,3 +43,3 @@ import org.silverpeas.core.contribution.publication.model.Alias;",
                " import org.silverpeas.core.contribution.publication.model.CompletePublication;",
                "-import org.silverpeas.core.contribution.publication.model.Link;",
                "+import org.silverpeas.core.contribution.publication.model.PublicationLink;",
                " import org.silverpeas.core.contribution.publication.model.PublicationDetail;",
                "@@ -932,4 +932,4 @@ public class DefaultPublicationService implements PublicationService, ComponentI",
                "       }",
                "-      List<Link> links = SeeAlsoDAO.getLinks(con, pubPK);",
                "-      List<Link> reverseLinks = SeeAlsoDAO.getReverseLinks(con, pubPK);",
                "+      List<PublicationLink> links = SeeAlsoDAO.getLinks(con, pubPK);",
                "+      List<PublicationLink> reverseLinks = SeeAlsoDAO.getReverseLinks(con, pubPK);",
                "       CompletePublication cp = new CompletePublication(detail, links, reverseLinks);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/AttachmentLink.java b/core-library/src/main/java/org/silverpeas/core/notification/user/AttachmentLink.java",
                "new file mode 100644",
                "index 0000000000..a704dbd014",
                "--- /dev/null",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/AttachmentLink.java",
                "@@ -0,0 +1,79 @@",
                "+package org.silverpeas.core.notification.user;",
                "+",
                "+import org.silverpeas.core.ResourceReference;",
                "+import org.silverpeas.core.contribution.attachment.AttachmentService;",
                "+import org.silverpeas.core.ui.DisplayI18NHelper;",
                "+import org.silverpeas.core.util.FileLink;",
                "+import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.util.memory.MemoryUnit;",
                "+",
                "+import java.util.List;",
                "+import java.util.stream.Collectors;",
                "+",
                "+/**",
                "+ * A Web link to an attachment of a contribution in Silverpeas to render in a notification message.",
                "+ * It extends the {@link FileLink} class by providing useful methods for templates.",
                "+ * @author mmoquillon",
                "+ */",
                "+public class AttachmentLink extends FileLink {",
                "+  private final String language;",
                "+",
                "+  /**",
                "+   * Gets all the web links to all of the documents attached to the specified contribution in",
                "+   * Silverpeas and for the given language.",
                "+   * @param resource a reference to the contribution in Silverpeas.",
                "+   * @param language the ISO 631-1 code of the language in which the attachments have to be get.",
                "+   * @return a list of Web links to the attachments. If the contribution have no attachments, then",
                "+   * an empty list is returned.",
                "+   */",
                "+  public static List<AttachmentLink> getForContribution(final ResourceReference resource,",
                "+      final String language) {",
                "+    final AttachmentService attachmentService = AttachmentService.get();",
                "+    return attachmentService.listDocumentsByForeignKey(resource, language).stream().map(d -> {",
                "+      final String label = StringUtil.isDefined(d.getTitle()) ? d.getTitle() : d.getFilename();",
                "+      return new AttachmentLink(d.getAttachmentURL(), label, d.getSize(), language);",
                "+    }).collect(Collectors.toList());",
                "+  }",
                "+",
                "+  /**",
                "+   * Constructs a new link with the specified URL, labels and file size.",
                "+   * @param linkUrl the URL of the linked file.",
                "+   * @param linkLabel the label to render for that link.",
                "+   * @param linkSize the size in byte of the linked file.",
                "+   * @param language the language of the attachment.",
                "+   */",
                "+  public AttachmentLink(final String linkUrl, final String linkLabel, final long linkSize,",
                "+      final String language) {",
                "+    super(linkUrl, linkLabel, linkSize);",
                "+    this.language = language == null ? DisplayI18NHelper.getDefaultLanguage():language;",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the size of the file referred by this link in text format. This method is used by",
                "+   * templates to indicate the size of the attached document targeted by this link.",
                "+   * @return the size of the linked file expressed into the more suitable size unit.",
                "+   */",
                "+  public String getFormattedLinkSize() {",
                "+    return formatFileSize(this.getLinkSize(), language);",
                "+  }",
                "+",
                "+  private String formatFileSize(final long size, final String language) {",
                "+    final long divider;",
                "+    final String unit;",
                "+    if (size >= MemoryUnit.MB.getLimit().longValue()) {",
                "+      divider = MemoryUnit.MB.getLimit().longValue();",
                "+      unit = MemoryUnit.GB.getLabel(language);",
                "+    } else if (size >= MemoryUnit.KB.getLimit().longValue()) {",
                "+      divider = MemoryUnit.KB.getLimit().longValue();",
                "+      unit = MemoryUnit.MB.getLabel(language);",
                "+    } else if (size >= MemoryUnit.B.getLimit().longValue()) {",
                "+      divider = MemoryUnit.B.getLimit().longValue();",
                "+      unit = MemoryUnit.KB.getLabel(language);",
                "+    } else {",
                "+      divider = 1;",
                "+      unit = MemoryUnit.B.getLabel(language);",
                "+    }",
                "+    return (size / divider) + \" \" + unit;",
                "+  }",
                "+}",
                "+  ",
                "\\ No newline at end of file",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractResourceUserNotificationBuilder.java b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractResourceUserNotificationBuilder.java",
                "index fae564afdc..c65ba2290c 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractResourceUserNotificationBuilder.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractResourceUserNotificationBuilder.java",
                "@@ -32,5 +32,6 @@ import org.silverpeas.core.notification.user.DefaultUserNotification;",
                " import org.silverpeas.core.notification.user.UserNotification;",
                "+import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                " import org.silverpeas.core.notification.user.client.constant.NotifAction;",
                " import org.silverpeas.core.notification.user.model.NotificationResourceData;",
                "-import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.util.Link;",
                " import org.silverpeas.core.util.URLUtil;",
                "@@ -74,3 +75,3 @@ public abstract class AbstractResourceUserNotificationBuilder<T>",
                "     if (getAction() == NotifAction.DELETE) {",
                "-      getNotificationMetaData().setLink(StringUtil.EMPTY);",
                "+      getNotificationMetaData().setLink(Link.EMPTY_LINK);",
                "     }",
                "@@ -92,5 +93,6 @@ public abstract class AbstractResourceUserNotificationBuilder<T>",
                "   protected NotificationResourceData initializeNotificationResourceData() {",
                "+    final NotificationMetaData metaData = getNotificationMetaData();",
                "     final NotificationResourceData notificationResourceData = new NotificationResourceData();",
                "-    notificationResourceData.setComponentInstanceId(getNotificationMetaData().getComponentId());",
                "-    notificationResourceData.setResourceUrl(getNotificationMetaData().getLink());",
                "+    notificationResourceData.setComponentInstanceId(metaData.getComponentId());",
                "+    notificationResourceData.setResourceUrl(metaData.getLink().getLinkUrl());",
                "     if (resource instanceof SilverpeasContent) {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "index 7fbf927c64..c1e008c867 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "@@ -75,2 +75,4 @@ import java.util.stream.Stream;",
                "+import static org.silverpeas.core.notification.user.client.NotificationParameterNames.*;",
                "+",
                " /**",
                "@@ -86,3 +88,3 @@ import java.util.stream.Stream;",
                " public class DefaultNotificationManager extends AbstractNotification",
                "-    implements NotificationParameterNames, ComponentInstanceDeletion, NotificationManager {",
                "+    implements ComponentInstanceDeletion, NotificationManager {",
                "@@ -772,5 +774,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     // Set Url parameter",
                "-    if (StringUtil.isDefined(params.getURL())) {",
                "-      theExtraParams.put(URL, (params.getURL().startsWith(\"http\") ? params.getURL() :",
                "-          getUserAutoRedirectURL(aUserId, params.getURL())));",
                "+    final String url = params.getLink().getLinkUrl();",
                "+    if (StringUtil.isDefined(url)) {",
                "+      theExtraParams.put(URL,",
                "+          (url.startsWith(\"http\") ? url : getUserAutoRedirectURL(aUserId, url)));",
                "     }",
                "@@ -833,5 +836,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     setSenderEmail(params, theExtraParams, senderName);",
                "-    if (StringUtil.isDefined(params.getURL())) {",
                "-      theExtraParams.put(URL, params.getURL());",
                "-      theExtraParams.put(LINKLABEL, params.getLinkLabel());",
                "+    if (StringUtil.isDefined(params.getLink().getLinkUrl())) {",
                "+      theExtraParams.put(URL, params.getLink().getLinkUrl());",
                "+      theExtraParams.put(LINKLABEL, params.getLink().getLinkLabel());",
                "     }",
                "@@ -946,5 +949,12 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       theExtraParams.put(SERVERURL, getUserAutoRedirectSilverpeasServerURL(aUserId));",
                "-      if (StringUtil.isDefined(params.getURL())) {",
                "-        theExtraParams.put(URL, computeURL(aUserId, params.getURL()));",
                "-        theExtraParams.put(LINKLABEL, params.getLinkLabel());",
                "+      if (StringUtil.isDefined(params.getLink().getLinkUrl())) {",
                "+        theExtraParams.put(URL, computeURL(aUserId, params.getLink().getLinkUrl()));",
                "+        theExtraParams.put(LINKLABEL, params.getLink().getLinkLabel());",
                "+      }",
                "+",
                "+      if (StringUtil.isDefined(params.getNotificationResourceData().getAttachmentTargetId())) {",
                "+        theExtraParams.put(ATTACHMENT_TARGETID,",
                "+            params.getNotificationResourceData().getAttachmentTargetId());",
                "+        theExtraParams.put(COMPONENTID,",
                "+            params.getNotificationResourceData().getComponentInstanceId());",
                "       }",
                "@@ -1039,8 +1049,2 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   }",
                "-",
                "-  @FunctionalInterface",
                "-  private interface Callback {",
                "-",
                "-    void call() throws NotificationException;",
                "-  }",
                " }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameterNames.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameterNames.java",
                "index fb59bab485..3aa5688448 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameterNames.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameterNames.java",
                "@@ -25,15 +25,21 @@ package org.silverpeas.core.notification.user.client;",
                "-public interface NotificationParameterNames {",
                "-  String SOURCE = \"SOURCE\";",
                "-  String SERVERURL = \"SERVERURL\";",
                "-  String URL = \"URL\";",
                "-  String LINKLABEL = \"LINKLABEL\";",
                "-  String FROM = \"FROM\";",
                "-  String SUBJECT = \"SUBJECT\";",
                "-  String SESSIONID = \"SESSIONID\";",
                "-  String DATE = \"DATE\";",
                "-  String LANGUAGE = \"LANGUAGE\";",
                "-  String COMMUNICATION = \"COMMUNICATION\";",
                "-  String ATTACHMENTID = \"ATTACHMENTID\";",
                "-  String HIDESMTPHEADERFOOTER = \"HIDESMTPHEADERFOOTER\";",
                "+public class NotificationParameterNames {",
                "+  public static final String SOURCE = \"SOURCE\";",
                "+  public static final String SERVERURL = \"SERVERURL\";",
                "+  public static final String URL = \"URL\";",
                "+  public static final String LINKLABEL = \"LINKLABEL\";",
                "+  public static final String FROM = \"FROM\";",
                "+  public static final String SUBJECT = \"SUBJECT\";",
                "+  public static final String SESSIONID = \"SESSIONID\";",
                "+  public static final String DATE = \"DATE\";",
                "+  public static final String LANGUAGE = \"LANGUAGE\";",
                "+  public static final String COMMUNICATION = \"COMMUNICATION\";",
                "+  public static final String ATTACHMENTID = \"ATTACHMENTID\";",
                "+  public static final String HIDESMTPHEADERFOOTER = \"HIDESMTPHEADERFOOTER\";",
                "+  public static final String COMPONENTID = \"COMPONENTID\";",
                "+  public static final String ATTACHMENT_TARGETID = \"ATTACHMENT_TARGETID\";",
                "+",
                "+  private NotificationParameterNames() {",
                "+",
                "+  }",
                " }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "index 4b97a4d08c..87ad59cd05 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "@@ -175,3 +175,3 @@ public class NotificationSender implements java.io.Serializable {",
                "     params.setTitle(metaData.getTitle(language))",
                "-        .setLinkLabel(metaData.getLinkLabel(language))",
                "+        .setLink(metaData.getLink(language))",
                "         .setMessage(metaData.getContent(language))",
                "@@ -206,4 +206,3 @@ public class NotificationSender implements java.io.Serializable {",
                "       NotificationMetaData metaData) {",
                "-    NotificationParameters params = new NotificationParameters();",
                "-",
                "+    final NotificationParameters params = new NotificationParameters();",
                "     params.setMessagePriority(metaData.getMessageType())",
                "@@ -213,3 +212,2 @@ public class NotificationSender implements java.io.Serializable {",
                "         .setSource(metaData.getSource())",
                "-        .setURL(metaData.getLink())",
                "         .setSessionId(metaData.getSessionId())",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterfaceImpl.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterfaceImpl.java",
                "index 828f354f26..24c7d14505 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterfaceImpl.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterfaceImpl.java",
                "@@ -61,4 +61,4 @@ public class SentNotificationInterfaceImpl implements SentNotificationInterface",
                "           getMessageType(), metaData.getDate(), metaData.getTitle(language), metaData.getSource(),",
                "-          metaData.getLink(), metaData.getSessionId(), metaData.getComponentId(), metaData.",
                "-          getContent(language));",
                "+              metaData.getLink().getLinkUrl(), metaData.getSessionId(), metaData.getComponentId(),",
                "+              metaData.getContent(language));",
                "       notif.setUsers(users);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegate.java b/core-library/src/main/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegate.java",
                "index 97f2058336..a88cd617bb 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegate.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegate.java",
                "@@ -26,2 +26,3 @@ package org.silverpeas.core.notification.user.delayed.delegate;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.silverpeas.core.ResourceReference;",
                " import org.silverpeas.core.admin.service.AdminException;",
                "@@ -44,2 +45,3 @@ import org.silverpeas.core.notification.user.server.NotificationServer;",
                " import org.silverpeas.core.notification.user.server.NotificationServerException;",
                "+import org.silverpeas.core.notification.user.AttachmentLink;",
                " import org.silverpeas.core.template.SilverpeasTemplate;",
                "@@ -51,2 +53,3 @@ import org.silverpeas.core.util.MapUtil;",
                " import org.silverpeas.core.util.ResourceLocator;",
                "+import org.silverpeas.core.util.StringUtil;",
                " import org.silverpeas.core.util.WebEncodeHelper;",
                "@@ -409,2 +412,11 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "+    if (StringUtil.isDefined(resource.getAttachmentTargetId()) &&",
                "+        StringUtil.isDefined(resource.getComponentInstanceId())) {",
                "+      ResourceReference attachmentTarget = new ResourceReference(resource.getAttachmentTargetId(),",
                "+          resource.getComponentInstanceId());",
                "+      final List<AttachmentLink> attachmentLinks =",
                "+          AttachmentLink.getForContribution(attachmentTarget, synthese.getLanguage());",
                "+      syntheseResource.setAttachmentLinks(attachmentLinks);",
                "+    }",
                "+",
                "     // Browsing notifications",
                "@@ -566,2 +578,3 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "+",
                "     // Set the message",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/delayed/synthese/SyntheseResource.java b/core-library/src/main/java/org/silverpeas/core/notification/user/delayed/synthese/SyntheseResource.java",
                "index 3547c6630a..bb9a2fc894 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/delayed/synthese/SyntheseResource.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/delayed/synthese/SyntheseResource.java",
                "@@ -25,3 +25,6 @@ package org.silverpeas.core.notification.user.delayed.synthese;",
                "+import org.silverpeas.core.notification.user.AttachmentLink;",
                "+",
                " import java.util.ArrayList;",
                "+import java.util.Collections;",
                " import java.util.List;",
                "@@ -37,2 +40,3 @@ public class SyntheseResource {",
                "   private String url;",
                "+  private List<AttachmentLink> attachmentLinks = null;",
                "   private final List<SyntheseResourceNotification> notifications = new ArrayList<>();",
                "@@ -71,2 +75,10 @@ public class SyntheseResource {",
                "+  public void setAttachmentLinks(final List<AttachmentLink> attachmentLinks) {",
                "+    this.attachmentLinks = attachmentLinks;",
                "+  }",
                "+",
                "+  public List<AttachmentLink> getAttachmentLinks() {",
                "+    return this.attachmentLinks == null ? Collections.emptyList():this.attachmentLinks;",
                "+  }",
                "+",
                "   public List<SyntheseResourceNotification> getNotifications() {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerUtil.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerUtil.java",
                "index a2aabdcb34..84778d6b05 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerUtil.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerUtil.java",
                "@@ -36,6 +36,10 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.util.Collection;",
                " import java.util.Date;",
                " import java.util.HashMap;",
                "+import java.util.List;",
                " import java.util.Map;",
                " import java.util.Set;",
                "+import java.util.stream.Collectors;",
                "+import java.util.stream.Stream;",
                "@@ -132,5 +136,5 @@ public class NotificationServerUtil {",
                "     char c;",
                "-    StringBuffer key = new StringBuffer();",
                "-    StringBuffer value = new StringBuffer();",
                "-    StringBuffer sb;",
                "+    StringBuilder key = new StringBuilder();",
                "+    StringBuilder value = new StringBuilder();",
                "+    StringBuilder sb;",
                "@@ -151,7 +155,11 @@ public class NotificationServerUtil {",
                "             if (strValue.startsWith(\"#DATE#\")) {",
                "-              strValue = strValue.substring(6, strValue.length());",
                "+              strValue = strValue.substring(6);",
                "               result.put(key.toString(), new Date(Long.valueOf(strValue)));",
                "             } else if (strValue.startsWith(\"#BOOLEAN#\")) {",
                "-              strValue = strValue.substring(9, strValue.length());",
                "+              strValue = strValue.substring(9);",
                "               result.put(key.toString(), new Boolean(strValue));",
                "+            } else if (strValue.startsWith(\"#LIST#\")) {",
                "+              strValue = strValue.substring(6);",
                "+              List<String> listValue = Stream.of(strValue.split(\",\")).collect(Collectors.toList());",
                "+              result.put(key.toString(), listValue);",
                "             } else {",
                "@@ -184,4 +192,8 @@ public class NotificationServerUtil {",
                "       } else if (strValue.startsWith(\"#BOOLEAN#\")) {",
                "-        strValue = strValue.substring(9, strValue.length());",
                "+        strValue = strValue.substring(9);",
                "         result.put(key.toString(), new Boolean(strValue));",
                "+      } else if (strValue.startsWith(\"#LIST#\")) {",
                "+        strValue = strValue.substring(6);",
                "+        List<String> listValue = Stream.of(strValue.split(\",\")).collect(Collectors.toList());",
                "+        result.put(key.toString(), listValue);",
                "       } else {",
                "@@ -253,3 +265,3 @@ public class NotificationServerUtil {",
                "             Date date = (Date) keyValues.get(theKey);",
                "-            keyValue = \"#DATE#\" + String.valueOf(date.getTime());",
                "+            keyValue = \"#DATE#\" + date.getTime();",
                "             success = true;",
                "@@ -264,3 +276,3 @@ public class NotificationServerUtil {",
                "             Boolean bool = (Boolean) keyValues.get(theKey);",
                "-            keyValue = \"#BOOLEAN#\" + String.valueOf(bool);",
                "+            keyValue = \"#BOOLEAN#\" + bool;",
                "             success = true;",
                "@@ -271,2 +283,14 @@ public class NotificationServerUtil {",
                "+        if (!success) {",
                "+          try {",
                "+            Collection<String> collection = (Collection<String>) keyValues.get(theKey);",
                "+            if (!collection.isEmpty()) {",
                "+              keyValue = \"#LIST#\" + collection.stream().collect(Collectors.joining(\",\"));",
                "+              success = true;",
                "+            }",
                "+          } catch (ClassCastException cce) {",
                "+            success = false;",
                "+          }",
                "+        }",
                "+",
                "         if (success) {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/smtp/SMTPListener.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/smtp/SMTPListener.java",
                "index 6ef20ce041..14587d3c03 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/smtp/SMTPListener.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/smtp/SMTPListener.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.notification.user.server.channel.smtp;",
                "+import org.silverpeas.core.ResourceReference;",
                " import org.silverpeas.core.admin.service.Administration;",
                "@@ -29,2 +30,3 @@ import org.silverpeas.core.mail.MailAddress;",
                " import org.silverpeas.core.mail.MailSending;",
                "+import org.silverpeas.core.notification.user.AttachmentLink;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -50,2 +52,4 @@ import javax.mail.internet.InternetAddress;",
                " import java.io.UnsupportedEncodingException;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                " import java.util.Map;",
                "@@ -108,61 +112,90 @@ public class SMTPListener extends AbstractListener implements MessageListener {",
                "       throw new NotificationServerException(\"Missing sender email address!\");",
                "-    } else {",
                "-      StringBuilder body = new StringBuilder();",
                "-      SilverpeasTemplate templateHeaderFooter =",
                "-          SilverpeasTemplateFactory.createSilverpeasTemplateOnCore(\"notification\");",
                "-",
                "-      templateHeaderFooter.setAttribute(notification_serverurl.toString(), serverUrl);",
                "-      templateHeaderFooter.setAttribute(notification_sendername.toString(), notification.getSenderName());",
                "-      templateHeaderFooter.setAttribute(notification_senderemail.toString(), tmpFromString);",
                "-",
                "-      if (hideSmtpHeaderFooter == null) {",
                "-        // Header Message",
                "-        String smtpMessageheader =",
                "-            templateHeaderFooter.applyFileTemplate(\"SMTPmessageHeader\" + '_' + tmpLanguageString);",
                "-        body.append(smtpMessageheader);",
                "-      }",
                "+    }",
                "-      // Body Message",
                "-      String messageBody = notification.getMessage();",
                "-        // Transform text to html format",
                "-      messageBody = WebEncodeHelper.convertWhiteSpacesForHTMLDisplay(messageBody + \"\\n\\n\");",
                "-      body.append(messageBody);",
                "+    StringBuilder body = new StringBuilder();",
                "+    SilverpeasTemplate templateHeaderFooter =",
                "+        SilverpeasTemplateFactory.createSilverpeasTemplateOnCore(\"notification\");",
                "-      if(tmpUrlString != null) {",
                "+    templateHeaderFooter.setAttribute(NOTIFICATION_SERVER_URL.toString(), serverUrl);",
                "+    templateHeaderFooter.setAttribute(NOTIFICATION_SENDER_NAME.toString(),",
                "+        notification.getSenderName());",
                "+    templateHeaderFooter.setAttribute(NOTIFICATION_SENDER_EMAIL.toString(), tmpFromString);",
                "-        templateHeaderFooter.setAttribute(notification_link.toString(), tmpUrlString);",
                "+    if (hideSmtpHeaderFooter == null) {",
                "+      // Header Message",
                "+      String smtpMessageheader =",
                "+          templateHeaderFooter.applyFileTemplate(\"SMTPmessageHeader\" + '_' + tmpLanguageString);",
                "+      body.append(smtpMessageheader);",
                "+    }",
                "-        if(StringUtil.isDefined(linkLabel)) {",
                "-          templateHeaderFooter.setAttribute(notification_linkLabel.toString(), linkLabel);",
                "-        } else {//link name by default",
                "-          templateHeaderFooter.setAttribute(notification_linkLabel.toString(), messages.getString(\"GoToContribution\"));",
                "-        }",
                "+    // Body Message",
                "+    String messageBody = notification.getMessage();",
                "+    // Transform text to html format",
                "+    messageBody = WebEncodeHelper.convertWhiteSpacesForHTMLDisplay(messageBody + \"\\n\\n\");",
                "+    body.append(messageBody);",
                "-      }",
                "+    if (tmpUrlString != null) {",
                "-      // The next treatments use String replacement mechanism",
                "-      StringBuilder beforeFooterMessage = new StringBuilder();",
                "-      StringBuilder afterFooterMessage = new StringBuilder();",
                "-",
                "-      if (hideSmtpHeaderFooter == null) {",
                "-        // Before Footer Message",
                "-        String smtpMessageBeforeFooter = templateHeaderFooter",
                "-            .applyFileTemplate(\"SMTPmessageFooter_before\" + '_' + tmpLanguageString);",
                "-        beforeFooterMessage.append(smtpMessageBeforeFooter);",
                "-        // After Footer Message",
                "-        String smtpMessageAfterFooter = templateHeaderFooter",
                "-            .applyFileTemplate(\"SMTPmessageFooter_after\" + '_' + tmpLanguageString);",
                "-        afterFooterMessage.append(smtpMessageAfterFooter);",
                "+      templateHeaderFooter.setAttribute(NOTIFICATION_LINK.toString(), tmpUrlString);",
                "+",
                "+      if (StringUtil.isDefined(linkLabel)) {",
                "+        templateHeaderFooter.setAttribute(NOTIFICATION_LINK_LABEL.toString(), linkLabel);",
                "+      } else {//link name by default",
                "+        templateHeaderFooter.setAttribute(NOTIFICATION_LINK_LABEL.toString(),",
                "+            messages.getString(\"GoToContribution\"));",
                "       }",
                "+    }",
                "+",
                "+    final List<AttachmentLink> attachments = getAttachmentLinks(keyValue, tmpLanguageString);",
                "+    if (!attachments.isEmpty()) {",
                "+      templateHeaderFooter.setAttribute(NOTIFICATION_ATTACHMENTS.toString(), attachments);",
                "+    }",
                "+",
                "+    // The next treatments use String replacement mechanism",
                "+    StringBuilder beforeFooterMessage = new StringBuilder();",
                "+    StringBuilder afterFooterMessage = new StringBuilder();",
                "-      String bodyAsString = body.toString();",
                "-      bodyAsString = bodyAsString.replace(NotificationMetaData.BEFORE_MESSAGE_FOOTER_TAG,",
                "-          beforeFooterMessage.toString().replaceAll(\"[\\\\n\\\\r]\", \"\"));",
                "-      bodyAsString = bodyAsString.replace(NotificationMetaData.AFTER_MESSAGE_FOOTER_TAG,",
                "-          afterFooterMessage.toString().replaceAll(\"[\\\\n\\\\r]\", \"\"));",
                "-      boolean isHtml = tmpAttachmentIdString == null;",
                "-      sendEmail(tmpFromString, notification.getSenderName(), notification.getTargetReceipt(),",
                "-          tmpSubjectString, bodyAsString, isHtml);",
                "+    if (hideSmtpHeaderFooter == null) {",
                "+      applyFooterTemplate(templateHeaderFooter, tmpLanguageString, beforeFooterMessage,",
                "+          afterFooterMessage);",
                "     }",
                "+",
                "+    String bodyAsString = body.toString();",
                "+    bodyAsString = bodyAsString.replace(NotificationMetaData.BEFORE_MESSAGE_FOOTER_TAG,",
                "+        beforeFooterMessage.toString().replaceAll(\"[\\\\n\\\\r]\", \"\"));",
                "+    bodyAsString = bodyAsString.replace(NotificationMetaData.AFTER_MESSAGE_FOOTER_TAG,",
                "+        afterFooterMessage.toString().replaceAll(\"[\\\\n\\\\r]\", \"\"));",
                "+    boolean isHtml = tmpAttachmentIdString == null;",
                "+    sendEmail(tmpFromString, notification.getSenderName(), notification.getTargetReceipt(),",
                "+        tmpSubjectString, bodyAsString, isHtml);",
                "+  }",
                "+",
                "+  private void applyFooterTemplate(final SilverpeasTemplate templateHeaderFooter,",
                "+      final String tmpLanguageString, final StringBuilder beforeFooterMessage,",
                "+      final StringBuilder afterFooterMessage) {",
                "+    // Before Footer Message",
                "+    String smtpMessageBeforeFooter = templateHeaderFooter.applyFileTemplate(",
                "+        \"SMTPmessageFooter_before\" + '_' + tmpLanguageString);",
                "+    beforeFooterMessage.append(smtpMessageBeforeFooter);",
                "+    // After Footer Message",
                "+    String smtpMessageAfterFooter =",
                "+        templateHeaderFooter.applyFileTemplate(\"SMTPmessageFooter_after\" + '_' + tmpLanguageString);",
                "+    afterFooterMessage.append(smtpMessageAfterFooter);",
                "+  }",
                "+",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  private List<AttachmentLink> getAttachmentLinks(final Map<String, Object> keyValues,",
                "+      final String language) {",
                "+    final String componentId = (String) keyValues.get(NotificationParameterNames.COMPONENTID);",
                "+    final String contributionId =",
                "+        (String) keyValues.get(NotificationParameterNames.ATTACHMENT_TARGETID);",
                "+    final List<AttachmentLink> links;",
                "+    if (StringUtil.isDefined(componentId) && StringUtil.isDefined(contributionId)) {",
                "+      final ResourceReference ref = new ResourceReference(contributionId, componentId);",
                "+      links = AttachmentLink.getForContribution(ref, language);",
                "+    } else {",
                "+      links = Collections.emptyList();",
                "+    }",
                "+    return links;",
                "   }",
                "@@ -172,6 +205,4 @@ public class SMTPListener extends AbstractListener implements MessageListener {",
                "    * format).",
                "-   *",
                "    * @param from : from field that will appear in the email header.",
                "    * @param fromName :",
                "-   * @see {@link InternetAddress}",
                "    * @param to : the email target destination.",
                "@@ -179,2 +210,3 @@ public class SMTPListener extends AbstractListener implements MessageListener {",
                "    * @param content : the message or payload of the email.",
                "+   * @see {@link InternetAddress}",
                "    */",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "index 1571605bba..371e9a0606 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "@@ -142,5 +142,8 @@ public class UserNotificationSessionController extends AbstractComponentSessionC",
                "     final UserNotificationWrapper userNotification = getUserNotification(context);",
                "+    final String contributionId = context.containsKey(NotificationContext.PUBLICATION_ID) ?",
                "+        context.get(NotificationContext.PUBLICATION_ID) :",
                "+        context.get(NotificationContext.CONTRIBUTION_ID);",
                "     userNotification.setTitle(context.get(\"title\"))",
                "         .setContent(context.get(\"content\").replaceAll(\"[\\\\n\\\\r]\", \"\"))",
                "-        .setAttachmentLinks(context.get(NotificationContext.CONTRIBUTION_ID))",
                "+        .setAttachmentLinksFor(contributionId)",
                "         .setSender(getUserDetail())",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "index f9333b4c90..6eaa19d0b0 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "@@ -3,6 +3,3 @@ package org.silverpeas.web.notificationuser.control;",
                " import org.owasp.encoder.Encode;",
                "-import org.silverpeas.core.ResourceReference;",
                " import org.silverpeas.core.admin.user.model.User;",
                "-import org.silverpeas.core.contribution.attachment.AttachmentService;",
                "-import org.silverpeas.core.contribution.attachment.model.SimpleDocument;",
                " import org.silverpeas.core.notification.user.UserNotification;",
                "@@ -14,3 +11,2 @@ import org.silverpeas.core.template.SilverpeasTemplate;",
                " import org.silverpeas.core.ui.DisplayI18NHelper;",
                "-import org.silverpeas.core.util.Link;",
                " import org.silverpeas.core.util.LocalizationBundle;",
                "@@ -20,3 +16,2 @@ import org.silverpeas.core.util.StringUtil;",
                " import java.util.Collection;",
                "-import java.util.List;",
                " import java.util.Objects;",
                "@@ -90,13 +85,5 @@ public class UserNotificationWrapper implements UserNotification {",
                "    */",
                "-  public UserNotificationWrapper setAttachmentLinks(final String contributionId) {",
                "+  public UserNotificationWrapper setAttachmentLinksFor(final String contributionId) {",
                "     if (StringUtil.isDefined(contributionId)) {",
                "-      final AttachmentService attachmentService = AttachmentService.get();",
                "-      final NotificationMetaData metaData = notification.getNotificationMetaData();",
                "-      for (String lang : DisplayI18NHelper.getLanguages()) {",
                "-        final ResourceReference ref =",
                "-            new ResourceReference(contributionId, metaData.getComponentId());",
                "-        final List<SimpleDocument> documents =",
                "-            attachmentService.listDocumentsByForeignKey(ref, lang);",
                "-        documents.forEach(d -> metaData.setLink(new Link(d.getAttachmentURL(), d.getTitle()), lang));",
                "-      }",
                "+      notification.getNotificationMetaData().setAttachmentTargetId(contributionId);",
                "     }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "index 788ff203e7..1e478d30e5 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "@@ -43,3 +43,2 @@ public class UserNotificationRequestRouter",
                "   private static final String RECIPIENT_EDITION_PARAM = \"recipientEdition\";",
                "-  private static final String COMPONENT_ID = \"componentId\";",
                "   private static final String RECIPIENT_USERS = \"recipientUsers\";",
                "@@ -87,3 +86,2 @@ public class UserNotificationRequestRouter",
                "         }",
                "-        final String instanceId = request.getParameter(COMPONENT_ID);",
                "         final String param = request.getParameter(RECIPIENT_EDITION_PARAM);",
                "@@ -95,3 +93,4 @@ public class UserNotificationRequestRouter",
                "         }",
                "-        request.setAttribute(COMPONENT_ID, instanceId);",
                "+        request.setAttribute(NotificationContext.COMPONENT_ID,",
                "+            context.get(NotificationContext.COMPONENT_ID));",
                "         request.setAttribute(RECIPIENT_EDITION_PARAM, areRecipientsEditable);",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentController.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentController.java",
                "index 51b192d68b..da5b7cf1ab 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentController.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentController.java",
                "@@ -25,3 +25,2 @@ package org.silverpeas.core.web.mvc.webcomponent;",
                "-import org.silverpeas.core.notification.user.UserNotification;",
                " import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;",
                "@@ -30,5 +29,2 @@ import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "-import java.util.Map;",
                "-import java.util.function.Function;",
                "-",
                " /**",
                "@@ -45,12 +41,2 @@ public abstract class WebComponentController<T extends WebComponentRequestContex",
                "-  /**",
                "-   * This static method has to be implemented by each web component controller concrete class if",
                "-   * the corresponding Silverpeas component supports the manual notification.",
                "-   * @return a provider of {@link UserNotification} objects for manual notification. By default,",
                "-   * returns null.",
                "-   */",
                "-  public static Function<Map<String, String>, UserNotification> getManualUserNotificationProvider() {",
                "-    return null;",
                "-  }",
                "-",
                "   public WebComponentController(final MainSessionController controller, final String spaceId,",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/webapi/publication/PublicationResource.java b/core-web/src/main/java/org/silverpeas/core/webapi/publication/PublicationResource.java",
                "index 8824c4ff3e..c7f4108a59 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/webapi/publication/PublicationResource.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/webapi/publication/PublicationResource.java",
                "@@ -26,3 +26,3 @@ package org.silverpeas.core.webapi.publication;",
                " import org.silverpeas.core.contribution.publication.model.CompletePublication;",
                "-import org.silverpeas.core.contribution.publication.model.Link;",
                "+import org.silverpeas.core.contribution.publication.model.PublicationLink;",
                " import org.silverpeas.core.contribution.publication.model.PublicationPK;",
                "@@ -109,4 +109,4 @@ public class PublicationResource extends AbstractPublicationResource {",
                "-    List<Link> links = publication.getLinkList();",
                "-    for (Link link : links) {",
                "+    List<PublicationLink> links = publication.getLinkList();",
                "+    for (PublicationLink link : links) {",
                "       if (link.getId().equals(linkId)) {"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameters.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationTemplateKey.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/model/NotificationResourceData.java",
                "core-api/src/main/java/org/silverpeas/core/util/FileLink.java",
                "core-api/src/main/java/org/silverpeas/core/util/Link.java",
                "core-api/src/main/java/org/silverpeas/core/util/memory/MemoryUnit.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/SeeAlsoDAO.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/model/CompletePublication.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/model/PublicationLink.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/AttachmentLink.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractResourceUserNotificationBuilder.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameterNames.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterfaceImpl.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegate.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/delayed/synthese/SyntheseResource.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerUtil.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/smtp/SMTPListener.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentController.java",
                "core-web/src/main/java/org/silverpeas/core/webapi/publication/PublicationResource.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10255": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: system, call, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, file, webapi, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10255",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "373148abc82715940cd171690f3205bde31402ab",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1540560671,
            "hunks": 1,
            "message": "Bug #10135: fixing a wrong behavior on Silverpeas's link specified on Link HTMLElement with target attribute filled with blank value.",
            "diff": [
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/WebCommonLookAndFeel.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/WebCommonLookAndFeel.java",
                "index 2fe997fd76..dbedd24bce 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/WebCommonLookAndFeel.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/WebCommonLookAndFeel.java",
                "@@ -190,4 +190,8 @@ class WebCommonLookAndFeel {",
                "         .append(\"';\")",
                "-        .append(STR_NEW_LINE)",
                "-        .append(addGlobalJSVariable(controller))",
                "+        .append(STR_NEW_LINE);",
                "+    if (request.getRequestURI().endsWith(lookSettings.getString(\"FrameJSP\"))) {",
                "+      code.append(\"var __spWindow_main_frame = true;\")",
                "+          .append(STR_NEW_LINE);",
                "+    }",
                "+    code.append(addGlobalJSVariable(controller))",
                "         .append(\"</script>\\n\");"
            ],
            "changed_files": [
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/WebCommonLookAndFeel.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10135": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: JSP",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10135",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "64e33a35084af352dc12ae30b4e3221ac9d72c9a",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1545125107,
            "hunks": 83,
            "message": "Feature #9884 Improve by cleaning the HTML content of the messager popup. Fix some bugs and remove the use of AlertUser in the session controller base classes in prevision of the AlertUser removing. SilverStatistics use now the messager to send a message to one connected user or to all connected users. Remove the javascript plugin messageme. It is now replaced by messager. UserZoom uses now messager in place of messageme. Fix some bugs",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/variables/VariableValueSet.java b/core-api/src/main/java/org/silverpeas/core/variables/VariableValueSet.java",
                "index f5e7958245..3b0532a5fa 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/variables/VariableValueSet.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/variables/VariableValueSet.java",
                "@@ -77,3 +77,6 @@ public class VariableValueSet implements Collection<VariableScheduledValue> {",
                "     return variable.values()",
                "-        .addAll(values.stream().peek(v -> v.setVariable(variable)).collect(Collectors.toList()));",
                "+        .addAll(values.stream().map(v -> {",
                "+          v.setVariable(variable);",
                "+          return v;",
                "+        }).collect(Collectors.toList()));",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/html/SupportedWebPlugins.java b/core-library/src/main/java/org/silverpeas/core/html/SupportedWebPlugins.java",
                "index fc244df601..95ec759e3f 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/html/SupportedWebPlugins.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/html/SupportedWebPlugins.java",
                "@@ -80,8 +80,2 @@ public enum SupportedWebPlugins {",
                "   RELATIONSHIP,",
                "-  /**",
                "-   * Silverpeas plugin to send a message (a user notification) to a given user. The HTML element on",
                "-   * which the plugin is invoked must present the rel attribute valued with the user identifier and",
                "-   * optionally the user full name (comma separated).",
                "-   */",
                "-  MESSAGEME,",
                "   /**",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/util/URLUtil.java b/core-library/src/main/java/org/silverpeas/core/util/URLUtil.java",
                "index f1fa90da74..10242c8671 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/util/URLUtil.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/util/URLUtil.java",
                "@@ -64,3 +64,2 @@ public class URLUtil {",
                "   public static final String CMP_JOBSEARCHPEAS = \"jobSearchPeas\";",
                "-  public static final String CMP_ALERTUSERPEAS = \"alertUserPeas\";",
                "   public static final String CMP_SILVERSTATISTICSPEAS = \"silverStatisticsPeas\";",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/util/logging/sys/SysLogger.java b/core-library/src/main/java/org/silverpeas/core/util/logging/sys/SysLogger.java",
                "index d462ec44ff..2be075c3e3 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/util/logging/sys/SysLogger.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/util/logging/sys/SysLogger.java",
                "@@ -44,3 +44,3 @@ public class SysLogger implements SilverLogger {",
                "   private final Logger logger;",
                "-  private volatile SilverLogger parent; // to keep strong ref to the parent and hence its config",
                "+  private SilverLogger parent; // to keep strong ref to the parent and hence its config",
                "                                         // with logging level and handlers",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/alertuser/AlertUserPeasException.java b/core-war/src/main/java/org/silverpeas/web/alertuser/AlertUserPeasException.java",
                "deleted file mode 100644",
                "index 90dd8e5625..0000000000",
                "--- a/core-war/src/main/java/org/silverpeas/web/alertuser/AlertUserPeasException.java",
                "+++ /dev/null",
                "@@ -1,100 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-/*--- formatted by Jindent 2.1, (www.c-lab.de/~jindent)",
                "- ---*/",
                "-",
                "-package org.silverpeas.web.alertuser;",
                "-",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                "-",
                "-/**",
                "- * Class declaration",
                "- * @author",
                "- */",
                "-public class AlertUserPeasException extends SilverpeasException {",
                "-",
                "-  private static final long serialVersionUID = 632675590702964332L;",
                "-",
                "-  /**",
                "-   * Constructor declaration",
                "-   * @param callingClass",
                "-   * @param errorLevel",
                "-   * @param message",
                "-   * @see",
                "-   */",
                "-  public AlertUserPeasException(String callingClass, int errorLevel,",
                "-      String message) {",
                "-    super(callingClass, errorLevel, message);",
                "-  }",
                "-",
                "-  /**",
                "-   * Constructor declaration",
                "-   * @param callingClass",
                "-   * @param errorLevel",
                "-   * @param message",
                "-   * @param extraParams",
                "-   * @see",
                "-   */",
                "-  public AlertUserPeasException(String callingClass, int errorLevel,",
                "-      String message, String extraParams) {",
                "-    super(callingClass, errorLevel, message, extraParams);",
                "-  }",
                "-",
                "-  /**",
                "-   * Constructor declaration",
                "-   * @param callingClass",
                "-   * @param errorLevel",
                "-   * @param message",
                "-   * @param nested",
                "-   * @see",
                "-   */",
                "-  public AlertUserPeasException(String callingClass, int errorLevel,",
                "-      String message, Exception nested) {",
                "-    super(callingClass, errorLevel, message, nested);",
                "-  }",
                "-",
                "-  /**",
                "-   * Constructor declaration",
                "-   * @param callingClass",
                "-   * @param errorLevel",
                "-   * @param message",
                "-   * @param extraParams",
                "-   * @param nested",
                "-   * @see",
                "-   */",
                "-  public AlertUserPeasException(String callingClass, int errorLevel,",
                "-      String message, String extraParams, Exception nested) {",
                "-    super(callingClass, errorLevel, message, extraParams, nested);",
                "-  }",
                "-",
                "-  /**",
                "-   * Method declaration",
                "-   * @return",
                "-   * @see",
                "-   */",
                "-  public String getModule() {",
                "-    return \"alertUserPeas\";",
                "-  }",
                "-",
                "-}",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/alertuser/control/AlertUserPeasSessionController.java b/core-war/src/main/java/org/silverpeas/web/alertuser/control/AlertUserPeasSessionController.java",
                "deleted file mode 100644",
                "index ad33dc0e4a..0000000000",
                "--- a/core-war/src/main/java/org/silverpeas/web/alertuser/control/AlertUserPeasSessionController.java",
                "+++ /dev/null",
                "@@ -1,198 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.web.alertuser.control;",
                "-",
                "-import org.silverpeas.core.template.SilverpeasTemplate;",
                "-import org.silverpeas.core.ui.DisplayI18NHelper;",
                "-import org.silverpeas.core.util.ArrayUtil;",
                "-import org.silverpeas.core.util.URLUtil;",
                "-import org.silverpeas.core.web.mvc.util.AlertUser;",
                "-import org.silverpeas.core.notification.user.client.GroupRecipient;",
                "-import org.silverpeas.core.notification.NotificationException;",
                "-import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.NotificationSender;",
                "-import org.silverpeas.core.notification.user.client.UserRecipient;",
                "-import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;",
                "-import org.silverpeas.core.web.mvc.controller.ComponentContext;",
                "-import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "-import org.silverpeas.core.web.selection.Selection;",
                "-import org.silverpeas.core.web.selection.SelectionUsersGroups;",
                "-import org.silverpeas.core.admin.user.model.Group;",
                "-import org.silverpeas.core.admin.user.model.UserDetail;",
                "-import org.owasp.encoder.Encode;",
                "-import org.silverpeas.core.util.Pair;",
                "-import org.silverpeas.core.util.StringUtil;",
                "-",
                "-import java.util.Arrays;",
                "-import java.util.List;",
                "-",
                "-/**",
                "- * Class declaration",
                "- *",
                "- * @author",
                "- */",
                "-public class AlertUserPeasSessionController extends AbstractComponentSessionController {",
                "-",
                "-  protected AlertUser alertUser;",
                "-  protected Selection selection;",
                "-  protected NotificationSender notificationSender;",
                "-  protected String webContext = URLUtil.getApplicationURL();",
                "-  protected UserDetail[] userRecipients;",
                "-  protected Group[] groupRecipients;",
                "-",
                "-  /**",
                "-   * Standard Session Controller Constructeur",
                "-   *",
                "-   * @param mainSessionCtrl The user's profile",
                "-   * @param componentContext The component's profile",
                "-   *",
                "-   */",
                "-  public AlertUserPeasSessionController(MainSessionController mainSessionCtrl,",
                "-      ComponentContext componentContext) {",
                "-    super(mainSessionCtrl, componentContext,",
                "-        \"org.silverpeas.alertUserPeas.multilang.alertUserPeasBundle\",",
                "-        \"org.silverpeas.alertUserPeas.settings.alertUserPeasIcons\");",
                "-    setComponentRootName(URLUtil.CMP_ALERTUSERPEAS);",
                "-    alertUser = getAlertUser();",
                "-    selection = getSelection();",
                "-    notificationSender = new NotificationSender(null);",
                "-  }",
                "-",
                "-  public void init() {",
                "-    userRecipients = new UserDetail[0];",
                "-    groupRecipients = new Group[0];",
                "-  }",
                "-",
                "-  // -------------------------------------------------------------------------------------------------------------------",
                "-  // ------------------------------------------- Navigation Functions",
                "-  // ----------------------------------------------",
                "-  // -------------------------------------------------------------------------------------------------------------------",
                "-  public Pair getHostComponentName() {",
                "-    return alertUser.getHostComponentName();",
                "-  }",
                "-",
                "-  public String getHostSpaceName() {",
                "-    return alertUser.getHostSpaceName();",
                "-  }",
                "-",
                "-  public String getHostComponentId() {",
                "-    return alertUser.getHostComponentId();",
                "-  }",
                "-",
                "-  public List<String> getHostPath() {",
                "-    return alertUser.getHostPath();",
                "-  }",
                "-",
                "-  public UserDetail[] getUserRecipients() {",
                "-    return userRecipients;",
                "-  }",
                "-",
                "-  public Group[] getGroupRecipients() {",
                "-    return groupRecipients;",
                "-  }",
                "-",
                "-  public NotificationMetaData getNotificationMetaData() {",
                "-    return alertUser.getNotificationMetaData();",
                "-  }",
                "-",
                "-  // initialisation de Selection pour nav vers SelectionPeas",
                "-  public String initSelection() {",
                "-    String url = webContext + URLUtil.getURL(getComponentRootName(), null, null);",
                "-    String goUrl = url + \"FromSelection\";",
                "-    String cancelUrl = url + \"Close\";",
                "-",
                "-    selection.resetAll();",
                "-",
                "-    selection.setGoBackURL(goUrl);",
                "-    selection.setCancelURL(cancelUrl);",
                "-",
                "-    // bien que le up s'affiche en popup, le m\u00c3\u00a9canisme de fermeture est assur\u00c3\u00a9",
                "-    // par le composant=> il est donc n\u00c3\u00a9cessaire d'indiquer",
                "-    // \u00c3\u00a0 l'UserPanelPeas de ne pas s'occuper de cette fermeture!",
                "-    selection.setHostPath(null);",
                "-    selection.setHostComponentName(getHostComponentName());",
                "-    selection.setHostSpaceName(getHostSpaceName());",
                "-",
                "-    // Add extra params",
                "-    SelectionUsersGroups sug = alertUser.getSelectionUsersGroups();",
                "-    if (sug == null) {",
                "-      sug = new SelectionUsersGroups();",
                "-    }",
                "-    sug.setComponentId(getHostComponentId());",
                "-    selection.setExtraParams(sug);",
                "-",
                "-    // Limitations",
                "-    if (getUserDetail().isUserManualNotificationUserReceiverLimit()) {",
                "-      selection",
                "-          .setSelectedUserLimit(getUserDetail().getUserManualNotificationUserReceiverLimitValue());",
                "-    }",
                "-",
                "-    return Selection.getSelectionURL();",
                "-  }",
                "-",
                "-  // recup\u00c3\u00a9ration des users et groupes selectionn\u00c3\u00a9s au travers de",
                "-  // selectionPeas",
                "-  public void computeSelection() {",
                "-    userRecipients = SelectionUsersGroups.getUserDetails(selection",
                "-        .getSelectedElements());",
                "-    groupRecipients = SelectionUsersGroups.getGroups(selection",
                "-        .getSelectedSets());",
                "-    Arrays.sort(userRecipients);",
                "-    Arrays.sort(groupRecipients);",
                "-  }",
                "-",
                "-  public void prepareNotification(String message) {",
                "-    NotificationMetaData notifMetaData = getNotificationMetaData();",
                "-    for (String userId : SelectionUsersGroups.getUserIds(getUserRecipients())) {",
                "-      notifMetaData.addUserRecipient(new UserRecipient(userId));",
                "-    }",
                "-    for (String groupId : SelectionUsersGroups.getGroupIds(getGroupRecipients())) {",
                "-      notifMetaData.addGroupRecipient(new GroupRecipient(groupId));",
                "-    }",
                "-    if (StringUtil.isDefined(message) && (ArrayUtil.isNotEmpty(getUserRecipients())",
                "-        || ArrayUtil.isNotEmpty(getGroupRecipients()))) {",
                "-      String safeMessage = Encode.forHtml(message);",
                "-      for (String language : DisplayI18NHelper.getLanguages()) {",
                "-        setNotificationContent(safeMessage, language);",
                "-      }",
                "-    }",
                "-    setSender();",
                "-  }",
                "-",
                "-  private void setSender() {",
                "-    getNotificationMetaData().setSender(getUserId());",
                "-    for (SilverpeasTemplate template : getNotificationMetaData().getTemplates().values()) {",
                "-      template.setAttribute(\"sender\", getUserDetail());",
                "-      template.setAttribute(\"senderName\", getUserDetail().getDisplayedName());",
                "-    }",
                "-  }",
                "-",
                "-  private void setNotificationContent(String message, String language) {",
                "-    getNotificationMetaData().addExtraMessage(message, language);",
                "-  }",
                "-",
                "-  public void sendNotification() throws NotificationException {",
                "-    notificationSender.notifyUser(getNotificationMetaData().manualUserNotification());",
                "-  }",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/alertuser/servlets/AlertUserPeasRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/alertuser/servlets/AlertUserPeasRequestRouter.java",
                "deleted file mode 100644",
                "index 447059c6e6..0000000000",
                "--- a/core-war/src/main/java/org/silverpeas/web/alertuser/servlets/AlertUserPeasRequestRouter.java",
                "+++ /dev/null",
                "@@ -1,125 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.web.alertuser.servlets;",
                "-",
                "-import org.silverpeas.core.util.StringUtil;",
                "-import org.silverpeas.web.alertuser.control.AlertUserPeasSessionController;",
                "-import org.silverpeas.core.web.mvc.controller.ComponentContext;",
                "-import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "-import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;",
                "-import org.silverpeas.core.admin.user.model.Group;",
                "-import org.silverpeas.core.admin.user.model.UserDetail;",
                "-import org.silverpeas.core.web.http.HttpRequest;",
                "-",
                "-/**",
                "- * Class declaration",
                "- *",
                "- */",
                "-public class AlertUserPeasRequestRouter extends ComponentRequestRouter<AlertUserPeasSessionController> {",
                "-",
                "-  private static final long serialVersionUID = 5335551355656715989L;",
                "-",
                "-  @Override",
                "-  public AlertUserPeasSessionController createComponentSessionController(",
                "-      MainSessionController mainSessionCtrl, ComponentContext componentContext) {",
                "-    return new AlertUserPeasSessionController(mainSessionCtrl, componentContext);",
                "-  }",
                "-",
                "-  /**",
                "-   * This method has to be implemented in the component request rooter class. returns the session",
                "-   * control bean name to be put in the request object ex : for almanach, returns \"almanach\"",
                "-   */",
                "-  @Override",
                "-  public String getSessionControlBeanName() {",
                "-    return \"alertUserPeas\";",
                "-  }",
                "-",
                "-  /**",
                "-   * This method has to be implemented by the component request rooter it has to compute a",
                "-   * destination page",
                "-   *",
                "-   *",
                "-   * @param function The entering request function (ex : \"Main.jsp\")",
                "-   * @param scc The component Session Control, build and initialised.",
                "-   * @param request",
                "-   * @return The complete destination URL for a forward (ex :",
                "-   * \"/almanach/jsp/almanach.jsp?flag=user\")",
                "-   */",
                "-  @Override",
                "-  public String getDestination(String function, AlertUserPeasSessionController scc,",
                "-      HttpRequest request) {",
                "-    String destination = \"\";",
                "-",
                "-    try {",
                "-      if (!StringUtil.isDefined(request.getCharacterEncoding())) {",
                "-        request.setCharacterEncoding(\"UTF-8\");",
                "-      }",
                "-      if (function.equals(\"Main\")) {",
                "-        scc.init();",
                "-        destination = getDestination(\"ToSelection\", scc, request);",
                "-      } else if (function.startsWith(\"ToSelection\")) {",
                "-        // Navigating to the user/group selection",
                "-        destination = scc.initSelection();",
                "-      } else if (function.startsWith(\"FromSelection\")) {",
                "-        // Retrieving the selected user/group",
                "-        scc.computeSelection();",
                "-        UserDetail[] userDetails = scc.getUserRecipients();",
                "-        Group[] groups = scc.getGroupRecipients();",
                "-        if ((userDetails.length > 0) || (groups.length > 0)) {",
                "-          request.setAttribute(\"UserR\", userDetails);",
                "-          request.setAttribute(\"GroupR\", groups);",
                "-          setHostAttributes(scc, request);",
                "-          destination = \"/alertUserPeas/jsp/writeMessage.jsp\";",
                "-        } else {",
                "-          // No users or groups => clsoing the popup",
                "-          destination = getDestination(\"Close\", scc, request);",
                "-        }",
                "-      } else if (function.startsWith(\"Close\")) {",
                "-        // Closing the popup",
                "-        destination = \"/alertUserPeas/jsp/close.jsp\";",
                "-      } else if (function.startsWith(\"ToAlert\")) {",
                "-        setHostAttributes(scc, request);",
                "-        String message = request.getParameter(\"messageAux\");",
                "-        scc.prepareNotification(message);",
                "-        destination = \"/alertUserPeas/jsp/sendMessage.jsp\";",
                "-      } else if (function.startsWith(\"Notify\")) {",
                "-        // Sending the notification",
                "-        setHostAttributes(scc, request);",
                "-        scc.sendNotification();",
                "-        destination = \"/alertUserPeas/jsp/messageOk.jsp\";",
                "-      }",
                "-    } catch (Exception e) {",
                "-      request.setAttribute(\"javax.servlet.jsp.jspException\", e);",
                "-      destination = \"/admin/jsp/errorpageMain.jsp\";",
                "-    }",
                "-",
                "-    return destination;",
                "-  }",
                "-",
                "-  private void setHostAttributes(AlertUserPeasSessionController scc, HttpRequest request) {",
                "-    request.setAttribute(\"HostComponentName\", scc.getHostComponentName());",
                "-    request.setAttribute(\"HostSpaceName\", scc.getHostSpaceName());",
                "-    request.setAttribute(\"HostPath\", scc.getHostPath());",
                "-  }",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPRequestRouter.java",
                "index 2ddc661177..f36e814565 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPRequestRouter.java",
                "@@ -78,7 +78,2 @@ public class POPUPRequestRouter extends ComponentRequestRouter<POPUPSessionContr",
                "       destination = \"/POPUP/jsp/readMessage.jsp\";",
                "-    } else if (function.startsWith(\"ToAlert\")) {",
                "-      popupSC.notifySession(request.getParameter(\"theUserId\"), request",
                "-          .getParameter(\"messageAux\"));",
                "-      request.setAttribute(\"action\", \"Close\");",
                "-      destination = \"/POPUP/jsp/readMessage.jsp\";",
                "     }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPSessionController.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPSessionController.java",
                "index 37a5bfed00..382e0c1e54 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPSessionController.java",
                "@@ -25,7 +25,2 @@ package org.silverpeas.web.notificationserver.channel.popup;",
                "-import org.owasp.encoder.Encode;",
                "-import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.NotificationSender;",
                "-import org.silverpeas.core.notification.user.client.UserRecipient;",
                "-import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                " import org.silverpeas.core.notification.user.server.channel.popup.POPUPException;",
                "@@ -34,3 +29,2 @@ import org.silverpeas.core.notification.user.server.channel.popup.POPUPPersisten",
                " import org.silverpeas.core.util.URLUtil;",
                "-import org.silverpeas.core.util.logging.SilverLogger;",
                " import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;",
                "@@ -110,24 +104,2 @@ public class POPUPSessionController extends AbstractComponentSessionController {",
                "-  /**",
                "-   * Send message to user",
                "-   * @param userId",
                "-   * @param message",
                "-   */",
                "-  public void notifySession(String userId, String message) {",
                "-    try {",
                "-      NotificationSender notificationSender = new NotificationSender(null);",
                "-      NotificationMetaData notifMetaData = new NotificationMetaData();",
                "-",
                "-      notifMetaData.setTitle(\"\");",
                "-      notifMetaData.setContent(Encode.forHtml(message));",
                "-      notifMetaData.setSource(getUserDetail().getDisplayedName());",
                "-      notifMetaData.setSender(getUserId());",
                "-      notifMetaData.setAnswerAllowed(true);",
                "-      notifMetaData.addUserRecipient(new UserRecipient(userId));",
                "-      notificationSender.notifyUser(BuiltInNotifAddress.BASIC_POPUP.getId(), notifMetaData);",
                "-    } catch (Exception ex) {",
                "-      SilverLogger.getLogger(this).error(\"Error on session notify\", ex);",
                "-    }",
                "-  }",
                "-",
                " }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "index 81eb9db0b9..8003b71e48 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "@@ -72,3 +72,3 @@ public class UserNotificationSessionController extends AbstractComponentSessionC",
                "       } else {",
                "-        userIds = userIdsLine.split(\"_\");",
                "+        userIds = userIdsLine.split(\",\");",
                "       }",
                "@@ -89,3 +89,3 @@ public class UserNotificationSessionController extends AbstractComponentSessionC",
                "     if (StringUtil.isDefined(groupIdsLine)) {",
                "-      final String[] groupIds = groupIdsLine.split(\"_\");",
                "+      final String[] groupIds = groupIdsLine.split(\",\");",
                "       groups = Stream.of(groupIds).map(Group::getById).collect(Collectors.toList());",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "index 42a3b89fa8..453b2eb000 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "@@ -54,6 +54,6 @@ public class UserNotificationWrapper implements UserNotification {",
                "       metaData.setTitle(Encode.forHtml(title));",
                "-      for (String language : DisplayI18NHelper.getLanguages()) {",
                "+      for (String lang : DisplayI18NHelper.getLanguages()) {",
                "         LocalizationBundle bundle = ResourceLocator.getLocalizationBundle(",
                "-            \"org.silverpeas.alertUserPeas.multilang.alertUserPeasBundle\", language);",
                "-        metaData.addLanguage(language, title, bundle.getString(\"AuthorMessage\") + \" :\");",
                "+            \"org.silverpeas.alertUserPeas.multilang.alertUserPeasBundle\", lang);",
                "+        metaData.addLanguage(lang, title, bundle.getString(\"AuthorMessage\") + \" :\");",
                "       }",
                "@@ -72,4 +72,4 @@ public class UserNotificationWrapper implements UserNotification {",
                "       metaData.setContent(Encode.forHtml(content));",
                "-      for (String language : DisplayI18NHelper.getLanguages()) {",
                "-        metaData.addExtraMessage(content, language);",
                "+      for (String lang : DisplayI18NHelper.getLanguages()) {",
                "+        metaData.addExtraMessage(content, lang);",
                "       }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "index 309b72e4ff..e997700aa7 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "@@ -99,3 +99,2 @@ public class UserNotificationRequestRouter",
                "         nuSC.sendNotification(context);",
                "-        nuSC.getAlertUser().resetAll();",
                "         nuSC.clearNotification();",
                "@@ -103,3 +102,2 @@ public class UserNotificationRequestRouter",
                "       } else if (RELEASE_FUNCTION.equals(function)) {",
                "-        nuSC.getAlertUser().resetAll();",
                "         nuSC.clearNotification();",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcRequestRouter.java",
                "index 037299207e..628649b482 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcRequestRouter.java",
                "@@ -25,4 +25,4 @@ package org.silverpeas.web.pdc.servlets;",
                "-import org.silverpeas.core.web.mvc.util.AccessForbiddenException;",
                "-import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.admin.user.model.Group;",
                "+import org.silverpeas.core.admin.user.model.UserDetail;",
                " import org.silverpeas.core.i18n.I18NHelper;",
                "@@ -32,3 +32,5 @@ import org.silverpeas.core.pdc.pdc.model.AxisPK;",
                " import org.silverpeas.core.pdc.pdc.model.Value;",
                "-import org.silverpeas.web.pdc.control.PdcSessionController;",
                "+import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "+import org.silverpeas.core.web.http.HttpRequest;",
                " import org.silverpeas.core.web.mvc.controller.ComponentContext;",
                "@@ -36,7 +38,4 @@ import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                " import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;",
                "-import org.silverpeas.core.silvertrace.SilverTrace;",
                "-import org.silverpeas.core.admin.user.model.Group;",
                "-import org.silverpeas.core.admin.user.model.UserDetail;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                "-import org.silverpeas.core.web.http.HttpRequest;",
                "+import org.silverpeas.core.web.mvc.util.AccessForbiddenException;",
                "+import org.silverpeas.web.pdc.control.PdcSessionController;",
                "@@ -204,4 +203,3 @@ public class PdcRequestRouter extends ComponentRequestRouter<PdcSessionControlle",
                "         if (!pdcSC.isPDCAdmin() && !pdcSC.isAxisManager(axeId)) {",
                "-          throw new AccessForbiddenException(\"PdcRequestRouter.EditAxit\",",
                "-              SilverpeasException.WARNING, null);",
                "+          throw new AccessForbiddenException(\"Axis edition forbidden\");",
                "         }",
                "@@ -250,4 +248,3 @@ public class PdcRequestRouter extends ComponentRequestRouter<PdcSessionControlle",
                "         if (!pdcSC.isPDCAdmin()) {",
                "-          throw new AccessForbiddenException(\"PdcRequestRouter.\" + function,",
                "-              SilverpeasException.WARNING, null);",
                "+          throw new AccessForbiddenException(\"Access forbidden\");",
                "         }",
                "@@ -529,4 +526,3 @@ public class PdcRequestRouter extends ComponentRequestRouter<PdcSessionControlle",
                "         if (!isAdmin) {",
                "-          throw new AccessForbiddenException(\"PdcRequestRouter.DeleteValue\",",
                "-              SilverpeasException.WARNING, null);",
                "+          throw new AccessForbiddenException(\"Axis value deletion forbidden\");",
                "         }",
                "@@ -561,4 +557,3 @@ public class PdcRequestRouter extends ComponentRequestRouter<PdcSessionControlle",
                "         if (!isAdmin) {",
                "-          throw new AccessForbiddenException(\"PdcRequestRouter.DeleteValue\",",
                "-              SilverpeasException.WARNING, null);",
                "+          throw new AccessForbiddenException(\"Axis value deletion forbidden\");",
                "         }",
                "@@ -751,5 +746,3 @@ public class PdcRequestRouter extends ComponentRequestRouter<PdcSessionControlle",
                "         } catch (Exception e) {",
                "-          SilverTrace.warn(\"jobStartPagePeas\",",
                "-              \"JobStartPagePeasRequestRouter.getDestination()\",",
                "-              \"root.EX_USERPANEL_FAILED\", \"function = \" + function, e);",
                "+          SilverLogger.getLogger(this).error(e);",
                "         }",
                "@@ -761,5 +754,3 @@ public class PdcRequestRouter extends ComponentRequestRouter<PdcSessionControlle",
                "         } catch (Exception e) {",
                "-          SilverTrace.warn(\"jobStartPagePeas\",",
                "-              \"JobStartPagePeasRequestRouter.getDestination()\",",
                "-              \"root.EX_USERPANEL_FAILED\", \"function = \" + function, e);",
                "+          SilverLogger.getLogger(this).error(e);",
                "         }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasSessionController.java b/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasSessionController.java",
                "index 91f45cd383..aab29e7039 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasSessionController.java",
                "@@ -517,22 +517,2 @@ public class SilverStatisticsPeasSessionController extends AbstractComponentSess",
                "   }",
                "-",
                "-  /**",
                "-   * M\u00c3\u00a9thode d'envoi de notification aux utilisateurs connect\u00c3\u00a9s",
                "-   * @param listUserDetail - liste des utilisateurs connect\u00c3\u00a9s",
                "-   * @param message",
                "-   */",
                "-  public void notifyAllSessions(Collection<SessionInfo> listUserDetail, String message) {",
                "-    List<String> notifiedUsers = new ArrayList<>();",
                "-",
                "-    if (listUserDetail != null) {",
                "-      for (SessionInfo sessionInfo : listUserDetail) {",
                "-        if (!notifiedUsers.contains(sessionInfo.getUserDetail().getId()) ||",
                "-            sessionInfo.getUserDetail().isAccessGuest()) {",
                "-          notifySession(sessionInfo.getUserDetail().getId(), message);",
                "-          notifiedUsers.add(sessionInfo.getUserDetail().getId());",
                "-        }",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "   /*",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/silverstatistics/servlets/SilverStatisticsPeasRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/silverstatistics/servlets/SilverStatisticsPeasRequestRouter.java",
                "index e88c3d1f89..9a43aaa0a5 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/silverstatistics/servlets/SilverStatisticsPeasRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/silverstatistics/servlets/SilverStatisticsPeasRequestRouter.java",
                "@@ -118,20 +118,2 @@ public class SilverStatisticsPeasRequestRouter extends",
                "         destination = \"/silverStatisticsPeas/jsp/connections.jsp\";",
                "-      } else if (function.equals(\"DisplayNotifySession\")) {",
                "-        request.setAttribute(\"userDetail\", statsSC.getTargetUserDetail(request",
                "-            .getParameter(\"theUserId\")));",
                "-        request.setAttribute(\"action\", \"NotifyUser\");",
                "-        destination = \"/silverStatisticsPeas/jsp/writeMessage.jsp\";",
                "-      } else if (function.equals(\"DisplayNotifyAllSessions\")) {",
                "-        request.setAttribute(\"action\", \"NotifyAllUsers\");",
                "-        destination = \"/silverStatisticsPeas/jsp/writeMessage.jsp\";",
                "-      } else if (function.equals(\"ToAlert\")) {",
                "-        statsSC",
                "-            .notifySession(request.getParameter(\"theUserId\"), request.getParameter(\"messageAux\"));",
                "-        request.setAttribute(\"action\", \"Close\");",
                "-        destination = \"/silverStatisticsPeas/jsp/writeMessage.jsp\";",
                "-      } else if (function.equals(\"ToAlertAllUsers\")) {",
                "-        statsSC.notifyAllSessions(statsSC.getConnectedUsersList(), request",
                "-            .getParameter(\"messageAux\"));",
                "-        request.setAttribute(\"action\", \"Close\");",
                "-        destination = \"/silverStatisticsPeas/jsp/writeMessage.jsp\";",
                "       } else if (function.startsWith(\"ViewConnections\")) {",
                "diff --git a/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/AbstractSpringDatasourceTest.java b/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/AbstractSpringDatasourceTest.java",
                "deleted file mode 100644",
                "index d87752d511..0000000000",
                "--- a/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/AbstractSpringDatasourceTest.java",
                "+++ /dev/null",
                "@@ -1,115 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.stratelia.silverpeas.silverStatisticsPeas.control;",
                "-",
                "-import java.io.InputStream;",
                "-",
                "-import javax.naming.InitialContext;",
                "-import javax.sql.DataSource;",
                "-",
                "-import com.silverpeas.jndi.SimpleMemoryContextFactory;",
                "-",
                "-import org.silverpeas.util.DBUtil;",
                "-",
                "-import org.apache.commons.io.IOUtils;",
                "-import org.dbunit.database.DatabaseConnection;",
                "-import org.dbunit.database.IDatabaseConnection;",
                "-import org.dbunit.dataset.IDataSet;",
                "-import org.dbunit.dataset.ReplacementDataSet;",
                "-import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;",
                "-import org.dbunit.operation.DatabaseOperation;",
                "-import org.junit.After;",
                "-import org.junit.AfterClass;",
                "-import org.junit.Before;",
                "-import org.junit.BeforeClass;",
                "-import org.springframework.context.support.ClassPathXmlApplicationContext;",
                "-",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-public abstract class AbstractSpringDatasourceTest {",
                "-",
                "-  private static ClassPathXmlApplicationContext springContext;",
                "-  private static DataSource datasource;",
                "-",
                "-  @BeforeClass",
                "-  public static void setUpClass() throws Exception {",
                "-    DBUtil.clearTestInstance();",
                "-    SimpleMemoryContextFactory.setUpAsInitialContext();",
                "-    configureJNDIDatasource();",
                "-  }",
                "-",
                "-  private static void configureJNDIDatasource() throws Exception {",
                "-    springContext = new ClassPathXmlApplicationContext(\"/spring-silverpeas.xml\",",
                "-        \"/com/stratelia/silverpeas/silverStatisticsPeas/control/spring-h2-datasource.xml\");",
                "-    datasource = springContext.getBean(\"dataSource\", DataSource.class);",
                "-    InitialContext ic = new InitialContext();",
                "-    ic.bind(\"java:/datasources/silverpeas-jdbc\", datasource);",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void tearDownClass() throws Exception {",
                "-    InitialContext ic = new InitialContext();",
                "-    ic.unbind(\"java:/datasources/silverpeas-jdbc\");",
                "-    springContext.close();",
                "-    DBUtil.clearTestInstance();",
                "-    SimpleMemoryContextFactory.tearDownAsInitialContext();",
                "-  }",
                "-",
                "-  @Before",
                "-  public void prepareData() throws Exception {",
                "-    IDatabaseConnection connection = new DatabaseConnection(datasource.getConnection());",
                "-    try {",
                "-      DatabaseOperation.CLEAN_INSERT.execute(connection, getDataSet());",
                "-    } finally {",
                "-      connection.close();",
                "-    }",
                "-  }",
                "-",
                "-  @After",
                "-  public void cleanData() throws Exception {",
                "-    IDatabaseConnection connection = new DatabaseConnection(datasource.getConnection());",
                "-    try {",
                "-      DatabaseOperation.DELETE_ALL.execute(connection, getDataSet());",
                "-    } finally {",
                "-      connection.close();",
                "-    }",
                "-  }",
                "-",
                "-  protected IDataSet getDataSet() throws Exception {",
                "-    FlatXmlDataSetBuilder builder = new FlatXmlDataSetBuilder();",
                "-    InputStream in = AbstractSpringDatasourceTest.class.getResourceAsStream(getDatasetFileName());",
                "-    try {",
                "-      ReplacementDataSet dataSet = new ReplacementDataSet(builder.build(in));",
                "-      dataSet.addReplacementObject(\"[NULL]\", null);",
                "-      return dataSet;",
                "-    } finally {",
                "-      IOUtils.closeQuietly(in);",
                "-    }",
                "-  }",
                "-",
                "-  public abstract String getDatasetFileName();",
                "-",
                "-}",
                "diff --git a/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/PerfVolumeTest.java b/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/PerfVolumeTest.java",
                "deleted file mode 100644",
                "index fb47e05901..0000000000",
                "--- a/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/PerfVolumeTest.java",
                "+++ /dev/null",
                "@@ -1,71 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.stratelia.silverpeas.silverStatisticsPeas.control;",
                "-",
                "-import java.io.File;",
                "-import java.sql.SQLException;",
                "-",
                "-import javax.naming.InitialContext;",
                "-import javax.naming.NamingException;",
                "-",
                "-import org.silverpeas.silverstatistics.volume.DirectoryVolumeService;",
                "-",
                "-import com.silverpeas.jndi.SimpleMemoryContextFactory;",
                "-",
                "-import org.apache.commons.dbcp.BasicDataSource;",
                "-import org.junit.AfterClass;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Ignore;",
                "-import org.junit.Test;",
                "-",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-public class PerfVolumeTest {",
                "-",
                "-  private String userId = \"9\";",
                "-  private int forLoop = 10;",
                "-",
                "-  @BeforeClass",
                "-  public static void setupDataSource() throws NamingException {",
                "-    SimpleMemoryContextFactory.setUpAsInitialContext();",
                "-    BasicDataSource ds = new BasicDataSource();",
                "-    ds.setDriverClassName(\"org.postgresql.Driver\");",
                "-    ds.setUsername(\"postgres\");",
                "-    ds.setPassword(\"postgres\");",
                "-    ds.setUrl(\"jdbc:postgresql://localhost:5432/extranet\");",
                "-    InitialContext ic = new InitialContext();",
                "-    ic.bind(\"java:/datasources/silverpeas-jdbc\", ds);",
                "-    ic.bind(\"java:/datasources/DocumentStoreDS\", ds);",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void teardownDataSource() throws NamingException, SQLException {",
                "-    InitialContext ic = new InitialContext();",
                "-    BasicDataSource ds = (BasicDataSource) ic.lookup(\"java:/datasources/silverpeas-jdbc\");",
                "-    ds.close();",
                "-    SimpleMemoryContextFactory.tearDownAsInitialContext();",
                "-  }",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/SilverStatisticsPeasDAOAccessTest.java b/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/SilverStatisticsPeasDAOAccessTest.java",
                "deleted file mode 100644",
                "index 0801a2d6c7..0000000000",
                "--- a/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/SilverStatisticsPeasDAOAccessTest.java",
                "+++ /dev/null",
                "@@ -1,349 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.stratelia.silverpeas.silverStatisticsPeas.control;",
                "-",
                "-import java.util.Collection;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-import com.stratelia.webactiv.beans.admin.AdminController;",
                "-import com.stratelia.webactiv.beans.admin.ComponentInst;",
                "-import com.stratelia.webactiv.beans.admin.UserDetail;",
                "-",
                "-import org.junit.Test;",
                "-",
                "-import static org.hamcrest.Matchers.*;",
                "-import static org.junit.Assert.assertThat;",
                "-import static org.mockito.Mockito.*;",
                "-",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-public class SilverStatisticsPeasDAOAccessTest extends AbstractSpringDatasourceTest {",
                "-",
                "-  private static final String dateForTest = \"2011-02-01\";",
                "-",
                "-  @Override",
                "-  public String getDatasetFileName() {",
                "-    return \"test-stats-access-dataset.xml\";",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getYears method, of class SilverStatisticsPeasDAOAccesVolume.",
                "-   */",
                "-  @Test",
                "-  public void testGetVolumeYears() throws Exception {",
                "-    Collection<String> result = SilverStatisticsPeasDAOAccesVolume.getAccessYears();",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(2));",
                "-    assertThat(result, hasItem(\"2010\"));",
                "-    assertThat(result, hasItem(\"2011\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getStatsUserVentil method, of class SilverStatisticsPeasDAOAccesVolume.",
                "-   */",
                "-  @Test",
                "-  public void testGetStatsUserVentilWithUserId() throws Exception {",
                "-    AdminController oldController = SilverStatisticsPeasDAOAccesVolume.myAdminController;",
                "-    try {",
                "-      String userId = \"1\";",
                "-      String currentUserId = \"1\";",
                "-      AdminController controller = prepareAdminController(currentUserId);",
                "-      SilverStatisticsPeasDAOAccesVolume.myAdminController = controller;",
                "-      Map<String, String[]> result = SilverStatisticsPeasDAOAccesVolume.getStatsUserVentil(",
                "-              dateForTest, currentUserId, null, userId);",
                "-      verify(controller, times(3)).getUserManageableSpaceClientIds(currentUserId);",
                "-      assertThat(result, is(notNullValue()));",
                "-      assertThat(result.size(), is(3));",
                "-      assertThat(result, hasKey(\"kmelia26\"));",
                "-      assertThat(result, hasKey(\"kmelia38\"));",
                "-      assertThat(result, hasKey(\"kmelia40\"));",
                "-      String[] data = result.get(\"kmelia26\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"129\", null, \"10\"));",
                "-      data = result.get(\"kmelia38\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"8\", null, \"8\"));",
                "-      data = result.get(\"kmelia40\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"49\", null, \"49\"));",
                "-",
                "-      userId = \"5\";",
                "-      result = SilverStatisticsPeasDAOAccesVolume.getStatsUserVentil(dateForTest, currentUserId,",
                "-              null, userId);",
                "-      verify(controller, times(6)).getUserManageableSpaceClientIds(currentUserId);",
                "-      assertThat(result, is(notNullValue()));",
                "-      assertThat(result.size(), is(3));",
                "-      assertThat(result, hasKey(\"kmelia26\"));",
                "-      assertThat(result, hasKey(\"kmelia38\"));",
                "-      assertThat(result, hasKey(\"kmelia40\"));",
                "-      data = result.get(\"kmelia26\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"129\", null, \"5\"));",
                "-      data = result.get(\"kmelia38\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"8\", null, null));",
                "-      data = result.get(\"kmelia40\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"49\", null, null));",
                "-    } finally {",
                "-      SilverStatisticsPeasDAOAccesVolume.myAdminController = oldController;",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getStatsUserVentil method, of class SilverStatisticsPeasDAOAccesVolume.",
                "-   */",
                "-  @Test",
                "-  public void testGetStatsUserVentilWithGroupId() throws Exception {",
                "-    AdminController oldController = SilverStatisticsPeasDAOAccesVolume.myAdminController;",
                "-    try {",
                "-      String groupId = \"1\";",
                "-      String currentUserId = \"1\";",
                "-      AdminController controller = prepareAdminController(currentUserId);",
                "-      SilverStatisticsPeasDAOAccesVolume.myAdminController = controller;",
                "-      Map<String, String[]> result = SilverStatisticsPeasDAOAccesVolume.getStatsUserVentil(",
                "-              dateForTest, currentUserId, groupId, null);",
                "-      verify(controller, times(3)).getUserManageableSpaceClientIds(currentUserId);",
                "-      assertThat(result, is(notNullValue()));",
                "-      assertThat(result.size(), is(3));",
                "-      assertThat(result, hasKey(\"kmelia26\"));",
                "-      assertThat(result, hasKey(\"kmelia38\"));",
                "-      assertThat(result, hasKey(\"kmelia40\"));",
                "-      String[] data = result.get(\"kmelia26\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"129\", \"10\", null));",
                "-      data = result.get(\"kmelia38\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"8\", \"8\", null));",
                "-      data = result.get(\"kmelia40\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"49\", \"49\", null));",
                "-",
                "-",
                "-      groupId = \"2\";",
                "-      result = SilverStatisticsPeasDAOAccesVolume.getStatsUserVentil(dateForTest, currentUserId,",
                "-              groupId, null);",
                "-      verify(controller, times(6)).getUserManageableSpaceClientIds(currentUserId);",
                "-      assertThat(result, is(notNullValue()));",
                "-      assertThat(result.size(), is(3));",
                "-      assertThat(result, hasKey(\"kmelia26\"));",
                "-      assertThat(result, hasKey(\"kmelia38\"));",
                "-      assertThat(result, hasKey(\"kmelia40\"));",
                "-      data = result.get(\"kmelia26\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"129\", \"67\", null));",
                "-      data = result.get(\"kmelia38\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"8\", \"8\", null));",
                "-      data = result.get(\"kmelia40\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"49\", \"49\", null));",
                "-    } finally {",
                "-      SilverStatisticsPeasDAOAccesVolume.myAdminController = oldController;",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getStatsUserVentil method, of class SilverStatisticsPeasDAOAccesVolume.",
                "-   */",
                "-  @Test",
                "-  public void testGetStatsUserVentilWithGroupIdAndUserId() throws Exception {",
                "-    AdminController oldController = SilverStatisticsPeasDAOAccesVolume.myAdminController;",
                "-    try {",
                "-      String groupId = \"2\";",
                "-      String userId = \"5\";",
                "-      String currentUserId = \"1\";",
                "-      AdminController controller = prepareAdminController(currentUserId);",
                "-      SilverStatisticsPeasDAOAccesVolume.myAdminController = controller;",
                "-      Map<String, String[]> result = SilverStatisticsPeasDAOAccesVolume.getStatsUserVentil(",
                "-              dateForTest, currentUserId, groupId, userId);",
                "-      verify(controller, times(3)).getUserManageableSpaceClientIds(currentUserId);",
                "-      assertThat(result, is(notNullValue()));",
                "-      assertThat(result.size(), is(3));",
                "-      assertThat(result, hasKey(\"kmelia26\"));",
                "-      assertThat(result, hasKey(\"kmelia38\"));",
                "-      assertThat(result, hasKey(\"kmelia40\"));",
                "-      String[] data = result.get(\"kmelia26\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"129\", \"67\", \"5\"));",
                "-      data = result.get(\"kmelia38\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"8\", \"8\", null));",
                "-      data = result.get(\"kmelia40\");",
                "-      assertThat(data.length, is(3));",
                "-      assertThat(data, arrayContaining(\"49\", \"49\", null));",
                "-    } finally {",
                "-      SilverStatisticsPeasDAOAccesVolume.myAdminController = oldController;",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getStatsUserVentil method, of class SilverStatisticsPeasDAOAccesVolume.",
                "-   */",
                "-  @Test",
                "-  public void testGetStatsUserVentilWithAnUnauthorizedUser() throws Exception {",
                "-    AdminController oldController = SilverStatisticsPeasDAOAccesVolume.myAdminController;",
                "-    try {",
                "-      String groupId = \"2\";",
                "-      String userId = \"5\";",
                "-      String currentUserId = \"1\";",
                "-      AdminController controller = prepareAdminController(currentUserId);",
                "-      when(controller.getUserManageableSpaceClientIds(currentUserId)).thenReturn(new String[]{",
                "-                \"WA100\"});",
                "-      SilverStatisticsPeasDAOAccesVolume.myAdminController = controller;",
                "-      Map<String, String[]> result = SilverStatisticsPeasDAOAccesVolume.getStatsUserVentil(",
                "-              dateForTest, currentUserId, groupId, userId);",
                "-      verify(controller, times(3)).getUserManageableSpaceClientIds(currentUserId);",
                "-      assertThat(result, is(notNullValue()));",
                "-      assertThat(result.size(), is(0));",
                "-    } finally {",
                "-      SilverStatisticsPeasDAOAccesVolume.myAdminController = oldController;",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetStatisticsEvolutionForUserOnSpace() throws Exception {",
                "-    String groupId = \"2\";",
                "-    String userId = \"5\";",
                "-    String entityId = \"WA18\";",
                "-    List<String[]> result = SilverStatisticsPeasDAOAccesVolume.getStatsUserEvolution(\"SPACE\",",
                "-            entityId, groupId, userId);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(8));",
                "-    String[] stats = result.get(3);",
                "-    assertThat(stats[0], is(\"2011-02-01\"));",
                "-    assertThat(stats[1], is(\"5\"));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetStatisticsEvolutionForGroupOnSpace() throws Exception {",
                "-    String groupId = \"1\";",
                "-    String entityId = \"WA18\";",
                "-    List<String[]> result = SilverStatisticsPeasDAOAccesVolume.getStatsUserEvolution(\"SPACE\",",
                "-            entityId, groupId, null);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(8));",
                "-    String[] stats = result.get(3);",
                "-    assertThat(stats[0], is(\"2011-02-01\"));",
                "-    assertThat(stats[1], is(\"137\"));",
                "-",
                "-    groupId = \"3\";",
                "-    result = SilverStatisticsPeasDAOAccesVolume.getStatsUserEvolution(\"SPACE\", entityId, groupId,",
                "-            null);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(8));",
                "-    stats = result.get(3);",
                "-    assertThat(stats[0], is(\"2011-02-01\"));",
                "-    assertThat(stats[1], is(\"62\"));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetStatisticsEvolutionOnComponent() throws Exception {",
                "-    String entityId = \"kmelia26\";",
                "-    List<String[]> result = SilverStatisticsPeasDAOAccesVolume.getStatsUserEvolution(\"\",",
                "-            entityId, null, null);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(8));",
                "-    String[] stats = result.get(3);",
                "-    assertThat(stats[0], is(\"2011-02-01\"));",
                "-    assertThat(stats[1], is(\"129\"));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetStatisticsEvolutionForUserOnComponent() throws Exception {",
                "-    String groupId = \"2\";",
                "-    String userId = \"5\";",
                "-    String entityId = \"kmelia26\";",
                "-    List<String[]> result = SilverStatisticsPeasDAOAccesVolume.getStatsUserEvolution(\"\",",
                "-            entityId, groupId, userId);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(8));",
                "-    String[] stats = result.get(3);",
                "-    assertThat(stats[0], is(\"2011-02-01\"));",
                "-    assertThat(stats[1], is(\"5\"));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetStatisticsEvolutionForGroupOnComponent() throws Exception {",
                "-    String groupId = \"1\";",
                "-    String entityId = \"kmelia26\";",
                "-    List<String[]> result = SilverStatisticsPeasDAOAccesVolume.getStatsUserEvolution(\"\",",
                "-            entityId, groupId, null);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(8));",
                "-    String[] stats = result.get(3);",
                "-    assertThat(stats[0], is(\"2011-02-01\"));",
                "-    assertThat(stats[1], is(\"129\"));",
                "-",
                "-    groupId = \"3\";",
                "-    result = SilverStatisticsPeasDAOAccesVolume.getStatsUserEvolution(\"\", entityId, groupId, null);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(8));",
                "-    stats = result.get(3);",
                "-    assertThat(stats[0], is(\"2011-02-01\"));",
                "-    assertThat(stats[1], is(\"62\"));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetStatisticsEvolutionOnSpace() throws Exception {",
                "-    String entityId = \"WA18\";",
                "-    List<String[]> result = SilverStatisticsPeasDAOAccesVolume.getStatsUserEvolution(\"SPACE\",",
                "-            entityId, null, null);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(8));",
                "-    String[] stats = result.get(3);",
                "-    assertThat(stats[0], is(\"2011-02-01\"));",
                "-    assertThat(stats[1], is(\"137\"));",
                "-  }",
                "-",
                "-  private AdminController prepareAdminController(String currentUserId) {",
                "-    AdminController controller = mock(AdminController.class);",
                "-    ComponentInst kmelia26 = new ComponentInst();",
                "-    kmelia26.setDomainFatherId(\"WA18\");",
                "-    when(controller.getComponentInst(\"kmelia26\")).thenReturn(kmelia26);",
                "-    ComponentInst kmelia38 = new ComponentInst();",
                "-    kmelia38.setDomainFatherId(\"WA18\");",
                "-    when(controller.getComponentInst(\"kmelia38\")).thenReturn(kmelia38);",
                "-    when(controller.getUserManageableSpaceClientIds(currentUserId)).thenReturn(new String[]{\"WA18\",",
                "-              \"WA19\"});",
                "-    ComponentInst kmelia40 = new ComponentInst();",
                "-    kmelia40.setDomainFatherId(\"WA19\");",
                "-    when(controller.getComponentInst(\"kmelia40\")).thenReturn(kmelia40);",
                "-    when(controller.getUserManageableSpaceClientIds(currentUserId)).thenReturn(new String[]{\"WA18\",",
                "-              \"WA19\"});",
                "-    UserDetail user1 = new UserDetail();",
                "-    user1.setId(\"1\");",
                "-    UserDetail user2 = new UserDetail();",
                "-    user2.setId(\"2\");",
                "-    UserDetail user3 = new UserDetail();",
                "-    user3.setId(\"3\");",
                "-    when(controller.getAllUsersOfGroup(\"1\")).thenReturn(new UserDetail[]{user1});",
                "-    when(controller.getAllUsersOfGroup(\"2\")).thenReturn(new UserDetail[]{user1, user2, user3});",
                "-",
                "-    return controller;",
                "-  }",
                "-}",
                "diff --git a/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/SilverStatisticsPeasDAOVolumeIT.java b/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/SilverStatisticsPeasDAOVolumeIT.java",
                "deleted file mode 100644",
                "index 60680dcd6e..0000000000",
                "--- a/core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/SilverStatisticsPeasDAOVolumeIT.java",
                "+++ /dev/null",
                "@@ -1,203 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.stratelia.silverpeas.silverStatisticsPeas.control;",
                "-",
                "-import com.stratelia.webactiv.beans.admin.AdminController;",
                "-import com.stratelia.webactiv.beans.admin.ComponentInst;",
                "-import com.stratelia.webactiv.beans.admin.UserDetail;",
                "-import org.jboss.arquillian.container.test.api.Deployment;",
                "-import org.jboss.arquillian.junit.Arquillian;",
                "-import org.jboss.shrinkwrap.api.Archive;",
                "-import org.junit.Before;",
                "-import org.junit.Rule;",
                "-import org.junit.Test;",
                "-import org.junit.runner.RunWith;",
                "-import org.silverpeas.core.cache.service.InMemoryCacheService;",
                "-import org.silverpeas.web.test.WarBuilder4WarCore;",
                "-import org.silverpeas.core.test.rule.DbUnitLoadingRule;",
                "-",
                "-import java.util.Collection;",
                "-import java.util.Map;",
                "-",
                "-import static org.hamcrest.Matchers.*;",
                "-import static org.junit.Assert.assertThat;",
                "-import static org.mockito.Mockito.*;",
                "-",
                "-/**",
                "- * @author ehugonnet",
                "- */",
                "-@RunWith(Arquillian.class)",
                "-public class SilverStatisticsPeasDAOVolumeIT {",
                "-",
                "-  private static final String dateBegin = \"2010-12-01\";",
                "-  private static final String dateEnd = \"2011-07-01\";",
                "-",
                "-  @Rule",
                "-  public DbUnitLoadingRule dbUnitLoadingRule =",
                "-      new DbUnitLoadingRule(\"create-database.sql\", \"test-stats-volume-dataset.xml\");",
                "-",
                "-  @Before",
                "-  public void generalSetUp() throws Exception {",
                "-    InMemoryCacheService cache = new InMemoryCacheService();",
                "-    UserDetail user = new UserDetail();",
                "-    user.setId(\"1\");",
                "-    cache.put(UserDetail.CURRENT_REQUESTER_KEY, user);",
                "-  }",
                "-",
                "-  @Deployment",
                "-  public static Archive<?> createTestArchive() {",
                "-    return WarBuilder4WarCore.onWarForTestClass(SilverStatisticsPeasDAOConnexionTest.class)",
                "-        .testFocusedOn(warBuilder -> {",
                "-          warBuilder.addPackages(true, \"com.stratelia.silverpeas.silverStatisticsPeas\");",
                "-        }).build();",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getYears method, of class SilverStatisticsPeasDAOAccesVolume.",
                "-   */",
                "-  @Test",
                "-  public void testGetVolumeYears() throws Exception {",
                "-    Collection<String> result = SilverStatisticsPeasDAOAccesVolume.getVolumeYears();",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(1));",
                "-    assertThat(result, hasItem(\"2011\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getStatsPublicationsVentil method, of class SilverStatisticsPeasDAOAccesVolume.",
                "-   */",
                "-  @Test",
                "-  public void testGetStatsPublicationsVentilWithUserId() throws Exception {",
                "-    String userId = \"1\";",
                "-    String currentUserId = \"1\";",
                "-    AdminController controller = prepareAdminController(currentUserId);",
                "-    Map<String, String[]> result =",
                "-        SilverStatisticsPeasDAOAccesVolume.getStatsPublicationsVentil(\"2011-01-01\", null, userId);",
                "-    verify(controller).getUserManageableSpaceClientIds(currentUserId);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(1));",
                "-    assertThat(result, hasKey(\"kmelia26\"));",
                "-    String[] data = result.get(\"kmelia26\");",
                "-    assertThat(data.length, is(3));",
                "-    assertThat(data, arrayContaining(\"223\", null, \"34\"));",
                "-",
                "-    userId = \"5\";",
                "-    result =",
                "-        SilverStatisticsPeasDAOAccesVolume.getStatsPublicationsVentil(\"2011-01-01\", null, userId);",
                "-    verify(controller, times(2)).getUserManageableSpaceClientIds(currentUserId);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(1));",
                "-    assertThat(result, hasKey(\"kmelia26\"));",
                "-    data = result.get(\"kmelia26\");",
                "-    assertThat(data.length, is(3));",
                "-    assertThat(data, arrayContaining(\"223\", null, \"16\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getStatsPublicationsVentil method, of class SilverStatisticsPeasDAOAccesVolume.",
                "-   */",
                "-  @Test",
                "-  public void testGetStatsPublicationsVentilWithGroupId() throws Exception {",
                "-    String groupId = \"1\";",
                "-    String currentUserId = \"1\";",
                "-    AdminController controller = prepareAdminController(currentUserId);",
                "-    Map<String, String[]> result =",
                "-        SilverStatisticsPeasDAOAccesVolume.getStatsPublicationsVentil(\"2011-01-01\", groupId, null);",
                "-    verify(controller).getUserManageableSpaceClientIds(currentUserId);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(1));",
                "-    assertThat(result, hasKey(\"kmelia26\"));",
                "-    String[] data = result.get(\"kmelia26\");",
                "-    assertThat(data.length, is(3));",
                "-    assertThat(data, arrayContaining(\"223\", \"34\", null));",
                "-",
                "-",
                "-    groupId = \"2\";",
                "-    result =",
                "-        SilverStatisticsPeasDAOAccesVolume.getStatsPublicationsVentil(\"2011-01-01\", groupId, null);",
                "-    verify(controller, times(2)).getUserManageableSpaceClientIds(currentUserId);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(1));",
                "-    assertThat(result, hasKey(\"kmelia26\"));",
                "-    data = result.get(\"kmelia26\");",
                "-    assertThat(data.length, is(3));",
                "-    assertThat(data, arrayContaining(\"223\", \"110\", null));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getStatsPublicationsVentil method, of class SilverStatisticsPeasDAOAccesVolume.",
                "-   */",
                "-  @Test",
                "-  public void testGetStatsPublicationsVentilWithGroupIdAndUserId() throws Exception {",
                "-    String groupId = \"2\";",
                "-    String userId = \"5\";",
                "-    String currentUserId = \"1\";",
                "-    AdminController controller = prepareAdminController(currentUserId);",
                "-    Map<String, String[]> result = SilverStatisticsPeasDAOAccesVolume",
                "-        .getStatsPublicationsVentil(\"2011-01-01\", groupId, userId);",
                "-    verify(controller).getUserManageableSpaceClientIds(currentUserId);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(1));",
                "-    assertThat(result, hasKey(\"kmelia26\"));",
                "-    String[] data = result.get(\"kmelia26\");",
                "-    assertThat(data.length, is(3));",
                "-    assertThat(data, arrayContaining(\"223\", \"110\", \"16\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getStatsPublicationsVentil method, of class SilverStatisticsPeasDAOAccesVolume.",
                "-   */",
                "-  @Test",
                "-  public void testGetStatsPublicationsVentilWithAnUnauthorizedUser() throws Exception {",
                "-    String groupId = \"2\";",
                "-    String userId = \"5\";",
                "-    String currentUserId = \"1\";",
                "-    AdminController controller = prepareAdminController(currentUserId);",
                "-    when(controller.getUserManageableSpaceClientIds(currentUserId))",
                "-        .thenReturn(new String[]{\"WA100\"});",
                "-    Map<String, String[]> result = SilverStatisticsPeasDAOAccesVolume",
                "-        .getStatsPublicationsVentil(\"2011-01-01\", groupId, userId);",
                "-    verify(controller).getUserManageableSpaceClientIds(currentUserId);",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.size(), is(0));",
                "-  }",
                "-",
                "-  private AdminController prepareAdminController(String currentUserId) {",
                "-    AdminController controller = mock(AdminController.class);",
                "-    ComponentInst kmelia26 = new ComponentInst();",
                "-    kmelia26.setDomainFatherId(\"WA18\");",
                "-    when(controller.getComponentInst(\"kmelia26\")).thenReturn(kmelia26);",
                "-    when(controller.getUserManageableSpaceClientIds(currentUserId))",
                "-        .thenReturn(new String[]{\"WA18\"});",
                "-    UserDetail user1 = new UserDetail();",
                "-    user1.setId(\"1\");",
                "-    UserDetail user2 = new UserDetail();",
                "-    user2.setId(\"2\");",
                "-    UserDetail user3 = new UserDetail();",
                "-    user3.setId(\"3\");",
                "-    when(controller.getAllUsersOfGroup(\"1\")).thenReturn(new UserDetail[]{user1});",
                "-    when(controller.getAllUsersOfGroup(\"2\")).thenReturn(new UserDetail[]{user1, user2, user3});",
                "-    return controller;",
                "-  }",
                "-}",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebController.java b/core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebController.java",
                "index e087b10396..d090b21c1f 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebController.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebController.java",
                "@@ -28,5 +28,6 @@ import org.silverpeas.core.admin.component.model.PersonalComponentInstance;",
                " import org.silverpeas.core.admin.user.model.SilverpeasRole;",
                "+import org.silverpeas.core.admin.user.model.UserDetail;",
                " import org.silverpeas.core.calendar.CalendarEventOccurrence;",
                " import org.silverpeas.core.calendar.notification.user.CalendarEventOccurrenceNotifyUserNotificationBuilder;",
                "-import org.silverpeas.core.notification.user.builder.helper.UserNotificationHelper;",
                "+import org.silverpeas.core.notification.user.ManualUserNotificationSupplier;",
                " import org.silverpeas.core.util.Pair;",
                "@@ -37,4 +38,2 @@ import org.silverpeas.core.web.mvc.controller.ComponentContext;",
                " import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "-import org.silverpeas.core.web.mvc.util.AlertUser;",
                "-import org.silverpeas.core.web.mvc.webcomponent.Navigation;",
                " import org.silverpeas.core.web.mvc.webcomponent.WebComponentController;",
                "@@ -118,24 +117,11 @@ public abstract class AbstractCalendarWebController<C extends AbstractCalendarWe",
                "-  @GET",
                "-  @Path(\"calendars/occurrences/{occurrenceId}/notify\")",
                "-  public Navigation notifyManuallyUsersGroups(C context) {",
                "-    CalendarEventOccurrence occurrence = context.getCalendarEventOccurrenceById();",
                "-",
                "-    AlertUser sel = context.getUserManualNotificationForParameterization();",
                "-    sel.resetAll();",
                "-",
                "-    // Browse bar settings",
                "-    sel.setHostSpaceName(context.getSpaceLabel());",
                "-    sel.setHostComponentId(context.getComponentInstanceId());",
                "-    Pair<String, String> hostComponentName = new Pair<>(context.getComponentInstanceLabel(), null);",
                "-    sel.setHostComponentName(hostComponentName);",
                "-",
                "-    // The notification",
                "-    sel.setNotificationMetaData(UserNotificationHelper.build(",
                "-        new CalendarEventOccurrenceNotifyUserNotificationBuilder(occurrence, context.getUser())));",
                "-",
                "-    SelectionUsersGroups sug = new SelectionUsersGroups();",
                "-    sug.setComponentId(context.getComponentInstanceId());",
                "-    sel.setSelectionUsersGroups(sug);",
                "-    return context.redirectToNotifyManuallyUsers();",
                "+  @Override",
                "+  public ManualUserNotificationSupplier getManualUserNotificationSupplier() {",
                "+    return c -> {",
                "+      final String occurrenceId = c.get(\"eventId\");",
                "+      final CalendarEventOccurrence occurrence =",
                "+          AbstractCalendarWebRequestContext.getCalendarEventOccurrence(occurrenceId);",
                "+      return new CalendarEventOccurrenceNotifyUserNotificationBuilder(occurrence,",
                "+          UserDetail.getCurrentRequester()).build();",
                "+    };",
                "   }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebRequestContext.java b/core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebRequestContext.java",
                "index 5b13b70f84..82b06348f2 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebRequestContext.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebRequestContext.java",
                "@@ -115,4 +115,8 @@ public abstract class AbstractCalendarWebRequestContext<T extends AbstractCalend",
                "   public CalendarEventOccurrence getCalendarEventOccurrenceById() {",
                "-    CalendarEventOccurrence event = null;",
                "     String occurrenceId = getPathVariables().get(\"occurrenceId\");",
                "+    return getCalendarEventOccurrence(occurrenceId);",
                "+  }",
                "+",
                "+  static CalendarEventOccurrence getCalendarEventOccurrence(final String occurrenceId) {",
                "+    CalendarEventOccurrence event = null;",
                "     if (isDefined(occurrenceId)) {",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/AbstractComponentSessionController.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/AbstractComponentSessionController.java",
                "index 382dc202a4..c075e5881b 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/AbstractComponentSessionController.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/AbstractComponentSessionController.java",
                "@@ -45,3 +45,2 @@ import org.silverpeas.core.util.URLUtil;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "-import org.silverpeas.core.web.mvc.util.AlertUser;",
                " import org.silverpeas.core.web.selection.Selection;",
                "@@ -141,6 +140,5 @@ public abstract class AbstractComponentSessionController implements ComponentSes",
                "     String theLanguage = getLanguage();",
                "-    if ((theLanguage != null) || (message == null)) {",
                "-      if (message == null || messageLanguage == null || !messageLanguage.equals(theLanguage)) {",
                "+    if ((theLanguage != null || message == null) &&",
                "+        (message == null || messageLanguage == null || !messageLanguage.equals(theLanguage))) {",
                "         setLocalizationBundle(messageFile);",
                "-      }",
                "     }",
                "@@ -248,3 +246,3 @@ public abstract class AbstractComponentSessionController implements ComponentSes",
                "   /**",
                "-   * return the component Root name : i.e. 'agenda', 'todo', 'kmelia', .... (the name that appears",
                "+   * return the component Root name : i.e. 'calendar', 'kmelia', .... (the name that appears",
                "    * in the URL's root (the 'R' prefix is added later when needed))",
                "@@ -257,3 +255,4 @@ public abstract class AbstractComponentSessionController implements ComponentSes",
                "   /**",
                "-   * Sets the component root name : i.e. 'agenda', 'todo', 'kmelia', .... (the name that appears in",
                "+   * Sets the component root name : i.e. 'agenda', 'calendar', 'kmelia', .... (the name that",
                "+   * appears in",
                "    * the URL's root (the 'R' prefix is added later when needed)) this function is called by the",
                "@@ -344,6 +343,2 @@ public abstract class AbstractComponentSessionController implements ComponentSes",
                "-  public AlertUser getAlertUser() {",
                "-    return controller.getAlertUser();",
                "-  }",
                "-",
                "   // Maintenance Mode",
                "@@ -351,3 +346,3 @@ public abstract class AbstractComponentSessionController implements ComponentSes",
                "   public boolean isAppInMaintenance() {",
                "-    return controller.isAppInMaintenance();",
                "+    return MainSessionController.isAppInMaintenance();",
                "   }",
                "@@ -356,3 +351,3 @@ public abstract class AbstractComponentSessionController implements ComponentSes",
                "   public void setAppModeMaintenance(boolean mode) {",
                "-    controller.setAppModeMaintenance(mode);",
                "+    MainSessionController.setAppModeMaintenance(mode);",
                "   }",
                "@@ -466,4 +461,2 @@ public abstract class AbstractComponentSessionController implements ComponentSes",
                "         message = ResourceLocator.getLocalizationBundle(messageFile, messageLanguage);",
                "-        // messageLanguage = getLanguage();",
                "-",
                "       } catch (Exception e) {",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/MainSessionController.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/MainSessionController.java",
                "index af68277f72..d7111ab262 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/MainSessionController.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/controller/MainSessionController.java",
                "@@ -48,3 +48,2 @@ import org.silverpeas.core.util.StringUtil;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "-import org.silverpeas.core.web.mvc.util.AlertUser;",
                " import org.silverpeas.core.web.selection.Selection;",
                "@@ -84,3 +83,2 @@ public class MainSessionController implements Clipboard, SessionCloseable, Seria",
                "   private String userSpace = null;",
                "-  private transient AlertUser alertUser = null;",
                "   private String serverName = null;",
                "@@ -222,10 +220,2 @@ public class MainSessionController implements Clipboard, SessionCloseable, Seria",
                "-  // ------------------- AlertUser Functions -----------------------------",
                "-  public AlertUser getAlertUser() {",
                "-    if (alertUser == null) {",
                "-      alertUser = new AlertUser();",
                "-    }",
                "-    return alertUser;",
                "-  }",
                "-",
                "   /**",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "index 129a2f6a78..a329b2f099 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "@@ -425,2 +425,3 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "     T component = createComponentSessionController(mainSessionCtrl, componentContext);",
                "+",
                "     if (componentId == null) {",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/util/AccessForbiddenException.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/util/AccessForbiddenException.java",
                "index f727ee01db..33652adc2d 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/util/AccessForbiddenException.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/util/AccessForbiddenException.java",
                "@@ -25,3 +25,3 @@ package org.silverpeas.core.web.mvc.util;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                "+import org.silverpeas.core.SilverpeasException;",
                "@@ -29,11 +29,14 @@ public class AccessForbiddenException extends SilverpeasException {",
                "-  private static final long serialVersionUID = 24612705927634016L;",
                "+  private static final long serialVersionUID = 6977041309315791234L;",
                "-  public AccessForbiddenException(String callingClass, int errorLevel, String message) {",
                "-    super(callingClass, errorLevel, message, null, null);",
                "+  public AccessForbiddenException(final String message, final String... parameters) {",
                "+    super(message, parameters);",
                "   }",
                "-  @Override",
                "-  public String getModule() {",
                "-    return \"util\";",
                "+  public AccessForbiddenException(final String message, final Throwable cause) {",
                "+    super(message, cause);",
                "+  }",
                "+",
                "+  public AccessForbiddenException(final Throwable cause) {",
                "+    super(cause);",
                "   }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/util/AlertUser.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/util/AlertUser.java",
                "deleted file mode 100644",
                "index 3955278ab4..0000000000",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/util/AlertUser.java",
                "+++ /dev/null",
                "@@ -1,132 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.web.mvc.util;",
                "-",
                "-import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.web.selection.SelectionUsersGroups;",
                "-import org.silverpeas.core.util.Pair;",
                "-",
                "-import java.util.List;",
                "-",
                "-public class AlertUser {",
                "-",
                "-  private static final String URL = \"/RalertUserPeas/jsp/Main\";",
                "-",
                "-  private String hostSpaceName;",
                "-  private String hostComponentId;",
                "-  private Pair<String, String> hostComponentLabel;",
                "-  private NotificationMetaData notificationMetaData;",
                "-  private SelectionUsersGroups extraParams;",
                "-  private List<String> hostPath;",
                "-",
                "-  public AlertUser() {",
                "-    resetAll();",
                "-  }",
                "-",
                "-  public void resetAll() {",
                "-    hostSpaceName = \"\";",
                "-    hostComponentId = \"\";",
                "-    hostComponentLabel = new Pair<>(\"\", \"\");",
                "-    extraParams = null;",
                "-    hostPath = null;",
                "-  }",
                "-",
                "-  public static String getAlertUserURL() {",
                "-    return URL;",
                "-  }",
                "-",
                "-  public void setHostSpaceName(String hostSpaceName) {",
                "-    if (hostSpaceName != null) {",
                "-      this.hostSpaceName = hostSpaceName;",
                "-    } else {",
                "-      this.hostSpaceName = \"\";",
                "-    }",
                "-  }",
                "-",
                "-  public String getHostSpaceName() {",
                "-    return hostSpaceName;",
                "-  }",
                "-",
                "-  /**",
                "-   * Sets the component instance id that permits to apply a filter on the users or groups that have",
                "-   * right access to the component.",
                "-   * @param hostComponentId",
                "-   */",
                "-  public void setHostComponentId(String hostComponentId) {",
                "-    if (hostComponentId != null) {",
                "-      this.hostComponentId = hostComponentId;",
                "-    } else {",
                "-      this.hostComponentId = \"\";",
                "-    }",
                "-  }",
                "-",
                "-  public String getHostComponentId() {",
                "-    return hostComponentId;",
                "-  }",
                "-",
                "-  /**",
                "-   * Sets the name of the component for the browsebar rendering. It is handled by a PairObject(component name, link_to_component).",
                "-   * Only the first element is represented for now because of the systematic use of a POPUP.",
                "-   * @param hostComponentLabel the component label",
                "-   */",
                "-  public void setHostComponentName(Pair<String, String> hostComponentLabel) {",
                "-    if (hostComponentLabel != null) {",
                "-      this.hostComponentLabel = hostComponentLabel;",
                "-    } else {",
                "-      this.hostComponentLabel = new Pair<>(\"\", \"\");",
                "-    }",
                "-  }",
                "-",
                "-  public Pair<String, String> getHostComponentName() {",
                "-    return hostComponentLabel;",
                "-  }",
                "-",
                "-  public void setNotificationMetaData(NotificationMetaData notificationMetaData) {",
                "-    if (notificationMetaData != null) {",
                "-      this.notificationMetaData = notificationMetaData;",
                "-    } else {",
                "-      this.notificationMetaData = new NotificationMetaData();",
                "-    }",
                "-  }",
                "-",
                "-  public NotificationMetaData getNotificationMetaData() {",
                "-    return notificationMetaData;",
                "-  }",
                "-",
                "-  public SelectionUsersGroups getSelectionUsersGroups() {",
                "-    return extraParams;",
                "-  }",
                "-",
                "-  public void setSelectionUsersGroups(SelectionUsersGroups extraParams) {",
                "-    this.extraParams = extraParams;",
                "-  }",
                "-",
                "-  public List<String> getHostPath() {",
                "-    return hostPath;",
                "-  }",
                "-",
                "-  public void setHostPath(final List<String> hostPath) {",
                "-    this.hostPath = hostPath;",
                "-  }",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestContext.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestContext.java",
                "index c8eb947613..3da90d8dcd 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestContext.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestContext.java",
                "@@ -33,3 +33,2 @@ import org.silverpeas.core.util.URLUtil;",
                " import org.silverpeas.core.web.http.HttpRequest;",
                "-import org.silverpeas.core.web.mvc.util.AlertUser;",
                " import org.silverpeas.core.web.mvc.util.RoutingException;",
                "@@ -360,20 +359,2 @@ public abstract class WebComponentRequestContext<T extends WebComponentControlle",
                "   }",
                "-",
                "-  /**",
                "-   * Gets an alert user object in order to parameterized it before asking the user to select users",
                "-   * or groups to be manually alerted.",
                "-   * @return the alert user object instance.",
                "-   */",
                "-  public AlertUser getUserManualNotificationForParameterization() {",
                "-    return controller.getAlertUser();",
                "-  }",
                "-",
                "-  /**",
                "-   * Gets the navigation to the centralized mechanism that permits to alert manually users and/or",
                "-   * groups about a contribution.",
                "-   * @return the navigation object to permform the asked navigation.",
                "-   */",
                "-  public Navigation redirectToNotifyManuallyUsers() {",
                "-    return redirectTo(AlertUser.getAlertUserURL());",
                "-  }",
                " }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/sharing/notification/FileSharingUserNotification.java b/core-web/src/main/java/org/silverpeas/core/web/sharing/notification/FileSharingUserNotification.java",
                "index 6936aae86c..c833ac8e87 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/sharing/notification/FileSharingUserNotification.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/sharing/notification/FileSharingUserNotification.java",
                "@@ -25,19 +25,17 @@ package org.silverpeas.core.web.sharing.notification;",
                "-import java.util.ArrayList;",
                "-import java.util.Collection;",
                "-import java.util.Collections;",
                "-import java.util.List;",
                "-import java.util.MissingResourceException;",
                "-",
                " import org.silverpeas.core.admin.service.OrganizationControllerProvider;",
                "-import org.silverpeas.core.web.sharing.bean.SharingNotificationVO;",
                "-",
                " import org.silverpeas.core.notification.user.builder.AbstractTemplateUserNotificationBuilder;",
                " import org.silverpeas.core.notification.user.builder.helper.UserNotificationHelper;",
                "+import org.silverpeas.core.notification.user.client.constant.NotifAction;",
                " import org.silverpeas.core.notification.user.model.NotificationResourceData;",
                " import org.silverpeas.core.sharing.model.Ticket;",
                "-import org.silverpeas.core.util.StringUtil;",
                " import org.silverpeas.core.template.SilverpeasTemplate;",
                "-import org.silverpeas.core.notification.user.client.constant.NotifAction;",
                "-import org.silverpeas.core.silvertrace.SilverTrace;",
                "+import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "+import org.silverpeas.core.web.sharing.bean.SharingNotificationVO;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "@@ -88,10 +86,4 @@ public class FileSharingUserNotification extends AbstractTemplateUserNotificatio",
                "     String userId = getUserId();",
                "-    String title;",
                "-    try {",
                "-      title = getBundle(language).getString(getBundleSubjectKey());",
                "-    } catch (MissingResourceException ex) {",
                "-      title = getTitle();",
                "-    }",
                "     getNotificationMetaData()",
                "-        .addLanguage(language, title, \"\");",
                "+        .addLanguage(language, getTitle(language), \"\");",
                "     template.setAttribute(\"senderUser\", OrganizationControllerProvider.getOrganisationController().",
                "@@ -118,2 +110,3 @@ public class FileSharingUserNotification extends AbstractTemplateUserNotificatio",
                "       NotificationResourceData notificationResourceData) {",
                "+    // nothing to do",
                "   }",
                "@@ -200,4 +193,3 @@ public class FileSharingUserNotification extends AbstractTemplateUserNotificatio",
                "     } catch (final Exception e) {",
                "-      SilverTrace.warn(\"sharingTicket\", \"FileSharingUserNotification.notify()\",",
                "-          \"fileSharing.EX_ALERT_USERS_ERROR\", \"tocken = \" + resource.getToken(), e);",
                "+      SilverLogger.getLogger(FileSharingUserNotification.class).error(e);",
                "     }",
                "@@ -205,7 +197,2 @@ public class FileSharingUserNotification extends AbstractTemplateUserNotificatio",
                "-  @Override",
                "-  protected boolean isSendImmediately() {",
                "-    return super.isSendImmediately();",
                "-  }",
                "-",
                "   @Override",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/tools/agenda/notification/AgendaUserNotification.java b/core-web/src/main/java/org/silverpeas/core/web/tools/agenda/notification/AgendaUserNotification.java",
                "index 5f53539abe..f5b9bc56ca 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/tools/agenda/notification/AgendaUserNotification.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/tools/agenda/notification/AgendaUserNotification.java",
                "@@ -25,15 +25,13 @@ package org.silverpeas.core.web.tools.agenda.notification;",
                "+import org.silverpeas.core.admin.user.model.UserDetail;",
                " import org.silverpeas.core.notification.user.builder.AbstractTemplateUserNotificationBuilder;",
                "-import org.silverpeas.core.notification.user.model.NotificationResourceData;",
                " import org.silverpeas.core.notification.user.client.constant.NotifAction;",
                "-import org.silverpeas.core.util.URLUtil;",
                "-import org.silverpeas.core.web.tools.agenda.control.AgendaRuntimeException;",
                "-import org.silverpeas.core.admin.user.model.UserDetail;",
                "-import org.silverpeas.core.personalorganizer.service.SilverpeasCalendar;",
                "+import org.silverpeas.core.notification.user.model.NotificationResourceData;",
                " import org.silverpeas.core.personalorganizer.model.Attendee;",
                " import org.silverpeas.core.personalorganizer.model.JournalHeader;",
                "+import org.silverpeas.core.personalorganizer.service.SilverpeasCalendar;",
                "+import org.silverpeas.core.template.SilverpeasTemplate;",
                " import org.silverpeas.core.util.DateUtil;",
                " import org.silverpeas.core.util.ServiceProvider;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                "-import org.silverpeas.core.template.SilverpeasTemplate;",
                "+import org.silverpeas.core.util.URLUtil;",
                "@@ -42,3 +40,2 @@ import java.util.Collections;",
                " import java.util.HashSet;",
                "-import java.util.MissingResourceException;",
                "@@ -172,12 +169,9 @@ public class AgendaUserNotification extends AbstractTemplateUserNotificationBuil",
                "     final Collection<String> userIds;",
                "-    switch (action) {",
                "-      case RESPONSE:",
                "-        userIds = Collections.singleton(getResource().getDelegatorId());",
                "-        break;",
                "-      default:",
                "-        userIds = new HashSet<String>();",
                "-        for (final Attendee attendee : getCalendarBm().getJournalAttendees(getResource().getId())) {",
                "-          userIds.add(attendee.getUserId());",
                "-        }",
                "-        break;",
                "+    if (action == NotifAction.RESPONSE) {",
                "+      userIds = Collections.singleton(getResource().getDelegatorId());",
                "+    } else {",
                "+      userIds = new HashSet<>();",
                "+      for (final Attendee attendee : getSilverpeasCalendar().getJournalAttendees(getResource().getId())) {",
                "+        userIds.add(attendee.getUserId());",
                "+      }",
                "     }",
                "@@ -195,9 +189,3 @@ public class AgendaUserNotification extends AbstractTemplateUserNotificationBuil",
                "       final SilverpeasTemplate template) {",
                "-    String title;",
                "-    try {",
                "-      title = getBundle(language).getString(getBundleSubjectKey());",
                "-    } catch (MissingResourceException ex) {",
                "-      title = getTitle();",
                "-    }",
                "-    getNotificationMetaData().addLanguage(language, title, \"\");",
                "+    getNotificationMetaData().addLanguage(language, getTitle(language), \"\");",
                "     template.setAttribute(\"sender\", sender.getDisplayedName());",
                "@@ -239,9 +227,6 @@ public class AgendaUserNotification extends AbstractTemplateUserNotificationBuil",
                "     sb.append(\"&Action=\");",
                "-    switch (action) {",
                "-      case DELETE:",
                "-        return null;",
                "-",
                "-      default:",
                "-        sb.append(\"Update\");",
                "-        break;",
                "+    if (action == NotifAction.DELETE) {",
                "+      return null;",
                "+    } else {",
                "+      sb.append(\"Update\");",
                "     }",
                "@@ -311,10 +296,5 @@ public class AgendaUserNotification extends AbstractTemplateUserNotificationBuil",
                "    */",
                "-  protected SilverpeasCalendar getCalendarBm() {",
                "+  protected SilverpeasCalendar getSilverpeasCalendar() {",
                "     if (calendarBm == null) {",
                "-      try {",
                "-        calendarBm = ServiceProvider.getService(SilverpeasCalendar.class);",
                "-      } catch (final Exception e) {",
                "-        throw new AgendaRuntimeException(\"AgendaUserNotification.getCalendarBm()\",",
                "-            SilverpeasException.ERROR, \"root.EX_CANT_GET_REMOTE_OBJECT\", e);",
                "-      }",
                "+      calendarBm = ServiceProvider.getService(SilverpeasCalendar.class);",
                "     }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/DefaultWebPlugin.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/DefaultWebPlugin.java",
                "index 5e58d4dbbf..bc7af9139e 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/DefaultWebPlugin.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/DefaultWebPlugin.java",
                "@@ -54,3 +54,2 @@ public class DefaultWebPlugin implements WebPlugin, Initialization {",
                "     WebPluginConsumerRegistry.add(RELATIONSHIP, JavascriptPluginInclusion::includeRelationship);",
                "-    WebPluginConsumerRegistry.add(MESSAGEME, (xhtml, language) -> includeMessageMe(xhtml));",
                "     WebPluginConsumerRegistry.add(WYSIWYG, JavascriptPluginInclusion::includeWysiwygEditor);",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "index 9d3d5fdf64..58446799ad 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "@@ -126,3 +126,2 @@ public class JavascriptPluginInclusion {",
                "   private static final String SILVERPEAS_INVITME = \"silverpeas-relationship.js\";",
                "-  private static final String SILVERPEAS_MESSAGEME = \"silverpeas-messageme.js\";",
                "   private static final String SILVERPEAS_RESPONSIBLES = \"silverpeas-responsibles.js\";",
                "@@ -507,3 +506,2 @@ public class JavascriptPluginInclusion {",
                "     xhtml.addElement(script(ANGULARJS_SERVICES_PATH + SILVERPEAS_PROFILE));",
                "-    includeMessageMe(xhtml);",
                "     includeRelationship(xhtml, language);",
                "@@ -543,8 +541,2 @@ public class JavascriptPluginInclusion {",
                "-  static ElementContainer includeMessageMe(final ElementContainer xhtml) {",
                "-    xhtml.addElement(script(ANGULARJS_SERVICES_PATH + SILVERPEAS_PROFILE));",
                "-    xhtml.addElement(script(JAVASCRIPT_PATH + SILVERPEAS_MESSAGEME));",
                "-    return xhtml;",
                "-  }",
                "-",
                "   static ElementContainer includeWysiwygEditor(final ElementContainer xhtml, final String language) {"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/variables/VariableValueSet.java",
                "core-library/src/main/java/org/silverpeas/core/html/SupportedWebPlugins.java",
                "core-library/src/main/java/org/silverpeas/core/util/URLUtil.java",
                "core-library/src/main/java/org/silverpeas/core/util/logging/sys/SysLogger.java",
                "core-war/src/main/java/org/silverpeas/web/alertuser/AlertUserPeasException.java",
                "core-war/src/main/java/org/silverpeas/web/alertuser/control/AlertUserPeasSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/alertuser/servlets/AlertUserPeasRequestRouter.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPRequestRouter.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/UserNotificationRequestRouter.java",
                "core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcRequestRouter.java",
                "core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/silverstatistics/servlets/SilverStatisticsPeasRequestRouter.java",
                "core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/AbstractSpringDatasourceTest.java",
                "core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/PerfVolumeTest.java",
                "core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/SilverStatisticsPeasDAOAccessTest.java",
                "core-war/src/test-awaiting/java/com/stratelia/silverpeas/silverStatisticsPeas/control/SilverStatisticsPeasDAOVolumeIT.java",
                "core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebController.java",
                "core-web/src/main/java/org/silverpeas/core/web/calendar/AbstractCalendarWebRequestContext.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/controller/AbstractComponentSessionController.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/controller/MainSessionController.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/util/AccessForbiddenException.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/util/AlertUser.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/webcomponent/WebComponentRequestContext.java",
                "core-web/src/main/java/org/silverpeas/core/web/sharing/notification/FileSharingUserNotification.java",
                "core-web/src/main/java/org/silverpeas/core/web/tools/agenda/notification/AgendaUserNotification.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/DefaultWebPlugin.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9884": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, file, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9884",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fafac817b6ad49f8bf771e518d45b7ecd807bdf7",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1537178289,
            "hunks": 240,
            "message": "Feature #10058: making the administration displayed as an overlay! - removing frameset structure - adding layout and window management - adding possibility to send simple JSON response from ComponentRequestRouter - modifying JSCX display behavior to enhance the user navigation while a video conference is playing - fixing sonar feedback",
            "diff": [
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java b/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "index ab175a7e6e..8ec777e1c6 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "@@ -105,5 +105,5 @@ import java.util.Properties;",
                "+import static java.util.Collections.synchronizedList;",
                " import static org.silverpeas.core.SilverpeasExceptionMessages.*;",
                "-import static org.silverpeas.core.personalization.service.PersonalizationServiceProvider",
                "-    .getPersonalizationService;",
                "+import static org.silverpeas.core.personalization.service.PersonalizationServiceProvider.getPersonalizationService;",
                "@@ -125,3 +125,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "   private DomainNavigationStock targetDomain = null;",
                "-  private List<GroupNavigationStock> groupsPath = new ArrayList<>();",
                "+  private List<GroupNavigationStock> groupsPath = synchronizedList(new ArrayList<>());",
                "   private SynchroThread synchroThread = null;",
                "@@ -133,3 +133,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "   private AdminController adminCtrl = null;",
                "-  private List<String> listSelectedUsers = new ArrayList<String>();",
                "+  private List<String> listSelectedUsers = synchronizedList(new ArrayList<>());",
                "   // pagination de la liste des r\u00c3\u00a9sultats",
                "@@ -138,3 +138,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "   private ListIndex currentIndex = new ListIndex(0);",
                "-  private List<UserDetail> sessionUsers = new ArrayList<>();",
                "+  private List<UserDetail> sessionUsers = synchronizedList(new ArrayList<>());",
                "@@ -318,3 +318,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "       // Send an email notification",
                "-      Map<String, SilverpeasTemplate> templates = new HashMap<String, SilverpeasTemplate>();",
                "+      Map<String, SilverpeasTemplate> templates = new HashMap<>();",
                "@@ -418,3 +418,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "             lUserIds = Arrays.asList(lastGroup.getUserIds());",
                "-            lNewUserIds = new ArrayList<String>(lUserIds);",
                "+            lNewUserIds = new ArrayList<>(lUserIds);",
                "             lNewUserIds.remove(theUserIdToRegroup);",
                "@@ -458,3 +458,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "         lUserIds = Arrays.asList(group.getUserIds());",
                "-        lNewUserIds = new ArrayList<String>(lUserIds);",
                "+        lNewUserIds = new ArrayList<>(lUserIds);",
                "         lNewUserIds.add(theUserIdToRegroup);",
                "@@ -748,3 +748,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "       // donn\u00c3\u00a9es sp\u00c3\u00a9cifiques",
                "-      properties = new HashMap<String, String>();",
                "+      properties = new HashMap<>();",
                "       if (csvReader.getSpecificNbCols() > 0) {",
                "@@ -1013,3 +1013,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "     String rootGroupId;",
                "-    List<String> groupIdLinksToRemove = new ArrayList<String>();",
                "+    List<String> groupIdLinksToRemove = new ArrayList<>();",
                "     for (GroupDetail directGroup : directGroups) {",
                "@@ -1121,3 +1121,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "-  private void removeGroupFromPath(String groupId) throws JobDomainPeasException {",
                "+  private void removeGroupFromPath(String groupId) {",
                "     if (StringUtil.isDefined(groupId)) {",
                "@@ -1196,5 +1196,5 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "   public List<List> getGroupManagers() throws JobDomainPeasException {",
                "-    List<List> usersAndGroups = new ArrayList<List>();",
                "-    List<UserDetail> users = new ArrayList<UserDetail>();",
                "-    List<Group> groups = new ArrayList<Group>();",
                "+    List<List> usersAndGroups = new ArrayList<>();",
                "+    List<UserDetail> users = new ArrayList<>();",
                "+    List<Group> groups = new ArrayList<>();",
                "@@ -1216,3 +1216,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "   public void initUserPanelForGroupManagers(List<String> userIds,",
                "-      List<String> groupIds) throws SelectionException, JobDomainPeasException {",
                "+      List<String> groupIds) throws SelectionException {",
                "     sel.resetAll();",
                "@@ -1241,3 +1241,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "-  public boolean isGroupRoot(String groupId) throws JobDomainPeasException {",
                "+  public boolean isGroupRoot(String groupId) {",
                "     Group gr = adminCtrl.getGroupById(groupId);",
                "@@ -1493,3 +1493,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "   public List<Domain> getAllDomains() {",
                "-    List<Domain> domains = new ArrayList<Domain>();",
                "+    List<Domain> domains = new ArrayList<>();",
                "     UserDetail ud = getUserDetail();",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "index c979efcec5..d1e062e769 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "@@ -84,10 +84,37 @@ public class JobDomainPeasRequestRouter extends",
                "-  private static final String DOMAIN_CREATE_FUNCTION = \"domainCreate\";",
                "-  private static final String DOMAIN_SCIM_CREATE_FUNCTION = \"domainSCIMCreate\";",
                "-  private static final String DOMAIN_SQL_CREATE_FUNCTION = \"domainSQLCreate\";",
                "-  private static final String DOMAIN_DELETE_FUNCTION = \"domainDelete\";",
                "-  private static final String DOMAIN_SCIM_DELETE_FUNCTION = \"domainSCIMDelete\";",
                "-  private static final String DOMAIN_SQL_DELETE_FUNCTION = \"domainSQLDelete\";",
                "-",
                "-  private static final String DOMAIN_CREATE_JSP = \"domainCreate.jsp\";",
                "+  private static final String DOMAIN_CREATE_FCT = \"domainCreate\";",
                "+  private static final String DOMAIN_SCIM_CREATE_FCT = \"domainSCIMCreate\";",
                "+  private static final String DOMAIN_SQL_CREATE_FCT = \"domainSQLCreate\";",
                "+  private static final String DOMAIN_DELETE_FCT = \"domainDelete\";",
                "+  private static final String DOMAIN_SCIM_DELETE_FCT = \"domainSCIMDelete\";",
                "+  private static final String DOMAIN_SQL_DELETE_FCT = \"domainSQLDelete\";",
                "+  private static final String DOMAIN_CONTENT_FCT = \"domainContent\";",
                "+  private static final String USER_CONTENT_FCT = \"userContent\";",
                "+  private static final String GROUP_CONTENT_FCT = \"groupContent\";",
                "+  private static final String DISPLAY_USER_IMPORT_FCT = \"displayUserImport\";",
                "+  private static final String IDDOMAIN_PARAM = \"Iddomain\";",
                "+  private static final String IDGROUP_PARAM = \"Idgroup\";",
                "+  private static final String GROUP_NAME_PARAM = \"groupName\";",
                "+  private static final String DOMAIN_DESCRIPTION_PARAM = \"domainDescription\";",
                "+  private static final String DOMAIN_NAME_PARAM = \"domainName\";",
                "+  private static final String SILVERPEAS_SERVER_URL_PARAM = \"silverpeasServerURL\";",
                "+  private static final String USER_DOMAIN_QUOTA_MAX_COUNT_PARAM = \"userDomainQuotaMaxCount\";",
                "+  private static final String GROUP_OBJECT_ATTR = \"groupObject\";",
                "+  private static final String ACTION_ATTR = \"action\";",
                "+  private static final String GROUPS_PATH_ATTR = \"groupsPath\";",
                "+  private static final String MY_COMPONENT_URL_ATTR = \"myComponentURL\";",
                "+  private static final String USER_OBJECT_ATTR = \"userObject\";",
                "+  private static final String MIN_LENGTH_LOGIN_ATTR = \"minLengthLogin\";",
                "+  private static final String CURRENT_USER_ATTR = \"CurrentUser\";",
                "+  private static final String IS_ONLY_GROUP_MANAGER_ATTR = \"isOnlyGroupManager\";",
                "+  private static final String DOMAIN_OBJECT_ATTR = \"domainObject\";",
                "+  private static final String USERS_ATTR = \"Users\";",
                "+  private static final String DOMAIN_NAVIGATION_DEST = \"domainNavigation.jsp\";",
                "+  private static final String DOMAIN_SYNCHRO_PING_DEST = \"domainSynchroPing.jsp\";",
                "+  private static final String DOMAIN_CREATE_DEST = \"domainCreate.jsp\";",
                "+  private static final String USER_CREATE_DEST = \"userCreate.jsp\";",
                "+  private static final String USER_CONTENT_DEST = \"userContent.jsp\";",
                "+  private static final String DOMAIN_CONTENT_DEST = \"domainContent.jsp\";",
                "+  private static final String GROUP_CONTENT_DEST = \"groupContent.jsp\";",
                "+  private static final String GO_BACK_DEST = \"goBack.jsp\";",
                "@@ -141,3 +168,3 @@ public class JobDomainPeasRequestRouter extends",
                "-        function = \"domainContent\";",
                "+        function = DOMAIN_CONTENT_FCT;",
                "         id = jobDomainSC.getSelectedUserId();",
                "@@ -145,3 +172,3 @@ public class JobDomainPeasRequestRouter extends",
                "           jobDomainSC.setTargetUser(id);",
                "-          function = \"userContent\";",
                "+          function = USER_CONTENT_FCT;",
                "         } else {",
                "@@ -150,3 +177,3 @@ public class JobDomainPeasRequestRouter extends",
                "             jobDomainSC.goIntoGroup(id);",
                "-            function = \"groupContent\";",
                "+            function = GROUP_CONTENT_FCT;",
                "           }",
                "@@ -167,3 +194,3 @@ public class JobDomainPeasRequestRouter extends",
                "         }",
                "-        function = \"domainContent\";",
                "+        function = DOMAIN_CONTENT_FCT;",
                "       }",
                "@@ -177,3 +204,3 @@ public class JobDomainPeasRequestRouter extends",
                "         jobDomainSC.setTargetUser(user.getId());",
                "-        destination = \"userContent.jsp\";",
                "+        destination = USER_CONTENT_DEST;",
                "       } else if (\"NextUser\".equals(function)) {",
                "@@ -181,3 +208,3 @@ public class JobDomainPeasRequestRouter extends",
                "         jobDomainSC.setTargetUser(user.getId());",
                "-        destination = \"userContent.jsp\";",
                "+        destination = USER_CONTENT_DEST;",
                "       } else if (function.startsWith(\"user\")) {",
                "@@ -185,3 +212,3 @@ public class JobDomainPeasRequestRouter extends",
                "         String userId = request.getParameter(\"Iduser\");",
                "-        if (function.startsWith(\"userContent\")) {",
                "+        if (function.startsWith(USER_CONTENT_FCT)) {",
                "           if (StringUtil.isDefined(userId)) {",
                "@@ -211,3 +238,3 @@ public class JobDomainPeasRequestRouter extends",
                "-          destination = \"domainContent.jsp\";",
                "+          destination = DOMAIN_CONTENT_DEST;",
                "         } else if (function.startsWith(\"userModify\")) {",
                "@@ -271,5 +298,5 @@ public class JobDomainPeasRequestRouter extends",
                "           request.setAttribute(\"Query\", query);",
                "-          request.setAttribute(\"Users\", users);",
                "+          request.setAttribute(USERS_ATTR, users);",
                "-          destination = getDestination(\"displayUserImport\", jobDomainSC, request);",
                "+          destination = getDestination(DISPLAY_USER_IMPORT_FCT, jobDomainSC, request);",
                "         } else if (\"userImport\".equals(function)) {",
                "@@ -348,5 +375,5 @@ public class JobDomainPeasRequestRouter extends",
                "           if (jobDomainSC.getTargetUserDetail() != null) {",
                "-            destination = \"userContent.jsp\";",
                "+            destination = USER_CONTENT_DEST;",
                "           } else {",
                "-            destination = getDestination(\"groupContent\", jobDomainSC, request);",
                "+            destination = getDestination(GROUP_CONTENT_FCT, jobDomainSC, request);",
                "           }",
                "@@ -361,4 +388,4 @@ public class JobDomainPeasRequestRouter extends",
                "         // ----------------",
                "-        if (function.startsWith(\"groupContent\")) {",
                "-          String groupId = request.getParameter(\"Idgroup\");",
                "+        if (function.startsWith(GROUP_CONTENT_FCT)) {",
                "+          String groupId = request.getParameter(IDGROUP_PARAM);",
                "           if (StringUtil.isDefined(groupId)) {",
                "@@ -367,5 +394,5 @@ public class JobDomainPeasRequestRouter extends",
                "         } else if (function.startsWith(\"groupExport.txt\")) {",
                "-          String groupId = request.getParameter(\"Idgroup\");",
                "+          String groupId = request.getParameter(IDGROUP_PARAM);",
                "           if (StringUtil.isDefined(groupId)) {",
                "-            jobDomainSC.goIntoGroup(request.getParameter(\"Idgroup\"));",
                "+            jobDomainSC.goIntoGroup(request.getParameter(IDGROUP_PARAM));",
                "             destination = \"exportgroup.jsp\";",
                "@@ -373,9 +400,9 @@ public class JobDomainPeasRequestRouter extends",
                "         } else if (function.startsWith(\"groupReturn\")) {",
                "-          jobDomainSC.returnIntoGroup(request.getParameter(\"Idgroup\"));",
                "+          jobDomainSC.returnIntoGroup(request.getParameter(IDGROUP_PARAM));",
                "         } else if (function.startsWith(\"groupSet\")) {",
                "           jobDomainSC.returnIntoGroup(null);",
                "-          jobDomainSC.goIntoGroup(request.getParameter(\"Idgroup\"));",
                "+          jobDomainSC.goIntoGroup(request.getParameter(IDGROUP_PARAM));",
                "         } else if (function.startsWith(\"groupCreate\")) {",
                "           bHaveToRefreshDomain = jobDomainSC.createGroup(request.getParameter(\"Idparent\"),",
                "-              WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"groupName\")),",
                "+              WebEncodeHelper.htmlStringToJavaString(request.getParameter(GROUP_NAME_PARAM)),",
                "               WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"groupDescription\")),",
                "@@ -383,4 +410,4 @@ public class JobDomainPeasRequestRouter extends",
                "         } else if (function.startsWith(\"groupModify\")) {",
                "-          bHaveToRefreshDomain = jobDomainSC.modifyGroup(request.getParameter(\"Idgroup\"),",
                "-              WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"groupName\")),",
                "+          bHaveToRefreshDomain = jobDomainSC.modifyGroup(request.getParameter(IDGROUP_PARAM),",
                "+              WebEncodeHelper.htmlStringToJavaString(request.getParameter(GROUP_NAME_PARAM)),",
                "               WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"groupDescription\")),",
                "@@ -391,9 +418,10 @@ public class JobDomainPeasRequestRouter extends",
                "         } else if (function.startsWith(\"groupDelete\")) {",
                "-          bHaveToRefreshDomain = jobDomainSC.deleteGroup(request.getParameter(\"Idgroup\"));",
                "+          bHaveToRefreshDomain = jobDomainSC.deleteGroup(request.getParameter(IDGROUP_PARAM));",
                "         } else if (function.startsWith(\"groupSynchro\")) {",
                "-          bHaveToRefreshDomain = jobDomainSC.synchroGroup(request.getParameter(\"Idgroup\"));",
                "+          bHaveToRefreshDomain = jobDomainSC.synchroGroup(request.getParameter(IDGROUP_PARAM));",
                "         } else if (function.startsWith(\"groupUnSynchro\")) {",
                "-          bHaveToRefreshDomain = jobDomainSC.unsynchroGroup(request.getParameter(\"Idgroup\"));",
                "+          bHaveToRefreshDomain = jobDomainSC.unsynchroGroup(request.getParameter(IDGROUP_PARAM));",
                "         } else if (function.startsWith(\"groupImport\")) {",
                "-          bHaveToRefreshDomain = jobDomainSC.importGroup(WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"groupName\")));",
                "+          bHaveToRefreshDomain = jobDomainSC.importGroup(WebEncodeHelper.htmlStringToJavaString(request.getParameter(",
                "+              GROUP_NAME_PARAM)));",
                "         } else if (\"groupManagersView\".equals(function)) {",
                "@@ -401,3 +429,3 @@ public class JobDomainPeasRequestRouter extends",
                "-          request.setAttribute(\"Users\", groupManagers.get(0));",
                "+          request.setAttribute(USERS_ATTR, groupManagers.get(0));",
                "           request.setAttribute(\"Groups\", groupManagers.get(1));",
                "@@ -447,3 +475,3 @@ public class JobDomainPeasRequestRouter extends",
                "-            destination = \"groupContent.jsp\";",
                "+            destination = GROUP_CONTENT_DEST;",
                "           } else {",
                "@@ -460,3 +488,3 @@ public class JobDomainPeasRequestRouter extends",
                "             }",
                "-            destination = \"groupContent.jsp\";",
                "+            destination = GROUP_CONTENT_DEST;",
                "           } else if (bHaveToRefreshDomain) {",
                "@@ -464,3 +492,3 @@ public class JobDomainPeasRequestRouter extends",
                "           } else {",
                "-            destination = getDestination(\"domainContent\", jobDomainSC, request);",
                "+            destination = getDestination(DOMAIN_CONTENT_FCT, jobDomainSC, request);",
                "           }",
                "@@ -471,56 +499,58 @@ public class JobDomainPeasRequestRouter extends",
                "-        if (function.startsWith(\"domainNavigation\")) {",
                "-          jobDomainSC.setTargetDomain(request.getParameter(\"Iddomain\"));",
                "+        if (function.startsWith(\"domainGoTo\")) {",
                "+          jobDomainSC.setTargetDomain(request.getParameter(IDDOMAIN_PARAM));",
                "           jobDomainSC.returnIntoGroup(null);",
                "           jobDomainSC.setRefreshDomain(true);",
                "-",
                "-          destination = \"domainNavigation.jsp\";",
                "+          return emptyJsonResponse();",
                "+        } else if (function.startsWith(\"domainNavigation\")) {",
                "+          jobDomainSC.setTargetDomain(request.getParameter(IDDOMAIN_PARAM));",
                "+          jobDomainSC.returnIntoGroup(null);",
                "+          jobDomainSC.setRefreshDomain(true);",
                "+          destination = DOMAIN_NAVIGATION_DEST;",
                "         } else if (function.startsWith(\"domainRefreshCurrentLevel\")) {",
                "           request.setAttribute(\"domainRefreshCurrentLevel\", true);",
                "-          destination = \"domainNavigation.jsp\";",
                "+          destination = DOMAIN_NAVIGATION_DEST;",
                "         } else {",
                "-          if (function.startsWith(\"domainContent\")) {",
                "+          if (function.startsWith(DOMAIN_CONTENT_FCT)) {",
                "             jobDomainSC.returnIntoGroup(null);",
                "-          } else if (function.startsWith(DOMAIN_CREATE_FUNCTION) ||",
                "-              function.startsWith(DOMAIN_SCIM_CREATE_FUNCTION)) {",
                "+          } else if (function.startsWith(DOMAIN_CREATE_FCT) ||",
                "+              function.startsWith(DOMAIN_SCIM_CREATE_FCT)) {",
                "             String newDomainId = jobDomainSC.createDomain(request2Domain(request),",
                "-                function.startsWith(DOMAIN_CREATE_FUNCTION)",
                "+                function.startsWith(DOMAIN_CREATE_FCT)",
                "                     ? DomainType.EXTERNAL",
                "                     : DomainType.SCIM);",
                "-            request.setAttribute(\"URLForContent\", \"domainNavigation?Iddomain=\" + newDomainId);",
                "-            destination = \"goBack.jsp\";",
                "-          } else if (function.startsWith(DOMAIN_SQL_CREATE_FUNCTION)) {",
                "-            String newDomainId = jobDomainSC.createSQLDomain(WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"domainName\")),",
                "-                WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"domainDescription\")),",
                "-                WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"silverpeasServerURL\")),",
                "-                request.getParameter(\"userDomainQuotaMaxCount\"));",
                "-            request.setAttribute(\"URLForContent\", \"domainNavigation?Iddomain=\" + newDomainId);",
                "-            destination = \"goBack.jsp\";",
                "+            request.setAttribute(IDDOMAIN_PARAM, newDomainId);",
                "+            destination = GO_BACK_DEST;",
                "+          } else if (function.startsWith(DOMAIN_SQL_CREATE_FCT)) {",
                "+            String newDomainId = jobDomainSC.createSQLDomain(WebEncodeHelper.htmlStringToJavaString(request.getParameter(DOMAIN_NAME_PARAM)),",
                "+                WebEncodeHelper.htmlStringToJavaString(request.getParameter(DOMAIN_DESCRIPTION_PARAM)),",
                "+                WebEncodeHelper.htmlStringToJavaString(request.getParameter(SILVERPEAS_SERVER_URL_PARAM)),request.getParameter(USER_DOMAIN_QUOTA_MAX_COUNT_PARAM));",
                "+            request.setAttribute(IDDOMAIN_PARAM, newDomainId);",
                "+            destination = GO_BACK_DEST;",
                "           } else if (function.startsWith(\"domainModify\")) {",
                "             String modifiedDomainId = jobDomainSC.modifyDomain(request2Domain(request),",
                "-                    request.getParameter(\"userDomainQuotaMaxCount\"));",
                "-            request.setAttribute(\"URLForContent\", \"domainNavigation?Iddomain=\" + modifiedDomainId);",
                "-            destination = \"goBack.jsp\";",
                "+                    request.getParameter(USER_DOMAIN_QUOTA_MAX_COUNT_PARAM));",
                "+            request.setAttribute(IDDOMAIN_PARAM, modifiedDomainId);",
                "+            destination = GO_BACK_DEST;",
                "           } else if (function.startsWith(\"domainSQLModify\")) {",
                "             String modifiedDomainId = jobDomainSC.modifySQLDomain(WebEncodeHelper.",
                "-                    htmlStringToJavaString(request.getParameter(\"domainName\")), WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"domainDescription\")),",
                "-                WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"silverpeasServerURL\")),",
                "-                request.getParameter(\"userDomainQuotaMaxCount\"));",
                "-            request.setAttribute(\"URLForContent\", \"domainNavigation?Iddomain=\" + modifiedDomainId);",
                "-            destination = \"goBack.jsp\";",
                "-          } else if (function.startsWith(DOMAIN_DELETE_FUNCTION)) {",
                "+                    htmlStringToJavaString(request.getParameter(DOMAIN_NAME_PARAM)), WebEncodeHelper.htmlStringToJavaString(request.getParameter(",
                "+                DOMAIN_DESCRIPTION_PARAM)),",
                "+                WebEncodeHelper.htmlStringToJavaString(request.getParameter(",
                "+                    SILVERPEAS_SERVER_URL_PARAM)),",
                "+                request.getParameter(USER_DOMAIN_QUOTA_MAX_COUNT_PARAM));",
                "+            request.setAttribute(IDDOMAIN_PARAM, modifiedDomainId);",
                "+            destination = GO_BACK_DEST;",
                "+          } else if (function.startsWith(DOMAIN_DELETE_FCT)) {",
                "             jobDomainSC.deleteDomain(DomainType.EXTERNAL);",
                "-            request.setAttribute(\"URLForContent\", \"domainNavigation\");",
                "-            destination = \"goBack.jsp\";",
                "-          }  else if (function.startsWith(DOMAIN_SCIM_DELETE_FUNCTION)) {",
                "+            destination = GO_BACK_DEST;",
                "+          }  else if (function.startsWith(DOMAIN_SCIM_DELETE_FCT)) {",
                "             jobDomainSC.deleteDomain(DomainType.SCIM);",
                "-            request.setAttribute(\"URLForContent\", \"domainNavigation\");",
                "-            destination = \"goBack.jsp\";",
                "-          } else if (function.startsWith(DOMAIN_SQL_DELETE_FUNCTION)) {",
                "+            destination = GO_BACK_DEST;",
                "+          } else if (function.startsWith(DOMAIN_SQL_DELETE_FCT)) {",
                "             jobDomainSC.deleteSQLDomain();",
                "-            request.setAttribute(\"URLForContent\", \"domainNavigation\");",
                "-            destination = \"goBack.jsp\";",
                "+            destination = GO_BACK_DEST;",
                "           } else if (function.startsWith(\"domainPingSynchro\")) {",
                "             if (jobDomainSC.isEnCours()) {",
                "-              destination = \"domainSynchroPing.jsp\";",
                "+              destination = DOMAIN_SYNCHRO_PING_DEST;",
                "             } else {",
                "@@ -535,10 +565,9 @@ public class JobDomainPeasRequestRouter extends",
                "             jobDomainSC.synchroDomain(Level.valueOf(request.getParameter(\"IdTraceLevel\")));",
                "-            destination = \"domainSynchroPing.jsp\";",
                "+            destination = DOMAIN_SYNCHRO_PING_DEST;",
                "           } else if (function.startsWith(\"domainSQLSynchro\")) {",
                "             jobDomainSC.synchroSQLDomain();",
                "-            destination = \"domainSynchroPing.jsp\";",
                "+            destination = DOMAIN_SYNCHRO_PING_DEST;",
                "           } else if (function.startsWith(\"domainRefresh\")) {",
                "-            request.setAttribute(\"URLForContent\",",
                "-                \"domainNavigation?Iddomain=\" + jobDomainSC.getTargetDomain().getId());",
                "-            destination = \"goBack.jsp\";",
                "+            request.setAttribute(IDDOMAIN_PARAM, jobDomainSC.getTargetDomain().getId());",
                "+            destination = GO_BACK_DEST;",
                "           }",
                "@@ -547,3 +576,3 @@ public class JobDomainPeasRequestRouter extends",
                "             if (jobDomainSC.getTargetDomain() != null) {",
                "-              destination = \"domainContent.jsp\";",
                "+              destination = DOMAIN_CONTENT_DEST;",
                "             } else {",
                "@@ -557,18 +586,20 @@ public class JobDomainPeasRequestRouter extends",
                "-          newGroup.setSuperGroupId(request.getParameter(\"Idgroup\"));",
                "-          request.setAttribute(\"groupObject\", newGroup);",
                "-          request.setAttribute(\"action\", \"groupCreate\");",
                "-          request.setAttribute(\"groupsPath\", jobDomainSC.getPath((String) request.getAttribute(\"myComponentURL\"),",
                "-              jobDomainSC.getString(\"JDP.groupAdd\") + \"...\"));",
                "+          newGroup.setSuperGroupId(request.getParameter(IDGROUP_PARAM));",
                "+          request.setAttribute(GROUP_OBJECT_ATTR, newGroup);",
                "+          request.setAttribute(ACTION_ATTR, \"groupCreate\");",
                "+          request.setAttribute(GROUPS_PATH_ATTR, jobDomainSC",
                "+              .getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR),",
                "+                  jobDomainSC.getString(\"JDP.groupAdd\") + \"...\"));",
                "           destination = \"groupCreate.jsp\";",
                "         } else if (function.startsWith(\"displayGroupModify\")) {",
                "-          request.setAttribute(\"groupObject\", jobDomainSC.getTargetGroup());",
                "-          request.setAttribute(\"action\", \"groupModify\");",
                "-          request.setAttribute(\"groupsPath\", jobDomainSC.getPath((String) request.getAttribute(\"myComponentURL\"),",
                "-              jobDomainSC.getString(\"JDP.groupUpdate\") + \"...\"));",
                "+          request.setAttribute(GROUP_OBJECT_ATTR, jobDomainSC.getTargetGroup());",
                "+          request.setAttribute(ACTION_ATTR, \"groupModify\");",
                "+          request.setAttribute(GROUPS_PATH_ATTR, jobDomainSC",
                "+              .getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR),",
                "+                  jobDomainSC.getString(\"JDP.groupUpdate\") + \"...\"));",
                "           destination = \"groupCreate.jsp\";",
                "         } else if (function.startsWith(\"displayGroupImport\")) {",
                "-          request.setAttribute(\"groupsPath\", jobDomainSC.getPath((String) request.getAttribute",
                "-                  (\"myComponentURL\"),",
                "-              jobDomainSC.getString(\"JDP.groupImport\") + \"...\"));",
                "+          request.setAttribute(GROUPS_PATH_ATTR, jobDomainSC",
                "+              .getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR),",
                "+                  jobDomainSC.getString(\"JDP.groupImport\") + \"...\"));",
                "           destination = \"groupImport.jsp\";",
                "@@ -576,5 +607,6 @@ public class JobDomainPeasRequestRouter extends",
                "           destination = jobDomainSC.initSelectionPeasForOneGroupOrUser((String) request.",
                "-              getAttribute(\"myComponentURL\"));",
                "+              getAttribute(MY_COMPONENT_URL_ATTR));",
                "         } else if (function.startsWith(\"displayAddRemoveUsers\")) {",
                "-          destination = jobDomainSC.initSelectionPeasForGroups((String) request.getAttribute(\"myComponentURL\"));",
                "+          destination = jobDomainSC",
                "+              .initSelectionPeasForGroups((String) request.getAttribute(MY_COMPONENT_URL_ATTR));",
                "         } else if (function.startsWith(\"displayUserCreate\")) {",
                "@@ -587,8 +619,9 @@ public class JobDomainPeasRequestRouter extends",
                "-          request.setAttribute(\"userObject\", newUser);",
                "-          request.setAttribute(\"action\", \"userCreate\");",
                "-          request.setAttribute(\"groupsPath\", jobDomainSC.getPath((String) request.getAttribute(\"myComponentURL\"),",
                "+          request.setAttribute(USER_OBJECT_ATTR, newUser);",
                "+          request.setAttribute(ACTION_ATTR, \"userCreate\");",
                "+          request.setAttribute(GROUPS_PATH_ATTR,",
                "+              jobDomainSC.getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR),",
                "               jobDomainSC.getString(\"JDP.userAdd\") + \"...\"));",
                "-          request.setAttribute(\"minLengthLogin\", jobDomainSC.getMinLengthLogin());",
                "-          request.setAttribute(\"CurrentUser\", jobDomainSC.getUserDetail());",
                "+          request.setAttribute(MIN_LENGTH_LOGIN_ATTR, jobDomainSC.getMinLengthLogin());",
                "+          request.setAttribute(CURRENT_USER_ATTR, jobDomainSC.getUserDetail());",
                "           // if community management is activated, add groups on this user is manager",
                "@@ -598,27 +631,29 @@ public class JobDomainPeasRequestRouter extends",
                "-          destination = \"userCreate.jsp\";",
                "+          destination = USER_CREATE_DEST;",
                "         } else if (function.startsWith(\"displayUsersCsvImport\")) {",
                "-          request.setAttribute(\"groupsPath\", jobDomainSC.getPath((String) request.getAttribute",
                "-                  (\"myComponentURL\"),",
                "-              jobDomainSC.getString(\"JDP.csvImport\") + \"...\"));",
                "+          request.setAttribute(GROUPS_PATH_ATTR, jobDomainSC",
                "+              .getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR),",
                "+                  jobDomainSC.getString(\"JDP.csvImport\") + \"...\"));",
                "           destination = \"usersCsvImport.jsp\";",
                "         } else if (function.startsWith(\"displayUserModify\")) {",
                "-          request.setAttribute(\"userObject\", jobDomainSC.getTargetUserFull());",
                "-          request.setAttribute(\"action\", \"userModify\");",
                "-          request.setAttribute(\"groupsPath\", jobDomainSC.getPath((String) request.getAttribute(\"myComponentURL\"),",
                "-              jobDomainSC.getString(\"JDP.userUpdate\") + \"...\"));",
                "-          request.setAttribute(\"minLengthLogin\", jobDomainSC.getMinLengthLogin());",
                "-          request.setAttribute(\"CurrentUser\", jobDomainSC.getUserDetail());",
                "-",
                "-          destination = \"userCreate.jsp\";",
                "+          request.setAttribute(USER_OBJECT_ATTR, jobDomainSC.getTargetUserFull());",
                "+          request.setAttribute(ACTION_ATTR, \"userModify\");",
                "+          request.setAttribute(GROUPS_PATH_ATTR, jobDomainSC",
                "+              .getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR),",
                "+                  jobDomainSC.getString(\"JDP.userUpdate\") + \"...\"));",
                "+          request.setAttribute(MIN_LENGTH_LOGIN_ATTR, jobDomainSC.getMinLengthLogin());",
                "+          request.setAttribute(CURRENT_USER_ATTR, jobDomainSC.getUserDetail());",
                "+",
                "+          destination = USER_CREATE_DEST;",
                "         } else if (function.startsWith(\"displayUserMS\")) {",
                "-          request.setAttribute(\"userObject\", jobDomainSC.getTargetUserFull());",
                "-          request.setAttribute(\"action\", \"userMS\");",
                "-          request.setAttribute(\"groupsPath\", jobDomainSC.getPath((String) request.getAttribute(\"myComponentURL\"),",
                "-              jobDomainSC.getString(\"JDP.userUpdate\") + \"...\"));",
                "-          request.setAttribute(\"minLengthLogin\", jobDomainSC.getMinLengthLogin());",
                "-          request.setAttribute(\"CurrentUser\", jobDomainSC.getUserDetail());",
                "-",
                "-          destination = \"userCreate.jsp\";",
                "-        } else if (function.startsWith(\"displayUserImport\")) {",
                "+          request.setAttribute(USER_OBJECT_ATTR, jobDomainSC.getTargetUserFull());",
                "+          request.setAttribute(ACTION_ATTR, \"userMS\");",
                "+          request.setAttribute(GROUPS_PATH_ATTR, jobDomainSC",
                "+              .getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR),",
                "+                  jobDomainSC.getString(\"JDP.userUpdate\") + \"...\"));",
                "+          request.setAttribute(MIN_LENGTH_LOGIN_ATTR, jobDomainSC.getMinLengthLogin());",
                "+          request.setAttribute(CURRENT_USER_ATTR, jobDomainSC.getUserDetail());",
                "+",
                "+          destination = USER_CREATE_DEST;",
                "+        } else if (function.startsWith(DISPLAY_USER_IMPORT_FCT)) {",
                "           request.setAttribute(\"SelectedIds\", jobDomainSC.getListSelectedUsers());",
                "@@ -626,4 +661,5 @@ public class JobDomainPeasRequestRouter extends",
                "               getIndexOfFirstItemToDisplay());",
                "-          request.setAttribute(\"groupsPath\", jobDomainSC.getPath((String) request.getAttribute(\"myComponentURL\"),",
                "-              jobDomainSC.getString(\"JDP.userImport\") + \"...\"));",
                "+          request.setAttribute(GROUPS_PATH_ATTR, jobDomainSC",
                "+              .getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR),",
                "+                  jobDomainSC.getString(\"JDP.userImport\") + \"...\"));",
                "           request.setAttribute(\"properties\", jobDomainSC.getPropertiesToImport());",
                "@@ -636,5 +672,5 @@ public class JobDomainPeasRequestRouter extends",
                "           theNewDomain.setSilverpeasServerURL(URLUtil.getAbsoluteApplicationURL());",
                "-          request.setAttribute(\"domainObject\", theNewDomain);",
                "-          request.setAttribute(\"action\", DOMAIN_CREATE_FUNCTION);",
                "-          destination = DOMAIN_CREATE_JSP;",
                "+          request.setAttribute(DOMAIN_OBJECT_ATTR, theNewDomain);",
                "+          request.setAttribute(ACTION_ATTR, DOMAIN_CREATE_FCT);",
                "+          destination = DOMAIN_CREATE_DEST;",
                "         } else if (function.startsWith(\"displayDomainSCIMCreate\")) {",
                "@@ -645,5 +681,5 @@ public class JobDomainPeasRequestRouter extends",
                "           theNewDomain.setSilverpeasServerURL(URLUtil.getAbsoluteApplicationURL());",
                "-          request.setAttribute(\"domainObject\", theNewDomain);",
                "-          request.setAttribute(\"action\", DOMAIN_SCIM_CREATE_FUNCTION);",
                "-          destination = DOMAIN_CREATE_JSP;",
                "+          request.setAttribute(DOMAIN_OBJECT_ATTR, theNewDomain);",
                "+          request.setAttribute(ACTION_ATTR, DOMAIN_SCIM_CREATE_FCT);",
                "+          destination = DOMAIN_CREATE_DEST;",
                "         } else if (function.startsWith(\"displayDomainSQLCreate\")) {",
                "@@ -651,10 +687,10 @@ public class JobDomainPeasRequestRouter extends",
                "           theNewDomain.setSilverpeasServerURL(URLUtil.getAbsoluteApplicationURL());",
                "-          request.setAttribute(\"domainObject\", theNewDomain);",
                "-          request.setAttribute(\"action\", DOMAIN_SQL_CREATE_FUNCTION);",
                "+          request.setAttribute(DOMAIN_OBJECT_ATTR, theNewDomain);",
                "+          request.setAttribute(ACTION_ATTR, DOMAIN_SQL_CREATE_FCT);",
                "           destination = \"domainSQLCreate.jsp\";",
                "         } else if (function.startsWith(\"displayDomainModify\")) {",
                "-          request.setAttribute(\"action\", \"domainModify\");",
                "-          destination = DOMAIN_CREATE_JSP;",
                "+          request.setAttribute(ACTION_ATTR, \"domainModify\");",
                "+          destination = DOMAIN_CREATE_DEST;",
                "         } else if (function.startsWith(\"displayDomainSQLModify\")) {",
                "-          request.setAttribute(\"action\", \"domainSQLModify\");",
                "+          request.setAttribute(ACTION_ATTR, \"domainSQLModify\");",
                "           destination = \"domainSQLCreate.jsp\";",
                "@@ -706,4 +742,4 @@ public class JobDomainPeasRequestRouter extends",
                "         request.setAttribute(\"Query\", jobDomainSC.getQueryToImport());",
                "-        request.setAttribute(\"Users\", jobDomainSC.getUsersToImport());",
                "-        destination = getDestination(\"displayUserImport\", jobDomainSC, request);",
                "+        request.setAttribute(USERS_ATTR, jobDomainSC.getUsersToImport());",
                "+        destination = getDestination(DISPLAY_USER_IMPORT_FCT, jobDomainSC, request);",
                "       } else if (\"SelectRightsUserOrGroup\".equals(function)) {",
                "@@ -726,5 +762,5 @@ public class JobDomainPeasRequestRouter extends",
                "         if (jobDomainSC.getTargetUserDetail() != null) {",
                "-          destination = \"userContent.jsp\";",
                "+          destination = USER_CONTENT_DEST;",
                "         } else {",
                "-          destination = \"groupContent.jsp\";",
                "+          destination = GROUP_CONTENT_DEST;",
                "         }",
                "@@ -737,5 +773,5 @@ public class JobDomainPeasRequestRouter extends",
                "       if (jobDomainSC.getTargetDomain() != null) {",
                "-        request.setAttribute(\"domainObject\", jobDomainSC.getTargetDomain());",
                "+        request.setAttribute(DOMAIN_OBJECT_ATTR, jobDomainSC.getTargetDomain());",
                "       }",
                "-      if (\"domainContent.jsp\".equals(destination)) {",
                "+      if (DOMAIN_CONTENT_DEST.equals(destination)) {",
                "         jobDomainSC.refresh();",
                "@@ -747,11 +783,11 @@ public class JobDomainPeasRequestRouter extends",
                "-        request.setAttribute(\"isOnlyGroupManager\", jobDomainSC.isOnlyGroupManager());",
                "+        request.setAttribute(IS_ONLY_GROUP_MANAGER_ATTR, jobDomainSC.isOnlyGroupManager());",
                "         request.setAttribute(\"isUserAddingAllowedForGroupManager\", jobDomainSC.",
                "             isUserAddingAllowedForGroupManager());",
                "-      } else if (\"groupContent.jsp\".equals(destination) || \"exportgroup.jsp\".equals(destination)) {",
                "+      } else if (GROUP_CONTENT_DEST.equals(destination) || \"exportgroup.jsp\".equals(destination)) {",
                "         long domainRight = jobDomainSC.getDomainActions();",
                "-        request.setAttribute(\"groupObject\", jobDomainSC.getTargetGroup());",
                "-        request.setAttribute(\"groupsPath\", jobDomainSC.getPath((String) request.getAttribute(",
                "-            \"myComponentURL\"), null));",
                "+        request.setAttribute(GROUP_OBJECT_ATTR, jobDomainSC.getTargetGroup());",
                "+        request.setAttribute(GROUPS_PATH_ATTR,",
                "+            jobDomainSC.getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR), null));",
                "         request.setAttribute(\"subGroups\", jobDomainSC.getSubGroups(true));",
                "@@ -764,3 +800,3 @@ public class JobDomainPeasRequestRouter extends",
                "             isGroupManagerDirectlyOnCurrentGroup());",
                "-        request.setAttribute(\"isOnlyGroupManager\", jobDomainSC.isOnlyGroupManager());",
                "+        request.setAttribute(IS_ONLY_GROUP_MANAGER_ATTR, jobDomainSC.isOnlyGroupManager());",
                "@@ -769,5 +805,5 @@ public class JobDomainPeasRequestRouter extends",
                "             jobDomainSC.isRightCopyReplaceEnabled());",
                "-      } else if (\"userContent.jsp\".equals(destination)) {",
                "-        request.setAttribute(\"groupsPath\", jobDomainSC.getPath((String) request.getAttribute(",
                "-            \"myComponentURL\"), null));",
                "+      } else if (USER_CONTENT_DEST.equals(destination)) {",
                "+        request.setAttribute(GROUPS_PATH_ATTR,",
                "+            jobDomainSC.getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR), null));",
                "@@ -777,3 +813,3 @@ public class JobDomainPeasRequestRouter extends",
                "           request.setAttribute(\"isX509Enabled\", (domainRight & ACTION_X509_USER) != 0);",
                "-          request.setAttribute(\"isOnlyGroupManager\", jobDomainSC.isOnlyGroupManager());",
                "+          request.setAttribute(IS_ONLY_GROUP_MANAGER_ATTR, jobDomainSC.isOnlyGroupManager());",
                "           request.setAttribute(\"userManageableByGroupManager\", jobDomainSC.",
                "@@ -781,3 +817,3 @@ public class JobDomainPeasRequestRouter extends",
                "         }",
                "-        request.setAttribute(\"userObject\", jobDomainSC.getTargetUserFull());",
                "+        request.setAttribute(USER_OBJECT_ATTR, jobDomainSC.getTargetUserFull());",
                "         request.setAttribute(\"Index\", jobDomainSC.getIndex());",
                "@@ -789,3 +825,3 @@ public class JobDomainPeasRequestRouter extends",
                "-      } else if (\"domainNavigation.jsp\".equals(destination)) {",
                "+      } else if (DOMAIN_NAVIGATION_DEST.equals(destination)) {",
                "         List<Domain> domains = jobDomainSC.getAllDomains();",
                "@@ -797,11 +833,6 @@ public class JobDomainPeasRequestRouter extends",
                "         request.setAttribute(\"CurrentDomain\", jobDomainSC.getTargetDomain());",
                "-        if (jobDomainSC.getTargetDomain() != null) {",
                "-          request.setAttribute(\"URLForContent\", \"domainContent\");",
                "-        } else {",
                "-          request.setAttribute(\"URLForContent\", \"welcome\");",
                "-        }",
                "       } else if (\"groupManagers.jsp\".equals(destination)) {",
                "-        request.setAttribute(\"groupObject\", jobDomainSC.getTargetGroup());",
                "-        request.setAttribute(\"groupsPath\", jobDomainSC.getPath((String) request.getAttribute(",
                "-            \"myComponentURL\"), null));",
                "+        request.setAttribute(GROUP_OBJECT_ATTR, jobDomainSC.getTargetGroup());",
                "+        request.setAttribute(GROUPS_PATH_ATTR,",
                "+            jobDomainSC.getPath((String) request.getAttribute(MY_COMPONENT_URL_ATTR), null));",
                "       }",
                "@@ -880,4 +911,5 @@ public class JobDomainPeasRequestRouter extends",
                "   private Domain request2Domain(HttpRequest request) {",
                "-    String name = WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"domainName\"));",
                "-    String desc = WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"domainDescription\"));",
                "+    String name = WebEncodeHelper.htmlStringToJavaString(request.getParameter(DOMAIN_NAME_PARAM));",
                "+    String desc = WebEncodeHelper.htmlStringToJavaString(request.getParameter(",
                "+        DOMAIN_DESCRIPTION_PARAM));",
                "     String driver = WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"domainDriver\"));",
                "@@ -885,3 +917,4 @@ public class JobDomainPeasRequestRouter extends",
                "     String authent = WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"domainAuthentication\"));",
                "-    String url = WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"silverpeasServerURL\"));",
                "+    String url = WebEncodeHelper.htmlStringToJavaString(request.getParameter(",
                "+        SILVERPEAS_SERVER_URL_PARAM));",
                "     String timeStamp = WebEncodeHelper.htmlStringToJavaString(request.getParameter(\"domainTimeStamp\"));",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobmanager/control/JobManagerPeasSessionController.java b/core-war/src/main/java/org/silverpeas/web/jobmanager/control/JobManagerPeasSessionController.java",
                "index c46fa698ef..0a5beed7d0 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobmanager/control/JobManagerPeasSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobmanager/control/JobManagerPeasSessionController.java",
                "@@ -93,6 +93,8 @@ public class JobManagerPeasSessionController extends AbstractComponentSessionCon",
                "     // initialisation des op\u00c3\u00a9rations du services jDesigner",
                "-    JobManagerService jdp = new JobManagerService(\"11\", \"JDP\", LEVEL_OPERATION, webContext",
                "-        + getURL(CMP_JOBDOMAINPEAS, null, null) + \"Main\", null, false);",
                "-    JobManagerService jspp = new JobManagerService(\"12\", \"JSPP\", LEVEL_OPERATION, webContext",
                "-        + getURL(CMP_JOBSTARTPAGEPEAS, null, null) + \"Main\", null, false);",
                "+    JobManagerService jdp = new JobManagerService(\"11\", \"JDP\", LEVEL_OPERATION,",
                "+        webContext + getURL(CMP_JOBDOMAINPEAS, null, null) + \"Main?ownBodyLayout=true\", null,",
                "+        false);",
                "+    JobManagerService jspp = new JobManagerService(\"12\", \"JSPP\", LEVEL_OPERATION,",
                "+        webContext + getURL(CMP_JOBSTARTPAGEPEAS, null, null) + \"Main?ownBodyLayout=true\", null,",
                "+        false);",
                "     JobManagerService jsp = new JobManagerService(\"14\", \"JSP\", LEVEL_OPERATION, webContext",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobmanager/servlets/JobManagerPeasRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/jobmanager/servlets/JobManagerPeasRequestRouter.java",
                "index 345b1f27ac..46ca49a22b 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobmanager/servlets/JobManagerPeasRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobmanager/servlets/JobManagerPeasRequestRouter.java",
                "@@ -25,5 +25,3 @@ package org.silverpeas.web.jobmanager.servlets;",
                "-import org.silverpeas.core.util.StringUtil;",
                "-import org.silverpeas.web.jobmanager.JobManagerService;",
                "-import org.silverpeas.web.jobmanager.control.JobManagerPeasSessionController;",
                "+import org.silverpeas.core.web.http.HttpRequest;",
                " import org.silverpeas.core.web.mvc.controller.ComponentContext;",
                "@@ -31,5 +29,9 @@ import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                " import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;",
                "-import org.silverpeas.core.web.http.HttpRequest;",
                "+import org.silverpeas.web.jobmanager.JobManagerService;",
                "+import org.silverpeas.web.jobmanager.control.JobManagerPeasSessionController;",
                " import javax.servlet.http.HttpServletRequest;",
                "+import javax.ws.rs.core.UriBuilder;",
                "+",
                "+import static org.silverpeas.core.util.StringUtil.isDefined;",
                "@@ -43,2 +45,5 @@ public class JobManagerPeasRequestRouter extends",
                "   private static final long serialVersionUID = -2003485584890163789L;",
                "+  private static final String OPERATION_ACTION = \"Operation\";",
                "+  private static final String SERVICE_ACTION = \"Service\";",
                "+  private static final String ID_PARAMETER = \"Id\";",
                "@@ -77,45 +82,8 @@ public class JobManagerPeasRequestRouter extends",
                "       HttpRequest request) {",
                "-    String destination = \"\";",
                "-",
                "+    String destination;",
                "     try {",
                "       if (function.startsWith(\"Main\")) {",
                "-        String spaceId = request.getParameter(\"SpaceId\");",
                "-        if (StringUtil.isDefined(spaceId)) {",
                "-          jobManagerSC.setDirectAccessToSpaceId(spaceId);",
                "-          jobManagerSC.changeServiceActif(\"1\");",
                "-          jobManagerSC.changeOperationActif(\"12\");",
                "-        } else {",
                "-          String service = request.getParameter(\"Service\");",
                "-          if (StringUtil.isDefined(service)) {",
                "-            String operation = request.getParameter(\"Operation\");",
                "-            jobManagerSC.changeServiceActif(service);",
                "-            jobManagerSC.changeOperationActif(operation);",
                "-          }",
                "-        }",
                "-        destination = \"/jobManagerPeas/jsp/jobManager.jsp\";",
                "-      } else if (function.startsWith(\"TopBarManager\")) {",
                "-        // lors du premier acc\u00c3\u00a8s=> via jobManager.jsp",
                "-        // set le service actif par le service par defaut; active aussi une",
                "-        // op\u00c3\u00a9ration par d\u00c3\u00a9faut pour ce service",
                "-        if (!StringUtil.isDefined(jobManagerSC.getIdServiceActif())) {",
                "-          jobManagerSC.changeServiceActif(jobManagerSC.getIdDefaultService());",
                "-        }",
                "-        destination = this.setAttributes(request, jobManagerSC);",
                "-      } else if (function.startsWith(\"ChangeService\")) {",
                "-        String idService = request.getParameter(\"Id\");",
                "-        // changer l'id repr\u00c3\u00a9sentant le service actif",
                "-        // set aussi l' idCurrentOperationActif pour ce service (\u00c3\u00a0 la vaeleur",
                "-        // par defaut ou la valeur pr\u00c3\u00a9cdente si existe",
                "-        jobManagerSC.changeServiceActif(idService);",
                "-        destination = this.setAttributes(request, jobManagerSC);",
                "-      } else if (function.startsWith(\"ChangeOperation\")) {",
                "-        String idOperation = request.getParameter(\"Id\");",
                "-        if (\"15\".equals(idOperation)) {",
                "-          Boolean mode = jobManagerSC.isAppInMaintenance();",
                "-          request.setAttribute(\"mode\", mode.toString());",
                "-        }",
                "-        // changer l'id repr\u00c3\u00a9sentant l'op\u00c3\u00a9ration active",
                "-        // set idCurrentOperationActif avec cette id",
                "-        jobManagerSC.changeOperationActif(idOperation);",
                "-        destination = this.setAttributes(request, jobManagerSC);",
                "+        destination = homePage(jobManagerSC, request);",
                "+      } else if (function.startsWith(\"TopBarManager\") || function.startsWith(\"Change\")) {",
                "+        destination = headerPart(request, jobManagerSC, function);",
                "       } else if (function.startsWith(\"SetMaintenanceMode\")) {",
                "@@ -125,4 +93,4 @@ public class JobManagerPeasRequestRouter extends",
                "       } else if (function.startsWith(\"ManageMaintenanceMode\")) {",
                "-        Boolean mode = jobManagerSC.isAppInMaintenance();",
                "-        request.setAttribute(\"mode\", mode.toString());",
                "+        boolean mode = jobManagerSC.isAppInMaintenance();",
                "+        request.setAttribute(\"mode\", Boolean.toString(mode));",
                "         destination = \"/jobManagerPeas/jsp/manageMaintenance.jsp\";",
                "@@ -135,3 +103,2 @@ public class JobManagerPeasRequestRouter extends",
                "     }",
                "-",
                "     return destination;",
                "@@ -139,4 +106,46 @@ public class JobManagerPeasRequestRouter extends",
                "-  private String setAttributes(HttpServletRequest request,",
                "+  private String homePage(final JobManagerPeasSessionController jobManagerSC,",
                "+      final HttpRequest request) {",
                "+    String spaceId = request.getParameter(\"SpaceId\");",
                "+    if (isDefined(spaceId)) {",
                "+      jobManagerSC.setDirectAccessToSpaceId(spaceId);",
                "+      jobManagerSC.changeServiceActif(\"1\");",
                "+      jobManagerSC.changeOperationActif(\"12\");",
                "+    } else {",
                "+      String service = request.getParameter(SERVICE_ACTION);",
                "+      if (isDefined(service)) {",
                "+        String operation = request.getParameter(OPERATION_ACTION);",
                "+        jobManagerSC.changeServiceActif(service);",
                "+        jobManagerSC.changeOperationActif(operation);",
                "+      }",
                "+    }",
                "+    this.setAttributes(request, jobManagerSC);",
                "+    return \"/jobManagerPeas/jsp/jobManager.jsp\";",
                "+  }",
                "+",
                "+  private String headerPart(final HttpRequest request,",
                "+      final JobManagerPeasSessionController jmSC, final String function) {",
                "+    final String id = request.getParameter(ID_PARAMETER);",
                "+    if (isDefined(id)) {",
                "+      if (function.endsWith(SERVICE_ACTION)) {",
                "+        jmSC.changeServiceActif(id);",
                "+      } else if (function.endsWith(OPERATION_ACTION)) {",
                "+        String idOperation = request.getParameter(ID_PARAMETER);",
                "+        if (\"15\".equals(idOperation)) {",
                "+          boolean mode = jmSC.isAppInMaintenance();",
                "+          request.setAttribute(\"mode\", Boolean.toString(mode));",
                "+        }",
                "+        jmSC.changeOperationActif(idOperation);",
                "+      }",
                "+    }",
                "+    setAttributes(request, jmSC);",
                "+    return \"/jobManagerPeas/jsp/topBarManager.jsp\";",
                "+  }",
                "+",
                "+  private void setAttributes(HttpServletRequest request,",
                "       JobManagerPeasSessionController jmpSC) {",
                "+    if (!isDefined(jmpSC.getIdServiceActif())) {",
                "+      // Setting default service if none defined",
                "+      jmpSC.changeServiceActif(jmpSC.getIdDefaultService());",
                "+    }",
                "     // l'objet \"Services\" est la liste des services disponibles pour l'administrateur",
                "@@ -146,3 +155,3 @@ public class JobManagerPeasRequestRouter extends",
                "     // l'objet \"Operation\" est la liste des op\u00c3\u00a9rations disponibles pour le service actif",
                "-    request.setAttribute(\"Operation\", jmpSC.getSubServices(jmpSC",
                "+    request.setAttribute(OPERATION_ACTION, jmpSC.getSubServices(jmpSC",
                "         .getIdServiceActif()));",
                "@@ -150,9 +159,9 @@ public class JobManagerPeasRequestRouter extends",
                "     // l'objet URL est un string representatnt l'operation active pour le service actif",
                "-    String url = jmpSC.getService(jmpSC.getIdOperationActif()).getUrl();",
                "-    if (StringUtil.isDefined(jmpSC.getDirectAccessToSpaceId())) {",
                "-      url += \"?SpaceId=\"+jmpSC.getDirectAccessToSpaceId();",
                "+    final UriBuilder url = UriBuilder",
                "+        .fromUri(jmpSC.getService(jmpSC.getIdOperationActif()).getUrl());",
                "+    if (isDefined(jmpSC.getDirectAccessToSpaceId())) {",
                "+      url.queryParam(\"SpaceId\", jmpSC.getDirectAccessToSpaceId());",
                "       jmpSC.setDirectAccessToSpaceId(null);",
                "     }",
                "-    request.setAttribute(\"URL\", url);",
                "-    return \"/jobManagerPeas/jsp/topBarManager.jsp\";",
                "+    request.setAttribute(\"adminBodyUrl\", url.build().toString());",
                "   }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobstartpage/DisplaySorted.java b/core-war/src/main/java/org/silverpeas/web/jobstartpage/DisplaySorted.java",
                "index 65dcd197c7..c23689e2ef 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobstartpage/DisplaySorted.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobstartpage/DisplaySorted.java",
                "@@ -78,2 +78,30 @@ public class DisplaySorted implements Comparable<DisplaySorted> {",
                "   }",
                "+",
                "+  public String getName() {",
                "+    return name;",
                "+  }",
                "+",
                "+  public int getOrderNum() {",
                "+    return orderNum;",
                "+  }",
                "+",
                "+  public String getId() {",
                "+    return id;",
                "+  }",
                "+",
                "+  public String getHtmlLine() {",
                "+    return htmlLine;",
                "+  }",
                "+",
                "+  public int getType() {",
                "+    return type;",
                "+  }",
                "+",
                "+  public int getDeep() {",
                "+    return deep;",
                "+  }",
                "+",
                "+  public boolean isVisible() {",
                "+    return isVisible;",
                "+  }",
                " }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobstartpage/NavBarManager.java b/core-war/src/main/java/org/silverpeas/web/jobstartpage/NavBarManager.java",
                "index 118e40059d..0faa6943ab 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobstartpage/NavBarManager.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobstartpage/NavBarManager.java",
                "@@ -379,3 +379,3 @@ public class NavBarManager {",
                "         objType = (space.id.equals(m_CurrentSubSpaceId)) ? SPACE_EXPANDED : SPACE_COLLAPSE;",
                "-        link = \"GoToSubSpace?SubSpace=\" + space.id;",
                "+        link = \"javascript:onclick=jumpToSubSpace('\" + space.id + \"');\";",
                "         if (m_SessionCtrl.isSpaceInMaintenance(space.id)) {",
                "@@ -388,4 +388,5 @@ public class NavBarManager {",
                "         }",
                "-        space.htmlLine = spacesSpaces.toString() + \"<a name=\\\"\" + space.id + \"\\\"/>\" +",
                "-            urlFactory(link, \"space\" + space.id, \"\", spaceName, SPACE, objType, m_sContext, \"\");",
                "+        space.htmlLine =",
                "+            spacesSpaces.toString() + \"<a id=\\\"navSpace\" + space.id + \"\\\" name=\\\"\" + space.id + \"\\\"/>\" +",
                "+                urlFactory(link, \"space\" + space.id, \"\", spaceName, SPACE, objType, m_sContext, \"\");",
                "       } else {",
                "@@ -444,3 +445,3 @@ public class NavBarManager {",
                "         String label = ds.name;",
                "-        String link = \"GoToComponent?ComponentId=\" + ci.getId();",
                "+        String link = \"javascript:onclick=jumpToComponent('\" + ci.getId() + \"');\";",
                "         final int objType;",
                "@@ -465,3 +466,3 @@ public class NavBarManager {",
                "             urlFactory(link, \"element\" + m_elmtCounter++, componentIcon, label, COMPONENT,",
                "-                objType, m_sContext, \"startPageContent\");",
                "+                objType, m_sContext, \"\");",
                "       } else {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobstartpage/servlets/JobStartPagePeasRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/jobstartpage/servlets/JobStartPagePeasRequestRouter.java",
                "index 2323263963..9d6653464e 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobstartpage/servlets/JobStartPagePeasRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobstartpage/servlets/JobStartPagePeasRequestRouter.java",
                "@@ -65,3 +65,31 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "   private static final String WELCOME_SPACE_MGR_TEMPLATE_FILE = \"/space/welcome_space_manager_\";",
                "-  private static final String ATT_INHERITANCE = \"IsInheritanceEnable\";",
                "+  private static final String WELCOME_FCT = \"welcome\";",
                "+  private static final String VIEW_BIN_FCT = \"ViewBin\";",
                "+  private static final String GO_TO_CURRENT_COMPONENT_FCT = \"GoToCurrentComponent\";",
                "+  private static final String SPACE_LOOK_FCT = \"SpaceLook\";",
                "+  private static final String ESPACE_PARAM = \"Espace\";",
                "+  private static final String COMPONENT_ID_PARAM = \"ComponentId\";",
                "+  private static final String USER_PANEL_CURRENT_USER_IDS_PARAM = \"UserPanelCurrentUserIds\";",
                "+  private static final String USER_PANEL_CURRENT_GROUP_IDS_PARAM = \"UserPanelCurrentGroupIds\";",
                "+  private static final String INHERITANCE_ATTR = \"IsInheritanceEnable\";",
                "+  private static final String URL_TO_RELOAD_ATTR = \"urlToReload\";",
                "+  private static final String PROFILE_ATTR = \"Profile\";",
                "+  private static final String BROTHERS_ATTR = \"brothers\";",
                "+  private static final String SOUS_ESPACE_ATTR = \"SousEspace\";",
                "+  private static final String IS_USER_ADMIN_ATTR = \"isUserAdmin\";",
                "+  private static final String SPACE_EXTRA_INFOS_ATTR = \"SpaceExtraInfos\";",
                "+  private static final String CURRENT_SPACE_ID_ATTR = \"CurrentSpaceId\";",
                "+  private static final String COMPONENT_INST_ATTR = \"ComponentInst\";",
                "+  private static final String PROFILES_ATTR = \"Profiles\";",
                "+  private static final String SCOPE_ATTR = \"Scope\";",
                "+  private static final String NAME_SUB_SPACE_ATTR = \"nameSubSpace\";",
                "+  private static final String PARAMETERS_ATTR = \"Parameters\";",
                "+  private static final String START_PAGE_INFO_DEST = \"StartPageInfo\";",
                "+  private static final String START_PAGE_INFO_FULL_DEST = \"/jobStartPagePeas/jsp/startPageInfo.jsp\";",
                "+  private static final String CLOSE_WINDOW_FULL_DEST = \"/jobStartPagePeas/jsp/closeWindow.jsp\";",
                "+  private static final String COMPONENT_INFO_FULL_DEST = \"/jobStartPagePeas/jsp/componentInfo.jsp\";",
                "+  private static final String ERROR_FULL_DEST = \"/jobStartPagePeas/jsp/error.jsp\";",
                "+  private static final String ROLE_INSTANCE_FULL_DEST = \"/jobStartPagePeas/jsp/roleInstance.jsp\";",
                "+  private static final String ROLE_ITEMS_PREFIX = \"roleItems\";",
                "+  private static final String SPACE_TYPE = \"Space\";",
                "@@ -123,4 +151,4 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         jobStartPageSC.updateSpaceInst(spaceint1);",
                "-        request.setAttribute(\"urlToReload\", \"StartPageInfo\");",
                "-        return \"/jobStartPagePeas/jsp/closeWindow.jsp\";",
                "+        request.setAttribute(URL_TO_RELOAD_ATTR, START_PAGE_INFO_DEST);",
                "+        return CLOSE_WINDOW_FULL_DEST;",
                "       case Portlet:",
                "@@ -137,4 +165,4 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         jobStartPageSC.updateSpaceInst(spaceint1);",
                "-        request.setAttribute(\"urlToReload\", \"StartPageInfo\");",
                "-        return \"/jobStartPagePeas/jsp/closeWindow.jsp\";",
                "+        request.setAttribute(URL_TO_RELOAD_ATTR, START_PAGE_INFO_DEST);",
                "+        return CLOSE_WINDOW_FULL_DEST;",
                "       case URL:",
                "@@ -145,4 +173,4 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         jobStartPageSC.updateSpaceInst(spaceint1);",
                "-        request.setAttribute(\"urlToReload\", \"StartPageInfo\");",
                "-        return \"/jobStartPagePeas/jsp/closeWindow.jsp\";",
                "+        request.setAttribute(URL_TO_RELOAD_ATTR, START_PAGE_INFO_DEST);",
                "+        return CLOSE_WINDOW_FULL_DEST;",
                "       case SetPortlet:",
                "@@ -152,4 +180,4 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         jobStartPageSC.updateSpaceInst(spaceint1);",
                "-        request.setAttribute(\"urlToReload\", \"StartPageInfo\");",
                "-        return \"/jobStartPagePeas/jsp/closeWindow.jsp\";",
                "+        request.setAttribute(URL_TO_RELOAD_ATTR, START_PAGE_INFO_DEST);",
                "+        return CLOSE_WINDOW_FULL_DEST;",
                "@@ -176,15 +204,12 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       jobStartPageSC.init(); // Only ONCE",
                "-      request.setAttribute(\"SpaceId\", request.getParameter(\"SpaceId\"));",
                "+      final String spaceId = request.getParameter(\"SpaceId\");",
                "+      setSpaceOrHomepage(jobStartPageSC, spaceId);",
                "       destination = \"/jobStartPagePeas/jsp/jobStartPage.jsp\";",
                "     } else if (function.startsWith(\"GoToSpace\")) {",
                "-      if (StringUtil.isDefined(request.getParameter(\"Espace\"))) {",
                "-        jobStartPageSC.setSpaceId(request.getParameter(\"Espace\"));",
                "-      } else {",
                "-        jobStartPageSC.setSpaceId(null);",
                "-      }",
                "-      request.setAttribute(\"haveToRefreshMainPage\", Boolean.TRUE);",
                "-      destination = \"/jobStartPagePeas/jsp/jobStartPageNav.jsp\";",
                "+      final String spaceId = request.getParameter(ESPACE_PARAM);",
                "+      setSpaceOrHomepage(jobStartPageSC, spaceId);",
                "+      destination = emptyJsonResponse();",
                "     } else if (\"jobStartPageNav\".equals(function)) {",
                "       destination = \"/jobStartPagePeas/jsp/jobStartPageNav.jsp\";",
                "-    } else if (\"welcome\".equals(function)) {",
                "+    } else if (WELCOME_FCT.equals(function)) {",
                "       // Get Silverpeas template from JobStartSessionSettings",
                "@@ -200,3 +225,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       destination = \"/jobStartPagePeas/jsp/welcome.jsp\";",
                "-    } else if (\"ViewBin\".equals(function)) {",
                "+    } else if (VIEW_BIN_FCT.equals(function)) {",
                "       request.setAttribute(\"Spaces\", jobStartPageSC.getRemovedSpaces());",
                "@@ -223,3 +248,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       request.setAttribute(\"haveToRefreshNavBar\", Boolean.TRUE);",
                "-      destination = getDestination(\"ViewBin\", jobStartPageSC, request);",
                "+      destination = getDestination(VIEW_BIN_FCT, jobStartPageSC, request);",
                "     } else if (\"RemoveDefinitely\".equals(function)) {",
                "@@ -242,3 +267,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       }",
                "-      destination = getDestinationNavBar(\"ViewBin\", jobStartPageSC, request);",
                "+      destination = getDestinationNavBar(VIEW_BIN_FCT, jobStartPageSC, request);",
                "     }",
                "@@ -248,2 +273,11 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "+  private void setSpaceOrHomepage(final JobStartPagePeasSessionController jspSC,",
                "+      final String spaceId) {",
                "+    if (StringUtil.isDefined(spaceId)) {",
                "+      jspSC.setSpaceId(spaceId);",
                "+    } else {",
                "+      jspSC.setSpaceId(null);",
                "+    }",
                "+  }",
                "+",
                "   /**",
                "@@ -264,3 +298,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "     if (function.equals(\"GoToComponent\")) {",
                "-      String compoId = request.getParameter(\"ComponentId\");",
                "+      String compoId = request.getParameter(COMPONENT_ID_PARAM);",
                "       jobStartPageSC.setManagedInstanceId(compoId);",
                "@@ -274,5 +308,5 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "-      destination = \"/jobStartPagePeas/jsp/componentInfo.jsp\";",
                "+      destination = COMPONENT_INFO_FULL_DEST;",
                "     } else if (\"SetupComponent\".equals(function)) {",
                "-      String compoId = request.getParameter(\"ComponentId\");",
                "+      String compoId = request.getParameter(COMPONENT_ID_PARAM);",
                "       if (jobStartPageSC.isComponentManageable(compoId)) {",
                "@@ -284,4 +318,4 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       }",
                "-    } else if (\"GoToCurrentComponent\".equals(function)) {",
                "-      destination = \"/jobStartPagePeas/jsp/componentInfo.jsp\";",
                "+    } else if (GO_TO_CURRENT_COMPONENT_FCT.equals(function)) {",
                "+      destination = COMPONENT_INFO_FULL_DEST;",
                "     } else if (\"ListComponent\".equals(function)) {",
                "@@ -313,3 +347,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         refreshNavBar(jobStartPageSC, request);",
                "-        destination = getDestination(\"GoToCurrentComponent\", jobStartPageSC, request);",
                "+        destination = getDestination(GO_TO_CURRENT_COMPONENT_FCT, jobStartPageSC, request);",
                "       } else {",
                "@@ -323,3 +357,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "-        destination = \"/jobStartPagePeas/jsp/error.jsp\";",
                "+        destination = ERROR_FULL_DEST;",
                "       }",
                "@@ -337,3 +371,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         }",
                "-        destination = getDestination(\"GoToCurrentComponent\", jobStartPageSC, request);",
                "+        destination = getDestination(GO_TO_CURRENT_COMPONENT_FCT, jobStartPageSC, request);",
                "       } else {",
                "@@ -344,3 +378,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         setSpacesNameInRequest(jobStartPageSC, request);",
                "-        destination = \"/jobStartPagePeas/jsp/error.jsp\";",
                "+        destination = ERROR_FULL_DEST;",
                "       }",
                "@@ -351,3 +385,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       refreshNavBar(jobStartPageSC, request);",
                "-      destination = \"/jobStartPagePeas/jsp/startPageInfo.jsp\";",
                "+      destination = START_PAGE_INFO_FULL_DEST;",
                "     } else if (function.equals(\"RoleInstance\")) {",
                "@@ -359,14 +393,14 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       jobStartPageSC.setManagedProfile(profile);",
                "-      request.setAttribute(\"Profile\", profile);",
                "+      request.setAttribute(PROFILE_ATTR, profile);",
                "-      destination = \"/jobStartPagePeas/jsp/roleInstance.jsp\";",
                "+      destination = ROLE_INSTANCE_FULL_DEST;",
                "     } else if (function.equals(\"CurrentRoleInstance\")) {",
                "-      request.setAttribute(\"Profile\", jobStartPageSC.getManagedProfile());",
                "+      request.setAttribute(PROFILE_ATTR, jobStartPageSC.getManagedProfile());",
                "-      destination = \"/jobStartPagePeas/jsp/roleInstance.jsp\";",
                "+      destination = ROLE_INSTANCE_FULL_DEST;",
                "     } else if (function.equals(\"SelectUsersGroupsProfileInstance\")) {",
                "       List<String> userIds = (List<String>) StringUtil",
                "-          .splitString(request.getParameter(\"UserPanelCurrentUserIds\"), ',');",
                "+          .splitString(request.getParameter(USER_PANEL_CURRENT_USER_IDS_PARAM), ',');",
                "       List<String> groupIds = (List<String>) StringUtil",
                "-          .splitString(request.getParameter(\"UserPanelCurrentGroupIds\"), ',');",
                "+          .splitString(request.getParameter(USER_PANEL_CURRENT_GROUP_IDS_PARAM), ',');",
                "       jobStartPageSC",
                "@@ -377,5 +411,6 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       String[] userIds =",
                "-          StringUtil.split(request.getParameter(\"roleItems\" + \"UserPanelCurrentUserIds\"), ',');",
                "+          StringUtil.split(request.getParameter(",
                "+              ROLE_ITEMS_PREFIX + USER_PANEL_CURRENT_USER_IDS_PARAM), ',');",
                "       String[] groupIds = StringUtil",
                "-          .split(request.getParameter(\"roleItems\" + \"UserPanelCurrentGroupIds\"), ',');",
                "+          .split(request.getParameter(ROLE_ITEMS_PREFIX + USER_PANEL_CURRENT_GROUP_IDS_PARAM), ',');",
                "       jobStartPageSC.updateInstanceProfile(userIds, groupIds);",
                "@@ -386,3 +421,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       request.setAttribute(\"currentComponentName\", compoint1.getLabel());",
                "-      request.setAttribute(\"brothers\", jobStartPageSC.getBrotherComponents(false));",
                "+      request.setAttribute(BROTHERS_ATTR, jobStartPageSC.getBrotherComponents(false));",
                "       SpaceInst spaceint1 = jobStartPageSC.getSpaceInstById();",
                "@@ -393,4 +428,4 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       refreshNavBar(jobStartPageSC, request);",
                "-      request.setAttribute(\"urlToReload\", \"GoToCurrentComponent\");",
                "-      destination = \"/jobStartPagePeas/jsp/closeWindow.jsp\";",
                "+      request.setAttribute(URL_TO_RELOAD_ATTR, GO_TO_CURRENT_COMPONENT_FCT);",
                "+      destination = CLOSE_WINDOW_FULL_DEST;",
                "     } else if (function.startsWith(\"copy\")) {",
                "@@ -399,3 +434,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       try {",
                "-        if (\"Space\".equals(objectType)) {",
                "+        if (SPACE_TYPE.equals(objectType)) {",
                "           jobStartPageSC.copySpace(objectId);",
                "@@ -413,3 +448,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       try {",
                "-        if (\"Space\".equals(objectType)) {",
                "+        if (SPACE_TYPE.equals(objectType)) {",
                "           jobStartPageSC.cutSpace(objectId);",
                "@@ -432,5 +467,5 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       if (StringUtil.isDefined(jobStartPageSC.getManagedSpaceId())) {",
                "-        destination = \"/jobStartPagePeas/jsp/startPageInfo.jsp\";",
                "+        destination = START_PAGE_INFO_FULL_DEST;",
                "       } else {",
                "-        destination = getDestination(\"welcome\", jobStartPageSC, request);",
                "+        destination = getDestination(WELCOME_FCT, jobStartPageSC, request);",
                "       }",
                "@@ -438,3 +473,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       // check if user can update it",
                "-      String id = request.getParameter(\"ComponentId\");",
                "+      String id = request.getParameter(COMPONENT_ID_PARAM);",
                "       if (!jobStartPageSC.isComponentManageable(id)) {",
                "@@ -452,7 +487,7 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "   private Map<String, String> getPasteOptions(HttpServletRequest request) {",
                "-    Map<String, String[]> parameters = request.getParameterMap();",
                "-    Map<String, String> pasteOptions = new HashMap<>();",
                "-    for (String parameterName : parameters.keySet()) {",
                "-      if (parameterName.startsWith(PasteDetail.OPTION_PREFIX)) {",
                "-        pasteOptions.put(parameterName, parameters.get(parameterName)[0]);",
                "+    final Map<String, String[]> parameters = request.getParameterMap();",
                "+    final Map<String, String> pasteOptions = new HashMap<>();",
                "+    for (Map.Entry<String, String[]> parameter : parameters.entrySet()) {",
                "+      if (parameter.getKey().startsWith(PasteDetail.OPTION_PREFIX)) {",
                "+        pasteOptions.put(parameter.getKey(), parameter.getValue()[0]);",
                "       }",
                "@@ -467,17 +502,15 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "-    if (\"StartPageInfo\".equals(function)) {",
                "+    if (START_PAGE_INFO_DEST.equals(function)) {",
                "       SpaceInst spaceint1 = jobStartPageSC.getSpaceInstById(); // espace courant",
                "-",
                "       if (spaceint1 == null) {",
                "-        destination = getDestination(\"welcome\", jobStartPageSC, request);",
                "+        destination = getDestination(WELCOME_FCT, jobStartPageSC, request);",
                "       } else {",
                "-        destination = \"/jobStartPagePeas/jsp/startPageInfo.jsp\";",
                "+        destination = START_PAGE_INFO_FULL_DEST;",
                "       }",
                "     } else if (function.equals(\"GoToSubSpace\")) {",
                "-      String subSpaceId = request.getParameter(\"SubSpace\");",
                "+      final String subSpaceId = request.getParameter(\"SubSpace\");",
                "       if (StringUtil.isDefined(subSpaceId)) {",
                "-        jobStartPageSC.setSubSpaceId(request.getParameter(\"SubSpace\"));",
                "-        request.setAttribute(\"haveToRefreshMainPage\", Boolean.TRUE);",
                "+        jobStartPageSC.setSubSpaceId(subSpaceId);",
                "       }",
                "-      destination = \"/jobStartPagePeas/jsp/jobStartPageNav.jsp\";",
                "+      destination = emptyJsonResponse();",
                "     } else if (function.equals(\"DesactivateMaintenance\")) {",
                "@@ -486,3 +519,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         jobStartPageSC.setAppModeMaintenance(false);",
                "-        destination = getDestination(\"welcome\", jobStartPageSC, request);",
                "+        destination = getDestination(WELCOME_FCT, jobStartPageSC, request);",
                "       } else {",
                "@@ -491,3 +524,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         refreshNavBar(jobStartPageSC, request);",
                "-        destination = \"/jobStartPagePeas/jsp/startPageInfo.jsp\";",
                "+        destination = START_PAGE_INFO_FULL_DEST;",
                "       }",
                "@@ -497,3 +530,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         jobStartPageSC.setAppModeMaintenance(true);",
                "-        destination = getDestination(\"welcome\", jobStartPageSC, request);",
                "+        destination = getDestination(WELCOME_FCT, jobStartPageSC, request);",
                "       } else {",
                "@@ -502,3 +535,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         refreshNavBar(jobStartPageSC, request);",
                "-        destination = \"/jobStartPagePeas/jsp/startPageInfo.jsp\";",
                "+        destination = START_PAGE_INFO_FULL_DEST;",
                "       }",
                "@@ -512,4 +545,4 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       refreshNavBar(jobStartPageSC, request);",
                "-      request.setAttribute(\"urlToReload\", \"StartPageInfo\");",
                "-      destination = \"/jobStartPagePeas/jsp/closeWindow.jsp\";",
                "+      request.setAttribute(URL_TO_RELOAD_ATTR, START_PAGE_INFO_DEST);",
                "+      destination = CLOSE_WINDOW_FULL_DEST;",
                "     } else if (function.equals(\"CreateSpace\")) {",
                "@@ -517,5 +550,5 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "-      request.setAttribute(\"SousEspace\", request.getParameter(\"SousEspace\"));",
                "-      request.setAttribute(\"brothers\", jobStartPageSC.getBrotherSpaces(true));",
                "-      request.setAttribute(\"isUserAdmin\", jobStartPageSC.isUserAdmin());",
                "+      request.setAttribute(SOUS_ESPACE_ATTR, request.getParameter(SOUS_ESPACE_ATTR));",
                "+      request.setAttribute(BROTHERS_ATTR, jobStartPageSC.getBrotherSpaces(true));",
                "+      request.setAttribute(IS_USER_ADMIN_ATTR, jobStartPageSC.isUserAdmin());",
                "       destination = \"/jobStartPagePeas/jsp/createSpace.jsp\";",
                "@@ -530,3 +563,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         refreshNavBar(jobStartPageSC, request);",
                "-        destination = getDestinationSpace(\"StartPageInfo\", jobStartPageSC, request);",
                "+        destination = getDestinationSpace(START_PAGE_INFO_DEST, jobStartPageSC, request);",
                "       } else {",
                "@@ -537,3 +570,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         setSpacesNameInRequest(jobStartPageSC, request);",
                "-        destination = \"/jobStartPagePeas/jsp/error.jsp\";",
                "+        destination = ERROR_FULL_DEST;",
                "       }",
                "@@ -543,5 +576,5 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       setSpacesNameInRequest(spaceint1, jobStartPageSC, request);",
                "-      request.setAttribute(\"Space\", spaceint1);",
                "+      request.setAttribute(SPACE_TYPE, spaceint1);",
                "       request.setAttribute(\"Translation\", translation);",
                "-      request.setAttribute(\"isUserAdmin\", jobStartPageSC.isUserAdmin());",
                "+      request.setAttribute(IS_USER_ADMIN_ATTR, jobStartPageSC.isUserAdmin());",
                "@@ -557,3 +590,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         refreshNavBar(jobStartPageSC, request);",
                "-        destination = getDestinationSpace(\"StartPageInfo\", jobStartPageSC, request);",
                "+        destination = getDestinationSpace(START_PAGE_INFO_DEST, jobStartPageSC, request);",
                "       } else {",
                "@@ -566,3 +599,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "-        destination = \"/jobStartPagePeas/jsp/error.jsp\";",
                "+        destination = ERROR_FULL_DEST;",
                "       }",
                "@@ -575,5 +608,5 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "           && (jobStartPageSC.getManagedSpaceId().length() > 0)) {",
                "-        destination = \"/jobStartPagePeas/jsp/startPageInfo.jsp\";",
                "+        destination = START_PAGE_INFO_FULL_DEST;",
                "       } else {",
                "-        destination = getDestination(\"welcome\", jobStartPageSC, request);",
                "+        destination = getDestination(WELCOME_FCT, jobStartPageSC, request);",
                "       }",
                "@@ -588,3 +621,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       }",
                "-      destination = \"/jobStartPagePeas/jsp/startPageInfo.jsp\";",
                "+      destination = START_PAGE_INFO_FULL_DEST;",
                "     } else if (function.equals(\"SpaceManager\")) {",
                "@@ -603,3 +636,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "-      request.setAttribute(\"SpaceExtraInfos\", jobStartPageSC.getManagedSpace());",
                "+      request.setAttribute(SPACE_EXTRA_INFOS_ATTR, jobStartPageSC.getManagedSpace());",
                "       request.setAttribute(\"Role\", role);",
                "@@ -607,5 +640,5 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       if (SilverpeasRole.Manager == SilverpeasRole.from(role)) {",
                "-        request.setAttribute(ATT_INHERITANCE, true);",
                "+        request.setAttribute(INHERITANCE_ATTR, true);",
                "       } else {",
                "-        request.setAttribute(ATT_INHERITANCE, JobStartPagePeasSettings.isInheritanceEnable);",
                "+        request.setAttribute(INHERITANCE_ATTR, JobStartPagePeasSettings.isInheritanceEnable);",
                "       }",
                "@@ -615,5 +648,5 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       List<String> userIds = (List<String>) StringUtil",
                "-          .splitString(request.getParameter(\"UserPanelCurrentUserIds\"), ',');",
                "+          .splitString(request.getParameter(USER_PANEL_CURRENT_USER_IDS_PARAM), ',');",
                "       List<String> groupIds = (List<String>) StringUtil",
                "-          .splitString(request.getParameter(\"UserPanelCurrentGroupIds\"), ',');",
                "+          .splitString(request.getParameter(USER_PANEL_CURRENT_GROUP_IDS_PARAM), ',');",
                "       jobStartPageSC",
                "@@ -625,14 +658,15 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       List<String> userIds = (List<String>)",
                "-          StringUtil.splitString(request.getParameter(\"roleItems\" + \"UserPanelCurrentUserIds\"), ',');",
                "+          StringUtil.splitString(request.getParameter(ROLE_ITEMS_PREFIX +",
                "+              USER_PANEL_CURRENT_USER_IDS_PARAM), ',');",
                "       List<String> groupIds = (List<String>) StringUtil",
                "-          .splitString(request.getParameter(\"roleItems\" + \"UserPanelCurrentGroupIds\"), ',');",
                "+          .splitString(request.getParameter(ROLE_ITEMS_PREFIX + USER_PANEL_CURRENT_GROUP_IDS_PARAM), ',');",
                "       jobStartPageSC.updateSpaceRole(role, userIds, groupIds);",
                "       destination = getDestination(\"SpaceManager\", jobStartPageSC, request);",
                "-    } else if (function.equals(\"SpaceLook\")) {",
                "+    } else if (function.equals(SPACE_LOOK_FCT)) {",
                "       SpaceInst spaceint1 = jobStartPageSC.getSpaceInstById();",
                "-      request.setAttribute(\"Space\", spaceint1);",
                "+      request.setAttribute(SPACE_TYPE, spaceint1);",
                "       request.setAttribute(\"SpaceLookHelper\", jobStartPageSC.getSpaceLookHelper());",
                "-      request.setAttribute(\"SpaceExtraInfos\", jobStartPageSC.getManagedSpace());",
                "-      request.setAttribute(ATT_INHERITANCE, JobStartPagePeasSettings.isInheritanceEnable);",
                "+      request.setAttribute(SPACE_EXTRA_INFOS_ATTR, jobStartPageSC.getManagedSpace());",
                "+      request.setAttribute(INHERITANCE_ATTR, JobStartPagePeasSettings.isInheritanceEnable);",
                "@@ -653,3 +687,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       jobStartPageSC.updateSpaceAppearance(items);",
                "-      destination = getDestination(\"SpaceLook\", jobStartPageSC, request);",
                "+      destination = getDestination(SPACE_LOOK_FCT, jobStartPageSC, request);",
                "     } else if (function.equals(\"RemoveFileToLook\")) {",
                "@@ -657,20 +691,13 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       jobStartPageSC.removeExternalElementOfSpaceAppearance(fileName);",
                "-      destination = getDestination(\"SpaceLook\", jobStartPageSC, request);",
                "+      destination = getDestination(SPACE_LOOK_FCT, jobStartPageSC, request);",
                "     } else if (function.equals(\"OpenSpace\")) {",
                "       jobStartPageSC.init();",
                "-",
                "-      if (StringUtil.isDefined(request.getParameter(\"Espace\"))) {",
                "-        jobStartPageSC.setSpaceId(request.getParameter(\"Espace\"));",
                "-      } else {",
                "-        jobStartPageSC.setSpaceId(null);",
                "-      }",
                "-",
                "-      destination = getDestination(\"StartPageInfo\", jobStartPageSC, request);",
                "+      setSpaceOrHomepage(jobStartPageSC, request.getParameter(ESPACE_PARAM));",
                "+      destination = getDestination(START_PAGE_INFO_DEST, jobStartPageSC, request);",
                "     } else if (function.equals(\"OpenSubSpace\")) {",
                "       jobStartPageSC.init();",
                "-",
                "-      if (StringUtil.isDefined(request.getParameter(\"Espace\"))) {",
                "-        jobStartPageSC.setSpaceId(request.getParameter(\"Espace\"));",
                "-        if (StringUtil.isDefined(request.getParameter(\"SousEspace\"))) {",
                "-          jobStartPageSC.setSubSpaceId(request.getParameter(\"SousEspace\"));",
                "+      if (StringUtil.isDefined(request.getParameter(ESPACE_PARAM))) {",
                "+        jobStartPageSC.setSpaceId(request.getParameter(ESPACE_PARAM));",
                "+        if (StringUtil.isDefined(request.getParameter(SOUS_ESPACE_ATTR))) {",
                "+          jobStartPageSC.setSubSpaceId(request.getParameter(SOUS_ESPACE_ATTR));",
                "         }",
                "@@ -679,4 +706,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       }",
                "-",
                "-      destination = getDestination(\"StartPageInfo\", jobStartPageSC, request);",
                "+      destination = getDestination(START_PAGE_INFO_DEST, jobStartPageSC, request);",
                "     }",
                "@@ -720,6 +746,6 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         request.setAttribute(\"SubSpaceComponents\", jobStartPageSC.getSubSpaceComponents());",
                "-        request.setAttribute(\"CurrentSpaceId\", jobStartPageSC.getSpaceId());",
                "+        request.setAttribute(CURRENT_SPACE_ID_ATTR, jobStartPageSC.getSpaceId());",
                "         request.setAttribute(\"CurrentSubSpaceId\", jobStartPageSC.getSubSpaceId());",
                "       } else if (\"/jobStartPagePeas/jsp/welcome.jsp\".equals(destination)) {",
                "-        request.setAttribute(\"isUserAdmin\", jobStartPageSC.isUserAdmin());",
                "+        request.setAttribute(IS_USER_ADMIN_ATTR, jobStartPageSC.isUserAdmin());",
                "         request.setAttribute(\"globalMode\", jobStartPageSC.isAppInMaintenance());",
                "@@ -727,6 +753,6 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         request.setAttribute(\"IsBasketEnable\", JobStartPagePeasSettings.isBasketEnable);",
                "-      } else if (\"/jobStartPagePeas/jsp/startPageInfo.jsp\".equals(destination)) {",
                "+      } else if (START_PAGE_INFO_FULL_DEST.equals(destination)) {",
                "         SpaceInst spaceint1 = jobStartPageSC.getSpaceInstById(); // espace",
                "         // courant",
                "-        request.setAttribute(\"isUserAdmin\", jobStartPageSC.isUserAdmin());",
                "+        request.setAttribute(IS_USER_ADMIN_ATTR, jobStartPageSC.isUserAdmin());",
                "         request.setAttribute(\"FirstPageType\", spaceint1.getFirstPageType());",
                "@@ -738,3 +764,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "-        request.setAttribute(\"SpaceExtraInfos\", jobStartPageSC.getManagedSpace());",
                "+        request.setAttribute(SPACE_EXTRA_INFOS_ATTR, jobStartPageSC.getManagedSpace());",
                "         request.setAttribute(\"NameProfile\", jobStartPageSC.getSpaceProfileName(spaceint1));",
                "@@ -742,3 +768,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "-        request.setAttribute(ATT_INHERITANCE, JobStartPagePeasSettings.isInheritanceEnable);",
                "+        request.setAttribute(INHERITANCE_ATTR, JobStartPagePeasSettings.isInheritanceEnable);",
                "@@ -746,11 +772,11 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "-        request.setAttribute(\"Space\", spaceint1);",
                "-      } else if (\"/jobStartPagePeas/jsp/componentInfo.jsp\".equals(destination)) {",
                "+        request.setAttribute(SPACE_TYPE, spaceint1);",
                "+      } else if (COMPONENT_INFO_FULL_DEST.equals(destination)) {",
                "         prepareDisplayComponentInfo(jobStartPageSC, request);",
                "-      } else if (\"/jobStartPagePeas/jsp/roleInstance.jsp\".equals(destination)) {",
                "+      } else if (ROLE_INSTANCE_FULL_DEST.equals(destination)) {",
                "         ComponentInst compoint1 = jobStartPageSC.getComponentInst(jobStartPageSC.",
                "             getManagedInstanceId());",
                "-        request.setAttribute(\"ComponentInst\", compoint1);",
                "+        request.setAttribute(COMPONENT_INST_ATTR, compoint1);",
                "-        request.setAttribute(\"Profiles\", jobStartPageSC.getAllProfiles(compoint1));",
                "+        request.setAttribute(PROFILES_ATTR, jobStartPageSC.getAllProfiles(compoint1));",
                "@@ -758,3 +784,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         ProfileInst profile = jobStartPageSC.getManagedProfile();",
                "-        request.setAttribute(\"Profile\", profile);",
                "+        request.setAttribute(PROFILE_ATTR, profile);",
                "         request.setAttribute(\"listGroup\", jobStartPageSC.getAllCurrentGroupInstance());",
                "@@ -772,3 +798,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "         request.setAttribute(\"ProfileEditable\", jobStartPageSC.isProfileEditable());",
                "-        request.setAttribute(ATT_INHERITANCE, JobStartPagePeasSettings.isInheritanceEnable);",
                "+        request.setAttribute(INHERITANCE_ATTR, JobStartPagePeasSettings.isInheritanceEnable);",
                "@@ -777,3 +803,3 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "-        request.setAttribute(\"Scope\", jobStartPageSC.getScope());",
                "+        request.setAttribute(SCOPE_ATTR, jobStartPageSC.getScope());",
                "       }",
                "@@ -803,10 +829,10 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "     if (spaceint1 != null) {",
                "-      request.setAttribute(\"CurrentSpaceId\", spaceint1.getId());",
                "+      request.setAttribute(CURRENT_SPACE_ID_ATTR, spaceint1.getId());",
                "       if (!spaceint1.isRoot()) {// je suis sur un ss-espace",
                "-        request.setAttribute(\"nameSubSpace\", spaceint1.getName(jobStartPageSC.getLanguage()));",
                "+        request.setAttribute(NAME_SUB_SPACE_ATTR, spaceint1.getName(jobStartPageSC.getLanguage()));",
                "       } else {",
                "-        request.setAttribute(\"nameSubSpace\", null);",
                "+        request.setAttribute(NAME_SUB_SPACE_ATTR, null);",
                "       }",
                "     } else {",
                "-      request.setAttribute(\"nameSubSpace\", null);",
                "+      request.setAttribute(NAME_SUB_SPACE_ATTR, null);",
                "     }",
                "@@ -905,7 +931,7 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "     WAComponent waComponent = sessionController.getComponentByName(componentInst.getName());",
                "-    request.setAttribute(\"Parameters\", sessionController.getParameters(waComponent, false));",
                "+    request.setAttribute(PARAMETERS_ATTR, sessionController.getParameters(waComponent, false));",
                "     request.setAttribute(\"JobPeas\", waComponent.getLabel(language));",
                "-    request.setAttribute(\"Profiles\", sessionController.getAllProfiles(componentInst));",
                "-    request.setAttribute(\"ComponentInst\", componentInst);",
                "-    request.setAttribute(\"Scope\", sessionController.getScope());",
                "+    request.setAttribute(PROFILES_ATTR, sessionController.getAllProfiles(componentInst));",
                "+    request.setAttribute(COMPONENT_INST_ATTR, componentInst);",
                "+    request.setAttribute(SCOPE_ATTR, sessionController.getScope());",
                "     return \"/jobStartPagePeas/jsp/updateInstance.jsp\";",
                "@@ -920,5 +946,5 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       setSpacesNameInRequest(sessionController, request);",
                "-      request.setAttribute(\"Parameters\", sessionController.getParameters(component, true));",
                "+      request.setAttribute(PARAMETERS_ATTR, sessionController.getParameters(component, true));",
                "       request.setAttribute(\"WAComponent\", component);",
                "-      request.setAttribute(\"brothers\", sessionController.getBrotherComponents(true));",
                "+      request.setAttribute(BROTHERS_ATTR, sessionController.getBrotherComponents(true));",
                "       destination = \"/jobStartPagePeas/jsp/createInstance.jsp\";",
                "@@ -926,6 +952,6 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "       request.setAttribute(\"When\", \"ComponentCreation\");",
                "-      request.setAttribute(\"CurrentSpaceId\", sessionController.getSpaceId());",
                "+      request.setAttribute(CURRENT_SPACE_ID_ATTR, sessionController.getSpaceId());",
                "       String msg = sessionController.getString(\"JSPP.ErrorUnknownComponent\");",
                "       request.setAttribute(\"ErrorMessage\", MessageFormat.format(msg, componentName));",
                "-      destination = \"/jobStartPagePeas/jsp/error.jsp\";",
                "+      destination = ERROR_FULL_DEST;",
                "     }",
                "@@ -940,9 +966,9 @@ public class JobStartPagePeasRequestRouter extends ComponentRequestRouter<JobSta",
                "     WAComponent waComponent = sessionController.getComponentByName(componentInst.getName());",
                "-    request.setAttribute(\"Parameters\", sessionController.getParameters(waComponent, false));",
                "-    request.setAttribute(\"ComponentInst\", componentInst);",
                "+    request.setAttribute(PARAMETERS_ATTR, sessionController.getParameters(waComponent, false));",
                "+    request.setAttribute(COMPONENT_INST_ATTR, componentInst);",
                "     request.setAttribute(\"JobPeas\", waComponent);",
                "-    request.setAttribute(\"Profiles\", sessionController.getAllProfiles(componentInst));",
                "-    request.setAttribute(ATT_INHERITANCE, JobStartPagePeasSettings.isInheritanceEnable);",
                "+    request.setAttribute(PROFILES_ATTR, sessionController.getAllProfiles(componentInst));",
                "+    request.setAttribute(INHERITANCE_ATTR, JobStartPagePeasSettings.isInheritanceEnable);",
                "     request.setAttribute(\"MaintenanceState\", sessionController.getCurrentSpaceMaintenanceState());",
                "-    request.setAttribute(\"Scope\", sessionController.getScope());",
                "+    request.setAttribute(SCOPE_ATTR, sessionController.getScope());",
                "   }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "index 4ae12d72dc..78208f5799 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "@@ -37,2 +37,3 @@ import org.silverpeas.core.security.token.Token;",
                " import org.silverpeas.core.silverstatistics.volume.service.SilverStatisticsManager;",
                "+import org.silverpeas.core.util.JSONCodec;",
                " import org.silverpeas.core.util.MultiSilverpeasBundle;",
                "@@ -63,2 +64,3 @@ import javax.servlet.http.HttpServletResponse;",
                " import javax.servlet.http.HttpSession;",
                "+import javax.ws.rs.core.MediaType;",
                " import java.util.ArrayList;",
                "@@ -75,2 +77,3 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "   private static final long serialVersionUID = -8055016885655445663L;",
                "+  private static final String MANUAL_JSON_RESPONSE_PREFIX = \"MANUAL_JSON_RESPONSE_\";",
                "   @Inject",
                "@@ -306,2 +309,10 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "+  protected String emptyJsonResponse() {",
                "+    return sendJson(JSONCodec.encodeObject(o -> o));",
                "+  }",
                "+",
                "+  protected String sendJson(String jsonContent) {",
                "+    return MANUAL_JSON_RESPONSE_PREFIX + jsonContent;",
                "+  }",
                "+",
                "   private void redirectService(HttpServletRequest request, HttpServletResponse response,",
                "@@ -310,3 +321,8 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "     try {",
                "-      if (destination.startsWith(\"PRODUCES_\")) {",
                "+      if (destination.startsWith(MANUAL_JSON_RESPONSE_PREFIX)) {",
                "+        response.setHeader(\"Content-Type\", MediaType.APPLICATION_JSON + \"; charset=UTF-8\");",
                "+        response.getWriter().append(destination.substring(MANUAL_JSON_RESPONSE_PREFIX.length()));",
                "+        response.flushBuffer();",
                "+      }",
                "+      else if (destination.startsWith(\"PRODUCES_\")) {",
                "         response.flushBuffer();",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "index ad369666ce..017203b1cb 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "@@ -60,10 +60,7 @@ import static org.silverpeas.core.html.SupportedWebPlugins.*;",
                " import static org.silverpeas.core.notification.user.UserNotificationServerEvent.getNbUnreadFor;",
                "-import static org.silverpeas.core.notification.user.client.NotificationManagerSettings",
                "-    .getUserNotificationDesktopIconUrl;",
                "+import static org.silverpeas.core.notification.user.client.NotificationManagerSettings.getUserNotificationDesktopIconUrl;",
                " import static org.silverpeas.core.reminder.ReminderSettings.getDefaultReminder;",
                " import static org.silverpeas.core.reminder.ReminderSettings.getPossibleReminders;",
                "-import static org.silverpeas.core.web.util.viewgenerator.html.JavascriptBundleProducer",
                "-    .bundleVariableName;",
                "-import static org.silverpeas.core.web.util.viewgenerator.html.JavascriptSettingProducer",
                "-    .settingVariableName;",
                "+import static org.silverpeas.core.web.util.viewgenerator.html.JavascriptBundleProducer.bundleVariableName;",
                "+import static org.silverpeas.core.web.util.viewgenerator.html.JavascriptSettingProducer.settingVariableName;",
                "@@ -916,2 +913,7 @@ public class JavascriptPluginInclusion {",
                "             .produce()));",
                "+      xhtml.addElement(scriptContent(settingVariableName(\"AdminLayoutSettings\")",
                "+            .add(\"layout.header.url\", URLUtil.getApplicationURL() + \"/RjobManagerPeas/jsp/TopBarManager\")",
                "+            .add(\"layout.body.url\", \"\")",
                "+            .add(\"layout.body.navigation.url\", \"\")",
                "+            .produce()));",
                "       final LocalizationBundle errorBundle = ResourceLocator",
                "@@ -921,4 +923,9 @@ public class JavascriptPluginInclusion {",
                "             .produce()));",
                "+      xhtml.addElement(scriptContent(bundleVariableName(\"AdminWindowBundle\")",
                "+            .add(\"e.t.r\", errorBundle.getString(\"error.technical.responsive\"))",
                "+            .produce()));",
                "       xhtml.addElement(script(JAVASCRIPT_PATH + \"silverpeas-window.js\"));",
                "       xhtml.addElement(script(JAVASCRIPT_PATH + SILVERPEAS_LAYOUT));",
                "+      xhtml.addElement(script(JAVASCRIPT_PATH + \"silverpeas-admin-window.js\"));",
                "+      xhtml.addElement(script(JAVASCRIPT_PATH + \"silverpeas-admin-layout.js\"));",
                "     }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/webapi/admin/AbstractAdminResource.java b/core-web/src/main/java/org/silverpeas/core/webapi/admin/AbstractAdminResource.java",
                "index fd8d271d5a..a0cc53dfce 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/webapi/admin/AbstractAdminResource.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/webapi/admin/AbstractAdminResource.java",
                "@@ -27,2 +27,4 @@ import org.silverpeas.core.admin.component.model.ComponentInst;",
                " import org.silverpeas.core.admin.component.model.ComponentInstLight;",
                "+import org.silverpeas.core.admin.component.model.SilverpeasComponent;",
                "+import org.silverpeas.core.admin.component.model.SilverpeasComponentInstance;",
                " import org.silverpeas.core.admin.component.model.WAComponent;",
                "@@ -135,3 +137,3 @@ public abstract class AbstractAdminResource extends RESTWebService {",
                "       final Class<E> entityClass, final Collection<T> data, final boolean forceGettingFavorite) {",
                "-    final Collection<E> entities = new ArrayList<E>(data.size());",
                "+    final Collection<E> entities = new ArrayList<>(data.size());",
                "     for (final Object object : data) {",
                "@@ -150,3 +152,2 @@ public abstract class AbstractAdminResource extends RESTWebService {",
                "    * Converts the given list of data into their corresponding web entities.",
                "-   * @param entityClass the entity class returned.",
                "    * @param data data to convert.",
                "@@ -156,9 +157,9 @@ public abstract class AbstractAdminResource extends RESTWebService {",
                "   protected <T, E extends AbstractTypeEntity> Collection<E> asWebPersonalEntities(",
                "-      final Class<E> entityClass, final Collection<T> data) {",
                "-    final Collection<E> entities = new ArrayList<E>(data.size());",
                "+      final Collection<T> data) {",
                "+    final Collection<E> entities = new ArrayList<>(data.size());",
                "     for (final Object object : data) {",
                "       if (object instanceof WAComponent) {",
                "-        entities.add((E) asWebPersonalEntity((WAComponent) object));",
                "+        entities.add((E) asWebPersonalEntity((SilverpeasComponent) object));",
                "       } else if (object instanceof ComponentInst) {",
                "-        entities.add((E) asWebPersonalEntity((ComponentInst) object));",
                "+        entities.add((E) asWebPersonalEntity((SilverpeasComponentInstance) object));",
                "       } else if (object instanceof AbstractTool) {",
                "@@ -223,3 +224,3 @@ public abstract class AbstractAdminResource extends RESTWebService {",
                "    */",
                "-  protected PersonalComponentEntity asWebPersonalEntity(final WAComponent component) {",
                "+  protected PersonalComponentEntity asWebPersonalEntity(final SilverpeasComponent component) {",
                "     checkNotFoundStatus(component);",
                "@@ -236,3 +237,3 @@ public abstract class AbstractAdminResource extends RESTWebService {",
                "    */",
                "-  protected PersonalComponentEntity asWebPersonalEntity(final ComponentInst component) {",
                "+  protected PersonalComponentEntity asWebPersonalEntity(final SilverpeasComponentInstance component) {",
                "     checkNotFoundStatus(component);",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/webapi/admin/PersonalComponentEntity.java b/core-web/src/main/java/org/silverpeas/core/webapi/admin/PersonalComponentEntity.java",
                "index e040fe8d6c..c819f44bba 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/webapi/admin/PersonalComponentEntity.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/webapi/admin/PersonalComponentEntity.java",
                "@@ -25,2 +25,6 @@ package org.silverpeas.core.webapi.admin;",
                "+import org.silverpeas.core.admin.component.model.SilverpeasComponent;",
                "+import org.silverpeas.core.admin.component.model.SilverpeasComponentInstance;",
                "+import org.silverpeas.core.util.URLUtil;",
                "+",
                " import javax.xml.bind.annotation.XmlAccessType;",
                "@@ -29,6 +33,2 @@ import javax.xml.bind.annotation.XmlRootElement;",
                "-import org.silverpeas.core.admin.component.model.WAComponent;",
                "-import org.silverpeas.core.util.URLUtil;",
                "-import org.silverpeas.core.admin.component.model.ComponentInst;",
                "-",
                " /**",
                "@@ -45,2 +45,18 @@ public class PersonalComponentEntity extends AbstractPersonnalEntity {",
                "+  private PersonalComponentEntity(final SilverpeasComponent component, final String componentLabel,",
                "+      final String language) {",
                "+    super(TYPE, \"\", 0, component.getName(), componentLabel, component.getDescription()",
                "+        .get(language), \"\");",
                "+  }",
                "+",
                "+  private PersonalComponentEntity(final SilverpeasComponentInstance component) {",
                "+    super(TYPE, component.getId(), 0, component.getName(), component.getLabel(), component",
                "+        .getDescription(), URLUtil.getURL(component.getName(), null, component.getId()) +",
                "+        \"Main\");",
                "+  }",
                "+",
                "+  protected PersonalComponentEntity() {",
                "+    // Nothing to do (Tests)",
                "+  }",
                "+",
                "   /**",
                "@@ -50,3 +66,3 @@ public class PersonalComponentEntity extends AbstractPersonnalEntity {",
                "    */",
                "-  public static PersonalComponentEntity createFrom(final WAComponent component,",
                "+  public static PersonalComponentEntity createFrom(final SilverpeasComponent component,",
                "       final String componentLabel, final String language) {",
                "@@ -60,3 +76,3 @@ public class PersonalComponentEntity extends AbstractPersonnalEntity {",
                "    */",
                "-  public static PersonalComponentEntity createFrom(final ComponentInst component) {",
                "+  public static PersonalComponentEntity createFrom(final SilverpeasComponentInstance component) {",
                "     return new PersonalComponentEntity(component);",
                "@@ -72,18 +88,2 @@ public class PersonalComponentEntity extends AbstractPersonnalEntity {",
                "   }",
                "-",
                "-  private PersonalComponentEntity(final WAComponent component, final String componentLabel,",
                "-      final String language) {",
                "-    super(TYPE, \"\", 0, component.getName(), componentLabel, component.getDescription()",
                "-        .get(language), \"\");",
                "-  }",
                "-",
                "-  private PersonalComponentEntity(final ComponentInst component) {",
                "-    super(TYPE, component.getId(), 0, component.getName(), component.getLabel(), component",
                "-        .getDescription(), URLUtil.getURL(component.getName(), null, component.getId()) +",
                "-        \"Main\");",
                "-  }",
                "-",
                "-  protected PersonalComponentEntity() {",
                "-    // Nothing to do (Tests)",
                "-  }",
                " }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/webapi/admin/SpaceResource.java b/core-web/src/main/java/org/silverpeas/core/webapi/admin/SpaceResource.java",
                "index eb77738ee9..b79a258675 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/webapi/admin/SpaceResource.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/webapi/admin/SpaceResource.java",
                "@@ -26,2 +26,4 @@ package org.silverpeas.core.webapi.admin;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.silverpeas.core.admin.component.model.PersonalComponent;",
                "+import org.silverpeas.core.admin.component.model.PersonalComponentInstance;",
                " import org.silverpeas.core.admin.service.AdminException;",
                "@@ -395,13 +397,16 @@ public class SpaceResource extends AbstractAdminResource {",
                "+      if (getAll) {",
                "+        PersonalComponent.getAll().stream()",
                "+            .map(p -> PersonalComponentInstance.from(getUser(), p))",
                "+            .map(this::asWebPersonalEntity)",
                "+            .forEach(personals::add);",
                "+      }",
                "       if (getAll || getNotUsedComponents) {",
                "-        personals.addAll(asWebPersonalEntities(PersonalComponentEntity.class,",
                "-            getAdminPersonalDelegate().getNotUsedComponents()));",
                "+        personals.addAll(asWebPersonalEntities(getAdminPersonalDelegate().getNotUsedComponents()));",
                "       }",
                "       if (getAll || getUsedComponents) {",
                "-        personals.addAll(asWebPersonalEntities(PersonalComponentEntity.class,",
                "-            getAdminPersonalDelegate().getUsedComponents()));",
                "+        personals.addAll(asWebPersonalEntities(getAdminPersonalDelegate().getUsedComponents()));",
                "       }",
                "       if (getAll || getUsedTools) {",
                "-        personals.addAll(asWebPersonalEntities(PersonalToolEntity.class,",
                "-            getAdminPersonalDelegate().getUsedTools()));",
                "+        personals.addAll(asWebPersonalEntities(getAdminPersonalDelegate().getUsedTools()));",
                "       }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/webapi/admin/delegate/AdminPersonalWebDelegate.java b/core-web/src/main/java/org/silverpeas/core/webapi/admin/delegate/AdminPersonalWebDelegate.java",
                "index 3d01894ca7..5e8b148b25 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/webapi/admin/delegate/AdminPersonalWebDelegate.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/webapi/admin/delegate/AdminPersonalWebDelegate.java",
                "@@ -26,2 +26,3 @@ package org.silverpeas.core.webapi.admin.delegate;",
                " import org.silverpeas.core.admin.component.model.ComponentInst;",
                "+import org.silverpeas.core.admin.component.model.SilverpeasComponent;",
                " import org.silverpeas.core.admin.component.model.WAComponent;",
                "@@ -68,3 +69,3 @@ public class AdminPersonalWebDelegate {",
                "    */",
                "-  public String getComponentLabel(final WAComponent component) {",
                "+  public String getComponentLabel(final SilverpeasComponent component) {",
                "     String label = getLookDelegate().getHelper()"
            ],
            "changed_files": [
                "core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "core-war/src/main/java/org/silverpeas/web/jobmanager/control/JobManagerPeasSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/jobmanager/servlets/JobManagerPeasRequestRouter.java",
                "core-war/src/main/java/org/silverpeas/web/jobstartpage/DisplaySorted.java",
                "core-war/src/main/java/org/silverpeas/web/jobstartpage/NavBarManager.java",
                "core-war/src/main/java/org/silverpeas/web/jobstartpage/servlets/JobStartPagePeasRequestRouter.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "core-web/src/main/java/org/silverpeas/core/webapi/admin/AbstractAdminResource.java",
                "core-web/src/main/java/org/silverpeas/core/webapi/admin/PersonalComponentEntity.java",
                "core-web/src/main/java/org/silverpeas/core/webapi/admin/SpaceResource.java",
                "core-web/src/main/java/org/silverpeas/core/webapi/admin/delegate/AdminPersonalWebDelegate.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10058": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: JSP, StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, webapi",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10058",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "05ac8439b9986a97791a2cfa27d882454fc53ec2",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1543339616,
            "hunks": 511,
            "message": "Feature #9884 Refactor a little in order to both: - fix some issues from SonarQube - improve the code on the user notification so that it is a little more   readable and understandable.",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/UserNotification.java b/core-api/src/main/java/org/silverpeas/core/notification/user/UserNotification.java",
                "index a860cae63e..7c03d1d752 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/UserNotification.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/UserNotification.java",
                "@@ -26,3 +26,3 @@ package org.silverpeas.core.notification.user;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.constant.NotifMediaType;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                "@@ -44,3 +44,4 @@ public interface UserNotification {",
                "   /**",
                "-   * Sends the notification according to the different metadata that were set.",
                "+   * Sends this notification at the specified addresses declared within the metadata of this",
                "+   * notification.",
                "    */",
                "@@ -49,8 +50,6 @@ public interface UserNotification {",
                "   /**",
                "-   * Sends the notification according to the different metadata that were set and by forcing",
                "-   * explicitly the type of the media to use with the specified one. The media type preferred by",
                "-   * the user is then overridden by the given one.",
                "-   * @param mediaType the type of the media to vehicle the notification.",
                "+   * Sends this notification to the specified builtin user notification address.",
                "+   * @param notificationAddress the type of the media to vehicle the notification.",
                "    */",
                "-  void send(NotifMediaType mediaType);",
                "+  void send(BuiltInNotifAddress notificationAddress);",
                " }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationAddress.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationAddress.java",
                "new file mode 100644",
                "index 0000000000..5262721ee2",
                "--- /dev/null",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationAddress.java",
                "@@ -0,0 +1,87 @@",
                "+package org.silverpeas.core.notification.user.client;",
                "+",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                "+import org.silverpeas.core.util.StringUtil;",
                "+",
                "+/**",
                "+ * A notification address is an address to which a user can receive the notification messages",
                "+ * that are addressed to him. Such address is always related to a given notification channel",
                "+ * (see {@link org.silverpeas.core.notification.user.client.constant.NotifChannel}) and",
                "+ * it is defined by some properties: name, channel identifier, user identifier, user address itself,",
                "+ * and usage. The notification address is mainly used to represent a custom address of a given user;",
                "+ * therefore it doesn't concern the built-in addresses",
                "+ * (see {@link BuiltInNotifAddress}",
                "+ * @author mmoquillon",
                "+ */",
                "+public class NotificationAddress {",
                "+",
                "+  private String id;",
                "+  private String name;",
                "+  private String channelId;",
                "+  private String userId;",
                "+  private String usage = NotificationParameters.USAGE_PRO;",
                "+  private String address;",
                "+",
                "+  public String getId() {",
                "+    return id;",
                "+  }",
                "+",
                "+  public NotificationAddress setId(final String id) {",
                "+    this.id = id;",
                "+    return this;",
                "+  }",
                "+",
                "+  public String getName() {",
                "+    return name;",
                "+  }",
                "+",
                "+  public NotificationAddress setName(final String name) {",
                "+    this.name = name;",
                "+    return this;",
                "+  }",
                "+",
                "+  public String getChannelId() {",
                "+    return channelId;",
                "+  }",
                "+",
                "+  public NotificationAddress setChannelId(final String channelId) {",
                "+    this.channelId = channelId;",
                "+    return this;",
                "+  }",
                "+",
                "+  public String getUserId() {",
                "+    return userId;",
                "+  }",
                "+",
                "+  public NotificationAddress setUserId(final String userId) {",
                "+    this.userId = userId;",
                "+    return this;",
                "+  }",
                "+",
                "+  public String getUsage() {",
                "+    return usage;",
                "+  }",
                "+",
                "+  public NotificationAddress setUsage(final String usage) {",
                "+    this.usage = StringUtil.isDefined(usage) ? usage : NotificationParameters.USAGE_PRO;",
                "+    return this;",
                "+  }",
                "+",
                "+  public String getAddress() {",
                "+    return address;",
                "+  }",
                "+",
                "+  public NotificationAddress setAddress(final String address) {",
                "+    this.address = address;",
                "+    return this;",
                "+  }",
                "+",
                "+  int getRawId() {",
                "+    return Integer.parseInt(id);",
                "+  }",
                "+",
                "+  int getRawChannelId() {",
                "+    return Integer.parseInt(channelId);",
                "+  }",
                "+}",
                "+  ",
                "\\ No newline at end of file",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManager.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManager.java",
                "index 443020b368..dffb5bac35 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManager.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManager.java",
                "@@ -28,4 +28,4 @@ import org.silverpeas.core.util.ServiceProvider;",
                "-import java.util.ArrayList;",
                " import java.util.Collection;",
                "+import java.util.List;",
                " import java.util.Properties;",
                "@@ -44,56 +44,198 @@ public interface NotificationManager {",
                "-  NotificationManager forLanguage(String language);",
                "-",
                "-  ArrayList<Properties> getNotificationAddresses(int aUserId) throws NotificationException;",
                "-",
                "-  Properties getNotificationAddress(int aNotificationAddressId, int aUserId)",
                "+  NotificationManager forLanguage(final String language);",
                "+",
                "+  /**",
                "+   * Gets all the properties about the different notification addresses that were set for the",
                "+   * specified user. The notification addresses are made up of both the built-in notification",
                "+   * addresses and those that were created by the user himself.",
                "+   * @throws NotificationException if an error occurs while building the properties the",
                "+   * notification addresses.",
                "+   */",
                "+  List<Properties> getNotifAddressProperties(final String aUserId) throws NotificationException;",
                "+",
                "+  /**",
                "+   * Gets the properties of the specified notification address of the given user.",
                "+   * @param addressId the unique identifier of a notification address. It can be either a built-in",
                "+   * address identifier or the identifier of a custom address set by the user.",
                "+   * @param aUserId the unique identifier of a user.",
                "+   * @return a {@link Properties} instance with the notification address properties.",
                "+   * @throws NotificationException if an error occurs while building the address properties.",
                "+   */",
                "+  Properties getNotifAddressProperties(final String addressId, final String aUserId)",
                "       throws NotificationException;",
                "-  ArrayList<Properties> getDefaultAddresses(int aUserId) throws NotificationException;",
                "-",
                "-  int getDefaultAddress(int aUserId) throws NotificationException;",
                "-",
                "-  ArrayList<Properties> getNotifPriorities();",
                "-",
                "-  ArrayList<Properties> getNotifUsages();",
                "-",
                "-  ArrayList<Properties> getNotifChannels() throws NotificationException;",
                "-",
                "-  ArrayList<Properties> getNotifPreferences(int aUserId) throws NotificationException;",
                "-",
                "-  Properties getNotifPreference(int aPrefId, int aUserId) throws NotificationException;",
                "-",
                "-  void setDefaultAddress(int aNotificationAddressId, int aUserId)",
                "+  /**",
                "+   * Gets the default notification address of the specified user. If multi-channel is supported,",
                "+   * the user can have several default notification addresses. In that case, only the first one",
                "+   * is get.",
                "+   * @param aUserId the unique identifier of the user.",
                "+   * @return the unique identifier of a notification address. It can be either a built-in",
                "+   * address identifier of a notification channel or the identifier of a custom notification",
                "+   * address set by the user.",
                "+   * @throws NotificationException if an error occurs while getting a default address.",
                "+   */",
                "+  String getDefaultAddressId(final String aUserId) throws NotificationException;",
                "+",
                "+  /**",
                "+   * Gets All the notification channels that are available in Silverpeas. A channel is the medium",
                "+   * through which notification messages are transmitted. For more information about the supported",
                "+   * channels, see {@link org.silverpeas.core.notification.user.client.constant.NotifChannel}.",
                "+   * @return a list of properties containing \"id\" and \"name\" keys for each channel.",
                "+   * @throws NotificationException if an error occurs while getting the supported channels.",
                "+   */",
                "+  List<Properties> getNotifChannels() throws NotificationException;",
                "+",
                "+  /**",
                "+   * Gets the notifications preferences of the specified user.",
                "+   * @param aUserId the unique identifier of the user.",
                "+   * @return a list of properties containing \"name\", \"type\", \"usage\" and \"address\" keys for each",
                "+   * notification preference. The address identifies the unique identifier of a notification",
                "+   * address that can be the identifier of either a built-in notification address or a custom",
                "+   * notification address set by the user.",
                "+   * @throws NotificationException if an error occurs while getting the preferences of the user",
                "+   * about the notifications.",
                "+   */",
                "+  List<Properties> getNotifPreferences(final String aUserId) throws NotificationException;",
                "+",
                "+  /**",
                "+   * Gets the properties about the specified preference of the given user on the notifications.",
                "+   * @param aPrefId a unique identifier of the preference.",
                "+   * @param aUserId a unique identifier of the user.",
                "+   * @return the properties containing \"name\", \"type\", \"usage\" and \"address\" keys of the preference.",
                "+   * @throws NotificationException if an error occurs while getting the given preference.",
                "+   */",
                "+  Properties getNotifPreference(final String aPrefId, final String aUserId)",
                "       throws NotificationException;",
                "-  void addAddress(int aNotificationAddressId, int aUserId) throws NotificationException;",
                "-",
                "-  void savePreferences(int aUserId, int aInstanceId, int aMessageType, int aDestinationId)",
                "+  /**",
                "+   * Sets the specified notification address as the default one for the given user. If multi-channel",
                "+   * is disabled, the specified address will replace the previous one if any.",
                "+   * @param aNotificationAddressId the unique identifier of a notification address. It can be either",
                "+   * a built-in address identifier or a custom one set by the user.",
                "+   * @param aUserId the unique identifier of the user.",
                "+   * @throws NotificationException if an error occurs while setting the specified address as a",
                "+   * default one.",
                "+   */",
                "+  void setDefaultAddress(final String aNotificationAddressId, final String aUserId)",
                "       throws NotificationException;",
                "-  void saveNotifAddress(int aNotificationAddressId, int aUserId, String aNotifName, int aChannelId,",
                "-      String aAddress, String aUsage) throws NotificationException;",
                "-",
                "-  void deletePreference(int aPreferenceId) throws NotificationException;",
                "-",
                "-  void deleteNotifAddress(int aNotificationAddressId) throws NotificationException;",
                "-",
                "-  void deleteAllAddress(int userId) throws NotificationException;",
                "-",
                "-  void testNotifAddress(int aNotificationAddressId, int aUserId)",
                "+  /**",
                "+   * Sets the specified notification address as a default one for the given user identifier.",
                "+   * Whatever the multi-channel support, the specified address is added among the others default",
                "+   * ones of the user.",
                "+   * @param aNotificationAddressId the unique identifier of an address.",
                "+   * @param aUserId the unique identifier of a user.",
                "+   * @throws NotificationException if an error occurs while adding the setting the address as a",
                "+   * new default one for the user.",
                "+   */",
                "+  void addDefaultAddress(final String aNotificationAddressId, final String aUserId)",
                "       throws NotificationException;",
                "-  void notifyUsers(NotificationParameters params, String[] userIds)",
                "+  /**",
                "+   * Saves the preference on notification of the given user and for the specified component",
                "+   * instance and for the specified type of message.",
                "+   * @param aUserId the unique identifier of a user.",
                "+   * @param instanceLocalId the local identifier of a component instance.",
                "+   * @param aMessageType the type of message.",
                "+   * @param notifAddressId the unique identifier of a notification address.",
                "+   * @throws NotificationException if an error occurs while saving the preferences.",
                "+   */",
                "+  void savePreferences(final String aUserId, final int instanceLocalId, final int aMessageType,",
                "+      final String notifAddressId) throws NotificationException;",
                "+",
                "+  /**",
                "+   * Saves the specified custom notification address for the specified user. A custom address",
                "+   * is a notification address the user defines himself in order to be notified either through",
                "+   * another channel that those related to the built-in addresses or to another address that the",
                "+   * built-in ones.",
                "+   * @param notificationAddress a custom notification address to save.",
                "+   * @throws NotificationException if an error occurs while saving the specified custom address.",
                "+   */",
                "+  void saveNotifAddress(final NotificationAddress notificationAddress) throws NotificationException;",
                "+",
                "+  /**",
                "+   * Deletes the specified preference. A preference is always related to a user and it is unique to",
                "+   * that user.",
                "+   * @param aPreferenceId the unique identifier of a preference.",
                "+   * @throws NotificationException if an error occurs while deleting the notification preference.",
                "+   */",
                "+  void deletePreference(final String aPreferenceId) throws NotificationException;",
                "+",
                "+  /**",
                "+   * Deletes the specified custom notification address. If this address was set as a default one,",
                "+   * then it is replaced by the first channel that values the property",
                "+   * <code>notif.defaultChannels</code> in the <code>NotificationManagerSettings.properties</code>",
                "+   * properties file.",
                "+   * @param aNotificationAddressId the unique identifier of a custom notification address.",
                "+   * @throws NotificationException if an error occurs while deleting the notification address.",
                "+   */",
                "+  void deleteNotifAddress(final String aNotificationAddressId) throws NotificationException;",
                "+",
                "+  /**",
                "+   * Deletes all the notification addresses set as default for the specified user.",
                "+   * @param userId the unique identifier of a user.",
                "+   * @throws NotificationException if an error occurs while deleting the addresses.",
                "+   */",
                "+  void deleteAllDefaultAddress(final String userId) throws NotificationException;",
                "+",
                "+  /**",
                "+   * Tests the specified address for specified user by sending a notification message",
                "+   * through the channel related by this address. If the address is a built-in one, then the unique",
                "+   * identifier of the user is required to know at whom the address refers. Otherwise, for a custom",
                "+   * address, the address itself identifies the concerned user.",
                "+   * @param addressId the unique identifier of a notification address. It can be either a built-in",
                "+   * or a custom one defined by the user himself.",
                "+   * @param aUserId the unique identifier of a user.",
                "+   * @throws NotificationException if an error occurs while sending a test notification message.",
                "+   */",
                "+  void testNotifAddress(final String addressId, final String aUserId) throws NotificationException;",
                "+",
                "+  /**",
                "+   * Notifies the specified users by using the given notification parameters.",
                "+   * @param params the parameters that describe among others the channel to use, the message to",
                "+   * send, and so on.",
                "+   * @param userIds a collection with the unique identifiers of the users to notify.",
                "+   * @throws NotificationException if an error occurs while sending the notification.",
                "+   */",
                "+  void notifyUsers(final NotificationParameters params, final Collection<String> userIds)",
                "       throws NotificationException;",
                "-  void notifyExternals(NotificationParameters params, Collection<ExternalRecipient> externals)",
                "-      throws NotificationException;",
                "-",
                "-  Collection<UserRecipient> getUsersFromGroup(String groupId) throws NotificationException;",
                "-",
                "+  /**",
                "+   * Notifies the specified external users by using the given notification parameters. Whatever",
                "+   * the channels defined in the parameters, only the SMTP channel is used to notify external",
                "+   * users.",
                "+   * @param params the parameters that carries among others the message to send, the subject of",
                "+   * the notification, and so on.",
                "+   * @param externals a collection of external recipients.",
                "+   * @throws NotificationException if an error occurs while sending the notification.",
                "+   */",
                "+  void notifyExternals(final NotificationParameters params,",
                "+      final Collection<ExternalRecipient> externals) throws NotificationException;",
                "+",
                "+  /**",
                "+   * Gets all the notification recipients that are members of the specified user group.",
                "+   * The user that have not an activated state in Silverpeas is not taken into account, so this",
                "+   * kind of users is not included into the returned collection.",
                "+   * @param groupId the unique identifier of a user group in Silverpeas.",
                "+   * @return a collection of recipients.",
                "+   * @throws NotificationException if an error occurs while getting the recipients of the given",
                "+   * user group.",
                "+   */",
                "+  Collection<UserRecipient> getUsersFromGroup(final String groupId) throws NotificationException;",
                "+",
                "+  /**",
                "+   * Gets the full name of a component instance. Such a full name is made up of the name of the",
                "+   * space that contains the component instance followed by the name of the component instance.",
                "+   * @param compInst the unique identifier of a component instance.",
                "+   * @return the full name of the given component instance: the space name followed by the",
                "+   * component name, separated by the minus character.",
                "+   * @throws NotificationException if an error occurs computing the component instance full name.",
                "+   */",
                "   String getComponentFullName(String compInst) throws NotificationException;",
                "-  String getComponentFullName(String compInst, String separator, boolean isPathToComponent)",
                "-      throws NotificationException;",
                "-",
                "+  /**",
                "+   * Is the multi-channel option enabled? If true, then several notification addresses can be set",
                "+   * as the default ones for the users.",
                "+   * @return true if the multi-channel property is enabled. False otherwise.",
                "+   */",
                "   boolean isMultiChannelNotification();",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "index ccdfe7c51f..1998e58320 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "@@ -27,2 +27,3 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.silverpeas.core.notification.sse.ServerEvent;",
                "+import org.silverpeas.core.notification.user.client.constant.NotifChannel;",
                " import org.silverpeas.core.notification.user.delayed.constant.DelayedNotificationFrequency;",
                "@@ -35,5 +36,7 @@ import java.util.HashSet;",
                " import java.util.List;",
                "+import java.util.Optional;",
                " import java.util.Set;",
                "-import java.util.StringTokenizer;",
                " import java.util.TreeSet;",
                "+import java.util.stream.Collectors;",
                "+import java.util.stream.Stream;",
                "@@ -171,37 +174,21 @@ public class NotificationManagerSettings {",
                "    */",
                "-  public static List<Integer> getDefaultChannels() {",
                "-    String defaultChannels = settings.getString(\"notif.defaultChannels\", \"\");",
                "-    boolean isMultiChannelSupported = isMultiChannelNotificationEnabled();",
                "-    StringTokenizer channelTokenizer =",
                "-        new StringTokenizer(defaultChannels.replaceAll(\"[ ]{2,}\", \" \"), \" \");",
                "-    List<Integer> mediaIds = new ArrayList<>(channelTokenizer.countTokens() + 1);",
                "-    while (channelTokenizer.hasMoreTokens()) {",
                "-      String channel = channelTokenizer.nextToken();",
                "-      if (\"BASIC_POPUP\".equalsIgnoreCase(channel) &&",
                "-          !mediaIds.contains(NotificationParameters.ADDRESS_BASIC_POPUP)) {",
                "-        mediaIds.add(NotificationParameters.ADDRESS_BASIC_POPUP);",
                "-      } else if (\"BASIC_REMOVE\".equalsIgnoreCase(channel) &&",
                "-          !mediaIds.contains(NotificationParameters.ADDRESS_BASIC_REMOVE)) {",
                "-        mediaIds.add(NotificationParameters.ADDRESS_BASIC_REMOVE);",
                "-      } else if (\"BASIC_SILVERMAIL\".equalsIgnoreCase(channel) &&",
                "-          !mediaIds.contains(NotificationParameters.ADDRESS_BASIC_SILVERMAIL)) {",
                "-        mediaIds.add(NotificationParameters.ADDRESS_BASIC_SILVERMAIL);",
                "-      } else if (\"BASIC_SMTP_MAIL\".equalsIgnoreCase(channel) &&",
                "-          !mediaIds.contains(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL)) {",
                "-        mediaIds.add(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL);",
                "-      } else if (\"BASIC_SERVER\".equalsIgnoreCase(channel) &&",
                "-          !mediaIds.contains(NotificationParameters.ADDRESS_BASIC_SERVER)) {",
                "-        mediaIds.add(NotificationParameters.ADDRESS_BASIC_SERVER);",
                "-      } else if (\"BASIC_COMMUNICATION_USER\".equalsIgnoreCase(channel) &&",
                "-          !mediaIds.contains(NotificationParameters.ADDRESS_BASIC_COMMUNICATION_USER)) {",
                "-        mediaIds.add(NotificationParameters.ADDRESS_BASIC_COMMUNICATION_USER);",
                "-      }",
                "-      if (!(isMultiChannelSupported || mediaIds.isEmpty())) {",
                "-        break;",
                "-      }",
                "+  static List<NotifChannel> getDefaultChannels() {",
                "+    final String defaultChannelSetting = settings.getString(\"notif.defaultChannels\", \"\");",
                "+    final boolean isMultiChannelSupported = isMultiChannelNotificationEnabled();",
                "+    final String[] defaultChannels = defaultChannelSetting.replaceAll(\"[ ]{2,}\", \" \").split(\" \");",
                "+    final List<NotifChannel> channels;",
                "+    final Stream<NotifChannel> streamOfChannels = Stream.of(defaultChannels)",
                "+        .map(NotifChannel::decode)",
                "+        .filter(Optional::isPresent)",
                "+        .map(Optional::get);",
                "+    if (!isMultiChannelSupported) {",
                "+      channels = new ArrayList<>(1);",
                "+      channels.add(streamOfChannels.findFirst().orElse(NotifChannel.SMTP));",
                "+    } else {",
                "+      channels = streamOfChannels.distinct().collect(Collectors.toList());",
                "     }",
                "-    if (mediaIds.isEmpty()) {",
                "-      mediaIds.add(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL);",
                "+    if (channels.isEmpty()) {",
                "+      channels.add(NotifChannel.SMTP);",
                "     }",
                "-    return mediaIds;",
                "+    return channels;",
                "   }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "index 3b37739ac1..ba0086eae1 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "@@ -30,3 +30,2 @@ import org.silverpeas.core.notification.user.client.constant.NotifAction;",
                " import org.silverpeas.core.notification.user.model.NotificationResourceData;",
                "-import org.silverpeas.core.silvertrace.SilverTrace;",
                " import org.silverpeas.core.template.SilverpeasTemplate;",
                "@@ -37,2 +36,3 @@ import org.silverpeas.core.util.StringUtil;",
                " import org.silverpeas.core.util.WebEncodeHelper;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -48,6 +48,4 @@ import java.util.Set;",
                "-import static org.silverpeas.core.notification.user.client.NotificationTemplateKey",
                "-    .notification_receiver_groups;",
                "-import static org.silverpeas.core.notification.user.client.NotificationTemplateKey",
                "-    .notification_receiver_users;",
                "+import static org.silverpeas.core.notification.user.client.NotificationTemplateKey.notification_receiver_groups;",
                "+import static org.silverpeas.core.notification.user.client.NotificationTemplateKey.notification_receiver_users;",
                " import static org.silverpeas.core.ui.DisplayI18NHelper.verifyLanguage;",
                "@@ -127,3 +125,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   private void reset() {",
                "-    messageType = NotificationParameters.NORMAL;",
                "+    messageType = NotificationParameters.PRIORITY_NORMAL;",
                "     date = new Date();",
                "@@ -210,3 +208,2 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   public String getTitle() {",
                "-    // return title;",
                "     return getTitle(DisplayI18NHelper.getDefaultLanguage());",
                "@@ -232,3 +229,2 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   public void setContent(String content) {",
                "-    // this.content = content;",
                "     contents.put(DisplayI18NHelper.getDefaultLanguage(), content);",
                "@@ -250,13 +246,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "     StringBuilder result = new StringBuilder();",
                "-    if (templates != null && !templates.isEmpty()) {",
                "-      SilverpeasTemplate template = templates.get(language);",
                "-      if (template != null) {",
                "-        result.append(template.applyFileTemplate(fileName + '_' + language));",
                "-      }",
                "-    } else {",
                "-      String content = contents.get(language);",
                "-      if(content != null) {",
                "-        result.append(content);",
                "-      }",
                "-    }",
                "+    appendMessageContent(result, language);",
                "     appendExtraMessageHtmlFragment(result, language);",
                "@@ -270,16 +256,14 @@ public class NotificationMetaData implements java.io.Serializable {",
                "       try {",
                "-        String receiver_users = getUserReceiverFormattedList();",
                "-        if (StringUtil.isDefined(receiver_users)) {",
                "+        String receiverUsers = getUserReceiverFormattedList();",
                "+        if (StringUtil.isDefined(receiverUsers)) {",
                "           templateMessageFooter",
                "-              .setAttribute(notification_receiver_users.toString(), receiver_users);",
                "+              .setAttribute(notification_receiver_users.toString(), receiverUsers);",
                "         }",
                "-        String receiver_groups = getGroupReceiverFormattedList();",
                "-        if (StringUtil.isDefined(receiver_groups)) {",
                "+        String receiverGroups = getGroupReceiverFormattedList();",
                "+        if (StringUtil.isDefined(receiverGroups)) {",
                "           templateMessageFooter",
                "-              .setAttribute(notification_receiver_groups.toString(), receiver_groups);",
                "+              .setAttribute(notification_receiver_groups.toString(), receiverGroups);",
                "         }",
                "       } catch (NotificationException e) {",
                "-        SilverTrace.warn(\"notificationManager\",",
                "-            \"NotificationMetaData.getContent()\",",
                "-            \"root.EX_ADD_USERS_FAILED\", e);",
                "+        SilverLogger.getLogger(this).error(e);",
                "       }",
                "@@ -301,2 +285,16 @@ public class NotificationMetaData implements java.io.Serializable {",
                "+  private void appendMessageContent(final StringBuilder result, final String language) {",
                "+    if (templates != null && !templates.isEmpty()) {",
                "+      SilverpeasTemplate template = templates.get(language);",
                "+      if (template != null) {",
                "+        result.append(template.applyFileTemplate(fileName + '_' + language));",
                "+      }",
                "+    } else {",
                "+      String content = contents.get(language);",
                "+      if(content != null) {",
                "+        result.append(content);",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "   /**",
                "@@ -709,5 +707,5 @@ public class NotificationMetaData implements java.io.Serializable {",
                "     Set<UserRecipient> allUniqueUserRecipients = new HashSet<>();",
                "-    Collection<UserRecipient> userRecipients = getUserRecipients();",
                "-    Collection<GroupRecipient> groupRecipients = getGroupRecipients();",
                "-    Collection<UserRecipient> userRecipientsToExclude =",
                "+    Collection<UserRecipient> users = getUserRecipients();",
                "+    Collection<GroupRecipient> groups = getGroupRecipients();",
                "+    Collection<UserRecipient> usersToExclude =",
                "         updateInternalUserRecipientsToExclude ? getUserRecipientsToExclude() :",
                "@@ -716,6 +714,6 @@ public class NotificationMetaData implements java.io.Serializable {",
                "     // First get direct users",
                "-    allUniqueUserRecipients.addAll(userRecipients);",
                "+    allUniqueUserRecipients.addAll(users);",
                "     // Then get users included in groups",
                "-    for (GroupRecipient group : groupRecipients) {",
                "+    for (GroupRecipient group : groups) {",
                "       allUniqueUserRecipients",
                "@@ -725,3 +723,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "     // Then exclude users that don't have to be notified",
                "-    allUniqueUserRecipients.removeAll(userRecipientsToExclude);",
                "+    allUniqueUserRecipients.removeAll(usersToExclude);",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameters.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameters.java",
                "index 2fd4c7dd61..5bda41e7b3 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameters.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameters.java",
                "@@ -28,4 +28,5 @@ package org.silverpeas.core.notification.user.client;",
                "-import org.silverpeas.core.notification.user.model.NotificationResourceData;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                " import org.silverpeas.core.notification.user.client.constant.NotifAction;",
                "+import org.silverpeas.core.notification.user.model.NotificationResourceData;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -33,5 +34,6 @@ import org.silverpeas.core.util.logging.SilverLogger;",
                " import java.util.Date;",
                "+import java.util.Optional;",
                " /**",
                "- * This class contents all needed parameters to send a notification with the NotificationManager",
                "+ * All the parameters required to send a notification with the {@link NotificationManager}",
                "  * @author Thierry Leroi",
                "@@ -40,120 +42,251 @@ import java.util.Date;",
                " public class NotificationParameters {",
                "-  static public final int NORMAL = 0;",
                "-  static public final int URGENT = 1;",
                "-  static public final int ERROR = 2;",
                "-",
                "-  static public final int ADDRESS_DEFAULT = -1;",
                "-  static public final int ADDRESS_COMPONENT_DEFINED = -2; // Send by media :",
                "-  // 1)Component specific",
                "-  // 2)Default",
                "-  // 3)ADDRESS_BASIC_SILVERMAIL",
                "-  /**",
                "-   * The channel used for notifications is the popup.",
                "-   */",
                "-  static public final int ADDRESS_BASIC_POPUP = -10;",
                "-  /**",
                "-   * The channel used for notifications is the trash (recieved notifications are removed).",
                "-   */",
                "-  static public final int ADDRESS_BASIC_REMOVE = -11;",
                "   /**",
                "-   * The channel used for notifications is the internal Silverpeas messaging system.",
                "+   * The priority of the message is normal.",
                "    */",
                "-  static public final int ADDRESS_BASIC_SILVERMAIL = -12;",
                "+  public static final int PRIORITY_NORMAL = 0;",
                "   /**",
                "-   * The channel used for notifications is the SMTP mail system.",
                "+   * The message is urgent.",
                "    */",
                "-  static public final int ADDRESS_BASIC_SMTP_MAIL = -13;",
                "+  public static final int PRIORITY_URGENT = 1;",
                "   /**",
                "-   * The channel used for notifications is the server one (used by the server to send",
                "-   * notifications).",
                "+   * The message is for an error.",
                "    */",
                "-  static public final int ADDRESS_BASIC_SERVER = -14;",
                "-  /**",
                "-   * The channel used for notifications is the peer to peer user communication (chatting).",
                "-   */",
                "-  static public final int ADDRESS_BASIC_COMMUNICATION_USER = -15;",
                "+  public static final int PRIORITY_ERROR = 2;",
                "-  static public final String USAGE_PRO = \"addressUsePro\";",
                "-  static public final String USAGE_PERSO = \"addressUsePerso\";",
                "-  static public final String USAGE_REP = \"addressUseRep\";",
                "-  static public final String USAGE_URGENT = \"addressUseUrgent\";",
                "+  static final String USAGE_PRO = \"addressUsePro\";",
                "+  static final String USAGE_PERSO = \"addressUsePerso\";",
                "+  static final String USAGE_REP = \"addressUseRep\";",
                "+  static final String USAGE_URGENT = \"addressUseUrgent\";",
                "-  static public final int MAX_SIZE_TITLE = 1023; // Maximum size of the title in",
                "+  public static final int MAX_SIZE_TITLE = 1023; // Maximum size of the title in",
                "   // tables SILVERMAIL and POPUP",
                "-  public int iMessagePriority = NORMAL;",
                "-  public int iMediaType = ADDRESS_COMPONENT_DEFINED;",
                "-  public int iComponentInstance = -1;",
                "-  public int iFromUserId = -1;",
                "-",
                "-  public String sTitle = \"\";",
                "-  public String senderName = \"\";",
                "-  public String sMessage = \"\";",
                "-  public String sURL = \"\";",
                "-  public String sLinkLabel = \"\";",
                "-  public String sSource = \"\";",
                "-  public String sSessionId = \"\";",
                "-  public String sOriginalExtraMessage = null;",
                "-  public boolean bAnswerAllowed = false;",
                "-  public boolean bSendImmediately = false;",
                "-",
                "-  public Date dDate = new Date();",
                "-  public String sLanguage = null;",
                "-",
                "-  public NotifAction eAction = null;",
                "-  public NotificationResourceData nNotificationResourceData = null;",
                "-",
                "-  public void traceObject() {",
                "+  private int iMessagePriority = PRIORITY_NORMAL;",
                "+  private int addressId = BuiltInNotifAddress.COMPONENT_DEFINED.getId();",
                "+  private int iComponentInstance = -1;",
                "+  private int iFromUserId = -1;",
                "+",
                "+  private String sTitle = \"\";",
                "+  private String senderName = \"\";",
                "+  private String sMessage = \"\";",
                "+  private String sURL = \"\";",
                "+  private String sLinkLabel = \"\";",
                "+  private String sSource = \"\";",
                "+  private String sSessionId = \"\";",
                "+  private String sOriginalExtraMessage = null;",
                "+  private boolean bAnswerAllowed = false;",
                "+  private boolean bSendImmediately = false;",
                "+",
                "+  private Date dDate = new Date();",
                "+  private String sLanguage = null;",
                "+",
                "+  private NotifAction eAction = null;",
                "+  private NotificationResourceData nNotificationResourceData = null;",
                "+",
                "+  public int getMessagePriority() {",
                "+    return iMessagePriority;",
                "+  }",
                "+",
                "+  public NotificationParameters setMessagePriority(final int iMessagePriority) {",
                "+    this.iMessagePriority = iMessagePriority;",
                "+    return this;",
                "+  }",
                "+",
                "+  public int getAddressId() {",
                "+    return addressId;",
                "+  }",
                "+",
                "+  public NotificationParameters setAddressId(final int notifMediaType) {",
                "+    this.addressId = notifMediaType;",
                "+    return this;",
                "+  }",
                "+",
                "+  public boolean isAddressDefinedByComponent() {",
                "+    return getAddressId() == BuiltInNotifAddress.COMPONENT_DEFINED.getId();",
                "+  }",
                "+",
                "+  public int getComponentInstance() {",
                "+    return iComponentInstance;",
                "+  }",
                "+",
                "+  public NotificationParameters setComponentInstance(final int iComponentInstance) {",
                "+    this.iComponentInstance = iComponentInstance < 0 ? -1 : iComponentInstance;",
                "+    return this;",
                "+  }",
                "+",
                "+  public boolean isComponentInstanceDefined() {",
                "+    return this.iComponentInstance != -1;",
                "+  }",
                "+",
                "+  public int getFromUserId() {",
                "+    return iFromUserId;",
                "+  }",
                "+",
                "+  public NotificationParameters setFromUserId(final int iFromUserId) {",
                "+    this.iFromUserId = iFromUserId < 0 ? -1 : iFromUserId;",
                "+    return this;",
                "+  }",
                "+",
                "+  public boolean isFromUserIdDefined() {",
                "+    return iFromUserId != -1;",
                "+  }",
                "+",
                "+  public String getTitle() {",
                "+    return sTitle;",
                "+  }",
                "+",
                "+  public NotificationParameters setTitle(final String sTitle) {",
                "+    this.sTitle = sTitle == null ? \"\" : sTitle;",
                "+    return this;",
                "+  }",
                "+",
                "+  public String getSenderName() {",
                "+    return senderName;",
                "+  }",
                "+",
                "+  public NotificationParameters setSenderName(final String senderName) {",
                "+    this.senderName = senderName;",
                "+    return this;",
                "+  }",
                "+",
                "+  public String getMessage() {",
                "+    return sMessage;",
                "+  }",
                "+",
                "+  public NotificationParameters setMessage(final String sMessage) {",
                "+    this.sMessage = sMessage == null ? \"\" : sMessage;",
                "+    return this;",
                "+  }",
                "+",
                "+  public String getURL() {",
                "+    return sURL;",
                "+  }",
                "+",
                "+  public NotificationParameters setURL(final String sURL) {",
                "+    this.sURL = sURL;",
                "+    return this;",
                "+  }",
                "+",
                "+  public String getLinkLabel() {",
                "+    return sLinkLabel;",
                "+  }",
                "+",
                "+  public NotificationParameters setLinkLabel(final String sLinkLabel) {",
                "+    this.sLinkLabel = sLinkLabel;",
                "+    return this;",
                "+  }",
                "+",
                "+  public String getSource() {",
                "+    return sSource;",
                "+  }",
                "+",
                "+  public NotificationParameters setSource(final String sSource) {",
                "+    this.sSource = sSource;",
                "+    return this;",
                "+  }",
                "+",
                "+  public String getSessionId() {",
                "+    return sSessionId;",
                "+  }",
                "+",
                "+  public NotificationParameters setSessionId(final String sSessionId) {",
                "+    this.sSessionId = sSessionId;",
                "+    return this;",
                "+  }",
                "+",
                "+  public String getOriginalExtraMessage() {",
                "+    return sOriginalExtraMessage;",
                "+  }",
                "+",
                "+  public NotificationParameters setOriginalExtraMessage(final String sOriginalExtraMessage) {",
                "+    this.sOriginalExtraMessage = sOriginalExtraMessage;",
                "+    return this;",
                "+  }",
                "+",
                "+  public boolean isAnswerAllowed() {",
                "+    return bAnswerAllowed;",
                "+  }",
                "+",
                "+  public NotificationParameters setAnswerAllowed(final boolean bAnswerAllowed) {",
                "+    this.bAnswerAllowed = bAnswerAllowed;",
                "+    return this;",
                "+  }",
                "+",
                "+  public boolean isSendImmediately() {",
                "+    return bSendImmediately;",
                "+  }",
                "+",
                "+  public NotificationParameters setSendImmediately(final boolean bSendImmediately) {",
                "+    this.bSendImmediately = bSendImmediately;",
                "+    return this;",
                "+  }",
                "+",
                "+  public Date getDate() {",
                "+    return dDate;",
                "+  }",
                "+",
                "+  public NotificationParameters setDate(final Date dDate) {",
                "+    this.dDate = dDate;",
                "+    return this;",
                "+  }",
                "+",
                "+  public String getLanguage() {",
                "+    return sLanguage;",
                "+  }",
                "+",
                "+  public NotificationParameters setLanguage(final String sLanguage) {",
                "+    this.sLanguage = sLanguage;",
                "+    return this;",
                "+  }",
                "+",
                "+  public NotifAction getAction() {",
                "+    return eAction;",
                "+  }",
                "+",
                "+  public NotificationParameters setAction(final NotifAction eAction) {",
                "+    this.eAction = eAction;",
                "+    return this;",
                "+  }",
                "+",
                "+  public NotificationResourceData getNotificationResourceData() {",
                "+    return nNotificationResourceData;",
                "+  }",
                "+",
                "+  public NotificationParameters setNotificationResourceData(",
                "+      final NotificationResourceData nNotificationResourceData) {",
                "+    this.nNotificationResourceData = nNotificationResourceData;",
                "+    return this;",
                "+  }",
                "+",
                "+  boolean isTitleExceedsMaxSize() {",
                "+    return getTitle().length() >= MAX_SIZE_TITLE;",
                "+  }",
                "+",
                "+  void trace() {",
                "     StringBuilder trace = new StringBuilder(\"Notification Parameters Dump: {\");",
                "-    switch (iMessagePriority) {",
                "-      case NORMAL:",
                "-        trace.append(\"MessagePriority: NORMAL, \");",
                "-        break;",
                "-      case URGENT:",
                "-        trace.append(\"MessagePriority: URGENT, \");",
                "-        break;",
                "-      case ERROR:",
                "-        trace.append(\"MessagePriority: ERROR, \");",
                "-        break;",
                "+    if (iMessagePriority == PRIORITY_NORMAL) {",
                "+      trace.append(\"MessagePriority: NORMAL, \");",
                "+    } else if (iMessagePriority == PRIORITY_URGENT) {",
                "+      trace.append(\"MessagePriority: URGENT, \");",
                "+    } else if (iMessagePriority == PRIORITY_ERROR) {",
                "+      trace.append(\"MessagePriority: ERROR, \");",
                "     }",
                "-    switch (iMediaType) {",
                "-      case ADDRESS_DEFAULT:",
                "-        trace.append(\"MediaType: ADDRESS_DEFAULT, \");",
                "-        break;",
                "-      case ADDRESS_COMPONENT_DEFINED:",
                "-        trace.append(\"MediaType: ADDRESS_COMPONENT_DEFINED, \");",
                "-        break;",
                "-      case ADDRESS_BASIC_POPUP:",
                "-        trace.append(\"MediaType: ADDRESS_BASIC_POPUP, \");",
                "-        break;",
                "-      case ADDRESS_BASIC_REMOVE:",
                "-        trace.append(\"MediaType: ADDRESS_BASIC_REMOVE, \");",
                "-        break;",
                "-      case ADDRESS_BASIC_SILVERMAIL:",
                "-        trace.append(\"MediaType: ADDRESS_BASIC_SILVERMAIL, \");",
                "-        break;",
                "-      case ADDRESS_BASIC_SMTP_MAIL:",
                "-        trace.append(\"MediaType: ADDRESS_BASIC_SMTP_MAIL, \");",
                "-        break;",
                "-      case ADDRESS_BASIC_SERVER:",
                "-        trace.append(\"MediaType: ADDRESS_BASIC_SERVER, \");",
                "-        break;",
                "-      case ADDRESS_BASIC_COMMUNICATION_USER:",
                "-        trace.append(\"MediaType: ADDRESS_BASIC_COMMUNICATION_USER, \");",
                "-        break;",
                "-      default:",
                "-        trace.append(\"MediaType: \").append(Integer.toString(iMediaType)).append(\", \");",
                "-        break;",
                "+    Optional<BuiltInNotifAddress> mediaType = BuiltInNotifAddress.decode(addressId);",
                "+    trace.append(\"MediaType: \");",
                "+    if (mediaType.isPresent()) {",
                "+      trace.append(mediaType.get().name()).append(\", \");",
                "+    } else {",
                "+      trace.append(addressId).append(\", \");",
                "     }",
                "-    trace.append(\"ComponentInstance: \" + Integer.toString(iComponentInstance));",
                "-    trace.append(\", Title: \" + sTitle);",
                "-    trace.append(\", Message: \" + sMessage);",
                "-    trace.append(\", FromUserId: \" + Integer.toString(iFromUserId));",
                "-    trace.append(\", FromSenderName: \" + senderName);",
                "-    trace.append(\", AnswerAllowed: \" + bAnswerAllowed);",
                "-    trace.append(\", SendImmediately: \" + bSendImmediately);",
                "-    trace.append(\", Source: \" + sSource);",
                "-    trace.append(\", SessionId: \" + sSessionId);",
                "-    trace.append(\", Date: \" + dDate.toString());",
                "-    trace.append(\", Action: \" + (eAction != null ? eAction.name() : \"N/A\"));",
                "+    trace.append(\"ComponentInstance: \").append(iComponentInstance);",
                "+    trace.append(\", Title: \").append(sTitle);",
                "+    trace.append(\", Message: \").append(sMessage);",
                "+    trace.append(\", FromUserId: \").append(iFromUserId);",
                "+    trace.append(\", FromSenderName: \").append(senderName);",
                "+    trace.append(\", AnswerAllowed: \").append(bAnswerAllowed);",
                "+    trace.append(\", SendImmediately: \").append(bSendImmediately);",
                "+    trace.append(\", Source: \").append(sSource);",
                "+    trace.append(\", SessionId: \").append(sSessionId);",
                "+    trace.append(\", Date: \").append(dDate.toString());",
                "+    trace.append(\", Action: \").append((eAction != null ? eAction.name() : \"N/A\"));",
                "     trace.append(\"}\");",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/BuiltInNotifAddress.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/BuiltInNotifAddress.java",
                "new file mode 100644",
                "index 0000000000..5e74c3e437",
                "--- /dev/null",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/BuiltInNotifAddress.java",
                "@@ -0,0 +1,118 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+package org.silverpeas.core.notification.user.client.constant;",
                "+",
                "+import java.util.Arrays;",
                "+import java.util.Optional;",
                "+",
                "+/**",
                "+ * Definition of the builtin addresses that are used in the notification to the users. Each of them",
                "+ * are related to a given notification channel (see {@link NotifChannel}). That means that for each",
                "+ * {@link NotifChannel} there is one and a unique one notification address definition. Hence a",
                "+ * notification address is also always related to the channel through which the notifications are",
                "+ * sent.",
                "+ * <p>",
                "+ * Among the builtin addresses there is also some predefined addresses that are not true",
                "+ * notification addresses but aliases to",
                "+ * a true address that requires to be computed according to the concerned user:",
                "+ * <ul>",
                "+ *   <li>{@link BuiltInNotifAddress#DEFAULT} is an alias to the first address set as default by",
                "+ *   the user,</li>",
                "+ *   <li>{@link BuiltInNotifAddress#COMPONENT_DEFINED} is an alias to the address that is defined",
                "+ *   by the user for all notifications sent through a given component instance</li>.",
                "+ * </ul>",
                "+ * The two above aliases can designate not only a builtin address but also a custom address created",
                "+ * by the user himself.",
                "+ * </p>",
                "+ * @author Yohann Chastagnier",
                "+ */",
                "+public enum BuiltInNotifAddress {",
                "+",
                "+  /**",
                "+   * Refers the first notification address set as default in the notification preferences of the",
                "+   * recipient user.",
                "+   */",
                "+  DEFAULT(-1),",
                "+",
                "+  /**",
                "+   * Refers the notification address that was specifically set by the reciepient user for",
                "+   * notifications sent within a given component instance.",
                "+   */",
                "+  COMPONENT_DEFINED(-2),",
                "+",
                "+  /**",
                "+   * Builtin address related to the notification channel {@link NotifChannel#POPUP}.",
                "+   */",
                "+  BASIC_POPUP(-10),",
                "+",
                "+  /**",
                "+   * Builtin address related to the notification channel {@link NotifChannel#REMOVE}.",
                "+   */",
                "+  BASIC_REMOVE(-11),",
                "+",
                "+  /**",
                "+   * Builtin address related to the notification channel {@link NotifChannel#SILVERMAIL}.",
                "+   */",
                "+  BASIC_SILVERMAIL(-12),",
                "+",
                "+  /**",
                "+   * Builtin address related to the notification channel {@link NotifChannel#SMTP}. For such a",
                "+   * channel, the builtin address is the email address of the recipient user as set in his",
                "+   * profile (beware, his profile isn't his notification preferences).",
                "+   */",
                "+  BASIC_SMTP(-13),",
                "+",
                "+  /**",
                "+   * Builtin address related to the notification channel {@link NotifChannel#SERVER}. This channel",
                "+   * refers any remote server to which a notification is sent, whatever it is.",
                "+   */",
                "+  BASIC_SERVER(-14);",
                "+",
                "+  private final int id;",
                "+",
                "+  BuiltInNotifAddress(final int id) {",
                "+    this.id = id;",
                "+  }",
                "+",
                "+  public int getId() {",
                "+    return id;",
                "+  }",
                "+",
                "+  /**",
                "+   * Decodes the specified media type identifier to a {@link BuiltInNotifAddress} instance.",
                "+   * @param id an identifier of a media type.",
                "+   * @return an optional {@link BuiltInNotifAddress} instance corresponding to the specified",
                "+   * identifier.",
                "+   */",
                "+  public static Optional<BuiltInNotifAddress> decode(final Integer id) {",
                "+    final Optional<BuiltInNotifAddress> mediaType;",
                "+    if (id != null) {",
                "+      mediaType = Arrays.stream(BuiltInNotifAddress.values()).filter(n -> n.id == id).findFirst();",
                "+    } else {",
                "+      mediaType = Optional.empty();",
                "+    }",
                "+    return mediaType;",
                "+  }",
                "+",
                "+}",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifChannel.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifChannel.java",
                "index 316a98465a..66a83c2c52 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifChannel.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifChannel.java",
                "@@ -25,4 +25,8 @@ package org.silverpeas.core.notification.user.client.constant;",
                "+import org.silverpeas.core.util.StringUtil;",
                "+",
                " import java.util.ArrayList;",
                "+import java.util.Arrays;",
                " import java.util.Collection;",
                "+import java.util.Optional;",
                "@@ -36,8 +40,9 @@ public enum NotifChannel {",
                "    */",
                "-  SMTP(1),",
                "+  SMTP(1, \"BASIC_SMTP_MAIL\", BuiltInNotifAddress.BASIC_SMTP),",
                "   /**",
                "-   * The notification is sent by SMS.",
                "+   * The notification is sent by SMS. In that case, the address should be a phone number and",
                "+   * the remote server a SMS service of a telecommunication provider.",
                "    */",
                "-  SMS(2),",
                "+  SMS(2, \"BASIC_SMS\", BuiltInNotifAddress.BASIC_SERVER),",
                "@@ -46,9 +51,9 @@ public enum NotifChannel {",
                "    */",
                "-  POPUP(3),",
                "+  POPUP(3, \"BASIC_POPUP\", BuiltInNotifAddress.BASIC_POPUP),",
                "   /**",
                "-   * The notification is stored into Silverpeas to be rendered within the user's notifications page",
                "+   * The notification is stored into Silverpeas to be rendered within the user's notifications box",
                "    * in Silverpeas.",
                "    */",
                "-  SILVERMAIL(4),",
                "+  SILVERMAIL(4, \"BASIC_SILVERMAIL\", BuiltInNotifAddress.BASIC_SILVERMAIL),",
                "@@ -57,13 +62,17 @@ public enum NotifChannel {",
                "    */",
                "-  REMOVE(5),",
                "+  REMOVE(5, \"BASIC_REMOVE\", BuiltInNotifAddress.BASIC_REMOVE),",
                "   /**",
                "-   * The notification is sent to a remote server.",
                "+   * The notification is sent to a remote server, whatever it is.",
                "    */",
                "-  SERVER(6);",
                "+  SERVER(6, \"BASIC_SERVER\", BuiltInNotifAddress.BASIC_SERVER);",
                "-  private int id;",
                "+  private final int id;",
                "+  private final String name;",
                "+  private final BuiltInNotifAddress type;",
                "-  NotifChannel(final int id) {",
                "+  NotifChannel(final int id, final String name, final BuiltInNotifAddress mediaType) {",
                "     this.id = id;",
                "+    this.name = name;",
                "+    this.type = mediaType;",
                "   }",
                "@@ -74,11 +83,42 @@ public enum NotifChannel {",
                "-  public static NotifChannel decode(final Integer id) {",
                "+  public String getName() {",
                "+    return name;",
                "+  }",
                "+",
                "+  public BuiltInNotifAddress getMediaType() {",
                "+    return type;",
                "+  }",
                "+",
                "+  /**",
                "+   * Decodes the specified channel identifier to a well defined {@link NotifChannel} instance.",
                "+   * If the identifier doesn't match to an existing {@link NotifChannel} instance, then nothing",
                "+   * is returned.",
                "+   * @param id the unique identifier of a channel.",
                "+   * @return an optional {@link NotifChannel} instance corresponding to the given identifier. If",
                "+   * no such channel exists for the specified identifier, then nothing is returned.",
                "+   */",
                "+  public static Optional<NotifChannel> decode(final Integer id) {",
                "+    final Optional<NotifChannel> channel;",
                "     if (id != null) {",
                "-      for (NotifChannel notifChannel : NotifChannel.values()) {",
                "-        if (id == notifChannel.id) {",
                "-          return notifChannel;",
                "-        }",
                "-      }",
                "+      channel = Arrays.stream(NotifChannel.values()).filter(n -> n.id == id).findFirst();",
                "+    } else {",
                "+      channel = Optional.empty();",
                "+    }",
                "+    return channel;",
                "+  }",
                "+",
                "+  /**",
                "+   * Decodes the specified channel name to the corresponding {@link NotifChannel} instance.",
                "+   * @param name the name of a channel.",
                "+   * @return an optional {@link NotifChannel} instance. If no such channel exists for the given",
                "+   * name, then nothing is returned.",
                "+   */",
                "+  public static Optional<NotifChannel> decode(final String name) {",
                "+    final Optional<NotifChannel> channel;",
                "+    if (StringUtil.isDefined(name)) {",
                "+      channel = Arrays.stream(NotifChannel.values()).filter(n -> n.name.equals(name)).findFirst();",
                "+    } else {",
                "+      channel = Optional.empty();",
                "     }",
                "-    return null;",
                "+    return channel;",
                "   }",
                "@@ -86,3 +126,3 @@ public enum NotifChannel {",
                "   public static Collection<Integer> toIds(final Collection<NotifChannel> notifChannels) {",
                "-    final Collection<Integer> result = new ArrayList<Integer>();",
                "+    final Collection<Integer> result = new ArrayList<>();",
                "     if (notifChannels != null) {",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifMediaType.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifMediaType.java",
                "deleted file mode 100644",
                "index d74756358a..0000000000",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifMediaType.java",
                "+++ /dev/null",
                "@@ -1,94 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.notification.user.client.constant;",
                "-",
                "-import org.silverpeas.core.notification.user.client.NotificationParameters;",
                "-",
                "-/**",
                "- * The different type of media that can be used to transmit a notification.",
                "- * @author Yohann Chastagnier",
                "- */",
                "-public enum NotifMediaType {",
                "-",
                "-  /**",
                "-   * Use the notification channel that is set up by the user in its preferences.",
                "-   */",
                "-  DEFAULT(NotificationParameters.ADDRESS_DEFAULT),",
                "-",
                "-  /**",
                "-   * Use the notification channel that is defined by the component instance itself.",
                "-   */",
                "-  COMPONENT_DEFINED(NotificationParameters.ADDRESS_COMPONENT_DEFINED),",
                "-",
                "-  /**",
                "-   * Use explicitly {@link NotifChannel#POPUP}.",
                "-   */",
                "-  BASIC_POPUP(NotificationParameters.ADDRESS_BASIC_POPUP),",
                "-",
                "-  /**",
                "-   * Use explicitly {@link NotifChannel#REMOVE}.",
                "-   */",
                "-  BASIC_REMOVE(NotificationParameters.ADDRESS_BASIC_REMOVE),",
                "-",
                "-  /**",
                "-   * Use explicitly {@link NotifChannel#SILVERMAIL}.",
                "-   */",
                "-  BASIC_SILVERMAIL(NotificationParameters.ADDRESS_BASIC_SILVERMAIL),",
                "-",
                "-  /**",
                "-   * Use explicitly {@link NotifChannel#SMTP}.",
                "-   */",
                "-  BASIC_SMTP(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL),",
                "-",
                "-  /**",
                "-   * Use explicitly {@link NotifChannel#SERVER}.",
                "-   */",
                "-  BASIC_SERVER(NotificationParameters.ADDRESS_BASIC_SERVER),",
                "-",
                "-  /**",
                "-   * Use explicitly {@link NotifChannel#SMS}.",
                "-   */",
                "-  BASIC_USER_COMMUNICATION(NotificationParameters.ADDRESS_BASIC_COMMUNICATION_USER);",
                "-",
                "-  private int id;",
                "-",
                "-  NotifMediaType(final int id) {",
                "-    this.id = id;",
                "-  }",
                "-",
                "-  public int getId() {",
                "-    return id;",
                "-  }",
                "-",
                "-  public static NotifMediaType decode(final Integer id) {",
                "-    if (id != null) {",
                "-      for (NotifMediaType notifMediaType : NotifMediaType.values()) {",
                "-        if (id == notifMediaType.id) {",
                "-          return notifMediaType;",
                "-        }",
                "-      }",
                "-    }",
                "-    return null;",
                "-  }",
                "-}",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifMessageType.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifMessageType.java",
                "index 925dc1598d..99d4d2cc0d 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifMessageType.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifMessageType.java",
                "@@ -35,3 +35,3 @@ public enum NotifMessageType {",
                "    */",
                "-  NORMAL(NotificationParameters.NORMAL),",
                "+  NORMAL(NotificationParameters.PRIORITY_NORMAL),",
                "@@ -40,3 +40,3 @@ public enum NotifMessageType {",
                "    */",
                "-  URGENT(NotificationParameters.URGENT),",
                "+  URGENT(NotificationParameters.PRIORITY_URGENT),",
                "@@ -45,3 +45,3 @@ public enum NotifMessageType {",
                "    */",
                "-  ERROR(NotificationParameters.ERROR);",
                "+  ERROR(NotificationParameters.PRIORITY_ERROR);",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/delayed/model/DelayedNotificationData.java b/core-api/src/main/java/org/silverpeas/core/notification/user/delayed/model/DelayedNotificationData.java",
                "index 3567e2e23b..9923f251a4 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/delayed/model/DelayedNotificationData.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/delayed/model/DelayedNotificationData.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.notification.user.delayed.model;",
                "+import org.silverpeas.core.exception.DecodingException;",
                " import org.silverpeas.core.i18n.I18n;",
                "@@ -145,3 +146,3 @@ public class DelayedNotificationData",
                "   public NotifChannel getChannel() {",
                "-    return NotifChannel.decode(channel);",
                "+    return NotifChannel.decode(channel).orElse(null);",
                "   }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/delayed/model/DelayedNotificationUserSetting.java b/core-api/src/main/java/org/silverpeas/core/notification/user/delayed/model/DelayedNotificationUserSetting.java",
                "index cfd9a2509e..8b2d1afc6b 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/delayed/model/DelayedNotificationUserSetting.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/delayed/model/DelayedNotificationUserSetting.java",
                "@@ -92,3 +92,3 @@ public class DelayedNotificationUserSetting",
                "   public NotifChannel getChannel() {",
                "-    return NotifChannel.decode(channel);",
                "+    return NotifChannel.decode(channel).orElse(null);",
                "   }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/AbstractTable.java b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/AbstractTable.java",
                "index 558b99ff32..6e72c7a346 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/AbstractTable.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/AbstractTable.java",
                "@@ -65,4 +65,4 @@ public abstract class AbstractTable<T> {",
                "       return value.substring(0, maxSize - 1);",
                "-    } else",
                "-      return value;",
                "+    }",
                "+    return value;",
                "   }",
                "@@ -72,5 +72,4 @@ public abstract class AbstractTable<T> {",
                "    * @return the next identifier value.",
                "-   * @throws SQLException on SQL error.",
                "    */",
                "-  public int getNextId() throws SQLException {",
                "+  public int getNextId() {",
                "     int nextId = DBUtil.getNextId(tableName, \"id\");",
                "@@ -190,8 +189,3 @@ public abstract class AbstractTable<T> {",
                "          PreparedStatement select = connection.prepareStatement(query)) {",
                "-      for (int i = 0; i < ids.length; i++) {",
                "-        select.setInt(i + 1, ids[i]);",
                "-      }",
                "-      for (int j = 0; j < params.length; j++) {",
                "-        select.setString(ids.length + j + 1, params[j]);",
                "-      }",
                "+      setStatementParameters(ids, params, select);",
                "       try (ResultSet rs = select.executeQuery()) {",
                "@@ -202,2 +196,12 @@ public abstract class AbstractTable<T> {",
                "+  private void setStatementParameters(final int[] ids, final String[] params,",
                "+      final PreparedStatement statement) throws SQLException {",
                "+    for (int i = 0; i < ids.length; i++) {",
                "+      statement.setInt(i + 1, ids[i]);",
                "+    }",
                "+    for (int j = 0; j < params.length; j++) {",
                "+      statement.setString(ids.length + j + 1, params[j]);",
                "+    }",
                "+  }",
                "+",
                "   /**",
                "@@ -272,8 +276,3 @@ public abstract class AbstractTable<T> {",
                "          PreparedStatement select = connection.prepareStatement(query)) {",
                "-      for (int i = 0; i < ids.length; i++) {",
                "-        select.setInt(i + 1, ids[i]);",
                "-      }",
                "-      for (int j = 0; j < params.length; j++) {",
                "-        select.setString(ids.length + j + 1, params[j]);",
                "-      }",
                "+      setStatementParameters(ids, params, select);",
                "       try (ResultSet rs = select.executeQuery()) {",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegateIT.java b/core-library/src/integration-test/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegateIT.java",
                "index 15997cbcd4..1a996e76fb 100644",
                "--- a/core-library/src/integration-test/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegateIT.java",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegateIT.java",
                "@@ -111,3 +111,3 @@ public class DelayedNotificationDelegateIT {",
                "     dndTest = buildValidDelayedNotificationData();",
                "-    dndTest.setFromUserId((Integer) null);",
                "+    dndTest.setFromUserId(null);",
                "     assertNewNotification(dndTest, 1);",
                "@@ -118,3 +118,3 @@ public class DelayedNotificationDelegateIT {",
                "     channels.remove(NotifChannel.SMTP);",
                "-    channels.add(null);",
                "+    channels.add(null); //=> I'm sorry but it is a bug! How we can know to send a message if we don't know the channel through which it can be sent!",
                "     for (final NotifChannel channel : channels) {",
                "@@ -131,5 +131,5 @@ public class DelayedNotificationDelegateIT {",
                "     dndTest = buildValidDelayedNotificationData();",
                "-    for (final int priority : new int[]{NotificationParameters.ERROR, NotificationParameters.URGENT,",
                "+    for (final int priority : new int[]{NotificationParameters.PRIORITY_ERROR, NotificationParameters.PRIORITY_URGENT,",
                "         -1, 3, 7, 9}) {",
                "-      dndTest.getNotificationParameters().iMessagePriority = priority;",
                "+      dndTest.getNotificationParameters().setMessagePriority(priority);",
                "       assertNewNotification(dndTest, 1);",
                "@@ -349,3 +349,3 @@ public class DelayedNotificationDelegateIT {",
                "     @Override",
                "-    protected UserDetail getUserDetail(final Integer userId) throws Exception {",
                "+    protected UserDetail getUserDetail(final Integer userId) {",
                "       final UserDetail userDetailStub = new UserDetail();",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java",
                "index da3b7b83cb..e6d94ad475 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java",
                "@@ -686,8 +686,4 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "-  public String getNextDomainId() throws AdminException {",
                "-    try {",
                "-      return idAsString(getOrganizationSchema().domain().getNextId());",
                "-    } catch (SQLException e) {",
                "-      throw new AdminException(e.getMessage(), e);",
                "-    }",
                "+  public String getNextDomainId() {",
                "+    return idAsString(getOrganizationSchema().domain().getNextId());",
                "   }",
                "@@ -698,9 +694,3 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "       dr.id = StringUtil.isInteger(theDomain.getId()) ? Integer.valueOf(theDomain.getId()) : -1;",
                "-      dr.name = theDomain.getName();",
                "-      dr.description = theDomain.getDescription();",
                "-      dr.className = theDomain.getDriverClassName();",
                "-      dr.propFileName = theDomain.getPropFileName();",
                "-      dr.authenticationServer = theDomain.getAuthenticationServer();",
                "-      dr.theTimeStamp = theDomain.getTheTimeStamp();",
                "-      dr.silverpeasServerURL = theDomain.getSilverpeasServerURL();",
                "+      setDomainRow(theDomain, dr);",
                "@@ -715,2 +705,12 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "+  private void setDomainRow(final Domain theDomain, final DomainRow dr) {",
                "+    dr.name = theDomain.getName();",
                "+    dr.description = theDomain.getDescription();",
                "+    dr.className = theDomain.getDriverClassName();",
                "+    dr.propFileName = theDomain.getPropFileName();",
                "+    dr.authenticationServer = theDomain.getAuthenticationServer();",
                "+    dr.theTimeStamp = theDomain.getTheTimeStamp();",
                "+    dr.silverpeasServerURL = theDomain.getSilverpeasServerURL();",
                "+  }",
                "+",
                "   public String updateDomain(Domain theDomain) throws AdminException {",
                "@@ -719,9 +719,3 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "       dr.id = idAsInt(theDomain.getId());",
                "-      dr.name = theDomain.getName();",
                "-      dr.description = theDomain.getDescription();",
                "-      dr.className = theDomain.getDriverClassName();",
                "-      dr.propFileName = theDomain.getPropFileName();",
                "-      dr.authenticationServer = theDomain.getAuthenticationServer();",
                "-      dr.theTimeStamp = theDomain.getTheTimeStamp();",
                "-      dr.silverpeasServerURL = theDomain.getSilverpeasServerURL();",
                "+      setDomainRow(theDomain, dr);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/user/UserRegistrationServiceLegacy.java b/core-library/src/main/java/org/silverpeas/core/admin/user/UserRegistrationServiceLegacy.java",
                "index 8ecc465059..4a5bc46638 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/user/UserRegistrationServiceLegacy.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/user/UserRegistrationServiceLegacy.java",
                "@@ -158,3 +158,3 @@ public class UserRegistrationServiceLegacy implements UserRegistrationService {",
                "       NotificationMetaData notifMetaData =",
                "-          new NotificationMetaData(NotificationParameters.NORMAL, subject, templates,",
                "+          new NotificationMetaData(NotificationParameters.PRIORITY_NORMAL, subject, templates,",
                "           \"credentialsMail\");",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/attachment/ScheduledReservedFile.java b/core-library/src/main/java/org/silverpeas/core/contribution/attachment/ScheduledReservedFile.java",
                "index b737f04889..072c91b010 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/attachment/ScheduledReservedFile.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/attachment/ScheduledReservedFile.java",
                "@@ -98,3 +98,3 @@ public class ScheduledReservedFile implements Initialization {",
                "         NotificationMetaData notifMetaData =",
                "-            new NotificationMetaData(NotificationParameters.NORMAL, subject, body);",
                "+            new NotificationMetaData(NotificationParameters.PRIORITY_NORMAL, subject, body);",
                "@@ -121,3 +121,3 @@ public class ScheduledReservedFile implements Initialization {",
                "         NotificationMetaData notifMetaData =",
                "-            new NotificationMetaData(NotificationParameters.NORMAL, subject, body);",
                "+            new NotificationMetaData(NotificationParameters.PRIORITY_NORMAL, subject, body);",
                "@@ -144,3 +144,3 @@ public class ScheduledReservedFile implements Initialization {",
                "         NotificationMetaData notifMetaData =",
                "-            new NotificationMetaData(NotificationParameters.NORMAL, subject, body);",
                "+            new NotificationMetaData(NotificationParameters.PRIORITY_NORMAL, subject, body);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java b/core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java",
                "index af24bec485..44c7c15897 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java",
                "@@ -29,3 +29,3 @@ import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                " import org.silverpeas.core.notification.user.client.NotificationSender;",
                "-import org.silverpeas.core.notification.user.client.constant.NotifMediaType;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                " import org.silverpeas.core.notification.user.client.constant.NotifMessageType;",
                "@@ -71,3 +71,3 @@ public class DefaultUserNotification implements UserNotification {",
                "   @Override",
                "-  public void send(final NotifMediaType mediaType) {",
                "+  public void send(final BuiltInNotifAddress notificationAddress) {",
                "     if (notification != null) {",
                "@@ -75,4 +75,4 @@ public class DefaultUserNotification implements UserNotification {",
                "         final NotificationSender sender = new NotificationSender(notification.getComponentId());",
                "-        if (mediaType != null) {",
                "-          sender.notifyUser(mediaType.getId(), notification);",
                "+        if (notificationAddress != null) {",
                "+          sender.notifyUser(notificationAddress.getId(), notification);",
                "         } else {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/NullUserNotification.java b/core-library/src/main/java/org/silverpeas/core/notification/user/NullUserNotification.java",
                "index 361040242f..3c428650cb 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/NullUserNotification.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/NullUserNotification.java",
                "@@ -49,3 +49,3 @@ package org.silverpeas.core.notification.user;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.constant.NotifMediaType;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                "@@ -71,3 +71,3 @@ public class NullUserNotification implements UserNotification {",
                "   @Override",
                "-  public void send(final NotifMediaType mediaType) {",
                "+  public void send(final BuiltInNotifAddress notificationAddress) {",
                "     // Nothing to do",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/SimpleUserNotification.java b/core-library/src/main/java/org/silverpeas/core/notification/user/SimpleUserNotification.java",
                "index cc6ffc00e0..878865392a 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/SimpleUserNotification.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/SimpleUserNotification.java",
                "@@ -29,4 +29,4 @@ import org.silverpeas.core.notification.user.builder.AbstractTemplateUserNotific",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                " import org.silverpeas.core.notification.user.client.constant.NotifAction;",
                "-import org.silverpeas.core.notification.user.client.constant.NotifMediaType;",
                " import org.silverpeas.core.notification.user.model.NotificationResourceData;",
                "@@ -40,2 +40,3 @@ import java.util.Set;",
                " import java.util.function.Function;",
                "+import java.util.function.UnaryOperator;",
                " import java.util.stream.Stream;",
                "@@ -54,4 +55,4 @@ public class SimpleUserNotification implements UserNotification {",
                "   private NotifAction notifAction = NotifAction.REPORT;",
                "-  private Function<String, String> title = s -> \"\";",
                "-  private Function<String, String> message = m -> \"\";",
                "+  private UnaryOperator<String> title = s -> \"\";",
                "+  private UnaryOperator<String> message = m -> \"\";",
                "   private Set<String> userIds = new HashSet<>();",
                "@@ -90,3 +91,3 @@ public class SimpleUserNotification implements UserNotification {",
                "    */",
                "-  public SimpleUserNotification withTitle(Function<String, String> title) {",
                "+  public SimpleUserNotification withTitle(UnaryOperator<String> title) {",
                "     this.title = title;",
                "@@ -100,3 +101,3 @@ public class SimpleUserNotification implements UserNotification {",
                "    */",
                "-  public SimpleUserNotification andMessage(Function<String, String> message) {",
                "+  public SimpleUserNotification andMessage(UnaryOperator<String> message) {",
                "     this.message = message;",
                "@@ -202,4 +203,4 @@ public class SimpleUserNotification implements UserNotification {",
                "   @Override",
                "-  public void send(final NotifMediaType mediaType) {",
                "-    build().send(mediaType);",
                "+  public void send(final BuiltInNotifAddress notificationAddress) {",
                "+    build().send(notificationAddress);",
                "   }",
                "@@ -227,3 +228,3 @@ public class SimpleUserNotification implements UserNotification {",
                "       final String senderName = source.sender != null ? source.sender.getDisplayedName() : \"\";",
                "-      getNotificationMetaData().addLanguage(language, title, \"\");",
                "+      super.getNotificationMetaData().addLanguage(language, title, \"\");",
                "       template.setAttribute(\"message\", message);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/helper/UserNotificationHelper.java b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/helper/UserNotificationHelper.java",
                "index 2e4ec8a099..eadbbd681f 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/helper/UserNotificationHelper.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/helper/UserNotificationHelper.java",
                "@@ -27,3 +27,3 @@ import org.silverpeas.core.notification.user.builder.UserNotificationBuilder;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.constant.NotifMediaType;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                " import org.silverpeas.core.util.ServiceProvider;",
                "@@ -43,7 +43,8 @@ public class UserNotificationHelper {",
                "   /**",
                "-   * Builds a notification data container from a given builder. After that, sends the builded notification",
                "-   * @param notificationBuider",
                "+   * Builds a notification data container from a given builder. After that, sends the built",
                "+   * notification",
                "+   * @param notificationBuilder the builder to use to construct the notification",
                "    */",
                "-  public static void buildAndSend(final UserNotificationBuilder notificationBuider) {",
                "-    getInstance().getManager().buildAndSend(notificationBuider);",
                "+  public static void buildAndSend(final UserNotificationBuilder notificationBuilder) {",
                "+    getInstance().getManager().buildAndSend(notificationBuilder);",
                "   }",
                "@@ -51,10 +52,10 @@ public class UserNotificationHelper {",
                "   /**",
                "-   * Builds a notification data container from a given builder. After that, sends the builded notification for the given",
                "-   * media type",
                "-   * @param mediaType",
                "-   * @param notificationBuider",
                "+   * Builds a notification data container from a given builder. After that, sends the built",
                "+   * notification for the given media type",
                "+   * @param notificationAddress the built-in address at which the notification has to be sent.",
                "+   * @param notificationBuilder the builder to use to construct the notification.",
                "    */",
                "-  public static void buildAndSend(final NotifMediaType mediaType,",
                "-      final UserNotificationBuilder notificationBuider) {",
                "-    getInstance().getManager().buildAndSend(mediaType, notificationBuider);",
                "+  public static void buildAndSend(final BuiltInNotifAddress notificationAddress,",
                "+      final UserNotificationBuilder notificationBuilder) {",
                "+    getInstance().getManager().buildAndSend(notificationAddress, notificationBuilder);",
                "   }",
                "@@ -63,7 +64,7 @@ public class UserNotificationHelper {",
                "    * Builds a notification data container from a given builder",
                "-   * @param notificationBuider",
                "-   * @return",
                "+   * @param notificationBuilder the builder to use to construct the notification.",
                "+   * @return the metadata about the notification that is built by the builder.",
                "    */",
                "-  public static NotificationMetaData build(final UserNotificationBuilder notificationBuider) {",
                "-    return getInstance().getManager().build(notificationBuider);",
                "+  public static NotificationMetaData build(final UserNotificationBuilder notificationBuilder) {",
                "+    return getInstance().getManager().build(notificationBuilder);",
                "   }",
                "@@ -71,4 +72,4 @@ public class UserNotificationHelper {",
                "   /**",
                "-   * Gets the manager.",
                "-   * @return",
                "+   * Gets the user notification manager.",
                "+   * @return a {@link UserNotificationManager} instance.",
                "    */",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/helper/UserNotificationManager.java b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/helper/UserNotificationManager.java",
                "index bfc082ab7e..9feffe5e82 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/helper/UserNotificationManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/helper/UserNotificationManager.java",
                "@@ -27,3 +27,3 @@ import org.silverpeas.core.notification.user.builder.UserNotificationBuilder;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.constant.NotifMediaType;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                "@@ -44,6 +44,6 @@ public class UserNotificationManager {",
                "    * notification",
                "-   * @param notificationBuider",
                "+   * @param notificationBuilder the builder to use to construct the notification.",
                "    */",
                "-  public void buildAndSend(final UserNotificationBuilder notificationBuider) {",
                "-    notificationBuider.build().send();",
                "+  public void buildAndSend(final UserNotificationBuilder notificationBuilder) {",
                "+    notificationBuilder.build().send();",
                "   }",
                "@@ -51,11 +51,10 @@ public class UserNotificationManager {",
                "   /**",
                "-   * Builds a notification data container from a given builder. After that, sends the builded",
                "-   * notification for the given",
                "-   * media type",
                "-   * @param mediaType",
                "-   * @param notificationBuider",
                "+   * Builds a notification data container from a given builder. After that, sends the built",
                "+   * notification to the specified builtin notification address.",
                "+   * @param notificationAddress the address at which the notification should be sent.",
                "+   * @param notificationBuilder the builder to use to construct the notification.",
                "    */",
                "-  public void buildAndSend(final NotifMediaType mediaType,",
                "-      final UserNotificationBuilder notificationBuider) {",
                "-    notificationBuider.build().send(mediaType);",
                "+  public void buildAndSend(final BuiltInNotifAddress notificationAddress,",
                "+      final UserNotificationBuilder notificationBuilder) {",
                "+    notificationBuilder.build().send(notificationAddress);",
                "   }",
                "@@ -64,7 +63,7 @@ public class UserNotificationManager {",
                "    * Builds a notification data container from a given builder",
                "-   * @param notificationBuider",
                "-   * @return",
                "+   * @param notificationBuilder the builder to use to construct the notification.",
                "+   * @return the metadata about the notification to send.",
                "    */",
                "-  public NotificationMetaData build(final UserNotificationBuilder notificationBuider) {",
                "-    return notificationBuider.build().getNotificationMetaData();",
                "+  public NotificationMetaData build(final UserNotificationBuilder notificationBuilder) {",
                "+    return notificationBuilder.build().getNotificationMetaData();",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "index 3e50783964..720cc60b7c 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "@@ -27,2 +27,3 @@ import org.apache.commons.lang3.StringUtils;",
                " import org.jetbrains.annotations.NotNull;",
                "+import org.silverpeas.core.SilverpeasRuntimeException;",
                " import org.silverpeas.core.admin.component.ComponentInstanceDeletion;",
                "@@ -36,4 +37,6 @@ import org.silverpeas.core.admin.user.constant.UserAccessLevel;",
                " import org.silverpeas.core.admin.user.model.UserDetail;",
                "+import org.silverpeas.core.exception.DecodingException;",
                " import org.silverpeas.core.i18n.I18NHelper;",
                " import org.silverpeas.core.notification.NotificationException;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                " import org.silverpeas.core.notification.user.client.constant.NotifChannel;",
                "@@ -68,2 +71,4 @@ import java.util.Map;",
                " import java.util.Properties;",
                "+import java.util.stream.Collectors;",
                "+import java.util.stream.Stream;",
                "@@ -107,3 +112,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   @Override",
                "-  public DefaultNotificationManager forLanguage(String language) {",
                "+  public DefaultNotificationManager forLanguage(final String language) {",
                "     final String lang = StringUtil.isDefined(language) ? language : I18NHelper.defaultLanguage;",
                "@@ -129,10 +134,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * get the notifications addresses of a user",
                "-   * @param aUserId : id of the user as in the \"id\" field of \"ST_USER\" table.",
                "-   * @return an ArrayList of properties containing \"name\", \"type\", \"usage\" and \"address\" keys",
                "-   * @throws NotificationException",
                "-   */",
                "   @Override",
                "-  public ArrayList<Properties> getNotificationAddresses(int aUserId) throws NotificationException {",
                "+  public List<Properties> getNotifAddressProperties(final String aUserId)",
                "+      throws NotificationException {",
                "     ArrayList<Properties> addresses = new ArrayList<>();",
                "@@ -140,31 +140,21 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       NotifAddressTable nat = schema.notifAddress();",
                "-      NotificationParameters params = new NotificationParameters();",
                "-      // Add basic medias",
                "-      params.iMediaType = NotificationParameters.ADDRESS_BASIC_POPUP;",
                "       boolean isMultiChannelSupported = isMultiChannelNotification();",
                "-      addresses.add(",
                "-          notifAddressRowToProperties(getNotifAddressRow(params, aUserId), false, false, true,",
                "-              isDefaultAddress(NotificationParameters.ADDRESS_BASIC_POPUP, aUserId,",
                "-                  isMultiChannelSupported)));",
                "-      params.iMediaType = NotificationParameters.ADDRESS_BASIC_SILVERMAIL;",
                "-      addresses.add(notifAddressRowToProperties(getNotifAddressRow(params, aUserId), false, false,",
                "-          true, isDefaultAddress(NotificationParameters.ADDRESS_BASIC_SILVERMAIL, aUserId,",
                "-              isMultiChannelSupported)));",
                "-      params.iMediaType = NotificationParameters.ADDRESS_BASIC_SMTP_MAIL;",
                "-      addresses.add(notifAddressRowToProperties(getNotifAddressRow(params, aUserId), false, false,",
                "-          true, isDefaultAddress(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL, aUserId,",
                "-              isMultiChannelSupported)));",
                "-      params.iMediaType = NotificationParameters.ADDRESS_BASIC_REMOVE;",
                "-      addresses.add(",
                "-          notifAddressRowToProperties(getNotifAddressRow(params, aUserId), false, false, false,",
                "-              isDefaultAddress(NotificationParameters.ADDRESS_BASIC_REMOVE, aUserId,",
                "-                  isMultiChannelSupported)));",
                "+      addToUserAddressProperties(BuiltInNotifAddress.BASIC_POPUP, aUserId, isMultiChannelSupported,",
                "+          addresses);",
                "+      addToUserAddressProperties(BuiltInNotifAddress.BASIC_SILVERMAIL, aUserId, isMultiChannelSupported,",
                "+          addresses);",
                "+      addToUserAddressProperties(BuiltInNotifAddress.BASIC_SMTP, aUserId, isMultiChannelSupported,",
                "+          addresses);",
                "+      addToUserAddressProperties(BuiltInNotifAddress.BASIC_REMOVE, aUserId, isMultiChannelSupported,",
                "+          addresses);",
                "       // Add user's specific medias",
                "-      NotifAddressRow[] nar = nat.getAllByUserId(aUserId);",
                "-      for (NotifAddressRow aNar : nar) {",
                "-        addresses.add(notifAddressRowToProperties(aNar, true, true, true,",
                "-            isDefaultAddress(aNar.getId(), aUserId, isMultiChannelSupported)));",
                "-      }",
                "-    } catch (SQLException e) {",
                "+      Stream.of(nat.getAllByUserId(Integer.valueOf(aUserId))).forEach(r -> {",
                "+        try {",
                "+          addToUserAddressProperties(r, aUserId, isMultiChannelSupported, addresses);",
                "+        } catch (SQLException e) {",
                "+          throw new SilverpeasRuntimeException(e);",
                "+        }",
                "+      });",
                "+    } catch (SQLException | SilverpeasRuntimeException e) {",
                "       throw new NotificationException(\"Cannot get notification addresses of the user \" + aUserId,",
                "@@ -175,17 +165,32 @@ public class DefaultNotificationManager extends AbstractNotification",
                "+  private void addToUserAddressProperties(final BuiltInNotifAddress mediaType, final String aUserId,",
                "+      final boolean multiChannelSupported, final List<Properties> properties)",
                "+      throws NotificationException, SQLException {",
                "+    NotificationParameters params = new NotificationParameters();",
                "+    params.setAddressId(mediaType.getId());",
                "+    NotifAddressRow row = getNotifAddressRow(params, aUserId);",
                "+    addToUserAddressProperties(row, aUserId, multiChannelSupported, properties);",
                "+  }",
                "+",
                "+  private void addToUserAddressProperties(final NotifAddressRow row, final String aUserId,",
                "+      final boolean multiChannelSupported, final List<Properties> properties) throws SQLException {",
                "+    boolean defaultAddress = isDefaultNotifAddress(row.getId(), aUserId, multiChannelSupported);",
                "+    boolean editable = !BuiltInNotifAddress.decode(row.getId()).isPresent();",
                "+    boolean testable = row.getId() != BuiltInNotifAddress.BASIC_REMOVE.getId();",
                "+    properties.add(notifAddressRowToProperties(row, editable, editable, testable, defaultAddress));",
                "+  }",
                "+",
                "   @Override",
                "-  public Properties getNotificationAddress(int aNotificationAddressId, int aUserId)",
                "+  public Properties getNotifAddressProperties(final String addressId, final String aUserId)",
                "       throws NotificationException {",
                "     Properties p;",
                "-",
                "     try {",
                "+      int id = Integer.parseInt(addressId);",
                "       NotificationParameters params = new NotificationParameters();",
                "-      params.iMediaType = aNotificationAddressId;",
                "-",
                "+      params.setAddressId(id);",
                "       p = notifAddressRowToProperties(getNotifAddressRow(params, aUserId), true, true, true,",
                "-          isDefaultAddress(aNotificationAddressId, aUserId, false));",
                "+          isDefaultNotifAddress(id, aUserId, false));",
                "     } catch (SQLException e) {",
                "       throw new NotificationException(",
                "-          \"Cannot get the notification address \" + aNotificationAddressId + OF_THE_USER + aUserId,",
                "-          e);",
                "+          \"Cannot get the notification address \" + addressId + OF_THE_USER + aUserId, e);",
                "     }",
                "@@ -195,49 +200,7 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   @Override",
                "-  public ArrayList<Properties> getDefaultAddresses(int aUserId) throws NotificationException {",
                "-    ArrayList<Properties> ar = new ArrayList<>();",
                "-    NotifAddressRow row;",
                "-    Properties p;",
                "-    NotificationParameters params = new NotificationParameters();",
                "-",
                "+  public String getDefaultAddressId(final String aUserId) throws NotificationException {",
                "     try {",
                "-      params.iMediaType = NotificationParameters.ADDRESS_BASIC_POPUP;",
                "-      row = getNotifAddressRow(params, aUserId);",
                "-      p = new Properties();",
                "-      p.setProperty(\"id\", String.valueOf(row.getId()));",
                "-      p.setProperty(\"name\", getSureString(row.getNotifName()));",
                "-      ar.add(p);",
                "-      params.iMediaType = NotificationParameters.ADDRESS_BASIC_REMOVE;",
                "-      row = getNotifAddressRow(params, aUserId);",
                "-      p = new Properties();",
                "-      p.setProperty(\"id\", String.valueOf(row.getId()));",
                "-      p.setProperty(\"name\", getSureString(row.getNotifName()));",
                "-      ar.add(p);",
                "-      params.iMediaType = NotificationParameters.ADDRESS_BASIC_SILVERMAIL;",
                "-      row = getNotifAddressRow(params, aUserId);",
                "-      p = new Properties();",
                "-      p.setProperty(\"id\", String.valueOf(row.getId()));",
                "-      p.setProperty(\"name\", getSureString(row.getNotifName()));",
                "-      ar.add(p);",
                "-      params.iMediaType = NotificationParameters.ADDRESS_BASIC_SMTP_MAIL;",
                "-      row = getNotifAddressRow(params, aUserId);",
                "-      p = new Properties();",
                "-      p.setProperty(\"id\", String.valueOf(row.getId()));",
                "-      p.setProperty(\"name\", getSureString(row.getNotifName()));",
                "-      ar.add(p);",
                "-    } catch (SQLException e) {",
                "-      throw new NotificationException(",
                "-          \"Cannot get the default notification address of the user \" + aUserId, e);",
                "-    }",
                "-    return ar;",
                "-  }",
                "-",
                "-  @Override",
                "-  public int getDefaultAddress(int aUserId) throws NotificationException {",
                "-    int addressId;",
                "-",
                "-    try {",
                "-      NotifDefaultAddressTable ndat = schema.notifDefaultAddress();",
                "-      NotifDefaultAddressRow[] ndars = null;",
                "-",
                "-      ndars = ndat.getAllByUserId(aUserId);",
                "+      final int addressId;",
                "+      final NotifDefaultAddressTable ndat = schema.notifDefaultAddress();",
                "+      final NotifDefaultAddressRow[] ndars = ndat.getAllByUserId(Integer.valueOf(aUserId));",
                "       if (ndars.length > 0) {",
                "@@ -245,6 +208,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       } else {",
                "-        List<Integer> defaultAddresses = getDefaultNotificationAddresses();",
                "-        addressId = defaultAddresses.get(0);",
                "+        addressId = getDefaultNotificationChannels().get(0).getMediaType().getId();",
                "       }",
                "-    } catch (SQLException e) {",
                "+      return String.valueOf(addressId);",
                "+    } catch (SQLException | DecodingException e) {",
                "       throw new NotificationException(",
                "@@ -252,67 +215,7 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     }",
                "-    return addressId;",
                "-  }",
                "-",
                "-  /**",
                "-   * get All the priorities types",
                "-   * @return an ArrayList of properties containing \"id\" and \"name\" keys",
                "-   */",
                "-  @Override",
                "-  public ArrayList<Properties> getNotifPriorities() {",
                "-    ArrayList<Properties> priorities = new ArrayList<>();",
                "-    Properties priority = new Properties();",
                "-    priority.setProperty(\"id\", Integer.toString(NotificationParameters.NORMAL));",
                "-    priority.setProperty(\"name\", multilang.getString(MESSAGE_PRIORITY",
                "-        + Integer.toString(NotificationParameters.NORMAL)));",
                "-    priorities.add(priority);",
                "-    priority = new Properties();",
                "-    priority.setProperty(\"id\", Integer.toString(NotificationParameters.URGENT));",
                "-    priority.setProperty(\"name\", multilang.getString(MESSAGE_PRIORITY",
                "-        + Integer.toString(NotificationParameters.URGENT)));",
                "-    priorities.add(priority);",
                "-    priority = new Properties();",
                "-    priority.setProperty(\"id\", Integer.toString(NotificationParameters.ERROR));",
                "-    priority.setProperty(\"name\", multilang.getString(MESSAGE_PRIORITY",
                "-        + Integer.toString(NotificationParameters.ERROR)));",
                "-    priorities.add(priority);",
                "-",
                "-    return priorities;",
                "-  }",
                "-",
                "-  /**",
                "-   * get All the usage types",
                "-   * @return an ArrayList of properties containing \"id\" and \"name\" keys",
                "-   */",
                "-  @Override",
                "-  public ArrayList<Properties> getNotifUsages() {",
                "-    ArrayList<Properties> ar = new ArrayList<>();",
                "-    Properties p = new Properties();",
                "-    p.setProperty(\"id\", NotificationParameters.USAGE_PRO);",
                "-    p.setProperty(\"name\", multilang.getString(NotificationParameters.USAGE_PRO));",
                "-    ar.add(p);",
                "-    p = new Properties();",
                "-    p.setProperty(\"id\", NotificationParameters.USAGE_PERSO);",
                "-    p.setProperty(\"name\", multilang.getString(NotificationParameters.USAGE_PERSO));",
                "-    ar.add(p);",
                "-    p = new Properties();",
                "-    p.setProperty(\"id\", NotificationParameters.USAGE_REP);",
                "-    p.setProperty(\"name\", multilang.getString(NotificationParameters.USAGE_REP));",
                "-    ar.add(p);",
                "-    p = new Properties();",
                "-    p.setProperty(\"id\", NotificationParameters.USAGE_URGENT);",
                "-    p.setProperty(\"name\", multilang.getString(NotificationParameters.USAGE_URGENT));",
                "-    ar.add(p);",
                "-",
                "-    return ar;",
                "   }",
                "-  /**",
                "-   * get All the channel types from the database.",
                "-   * @return an ArrayList of properties containing \"id\" and \"name\" keys",
                "-   * @throws NotificationException",
                "-   */",
                "   @Override",
                "-  public ArrayList<Properties> getNotifChannels() throws NotificationException {",
                "+  public List<Properties> getNotifChannels() throws NotificationException {",
                "     ArrayList<Properties> ar = new ArrayList<>();",
                "-",
                "     try {",
                "@@ -320,3 +223,2 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       NotifChannelRow[] rows = nct.getAllRows();",
                "-",
                "       for (NotifChannelRow row : rows) {",
                "@@ -324,3 +226,2 @@ public class DefaultNotificationManager extends AbstractNotification",
                "           Properties p = new Properties();",
                "-",
                "           p.setProperty(\"id\", String.valueOf(row.getId()));",
                "@@ -336,17 +237,8 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * get the notifications preferences of a user",
                "-   * @param aUserId : id of the user as in the \"id\" field of \"ST_USER\" table.",
                "-   * @return an ArrayList of properties containing \"name\", \"type\", \"usage\" and \"address\" keys",
                "-   * @throws NotificationException",
                "-   */",
                "   @Override",
                "-  public ArrayList<Properties> getNotifPreferences(int aUserId) throws NotificationException {",
                "-    ArrayList<Properties> ar = new ArrayList<>();",
                "-",
                "+  public List<Properties> getNotifPreferences(final String aUserId) throws NotificationException {",
                "+    List<Properties> ar = new ArrayList<>();",
                "     try {",
                "       NotifPreferenceTable npt = schema.notifPreference();",
                "-      NotifPreferenceRow[] nprs;",
                "-",
                "-      nprs = npt.getAllByUserId(aUserId);",
                "+      NotifPreferenceRow[] nprs = npt.getAllByUserId(Integer.parseInt(aUserId));",
                "       for (NotifPreferenceRow npr : nprs) {",
                "@@ -362,10 +254,8 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   @Override",
                "-  public Properties getNotifPreference(int aPrefId, int aUserId) throws NotificationException {",
                "-",
                "+  public Properties getNotifPreference(final String aPrefId, final String aUserId)",
                "+      throws NotificationException {",
                "     try {",
                "       NotifPreferenceTable npt = schema.notifPreference();",
                "-      NotifPreferenceRow npr = npt.getNotifPreference(aPrefId);",
                "-",
                "+      NotifPreferenceRow npr = npt.getNotifPreference(Integer.parseInt(aPrefId));",
                "       return (notifPreferencesRowToProperties(aUserId, npr, true, true, false, false));",
                "-",
                "     } catch (SQLException e) {",
                "@@ -377,5 +267,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   @Override",
                "-  public void setDefaultAddress(int aNotificationAddressId, int aUserId)",
                "+  public void setDefaultAddress(final String aNotificationAddressId, final String aUserId)",
                "       throws NotificationException {",
                "-",
                "     try {",
                "@@ -384,6 +273,8 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-      ndars = ndat.getAllByUserId(aUserId);",
                "+      int uId = Integer.parseInt(aUserId);",
                "+      int nId = Integer.parseInt(aNotificationAddressId);",
                "+      ndars = ndat.getAllByUserId(uId);",
                "       if (ndars.length > 0) {",
                "-        if (ndars[0].getNotifAddressId() != aNotificationAddressId) {",
                "-          ndars[0].setNotifAddressId(aNotificationAddressId);",
                "+        if (ndars[0].getNotifAddressId() != nId) {",
                "+          ndars[0].setNotifAddressId(nId);",
                "           ndat.update(ndars[0]);",
                "@@ -391,4 +282,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       } else {",
                "-        NotifDefaultAddressRow newRow = new NotifDefaultAddressRow(-1, aUserId,",
                "-            aNotificationAddressId);",
                "+        NotifDefaultAddressRow newRow = new NotifDefaultAddressRow(-1, uId, nId);",
                "         ndat.create(newRow);",
                "@@ -402,7 +292,8 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   @Override",
                "-  public void addAddress(int aNotificationAddressId, int aUserId) throws NotificationException {",
                "+  public void addDefaultAddress(final String aNotificationAddressId, final String aUserId)",
                "+      throws NotificationException {",
                "     try {",
                "       NotifDefaultAddressTable ndat = schema.notifDefaultAddress();",
                "-      NotifDefaultAddressRow newRow =",
                "-          new NotifDefaultAddressRow(-1, aUserId, aNotificationAddressId);",
                "+      NotifDefaultAddressRow newRow = new NotifDefaultAddressRow(-1, Integer.valueOf(aUserId),",
                "+          Integer.valueOf(aNotificationAddressId));",
                "       ndat.create(newRow);",
                "@@ -415,15 +306,16 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   @Override",
                "-  public void savePreferences(int aUserId, int aInstanceId, int aMessageType, int aDestinationId)",
                "-      throws NotificationException {",
                "-",
                "+  public void savePreferences(final String aUserId, final int instanceLocalId,",
                "+      final int aMessageType, final String notifAddressId) throws NotificationException {",
                "     try {",
                "+      int uId = Integer.parseInt(aUserId);",
                "       NotifPreferenceTable npt = schema.notifPreference();",
                "-      if (aMessageType == -1) {",
                "-        aMessageType = NotificationParameters.NORMAL;",
                "+      int messageType = aMessageType;",
                "+      if (messageType == -1) {",
                "+        messageType = NotificationParameters.PRIORITY_NORMAL;",
                "       }",
                "-      NotifPreferenceRow npr = npt.getByUserIdAndComponentInstanceIdAndMessageType(aUserId,",
                "-          aInstanceId, aMessageType);",
                "-",
                "-      // -1 destination par d\u00c3\u00a9faut",
                "-      if (aDestinationId == -1) {",
                "+      NotifPreferenceRow npr =",
                "+          npt.getByUserIdAndComponentInstanceIdAndMessageType(uId, instanceLocalId, messageType);",
                "+      int nId = Integer.parseInt(notifAddressId);",
                "+      if (nId == BuiltInNotifAddress.DEFAULT.getId()) {",
                "+        // it is the default address",
                "         if (npr != null) {",
                "@@ -432,15 +324,10 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       } else {",
                "-",
                "-        // Si pas de pr\u00c3\u00a9c\u00c3\u00a9dente destination pour ce user, cet instance et ce",
                "-        // type",
                "         if (npr == null) {",
                "-",
                "-          // on le cr\u00c3\u00a9er",
                "-          npr = new NotifPreferenceRow(-1, aDestinationId, aInstanceId,",
                "-              aUserId, aMessageType);",
                "+          // if no such previously existing preference, we create it.",
                "+          npr = new NotifPreferenceRow(-1, nId, instanceLocalId, uId, messageType);",
                "         } else {",
                "-          npr.setNotifAddressId(aDestinationId);",
                "+          npr.setNotifAddressId(nId);",
                "         }",
                "-        // Modifie ou cr\u00c3\u00a9er l'enregistrement selon le cas",
                "+        // update or save it according to the case.",
                "         npt.save(npr);",
                "@@ -450,3 +337,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "           \"Cannot save the notification preferences of the user \" + aUserId +",
                "-              \" for the component instance \" + aInstanceId, e);",
                "+              \" for the component instance \" + instanceLocalId, e);",
                "     }",
                "@@ -454,14 +341,11 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  public void saveNotifAddress(int aNotificationAddressId, int aUserId, String aNotifName,",
                "-      int aChannelId, String aAddress, String aUsage) throws NotificationException {",
                "-",
                "+  @Override",
                "+  public void saveNotifAddress(final NotificationAddress notificationAddress)",
                "+      throws NotificationException {",
                "     try {",
                "-      NotifAddressTable nat = schema.notifAddress();",
                "-      if (aUsage == null) {",
                "-        aUsage = NotificationParameters.USAGE_PRO;",
                "-      }",
                "-",
                "-      NotifAddressRow row = new NotifAddressRow(aNotificationAddressId,",
                "-          aUserId, aNotifName, aChannelId, aAddress, aUsage, 0);",
                "-",
                "+      final NotifAddressTable nat = schema.notifAddress();",
                "+      final NotifAddressRow row =",
                "+          new NotifAddressRow(notificationAddress.getRawId(), notificationAddress.getUserId(),",
                "+              notificationAddress.getName(), notificationAddress.getRawChannelId(),",
                "+              notificationAddress.getAddress(), notificationAddress.getUsage(), 0);",
                "       nat.save(row);",
                "@@ -469,4 +353,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       throw new NotificationException(",
                "-          \"Cannot save the address \" + aNotificationAddressId + FOR_THE_USER + aUserId +",
                "-              \" with as name \" + aNotifName + \" and for the channel \" + aChannelId, e);",
                "+          \"Cannot save the address \" + notificationAddress.getId() + FOR_THE_USER +",
                "+              notificationAddress.getUserId() + \" with as name \" + notificationAddress.getName() +",
                "+              \" and for the channel \" + notificationAddress.getChannelId(), e);",
                "     }",
                "@@ -475,7 +360,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   @Override",
                "-  public void deletePreference(int aPreferenceId) throws NotificationException {",
                "-",
                "+  public void deletePreference(final String aPreferenceId) throws NotificationException {",
                "     try {",
                "       NotifPreferenceTable npt = schema.notifPreference();",
                "-      npt.delete(aPreferenceId);",
                "+      npt.delete(Integer.parseInt(aPreferenceId));",
                "     } catch (SQLException e) {",
                "@@ -487,9 +371,8 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   @Override",
                "-  public void deleteNotifAddress(int aNotificationAddressId) throws NotificationException {",
                "-",
                "+  public void deleteNotifAddress(final String aNotificationAddressId) throws NotificationException {",
                "     try {",
                "+      List<NotifChannel> channels = getDefaultNotificationChannels();",
                "       NotifAddressTable nat = schema.notifAddress();",
                "-",
                "-      List<Integer> defaultAddresses = getDefaultNotificationAddresses();",
                "-      nat.deleteAndPropagate(aNotificationAddressId, defaultAddresses.get(0));",
                "+      nat.deleteAndPropagate(Integer.parseInt(aNotificationAddressId),",
                "+          channels.get(0).getMediaType().getId());",
                "     } catch (SQLException e) {",
                "@@ -501,7 +384,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   @Override",
                "-  public void deleteAllAddress(int userId) throws NotificationException {",
                "-",
                "+  public void deleteAllDefaultAddress(final String userId) throws NotificationException {",
                "     try {",
                "       NotifDefaultAddressTable nat = schema.notifDefaultAddress();",
                "-      nat.dereferenceUserId(userId);",
                "+      nat.dereferenceUserId(Integer.valueOf(userId));",
                "     } catch (SQLException e) {",
                "@@ -512,19 +394,12 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * Send a test message to the given notification address Id",
                "-   * @param aNotificationAddressId of the table ST_NotifAddress row to send notification to.",
                "-   */",
                "   @Override",
                "-  public void testNotifAddress(int aNotificationAddressId, int aUserId)",
                "+  public void testNotifAddress(final String addressId, final String aUserId)",
                "       throws NotificationException {",
                "-    NotificationData nd;",
                "-    NotificationParameters params = new NotificationParameters();",
                "-",
                "     try {",
                "-      params.iMediaType = aNotificationAddressId;",
                "-      params.sTitle = multilang.getString(\"testMsgTitle\");",
                "-      params.sMessage = multilang.getString(\"testMsgBody\");",
                "-      params.iFromUserId = aUserId;",
                "-      // TODO : plusieurs \"nd\" \u00c3\u00a0 cr\u00c3\u00a9er et \u00c3\u00a0 ajouter au \"ns\"",
                "-      nd = createNotificationData(params, Integer.toString(aUserId));",
                "+      NotificationParameters params = new NotificationParameters();",
                "+      params.setAddressId(Integer.parseInt(addressId))",
                "+          .setTitle(multilang.getString(\"testMsgTitle\"))",
                "+          .setMessage(multilang.getString(\"testMsgBody\"))",
                "+          .setFromUserId(Integer.parseInt(aUserId));",
                "+      NotificationData nd = createNotificationData(params, aUserId);",
                "       server.addNotification(nd);",
                "@@ -533,4 +408,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       throw new NotificationException(",
                "-          \"Cannot test the notification address \" + aNotificationAddressId + OF_THE_USER + aUserId,",
                "-          e);",
                "+          \"Cannot test the notification address \" + addressId + OF_THE_USER + aUserId, e);",
                "     }",
                "@@ -539,3 +413,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   @Override",
                "-  public void notifyUsers(NotificationParameters params, String[] userIds)",
                "+  public void notifyUsers(final NotificationParameters params, final Collection<String> userIds)",
                "       throws NotificationException {",
                "@@ -543,28 +417,22 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     // Then notify himself that he cant notify anyone",
                "-    if (UserAccessLevel.GUEST.equals(getUserAccessLevel(params.iFromUserId))) {",
                "-      params.sMessage =",
                "-          multilang.getString(\"guestNotAllowedBody1\") + \"<br>\" + params.sTitle + HTML_BREAK_LINES +",
                "-              multilang.getString(\"guestNotAllowedBody2\");",
                "-      params.sTitle = multilang.getString(\"guestNotAllowedTitle\");",
                "-      params.iMessagePriority = NotificationParameters.NORMAL;",
                "-      params.iMediaType = NotificationParameters.ADDRESS_BASIC_POPUP;",
                "-      params.iComponentInstance = -1;",
                "-      userIds = new String[1];",
                "-      userIds[0] = Integer.toString(params.iFromUserId);",
                "+    final Collection<String> senderIds;",
                "+    if (UserAccessLevel.GUEST.equals(getUserAccessLevel(params.getFromUserId()))) {",
                "+      params.setMessage(multilang.getString(\"guestNotAllowedBody1\") + \"<br>\" + params.getTitle() +",
                "+          HTML_BREAK_LINES + multilang.getString(\"guestNotAllowedBody2\"))",
                "+          .setTitle(multilang.getString(\"guestNotAllowedTitle\"))",
                "+          .setMessagePriority(NotificationParameters.PRIORITY_NORMAL)",
                "+          .setAddressId(BuiltInNotifAddress.BASIC_POPUP.getId())",
                "+          .setComponentInstance(-1);",
                "+      senderIds = new ArrayList<>(1);",
                "+      senderIds.add(String.valueOf(params.getFromUserId()));",
                "+    } else {",
                "+      senderIds = userIds;",
                "     }",
                "-    // First Verify that the title and the message are not too long...",
                "-    if (params.sTitle == null) {",
                "-      params.sTitle = \"\";",
                "-    } else if (params.sTitle.length() >= NotificationParameters.MAX_SIZE_TITLE) {",
                "-      throw new NotificationException(\"The title is too long. It exceeds the threshold \" +",
                "-          NotificationParameters.MAX_SIZE_TITLE);",
                "-    }",
                "-    if (params.sMessage == null) {",
                "-      params.sMessage = \"\";",
                "-    }",
                "+    // First Verify that the title is not too long...",
                "+    checkTitleLength(params);",
                "     try {",
                "-      params.traceObject();",
                "-      for (String userId : userIds) {",
                "+      params.trace();",
                "+      for (String userId : senderIds) {",
                "         doNewDelayedNotifications(params, userId);",
                "@@ -577,2 +445,9 @@ public class DefaultNotificationManager extends AbstractNotification",
                "+  private void checkTitleLength(final NotificationParameters params) throws NotificationException {",
                "+    if (params.isTitleExceedsMaxSize()) {",
                "+      throw new NotificationException(\"The title is too long. It exceeds the threshold \" +",
                "+          NotificationParameters.MAX_SIZE_TITLE);",
                "+    }",
                "+  }",
                "+",
                "   private void doNewDelayedNotifications(final NotificationParameters params, final String userId)",
                "@@ -594,14 +469,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     // Force media type for external users",
                "-    params.iMediaType = NotificationParameters.ADDRESS_BASIC_SMTP_MAIL;",
                "+    params.setAddressId(BuiltInNotifAddress.BASIC_SMTP.getId());",
                "-    // First Verify that the title and the message are not too long...",
                "-    if (params.sTitle == null) {",
                "-      params.sTitle = \"\";",
                "-    } else if (params.sTitle.length() >= NotificationParameters.MAX_SIZE_TITLE) {",
                "-      throw new NotificationException(\"The title is too long. It exceeds the threshold \" +",
                "-          NotificationParameters.MAX_SIZE_TITLE);",
                "-    }",
                "-    if (params.sMessage == null) {",
                "-      params.sMessage = \"\";",
                "-    }",
                "+    // First Verify that the title is not too long...",
                "+    checkTitleLength(params);",
                "     try {",
                "@@ -617,8 +484,2 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * Gets the user recipients from a group specified by a given identifier. User that has not an",
                "-   * activated state is not taken into account, so this kind of user is not included into the",
                "-   * returned container.",
                "-   * @throws NotificationException",
                "-   */",
                "   @Override",
                "@@ -644,4 +505,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  @Override",
                "-  public String getComponentFullName(String compInst, String separator, boolean isPathToComponent)",
                "+  private String getComponentFullName(String compInst, String separator, boolean isPathToComponent)",
                "       throws NotificationException {",
                "@@ -670,8 +530,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  private String getUserEmail(int userId) {",
                "+  private String getUserEmail(final String userId) {",
                "     String valret = \"\";",
                "-    if (userId > -1) {",
                "       try {",
                "-        UserDetail uDetail =",
                "-            AdministrationServiceProvider.getAdminService().getUserDetail(Integer.toString(userId));",
                "+        UserDetail uDetail = AdministrationServiceProvider.getAdminService().getUserDetail(userId);",
                "         valret = uDetail.geteMail();",
                "@@ -680,3 +538,2 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       }",
                "-    }",
                "     return valret;",
                "@@ -713,3 +570,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  private Properties notifPreferencesRowToProperties(int aUserId, NotifPreferenceRow npr,",
                "+  private Properties notifPreferencesRowToProperties(final String aUserId, NotifPreferenceRow npr,",
                "       boolean canEdit, boolean canDelete, boolean canTest, boolean isDefault)",
                "@@ -721,3 +578,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-    params.iMediaType = npr.getNotifAddressId();",
                "+    params.setAddressId(npr.getNotifAddressId());",
                "     nar = getNotifAddressRow(params, aUserId);",
                "@@ -730,5 +587,9 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     p.setProperty(\"priorityId\", String.valueOf(npr.getMessageType()));",
                "-    p.setProperty(\"priority\",",
                "-        getSureString(multilang.getString(MESSAGE_PRIORITY + npr.getMessageType())));",
                "+    p.setProperty(\"priority\", getSureString(multilang.getString(MESSAGE_PRIORITY + npr.getMessageType())));",
                "+    return setCommonNotifPrefsProperties(canEdit, canDelete, canTest, isDefault, p);",
                "+  }",
                "+  @NotNull",
                "+  private Properties setCommonNotifPrefsProperties(final boolean canEdit, final boolean canDelete,",
                "+      final boolean canTest, final boolean isDefault, final Properties p) {",
                "     p.setProperty(\"canEdit\", String.valueOf(canEdit));",
                "@@ -747,4 +608,11 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     int channelId = nar.getNotifChannelId();",
                "-    int id = nar.getId();",
                "-    String theAddress = getSureString(nar.getAddress());",
                "+    int addressId = nar.getId();",
                "+    final String addressValue;",
                "+    if ((addressId == BuiltInNotifAddress.BASIC_POPUP.getId()) ||",
                "+        (addressId == BuiltInNotifAddress.BASIC_SILVERMAIL.getId())) {",
                "+      // in this case, the addess value is the user full name",
                "+      addressValue = getUserFullName(Integer.parseInt(getSureString(nar.getAddress())));",
                "+    } else {",
                "+      addressValue = getSureString(nar.getAddress());",
                "+    }",
                "@@ -753,4 +621,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     NotifChannelRow crow = nct.getNotifChannel(channelId);",
                "-",
                "-    p.setProperty(\"id\", String.valueOf(id));",
                "+    p.setProperty(\"id\", String.valueOf(addressId));",
                "+    p.setProperty(\"address\", addressValue);",
                "     p.setProperty(\"name\", getSureString(nar.getNotifName()));",
                "@@ -761,33 +629,11 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     p.setProperty(\"usage\", getSureString(multilang.getString(getSureString(nar.getUsage()))));",
                "-    if ((id == NotificationParameters.ADDRESS_BASIC_POPUP)",
                "-        || (id == NotificationParameters.ADDRESS_BASIC_SILVERMAIL)) {",
                "-      theAddress = getUserFullName(Integer.parseInt(theAddress));",
                "-    }",
                "-    p.setProperty(\"address\", theAddress);",
                "-",
                "-    p.setProperty(\"canEdit\", String.valueOf(canEdit));",
                "-    p.setProperty(\"canDelete\", String.valueOf(canDelete));",
                "-    p.setProperty(\"canTest\", String.valueOf(canTest));",
                "-    p.setProperty(\"isDefault\", String.valueOf(isDefault));",
                "-",
                "-    return p;",
                "+    return setCommonNotifPrefsProperties(canEdit, canDelete, canTest, isDefault, p);",
                "   }",
                "-  private NotifAddressRow getNotifAddressRow(NotificationParameters params, int aUserId)",
                "-      throws SQLException {",
                "-    // TODO : fonction \u00c3\u00a0 garder ???",
                "+  private NotifAddressRow getNotifAddressRow(final NotificationParameters params,",
                "+      final String aUserId) throws SQLException, NotificationException {",
                "     NotifAddressRow nar;",
                "     int addressId = getAddressId(params, aUserId);",
                "-",
                "-    if (addressId == NotificationParameters.ADDRESS_DEFAULT) {",
                "-      NotifDefaultAddressTable ndat = schema.notifDefaultAddress();",
                "-      NotifDefaultAddressRow[] ndars;",
                "-",
                "-      ndars = ndat.getAllByUserId(aUserId);",
                "-      if (ndars.length > 0) {",
                "-        addressId = ndars[0].getNotifAddressId();",
                "-      } else {",
                "-        List<Integer> defaultAddresses = getDefaultNotificationAddresses();",
                "-        addressId = defaultAddresses.get(0);",
                "-      }",
                "+    if (addressId == BuiltInNotifAddress.DEFAULT.getId()) {",
                "+      addressId = Integer.parseInt(getDefaultAddressId(aUserId));",
                "     }",
                "@@ -798,39 +644,27 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  private NotifAddressRow getNotifAddressRow(final NotificationParameters params, final int aUserId,",
                "-      final int addressId) throws SQLException {",
                "+  private NotifAddressRow getNotifAddressRow(final NotificationParameters params,",
                "+      final String aUserId, final int addressId) throws SQLException {",
                "     final NotifAddressRow nar;",
                "-    switch (addressId) {",
                "-      case NotificationParameters.ADDRESS_BASIC_POPUP:",
                "-        nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_POPUP, aUserId,",
                "-            multilang.getString(\"defaultAddressPOPUP\"), NotifChannel.POPUP.getId(),",
                "-            Integer.toString(aUserId), NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "-        break;",
                "-      case NotificationParameters.ADDRESS_BASIC_REMOVE:",
                "-        nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_REMOVE, aUserId,",
                "+    if (addressId == BuiltInNotifAddress.BASIC_POPUP.getId()) {",
                "+      nar = new NotifAddressRow(addressId, aUserId, multilang.getString(\"defaultAddressPOPUP\"),",
                "+          NotifChannel.POPUP.getId(), aUserId, NotificationParameters.USAGE_PRO,",
                "+          params.getMessagePriority());",
                "+    } else if (addressId == BuiltInNotifAddress.BASIC_REMOVE.getId()) {",
                "+      nar = new NotifAddressRow(addressId, aUserId,",
                "             multilang.getString(\"defaultAddressREMOVE\"), NotifChannel.REMOVE.getId(), \"\",",
                "-            NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "-        break;",
                "-      case NotificationParameters.ADDRESS_BASIC_SILVERMAIL:",
                "-        nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SILVERMAIL, aUserId,",
                "+          NotificationParameters.USAGE_PRO, params.getMessagePriority());",
                "+    } else if (addressId == BuiltInNotifAddress.BASIC_SILVERMAIL.getId()) {",
                "+      nar = new NotifAddressRow(addressId, aUserId,",
                "             multilang.getString(\"defaultAddressSILVERMAIL\"), NotifChannel.SILVERMAIL.getId(),",
                "-            Integer.toString(aUserId), NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "-        break;",
                "-      case NotificationParameters.ADDRESS_BASIC_SMTP_MAIL:",
                "-        nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL, aUserId,",
                "+          aUserId, NotificationParameters.USAGE_PRO, params.getMessagePriority());",
                "+    } else if (addressId == BuiltInNotifAddress.BASIC_SMTP.getId()) {",
                "+      nar = new NotifAddressRow(addressId, aUserId,",
                "             multilang.getString(\"defaultAddressSPMAIL\"), NotifChannel.SMTP.getId(),",
                "-            getUserEmail(aUserId), NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "-        break;",
                "-      case NotificationParameters.ADDRESS_BASIC_SERVER:",
                "-        nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SERVER, aUserId,",
                "-            multilang.getString(\"defaultAddressSERVER\"), NotifChannel.SERVER.getId(),",
                "-            Integer.toString(aUserId), NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "-        break;",
                "-      case NotificationParameters.ADDRESS_BASIC_COMMUNICATION_USER:",
                "-        nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_POPUP, aUserId,",
                "-            multilang.getString(\"defaultAddressPOPUP\"), NotifChannel.POPUP.getId(),",
                "-            Integer.toString(aUserId), NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "-        break;",
                "-      default:",
                "-        nar = schema.notifAddress().getNotifAddress(addressId);",
                "-        break;",
                "+          getUserEmail(aUserId), NotificationParameters.USAGE_PRO, params.getMessagePriority());",
                "+    } else if (addressId == BuiltInNotifAddress.BASIC_SERVER.getId()) {",
                "+      nar = new NotifAddressRow(addressId, aUserId, multilang.getString(\"defaultAddressSERVER\"),",
                "+          NotifChannel.SERVER.getId(), aUserId, NotificationParameters.USAGE_PRO,",
                "+          params.getMessagePriority());",
                "+    } else {",
                "+      nar = schema.notifAddress().getNotifAddress(addressId);",
                "     }",
                "@@ -839,24 +673,15 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  private List<NotifAddressRow> getAllNotifAddressRow(NotificationParameters params, int aUserId)",
                "-      throws SQLException {",
                "-    int[] addressIds = new int[1];",
                "-    int addressId = getAddressId(params, aUserId);",
                "-",
                "-    if (addressId == NotificationParameters.ADDRESS_DEFAULT) {",
                "+  private List<NotifAddressRow> getAllNotifAddressRow(final NotificationParameters params,",
                "+      final String aUserId) throws SQLException {",
                "+    final Stream<Integer> addressIdStream;",
                "+    final int addressId = getAddressId(params, aUserId);",
                "+    if (addressId == BuiltInNotifAddress.DEFAULT.getId()) {",
                "       NotifDefaultAddressTable ndat = schema.notifDefaultAddress();",
                "-      NotifDefaultAddressRow[] ndars = null;",
                "-",
                "-      ndars = ndat.getAllByUserId(aUserId);",
                "-",
                "+      NotifDefaultAddressRow[] ndars = ndat.getAllByUserId(Integer.parseInt(aUserId));",
                "       if (ndars.length > 0) {",
                "-        addressIds = new int[ndars.length];",
                "-        for (int i = 0; i < ndars.length; i++) {",
                "-          addressIds[i] = ndars[i].getNotifAddressId();",
                "-        }",
                "+        addressIdStream = Stream.of(ndars).map(NotifDefaultAddressRow::getNotifAddressId);",
                "       } else {",
                "-        List<Integer> defaultAddresses = getDefaultNotificationAddresses();",
                "-        addressIds = new int[defaultAddresses.size()];",
                "-        for (int i = 0; i < defaultAddresses.size(); i++) {",
                "-          addressIds[i] = defaultAddresses.get(i);",
                "-        }",
                "+        addressIdStream = getDefaultNotificationChannels().stream()",
                "+            .map(NotifChannel::getMediaType)",
                "+            .map(BuiltInNotifAddress::getId);",
                "       }",
                "@@ -865,25 +690,29 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       // notification avec choix du canal",
                "-      addressIds[0] = addressId;",
                "+      addressIdStream = Stream.of(addressId);",
                "     }",
                "-    List<NotifAddressRow> nars = new ArrayList<>(addressIds.length);",
                "-    for (int curAddressId : addressIds) {",
                "-      NotifAddressRow curNar = getNotifAddressRow(params, aUserId, curAddressId);",
                "-      nars.add(curNar);",
                "+    try {",
                "+      return addressIdStream.map(m -> {",
                "+        try {",
                "+          return getNotifAddressRow(params, aUserId, m);",
                "+        } catch (SQLException e) {",
                "+          throw new SilverpeasRuntimeException(e);",
                "+        }",
                "+      }).collect(Collectors.toList());",
                "+    } catch (SilverpeasRuntimeException e) {",
                "+      throw (SQLException) e.getCause();",
                "     }",
                "-    return nars;",
                "   }",
                "-  private int getAddressId(final NotificationParameters params, final int aUserId)",
                "+  private int getAddressId(final NotificationParameters params, final String aUserId)",
                "       throws SQLException {",
                "-    int addressId = params.iMediaType;",
                "-    if (addressId == NotificationParameters.ADDRESS_COMPONENT_DEFINED) {",
                "-      addressId = NotificationParameters.ADDRESS_DEFAULT;",
                "+    int addressId = params.getAddressId();",
                "+    if (params.isAddressDefinedByComponent()) {",
                "+      addressId = BuiltInNotifAddress.DEFAULT.getId();",
                "       // In case of problems, try with the default value",
                "-      if (params.iComponentInstance != -1) {",
                "+      if (params.isComponentInstanceDefined()) {",
                "         NotifPreferenceRow npr;",
                "-",
                "         npr = schema.notifPreference()",
                "-            .getByUserIdAndComponentInstanceIdAndMessageType(aUserId, params.iComponentInstance,",
                "-                params.iMessagePriority);",
                "+            .getByUserIdAndComponentInstanceIdAndMessageType(Integer.valueOf(aUserId),",
                "+                params.getComponentInstance(), params.getMessagePriority());",
                "         if (npr != null) {",
                "@@ -897,3 +726,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   private NotificationData createNotificationData(NotificationParameters params, String aUserId)",
                "-      throws SQLException {",
                "+      throws SQLException, NotificationException {",
                "     StringBuilder theMessage = new StringBuilder(100);",
                "@@ -901,3 +730,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-    NotifAddressRow nar = getNotifAddressRow(params, Integer.parseInt(aUserId));",
                "+    NotifAddressRow nar = getNotifAddressRow(params, aUserId);",
                "     NotifChannelRow ncr = schema.notifChannel().getNotifChannel(nar.getNotifChannelId());",
                "@@ -917,5 +746,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     // Set Url parameter",
                "-    if (StringUtil.isDefined(params.sURL)) {",
                "-      theExtraParams.put(URL, (params.sURL.startsWith(\"http\") ? params.sURL :",
                "-          getUserAutoRedirectURL(aUserId, params.sURL)));",
                "+    if (StringUtil.isDefined(params.getURL())) {",
                "+      theExtraParams.put(URL, (params.getURL().startsWith(\"http\") ? params.getURL() :",
                "+          getUserAutoRedirectURL(aUserId, params.getURL())));",
                "     }",
                "@@ -926,4 +755,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     // Set sessionId parameter",
                "-    if (StringUtil.isDefined(params.sSessionId)) {",
                "-      theExtraParams.put(SESSIONID, params.sSessionId);",
                "+    if (StringUtil.isDefined(params.getSessionId())) {",
                "+      theExtraParams.put(SESSIONID, params.getSessionId());",
                "     }",
                "@@ -931,8 +760,8 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     // Set date parameter",
                "-    if (params.dDate != null) {",
                "-      theExtraParams.put(DATE, params.dDate);",
                "+    if (params.getDate() != null) {",
                "+      theExtraParams.put(DATE, params.getDate());",
                "     }",
                "-    if (params.sLanguage != null) {",
                "-      theExtraParams.put(LANGUAGE, params.sLanguage);",
                "+    if (params.getLanguage() != null) {",
                "+      theExtraParams.put(LANGUAGE, params.getLanguage());",
                "     }",
                "@@ -945,14 +774,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-    theMessage.append(params.sMessage);",
                "+    theMessage.append(params.getMessage());",
                "     nd.setMessage(theMessage.toString());",
                "-    nd.setAnswerAllowed(params.bAnswerAllowed);",
                "-",
                "-    // Cas de la messagerie instatan\u00c3\u00a9e",
                "-    if (params.iMediaType == NotificationParameters.ADDRESS_BASIC_COMMUNICATION_USER) {",
                "-      nd.setComment(COMMUNICATION);// attribut",
                "-      // comment non",
                "-      // utilis\u00c3\u00a9",
                "-    }",
                "-",
                "+    nd.setAnswerAllowed(params.isAnswerAllowed());",
                "@@ -964,7 +785,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     if (\"Y\".equalsIgnoreCase(ncr.getSubjectAvailable())) {",
                "-      theExtraParams.put(SUBJECT, params.sTitle);",
                "-    } else if (params.iFromUserId < 0) {",
                "-      theMessage.append(multilang.getString(SUBJECT))",
                "-          .append(\" : \")",
                "-          .append(params.sTitle)",
                "+      theExtraParams.put(SUBJECT, params.getTitle());",
                "+    } else if (params.getFromUserId() < 0) {",
                "+      theMessage.append(multilang.getString(SUBJECT)).append(\" : \").append(params.getTitle())",
                "           .append(HTML_BREAK_LINES);",
                "@@ -977,4 +796,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     if (FROM_UID.equalsIgnoreCase(ncr.getFromAvailable())) {",
                "-      theExtraParams.put(FROM, Integer.toString(params.iFromUserId));",
                "-      nd.setSenderId(Integer.toString(params.iFromUserId));",
                "+      theExtraParams.put(FROM, Integer.toString(params.getFromUserId()));",
                "+      nd.setSenderId(Integer.toString(params.getFromUserId()));",
                "@@ -996,5 +815,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-    NotifAddressRow nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL, -1,",
                "+    NotifAddressRow nar = new NotifAddressRow(BuiltInNotifAddress.BASIC_SMTP.getId(), \"-1\",",
                "         multilang.getString(\"defaultAddressSPMAIL\"), NotifChannel.SMTP.getId(), email,",
                "-        NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "+        NotificationParameters.USAGE_PRO, params.getMessagePriority());",
                "     NotifChannelRow ncr = schema.notifChannel().getNotifChannel(nar.getNotifChannelId());",
                "@@ -1012,5 +831,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     setSenderEmail(params, theExtraParams, senderName);",
                "-    if (StringUtil.isDefined(params.sURL)) {",
                "-      theExtraParams.put(URL, params.sURL);",
                "-      theExtraParams.put(LINKLABEL, params.sLinkLabel);",
                "+    if (StringUtil.isDefined(params.getURL())) {",
                "+      theExtraParams.put(URL, params.getURL());",
                "+      theExtraParams.put(LINKLABEL, params.getLinkLabel());",
                "     }",
                "@@ -1021,4 +840,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     // Set sessionId parameter",
                "-    if (params.sSessionId != null && params.sSessionId.length() > 0) {",
                "-      theExtraParams.put(SESSIONID, params.sSessionId);",
                "+    if (StringUtil.isDefined(params.getSessionId())) {",
                "+      theExtraParams.put(SESSIONID, params.getSessionId());",
                "     }",
                "@@ -1026,8 +845,8 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     // Set date parameter",
                "-    if (params.dDate != null) {",
                "-      theExtraParams.put(DATE, params.dDate);",
                "+    if (params.getDate() != null) {",
                "+      theExtraParams.put(DATE, params.getDate());",
                "     }",
                "-    if (params.sLanguage != null) {",
                "-      theExtraParams.put(LANGUAGE, params.sLanguage);",
                "+    if (params.getLanguage() != null) {",
                "+      theExtraParams.put(LANGUAGE, params.getLanguage());",
                "     }",
                "@@ -1040,6 +859,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-    theMessage.append(params.sMessage);",
                "+    theMessage.append(params.getMessage());",
                "     nd.setMessage(theMessage.toString());",
                "-    nd.setAnswerAllowed(params.bAnswerAllowed);",
                "+    nd.setAnswerAllowed(params.isAnswerAllowed());",
                "@@ -1051,6 +870,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       final Map<String, Object> theExtraParams) {",
                "-    if (StringUtil.isDefined(params.sSource)) {",
                "-      theExtraParams.put(SOURCE, params.sSource);",
                "+    if (StringUtil.isDefined(params.getSource())) {",
                "+      theExtraParams.put(SOURCE, params.getSource());",
                "     } else {",
                "-      if (params.iComponentInstance != -1) {",
                "+      if (params.isComponentInstanceDefined()) {",
                "         try {",
                "@@ -1058,3 +877,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "           // component's label",
                "-          theExtraParams.put(SOURCE, getComponentFullName(\"\" + params.iComponentInstance));",
                "+          theExtraParams.put(SOURCE, getComponentFullName(\"\" + params.getComponentInstance()));",
                "         } catch (Exception e) {",
                "@@ -1069,4 +888,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     String fromEmail = senderName;",
                "-    if (!StringUtil.isValidEmailAddress(fromEmail) || params.iFromUserId >= 0) {",
                "-      fromEmail = getUserEmail(params.iFromUserId);",
                "+    if (!StringUtil.isValidEmailAddress(fromEmail) || params.getFromUserId() >= 0) {",
                "+      fromEmail = getUserEmail(String.valueOf(params.getFromUserId()));",
                "       if (!StringUtil.isDefined(fromEmail)) {",
                "@@ -1080,3 +899,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       NotificationParameters params, String aUserId) throws SQLException {",
                "-    final List<NotifAddressRow> nars = getAllNotifAddressRow(params, Integer.parseInt(aUserId));",
                "+    final List<NotifAddressRow> nars = getAllNotifAddressRow(params, aUserId);",
                "     final List<DelayedNotificationData> dnds = new ArrayList<>(nars.size());",
                "@@ -1111,5 +930,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       theExtraParams.put(SERVERURL, getUserAutoRedirectSilverpeasServerURL(aUserId));",
                "-      if (StringUtil.isDefined(params.sURL)) {",
                "-        theExtraParams.put(URL, computeURL(aUserId, params.sURL));",
                "-        theExtraParams.put(LINKLABEL, params.sLinkLabel);",
                "+      if (StringUtil.isDefined(params.getURL())) {",
                "+        theExtraParams.put(URL, computeURL(aUserId, params.getURL()));",
                "+        theExtraParams.put(LINKLABEL, params.getLinkLabel());",
                "       }",
                "@@ -1120,4 +939,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       // Set sessionId parameter",
                "-      if (StringUtil.isDefined(params.sSessionId)) {",
                "-        theExtraParams.put(SESSIONID, params.sSessionId);",
                "+      if (StringUtil.isDefined(params.getSessionId())) {",
                "+        theExtraParams.put(SESSIONID, params.getSessionId());",
                "       }",
                "@@ -1125,8 +944,8 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       // Set date parameter",
                "-      if (params.dDate != null) {",
                "-        theExtraParams.put(DATE, params.dDate);",
                "+      if (params.getDate() != null) {",
                "+        theExtraParams.put(DATE, params.getDate());",
                "       }",
                "-      if (params.sLanguage != null) {",
                "-        theExtraParams.put(LANGUAGE, params.sLanguage);",
                "+      if (params.getLanguage() != null) {",
                "+        theExtraParams.put(LANGUAGE, params.getLanguage());",
                "       }",
                "@@ -1139,13 +958,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-      theMessage.append(params.sMessage);",
                "+      theMessage.append(params.getMessage());",
                "       notificationData.setMessage(theMessage.toString());",
                "-      notificationData.setAnswerAllowed(params.bAnswerAllowed);",
                "-",
                "-      // Cas de la messagerie instantan\u00c3\u00a9e",
                "-      if (params.iMediaType == NotificationParameters.ADDRESS_BASIC_COMMUNICATION_USER) {",
                "-        // attribut comment non utilis\u00c3\u00a9",
                "-        notificationData.setComment(COMMUNICATION);",
                "-      }",
                "-",
                "+      notificationData.setAnswerAllowed(params.isAnswerAllowed());",
                "     }",
                "@@ -1157,6 +969,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       final Map<String, Object> theExtraParams) {",
                "-    if (StringUtil.isDefined(params.sSource)) {",
                "-      theExtraParams.put(SOURCE, params.sSource);",
                "+    if (StringUtil.isDefined(params.getSource())) {",
                "+      theExtraParams.put(SOURCE, params.getSource());",
                "     } else {",
                "-      if (params.iComponentInstance != -1) {",
                "+      if (params.isComponentInstanceDefined()) {",
                "         try {",
                "@@ -1164,3 +976,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "           final String componentFullName =",
                "-              getComponentFullName(String.valueOf(params.iComponentInstance));",
                "+              getComponentFullName(String.valueOf(params.getComponentInstance()));",
                "           theExtraParams.put(SOURCE, componentFullName);",
                "@@ -1169,3 +981,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "             delayedNotificationData.getResource()",
                "-                .setResourceLocation(getComponentFullName(String.valueOf(params.iComponentInstance),",
                "+                .setResourceLocation(",
                "+                    getComponentFullName(String.valueOf(params.getComponentInstance()),",
                "                     NotificationResourceData.LOCATION_SEPARATOR, true));",
                "@@ -1183,13 +996,14 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       final NotifAddressRow curAddresseRow) {",
                "-    final DelayedNotificationData delayedNotificationData;",
                "-    delayedNotificationData = new DelayedNotificationData();",
                "+    final DelayedNotificationData delayedNotificationData = new DelayedNotificationData();",
                "     delayedNotificationData.setUserId(aUserId);",
                "-    delayedNotificationData.setAction(params.eAction);",
                "-    delayedNotificationData.setChannel(NotifChannel.decode(curAddresseRow.getNotifChannelId()));",
                "-    delayedNotificationData.setCreationDate(params.dDate);",
                "-    delayedNotificationData.setFromUserId(params.iFromUserId);",
                "-    delayedNotificationData.setLanguage(params.sLanguage);",
                "-    delayedNotificationData.setMessage(params.sOriginalExtraMessage);",
                "-    delayedNotificationData.setResource(params.nNotificationResourceData);",
                "-    delayedNotificationData.setSendImmediately(params.bSendImmediately);",
                "+    delayedNotificationData.setAction(params.getAction());",
                "+    delayedNotificationData.setChannel(NotifChannel.decode(curAddresseRow.getNotifChannelId())",
                "+        .orElseThrow(() -> new DecodingException(",
                "+            \"No such channel id: \" + curAddresseRow.getNotifChannelId())));",
                "+    delayedNotificationData.setCreationDate(params.getDate());",
                "+    delayedNotificationData.setFromUserId(params.getFromUserId());",
                "+    delayedNotificationData.setLanguage(params.getLanguage());",
                "+    delayedNotificationData.setMessage(params.getOriginalExtraMessage());",
                "+    delayedNotificationData.setResource(params.getNotificationResourceData());",
                "+    delayedNotificationData.setSendImmediately(params.isSendImmediately());",
                "     delayedNotificationData.setNotificationData(notificationData);",
                "@@ -1201,6 +1015,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     String senderName;",
                "-    if (params.iFromUserId < 0) {",
                "-      senderName = params.senderName;",
                "+    if (params.isFromUserIdDefined()) {",
                "+      senderName = params.getSenderName();",
                "     } else {",
                "-      senderName = getUserFullName(params.iFromUserId);",
                "+      senderName = getUserFullName(params.getFromUserId());",
                "     }",
                "@@ -1209,15 +1023,13 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  private boolean isDefaultAddress(int aDefaultAddressId, int aUserId,",
                "+  private boolean isDefaultNotifAddress(final int addressId, final String aUserId,",
                "       boolean isMultiChannelNotification) throws SQLException {",
                "     NotifDefaultAddressTable ndat = schema.notifDefaultAddress();",
                "-    NotifDefaultAddressRow[] ndars = null;",
                "-    boolean valret = false;",
                "-    ndars = ndat.getAllByUserId(aUserId);",
                "+    NotifDefaultAddressRow[] ndars = ndat.getAllByUserId(Integer.valueOf(aUserId));",
                "+    final boolean valret;",
                "     if (ndars.length > 0) {",
                "-      valret = checkDefaultAddress(aDefaultAddressId, isMultiChannelNotification, ndars, valret);",
                "+      valret = isDefaultNotifAddress(addressId, isMultiChannelNotification, ndars);",
                "     } else {",
                "-      List<Integer> defaultAdresses = getDefaultNotificationAddresses();",
                "-      if (defaultAdresses.contains(aDefaultAddressId)) {",
                "-        valret = true;",
                "-      }",
                "+      List<NotifChannel> channels = getDefaultNotificationChannels();",
                "+      valret =",
                "+          channels.stream().map(NotifChannel::getMediaType).anyMatch(m -> m.getId() == addressId);",
                "     }",
                "@@ -1227,15 +1039,9 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  private boolean checkDefaultAddress(final int aDefaultAddressId,",
                "-      final boolean isMultiChannelNotification, final NotifDefaultAddressRow[] ndars,",
                "-      boolean valret) {",
                "+  private boolean isDefaultNotifAddress(final int addressId,",
                "+      final boolean isMultiChannelNotification, final NotifDefaultAddressRow[] ndars) {",
                "+    final boolean valret;",
                "     if (!isMultiChannelNotification) {",
                "-      if (aDefaultAddressId == ndars[0].getNotifAddressId()) {",
                "-        valret = true;",
                "-      }",
                "+      valret = addressId == ndars[0].getNotifAddressId();",
                "     } else {",
                "-      for (NotifDefaultAddressRow ndar : ndars) {",
                "-        if (aDefaultAddressId == ndar.getNotifAddressId()) {",
                "-          valret = true;",
                "-        }",
                "-      }",
                "+      valret = Stream.of(ndars).anyMatch(ndar -> addressId == ndar.getNotifAddressId());",
                "     }",
                "@@ -1263,5 +1069,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "    */",
                "-  protected List<Integer> getDefaultNotificationAddresses() {",
                "+  List<NotifChannel> getDefaultNotificationChannels() {",
                "     return NotificationManagerSettings.getDefaultChannels();",
                "   }",
                "+",
                " }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "index acf59b969c..53427e8953 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "@@ -29,3 +29,3 @@ import org.silverpeas.core.i18n.I18NHelper;",
                " import org.silverpeas.core.notification.NotificationException;",
                "-import org.silverpeas.core.notification.user.client.constant.NotifMediaType;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                " import org.silverpeas.core.notification.user.client.model.SentNotificationInterface;",
                "@@ -65,3 +65,3 @@ public class NotificationSender implements java.io.Serializable {",
                "    */",
                "-  public NotificationSender(String instanceId) {",
                "+  public NotificationSender(final String instanceId) {",
                "     this.instanceId = ComponentInst.getComponentLocalId(instanceId);",
                "@@ -77,5 +77,5 @@ public class NotificationSender implements java.io.Serializable {",
                "    */",
                "-  public void notifyUser(NotificationMetaData metaData)",
                "+  public void notifyUser(final NotificationMetaData metaData)",
                "       throws NotificationException {",
                "-    notifyUser(NotifMediaType.COMPONENT_DEFINED.getId(), metaData);",
                "+    notifyUser(BuiltInNotifAddress.COMPONENT_DEFINED.getId(), metaData);",
                "   }",
                "@@ -83,5 +83,5 @@ public class NotificationSender implements java.io.Serializable {",
                "   /**",
                "-   * Sends in the given media type the notification as defined by the specified {@link NotificationMetaData}",
                "-   * instance.",
                "-   * @param aMediaType the media type in which the notification content has to be encoded.",
                "+   * Sends at the specified address the notification whose definition is given by the specified",
                "+   * {@link NotificationMetaData} instance.",
                "+   * @param addressId the unique identifier of an address at which the notification has to be sent.",
                "    * @param metaData the meta data of the notification. It defines the content of the notification",
                "@@ -89,5 +89,4 @@ public class NotificationSender implements java.io.Serializable {",
                "    * @throws NotificationException if an error occurs while sending the notification.",
                "-   *",
                "    */",
                "-  public void notifyUser(int aMediaType, NotificationMetaData metaData)",
                "+  public void notifyUser(final int addressId, final NotificationMetaData metaData)",
                "       throws NotificationException {",
                "@@ -103,3 +102,3 @@ public class NotificationSender implements java.io.Serializable {",
                "     if (languages.size() == 1) {",
                "-      sendNotification(recipientIds, metaData, aMediaType, languages.iterator().next());",
                "+      sendNotification(recipientIds, metaData, addressId, languages.iterator().next());",
                "     } else {",
                "@@ -116,3 +115,3 @@ public class NotificationSender implements java.io.Serializable {",
                "       for (final Map.Entry<String, Set<String>> entry : usersPerLanguage.entrySet()) {",
                "-        sendNotification(entry.getValue(), metaData, aMediaType, entry.getKey());",
                "+        sendNotification(entry.getValue(), metaData, addressId, entry.getKey());",
                "       }",
                "@@ -121,5 +120,5 @@ public class NotificationSender implements java.io.Serializable {",
                "     // send the notification to the external recipients who are declared in metaData",
                "-    sendNotification(Collections.emptySet(), metaData, aMediaType, I18NHelper.defaultLanguage);",
                "+    sendNotification(Collections.emptySet(), metaData, addressId, I18NHelper.defaultLanguage);",
                "-    if (metaData.isSendByAUser() && aMediaType != NotificationParameters.ADDRESS_BASIC_COMMUNICATION_USER) {",
                "+    if (metaData.isSendByAUser()) {",
                "       // save notification for history",
                "@@ -164,3 +163,3 @@ public class NotificationSender implements java.io.Serializable {",
                "    * send.",
                "-   * @param aMediaType the media type in which will be encoded the notification content.",
                "+   * @param addressId the unique identifier of the address at which the notification has to be sent.",
                "    * @param language the language in which the notification content will be written.",
                "@@ -169,12 +168,12 @@ public class NotificationSender implements java.io.Serializable {",
                "   private void sendNotification(final Collection<String> userIds,",
                "-      final NotificationMetaData metaData, final int aMediaType, final String language)",
                "+      final NotificationMetaData metaData, final int addressId, final String language)",
                "       throws NotificationException {",
                "-    final NotificationParameters params = getNotificationParameters(aMediaType, metaData);",
                "-    params.sTitle = metaData.getTitle(language);",
                "-    params.sLinkLabel = metaData.getLinkLabel(language);",
                "-    params.sMessage = metaData.getContent(language);",
                "-    params.sLanguage = language;",
                "+    final NotificationParameters params = getNotificationParameters(addressId, metaData);",
                "+    params.setTitle(metaData.getTitle(language))",
                "+        .setLinkLabel(metaData.getLinkLabel(language))",
                "+        .setMessage(metaData.getContent(language))",
                "+        .setLanguage(language);",
                "     if (!userIds.isEmpty()) {",
                "-      params.nNotificationResourceData = metaData.getNotificationResourceData(language);",
                "-      notificationManager.notifyUsers(params, userIds.toArray(new String[0]));",
                "+      params.setNotificationResourceData(metaData.getNotificationResourceData(language));",
                "+      notificationManager.notifyUsers(params, userIds);",
                "     } else if (CollectionUtil.isNotEmpty(metaData.getExternalRecipients())) {",
                "@@ -206,31 +205,29 @@ public class NotificationSender implements java.io.Serializable {",
                "-    params.iMessagePriority = metaData.getMessageType();",
                "-    params.dDate = metaData.getDate();",
                "-    params.sTitle = metaData.getTitle();",
                "-    params.sMessage = metaData.getContent();",
                "-    params.sSource = metaData.getSource();",
                "-    params.sURL = metaData.getLink();",
                "-    params.sSessionId = metaData.getSessionId();",
                "-    params.sOriginalExtraMessage = metaData.getOriginalExtraMessage();",
                "-    params.bSendImmediately = metaData.isSendImmediately();",
                "+    params.setMessagePriority(metaData.getMessageType())",
                "+        .setDate(metaData.getDate())",
                "+        .setTitle(metaData.getTitle())",
                "+        .setMessage(metaData.getContent())",
                "+        .setSource(metaData.getSource())",
                "+        .setURL(metaData.getLink())",
                "+        .setSessionId(metaData.getSessionId())",
                "+        .setOriginalExtraMessage(metaData.getOriginalExtraMessage())",
                "+        .setSendImmediately(metaData.isSendImmediately())",
                "+        .setAddressId(aMediaType)",
                "+        .setAnswerAllowed(metaData.isAnswerAllowed())",
                "+        .setAction(metaData.getAction());",
                "     if (instanceId != -1) {",
                "-      params.iComponentInstance = instanceId;",
                "+      params.setComponentInstance(instanceId);",
                "     } else {",
                "-      params.iComponentInstance = ComponentInst.getComponentLocalId(metaData.getComponentId());",
                "+      params.setComponentInstance(ComponentInst.getComponentLocalId(metaData.getComponentId()));",
                "     }",
                "-    params.iMediaType = aMediaType;",
                "-    params.bAnswerAllowed = metaData.isAnswerAllowed();",
                "     String sender = metaData.getSender();",
                "-    if (aMediaType == NotificationParameters.ADDRESS_BASIC_POPUP",
                "-        || aMediaType == NotificationParameters.ADDRESS_BASIC_COMMUNICATION_USER) {",
                "-      if (metaData.isAnswerAllowed() && StringUtil.isDefined(sender)) {",
                "-        params.iFromUserId = Integer.parseInt(metaData.getSender());",
                "+    if (aMediaType == BuiltInNotifAddress.BASIC_POPUP.getId()) {",
                "+      if (metaData.isAnswerAllowed() && StringUtil.isInteger(sender)) {",
                "+        params.setFromUserId(Integer.parseInt(metaData.getSender()));",
                "       }",
                "     } else if (StringUtil.isInteger(sender)) {",
                "-      params.iFromUserId = Integer.parseInt(metaData.getSender());",
                "+      params.setFromUserId(Integer.parseInt(metaData.getSender()));",
                "     } else {",
                "-      params.iFromUserId = -1;",
                "-      params.senderName = sender;",
                "+      params.setSenderName(sender);",
                "     }",
                "-    params.eAction = metaData.getAction();",
                "     return params;",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifAddressRow.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifAddressRow.java",
                "index 27138109d9..a30ee49b3c 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifAddressRow.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifAddressRow.java",
                "@@ -90,3 +90,14 @@ public class NotifAddressRow {",
                "-  public NotifAddressRow(int aId, int aUserId, String aNotifName,",
                "+  public NotifAddressRow(int aId, String aUserId, String aNotifName,",
                "+      int aNotifChannelId, String aAddress, String aUsage, int aPriority) {",
                "+    id = aId;",
                "+    userId = Integer.parseInt(aUserId);",
                "+    notifName = aNotifName;",
                "+    notifChannelId = aNotifChannelId;",
                "+    address = aAddress;",
                "+    usage = aUsage;",
                "+    priority = aPriority;",
                "+  }",
                "+",
                "+  NotifAddressRow(int aId, int aUserId, String aNotifName,",
                "       int aNotifChannelId, String aAddress, String aUsage, int aPriority) {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifAddressTable.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifAddressTable.java",
                "index 6470866da8..a6f21251e8 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifAddressTable.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifAddressTable.java",
                "@@ -66,4 +66,4 @@ public class NotifAddressTable extends AbstractTable<NotifAddressRow> {",
                "-  public static final String SELECT = \"select \";",
                "-  static final private String SELECT_ALL_NOTIFADDRESS_WITH_GIVEN_NOTIFCHANNELID = SELECT",
                "+  private static final String SELECT = \"select \";",
                "+  private static final String SELECT_ALL_NOTIFADDRESS_WITH_GIVEN_NOTIFCHANNELID = SELECT",
                "       + NOTIFADDRESS_COLUMNS + \" from ST_NotifAddress where notifChannelId=?\";",
                "@@ -78,3 +78,3 @@ public class NotifAddressTable extends AbstractTable<NotifAddressRow> {",
                "-  static final private String SELECT_ALL_NOTIFADDRESS_WITH_GIVEN_USERID = SELECT",
                "+  private static final String SELECT_ALL_NOTIFADDRESS_WITH_GIVEN_USERID = SELECT",
                "       + NOTIFADDRESS_COLUMNS + \" from ST_NotifAddress where userId=?\";",
                "@@ -89,3 +89,3 @@ public class NotifAddressTable extends AbstractTable<NotifAddressRow> {",
                "-  static final private String SELECT_ALL_NOTIFADDRESS = SELECT",
                "+  private static final String SELECT_ALL_NOTIFADDRESS = SELECT",
                "       + NOTIFADDRESS_COLUMNS + \" from ST_NotifAddress\";",
                "@@ -115,3 +115,3 @@ public class NotifAddressTable extends AbstractTable<NotifAddressRow> {",
                "-  static final private String INSERT_NOTIFADDRESS = \"insert into\"",
                "+  private static final String INSERT_NOTIFADDRESS = \"insert into\"",
                "       + \" ST_NotifAddress (id, userId, notifName, notifChannelId, address, usage, priority)\"",
                "@@ -126,3 +126,3 @@ public class NotifAddressTable extends AbstractTable<NotifAddressRow> {",
                "-  static final private String UPDATE_NOTIFADDRESS = \"update ST_NotifAddress set\"",
                "+  private static final String UPDATE_NOTIFADDRESS = \"update ST_NotifAddress set\"",
                "       + \" userId = ?,\"",
                "@@ -151,3 +151,3 @@ public class NotifAddressTable extends AbstractTable<NotifAddressRow> {",
                "-  static final private String DELETE_NOTIFADDRESS = \"delete from ST_NotifAddress where id=?\";",
                "+  private static final String DELETE_NOTIFADDRESS = \"delete from ST_NotifAddress where id=?\";",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifDefaultAddressTable.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifDefaultAddressTable.java",
                "index 60324967eb..3f69f7786b 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifDefaultAddressTable.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifDefaultAddressTable.java",
                "@@ -54,3 +54,4 @@ public class NotifDefaultAddressTable extends AbstractTable<NotifDefaultAddressR",
                "-  static final private String SELECT_NOTIFDEFAULTADDRESS_BY_ID = \"select \"",
                "+  private static final String SELECT = \"select \";",
                "+  private static final String SELECT_NOTIFDEFAULTADDRESS_BY_ID = SELECT",
                "       + NOTIFDEFAULTADDRESS_COLUMNS",
                "@@ -68,3 +69,3 @@ public class NotifDefaultAddressTable extends AbstractTable<NotifDefaultAddressR",
                "-  private static final String SELECT_ALL_NOTIFDEFAULTADDRESS_WITH_GIVEN_USERID = \"select \"",
                "+  private static final String SELECT_ALL_NOTIFDEFAULTADDRESS_WITH_GIVEN_USERID = SELECT",
                "       + NOTIFDEFAULTADDRESS_COLUMNS",
                "@@ -80,3 +81,3 @@ public class NotifDefaultAddressTable extends AbstractTable<NotifDefaultAddressR",
                "-  static final private String SELECT_ALL_NOTIFDEFAULTADDRESS = \"select \"",
                "+  private static final String SELECT_ALL_NOTIFDEFAULTADDRESS = SELECT",
                "       + NOTIFDEFAULTADDRESS_COLUMNS + \" from ST_NotifDefaultAddress\";",
                "@@ -109,3 +110,3 @@ public class NotifDefaultAddressTable extends AbstractTable<NotifDefaultAddressR",
                "-  static final private String INSERT_NOTIFDEFAULTADDRESS = \"insert into\"",
                "+  private static final String INSERT_NOTIFDEFAULTADDRESS = \"insert into\"",
                "       + \" ST_NotifDefaultAddress (id, userId, notifAddressId)\"",
                "@@ -120,3 +121,3 @@ public class NotifDefaultAddressTable extends AbstractTable<NotifDefaultAddressR",
                "-  static final private String UPDATE_NOTIFDEFAULTADDRESS = \"update ST_NotifDefaultAddress set\"",
                "+  private static final String UPDATE_NOTIFDEFAULTADDRESS = \"update ST_NotifDefaultAddress set\"",
                "       + \" userId = ?,\" + \" notifAddressId = ?\" + \" Where id = ?\";",
                "@@ -143,3 +144,3 @@ public class NotifDefaultAddressTable extends AbstractTable<NotifDefaultAddressR",
                "-  static final private String DELETE_NOTIFDEFAULTADDRESS =",
                "+  private static final String DELETE_NOTIFDEFAULTADDRESS =",
                "       \"delete from ST_NotifDefaultAddress where id=?\";",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifPreferenceTable.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifPreferenceTable.java",
                "index 1f8f5d1bfc..8fe3a50de1 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifPreferenceTable.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifPreferenceTable.java",
                "@@ -54,3 +54,4 @@ public class NotifPreferenceTable extends AbstractTable<NotifPreferenceRow> {",
                "-  private static final String SELECT_NOTIFPREFERENCE_BY_ID = \"select \"",
                "+  private static final String SELECT = \"select \";",
                "+  private static final String SELECT_NOTIFPREFERENCE_BY_ID = SELECT",
                "       + NOTIFPREFERENCE_COLUMNS + \" from ST_NotifPreference where id = ?\";",
                "@@ -69,3 +70,3 @@ public class NotifPreferenceTable extends AbstractTable<NotifPreferenceRow> {",
                "   private static final String SELECT_NOTIFPREFERENCE_BY_USERID_AND_COMPONENTINSTANCEID_AND_MESSAGETYPE =",
                "-      \"select \"",
                "+      SELECT",
                "       + NOTIFPREFERENCE_COLUMNS",
                "@@ -84,3 +85,3 @@ public class NotifPreferenceTable extends AbstractTable<NotifPreferenceRow> {",
                "-  private static final String SELECT_ALL_NOTIFPREFERENCE_WITH_GIVEN_COMPONENTINSTANCEID = \"select \"",
                "+  private static final String SELECT_ALL_NOTIFPREFERENCE_WITH_GIVEN_COMPONENTINSTANCEID = SELECT",
                "       + NOTIFPREFERENCE_COLUMNS",
                "@@ -96,3 +97,3 @@ public class NotifPreferenceTable extends AbstractTable<NotifPreferenceRow> {",
                "-  private static final String SELECT_ALL_NOTIFPREFERENCE_WITH_GIVEN_USERID = \"select \"",
                "+  private static final String SELECT_ALL_NOTIFPREFERENCE_WITH_GIVEN_USERID = SELECT",
                "       + NOTIFPREFERENCE_COLUMNS + \" from ST_NotifPreference where userId=?\";",
                "@@ -107,3 +108,3 @@ public class NotifPreferenceTable extends AbstractTable<NotifPreferenceRow> {",
                "-  private static final String SELECT_ALL_NOTIFPREFERENCE = \"select \"",
                "+  private static final String SELECT_ALL_NOTIFPREFERENCE = SELECT",
                "       + NOTIFPREFERENCE_COLUMNS + \" from ST_NotifPreference\";",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegate.java b/core-library/src/main/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegate.java",
                "index d96a80fff7..97f2058336 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegate.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegate.java",
                "@@ -26,2 +26,3 @@ package org.silverpeas.core.notification.user.delayed.delegate;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.silverpeas.core.admin.service.AdminException;",
                " import org.silverpeas.core.admin.service.AdministrationServiceProvider;",
                "@@ -43,3 +44,2 @@ import org.silverpeas.core.notification.user.server.NotificationServer;",
                " import org.silverpeas.core.notification.user.server.NotificationServerException;",
                "-import org.silverpeas.core.silvertrace.SilverTrace;",
                " import org.silverpeas.core.template.SilverpeasTemplate;",
                "@@ -61,3 +61,3 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "-  private final static String LOCATION_SEPARATOR = \" &gt; \";",
                "+  private static final String LOCATION_SEPARATOR = \" &gt; \";",
                "@@ -97,3 +97,4 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "    */",
                "-  public static void executeUserDeleting(final int userId) throws Exception {",
                "+  public static void executeUserDeleting(final int userId)",
                "+      throws NotificationServerException, AdminException {",
                "@@ -125,3 +126,4 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "   public static DelayedNotificationUserSetting executeUserSettingsUpdating(final int userId,",
                "-      final NotifChannel channel, final DelayedNotificationFrequency frequency) throws Exception {",
                "+      final NotifChannel channel, final DelayedNotificationFrequency frequency)",
                "+      throws NotificationServerException, AdminException {",
                "     DelayedNotificationUserSetting result = null;",
                "@@ -152,6 +154,2 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "-  /*",
                "-   * New notification",
                "-   */",
                "-",
                "   /**",
                "@@ -159,6 +157,6 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "    * @param delayedNotificationData",
                "-   * @throws Exception",
                "+   * @throws NotificationServerException",
                "    */",
                "   public static void executeNewNotification(final DelayedNotificationData delayedNotificationData)",
                "-      throws Exception {",
                "+      throws NotificationServerException {",
                "     new DelayedNotificationDelegate().performNewNotificationSending(delayedNotificationData);",
                "@@ -172,3 +170,3 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "   protected void performNewNotificationSending(",
                "-      final DelayedNotificationData delayedNotificationData) throws Exception {",
                "+      final DelayedNotificationData delayedNotificationData) throws NotificationServerException {",
                "     if (!isThatToBeDelayed(delayedNotificationData)) {",
                "@@ -199,5 +197,5 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "     // The notification priority has to be different from URGENT or ERROR and the action type has to",
                "-    // be setted",
                "-    if (NotificationParameters.NORMAL !=",
                "-        delayedNotificationData.getNotificationParameters().iMessagePriority) {",
                "+    // be set",
                "+    if (NotificationParameters.PRIORITY_NORMAL !=",
                "+        delayedNotificationData.getNotificationParameters().getMessagePriority()) {",
                "       return false;",
                "@@ -226,3 +224,4 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "    */",
                "-  public static void executeDelayedNotificationsSending(final Date date) throws Exception {",
                "+  public static void executeDelayedNotificationsSending(final Date date)",
                "+      throws NotificationServerException, AdminException {",
                "     new DelayedNotificationDelegate().performDelayedNotificationsSending(date,",
                "@@ -236,3 +235,4 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "    */",
                "-  public static void executeForceDelayedNotificationsSending() throws Exception {",
                "+  public static void executeForceDelayedNotificationsSending()",
                "+      throws NotificationServerException, AdminException {",
                "     new DelayedNotificationDelegate().forceDelayedNotificationsSending();",
                "@@ -249,3 +249,3 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "   public static void executeForceDelayedNotificationsSending(final int userId,",
                "-      final Set<NotifChannel> channels) throws Exception {",
                "+      final Set<NotifChannel> channels) throws NotificationServerException, AdminException {",
                "     executeForceDelayedNotificationsSending(Collections.singletonList(userId), channels);",
                "@@ -262,3 +262,3 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "   public static void executeForceDelayedNotificationsSending(final List<Integer> userIds,",
                "-      final Set<NotifChannel> channels) throws Exception {",
                "+      final Set<NotifChannel> channels) throws NotificationServerException, AdminException {",
                "     new DelayedNotificationDelegate().forceDelayedNotificationsSending(userIds, channels);",
                "@@ -270,3 +270,4 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "    */",
                "-  protected void forceDelayedNotificationsSending() throws Exception {",
                "+  protected void forceDelayedNotificationsSending()",
                "+      throws NotificationServerException, AdminException {",
                "@@ -288,4 +289,4 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "    */",
                "-  protected void forceDelayedNotificationsSending(final List<Integer> userIds,",
                "-      final Set<NotifChannel> channels) throws Exception {",
                "+  void forceDelayedNotificationsSending(final List<Integer> userIds,",
                "+      final Set<NotifChannel> channels) throws NotificationServerException, AdminException {",
                "     performUsersDelayedNotifications(userIds, channels);",
                "@@ -293,10 +294,4 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "-  /**",
                "-   * Handling the saved delayed notifications from a given date and given channels",
                "-   * @param date",
                "-   * @param channels",
                "-   * @throws Exception",
                "-   */",
                "-  protected void performDelayedNotificationsSending(final Date date,",
                "-      final Set<NotifChannel> channels) throws Exception {",
                "+  void performDelayedNotificationsSending(final Date date,",
                "+      final Set<NotifChannel> channels) throws NotificationServerException, AdminException {",
                "@@ -311,11 +306,4 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "-  /**",
                "-   * Performing delayed notifications for given users and channels",
                "-   * @param usersToBeNotified",
                "-   * @param channels",
                "-   * @throws Exception",
                "-   * @throws NotificationServerException",
                "-   */",
                "   private void performUsersDelayedNotifications(final List<Integer> usersToBeNotified,",
                "-      final Set<NotifChannel> channels) throws Exception {",
                "+      final Set<NotifChannel> channels) throws NotificationServerException, AdminException {",
                "@@ -353,11 +341,5 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "-  /**",
                "-   * Performing delayed notifications for a given user and a given channel",
                "-   * @param channel",
                "-   * @param delayedNotifications",
                "-   * @throws Exception",
                "-   * @throws NotificationServerException",
                "-   */",
                "   private Collection<Long> performUserDelayedNotificationsOnChannel(final NotifChannel channel,",
                "-      final List<DelayedNotificationData> delayedNotifications) throws Exception {",
                "+      final List<DelayedNotificationData> delayedNotifications)",
                "+      throws NotificationServerException, AdminException {",
                "     final DelayedNotificationSyntheseData synthese = buildSynthese(delayedNotifications);",
                "@@ -367,10 +349,4 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "-  /**",
                "-   * Builds all the elements constituting the synthese of user notifications",
                "-   * @param delayedNotifications",
                "-   * @return",
                "-   * @throws Exception",
                "-   */",
                "   private DelayedNotificationSyntheseData buildSynthese(",
                "-      final List<DelayedNotificationData> delayedNotifications) throws Exception {",
                "+      final List<DelayedNotificationData> delayedNotifications) throws AdminException {",
                "@@ -407,11 +383,5 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "-  /**",
                "-   * @param synthese",
                "-   * @param resource",
                "-   * @param notifications",
                "-   * @throws Exception",
                "-   */",
                "   private void prepareSyntheseResourceAndNotifications(",
                "       final DelayedNotificationSyntheseData synthese, final NotificationResourceData resource,",
                "-      final List<DelayedNotificationData> notifications) throws Exception {",
                "+      final List<DelayedNotificationData> notifications) throws AdminException {",
                "@@ -488,9 +458,4 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "-  /**",
                "-   * Builds the message",
                "-   * @param synthese",
                "-   * @return",
                "-   * @throws Exception",
                "-   */",
                "-  private String buildMessage(final DelayedNotificationSyntheseData synthese) throws Exception {",
                "+  private String buildMessage(final DelayedNotificationSyntheseData synthese)",
                "+      throws AdminException {",
                "     clearTemplate();",
                "@@ -507,7 +472,2 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "-  /**",
                "-   * Builds the subject",
                "-   * @param synthese",
                "-   * @return",
                "-   */",
                "   private String buildSubject(final DelayedNotificationSyntheseData synthese) {",
                "@@ -565,3 +525,3 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "   private NotificationData createNotificationData(final NotifChannel channel,",
                "-      final DelayedNotificationSyntheseData synthese) throws Exception {",
                "+      final DelayedNotificationSyntheseData synthese) throws AdminException {",
                "     final NotificationData notificationData = new NotificationData();",
                "@@ -674,3 +634,3 @@ public class DelayedNotificationDelegate extends AbstractNotification {",
                "    */",
                "-  protected UserDetail getUserDetail(final Integer userId) throws Exception {",
                "+  protected UserDetail getUserDetail(final Integer userId) throws AdminException {",
                "     UserDetail userDetail = userDetailCache.get(userId);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServer.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServer.java",
                "index c8880fac1f..0e46f4d3d6 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServer.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServer.java",
                "@@ -25,5 +25,3 @@ package org.silverpeas.core.notification.user.server;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                " import org.silverpeas.core.notification.system.JMSOperation;",
                "-import org.silverpeas.core.silvertrace.SilverTrace;",
                " import org.silverpeas.core.util.ServiceProvider;",
                "@@ -31,6 +29,4 @@ import org.silverpeas.core.util.ServiceProvider;",
                " import javax.annotation.Resource;",
                "-import javax.jms.JMSException;",
                " import javax.jms.Queue;",
                " import javax.jms.TextMessage;",
                "-import javax.naming.NamingException;",
                " import java.util.HashMap;",
                "@@ -60,6 +56,6 @@ public class NotificationServer {",
                "   public long addNotification(NotificationData pData) throws NotificationServerException {",
                "-    long notificationid = 0; // a gerer plus tard (necessite une database)",
                "+    long notificationId = 0;",
                "     mJmsHeaders.clear();",
                "     mJmsHeaders.put(JMS_HEADER_CHANNEL, pData.getTargetChannel());",
                "-    pData.setNotificationId(notificationid);",
                "+    pData.setNotificationId(notificationId);",
                "     String notificationAsXML = NotificationServerUtil.convertNotificationDataToXML(pData);",
                "@@ -68,7 +64,5 @@ public class NotificationServer {",
                "     } catch (Exception e) {",
                "-      throw new NotificationServerException(\"NotificationServer.addNotification()\",",
                "-          SilverpeasException.ERROR, \"notificationServer.EX_CANT_SEND_TO_JMS_QUEUE\",",
                "-          notificationAsXML, e);",
                "+      throw new NotificationServerException(e);",
                "     }",
                "-    return notificationid;",
                "+    return notificationId;",
                "   }",
                "@@ -78,4 +72,3 @@ public class NotificationServer {",
                "    */",
                "-  private void jmsSendToQueue(String notificationMessage, Map<String, String> pJmsHeaders)",
                "-      throws JMSException, NamingException {",
                "+  private void jmsSendToQueue(String notificationMessage, Map<String, String> pJmsHeaders) {",
                "     JMSOperation.realize(context -> {",
                "@@ -88,9 +81,3 @@ public class NotificationServer {",
                "       }",
                "-      try {",
                "-        context.createProducer().send(queue, textMsg);",
                "-      } catch (Exception exc) {",
                "-        SilverTrace.error(\"notification\", \"NotificationServer.jmsSendToQueue\",",
                "-            \"notificationServer.EX_CANT_SEND_TO_JSM_QUEUE\", exc);",
                "-        throw exc;",
                "-      }",
                "+      context.createProducer().send(queue, textMsg);",
                "     });",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerException.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerException.java",
                "index bbda49d079..221b318760 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerException.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerException.java",
                "@@ -25,3 +25,3 @@ package org.silverpeas.core.notification.user.server;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                "+import org.silverpeas.core.SilverpeasException;",
                "@@ -29,59 +29,15 @@ public class NotificationServerException extends SilverpeasException {",
                "-  private static final long serialVersionUID = 139645218705518410L;",
                "+  private static final long serialVersionUID = 253197259021032551L;",
                "-  /**",
                "-   * --------------------------------------------------------------------------",
                "-   * constructor",
                "-   */",
                "-  public NotificationServerException(String callingClass, int errorLevel, String message) {",
                "-    super(callingClass, errorLevel, message);",
                "+  public NotificationServerException(final String message, final String... parameters) {",
                "+    super(message, parameters);",
                "   }",
                "-  /**",
                "-   * Constructor declaration",
                "-   * @param callingClass",
                "-   * @param errorLevel",
                "-   * @param message",
                "-   * @param extraParams",
                "-   *",
                "-   */",
                "-  public NotificationServerException(String callingClass, int errorLevel, String message,",
                "-      String extraParams) {",
                "-    super(callingClass, errorLevel, message, extraParams);",
                "+  public NotificationServerException(final String message, final Throwable cause) {",
                "+    super(message, cause);",
                "   }",
                "-  /**",
                "-   * Constructor declaration",
                "-   * @param callingClass",
                "-   * @param errorLevel",
                "-   * @param message",
                "-   * @param nested",
                "-   *",
                "-   */",
                "-  public NotificationServerException(String callingClass, int errorLevel, String message,",
                "-      Exception nested) {",
                "-    super(callingClass, errorLevel, message, nested);",
                "+  public NotificationServerException(final Throwable cause) {",
                "+    super(cause);",
                "   }",
                "-",
                "-  /**",
                "-   * Constructor declaration",
                "-   * @param callingClass",
                "-   * @param errorLevel",
                "-   * @param message",
                "-   * @param extraParams",
                "-   * @param nested",
                "-   *",
                "-   */",
                "-  public NotificationServerException(String callingClass, int errorLevel, String message,",
                "-      String extraParams, Exception nested) {",
                "-    super(callingClass, errorLevel, message, extraParams, nested);",
                "-  }",
                "-",
                "-  /**",
                "-   * -------------------------------------------------------------------------- getModule getModule",
                "-   */",
                "-  public String getModule() {",
                "-    return \"notificationserver\";",
                "-  }",
                "-",
                " }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerUtil.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerUtil.java",
                "index 19a062e17e..a2aabdcb34 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerUtil.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerUtil.java",
                "@@ -25,2 +25,10 @@ package org.silverpeas.core.notification.user.server;",
                "+import org.silverpeas.core.notification.user.server.xml.NotifyContentHandler;",
                "+import org.silverpeas.core.util.Charsets;",
                "+import org.xml.sax.SAXException;",
                "+import org.xml.sax.helpers.DefaultHandler;",
                "+",
                "+import javax.xml.parsers.ParserConfigurationException;",
                "+import javax.xml.parsers.SAXParser;",
                "+import javax.xml.parsers.SAXParserFactory;",
                " import java.io.ByteArrayInputStream;",
                "@@ -33,14 +41,2 @@ import java.util.Set;",
                "-import javax.xml.parsers.ParserConfigurationException;",
                "-import javax.xml.parsers.SAXParser;",
                "-import javax.xml.parsers.SAXParserFactory;",
                "-",
                "-import org.silverpeas.core.util.Charsets;",
                "-",
                "-import org.silverpeas.core.notification.user.server.xml.NotifyContentHandler;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                "-",
                "-import org.xml.sax.SAXException;",
                "-import org.xml.sax.helpers.DefaultHandler;",
                "-",
                " public class NotificationServerUtil {",
                "@@ -124,5 +120,3 @@ public class NotificationServerUtil {",
                "     } catch (SAXException | IOException | ParserConfigurationException e) {",
                "-      throw new NotificationServerException(\"NotificationDataXML()\",",
                "-          SilverpeasException.ERROR,",
                "-          \"notificationServer.EX_ERROR_IN_XML_PARSING\", e);",
                "+      throw new NotificationServerException(e);",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/AbstractListener.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/AbstractListener.java",
                "index f44c969860..7a0a81c1d8 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/AbstractListener.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/AbstractListener.java",
                "@@ -25,6 +25,2 @@ package org.silverpeas.core.notification.user.server.channel;",
                "-import javax.jms.JMSException;",
                "-import javax.jms.Message;",
                "-import javax.jms.TextMessage;",
                "-",
                " import org.silverpeas.core.notification.user.server.NotificationData;",
                "@@ -33,3 +29,6 @@ import org.silverpeas.core.notification.user.server.NotificationServerException;",
                " import org.silverpeas.core.notification.user.server.NotificationServerUtil;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                "+",
                "+import javax.jms.JMSException;",
                "+import javax.jms.Message;",
                "+import javax.jms.TextMessage;",
                "@@ -75,4 +74,3 @@ public abstract class AbstractListener implements INotificationServerChannel {",
                "     } catch (JMSException e) {",
                "-      throw new NotificationServerException(\"AbstractListener.extractData()\",",
                "-          SilverpeasException.ERROR, \"notificationServer.EX_CHANNEL_NOT_DEFINED\", e);",
                "+      throw new NotificationServerException(e);",
                "     }",
                "@@ -81,4 +79,3 @@ public abstract class AbstractListener implements INotificationServerChannel {",
                "     } catch (JMSException e) {",
                "-      throw new NotificationServerException(\"AbstractListener.extractData()\",",
                "-          SilverpeasException.ERROR, \"notificationServer.EX_NOTIF_DATA_NOT_DEFINED\", e);",
                "+      throw new NotificationServerException(e);",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/popup/POPUPListener.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/popup/POPUPListener.java",
                "index b87ba6b68d..4f9d325686 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/popup/POPUPListener.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/popup/POPUPListener.java",
                "@@ -25,3 +25,2 @@ package org.silverpeas.core.notification.user.server.channel.popup;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                " import org.silverpeas.core.notification.user.server.NotificationData;",
                "@@ -87,4 +86,3 @@ public class POPUPListener extends AbstractListener implements MessageListener {",
                "     } catch (Exception e) {",
                "-      throw new NotificationServerException(\"POPUPListener.send()\", SilverpeasException.ERROR,",
                "-          \"popup.EX_CANT_ADD_MESSAGE\", e);",
                "+      throw new NotificationServerException(e);",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILListener.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILListener.java",
                "index ec7d8f65c2..d3805e88ed 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILListener.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILListener.java",
                "@@ -25,3 +25,2 @@ package org.silverpeas.core.notification.user.server.channel.silvermail;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                " import org.silverpeas.core.notification.user.server.NotificationData;",
                "@@ -86,4 +85,3 @@ public class SILVERMAILListener extends AbstractListener implements MessageListe",
                "     } catch (Exception e) {",
                "-      throw new NotificationServerException(\"SILVERMAILListener.send()\", SilverpeasException.ERROR,",
                "-          \"silvermail.EX_CANT_ADD_MESSAGE\", e);",
                "+      throw new NotificationServerException(e);",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/smtp/SMTPListener.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/smtp/SMTPListener.java",
                "index 6a8d01049a..6ef20ce041 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/smtp/SMTPListener.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/smtp/SMTPListener.java",
                "@@ -25,2 +25,6 @@ package org.silverpeas.core.notification.user.server.channel.smtp;",
                "+import org.silverpeas.core.admin.service.Administration;",
                "+import org.silverpeas.core.i18n.I18NHelper;",
                "+import org.silverpeas.core.mail.MailAddress;",
                "+import org.silverpeas.core.mail.MailSending;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -30,6 +34,4 @@ import org.silverpeas.core.notification.user.server.NotificationServerException;",
                " import org.silverpeas.core.notification.user.server.channel.AbstractListener;",
                "-import org.silverpeas.core.admin.service.Administration;",
                "-import org.silverpeas.core.mail.MailAddress;",
                "-import org.silverpeas.core.mail.MailSending;",
                "-import org.silverpeas.core.util.WebEncodeHelper;",
                "+import org.silverpeas.core.template.SilverpeasTemplate;",
                "+import org.silverpeas.core.template.SilverpeasTemplateFactory;",
                " import org.silverpeas.core.util.LocalizationBundle;",
                "@@ -37,7 +39,4 @@ import org.silverpeas.core.util.ResourceLocator;",
                " import org.silverpeas.core.util.StringUtil;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                "-import org.silverpeas.core.i18n.I18NHelper;",
                "+import org.silverpeas.core.util.WebEncodeHelper;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "-import org.silverpeas.core.template.SilverpeasTemplate;",
                "-import org.silverpeas.core.template.SilverpeasTemplateFactory;",
                "@@ -53,4 +52,4 @@ import java.util.Map;",
                "-import static org.silverpeas.core.notification.user.client.NotificationTemplateKey.*;",
                " import static org.silverpeas.core.mail.MailAddress.eMail;",
                "+import static org.silverpeas.core.notification.user.client.NotificationTemplateKey.*;",
                " import static org.silverpeas.core.util.MailUtil.isForceReplyToSenderField;",
                "@@ -68,5 +67,2 @@ public class SMTPListener extends AbstractListener implements MessageListener {",
                "-  public SMTPListener() {",
                "-  }",
                "-",
                "   /**",
                "@@ -111,4 +107,3 @@ public class SMTPListener extends AbstractListener implements MessageListener {",
                "     if (tmpFromString == null) {",
                "-      throw new NotificationServerException(\"SMTPListener.send()\", SilverpeasException.ERROR,",
                "-          \"smtp.EX_MISSING_FROM\");",
                "+      throw new NotificationServerException(\"Missing sender email address!\");",
                "     } else {",
                "@@ -124,5 +119,5 @@ public class SMTPListener extends AbstractListener implements MessageListener {",
                "         // Header Message",
                "-        String SMTPmessageHeader =",
                "+        String smtpMessageheader =",
                "             templateHeaderFooter.applyFileTemplate(\"SMTPmessageHeader\" + '_' + tmpLanguageString);",
                "-        body.append(SMTPmessageHeader);",
                "+        body.append(smtpMessageheader);",
                "       }",
                "@@ -168,10 +163,5 @@ public class SMTPListener extends AbstractListener implements MessageListener {",
                "           afterFooterMessage.toString().replaceAll(\"[\\\\n\\\\r]\", \"\"));",
                "-      if (tmpAttachmentIdString == null) {",
                "-        sendEmail(tmpFromString, notification.getSenderName(), notification.getTargetReceipt(),",
                "-            tmpSubjectString, bodyAsString, true);",
                "-      } else {",
                "-        // For the moment, send the email without attachment",
                "-        sendEmail(tmpFromString, notification.getSenderName(), notification.getTargetReceipt(),",
                "-            tmpSubjectString, bodyAsString, false);",
                "-      }",
                "+      boolean isHtml = tmpAttachmentIdString == null;",
                "+      sendEmail(tmpFromString, notification.getSenderName(), notification.getTargetReceipt(),",
                "+          tmpSubjectString, bodyAsString, isHtml);",
                "     }",
                "@@ -212,4 +202,3 @@ public class SMTPListener extends AbstractListener implements MessageListener {",
                "     } catch (Exception e) {",
                "-      throw new NotificationServerException(\"SMTPListener.sendEmail()\", SilverpeasException.ERROR,",
                "-          \"smtp.EX_CANT_SEND_SMTP_MESSAGE\", e);",
                "+      throw new NotificationServerException(e);",
                "     }",
                "diff --git a/core-services/workflow/src/main/java/org/silverpeas/core/workflow/engine/task/TaskManagerImpl.java b/core-services/workflow/src/main/java/org/silverpeas/core/workflow/engine/task/TaskManagerImpl.java",
                "index 581caf0bd0..e5472f61b7 100644",
                "--- a/core-services/workflow/src/main/java/org/silverpeas/core/workflow/engine/task/TaskManagerImpl.java",
                "+++ b/core-services/workflow/src/main/java/org/silverpeas/core/workflow/engine/task/TaskManagerImpl.java",
                "@@ -188,3 +188,3 @@ public class TaskManagerImpl extends AbstractTaskManager {",
                "         NotificationMetaData notifMetaData = new NotificationMetaData(",
                "-            NotificationParameters.NORMAL, title, text);",
                "+            NotificationParameters.PRIORITY_NORMAL, title, text);",
                "         if (sender != null) {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/calendar/OutlookSyncCalendarServlet.java b/core-war/src/main/java/org/silverpeas/web/calendar/OutlookSyncCalendarServlet.java",
                "index 750079dae4..d1c3dee3c4 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/calendar/OutlookSyncCalendarServlet.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/calendar/OutlookSyncCalendarServlet.java",
                "@@ -25,13 +25,12 @@ package org.silverpeas.web.calendar;",
                "-import org.silverpeas.core.security.session.SessionInfo;",
                "-import org.silverpeas.core.security.session.SessionManagementProvider;",
                "-import org.silverpeas.core.util.logging.SilverLogger;",
                "-import org.silverpeas.core.web.mvc.controller.PeasCoreException;",
                "-import org.silverpeas.core.personalorganizer.service.CalendarException;",
                "-import org.silverpeas.core.personalorganizer.service.SilverpeasCalendar;",
                "+import org.apache.commons.io.IOUtils;",
                " import org.silverpeas.core.personalorganizer.model.Classification;",
                " import org.silverpeas.core.personalorganizer.model.JournalHeader;",
                "-import org.apache.commons.io.IOUtils;",
                "+import org.silverpeas.core.personalorganizer.service.SilverpeasCalendar;",
                "+import org.silverpeas.core.security.session.SessionInfo;",
                "+import org.silverpeas.core.security.session.SessionManagementProvider;",
                " import org.silverpeas.core.util.Charsets;",
                " import org.silverpeas.core.util.JSONCodec;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "+import org.silverpeas.core.web.mvc.controller.PeasCoreException;",
                "@@ -67,10 +66,5 @@ public class OutlookSyncCalendarServlet extends HttpServlet {",
                "   @Inject",
                "-  private SilverpeasCalendar calendarBm;",
                "+  private SilverpeasCalendar calendar;",
                "-  @Override",
                "-  public void init() throws ServletException {",
                "-    super.init();",
                "-  }",
                "-",
                "-  public List<CalendarEntry> read(InputStream in) throws IOException {",
                "+  public List<CalendarEntry> read(InputStream in) {",
                "     try {",
                "@@ -159,3 +153,3 @@ public class OutlookSyncCalendarServlet extends HttpServlet {",
                "    */",
                "-  private void setHeaderDelegators(List<CalendarEntry> headers) throws PeasCoreException {",
                "+  private void setHeaderDelegators(List<CalendarEntry> headers) {",
                "     String userId = null;",
                "@@ -181,5 +175,5 @@ public class OutlookSyncCalendarServlet extends HttpServlet {",
                "     cal.add(Calendar.DAY_OF_YEAR, -NB_DAYS_BEFORE);",
                "-    Collection<JournalHeader> existingEvents = calendarBm.getExternalJournalHeadersForUserAfterDate(",
                "+    Collection<JournalHeader> existingEvents = calendar.getExternalJournalHeadersForUserAfterDate(",
                "         userId, cal.getTime());",
                "-    Map<String, JournalHeader> events = new HashMap<String, JournalHeader>(existingEvents.size());",
                "+    Map<String, JournalHeader> events = new HashMap<>(existingEvents.size());",
                "     for (JournalHeader event : existingEvents) {",
                "@@ -209,3 +203,3 @@ public class OutlookSyncCalendarServlet extends HttpServlet {",
                "           element.setId(oldJournal.getId());",
                "-          calendarBm.updateJournal(convert(element));",
                "+          calendar.updateJournal(convert(element));",
                "           result = ELEMENT_UPDATED;",
                "@@ -217,3 +211,3 @@ public class OutlookSyncCalendarServlet extends HttpServlet {",
                "       else {",
                "-        calendarBm.addJournal(convert(element));",
                "+        calendar.addJournal(convert(element));",
                "         result = ELEMENT_ADDED;",
                "@@ -228,3 +222,3 @@ public class OutlookSyncCalendarServlet extends HttpServlet {",
                "-  private JournalHeader convert(CalendarEntry entry) throws ParseException, CalendarException {",
                "+  private JournalHeader convert(CalendarEntry entry) throws ParseException {",
                "     JournalHeader header = new JournalHeader(entry.getName(), entry.getDelegatorId());",
                "@@ -270,6 +264,4 @@ public class OutlookSyncCalendarServlet extends HttpServlet {",
                "       return true;",
                "-    } else if (oldJournal.getPriority().getValue() != element.getPriority()) {",
                "-      return true;",
                "     } else {",
                "-      return false;",
                "+      return oldJournal.getPriority().getValue() != element.getPriority();",
                "     }",
                "@@ -290,3 +282,3 @@ public class OutlookSyncCalendarServlet extends HttpServlet {",
                "         try {",
                "-          calendarBm.removeJournal(event.getId());",
                "+          calendar.removeJournal(event.getId());",
                "           nbDeletedEvents++;",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/directory/control/DirectorySessionController.java b/core-war/src/main/java/org/silverpeas/web/directory/control/DirectorySessionController.java",
                "index 5bb5e2e58e..1eaf1051be 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/directory/control/DirectorySessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/directory/control/DirectorySessionController.java",
                "@@ -53,5 +53,5 @@ import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.NotificationParameters;",
                " import org.silverpeas.core.notification.user.client.NotificationSender;",
                " import org.silverpeas.core.notification.user.client.UserRecipient;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                " import org.silverpeas.core.security.session.SessionInfo;",
                "@@ -541,3 +541,3 @@ public class DirectorySessionController extends AbstractComponentSessionControll",
                "     NotificationSender notifSender = new NotificationSender(compoId);",
                "-    int notifTypeId = NotificationParameters.ADDRESS_DEFAULT;",
                "+    int notifTypeId = BuiltInNotifAddress.DEFAULT.getId();",
                "     int priorityId = 0;",
                "@@ -882,3 +882,3 @@ public class DirectorySessionController extends AbstractComponentSessionControll",
                "     String templateFileName = extraTemplate.getFileName();",
                "-    String templateName = templateFileName.substring(0, templateFileName.lastIndexOf(\".\"));",
                "+    String templateName = templateFileName.substring(0, templateFileName.lastIndexOf('.'));",
                "     if (xmlData != null) {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java b/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "index fb4113f97b..6f29f8e418 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "@@ -59,8 +59,8 @@ import org.silverpeas.core.exception.UtilException;",
                " import org.silverpeas.core.exception.UtilTrappedException;",
                "-import org.silverpeas.core.notification.message.MessageNotifier;",
                " import org.silverpeas.core.notification.NotificationException;",
                "+import org.silverpeas.core.notification.message.MessageNotifier;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.NotificationParameters;",
                " import org.silverpeas.core.notification.user.client.NotificationSender;",
                " import org.silverpeas.core.notification.user.client.UserRecipient;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                " import org.silverpeas.core.personalization.UserPreferences;",
                "@@ -321,3 +321,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "       NotificationMetaData notifMetaData =",
                "-          new NotificationMetaData(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL, \"\", templates,",
                "+          new NotificationMetaData(BuiltInNotifAddress.BASIC_SMTP.getId(), \"\", templates,",
                "               USER_ACCOUNT_TEMPLATE_FILE);",
                "@@ -336,3 +336,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "       try {",
                "-        sender.notifyUser(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL, notifMetaData);",
                "+        sender.notifyUser(BuiltInNotifAddress.BASIC_SMTP.getId(), notifMetaData);",
                "       } catch (NotificationException e) {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPSessionController.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPSessionController.java",
                "index 101f1ed081..37a5bfed00 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPSessionController.java",
                "@@ -25,6 +25,7 @@ package org.silverpeas.web.notificationserver.channel.popup;",
                "+import org.owasp.encoder.Encode;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.NotificationParameters;",
                " import org.silverpeas.core.notification.user.client.NotificationSender;",
                " import org.silverpeas.core.notification.user.client.UserRecipient;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                " import org.silverpeas.core.notification.user.server.channel.popup.POPUPException;",
                "@@ -33,2 +34,3 @@ import org.silverpeas.core.notification.user.server.channel.popup.POPUPPersisten",
                " import org.silverpeas.core.util.URLUtil;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                " import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;",
                "@@ -36,4 +38,2 @@ import org.silverpeas.core.web.mvc.controller.ComponentContext;",
                " import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "-import org.owasp.encoder.Encode;",
                "-import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -126,4 +126,3 @@ public class POPUPSessionController extends AbstractComponentSessionController {",
                "       notifMetaData.addUserRecipient(new UserRecipient(userId));",
                "-      notificationSender.notifyUser(NotificationParameters.ADDRESS_BASIC_POPUP,",
                "-          notifMetaData);",
                "+      notificationSender.notifyUser(BuiltInNotifAddress.BASIC_POPUP.getId(), notifMetaData);",
                "     } catch (Exception ex) {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/Notification.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/Notification.java",
                "index 63ad40ad7d..ea56ff8ee1 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/Notification.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/Notification.java",
                "@@ -25,10 +25,10 @@ package org.silverpeas.web.notificationuser;",
                "-import org.silverpeas.core.ui.DisplayI18NHelper;",
                "+import org.owasp.encoder.Encode;",
                "+import org.silverpeas.core.admin.user.model.Group;",
                "+import org.silverpeas.core.admin.user.model.UserDetail;",
                " import org.silverpeas.core.notification.user.client.GroupRecipient;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.NotificationParameters;",
                " import org.silverpeas.core.notification.user.client.UserRecipient;",
                "-import org.silverpeas.core.admin.user.model.Group;",
                "-import org.silverpeas.core.admin.user.model.UserDetail;",
                "-import org.owasp.encoder.Encode;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                "+import org.silverpeas.core.ui.DisplayI18NHelper;",
                " import org.silverpeas.core.util.LocalizationBundle;",
                "@@ -45,3 +45,3 @@ public class Notification {",
                "   private int priority = 0;",
                "-  private int channel = NotificationParameters.ADDRESS_COMPONENT_DEFINED;",
                "+  private int addressId = BuiltInNotifAddress.COMPONENT_DEFINED.getId();",
                "   private List<UserDetail> users;",
                "@@ -83,8 +83,8 @@ public class Notification {",
                "-  public int getChannel() {",
                "-    return channel;",
                "+  public int getAddressId() {",
                "+    return addressId;",
                "   }",
                "-  public void setChannel(String channel) {",
                "+  public void setAddressId(String channel) {",
                "     if (StringUtil.isInteger(channel)) {",
                "-      this.channel = Integer.parseInt(channel);",
                "+      this.addressId = Integer.parseInt(channel);",
                "     }",
                "@@ -93,3 +93,3 @@ public class Notification {",
                "     if (users == null) {",
                "-      users = new ArrayList<UserDetail>();",
                "+      users = new ArrayList<>();",
                "     }",
                "@@ -98,3 +98,3 @@ public class Notification {",
                "   public List<String> getUserIds() {",
                "-    List<String> ids = new ArrayList<String>();",
                "+    List<String> ids = new ArrayList<>();",
                "     if (users != null) {",
                "@@ -121,3 +121,3 @@ public class Notification {",
                "     if (groups == null) {",
                "-      groups = new ArrayList<Group>();",
                "+      groups = new ArrayList<>();",
                "     }",
                "@@ -126,3 +126,3 @@ public class Notification {",
                "   public List<String> getGroupIds() {",
                "-    List<String> ids = new ArrayList<String>();",
                "+    List<String> ids = new ArrayList<>();",
                "     if (getGroups() != null) {",
                "@@ -152,3 +152,3 @@ public class Notification {",
                "             Encode.forHtml(getBody()));",
                "-    List<UserRecipient> userRecipients = new ArrayList<UserRecipient>();",
                "+    List<UserRecipient> userRecipients = new ArrayList<>();",
                "     if (getUsers() != null) {",
                "@@ -159,3 +159,3 @@ public class Notification {",
                "     notifMetaData.addUserRecipients(userRecipients);",
                "-    List<GroupRecipient> groupRecipients = new ArrayList<GroupRecipient>();",
                "+    List<GroupRecipient> groupRecipients = new ArrayList<>();",
                "     if (getGroups() != null) {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java",
                "index 4a97cdc6ff..a6dd250313 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java",
                "@@ -76,3 +76,3 @@ public class NotificationUserSessionController extends AbstractComponentSessionC",
                "-    notifSender.notifyUser(notification.getChannel(), notifMetaData);",
                "+    notifSender.notifyUser(notification.getAddressId(), notifMetaData);",
                "   }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java",
                "index c08e930fb6..015e3a9082 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java",
                "@@ -123,3 +123,3 @@ public class NotificationUserRequestRouter extends ComponentRequestRouter<Notifi",
                "     notification.setBody(request.getParameter(\"txtMessage\"));",
                "-    notification.setChannel(request.getParameter(\"notificationId\"));",
                "+    notification.setAddressId(request.getParameter(\"notificationId\"));",
                "     notification.setPriority(request.getParameter(\"priorityId\"));",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/personalization/control/PersonalizationSessionController.java b/core-war/src/main/java/org/silverpeas/web/personalization/control/PersonalizationSessionController.java",
                "index b47bdf13e1..7b956deff1 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/personalization/control/PersonalizationSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/personalization/control/PersonalizationSessionController.java",
                "@@ -25,10 +25,13 @@ package org.silverpeas.web.personalization.control;",
                "+import org.silverpeas.core.admin.component.model.ComponentInst;",
                " import org.silverpeas.core.admin.user.model.UserFull;",
                "+import org.silverpeas.core.exception.DecodingException;",
                " import org.silverpeas.core.exception.SilverpeasException;",
                "-import org.silverpeas.core.notification.user.client.NotificationManager;",
                " import org.silverpeas.core.notification.NotificationException;",
                "+import org.silverpeas.core.notification.user.client.NotificationAddress;",
                "+import org.silverpeas.core.notification.user.client.NotificationManager;",
                " import org.silverpeas.core.util.ArrayUtil;",
                "-import org.silverpeas.core.util.WebEncodeHelper;",
                " import org.silverpeas.core.util.StringUtil;",
                " import org.silverpeas.core.util.URLUtil;",
                "+import org.silverpeas.core.util.WebEncodeHelper;",
                " import org.silverpeas.core.web.mvc.controller.AbstractComponentSessionController;",
                "@@ -42,2 +45,3 @@ import java.util.Arrays;",
                " import java.util.Comparator;",
                "+import java.util.List;",
                " import java.util.Properties;",
                "@@ -50,2 +54,6 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "+  private static final String PROPERTY_FULL_NAME = \"fullName\";",
                "+  private static final String CANT_SET_DEFAULT_ADDRESS =",
                "+      \"personalizationPeas.EX_CANT_SET_DEFAULT_ADDRESS\";",
                "+  private static final String A_NOTIF_ADDRESS_ID = \"aNotifAddressId=\";",
                "   private NotificationManager notificationManager = null;",
                "@@ -82,8 +90,7 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "    */",
                "-  public ArrayList<Properties> getNotificationAddresses() throws PeasCoreException {",
                "-    int userId = Integer.parseInt(getUserId());",
                "+  public List<Properties> getNotificationAddresses() throws PeasCoreException {",
                "     try {",
                "-      return notificationManager.getNotificationAddresses(userId);",
                "+      return notificationManager.getNotifAddressProperties(getUserId());",
                "     } catch (NotificationException e) {",
                "-      throw new PeasCoreException(\"PersonalizationSessionController.getNotificationAddresses()\",",
                "+      throw new PeasCoreException(\"PersonalizationSessionController.getNotifAddressProperties()\",",
                "           SilverpeasException.ERROR, \"personalizationPeas.EX_CANT_GET_NOTIFICATION_ADDRESSES\", e);",
                "@@ -99,11 +106,9 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "    */",
                "-  public Properties getNotificationAddress(String aNotificationAddressId)",
                "+  public Properties getNotificationAddressProperties(String aNotificationAddressId)",
                "       throws PeasCoreException {",
                "-    int id = Integer.parseInt(aNotificationAddressId);",
                "-    int userId = Integer.parseInt(getUserId());",
                "-",
                "     try {",
                "-      return notificationManager.getNotificationAddress(id, userId);",
                "+      return notificationManager.getNotifAddressProperties(aNotificationAddressId, getUserId());",
                "     } catch (NotificationException e) {",
                "-      throw new PeasCoreException(\"PersonalizationSessionController.getNotificationAddress()\",",
                "+      throw new PeasCoreException(",
                "+          \"PersonalizationSessionController.getNotificationAddressProperties()\",",
                "           SilverpeasException.ERROR, \"personalizationPeas.EX_CANT_GET_NOTIFICATION_ADDRESS\", \"Id=\"",
                "@@ -119,3 +124,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "    */",
                "-  public ArrayList<Properties> getNotifChannels() throws PeasCoreException {",
                "+  public List<Properties> getNotifChannels() throws PeasCoreException {",
                "     try {",
                "@@ -137,7 +142,4 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       throws PeasCoreException {",
                "-    int id = Integer.parseInt(aPreferenceId);",
                "-    int userId = Integer.parseInt(getUserId());",
                "-",
                "     try {",
                "-      return notificationManager.getNotifPreference(id, userId);",
                "+      return notificationManager.getNotifPreference(aPreferenceId, getUserId());",
                "     } catch (NotificationException e) {",
                "@@ -155,7 +157,5 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "    */",
                "-  public ArrayList<Properties> getNotifPreferences() throws PeasCoreException {",
                "-    int userId = Integer.parseInt(getUserId());",
                "-",
                "+  public List<Properties> getNotifPreferences() throws PeasCoreException {",
                "     try {",
                "-      return notificationManager.getNotifPreferences(userId);",
                "+      return notificationManager.getNotifPreferences(getUserId());",
                "     } catch (NotificationException e) {",
                "@@ -178,14 +178,16 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       String aAddress, String aUsage) throws PeasCoreException {",
                "-    int notifAddressId;",
                "+    final String notifAddressId;",
                "     if (!StringUtil.isDefined(aNotifAddressId)) {",
                "-      notifAddressId = -1;",
                "+      notifAddressId = \"-1\";",
                "     } else {",
                "-      notifAddressId = Integer.parseInt(aNotifAddressId);",
                "+      notifAddressId = aNotifAddressId;",
                "     }",
                "-    int userId = Integer.parseInt(getUserId());",
                "-    int channelId = Integer.parseInt(aChannelId);",
                "-",
                "     try {",
                "-      notificationManager.saveNotifAddress(notifAddressId, userId, aNotifName,",
                "-          channelId, aAddress, aUsage);",
                "+      final NotificationAddress address = new NotificationAddress()",
                "+          .setId(notifAddressId)",
                "+          .setName(aNotifName)",
                "+          .setChannelId(aChannelId)",
                "+          .setAddress(aAddress)",
                "+          .setUsage(aUsage);",
                "+      notificationManager.saveNotifAddress(address);",
                "     } catch (NotificationException e) {",
                "@@ -193,3 +195,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "           SilverpeasException.ERROR, \"personalizationPeas.EX_CANT_SET_NOTIFICATION_ADDRESS\",",
                "-          \"aNotifAddressId=\" + aNotifAddressId + \"|aNotifName=\" + aNotifName + \"|aChannelId=\"",
                "+          A_NOTIF_ADDRESS_ID + aNotifAddressId + \"|aNotifName=\" + aNotifName + \"|aChannelId=\"",
                "           + aChannelId + \"|aAddress=\" + aAddress + \"|aUsage=\" + aUsage, e);",
                "@@ -206,6 +208,4 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       throws PeasCoreException {",
                "-    int notifAddressId = Integer.parseInt(aNotifAddressId);",
                "-",
                "     try {",
                "-      notificationManager.deleteNotifAddress(notifAddressId);",
                "+      notificationManager.deleteNotifAddress(aNotifAddressId);",
                "     } catch (NotificationException e) {",
                "@@ -215,3 +215,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "           \"personalizationPeas.EX_CANT_DELETE_NOTIFICATION_ADDRESS\",",
                "-          \"aNotifAddressId=\" + aNotifAddressId, e);",
                "+          A_NOTIF_ADDRESS_ID + aNotifAddressId, e);",
                "     }",
                "@@ -227,3 +227,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "     try {",
                "-      notificationManager.deletePreference(Integer.parseInt(aPreferenceId));",
                "+      notificationManager.deletePreference(aPreferenceId);",
                "     } catch (NotificationException e) {",
                "@@ -243,9 +243,5 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "   public void testNotifAddress(String aNotifAddressId) throws PeasCoreException {",
                "-    // Get the current userId",
                "-    int userId = Integer.parseInt(getUserId());",
                "-    int notifAddressId = Integer.parseInt(aNotifAddressId);",
                "-",
                "     try {",
                "-      notificationManager.testNotifAddress(notifAddressId, userId);",
                "-    } catch (NotificationException e) {",
                "+      notificationManager.testNotifAddress(aNotifAddressId, getUserId());",
                "+    } catch (NotificationException | DecodingException e) {",
                "       throw new PeasCoreException(",
                "@@ -254,3 +250,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "           \"personalizationPeas.EX_CANT_TEST_NOTIFICATION_ADDRESS\",",
                "-          \"aNotifAddressId=\" + aNotifAddressId, e);",
                "+          A_NOTIF_ADDRESS_ID + aNotifAddressId, e);",
                "     }",
                "@@ -263,11 +259,8 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "    */",
                "-  public Properties getDefaultAddress() throws PeasCoreException {",
                "-    int userId = Integer.parseInt(getUserId());",
                "-",
                "+  public Properties getDefaultAddressProperties() throws PeasCoreException {",
                "     try {",
                "-      return notificationManager.getNotificationAddress(",
                "-          notificationManager.getDefaultAddress(userId), userId);",
                "+      return notificationManager.getNotifAddressProperties(",
                "+          notificationManager.getDefaultAddressId(getUserId()), getUserId());",
                "     } catch (NotificationException e) {",
                "-      throw new PeasCoreException(",
                "-          \"PersonalizationSessionController.getDefaultAddress()\",",
                "+      throw new PeasCoreException(\"PersonalizationSessionController.getDefaultAddressId()\",",
                "           SilverpeasException.ERROR,",
                "@@ -283,13 +276,9 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "   public void setDefaultAddress(String aNotifAddressId) throws PeasCoreException {",
                "-    // Get the current userId",
                "-    int userId = Integer.parseInt(getUserId());",
                "-    int notifAddressId = Integer.parseInt(aNotifAddressId);",
                "-",
                "     try {",
                "-      notificationManager.deleteAllAddress(userId);",
                "-      notificationManager.setDefaultAddress(notifAddressId, userId);",
                "+      notificationManager.deleteAllDefaultAddress(getUserId());",
                "+      notificationManager.setDefaultAddress(aNotifAddressId, getUserId());",
                "     } catch (NotificationException e) {",
                "       throw new PeasCoreException(\"PersonalizationSessionController.setDefaultAddress()\",",
                "-          SilverpeasException.ERROR, \"personalizationPeas.EX_CANT_SET_DEFAULT_ADDRESS\",",
                "-          \"aNotifAddressId=\" + aNotifAddressId, e);",
                "+          SilverpeasException.ERROR, CANT_SET_DEFAULT_ADDRESS,",
                "+          A_NOTIF_ADDRESS_ID + aNotifAddressId, e);",
                "     }",
                "@@ -307,7 +296,5 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       PeasCoreException {",
                "-    int userId = Integer.parseInt(getUserId());",
                "-",
                "     try {",
                "-      notificationManager.savePreferences(userId,",
                "-          Integer.parseInt(componentId), -1, Integer.parseInt(notificationId));",
                "+      notificationManager.savePreferences(getUserId(), Integer.parseInt(componentId), -1,",
                "+          notificationId);",
                "     } catch (NotificationException e) {",
                "@@ -324,5 +311,5 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "   private ArrayList<String> getDistinctInstanceIds(String[] givenInstancesIds) {",
                "-    ArrayList<String> instancesIds = new ArrayList<String>();",
                "+    ArrayList<String> instancesIds = new ArrayList<>();",
                "     String instanceId = null;",
                "-    ArrayList<String> intermed = new ArrayList<String>();",
                "+    ArrayList<String> intermed = new ArrayList<>();",
                "@@ -347,3 +334,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "    */",
                "-  public ArrayList<Properties> getInstanceList() throws PeasCoreException {",
                "+  public List<Properties> getInstanceList() throws PeasCoreException {",
                "@@ -355,3 +342,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "     // Create the final ArrayList",
                "-    ArrayList<Properties> ar = new ArrayList<Properties>(instancesIds.length);",
                "+    ArrayList<Properties> ar = new ArrayList<>(instancesIds.length);",
                "@@ -369,4 +356,4 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "-        p.setProperty(\"instanceId\", extractLastNumber(instanceId));",
                "-        p.setProperty(\"fullName\", notificationManager.getComponentFullName(instanceId));",
                "+        p.setProperty(\"instanceId\", String.valueOf(ComponentInst.getComponentLocalId(instanceId)));",
                "+        p.setProperty(PROPERTY_FULL_NAME, notificationManager.getComponentFullName(instanceId));",
                "         ar.add(p);",
                "@@ -375,11 +362,4 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "-      Arrays.sort(componentList, new Comparator<Properties>() {",
                "-",
                "-        @Override",
                "-        public int compare(Properties o1,",
                "-            Properties o2) {",
                "-          return o1.getProperty(\"fullName\").compareTo(o2.getProperty(\"fullName\"));",
                "-          }",
                "-                });",
                "-      sortedComponentList = new ArrayList<Properties>(componentList.length);",
                "+      Arrays.sort(componentList, Comparator.comparing(o -> o.getProperty(PROPERTY_FULL_NAME)));",
                "+      sortedComponentList = new ArrayList<>(componentList.length);",
                "@@ -388,3 +368,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "-        pp.setProperty(\"name\", componentList[i].getProperty(\"fullName\"));",
                "+        pp.setProperty(\"name\", componentList[i].getProperty(PROPERTY_FULL_NAME));",
                "         pp.setProperty(\"id\", componentList[i].getProperty(\"instanceId\"));",
                "@@ -399,34 +379,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "-  /**",
                "-   * Extract the last number from the string",
                "-   * @param chaine The String to clean",
                "-   * @return the clean String Example 1 : kmelia47 -> 47 Example 2 : b2b34 -> 34",
                "-   */",
                "-  static String extractLastNumber(String chaine) {",
                "-    String s = \"\";",
                "-",
                "-    for (int i = 0; i < chaine.length(); i++) {",
                "-      char car = chaine.charAt(i);",
                "-",
                "-      switch (car) {",
                "-        case '0':",
                "-        case '1':",
                "-        case '2':",
                "-        case '3':",
                "-        case '4':",
                "-        case '5':",
                "-        case '6':",
                "-        case '7':",
                "-        case '8':",
                "-        case '9':",
                "-          s = s + car;",
                "-          break;",
                "-        default:",
                "-          s = \"\";",
                "-      }",
                "-    }",
                "-    return s;",
                "-  }",
                "-",
                "-  public String buildOptions(ArrayList<Properties> ar,",
                "+  public String buildOptions(List<Properties> ar,",
                "       String selectValue,",
                "@@ -436,3 +385,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "-  public String buildOptions(ArrayList<Properties> ar,",
                "+  public String buildOptions(List<Properties> ar,",
                "       String selectValue,",
                "@@ -443,3 +392,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "     String selected;",
                "-    ArrayList<Properties> arToDisplay = ar;",
                "+    List<Properties> arToDisplay = ar;",
                "     int i;",
                "@@ -457,11 +406,4 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       Properties[] theList = ar.toArray(new Properties[ar.size()]);",
                "-      Arrays.sort(theList, new Comparator<Properties>() {",
                "-",
                "-        @Override",
                "-        public int compare(Properties o1, Properties o2) {",
                "-          return o1.getProperty(\"name\").toUpperCase().compareTo(",
                "-              o2.getProperty(\"name\").toUpperCase());",
                "-          }",
                "-                });",
                "-      arToDisplay = new ArrayList<Properties>(theList.length);",
                "+      Arrays.sort(theList, Comparator.comparing(o -> o.getProperty(\"name\").toUpperCase()));",
                "+      arToDisplay = new ArrayList<>(theList.length);",
                "       for (i = 0; i < theList.length; i++) {",
                "@@ -488,5 +430,5 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "     UserFull valret = null;",
                "-    String IdUserCur = getUserId();",
                "-    if (StringUtil.isDefined(IdUserCur)) {",
                "-      valret = getOrganisationController().getUserFull(IdUserCur);",
                "+    String idUserCur = getUserId();",
                "+    if (StringUtil.isDefined(idUserCur)) {",
                "+      valret = getOrganisationController().getUserFull(idUserCur);",
                "     }",
                "@@ -498,9 +440,8 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "     if (!ArrayUtil.isEmpty(channels)) {",
                "-      int notifAddressId = 0;",
                "+      String addressId = null;",
                "       try {",
                "-        int userId = Integer.parseInt(getUserId());",
                "-        notificationManager.deleteAllAddress(userId);",
                "+        notificationManager.deleteAllDefaultAddress(getUserId());",
                "         for (final String channel : channels) {",
                "-          notifAddressId = Integer.parseInt(channel);",
                "-          notificationManager.addAddress(notifAddressId, userId);",
                "+          addressId = channel;",
                "+          notificationManager.addDefaultAddress(addressId, getUserId());",
                "         }",
                "@@ -508,4 +449,4 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "         throw new PeasCoreException(\"PersonalizationSessionController.setDefaultAddress()\",",
                "-            SilverpeasException.ERROR, \"personalizationPeas.EX_CANT_SET_DEFAULT_ADDRESS\",",
                "-            \"aNotifAddressId=\" + notifAddressId, e);",
                "+            SilverpeasException.ERROR, CANT_SET_DEFAULT_ADDRESS,",
                "+            A_NOTIF_ADDRESS_ID + addressId, e);",
                "       }",
                "@@ -529,3 +470,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "           \"PersonalizationSessionController.saveDelayedUserNotificationFrequency()\",",
                "-          SilverpeasException.ERROR, \"personalizationPeas.EX_CANT_SET_DEFAULT_ADDRESS\",",
                "+          SilverpeasException.ERROR, CANT_SET_DEFAULT_ADDRESS,",
                "           \"userId=\" + getUserId(), e);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/personalization/servlets/PersoPeasRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/personalization/servlets/PersoPeasRequestRouter.java",
                "index c43d380b5f..8573843695 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/personalization/servlets/PersoPeasRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/personalization/servlets/PersoPeasRequestRouter.java",
                "@@ -25,18 +25,14 @@ package org.silverpeas.web.personalization.servlets;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-",
                "+import org.silverpeas.core.util.LocalizationBundle;",
                "+import org.silverpeas.core.web.http.HttpRequest;",
                " import org.silverpeas.core.web.mvc.controller.ComponentContext;",
                " import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "+import org.silverpeas.core.web.mvc.controller.PeasCoreException;",
                " import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;",
                " import org.silverpeas.web.personalization.control.PersonalizationSessionController;",
                "-import org.silverpeas.core.util.LocalizationBundle;",
                "-import org.silverpeas.core.web.http.HttpRequest;",
                "-import java.util.ArrayList;",
                "+import javax.servlet.http.HttpServletRequest;",
                "+import java.util.List;",
                " import java.util.Properties;",
                "-/**",
                "- * Class declaration",
                "- * @author",
                "- */",
                " public class PersoPeasRequestRouter extends",
                "@@ -45,10 +41,5 @@ public class PersoPeasRequestRouter extends",
                "   private static final long serialVersionUID = 1L;",
                "+  private static final String VALIDATION_MESSAGE = \"validationMessage\";",
                "+  private static final String VALIDATION_UPDATE_KEY = \"GML.validation.update\";",
                "-  /**",
                "-   * Method declaration",
                "-   * @param mainSessionCtrl",
                "-   * @param componentContext",
                "-   * @return",
                "-   *",
                "-   */",
                "   @Override",
                "@@ -81,4 +72,3 @@ public class PersoPeasRequestRouter extends",
                "       final PersonalizationSessionController personalizationScc, final HttpRequest request) {",
                "-    String destination = \"\";",
                "-",
                "+    String destination;",
                "     try {",
                "@@ -103,3 +93,3 @@ public class PersoPeasRequestRouter extends",
                "   private void saveChannels(final PersonalizationSessionController personalizationScc,",
                "-      final HttpServletRequest request) throws Exception {",
                "+      final HttpServletRequest request) throws PeasCoreException {",
                "     final String selectedChannels = request.getParameter(\"SelectedChannels\");",
                "@@ -108,4 +98,4 @@ public class PersoPeasRequestRouter extends",
                "     personalizationScc.saveDelayedUserNotificationFrequency(selectedFrequency);",
                "-    request.setAttribute(\"validationMessage\",",
                "-        personalizationScc.getMultilang().getString(\"GML.validation.update\"));",
                "+    request.setAttribute(VALIDATION_MESSAGE,",
                "+        personalizationScc.getMultilang().getString(VALIDATION_UPDATE_KEY));",
                "     setCommonRequestAttributes(personalizationScc, request);",
                "@@ -114,5 +104,5 @@ public class PersoPeasRequestRouter extends",
                "   private void parametrizeNotification(final PersonalizationSessionController personalizationScc,",
                "-      final HttpServletRequest request) throws Exception {",
                "-    String action = (String) request.getParameter(\"Action\");",
                "-    String id = (String) request.getParameter(\"id\");",
                "+      final HttpServletRequest request) throws PeasCoreException {",
                "+    String action = request.getParameter(\"Action\");",
                "+    String id = request.getParameter(\"id\");",
                "     NotificationParametrizationAction parametrizationAction =",
                "@@ -135,3 +125,3 @@ public class PersoPeasRequestRouter extends",
                "         personalizationScc.setDefaultAddress(id);",
                "-        request.setAttribute(\"validationMessage\", messages.getString(\"GML.validation.update\"));",
                "+        request.setAttribute(VALIDATION_MESSAGE, messages.getString(VALIDATION_UPDATE_KEY));",
                "         break;",
                "@@ -139,3 +129,3 @@ public class PersoPeasRequestRouter extends",
                "         personalizationScc.saveDelayedUserNotificationFrequency(id);",
                "-        request.setAttribute(\"validationMessage\", messages.getString(\"GML.validation.update\"));",
                "+        request.setAttribute(VALIDATION_MESSAGE, messages.getString(VALIDATION_UPDATE_KEY));",
                "         break;",
                "@@ -143,3 +133,5 @@ public class PersoPeasRequestRouter extends",
                "         personalizationScc.deleteNotifAddress(id);",
                "-        request.setAttribute(\"validationMessage\", messages.getString(\"GML.validation.delete\"));",
                "+        request.setAttribute(VALIDATION_MESSAGE, messages.getString(\"GML.validation.delete\"));",
                "+        break;",
                "+      default:",
                "         break;",
                "@@ -150,4 +142,4 @@ public class PersoPeasRequestRouter extends",
                "   private void setCommonRequestAttributes(final PersonalizationSessionController personalizationScc,",
                "-      final HttpServletRequest request) throws Exception {",
                "-    ArrayList<Properties> notifAddresses = personalizationScc.getNotificationAddresses();",
                "+      final HttpServletRequest request) throws PeasCoreException {",
                "+    List<Properties> notifAddresses = personalizationScc.getNotificationAddresses();",
                "     request.setAttribute(\"notificationAddresses\", notifAddresses);",
                "@@ -156,7 +148,2 @@ public class PersoPeasRequestRouter extends",
                "-  /**",
                "-   * This method handles data about delayed notification",
                "-   * @param componentSC",
                "-   * @param request",
                "-   */",
                "   private void performDelayedNotificationFrequency(",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasSessionController.java b/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasSessionController.java",
                "index f4ae43ab17..91f45cd383 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasSessionController.java",
                "@@ -38,5 +38,5 @@ import org.silverpeas.core.date.period.PeriodType;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.NotificationParameters;",
                " import org.silverpeas.core.notification.user.client.NotificationSender;",
                " import org.silverpeas.core.notification.user.client.UserRecipient;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                " import org.silverpeas.core.pdc.pdc.model.AxisHeader;",
                "@@ -512,3 +512,3 @@ public class SilverStatisticsPeasSessionController extends AbstractComponentSess",
                "-      notificationSender.notifyUser(NotificationParameters.ADDRESS_BASIC_POPUP, notifMetaData);",
                "+      notificationSender.notifyUser(BuiltInNotifAddress.BASIC_POPUP.getId(), notifMetaData);",
                "     } catch (Exception ex) {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/todo/control/ToDoSessionController.java b/core-war/src/main/java/org/silverpeas/web/todo/control/ToDoSessionController.java",
                "index d7cd405e6f..043072ab86 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/todo/control/ToDoSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/todo/control/ToDoSessionController.java",
                "@@ -190,3 +190,3 @@ public class ToDoSessionController extends AbstractComponentSessionController {",
                "       NotificationMetaData notifMetaData = new NotificationMetaData(",
                "-          NotificationParameters.NORMAL, title, text);",
                "+          NotificationParameters.PRIORITY_NORMAL, title, text);",
                "       notifMetaData.setSender(getUserId());",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/authentication/SilverpeasSessionOpener.java b/core-web/src/main/java/org/silverpeas/core/web/authentication/SilverpeasSessionOpener.java",
                "index d6d0479749..d442d1216f 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/authentication/SilverpeasSessionOpener.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/authentication/SilverpeasSessionOpener.java",
                "@@ -33,2 +33,3 @@ import org.silverpeas.core.notification.user.client.NotificationSender;",
                " import org.silverpeas.core.notification.user.client.UserRecipient;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                " import org.silverpeas.core.security.authentication.Authentication;",
                "@@ -302,3 +303,3 @@ public class SilverpeasSessionOpener {",
                "     // Put a graphicElementFactory in the session",
                "-    GraphicElementFactory gef = new GraphicElementFactory(controller);",
                "+    final GraphicElementFactory gef = new GraphicElementFactory(controller);",
                "     if (StringUtil.isDefined(personalWs)) {",
                "@@ -312,3 +313,3 @@ public class SilverpeasSessionOpener {",
                "     String sDirectAccessCompo = request.getParameter(\"DirectAccessCompo\");",
                "-    if (controller.isAppInMaintenance() && !controller.getCurrentUserDetail().isAccessAdmin()) {",
                "+    if (MainSessionController.isAppInMaintenance() && !controller.getCurrentUserDetail().isAccessAdmin()) {",
                "       absoluteUrl.append(\"/admin/jsp/appInMaintenance.jsp\");",
                "@@ -371,3 +372,3 @@ public class SilverpeasSessionOpener {",
                "     NotificationSender sender = new NotificationSender(null);",
                "-    NotificationMetaData notifMetaData = new NotificationMetaData(NotificationParameters.NORMAL,",
                "+    NotificationMetaData notifMetaData = new NotificationMetaData(NotificationParameters.PRIORITY_NORMAL,",
                "         messages.getString(\"passwordExpirationAlert\"), messages",
                "@@ -376,3 +377,3 @@ public class SilverpeasSessionOpener {",
                "     notifMetaData.addUserRecipient(new UserRecipient(userId));",
                "-    sender.notifyUser(NotificationParameters.ADDRESS_BASIC_POPUP, notifMetaData);",
                "+    sender.notifyUser(BuiltInNotifAddress.BASIC_POPUP.getId(), notifMetaData);",
                "   }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "index 78208f5799..3681b63909 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "@@ -30,3 +30,2 @@ import org.silverpeas.core.contribution.model.ContributionIdentifier;",
                " import org.silverpeas.core.contribution.model.CoreContributionType;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                " import org.silverpeas.core.i18n.I18NHelper;",
                "@@ -37,2 +36,3 @@ import org.silverpeas.core.security.token.Token;",
                " import org.silverpeas.core.silverstatistics.volume.service.SilverStatisticsManager;",
                "+import org.silverpeas.core.silvertrace.SilverTrace;",
                " import org.silverpeas.core.util.JSONCodec;",
                "@@ -351,3 +351,3 @@ public abstract class ComponentRequestRouter<T extends ComponentSessionControlle",
                "             new PeasCoreException(\"ComponentRequestRouter.redirectService\",",
                "-                SilverpeasException.ERROR, \"peasCore.EX_REDIRECT_SERVICE_FAILED\",",
                "+                SilverTrace.TRACE_LEVEL_ERROR, \"peasCore.EX_REDIRECT_SERVICE_FAILED\",",
                "                 \"Destination=\" + destination, e));",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/session/SessionManager.java b/core-web/src/main/java/org/silverpeas/core/web/session/SessionManager.java",
                "index 6ecd399db3..83e7b80a7f 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/session/SessionManager.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/session/SessionManager.java",
                "@@ -41,2 +41,3 @@ import org.silverpeas.core.notification.user.client.NotificationSender;",
                " import org.silverpeas.core.notification.user.client.UserRecipient;",
                "+import org.silverpeas.core.notification.user.client.constant.BuiltInNotifAddress;",
                " import org.silverpeas.core.notification.user.server.channel.popup.PopupMessageService;",
                "@@ -448,3 +449,3 @@ public class SessionManager implements SessionManagement, Initialization {",
                "-    NotificationMetaData notifMetaData = new NotificationMetaData(NotificationParameters.NORMAL,",
                "+    NotificationMetaData notifMetaData = new NotificationMetaData(NotificationParameters.PRIORITY_NORMAL,",
                "         msgTitle, bundle.getString(\"EndOfSessionNotificationMsgText\"));",
                "@@ -453,3 +454,3 @@ public class SessionManager implements SessionManagement, Initialization {",
                "     notifMetaData.setSender(bundle.getString(\"administrator\"));",
                "-    notifSender.notifyUser(NotificationParameters.ADDRESS_BASIC_POPUP, notifMetaData);",
                "+    notifSender.notifyUser(BuiltInNotifAddress.BASIC_POPUP.getId(), notifMetaData);",
                "   }"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/notification/user/UserNotification.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationAddress.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManager.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationParameters.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/BuiltInNotifAddress.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifChannel.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifMediaType.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/constant/NotifMessageType.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/delayed/model/DelayedNotificationData.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/delayed/model/DelayedNotificationUserSetting.java",
                "core-api/src/main/java/org/silverpeas/core/persistence/jdbc/AbstractTable.java",
                "core-library/src/integration-test/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegateIT.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java",
                "core-library/src/main/java/org/silverpeas/core/admin/user/UserRegistrationServiceLegacy.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/attachment/ScheduledReservedFile.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/NullUserNotification.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/SimpleUserNotification.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/builder/helper/UserNotificationHelper.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/builder/helper/UserNotificationManager.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifAddressRow.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifAddressTable.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifDefaultAddressTable.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/model/NotifPreferenceTable.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/delayed/delegate/DelayedNotificationDelegate.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServer.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerException.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/NotificationServerUtil.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/AbstractListener.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/popup/POPUPListener.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILListener.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/smtp/SMTPListener.java",
                "core-services/workflow/src/main/java/org/silverpeas/core/workflow/engine/task/TaskManagerImpl.java",
                "core-war/src/main/java/org/silverpeas/web/calendar/OutlookSyncCalendarServlet.java",
                "core-war/src/main/java/org/silverpeas/web/directory/control/DirectorySessionController.java",
                "core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/popup/POPUPSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/Notification.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java",
                "core-war/src/main/java/org/silverpeas/web/personalization/control/PersonalizationSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/personalization/servlets/PersoPeasRequestRouter.java",
                "core-war/src/main/java/org/silverpeas/web/silverstatistics/control/SilverStatisticsPeasSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/todo/control/ToDoSessionController.java",
                "core-web/src/main/java/org/silverpeas/core/web/authentication/SilverpeasSessionOpener.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/route/ComponentRequestRouter.java",
                "core-web/src/main/java/org/silverpeas/core/web/session/SessionManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9884": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, file, directory, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9884",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "11b43cba74b56254e7af807147905e63f5509214",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1543913291,
            "hunks": 15,
            "message": "Feature #9884 Now, the subject of a notification is by default defined by the property GML.st.notification.subject in the general localization bundle in Silverpeas. This property can be overriden in each Silverpeas component by setting in their own bundle the property custom.st.notification.subject. By default, this property name is returned by the method AbstractTemplateUserNotificationBuilder#getBundleSubjectKey(). The value of these two properties are a StringTemplate expression. In order to access the properties of the resource about which a notification is sent, in the subject setting, the object representing that resource is now passed into the StringTemplate instance used by the notification builder. To keep the flexibility in the setting of the notification subject with the notification builder, the method getBundleSubjectKey() can be overriden to specify a custom property other than custom.st.notification.subject.",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/calendar/notification/user/CalendarEventOccurrenceNotifyUserNotificationBuilder.java b/core-library/src/main/java/org/silverpeas/core/calendar/notification/user/CalendarEventOccurrenceNotifyUserNotificationBuilder.java",
                "index a83ff6272b..92829e5d69 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/calendar/notification/user/CalendarEventOccurrenceNotifyUserNotificationBuilder.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/calendar/notification/user/CalendarEventOccurrenceNotifyUserNotificationBuilder.java",
                "@@ -56,8 +56,2 @@ public class CalendarEventOccurrenceNotifyUserNotificationBuilder",
                "-  @Override",
                "-  protected String getBundleSubjectKey() {",
                "-    return \"event.subject.alert\";",
                "-  }",
                "-",
                "-",
                "   @Override",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java",
                "index dbecd7cd93..bfb4c946de 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java",
                "@@ -60,2 +60,10 @@ public abstract class AbstractTemplateUserNotificationBuilder<T> extends",
                "+  /**",
                "+   * The property in the settings from which the subject of the notification will be set. This",
                "+   * key is to set a custom subject peculiar to a given component. If no such property exists or",
                "+   * if this property isn't valued, then the default notification subject will be taken (it is",
                "+   * defined by the property GML.st.notification.subject).",
                "+   */",
                "+  protected static final String CUSTOM_NOTIFICATION_SUBJECT = \"custom.st.notification.subject\";",
                "+  protected static final String DEFAULT_NOTIFICATION_SUBJECT = \"GML.st.notification.subject\";",
                "   private final Map<String, SilverpeasTemplate> templates = new HashMap<>();",
                "@@ -71,10 +79,40 @@ public abstract class AbstractTemplateUserNotificationBuilder<T> extends",
                "-  protected abstract String getBundleSubjectKey();",
                "+  /**",
                "+   * The name of the property in the bundle returned by the {@link #getBundle()} method and that",
                "+   * specifies a custom subject for the notifications built by this builder. By Default the",
                "+   * custom subject is defined by the property <code>custom.st.notification.subject</code> in the",
                "+   * bundle returned by the {@link #getBundle()} method. So this method doesn't require to be",
                "+   * overridden unless to give a different property name; for example, in case there is a different",
                "+   * subject for several kinds of notifications in a given Silverpeas component (and hence several",
                "+   * notification builders).",
                "+   * @return the name of the property in the {@link #getBundle()} bundle that specifies the subject",
                "+   * to use in the notifications built by this builder.",
                "+   */",
                "+  protected String getBundleSubjectKey() {",
                "+    return CUSTOM_NOTIFICATION_SUBJECT;",
                "+  }",
                "+  /**",
                "+   * The title is by default defined by the property <code>GML.st.notification.subject</code> in",
                "+   * the Silverpeas's general localization bundle. The property is valued by a StringTemplate",
                "+   * pattern, so that information about the resource concerned by the notification can be passed.",
                "+   * <p>",
                "+   * It can be overridden by specifying a property",
                "+   * in the bundle returned by {@link #getBundleSubjectKey()} and under the name given by",
                "+   * {@link #getBundleSubjectKey()}. By this way, each component in Silverpeas has a way to",
                "+   * customize the title of the notifications for the resources handled by itself.",
                "+   * </p>",
                "+   * @return the title of the notification. By default, the title is specify globally for all",
                "+   * notifications by the <code>GML.st.notification.subject</code> property.",
                "+   */",
                "   @Override",
                "   protected String getTitle() {",
                "-    if (StringUtils.isBlank(getBundleSubjectKey())) {",
                "-      return super.getTitle();",
                "+    final String subjectKey = getBundleSubjectKey();",
                "+    final String subject;",
                "+    if (StringUtils.isBlank(subjectKey) || !getBundle().containsKey(subjectKey)) {",
                "+      subject = getBundle().getString(DEFAULT_NOTIFICATION_SUBJECT);",
                "+    } else {",
                "+      subject = getBundle().getString(subjectKey);",
                "     }",
                "-    return getBundle().getString(getBundleSubjectKey());",
                "+    return subject;",
                "   }",
                "@@ -111,2 +149,3 @@ public abstract class AbstractTemplateUserNotificationBuilder<T> extends",
                "       template.setAttribute(\"silverpeasURL\", linkUrl);",
                "+      template.setAttribute(\"resource\", resource);",
                "       templates.put(curLanguage, template);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java",
                "index b75c5fcf19..b317c774c7 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java",
                "@@ -287,2 +287,7 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "+  /**",
                "+   * Gets the title of the notification. By overriding this method, the title can be customized. By",
                "+   * default, the title is the one set explicitly in the constructor of this builder.",
                "+   * @return the title of the notification.",
                "+   */",
                "   protected String getTitle() {",
                "@@ -291,2 +296,7 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "+  /**",
                "+   * Gets the content of the notification. By overriding this method, the content can be customized.",
                "+   * By default, the content is the one set explicitly in the constructor of this builder.",
                "+   * @return the content of the notification (aka the message itself).",
                "+   */",
                "   protected String getContent() {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "index 1b05ac9441..7fbf927c64 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "@@ -788,3 +788,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       theExtraParams.put(SUBJECT, params.getTitle());",
                "-    } else if (params.getFromUserId() < 0) {",
                "+    } else if (! params.isFromUserIdDefined()) {",
                "       theMessage.append(multilang.getString(\"subject\")).append(\" : \").append(params.getTitle())",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/socialnetwork/invitation/AbstractInvitationUserNotification.java b/core-library/src/main/java/org/silverpeas/core/socialnetwork/invitation/AbstractInvitationUserNotification.java",
                "index dc67075cdb..400852b7ed 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/socialnetwork/invitation/AbstractInvitationUserNotification.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/socialnetwork/invitation/AbstractInvitationUserNotification.java",
                "@@ -76,2 +76,9 @@ public abstract class AbstractInvitationUserNotification",
                "+  /**",
                "+   * The title is the value of the property defined by {@link #getBundleSubjectKey()} in the",
                "+   * localization bundle referred by  {@link #getBundle()}. If no such property exists, then the",
                "+   * title is the first name of the notification sender.",
                "+   * @return the subject of the notification as defined in the localisation bundle returned by",
                "+   * the {@link #getBundle()} method.",
                "+   */",
                "   @Override",
                "diff --git a/core-services/comment/src/main/java/org/silverpeas/core/comment/service/CommentUserNotification.java b/core-services/comment/src/main/java/org/silverpeas/core/comment/service/CommentUserNotification.java",
                "index a15c6823c3..6117842510 100644",
                "--- a/core-services/comment/src/main/java/org/silverpeas/core/comment/service/CommentUserNotification.java",
                "+++ b/core-services/comment/src/main/java/org/silverpeas/core/comment/service/CommentUserNotification.java",
                "@@ -36,3 +36,2 @@ import org.silverpeas.core.util.LocalizationBundle;",
                " import java.util.Collection;",
                "-import java.util.MissingResourceException;",
                " import java.util.Set;",
                "@@ -93,16 +92,20 @@ public class CommentUserNotification",
                "+  /**",
                "+   * The title is the either the default subject of the notifications as defined in the bundle",
                "+   * returned by {@link #getBundle()} method and by the property given by the",
                "+   * {@link #getBundleSubjectKey()} method or the default subject for the notification about the",
                "+   * comments.",
                "+   * @return the subject of the notification.",
                "+   */",
                "   @Override",
                "   protected String getTitle() {",
                "-    String subject;",
                "-    try {",
                "+    final String subject;",
                "+    if (componentMessages.containsKey(getBundleSubjectKey())) {",
                "       subject = componentMessages.getString(getBundleSubjectKey());",
                "-    } catch (MissingResourceException mre) {",
                "+    } else {",
                "       subject = \"\";",
                "     }",
                "-    if (!isDefined(subject)) {",
                "-      subject =",
                "-          commentService.getComponentMessages(componentMessages.getLocale().getLanguage())",
                "-              .getString(DEFAULT_SUBJECT_COMMENT_ADDING);",
                "-    }",
                "-    return subject;",
                "+    return isDefined(subject) ? subject :",
                "+        commentService.getComponentMessages(componentMessages.getLocale().getLanguage())",
                "+            .getString(DEFAULT_SUBJECT_COMMENT_ADDING);",
                "   }"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/calendar/notification/user/CalendarEventOccurrenceNotifyUserNotificationBuilder.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "core-library/src/main/java/org/silverpeas/core/socialnetwork/invitation/AbstractInvitationUserNotification.java",
                "core-services/comment/src/main/java/org/silverpeas/core/comment/service/CommentUserNotification.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9884": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9884",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d68ff07138606e8091deaec286e4478bfa749a43",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1543303875,
            "hunks": 71,
            "message": "Adding a new Google domain management: - adding the new domain driver - adding UI to manage Google domain - removing ScimDomainService which implementation was exactly those of ExternalDomainService implementation - enabling at UI level the possibility to create a domain according to a registry of domain type - adding to DomainDriver API the providing of user state handled during a synchronization process",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/admin/domain/DomainType.java b/core-api/src/main/java/org/silverpeas/core/admin/domain/DomainType.java",
                "new file mode 100644",
                "index 0000000000..39fbf6484b",
                "--- /dev/null",
                "+++ b/core-api/src/main/java/org/silverpeas/core/admin/domain/DomainType.java",
                "@@ -0,0 +1,28 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+package org.silverpeas.core.admin.domain;",
                "+",
                "+public enum DomainType {",
                "+  LDAP, SQL, SCIM, GOOGLE;",
                "+}",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/admin/domain/DomainTypeRegistry.java b/core-api/src/main/java/org/silverpeas/core/admin/domain/DomainTypeRegistry.java",
                "new file mode 100644",
                "index 0000000000..0c2c978633",
                "--- /dev/null",
                "+++ b/core-api/src/main/java/org/silverpeas/core/admin/domain/DomainTypeRegistry.java",
                "@@ -0,0 +1,76 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+package org.silverpeas.core.admin.domain;",
                "+",
                "+import org.silverpeas.core.util.ServiceProvider;",
                "+",
                "+import javax.annotation.PostConstruct;",
                "+import javax.inject.Singleton;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "+",
                "+/**",
                "+ * Register of all domain types available into Silverpeas.",
                "+ * <p>",
                "+ *   By default, {@link DomainType#LDAP} and {@link DomainType#SQL} are already registered.",
                "+ * </p>",
                "+ */",
                "+@Singleton",
                "+public class DomainTypeRegistry {",
                "+",
                "+  private final Set<DomainType> registry = new HashSet<>();",
                "+",
                "+  public static DomainTypeRegistry get() {",
                "+    return ServiceProvider.getService(DomainTypeRegistry.class);",
                "+  }",
                "+",
                "+  @PostConstruct",
                "+  protected void setupDefaults() {",
                "+    registry.add(DomainType.LDAP);",
                "+    registry.add(DomainType.SQL);",
                "+  }",
                "+",
                "+  /**",
                "+   * Hidden constructor.",
                "+   */",
                "+  private DomainTypeRegistry() {",
                "+  }",
                "+",
                "+  /**",
                "+   * Adds a domain type into registry.",
                "+   * @param type the domain type.",
                "+   */",
                "+  public void add(final DomainType type) {",
                "+    registry.add(type);",
                "+  }",
                "+",
                "+  /**",
                "+   * Indicates if a domain type is registered.",
                "+   * @param type a domain type.",
                "+   * @return true if registered, false otherwise.",
                "+   */",
                "+  public boolean exists(final DomainType type) {",
                "+    return registry.contains(type);",
                "+  }",
                "+}",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/admin/domain/DomainServiceProviderIT.java b/core-library/src/integration-test/java/org/silverpeas/core/admin/domain/DomainServiceProviderIT.java",
                "index 9c34a65305..49dacac7d1 100644",
                "--- a/core-library/src/integration-test/java/org/silverpeas/core/admin/domain/DomainServiceProviderIT.java",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/admin/domain/DomainServiceProviderIT.java",
                "@@ -46,6 +46,2 @@ public class DomainServiceProviderIT {",
                "-  @Inject",
                "-  @Named(\"scimDomainService\")",
                "-  private DomainService scimDomainService;",
                "-",
                "   @Inject",
                "@@ -79,11 +75,14 @@ public class DomainServiceProviderIT {",
                "     // It exists two implementations today",
                "-    assertThat(ServiceProvider.getAllServices(DomainService.class),",
                "-        hasSize(DomainType.values().length));",
                "+    assertThat(ServiceProvider.getAllServices(DomainService.class), hasSize(2));",
                "     // Verifying the type for SCIM",
                "     DomainService testScimDomainService = DomainServiceProvider.getDomainService(DomainType.SCIM);",
                "-    assertThat(testScimDomainService, sameInstance(testScimDomainService));",
                "-    assertThat(testScimDomainService, instanceOf(ScimDomainService.class));",
                "+    assertThat(testScimDomainService, sameInstance(externalDomainService));",
                "+    assertThat(testScimDomainService, instanceOf(ExternalDomainService.class));",
                "+    // Verifying the type for Google",
                "+    DomainService testGoogleDomainService = DomainServiceProvider.getDomainService(DomainType.GOOGLE);",
                "+    assertThat(testGoogleDomainService, sameInstance(externalDomainService));",
                "+    assertThat(testGoogleDomainService, instanceOf(ExternalDomainService.class));",
                "     // Verifying the type for EXTERNAL",
                "     DomainService testExternalDomainService =",
                "-        DomainServiceProvider.getDomainService(DomainType.EXTERNAL);",
                "+        DomainServiceProvider.getDomainService(DomainType.LDAP);",
                "     assertThat(testExternalDomainService, sameInstance(externalDomainService));",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java",
                "index f7d9b04b4f..9caa7f4ab1 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java",
                "@@ -128,3 +128,3 @@ public interface DomainDriver {",
                "      */",
                "-    public static final long ACTION_PUSH_USER = 0x00010000;",
                "+    public static final long ACTION_RECEIVE_USER = 0x00010000;",
                "     /**",
                "@@ -133,3 +133,13 @@ public interface DomainDriver {",
                "      */",
                "-    public static final long ACTION_PUSH_GROUP = 0x00020000;",
                "+    public static final long ACTION_RECEIVE_GROUP = 0x00020000;",
                "+    /**",
                "+     * Updates user Silverpeas infos from LDAP DB",
                "+     * @see #getDriverActions",
                "+     */",
                "+    public static final long ACTION_UNSYNCHRO_USER = 0x00040000;",
                "+    /**",
                "+     * Updates group Silverpeas infos from LDAP DB",
                "+     * @see #getDriverActions",
                "+     */",
                "+    public static final long ACTION_UNSYNCHRO_GROUP = 0x00080000;",
                "     /**",
                "@@ -145,6 +155,8 @@ public interface DomainDriver {",
                "         ACTION_READ_USER | ACTION_READ_GROUP | ACTION_IMPORT_USER | ACTION_SYNCHRO_USER |",
                "-            ACTION_REMOVE_USER | ACTION_IMPORT_GROUP | ACTION_SYNCHRO_GROUP | ACTION_REMOVE_GROUP;",
                "-    public static final long ACTION_MASK_RO_FROM_PUSH =",
                "-        ACTION_READ_USER | ACTION_READ_GROUP | ACTION_PUSH_USER | ACTION_REMOVE_USER |",
                "-            ACTION_PUSH_GROUP | ACTION_REMOVE_GROUP;",
                "+            ACTION_UNSYNCHRO_USER | ACTION_REMOVE_USER | ACTION_IMPORT_GROUP |",
                "+            ACTION_SYNCHRO_GROUP | ACTION_UNSYNCHRO_GROUP | ACTION_REMOVE_GROUP;",
                "+    public static final long ACTION_MASK_RO_PULL_USER = ACTION_READ_USER | ACTION_SYNCHRO_USER;",
                "+    public static final long ACTION_MASK_RO_LISTENER =",
                "+        ACTION_READ_USER | ACTION_READ_GROUP | ACTION_RECEIVE_USER | ACTION_REMOVE_USER |",
                "+            ACTION_RECEIVE_GROUP | ACTION_REMOVE_GROUP;",
                "     public static final long ACTION_MASK_MIXED_GROUPS =",
                "@@ -220,3 +232,3 @@ public interface DomainDriver {",
                "-  UserDetail getUser(String userId) throws AdminException;",
                "+  UserDetail getUser(String specificId) throws AdminException;",
                "@@ -224,8 +236,8 @@ public interface DomainDriver {",
                "    * Retrieve user information from database",
                "-   * @param userId The user id as stored in the database",
                "+   * @param specificId The user id as stored in the database",
                "    * @return The full User object that contain ALL user informations",
                "    */",
                "-  UserFull getUserFull(String userId) throws AdminException;",
                "+  UserFull getUserFull(String specificId) throws AdminException;",
                "-  String[] getUserMemberGroupIds(String userId) throws AdminException;",
                "+  String[] getUserMemberGroupIds(String specificId) throws AdminException;",
                "@@ -249,3 +261,3 @@ public interface DomainDriver {",
                "-  GroupDetail getGroup(String groupId) throws AdminException;",
                "+  GroupDetail getGroup(String specificId) throws AdminException;",
                "@@ -266,3 +278,2 @@ public interface DomainDriver {",
                "   void resetEncryptedPassword(UserDetail user, String encryptedPassword) throws AdminException;",
                "-",
                " }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java",
                "index ddbd09bc50..da3b7b83cb 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java",
                "@@ -190,3 +190,3 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "   @Override",
                "-  public UserDetail getUser(String userId) throws AdminException {",
                "+  public UserDetail getUser(String specificId) throws AdminException {",
                "     return null;",
                "@@ -286,4 +286,4 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "   @Override",
                "-  public UserFull getUserFull(String userId) throws AdminException {",
                "-    return loadUserEntity(userId, UserFull.class);",
                "+  public UserFull getUserFull(String specificId) throws AdminException {",
                "+    return loadUserEntity(specificId, UserFull.class);",
                "   }",
                "@@ -291,3 +291,3 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "   @Override",
                "-  public String[] getUserMemberGroupIds(String userId) throws AdminException {",
                "+  public String[] getUserMemberGroupIds(String specificId) throws AdminException {",
                "     return ArrayUtil.EMPTY_STRING_ARRAY;",
                "@@ -455,3 +455,3 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "    * return group with given id (contains list of user ids for this group)",
                "-   * @param groupId",
                "+   * @param specificId",
                "    * @return GroupDetail",
                "@@ -459,3 +459,3 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "   @Override",
                "-  public GroupDetail getGroup(String groupId) throws AdminException {",
                "+  public GroupDetail getGroup(String specificId) throws AdminException {",
                "     GroupDetail group;",
                "@@ -464,5 +464,5 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "       // Get the user information",
                "-      GroupDetail gr = groupDAO.getGroup(connection, groupId);",
                "+      GroupDetail gr = groupDAO.getGroup(connection, specificId);",
                "       if (gr == null) {",
                "-        throw new AdminException(unknown(GROUP, groupId));",
                "+        throw new AdminException(unknown(GROUP, specificId));",
                "       }",
                "@@ -474,3 +474,3 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "       // Fill silverpeas info of group details",
                "-      group.setId(groupId);",
                "+      group.setId(specificId);",
                "       group.setSpecificId(gr.getSpecificId());",
                "@@ -478,3 +478,3 @@ public class DomainDriverManager extends AbstractDomainDriver {",
                "     } catch (SQLException e) {",
                "-      throw new AdminException(failureOnGetting(GROUP, groupId), e);",
                "+      throw new AdminException(failureOnGetting(GROUP, specificId), e);",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainServiceProvider.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainServiceProvider.java",
                "index 28f28138b9..c619acee75 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainServiceProvider.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/DomainServiceProvider.java",
                "@@ -41,6 +41,2 @@ public class DomainServiceProvider {",
                "-  @Inject",
                "-  @Named(\"scimDomainService\")",
                "-  private DomainService scimDomainService;",
                "-",
                "   @Inject",
                "@@ -71,4 +67,4 @@ public class DomainServiceProvider {",
                "       case SCIM:",
                "-        return getProvider().scimDomainService;",
                "-      case EXTERNAL:",
                "+      case GOOGLE:",
                "+      case LDAP:",
                "         return getProvider().externalDomainService;",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/ScimDomainService.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/ScimDomainService.java",
                "deleted file mode 100644",
                "index c41d454327..0000000000",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/ScimDomainService.java",
                "+++ /dev/null",
                "@@ -1,74 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.admin.domain;",
                "-",
                "-import org.silverpeas.core.admin.domain.exception.DomainConflictException;",
                "-import org.silverpeas.core.admin.domain.exception.DomainCreationException;",
                "-import org.silverpeas.core.admin.domain.exception.DomainDeletionException;",
                "-import org.silverpeas.core.admin.domain.model.Domain;",
                "-import org.silverpeas.core.admin.service.AdminException;",
                "-import org.silverpeas.core.util.StringUtil;",
                "-",
                "-import javax.inject.Named;",
                "-import javax.inject.Singleton;",
                "-",
                "-@Singleton",
                "-@Named(\"scimDomainService\")",
                "-public class ScimDomainService extends AbstractDomainService {",
                "-",
                "-  @Override",
                "-  public String createDomain(Domain domainToCreate)",
                "-      throws DomainCreationException, DomainConflictException {",
                "-    // Check domain name",
                "-    try {",
                "-      checkDomainName(domainToCreate.getName());",
                "-    } catch (AdminException e) {",
                "-      throw new DomainCreationException(\"ScimDomainService.createDomain\", domainToCreate.toString(),",
                "-          e);",
                "-    }",
                "-",
                "-    String id;",
                "-    domainToCreate.setId(\"-1\");",
                "-    id = registerDomain(domainToCreate);",
                "-    if (!StringUtil.isDefined(id)) {",
                "-      throw new DomainCreationException(\"ScimDomainService.createDomain()\",",
                "-          domainToCreate.toString());",
                "-    }",
                "-",
                "-    return id;",
                "-  }",
                "-",
                "-  @Override",
                "-  public String deleteDomain(Domain domainToRemove) throws DomainDeletionException {",
                "-    String id;",
                "-    id = unRegisterDomain(domainToRemove);",
                "-    if (!StringUtil.isDefined(id)) {",
                "-      throw new DomainDeletionException(\"ScimDomainService.deleteDomain()\",",
                "-          domainToRemove.toString());",
                "-    }",
                "-",
                "-    return id;",
                "-  }",
                "-",
                "-}",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SilverpeasDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SilverpeasDriver.java",
                "index 5e11420e28..d15e5ff8e2 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SilverpeasDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SilverpeasDriver.java",
                "@@ -186,7 +186,7 @@ public class SilverpeasDriver extends AbstractDomainDriver implements Silverpeas",
                "   @Transactional(Transactional.TxType.MANDATORY)",
                "-  public UserDetail getUser(String userId) {",
                "-    if (!StringUtil.isInteger(userId)) {",
                "+  public UserDetail getUser(String specificId) {",
                "+    if (!StringUtil.isInteger(specificId)) {",
                "       return null;",
                "     }",
                "-    SPUser spUser = spUserRepository.getById(userId);",
                "+    SPUser spUser = spUserRepository.getById(specificId);",
                "     return convertToUser(spUser, new UserDetail());",
                "@@ -196,7 +196,7 @@ public class SilverpeasDriver extends AbstractDomainDriver implements Silverpeas",
                "   @Transactional(Transactional.TxType.MANDATORY)",
                "-  public UserFull getUserFull(String userId) {",
                "-    if (!StringUtil.isInteger(userId)) {",
                "+  public UserFull getUserFull(String specificId) {",
                "+    if (!StringUtil.isInteger(specificId)) {",
                "       return null;",
                "     }",
                "-    SPUser user = spUserRepository.getById(userId);",
                "+    SPUser user = spUserRepository.getById(specificId);",
                "     UserFull userFull = new UserFull(this);",
                "@@ -224,3 +224,3 @@ public class SilverpeasDriver extends AbstractDomainDriver implements Silverpeas",
                "   @Override",
                "-  public String[] getUserMemberGroupIds(String userId) throws AdminException {",
                "+  public String[] getUserMemberGroupIds(String specificId) throws AdminException {",
                "     return new String[0];",
                "@@ -371,4 +371,4 @@ public class SilverpeasDriver extends AbstractDomainDriver implements Silverpeas",
                "   @Transactional(Transactional.TxType.MANDATORY)",
                "-  public GroupDetail getGroup(String groupId) {",
                "-    SPGroup gr = spGroupRepository.getById(groupId);",
                "+  public GroupDetail getGroup(String specificId) {",
                "+    SPGroup gr = spGroupRepository.getById(specificId);",
                "     return convertToGroup(gr);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "new file mode 100644",
                "index 0000000000..6eadde903d",
                "--- /dev/null",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "@@ -0,0 +1,122 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+",
                "+package org.silverpeas.core.admin.domain.driver.googledriver;",
                "+",
                "+import com.google.api.client.auth.oauth2.Credential;",
                "+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;",
                "+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;",
                "+import com.google.api.client.http.HttpTransport;",
                "+import com.google.api.client.http.javanet.NetHttpTransport;",
                "+import com.google.api.client.json.JsonFactory;",
                "+import com.google.api.client.json.jackson2.JacksonFactory;",
                "+import com.google.api.services.admin.directory.Directory;",
                "+import com.google.api.services.admin.directory.DirectoryScopes;",
                "+import com.google.api.services.admin.directory.model.User;",
                "+import org.silverpeas.core.admin.service.AdminException;",
                "+",
                "+import java.io.FileInputStream;",
                "+import java.io.IOException;",
                "+import java.io.InputStream;",
                "+import java.util.Collections;",
                "+import java.util.Comparator;",
                "+import java.util.List;",
                "+",
                "+/**",
                "+ * @author silveryocha",
                "+ */",
                "+public class GoogleDirectoryRequester {",
                "+  private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();",
                "+  private static final String MY_CUSTOMER = \"my_customer\";",
                "+  private final String serviceAccountUser;",
                "+  private final String jsonKeyPath;",
                "+",
                "+  /**",
                "+   * Global instance of the scopes required by this quickstart.",
                "+   * If modifying these scopes, delete your previously saved tokens/ folder.",
                "+   */",
                "+  private static final List<String> SCOPES = Collections",
                "+      .singletonList(DirectoryScopes.ADMIN_DIRECTORY_USER_READONLY);",
                "+  private static final String APPLICATION_NAME = \"Silverpeas Google Domain Fetcher\";",
                "+",
                "+  GoogleDirectoryRequester(final String serviceAccountUser, final String jsonKeyPath) {",
                "+    this.serviceAccountUser = serviceAccountUser;",
                "+    this.jsonKeyPath = jsonKeyPath;",
                "+  }",
                "+",
                "+  /**",
                "+   * Creates an authorized Credential object.",
                "+   * @return An authorized Credential object.",
                "+   * @throws IOException If the credentials.json file cannot be found.",
                "+   * @param httpTransport",
                "+   */",
                "+  private Credential getServiceAccountCredentials(final HttpTransport httpTransport)",
                "+      throws IOException {",
                "+    final GoogleCredential credential;",
                "+    try (InputStream is = new FileInputStream(jsonKeyPath)) {",
                "+      credential = GoogleCredential.fromStream(is);",
                "+    }",
                "+    return new GoogleCredential.Builder()",
                "+        .setTransport(httpTransport)",
                "+        .setJsonFactory(JSON_FACTORY)",
                "+        .setServiceAccountUser(serviceAccountUser)",
                "+        .setServiceAccountId(credential.getServiceAccountId())",
                "+        .setServiceAccountScopes(SCOPES)",
                "+        .setServiceAccountPrivateKey(credential.getServiceAccountPrivateKey())",
                "+        .setServiceAccountPrivateKeyId(credential.getServiceAccountPrivateKeyId())",
                "+        .setTokenServerEncodedUrl(credential.getTokenServerEncodedUrl())",
                "+        .build();",
                "+  }",
                "+",
                "+  private Directory getDirectoryService() throws AdminException {",
                "+    try {",
                "+      final NetHttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();",
                "+      return new Directory.Builder(httpTransport, JSON_FACTORY,",
                "+          getServiceAccountCredentials(httpTransport)).setApplicationName(APPLICATION_NAME).build();",
                "+    } catch (Exception e) {",
                "+      throw new AdminException(e);",
                "+    }",
                "+  }",
                "+",
                "+  public List<User> users() throws AdminException {",
                "+    try {",
                "+      final List<User> users = getDirectoryService().users().list().setCustomer(MY_CUSTOMER)",
                "+          .execute().getUsers();",
                "+      users.sort(Comparator",
                "+          .comparing((User g) -> g.getName().getFamilyName())",
                "+          .thenComparing(g -> g.getName().getGivenName()));",
                "+      return users;",
                "+    } catch (IOException e) {",
                "+      throw new AdminException(e);",
                "+    }",
                "+  }",
                "+",
                "+  public User user(final String id) throws AdminException {",
                "+    try {",
                "+      return getDirectoryService().users().get(id).execute();",
                "+    } catch (IOException e) {",
                "+      throw new AdminException(e);",
                "+    }",
                "+  }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "new file mode 100644",
                "index 0000000000..ec241fc1fc",
                "--- /dev/null",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "@@ -0,0 +1,353 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+package org.silverpeas.core.admin.domain.driver.googledriver;",
                "+",
                "+import com.google.api.services.admin.directory.model.User;",
                "+import org.silverpeas.core.admin.domain.AbstractDomainDriver;",
                "+import org.silverpeas.core.admin.service.AdminException;",
                "+import org.silverpeas.core.admin.user.model.GroupDetail;",
                "+import org.silverpeas.core.admin.user.model.UserDetail;",
                "+import org.silverpeas.core.admin.user.model.UserFull;",
                "+import org.silverpeas.core.util.SettingBundle;",
                "+import org.silverpeas.core.util.StringUtil;",
                "+",
                "+import javax.annotation.Nonnull;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.function.Function;",
                "+import java.util.function.Predicate;",
                "+import java.util.stream.Stream;",
                "+",
                "+import static org.silverpeas.core.admin.domain.DomainDriver.ActionConstants.ACTION_MASK_RO_PULL_USER;",
                "+import static org.silverpeas.core.admin.user.constant.UserAccessLevel.USER;",
                "+import static org.silverpeas.core.admin.user.constant.UserState.DEACTIVATED;",
                "+import static org.silverpeas.core.admin.user.constant.UserState.VALID;",
                "+",
                "+/**",
                "+ * Domain driver for LDAP access. Could be used to access any type of LDAP DB (even exchange)",
                "+ * IMPORTANT : For the moment, it is not possible to add, remove or update a group neither add or",
                "+ * remove an user. However, it is possible to update an user...",
                "+ * @author tleroi",
                "+ */",
                "+public class GoogleDriver extends AbstractDomainDriver {",
                "+",
                "+  private SettingBundle settings;",
                "+",
                "+  /**",
                "+   * Virtual method that performs extra initialization from a properties file. To overload by the",
                "+   * class who need it.",
                "+   * @param rs name of resource file",
                "+   */",
                "+  @Override",
                "+  public void initFromProperties(SettingBundle rs) {",
                "+    settings = rs;",
                "+  }",
                "+",
                "+  /**",
                "+   * Called when Admin starts the synchronization",
                "+   * @return",
                "+   */",
                "+  @Override",
                "+  public long getDriverActions() {",
                "+    return ACTION_MASK_RO_PULL_USER;",
                "+  }",
                "+",
                "+  @Override",
                "+  public UserDetail[] getAllChangedUsers(String fromTimeStamp, String toTimeStamp)",
                "+      throws AdminException {",
                "+    return getAllUsers();",
                "+  }",
                "+",
                "+  @Override",
                "+  public GroupDetail[] getAllChangedGroups(String fromTimeStamp, String toTimeStamp) {",
                "+    return getAllGroups();",
                "+  }",
                "+",
                "+  /**",
                "+   * Import a given user in Database from the reference",
                "+   * @param userLogin The User Login to import",
                "+   * @return The User object that contain new user information",
                "+   */",
                "+  @Override",
                "+  public UserDetail importUser(String userLogin) {",
                "+    return null;",
                "+  }",
                "+",
                "+  /**",
                "+   * Remove a given user from database",
                "+   * @param userId The user id To remove synchro",
                "+   */",
                "+  @Override",
                "+  public void removeUser(String userId) {",
                "+    // In this driver, do nothing",
                "+  }",
                "+",
                "+  /**",
                "+   * Update user information in database",
                "+   * @param userId The User Id to synchronize",
                "+   * @return The User object that contain new user information",
                "+   */",
                "+  @Override",
                "+  public UserDetail synchroUser(String userId) throws AdminException {",
                "+    return getUser(userId);",
                "+  }",
                "+",
                "+  @Override",
                "+  public String createUser(UserDetail user) {",
                "+    return null;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void deleteUser(String userId) {",
                "+    // Silverpeas doesn't modify the data on Google",
                "+  }",
                "+",
                "+  @Override",
                "+  public void updateUserFull(UserFull user) {",
                "+    // Silverpeas doesn't modify the data on Google",
                "+  }",
                "+",
                "+  @Override",
                "+  public void updateUserDetail(UserDetail user) {",
                "+    // Silverpeas doesn't modify the data on Google",
                "+  }",
                "+",
                "+  /**",
                "+   * Retrieve user information from database",
                "+   * @param specificId The user id as stored in the database",
                "+   * @return The User object that contain new user information",
                "+   * @throws AdminException",
                "+   */",
                "+  @Override",
                "+  public UserFull getUserFull(String specificId) throws AdminException {",
                "+    return userFullMapper.apply(request().user(specificId));",
                "+  }",
                "+",
                "+  /**",
                "+   * Retrieve user information from database",
                "+   * @param specificId The user id as stored in the database",
                "+   * @return The User object that contain new user information",
                "+   * @throws AdminException",
                "+   */",
                "+  @Override",
                "+  public UserDetail getUser(String specificId) throws AdminException {",
                "+    return userDetailMapper.apply(request().user(specificId));",
                "+  }",
                "+",
                "+  /**",
                "+   * Retrieve all users from the database",
                "+   * @return User[] An array of User Objects that contain users information",
                "+   * @throws AdminException",
                "+   */",
                "+  @Override",
                "+  public UserDetail[] getAllUsers() throws AdminException {",
                "+    return request().users().stream().filter(byOU).map(userDetailMapper).toArray(UserDetail[]::new);",
                "+  }",
                "+",
                "+  @Override",
                "+  public UserDetail[] getUsersBySpecificProperty(String propertyName, String propertyValue) {",
                "+    // No specific property handled for now",
                "+    return new UserDetail[0];",
                "+  }",
                "+",
                "+  @Override",
                "+  public UserDetail[] getUsersByQuery(Map<String, String> query) {",
                "+    // No specific property handled for now",
                "+    return new UserDetail[0];",
                "+  }",
                "+",
                "+  /**",
                "+   * Retrieve user's groups",
                "+   * @param specificId The user id as stored in the database",
                "+   * @return The User's groups specific Ids",
                "+   */",
                "+  @Override",
                "+  public String[] getUserMemberGroupIds(String specificId) {",
                "+    // In this driver, do nothing",
                "+    return new String[0];",
                "+  }",
                "+",
                "+  /**",
                "+   * Import a given group in Database from the reference",
                "+   * @param groupName The group name to import",
                "+   * @return The group object that contain new group information",
                "+   */",
                "+  @Override",
                "+  public GroupDetail importGroup(String groupName) {",
                "+    return null;",
                "+  }",
                "+",
                "+  /**",
                "+   * Remove a given group from database",
                "+   * @param groupId The group id To remove synchro",
                "+   */",
                "+  @Override",
                "+  public void removeGroup(String groupId) {",
                "+    // Silverpeas doesn't modify the remote LDAP",
                "+  }",
                "+",
                "+  /**",
                "+   * Update group information in database",
                "+   * @param groupId The group Id to synchronize",
                "+   * @return The group object that contain new group information",
                "+   */",
                "+  @Override",
                "+  public GroupDetail synchroGroup(String groupId) {",
                "+    return getGroup(groupId);",
                "+  }",
                "+",
                "+  @Override",
                "+  public String createGroup(GroupDetail group) {",
                "+    // Silverpeas doesn't modify the remote LDAP",
                "+    return null;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void deleteGroup(String groupId) {",
                "+    // Silverpeas doesn't modify the remote LDAP",
                "+  }",
                "+",
                "+  @Override",
                "+  public void updateGroup(GroupDetail group) {",
                "+    // Silverpeas doesn't modify the remote LDAP",
                "+  }",
                "+",
                "+  /**",
                "+   * Retrieve group information from database",
                "+   * @param specificId The group id as stored in the database",
                "+   * @return The GroupDetail object that contains user information",
                "+   */",
                "+  @Override",
                "+  public GroupDetail getGroup(String specificId) {",
                "+    // In this driver, do nothing",
                "+    return null;",
                "+  }",
                "+",
                "+  @Override",
                "+  public GroupDetail getGroupByName(String groupName) {",
                "+    // In this driver, do nothing",
                "+    return null;",
                "+  }",
                "+",
                "+  /**",
                "+   * Retrieve all groups contained in the given group",
                "+   * @param groupId The group id as stored in the database",
                "+   * @return GroupDetail[] An array of GroupDetail Objects that contain groups information",
                "+   */",
                "+  @Override",
                "+  public GroupDetail[] getGroups(String groupId) {",
                "+    // In this driver, do nothing",
                "+    return new GroupDetail[0];",
                "+  }",
                "+",
                "+  /**",
                "+   * Retrieve all groups from the database",
                "+   * @return GroupDetail[] An array of GroupDetail Objects that contain groups information",
                "+   */",
                "+  @Override",
                "+  public GroupDetail[] getAllGroups() {",
                "+    // In this driver, do nothing",
                "+    return new GroupDetail[0];",
                "+  }",
                "+",
                "+  /**",
                "+   * Retrieve all root groups from the database",
                "+   * @return GroupDetail[] An array of GroupDetail Objects that contain root groups information",
                "+   */",
                "+  @Override",
                "+  public GroupDetail[] getAllRootGroups() {",
                "+    return getAllGroups();",
                "+  }",
                "+",
                "+  @Override",
                "+  public String[] getGroupMemberGroupIds(String groupId) {",
                "+    // In this driver, do nothing",
                "+    return new String[0];",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<String> getUserAttributes() {",
                "+    return Collections.emptyList();",
                "+  }",
                "+",
                "+  @Override",
                "+  public void resetPassword(UserDetail user, String password) {",
                "+    // Access in read only",
                "+  }",
                "+",
                "+  @Override",
                "+  public void resetEncryptedPassword(UserDetail user, String encryptedPassword) {",
                "+    // Access in read only",
                "+  }",
                "+",
                "+  GoogleDirectoryRequester request() {",
                "+    return new GoogleDirectoryRequester(settings.getString(\"service.account.user\"),",
                "+        settings.getString(\"service.account.jsonKey\"));",
                "+  }",
                "+",
                "+  private Predicate<User> byOU = u -> {",
                "+    final String userOu = u.getOrgUnitPath();",
                "+    final Stream<String> inclusion = streamSetting(\"synchro.ou.include\", \"/\");",
                "+    final Stream<String> exclusion = streamSetting(\"synchro.ou.exclude\", \"\");",
                "+    return inclusion.anyMatch(userOu::startsWith) && exclusion.noneMatch(userOu::startsWith);",
                "+  };",
                "+",
                "+  @Nonnull",
                "+  private Stream<String> streamSetting(final String key, final String defaultValue) {",
                "+    return Stream.of(settings.getString(key, defaultValue).split(\";\")).map(String::trim)",
                "+        .filter(StringUtil::isDefined);",
                "+  }",
                "+",
                "+  private Function<User, UserDetail> userDetailMapper = u -> {",
                "+    final UserDetail user = new UserDetail();",
                "+    setCommonUserProps(u, user);",
                "+    return user;",
                "+  };",
                "+",
                "+  private Function<User, UserFull> userFullMapper = u -> {",
                "+    final UserFull user = new UserFull();",
                "+    setCommonUserProps(u, user);",
                "+    // No specific property handled for now",
                "+    return user;",
                "+  };",
                "+",
                "+  private void setCommonUserProps(final User u, final UserDetail user) {",
                "+    user.setSpecificId(u.getId());",
                "+    user.setLogin(u.getPrimaryEmail());",
                "+    user.setLastName(u.getName().getFamilyName());",
                "+    user.setFirstName(u.getName().getGivenName());",
                "+    @SuppressWarnings(\"unchecked\") final List<Map<String, String>> emails = (List) u.getEmails();",
                "+    final String email = emails.stream()",
                "+        .filter(m -> \"Work\".equalsIgnoreCase(m.get(\"type\")) || \"Work\".equalsIgnoreCase(m.get(\"customType\")))",
                "+        .map(m -> m.get(\"address\")).findFirst().orElseGet(u::getPrimaryEmail);",
                "+    user.seteMail(email);",
                "+    user.setAccessLevel(USER);",
                "+    if (u.getSuspended()) {",
                "+      user.setState(DEACTIVATED);",
                "+    } else {",
                "+      user.setState(VALID);",
                "+    }",
                "+  }",
                "+}",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPDriver.java",
                "index 41a3926a77..23ad7324ab 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPDriver.java",
                "@@ -395,3 +395,3 @@ public class LDAPDriver extends AbstractDomainDriver {",
                "    * Retrieve user information from database",
                "-   * @param userId The user id as stored in the database",
                "+   * @param specificId The user id as stored in the database",
                "    * @return The User object that contain new user information",
                "@@ -400,6 +400,6 @@ public class LDAPDriver extends AbstractDomainDriver {",
                "   @Override",
                "-  public UserFull getUserFull(String userId) throws AdminException {",
                "+  public UserFull getUserFull(String specificId) throws AdminException {",
                "     String ld = LDAPUtility.openConnection(driverSettings);",
                "     try {",
                "-      return userTranslator.getUserFull(ld, userId, this.domainId);",
                "+      return userTranslator.getUserFull(ld, specificId, this.domainId);",
                "     } finally {",
                "@@ -411,3 +411,3 @@ public class LDAPDriver extends AbstractDomainDriver {",
                "    * Retrieve user information from database",
                "-   * @param userId The user id as stored in the database",
                "+   * @param specificId The user id as stored in the database",
                "    * @return The User object that contain new user information",
                "@@ -416,3 +416,3 @@ public class LDAPDriver extends AbstractDomainDriver {",
                "   @Override",
                "-  public UserDetail getUser(String userId) throws AdminException {",
                "+  public UserDetail getUser(String specificId) throws AdminException {",
                "     String ld = LDAPUtility.openConnection(driverSettings);",
                "@@ -420,3 +420,3 @@ public class LDAPDriver extends AbstractDomainDriver {",
                "     try {",
                "-      return userTranslator.getUser(ld, userId);",
                "+      return userTranslator.getUser(ld, specificId);",
                "     } finally {",
                "@@ -488,3 +488,3 @@ public class LDAPDriver extends AbstractDomainDriver {",
                "    * Retrieve user's groups",
                "-   * @param userId The user id as stored in the database",
                "+   * @param specificId The user id as stored in the database",
                "    * @return The User's groups specific Ids",
                "@@ -492,6 +492,6 @@ public class LDAPDriver extends AbstractDomainDriver {",
                "   @Override",
                "-  public String[] getUserMemberGroupIds(String userId) throws AdminException {",
                "+  public String[] getUserMemberGroupIds(String specificId) throws AdminException {",
                "     String ld = LDAPUtility.openConnection(driverSettings);",
                "     try {",
                "-      return groupTranslator.getUserMemberGroupIds(ld, userId);",
                "+      return groupTranslator.getUserMemberGroupIds(ld, specificId);",
                "     } finally {",
                "@@ -553,3 +553,3 @@ public class LDAPDriver extends AbstractDomainDriver {",
                "    * Retrieve group information from database",
                "-   * @param groupId The group id as stored in the database",
                "+   * @param specificId The group id as stored in the database",
                "    * @return The GroupDetail object that contains user information",
                "@@ -557,3 +557,3 @@ public class LDAPDriver extends AbstractDomainDriver {",
                "   @Override",
                "-  public GroupDetail getGroup(String groupId) throws AdminException {",
                "+  public GroupDetail getGroup(String specificId) throws AdminException {",
                "     String ld = LDAPUtility.openConnection(driverSettings);",
                "@@ -561,3 +561,3 @@ public class LDAPDriver extends AbstractDomainDriver {",
                "     try {",
                "-      return groupTranslator.getGroup(ld, groupId);",
                "+      return groupTranslator.getGroup(ld, specificId);",
                "     } finally {",
                "@@ -643,3 +643,2 @@ public class LDAPDriver extends AbstractDomainDriver {",
                "   }",
                "-",
                " }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/scimdriver/SCIMDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/scimdriver/SCIMDriver.java",
                "index 4866a21b41..4dddefbcac 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/scimdriver/SCIMDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/scimdriver/SCIMDriver.java",
                "@@ -44,3 +44,4 @@ import java.util.Map;",
                " import static java.util.Collections.singletonList;",
                "-import static org.silverpeas.core.admin.domain.DomainDriver.ActionConstants.*;",
                "+import static org.silverpeas.core.admin.domain.DomainDriver.ActionConstants.ACTION_MASK_RO_LISTENER;",
                "+import static org.silverpeas.core.admin.domain.DomainDriver.ActionConstants.ACTION_UPDATE_USER;",
                "@@ -85,3 +86,3 @@ public class SCIMDriver extends AbstractDomainDriver {",
                "   public long getDriverActions() {",
                "-    return ACTION_MASK_RO_FROM_PUSH | ACTION_UPDATE_USER;",
                "+    return ACTION_MASK_RO_LISTENER | ACTION_UPDATE_USER;",
                "   }",
                "@@ -172,6 +173,6 @@ public class SCIMDriver extends AbstractDomainDriver {",
                "   @Transactional(Transactional.TxType.MANDATORY)",
                "-  public UserDetail getUser(String userId) throws AdminException {",
                "+  public UserDetail getUser(String specificId) throws AdminException {",
                "     // In this driver, returning Silverpeas user by specific id.",
                "     final List<UserDetail> users = userManager",
                "-        .getUsersBySpecificIdsAndDomainId(singletonList(userId), String.valueOf(domainId));",
                "+        .getUsersBySpecificIdsAndDomainId(singletonList(specificId), String.valueOf(domainId));",
                "     if (users.size() > 1) {",
                "@@ -191,3 +192,3 @@ public class SCIMDriver extends AbstractDomainDriver {",
                "   @Override",
                "-  public String[] getUserMemberGroupIds(String userId) {",
                "+  public String[] getUserMemberGroupIds(String specificId) {",
                "     // In this driver, do nothing",
                "@@ -254,3 +255,3 @@ public class SCIMDriver extends AbstractDomainDriver {",
                "   @Transactional(Transactional.TxType.MANDATORY)",
                "-  public GroupDetail getGroup(String groupId) {",
                "+  public GroupDetail getGroup(String specificId) {",
                "     // In this driver, do nothing",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLDriver.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLDriver.java",
                "index 51b47b226f..62de680a68 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLDriver.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLDriver.java",
                "@@ -228,7 +228,7 @@ public class SQLDriver extends AbstractDomainDriver {",
                "   @Transactional(Transactional.TxType.MANDATORY)",
                "-  public UserDetail getUser(String userId) throws AdminException {",
                "+  public UserDetail getUser(String specificId) throws AdminException {",
                "     try(Connection connection = dataSource.getConnection()) {",
                "-      return localUserMgr.getUser(connection, idAsInt(userId));",
                "+      return localUserMgr.getUser(connection, idAsInt(specificId));",
                "     } catch (Exception e) {",
                "-      throw new AdminException(failureOnGetting(\"user\", userId), e);",
                "+      throw new AdminException(failureOnGetting(\"user\", specificId), e);",
                "     }",
                "@@ -268,3 +268,3 @@ public class SQLDriver extends AbstractDomainDriver {",
                "   @Override",
                "-  public String[] getUserMemberGroupIds(String userId) throws AdminException {",
                "+  public String[] getUserMemberGroupIds(String specificId) throws AdminException {",
                "     return new String[0];",
                "@@ -405,5 +405,5 @@ public class SQLDriver extends AbstractDomainDriver {",
                "   @Transactional(Transactional.TxType.MANDATORY)",
                "-  public GroupDetail getGroup(String groupId) throws AdminException {",
                "+  public GroupDetail getGroup(String specificId) throws AdminException {",
                "     try(Connection connection = dataSource.getConnection()) {",
                "-      GroupDetail valret = localGroupMgr.getGroup(connection, idAsInt(groupId));",
                "+      GroupDetail valret = localGroupMgr.getGroup(connection, idAsInt(specificId));",
                "       if (valret != null) {",
                "@@ -411,3 +411,3 @@ public class SQLDriver extends AbstractDomainDriver {",
                "         List<String> asUsersId =",
                "-            localGroupUserRelMgr.getDirectUserIdsOfGroup(connection, idAsInt(groupId));",
                "+            localGroupUserRelMgr.getDirectUserIdsOfGroup(connection, idAsInt(specificId));",
                "         valret.setUserIds(asUsersId.toArray(new String[asUsersId.size()]));",
                "@@ -416,3 +416,3 @@ public class SQLDriver extends AbstractDomainDriver {",
                "     } catch (Exception e) {",
                "-      throw new AdminException(failureOnGetting(GROUP, groupId), e);",
                "+      throw new AdminException(failureOnGetting(GROUP, specificId), e);",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java b/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "index 6659c266a7..b320abc743 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "@@ -4493,3 +4493,3 @@ class Admin implements Administration {",
                "       message = distantUDs.length",
                "-          + \" user(s) have been changed in LDAP since the last synchronization\";",
                "+          + \" user(s) have been changed in external repository since the last synchronization\";",
                "       sReport.append(message).append(\"\\n\");",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java b/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "index 8ec777e1c6..f1febc60c9 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "@@ -1862,3 +1862,4 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "     if (getTargetDomain() != null &&",
                "-        \"autDomainSCIM\".equals(getTargetDomain().getAuthenticationServer())) {",
                "+        (\"autDomainSCIM\".equals(getTargetDomain().getAuthenticationServer())",
                "+        || \"autDomainGoogle\".equals(getTargetDomain().getAuthenticationServer()))) {",
                "       selection.setSetSelectable(false);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "index d1e062e769..462d483380 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java",
                "@@ -86,2 +86,3 @@ public class JobDomainPeasRequestRouter extends",
                "   private static final String DOMAIN_SCIM_CREATE_FCT = \"domainSCIMCreate\";",
                "+  private static final String DOMAIN_GOOGLE_CREATE_FCT = \"domainGoogleCreate\";",
                "   private static final String DOMAIN_SQL_CREATE_FCT = \"domainSQLCreate\";",
                "@@ -89,2 +90,3 @@ public class JobDomainPeasRequestRouter extends",
                "   private static final String DOMAIN_SCIM_DELETE_FCT = \"domainSCIMDelete\";",
                "+  private static final String DOMAIN_GOOGLE_DELETE_FCT = \"domainGoogleDelete\";",
                "   private static final String DOMAIN_SQL_DELETE_FCT = \"domainSQLDelete\";",
                "@@ -515,8 +517,15 @@ public class JobDomainPeasRequestRouter extends",
                "             jobDomainSC.returnIntoGroup(null);",
                "-          } else if (function.startsWith(DOMAIN_CREATE_FCT) ||",
                "-              function.startsWith(DOMAIN_SCIM_CREATE_FCT)) {",
                "-            String newDomainId = jobDomainSC.createDomain(request2Domain(request),",
                "-                function.startsWith(DOMAIN_CREATE_FCT)",
                "-                    ? DomainType.EXTERNAL",
                "-                    : DomainType.SCIM);",
                "+          } else if (function.startsWith(DOMAIN_CREATE_FCT)",
                "+                    || function.startsWith(DOMAIN_SCIM_CREATE_FCT)",
                "+                    || function.startsWith(DOMAIN_GOOGLE_CREATE_FCT)) {",
                "+            final DomainType domainType;",
                "+            if (function.startsWith(DOMAIN_CREATE_FCT)) {",
                "+              domainType = DomainType.LDAP;",
                "+            } else if (function.startsWith(DOMAIN_SCIM_CREATE_FCT)) {",
                "+              domainType = DomainType.SCIM;",
                "+            } else {",
                "+              domainType = DomainType.GOOGLE;",
                "+            }",
                "+",
                "+            String newDomainId = jobDomainSC.createDomain(request2Domain(request), domainType);",
                "             request.setAttribute(IDDOMAIN_PARAM, newDomainId);",
                "@@ -544,7 +553,10 @@ public class JobDomainPeasRequestRouter extends",
                "           } else if (function.startsWith(DOMAIN_DELETE_FCT)) {",
                "-            jobDomainSC.deleteDomain(DomainType.EXTERNAL);",
                "+            jobDomainSC.deleteDomain(DomainType.LDAP);",
                "             destination = GO_BACK_DEST;",
                "-          }  else if (function.startsWith(DOMAIN_SCIM_DELETE_FCT)) {",
                "+          } else if (function.startsWith(DOMAIN_SCIM_DELETE_FCT)) {",
                "             jobDomainSC.deleteDomain(DomainType.SCIM);",
                "             destination = GO_BACK_DEST;",
                "+          } else if (function.startsWith(DOMAIN_GOOGLE_DELETE_FCT)) {",
                "+            jobDomainSC.deleteDomain(DomainType.GOOGLE);",
                "+            destination = GO_BACK_DEST;",
                "           } else if (function.startsWith(DOMAIN_SQL_DELETE_FCT)) {",
                "@@ -684,2 +696,11 @@ public class JobDomainPeasRequestRouter extends",
                "           destination = DOMAIN_CREATE_DEST;",
                "+        } else if (function.startsWith(\"displayDomainGoogleCreate\")) {",
                "+          Domain theNewDomain = new Domain();",
                "+          theNewDomain.setDriverClassName(\"org.silverpeas.core.admin.domain.driver.googledriver.GoogleDriver\");",
                "+          theNewDomain.setPropFileName(\"org.silverpeas.domains.domainGoogle\");",
                "+          theNewDomain.setAuthenticationServer(\"autDomainGoogle\");",
                "+          theNewDomain.setSilverpeasServerURL(URLUtil.getAbsoluteApplicationURL());",
                "+          request.setAttribute(DOMAIN_OBJECT_ATTR, theNewDomain);",
                "+          request.setAttribute(ACTION_ATTR, DOMAIN_GOOGLE_CREATE_FCT);",
                "+          destination = DOMAIN_CREATE_DEST;",
                "         } else if (function.startsWith(\"displayDomainSQLCreate\")) {",
                "@@ -862,4 +883,6 @@ public class JobDomainPeasRequestRouter extends",
                "         ((domainRight & ACTION_SYNCHRO_USER) != 0) || ((domainRight & ACTION_SYNCHRO_GROUP) != 0));",
                "-    request.setAttribute(\"isDomainPush\",",
                "-        ((domainRight & ACTION_PUSH_USER) != 0) || ((domainRight & ACTION_PUSH_GROUP) != 0));",
                "+    request.setAttribute(\"isDomainUnsync\",",
                "+        ((domainRight & ACTION_UNSYNCHRO_USER) != 0) || ((domainRight & ACTION_UNSYNCHRO_GROUP) != 0));",
                "+    request.setAttribute(\"isDomainListener\",",
                "+        ((domainRight & ACTION_RECEIVE_USER) != 0) || ((domainRight & ACTION_RECEIVE_GROUP) != 0));",
                "   }"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/admin/domain/DomainType.java",
                "core-api/src/main/java/org/silverpeas/core/admin/domain/DomainTypeRegistry.java",
                "core-library/src/integration-test/java/org/silverpeas/core/admin/domain/DomainServiceProviderIT.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/DomainDriverManager.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/DomainServiceProvider.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/ScimDomainService.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/SilverpeasDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/ldapdriver/LDAPDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/scimdriver/SCIMDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/sqldriver/SQLDriver.java",
                "core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/jobdomain/servlets/JobDomainPeasRequestRouter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, directory",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4d11027a5efd3ad0e3c3980a38233cc86bc78390",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1542391388,
            "hunks": 6,
            "message": "Adding parameters in order to enabled or not the handling of server event sending.",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/sse/ServerEventDispatcherTask.java b/core-api/src/main/java/org/silverpeas/core/notification/sse/ServerEventDispatcherTask.java",
                "index 1568ed1082..aa740174ab 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/sse/ServerEventDispatcherTask.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/sse/ServerEventDispatcherTask.java",
                "@@ -43,4 +43,4 @@ import java.util.Set;",
                " import static java.text.MessageFormat.format;",
                "-import static org.silverpeas.core.notification.user.client.NotificationManagerSettings",
                "-    .getSseStoreEventLifeTime;",
                "+import static org.silverpeas.core.notification.user.client.NotificationManagerSettings.getSseStoreEventLifeTime;",
                "+import static org.silverpeas.core.notification.user.client.NotificationManagerSettings.isSseEnabledFor;",
                "@@ -150,4 +150,6 @@ public class ServerEventDispatcherTask extends AbstractRequestTask {",
                "   public static void dispatch(ServerEvent serverEventToDispatch) {",
                "-    ServerEventDispatchRequest request = new ServerEventDispatchRequest(serverEventToDispatch);",
                "-    push(request);",
                "+    if (isSseEnabledFor(serverEventToDispatch)) {",
                "+      ServerEventDispatchRequest request = new ServerEventDispatchRequest(serverEventToDispatch);",
                "+      push(request);",
                "+    }",
                "   }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "index 2c8100949c..e1f87b1302 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "@@ -26,2 +26,3 @@ package org.silverpeas.core.notification.user.client;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.silverpeas.core.notification.sse.ServerEvent;",
                " import org.silverpeas.core.notification.user.delayed.constant.DelayedNotificationFrequency;",
                "@@ -250,2 +251,22 @@ public class NotificationManagerSettings {",
                "+",
                "+  /**",
                "+   * Indicates if the server event feature is enabled.",
                "+   * @return true in order to enable, false otherwise.",
                "+   */",
                "+  public static boolean isSseEnabled() {",
                "+    return settings.getBoolean(\"notification.see.enabled\", true);",
                "+  }",
                "+",
                "+",
                "+  /**",
                "+   * Indicates if the server event has to be handled.",
                "+   * @return true in order to handle, false otherwise.",
                "+   */",
                "+  public static boolean isSseEnabledFor(final ServerEvent serverEvent) {",
                "+    return isSseEnabled() && settings",
                "+        .getBoolean(\"notification.see.event.\" + serverEvent.getName().asString() + \".enabled\",",
                "+            true);",
                "+  }",
                "+",
                "   /**",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "index 017203b1cb..4691558600 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "@@ -61,2 +61,3 @@ import static org.silverpeas.core.notification.user.UserNotificationServerEvent.",
                " import static org.silverpeas.core.notification.user.client.NotificationManagerSettings.getUserNotificationDesktopIconUrl;",
                "+import static org.silverpeas.core.notification.user.client.NotificationManagerSettings.isSseEnabled;",
                " import static org.silverpeas.core.reminder.ReminderSettings.getDefaultReminder;",
                "@@ -912,2 +913,3 @@ public class JavascriptPluginInclusion {",
                "             .add(\"layout.pdc.action.default\", \"ChangeSearchTypeToExpert\")",
                "+            .add(\"sse.enabled\", isSseEnabled())",
                "             .produce()));"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/notification/sse/ServerEventDispatcherTask.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: enable",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "70f82d08a4b35bde3c16d482a72da80f9694a59a",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1538042971,
            "hunks": 46,
            "message": "With the new version of JODConverter, we can simplify the implementation of our  conversion service. Now, the conversion service will start the OPenOffice/LibreOffice service at the Silverpeas bootstrapping and will end it at the Silverpeas shutdown. It is possible to specify in the properties file org/silverpeas/converter/openoffice.properties several port numbers at which the OpenOffice/LibreOffice program will listen; in that case, the program could be launched for each port numbers according to the load of calls for conversion.",
            "diff": [
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/AbstractConverterIntegrationTest.java b/core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/AbstractConverterIntegrationTest.java",
                "index 64f1b09605..1bf061175d 100644",
                "--- a/core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/AbstractConverterIntegrationTest.java",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/AbstractConverterIntegrationTest.java",
                "@@ -53,3 +53,3 @@ public class AbstractConverterIntegrationTest {",
                "         .testFocusedOn(warBuilder ->",
                "-            warBuilder.addMavenDependencies(\"com.artofsolving:jodconverter\")",
                "+            warBuilder.addMavenDependencies(\"org.jodconverter:jodconverter-local\")",
                "                 .addPackages(true, \"org.silverpeas.core.contribution.converter\")",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/mail/MsgMailExtractorIT.java b/core-library/src/integration-test/java/org/silverpeas/core/mail/MsgMailExtractorIT.java",
                "index 295744fdd7..7c856668ef 100644",
                "--- a/core-library/src/integration-test/java/org/silverpeas/core/mail/MsgMailExtractorIT.java",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/mail/MsgMailExtractorIT.java",
                "@@ -73,3 +73,3 @@ public class MsgMailExtractorIT {",
                "         .addSilverpeasExceptionBases()",
                "-        .addMavenDependencies(\"org.apache.commons:commons-exec\", \"com.artofsolving:jodconverter\")",
                "+        .addMavenDependencies(\"org.apache.commons:commons-exec\", \"org.jodconverter:jodconverter-local\")",
                "         .addPackages(true, \"org.silverpeas.core.contribution.converter\")",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormat.java b/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormat.java",
                "index 3231a05595..81acd1b83d 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormat.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormat.java",
                "@@ -51,3 +51,7 @@ public enum DocumentFormat {",
                "    */",
                "-  html(MimeTypes.HTML_MIME_TYPE);",
                "+  html(MimeTypes.HTML_MIME_TYPE),",
                "+  /**",
                "+   * The SQL format.",
                "+   */",
                "+  sql(MimeTypes.PLAIN_TEXT_MIME_TYPE);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatConversion.java b/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatConversion.java",
                "index 71162eb366..600a13c661 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatConversion.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatConversion.java",
                "@@ -57,6 +57,6 @@ public interface DocumentFormatConversion {",
                "    * @param destination the converted document.",
                "-   * @param inFormat the format into which the document has to be converted.",
                "+   * @param outFormat the format into which the document has to be converted.",
                "    * @return the destination file.",
                "    */",
                "-  File convert(File source, File destination, DocumentFormat inFormat, FilterOption... options);",
                "+  File convert(File source, File destination, DocumentFormat outFormat, FilterOption... options);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatConversionException.java b/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatConversionException.java",
                "index fb393d9218..79f1b7f3f1 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatConversionException.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatConversionException.java",
                "@@ -25,2 +25,4 @@ package org.silverpeas.core.contribution.converter;",
                "+import org.silverpeas.core.SilverpeasRuntimeException;",
                "+",
                " /**",
                "@@ -28,10 +30,4 @@ package org.silverpeas.core.contribution.converter;",
                "  */",
                "-public class DocumentFormatConversionException extends RuntimeException {",
                "-  private static final long serialVersionUID = 5458173513843306754L;",
                "-",
                "-  /**",
                "-   * Creates a new instance of <code>FormatConvertionException</code> without detail message.",
                "-   */",
                "-  public DocumentFormatConversionException() {",
                "-  }",
                "+public class DocumentFormatConversionException extends SilverpeasRuntimeException {",
                "+  private static final long serialVersionUID = 5458173513843306755L;",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatException.java b/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatException.java",
                "index cba07c853a..bbe7bb4f79 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatException.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatException.java",
                "@@ -25,2 +25,4 @@ package org.silverpeas.core.contribution.converter;",
                "+import org.silverpeas.core.SilverpeasRuntimeException;",
                "+",
                " /**",
                "@@ -29,10 +31,4 @@ package org.silverpeas.core.contribution.converter;",
                "  */",
                "-public class DocumentFormatException extends RuntimeException {",
                "-  private static final long serialVersionUID = -4921928945224013781L;",
                "-",
                "-  /**",
                "-   * Creates a new instance of <code>DocumentFormatException</code> without detail message.",
                "-   */",
                "-  public DocumentFormatException() {",
                "-  }",
                "+public class DocumentFormatException extends SilverpeasRuntimeException {",
                "+  private static final long serialVersionUID = -4921928945224013783L;",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/ExtendedDocumentFormatRegistry.java b/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/ExtendedDocumentFormatRegistry.java",
                "deleted file mode 100644",
                "index b82e8663dd..0000000000",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/ExtendedDocumentFormatRegistry.java",
                "+++ /dev/null",
                "@@ -1,71 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.contribution.converter.openoffice;",
                "-",
                "-import com.artofsolving.jodconverter.DefaultDocumentFormatRegistry;",
                "-import com.artofsolving.jodconverter.DocumentFamily;",
                "-import com.artofsolving.jodconverter.DocumentFormat;",
                "-import org.silverpeas.core.util.MimeTypes;",
                "-",
                "-/**",
                "- * @author Yohann Chastagnier",
                "- */",
                "-public class ExtendedDocumentFormatRegistry extends DefaultDocumentFormatRegistry {",
                "-",
                "-  public ExtendedDocumentFormatRegistry() {",
                "-    super();",
                "-",
                "-    final DocumentFormat docx =",
                "-        new DocumentFormat(\"Microsoft Word\", DocumentFamily.TEXT, MimeTypes.WORD_2007_MIME_TYPE,",
                "-            \"docx\");",
                "-    docx.setExportFilter(DocumentFamily.TEXT, \"MS Word 2007\");",
                "-    if (getFormatByFileExtension(docx.getFileExtension()) == null) {",
                "-      addDocumentFormat(docx);",
                "-    }",
                "-",
                "-    final DocumentFormat xlsx =",
                "-        new DocumentFormat(\"Microsoft Excel\", DocumentFamily.SPREADSHEET,",
                "-            MimeTypes.EXCEL_2007_MIME_TYPE, \"xlsx\");",
                "-    xlsx.setExportFilter(DocumentFamily.SPREADSHEET, \"MS Excel 2007\");",
                "-    if (getFormatByFileExtension(xlsx.getFileExtension()) == null) {",
                "-      addDocumentFormat(xlsx);",
                "-    }",
                "-",
                "-    final DocumentFormat pptx =",
                "-        new DocumentFormat(\"Microsoft PowerPoint\", DocumentFamily.PRESENTATION,",
                "-            MimeTypes.POWERPOINT_2007_MIME_TYPE, \"pptx\");",
                "-    pptx.setExportFilter(DocumentFamily.PRESENTATION, \"MS PowerPoint 2007\");",
                "-    if (getFormatByFileExtension(pptx.getFileExtension()) == null) {",
                "-      addDocumentFormat(pptx);",
                "-    }",
                "-",
                "-    final DocumentFormat sql =",
                "-        new DocumentFormat(\"Plain Text\", DocumentFamily.TEXT, \"text/plain\", \"sql\");",
                "-    sql.setImportOption(\"FilterName\", \"Text\");",
                "-    sql.setExportFilter(DocumentFamily.TEXT, \"Text\");",
                "-    if (getFormatByFileExtension(sql.getFileExtension()) == null) {",
                "-      addDocumentFormat(sql);",
                "-    }",
                "-  }",
                "-}",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeConverter.java b/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeConverter.java",
                "index fbd0c136a7..a9e1646a7e 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeConverter.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeConverter.java",
                "@@ -25,13 +25,7 @@ package org.silverpeas.core.contribution.converter.openoffice;",
                "-import java.io.File;",
                "-import java.io.InputStream;",
                "-import java.io.OutputStream;",
                "-import java.net.ConnectException;",
                "-import java.util.Arrays;",
                "-",
                " import org.apache.commons.io.FilenameUtils;",
                "-",
                "-import org.jodconverter.JodConverter;",
                "+import org.jodconverter.DocumentConverter;",
                " import org.jodconverter.LocalConverter;",
                " import org.jodconverter.document.DefaultDocumentFormatRegistry;",
                "+import org.jodconverter.office.OfficeManager;",
                " import org.silverpeas.core.contribution.converter.DocumentFormat;",
                "@@ -41,5 +35,15 @@ import org.silverpeas.core.contribution.converter.DocumentFormatException;",
                " import org.silverpeas.core.contribution.converter.option.FilterOption;",
                "-import org.silverpeas.core.util.ServiceProvider;",
                " import org.silverpeas.core.util.file.FileRepositoryManager;",
                "+import javax.inject.Inject;",
                "+import java.io.File;",
                "+import java.io.InputStream;",
                "+import java.io.OutputStream;",
                "+import java.util.Arrays;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+import java.util.UnknownFormatConversionException;",
                "+",
                "+import static org.silverpeas.core.util.MimeTypes.RTF_MIME_TYPE;",
                "+",
                " /**",
                "@@ -50,2 +54,5 @@ public abstract class OpenOfficeConverter implements DocumentFormatConversion {",
                "+  @Inject",
                "+  private OpenOfficeService service;",
                "+",
                "   /**",
                "@@ -66,7 +73,7 @@ public abstract class OpenOfficeConverter implements DocumentFormatConversion {",
                "   @Override",
                "-  public File convert(final File source, final File destination, final DocumentFormat inFormat,",
                "+  public File convert(final File source, final File destination, final DocumentFormat outFormat,",
                "       final FilterOption... options) {",
                "-    if (!isFormatSupported(inFormat)) {",
                "+    if (isNotFormatSupported(outFormat)) {",
                "       throw new DocumentFormatException(\"The conversion of the file to the format \" +",
                "-          inFormat.toString() + \" isn't supported\");",
                "+          outFormat.toString() + \" isn't supported\");",
                "     }",
                "@@ -76,13 +83,8 @@ public abstract class OpenOfficeConverter implements DocumentFormatConversion {",
                "     }",
                "-    OpenOfficeConnection connection = null;",
                "     try {",
                "-      LocalConverter.builder().filterChain()",
                "-      connection = openConnection();",
                "-      convert(getOpenOfficeDocumentConverterFrom(connection), source, destination, options);",
                "+      DocumentConverter converter = getDocumentConverter(options);",
                "+      converter.convert(source).to(destination).as(documentFormat(outFormat)).execute();",
                "     } catch (final Exception e) {",
                "       throw new DocumentFormatConversionException(e.getMessage(), e);",
                "-    } finally {",
                "-      closeConnection(connection);",
                "     }",
                "-",
                "     return destination;",
                "@@ -94,3 +96,3 @@ public abstract class OpenOfficeConverter implements DocumentFormatConversion {",
                "       final FilterOption... options) {",
                "-    if (!isFormatSupported(outFormat)) {",
                "+    if (isNotFormatSupported(outFormat)) {",
                "       throw new DocumentFormatException(\"The conversion of the stream to the format \" +",
                "@@ -98,11 +100,11 @@ public abstract class OpenOfficeConverter implements DocumentFormatConversion {",
                "     }",
                "-    OpenOfficeConnection connection = null;",
                "     try {",
                "-      connection = openConnection();",
                "-      convert(getOpenOfficeDocumentConverterFrom(connection), source, inFormat, destination,",
                "-          outFormat, options);",
                "+      DocumentConverter converter = getDocumentConverter(options);",
                "+      converter.convert(source)",
                "+          .as(documentFormat(inFormat))",
                "+          .to(destination)",
                "+          .as(documentFormat(outFormat))",
                "+          .execute();",
                "     } catch (final Exception e) {",
                "       throw new DocumentFormatConversionException(e.getMessage(), e);",
                "-    } finally {",
                "-      closeConnection(connection);",
                "     }",
                "@@ -110,95 +112,36 @@ public abstract class OpenOfficeConverter implements DocumentFormatConversion {",
                "-  /**",
                "-   * Technical converting operations",
                "-   * @param documentConverter",
                "-   * @param source",
                "-   * @param destination",
                "-   * @param options",
                "-   */",
                "-  protected void convert(final SilverpeasOpenOfficeDocumentConverter documentConverter,",
                "-      final File source, final File destination, final FilterOption... options) {",
                "-",
                "-    // Options",
                "-    applyFilterOptions(documentConverter, options);",
                "-",
                "-    // Conversion",
                "-    documentConverter.convert(source, destination);",
                "-  }",
                "-",
                "-  /**",
                "-   * Technical converting operations",
                "-   * @param documentConverter",
                "-   * @param source",
                "-   * @param inFormat",
                "-   * @param destination",
                "-   * @param outFormat",
                "-   * @param options",
                "-   */",
                "-  protected void convert(final SilverpeasOpenOfficeDocumentConverter documentConverter,",
                "-      final InputStream source, final DocumentFormat inFormat, final OutputStream destination,",
                "-      final DocumentFormat outFormat, final FilterOption... options) {",
                "-",
                "-    // Options",
                "-    applyFilterOptions(documentConverter, options);",
                "-",
                "-    // Conversion",
                "-    documentConverter.convert(source, inFormat, destination, outFormat);",
                "+  private boolean isNotFormatSupported(final DocumentFormat format) {",
                "+    return !Arrays.asList(getSupportedFormats()).contains(format);",
                "   }",
                "-  /**",
                "-   * Applying options about the conversion.",
                "-   * @param documentConverter",
                "-   * @param options",
                "-   */",
                "-  private void applyFilterOptions(final SilverpeasOpenOfficeDocumentConverter documentConverter,",
                "-      final FilterOption... options) {",
                "-    if (options != null) {",
                "+  private DocumentConverter getDocumentConverter(final FilterOption... options) {",
                "+    OfficeManager manager = service.getOfficeManager();",
                "+    LocalConverter.Builder builder = LocalConverter.builder().officeManager(manager);",
                "+    if (options.length > 0) {",
                "+      final Map<String, Object> filterData = new HashMap<>();",
                "+      final Map<String, Object> customProperties = new HashMap<>();",
                "       for (final FilterOption option : options) {",
                "-        documentConverter.addFilterData(option);",
                "+        filterData.put(option.getName(), option.getValue());",
                "       }",
                "+      customProperties.put(\"FilterData\", filterData);",
                "+      builder = builder.storeProperties(customProperties);",
                "     }",
                "+    return builder.build();",
                "   }",
                "-  /**",
                "-   * Opens a connection to an OpenOffice service. This methods wraps the way the connection(s)",
                "-   * life-cycle is managed.",
                "-   * @return a connection to an OpenOffice service.",
                "-   * @throws ConnectException if no connection can be opened with an OpenOffice service. This can",
                "-   * occurs when no OpenOffice service is available for example.",
                "-   */",
                "-  protected OpenOfficeConnection openConnection() throws ConnectException {",
                "-    OpenOfficeService service = ServiceProvider.getService(OpenOfficeService.class);",
                "-",
                "-",
                "-    final String host = settings.getString(OPENOFFICE_HOST, \"localhost\");",
                "-    final int port = settings.getInteger(OPENOFFICE_PORT, 8100);",
                "-    final OpenOfficeConnection connection = new SocketOpenOfficeConnection(host, port);",
                "-    connection.connect();",
                "-    return connection;",
                "-  }",
                "-",
                "-  /**",
                "-   * Closes the connection to an OpenOffice service. This methods wraps the way the connection(s)",
                "-   * life-cycle is managed.",
                "-   * @param connection the connection to release.",
                "-   */",
                "-  protected void closeConnection(final OpenOfficeConnection connection) {",
                "-    if (connection != null && connection.isConnected()) {",
                "-      connection.disconnect();",
                "+  private org.jodconverter.document.DocumentFormat documentFormat(final DocumentFormat format) {",
                "+    String mimeType = format.getMimeType();",
                "+    org.jodconverter.document.DocumentFormat docFormat =",
                "+        DefaultDocumentFormatRegistry.getFormatByMediaType(mimeType);",
                "+    if (docFormat == null) {",
                "+      if (RTF_MIME_TYPE.equals(mimeType)) {",
                "+        mimeType = mimeType.replaceFirst(\"application\", \"text\");",
                "+      }",
                "+      docFormat = DefaultDocumentFormatRegistry.getFormatByMediaType(mimeType);",
                "     }",
                "-  }",
                "-",
                "-  /**",
                "-   * Gets a converter from the OpenOffice service at the end-point of the connection. This method",
                "-   * wraps the way the OpenOfficeDocumentConverter instances are managed.",
                "-   * @param connection the connection an OpenOffice service.",
                "-   * @return a converter of documents.",
                "-   */",
                "-  protected SilverpeasOpenOfficeDocumentConverter getOpenOfficeDocumentConverterFrom(",
                "-      final OpenOfficeConnection connection) {",
                "-    return new SilverpeasOpenOfficeDocumentConverter(connection);",
                "-  }",
                "-",
                "-  private boolean isFormatSupported(final DocumentFormat format) {",
                "-    return Arrays.asList(getSupportedFormats()).contains(format);",
                "+    if (docFormat == null) {",
                "+      throw new UnknownFormatConversionException(",
                "+          \"Unknown document format for MIME-TYPE: \" + format.getMimeType());",
                "+    }",
                "+    return docFormat;",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeService.java b/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeService.java",
                "index 84574e1aef..7ef58e1672 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeService.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeService.java",
                "@@ -47,2 +47,3 @@ public class OpenOfficeService implements Initialization {",
                "   private static final String OPENOFFICE_HOME = \"openoffice.home\";",
                "+  private static final String OPENOFFICE_TASK_TIMEOUT = \"openoffice.taskTimeout\";",
                "@@ -54,4 +55,6 @@ public class OpenOfficeService implements Initialization {",
                "     final String ports = settings.getString(OPENOFFICE_PORT, \"8100\");",
                "+    final int taskTimeout = settings.getInteger(OPENOFFICE_TASK_TIMEOUT, 30000);",
                "     final int[] portNumbers = Stream.of(ports.split(\",\")).mapToInt(Integer::parseInt).toArray();",
                "-    LocalOfficeManager.Builder builder = LocalOfficeManager.builder().portNumbers(portNumbers);",
                "+    LocalOfficeManager.Builder builder = LocalOfficeManager.builder().portNumbers(portNumbers)",
                "+        .taskQueueTimeout(taskTimeout);",
                "     if (StringUtil.isDefined(home)) {",
                "@@ -66,3 +69,3 @@ public class OpenOfficeService implements Initialization {",
                "   public void release() throws Exception {",
                "-    if (officeManager != null) {",
                "+    if (officeManager != null && officeManager.isRunning()) {",
                "       officeManager.stop();",
                "@@ -70,2 +73,12 @@ public class OpenOfficeService implements Initialization {",
                "   }",
                "+",
                "+  /**",
                "+   * Gets the {@link OfficeManager} instance to use to manages the different processes of the",
                "+   * OpenOffice/LibreOffice program.",
                "+   * @return the {@link OfficeManager} instance preconfigured according to the OpenOffice settings",
                "+   * in Silverpeas.",
                "+   */",
                "+  public OfficeManager getOfficeManager() {",
                "+    return officeManager;",
                "+  }",
                " }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/SilverpeasOpenOfficeDocumentConverter.java b/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/SilverpeasOpenOfficeDocumentConverter.java",
                "deleted file mode 100644",
                "index 5460b8395d..0000000000",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/SilverpeasOpenOfficeDocumentConverter.java",
                "+++ /dev/null",
                "@@ -1,222 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.contribution.converter.openoffice;",
                "-",
                "-import com.artofsolving.jodconverter.DocumentFormat;",
                "-import com.artofsolving.jodconverter.openoffice.connection.OpenOfficeConnection;",
                "-import com.artofsolving.jodconverter.openoffice.connection.OpenOfficeException;",
                "-import com.artofsolving.jodconverter.openoffice.converter.OpenOfficeDocumentConverter;",
                "-import org.silverpeas.core.contribution.converter.option.FilterOption;",
                "-import com.sun.star.beans.PropertyValue;",
                "-import com.sun.star.frame.XComponentLoader;",
                "-import com.sun.star.frame.XStorable;",
                "-import com.sun.star.lang.IllegalArgumentException;",
                "-import com.sun.star.lang.XComponent;",
                "-import com.sun.star.task.ErrorCodeIOException;",
                "-import com.sun.star.ucb.XFileIdentifierConverter;",
                "-import com.sun.star.uno.UnoRuntime;",
                "-import com.sun.star.util.CloseVetoException;",
                "-import com.sun.star.util.XCloseable;",
                "-import org.slf4j.Logger;",
                "-import org.slf4j.LoggerFactory;",
                "-",
                "-import java.io.File;",
                "-import java.io.InputStream;",
                "-import java.io.OutputStream;",
                "-import java.util.ArrayList;",
                "-import java.util.HashMap;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-import static org.silverpeas.core.util.MimeTypes.RTF_MIME_TYPE;",
                "-",
                "-/**",
                "- * This Object is kind of patch of JODConverter tools in the aim to add some conversion options.",
                "- * @author Yohann Chastagnier",
                "- */",
                "-public class SilverpeasOpenOfficeDocumentConverter extends OpenOfficeDocumentConverter {",
                "-",
                "-  private static final Logger logger =",
                "-      LoggerFactory.getLogger(SilverpeasOpenOfficeDocumentConverter.class);",
                "-",
                "-  /**",
                "-   * Optional filter data option",
                "-   */",
                "-  private final List<FilterOption> filterData = new ArrayList<>();",
                "-",
                "-  /**",
                "-   * Default constructor",
                "-   * @param connection",
                "-   */",
                "-  public SilverpeasOpenOfficeDocumentConverter(final OpenOfficeConnection connection) {",
                "-    super(connection, new ExtendedDocumentFormatRegistry());",
                "-  }",
                "-",
                "-  /**",
                "-   * Adds a filter",
                "-   * @param option",
                "-   */",
                "-  public void addFilterData(final FilterOption option) {",
                "-    filterData.add(option);",
                "-  }",
                "-",
                "-  /**",
                "-   * Same function as that of OpenOfficeDocumentConverter completed with FilterData processing.",
                "-   */",
                "-  @Override",
                "-  protected void convertInternal(final File inputFile, final DocumentFormat inputFormat,",
                "-      final File outputFile, final DocumentFormat outputFormat) {",
                "-    final Map<String, Object> loadProperties = new HashMap<>();",
                "-    loadProperties.putAll(getDefaultLoadProperties());",
                "-    loadProperties.putAll(inputFormat.getImportOptions());",
                "-",
                "-    final Map<String, Object> storeProperties =",
                "-        outputFormat.getExportOptions(inputFormat.getFamily());",
                "-",
                "-    // Filter Data options",
                "-    if (!filterData.isEmpty()) {",
                "-      final List<PropertyValue> propertyValues = new ArrayList<>();",
                "-      for (final FilterOption option : filterData) {",
                "-        propertyValues.add(property(option.getName(), option.getValue()));",
                "-      }",
                "-",
                "-      loadProperties.put(\"FilterData\", propertyValues.toArray(new PropertyValue[]{}));",
                "-      storeProperties.put(\"FilterData\", propertyValues.toArray(new PropertyValue[]{}));",
                "-    }",
                "-",
                "-    synchronized (openOfficeConnection) {",
                "-      final XFileIdentifierConverter fileContentProvider =",
                "-          openOfficeConnection.getFileContentProvider();",
                "-      final String inputUrl =",
                "-          fileContentProvider.getFileURLFromSystemPath(\"\", inputFile.getAbsolutePath());",
                "-      final String outputUrl =",
                "-          fileContentProvider.getFileURLFromSystemPath(\"\", outputFile.getAbsolutePath());",
                "-",
                "-      loadAndExportFromUrl(inputUrl, loadProperties, outputUrl, storeProperties);",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * @see OpenOfficeDocumentConverter#loadAndExport(String, Map, String, Map)",
                "-   */",
                "-  private void loadAndExportFromUrl(final String inputUrl, final Map<String, Object> loadProperties,",
                "-      final String outputUrl, final Map<String, Object> storeProperties) {",
                "-    XComponent document;",
                "-    try {",
                "-      document = loadOpenDocument(inputUrl, loadProperties);",
                "-    } catch (final ErrorCodeIOException errorCodeIOException) {",
                "-      throw new OpenOfficeException(",
                "-          \"conversion failed: could not load input document; OOo errorCode: \" +",
                "-              errorCodeIOException.ErrCode, errorCodeIOException);",
                "-    } catch (final Exception otherException) {",
                "-      throw new OpenOfficeException(\"conversion failed: could not load input document\",",
                "-          otherException);",
                "-    }",
                "-    if (document == null) {",
                "-      throw new OpenOfficeException(\"conversion failed: could not load input document\");",
                "-    }",
                "-",
                "-    refreshDocument(document);",
                "-",
                "-    try {",
                "-      storeOpenDocument(document, outputUrl, storeProperties);",
                "-    } catch (final ErrorCodeIOException errorCodeIOException) {",
                "-      throw new OpenOfficeException(",
                "-          \"conversion failed: could not save output document; OOo errorCode: \" +",
                "-              errorCodeIOException.ErrCode, errorCodeIOException);",
                "-    } catch (final Exception otherException) {",
                "-      throw new OpenOfficeException(\"conversion failed: could not save output document\",",
                "-          otherException);",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * @see OpenOfficeDocumentConverter#loadDocument(String, Map)",
                "-   */",
                "-  private XComponent loadOpenDocument(final String inputUrl, final Map<String, Object> loadProperties)",
                "-      throws com.sun.star.io.IOException, IllegalArgumentException {",
                "-    final XComponentLoader desktop = openOfficeConnection.getDesktop();",
                "-    return desktop.loadComponentFromURL(inputUrl, \"_blank\", 0, toPropertyValues(loadProperties));",
                "-  }",
                "-",
                "-  /**",
                "-   * @see OpenOfficeDocumentConverter#storeDocument(XComponent, String, Map)",
                "-   */",
                "-  private void storeOpenDocument(final XComponent document, final String outputUrl,",
                "-      final Map<String, Object> storeProperties) throws com.sun.star.io.IOException {",
                "-    try {",
                "-      final XStorable storable = (XStorable) UnoRuntime.queryInterface(XStorable.class, document);",
                "-      storable.storeToURL(outputUrl, toPropertyValues(storeProperties));",
                "-    } finally {",
                "-      final XCloseable closeable =",
                "-          (XCloseable) UnoRuntime.queryInterface(XCloseable.class, document);",
                "-      if (closeable != null) {",
                "-        try {",
                "-          closeable.close(true);",
                "-        } catch (final CloseVetoException closeVetoException) {",
                "-          logger.warn(\"document.close() vetoed\");",
                "-        }",
                "-      } else {",
                "-        document.dispose();",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Conversion from streams.",
                "-   * @param source",
                "-   * @param inFormat",
                "-   * @param destination",
                "-   * @param outFormat",
                "-   * @param options",
                "-   */",
                "-  public void convert(final InputStream source,",
                "-      final org.silverpeas.core.contribution.converter.DocumentFormat inFormat, final OutputStream destination,",
                "-      final org.silverpeas.core.contribution.converter.DocumentFormat outFormat, final FilterOption... options) {",
                "-    convert(source, getDocumentFormat(inFormat), destination, getDocumentFormat(outFormat));",
                "-  }",
                "-",
                "-  /**",
                "-   * Gets the JODConverter document format from a Silverpeas document format.",
                "-   * @param documentFormat",
                "-   * @return",
                "-   */",
                "-  private com.artofsolving.jodconverter.DocumentFormat getDocumentFormat(",
                "-      org.silverpeas.core.contribution.converter.DocumentFormat documentFormat) {",
                "-    String mimeType = documentFormat.getMimeType();",
                "-    com.artofsolving.jodconverter.DocumentFormat format =",
                "-        getDocumentFormatRegistry().getFormatByMimeType(mimeType);",
                "-    if (format == null) {",
                "-      if (RTF_MIME_TYPE.equals(mimeType)) {",
                "-        mimeType = mimeType.replaceFirst(\"application\", \"text\");",
                "-      }",
                "-      format = getDocumentFormatRegistry().getFormatByMimeType(mimeType);",
                "-    }",
                "-    if (format == null) {",
                "-      throw new java.lang.IllegalArgumentException(",
                "-          \"unknown document format for MIME-TYPE: \" + documentFormat.getMimeType());",
                "-    }",
                "-    return format;",
                "-  }",
                "-}",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/converter/option/FilterOption.java b/core-library/src/main/java/org/silverpeas/core/contribution/converter/option/FilterOption.java",
                "index a5aa6c8da6..40c84fd1dd 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/converter/option/FilterOption.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/converter/option/FilterOption.java",
                "@@ -26,5 +26,6 @@ package org.silverpeas.core.contribution.converter.option;",
                " /**",
                "+ * An option of filtering to apply on a document to convert.",
                "  * @author Yohann Chastagnier",
                "  */",
                "-public interface FilterOption {",
                "+public interface FilterOption<T> {",
                "@@ -32,3 +33,3 @@ public interface FilterOption {",
                "-  Object getValue();",
                "+  T getValue();",
                " }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/converter/option/SinglePageSelection.java b/core-library/src/main/java/org/silverpeas/core/contribution/converter/option/SinglePageSelection.java",
                "new file mode 100644",
                "index 0000000000..04da555e40",
                "--- /dev/null",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/converter/option/SinglePageSelection.java",
                "@@ -0,0 +1,48 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+package org.silverpeas.core.contribution.converter.option;",
                "+",
                "+",
                "+/**",
                "+ * An option of filtering a given single page.",
                "+ * @author Yohann Chastagnier",
                "+ */",
                "+public class SinglePageSelection implements FilterOption<String> {",
                "+",
                "+  private final String pageNumber;",
                "+",
                "+  public SinglePageSelection(final int pageNumber) {",
                "+    this.pageNumber = String.valueOf(pageNumber);",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getName() {",
                "+    return \"PageRange\";",
                "+  }",
                "+",
                "+  @Override",
                "+  public String getValue() {",
                "+    return pageNumber;",
                "+  }",
                "+}",
                "diff --git a/core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/DefaultPreviewService.java b/core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/DefaultPreviewService.java",
                "index 44b5c2affb..e2f51a75ef 100644",
                "--- a/core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/DefaultPreviewService.java",
                "+++ b/core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/DefaultPreviewService.java",
                "@@ -27,3 +27,3 @@ import org.silverpeas.core.contribution.converter.DocumentFormat;",
                " import org.silverpeas.core.contribution.converter.DocumentFormatConverterProvider;",
                "-import org.silverpeas.core.contribution.converter.option.PageRangeFilterOption;",
                "+import org.silverpeas.core.contribution.converter.option.SinglePageSelection;",
                " import org.silverpeas.core.io.media.image.ImageTool;",
                "@@ -153,3 +153,3 @@ public class DefaultPreviewService extends AbstractViewerService implements Prev",
                "     DocumentFormatConverterProvider.getToPDFConverter()",
                "-        .convert(source, destination, DocumentFormat.pdf, new PageRangeFilterOption(\"1\"));",
                "+        .convert(source, destination, DocumentFormat.pdf, new SinglePageSelection(1));",
                "     return destination;"
            ],
            "changed_files": [
                "core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/AbstractConverterIntegrationTest.java",
                "core-library/src/integration-test/java/org/silverpeas/core/mail/MsgMailExtractorIT.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormat.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatConversion.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatConversionException.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/converter/DocumentFormatException.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/ExtendedDocumentFormatRegistry.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeConverter.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeService.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/SilverpeasOpenOfficeDocumentConverter.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/converter/option/FilterOption.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/converter/option/SinglePageSelection.java",
                "core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/DefaultPreviewService.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea, file, call",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4cb8b3e67376741e4f33f67df45302a68ae5f1db",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1541784923,
            "hunks": 3,
            "message": "append all profiles of current user of each component into existing contextual div",
            "diff": [
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/window/WindowWithContextualDiv.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/window/WindowWithContextualDiv.java",
                "index 6cdc016c0a..5c2a732518 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/window/WindowWithContextualDiv.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/window/WindowWithContextualDiv.java",
                "@@ -29,2 +29,3 @@ import org.silverpeas.core.admin.service.OrganizationControllerProvider;",
                " import org.silverpeas.core.admin.space.SpaceInstLight;",
                "+import org.silverpeas.core.admin.user.model.User;",
                " import org.silverpeas.core.util.StringUtil;",
                "@@ -62,4 +63,15 @@ public class WindowWithContextualDiv extends AbstractWindow {",
                "       ComponentInstLight component = oc.getComponentInstLight(componentId);",
                "+",
                "+      // append all profiles of current user",
                "+      String userId = User.getCurrentRequester().getId();",
                "+      String[] profiles = oc.getUserProfiles(userId, componentId);",
                "+      StringBuilder profilesStr = new StringBuilder();",
                "+      if (profiles != null) {",
                "+        for (String profile : profiles) {",
                "+          profilesStr.append(\" profile_\" + profile);",
                "+        }",
                "+      }",
                "+",
                "       return \"<div class=\\\"\" + spaceIds.toString() + component.getName() + \" \" + componentId +",
                "-          \"\\\">\";",
                "+          profilesStr + \"\\\">\";",
                "     }"
            ],
            "changed_files": [
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/window/WindowWithContextualDiv.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4a696e2dc810ca2347968eb34b64245b7a9d7028",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1538042971,
            "hunks": 24,
            "message": "Feature #10078: this commit contains some missing changes which have not been taken into account on PR integration...",
            "diff": [
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/AbstractConverterIntegrationTest.java b/core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/AbstractConverterIntegrationTest.java",
                "index 1bf061175d..959e90c5d6 100644",
                "--- a/core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/AbstractConverterIntegrationTest.java",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/AbstractConverterIntegrationTest.java",
                "@@ -27,5 +27,10 @@ import org.jboss.arquillian.container.test.api.Deployment;",
                " import org.jboss.shrinkwrap.api.Archive;",
                "+import org.junit.After;",
                "+import org.junit.Before;",
                "+import org.junit.BeforeClass;",
                " import org.junit.Rule;",
                "+import org.silverpeas.core.contribution.converter.openoffice.OpenOfficeService;",
                " import org.silverpeas.core.test.WarBuilder4LibCore;",
                " import org.silverpeas.core.test.rule.MavenTargetDirectoryRule;",
                "+import org.silverpeas.core.util.ServiceProvider;",
                "@@ -64,2 +69,14 @@ public class AbstractConverterIntegrationTest {",
                "   }",
                "+",
                "+  @Before",
                "+  public void startOpenOfficeService() throws Exception {",
                "+    OpenOfficeService service = ServiceProvider.getService(OpenOfficeService.class);",
                "+    service.init();",
                "+  }",
                "+",
                "+  @After",
                "+  public void stopOpenOfficeService() throws Exception {",
                "+    OpenOfficeService service = ServiceProvider.getService(OpenOfficeService.class);",
                "+    service.release();",
                "+  }",
                " }",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/HTMLConverterIT.java b/core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/HTMLConverterIT.java",
                "index 2c515368b6..11f9f862fb 100644",
                "--- a/core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/HTMLConverterIT.java",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/HTMLConverterIT.java",
                "@@ -26,3 +26,2 @@ package org.silverpeas.core.contribution.converter;",
                " import org.jboss.arquillian.junit.Arquillian;",
                "-import org.junit.After;",
                " import org.junit.Before;",
                "@@ -34,5 +33,5 @@ import java.io.File;",
                "-import static org.silverpeas.core.contribution.converter.DocumentFormat.*;",
                " import static org.hamcrest.Matchers.is;",
                " import static org.junit.Assert.assertThat;",
                "+import static org.silverpeas.core.contribution.converter.DocumentFormat.*;",
                "@@ -59,6 +58,2 @@ public class HTMLConverterIT extends AbstractConverterIntegrationTest {",
                "-  @After",
                "-  public void tearDown() {",
                "-  }",
                "-",
                "   @Test",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/mail/MsgMailExtractorIT.java b/core-library/src/integration-test/java/org/silverpeas/core/mail/MsgMailExtractorIT.java",
                "index 7c856668ef..2434b605ad 100644",
                "--- a/core-library/src/integration-test/java/org/silverpeas/core/mail/MsgMailExtractorIT.java",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/mail/MsgMailExtractorIT.java",
                "@@ -25,2 +25,4 @@ package org.silverpeas.core.mail;",
                "+import org.junit.After;",
                "+import org.junit.Before;",
                " import org.silverpeas.core.contribution.converter.DocumentFormatConverterProvider;",
                "@@ -35,2 +37,3 @@ import org.junit.Test;",
                " import org.junit.runner.RunWith;",
                "+import org.silverpeas.core.contribution.converter.openoffice.OpenOfficeService;",
                " import org.silverpeas.core.test.WarBuilder4LibCore;",
                "@@ -38,2 +41,3 @@ import org.silverpeas.core.test.rule.MavenTargetDirectoryRule;",
                " import org.silverpeas.core.util.DateUtil;",
                "+import org.silverpeas.core.util.ServiceProvider;",
                " import org.silverpeas.core.util.StringUtil;",
                "@@ -85,2 +89,14 @@ public class MsgMailExtractorIT {",
                "+  @Before",
                "+  public void startOpenOfficeService() throws Exception {",
                "+    OpenOfficeService service = ServiceProvider.getService(OpenOfficeService.class);",
                "+    service.init();",
                "+  }",
                "+",
                "+  @After",
                "+  public void stopOpenOfficeService() throws Exception {",
                "+    OpenOfficeService service = ServiceProvider.getService(OpenOfficeService.class);",
                "+    service.release();",
                "+  }",
                "+",
                "   /**",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/converter/ConverterImplementationInjectionTest.java b/core-library/src/test-awaiting/java/com/silverpeas/converter/ConverterImplementationInjectionTest.java",
                "deleted file mode 100644",
                "index 1787535760..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/converter/ConverterImplementationInjectionTest.java",
                "+++ /dev/null",
                "@@ -1,66 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.converter;",
                "-",
                "-import javax.inject.Inject;",
                "-import org.junit.Test;",
                "-import org.junit.runner.RunWith;",
                "-import org.springframework.test.context.ContextConfiguration;",
                "-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;",
                "-import static org.junit.Assert.*;",
                "-",
                "-/**",
                "- * Unit tests to check the objects implementing the document format conversion API are correctly",
                "- * injected by an IoC container.",
                "- */",
                "-@RunWith(SpringJUnit4ClassRunner.class)",
                "-@ContextConfiguration(locations=\"/spring-converter.xml\")",
                "-public class ConverterImplementationInjectionTest {",
                "-",
                "-  @Inject",
                "-  private ODTConverter converterOfODT;",
                "-",
                "-  @Inject",
                "-  private HTMLConverter converterOfHTML;",
                "-",
                "-  public ConverterImplementationInjectionTest() {",
                "-  }",
                "-",
                "-  @Test",
                "-  public void emptyTest() {",
                "-    assertTrue(true);",
                "-  }",
                "-",
                "-  @Test",
                "-  public void convertersShouldBeDirectlyInjected() {",
                "-    assertNotNull(converterOfODT);",
                "-    assertNotNull(converterOfHTML);",
                "-  }",
                "-",
                "-  @Test",
                "-  public void convertersShouldBeGetFromTheFactory() {",
                "-    assertNotNull(DocumentFormatConverterProvider.getODTConverter());",
                "-    assertNotNull(DocumentFormatConverterProvider.getHTMLConverter());",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/converter/DocumentsProvider.java b/core-library/src/test-awaiting/java/com/silverpeas/converter/DocumentsProvider.java",
                "deleted file mode 100644",
                "index 48d5c480bb..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/converter/DocumentsProvider.java",
                "+++ /dev/null",
                "@@ -1,60 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.converter;",
                "-",
                "-import java.io.File;",
                "-",
                "-/**",
                "- * A provider of documents in several format dedicated to tests.",
                "- */",
                "-public final class DocumentsProvider {",
                "-",
                "-  private static final String BASENAME_DOCUMENT = \"API_REST_Silverpeas\";",
                "-",
                "-  public static DocumentsProvider aDocumentsProvider() {",
                "-    return new DocumentsProvider();",
                "-  }",
                "-",
                "-  /**",
                "-   * Gets a document in ODT format",
                "-   * @return the the ODT document",
                "-   * @throws Exception if an error occurs while getting the document.",
                "-   */",
                "-  public File getODTDocument() throws Exception {",
                "-    return new File(getClass().getResource(BASENAME_DOCUMENT + \".odt\").toURI());",
                "-  }",
                "-",
                "-  /**",
                "-   * Gets a document in the MS-Word 97/2000/XP format",
                "-   * @return the MS-Word document",
                "-   * @throws Exception if an error occurs while getting the document.",
                "-   */",
                "-  public File getMSWordDocument() throws Exception {",
                "-    return new File(getClass().getResource(BASENAME_DOCUMENT + \".doc\").toURI());",
                "-  }",
                "-",
                "-  private DocumentsProvider() {",
                "-",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/converter/openoffice/MyDocumentConverter.java b/core-library/src/test-awaiting/java/com/silverpeas/converter/openoffice/MyDocumentConverter.java",
                "deleted file mode 100644",
                "index 135687c1b2..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/converter/openoffice/MyDocumentConverter.java",
                "+++ /dev/null",
                "@@ -1,78 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.converter.openoffice;",
                "-",
                "-import static org.mockito.Mockito.mock;",
                "-",
                "-import java.io.File;",
                "-import java.net.ConnectException;",
                "-",
                "-import javax.inject.Inject;",
                "-import javax.inject.Named;",
                "-",
                "-import com.artofsolving.jodconverter.openoffice.connection.OpenOfficeConnection;",
                "-import com.artofsolving.jodconverter.openoffice.converter.OpenOfficeDocumentConverter;",
                "-import com.silverpeas.converter.DocumentFormat;",
                "-",
                "-/**",
                "- * A converter of documents that is based upon the OpenOffice service.",
                "- * This converter is just for testing purpose.",
                "- */",
                "-@Named",
                "-public class MyDocumentConverter extends OpenOfficeConverter {",
                "-",
                "-  @Inject",
                "-  private OpenOfficeODTConverter converter;",
                "-  private final SilverpeasOpenOfficeDocumentConverter ooconverter =",
                "-      mock(SilverpeasOpenOfficeDocumentConverter.class);",
                "-",
                "-  @Override",
                "-  public DocumentFormat[] getSupportedFormats() {",
                "-    return converter.getSupportedFormats();",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isDocumentSupported(final File document) {",
                "-    return converter.isDocumentSupported(document);",
                "-  }",
                "-",
                "-  @Override",
                "-  protected void closeConnection(final OpenOfficeConnection connection) {",
                "-  }",
                "-",
                "-  @Override",
                "-  protected SilverpeasOpenOfficeDocumentConverter getOpenOfficeDocumentConverterFrom(",
                "-      final OpenOfficeConnection connection) {",
                "-    return ooconverter;",
                "-  }",
                "-",
                "-  @Override",
                "-  protected OpenOfficeConnection openConnection() throws ConnectException {",
                "-    return mock(OpenOfficeConnection.class);",
                "-  }",
                "-",
                "-  public OpenOfficeDocumentConverter getMockedOpenOfficeDocumentConverter() {",
                "-    return ooconverter;",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/converter/openoffice/OpenOfficeConversionTest.java b/core-library/src/test-awaiting/java/com/silverpeas/converter/openoffice/OpenOfficeConversionTest.java",
                "deleted file mode 100644",
                "index 8a89cc8b51..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/converter/openoffice/OpenOfficeConversionTest.java",
                "+++ /dev/null",
                "@@ -1,97 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.converter.openoffice;",
                "-",
                "-import com.artofsolving.jodconverter.openoffice.converter.OpenOfficeDocumentConverter;",
                "-import com.silverpeas.converter.DocumentFormatConversionException;",
                "-import com.silverpeas.converter.DocumentFormatConverterProvider;",
                "-import com.silverpeas.converter.DocumentFormatException;",
                "-import com.silverpeas.converter.ODTConverter;",
                "-import java.io.File;",
                "-import javax.inject.Inject;",
                "-import org.junit.runner.RunWith;",
                "-import org.springframework.test.context.ContextConfiguration;",
                "-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;",
                "-import org.junit.Before;",
                "-import org.junit.Test;",
                "-import static org.junit.Assert.*;",
                "-import static org.mockito.Mockito.*;",
                "-import static com.silverpeas.converter.DocumentsProvider.*;",
                "-import static com.silverpeas.converter.DocumentFormat.*;",
                "-",
                "-/**",
                "- * Tests about the conversion of documents with the implementation based on OpenOffice .",
                "- * As the conversion process itself is mocked, the tests assert just it is ran as expected.",
                "- */",
                "-@RunWith(SpringJUnit4ClassRunner.class)",
                "-@ContextConfiguration(locations = \"/spring-converter.xml\")",
                "-public class OpenOfficeConversionTest {",
                "-",
                "-  @Inject",
                "-  private MyDocumentConverter converter;",
                "-",
                "-  public OpenOfficeConversionTest() {",
                "-  }",
                "-",
                "-  @Before",
                "-  public void setUp() {",
                "-    assertNotNull(converter);",
                "-  }",
                "-",
                "-  @Test",
                "-  public void emptyTest() {",
                "-    assertTrue(true);",
                "-  }",
                "-",
                "-  @Test(expected = DocumentFormatException.class)",
                "-  public void convertingANonODTDocumentShouldThrowADocumentFormatException() throws Exception {",
                "-    File document = aDocumentsProvider().getMSWordDocument();",
                "-    converter.convert(document, inFormat(pdf));",
                "-  }",
                "-",
                "-  @Test(expected = DocumentFormatException.class)",
                "-  public void convertingADocumentIntoANonSupportedFormatShouldThrowADocumentFormatException() throws",
                "-    Exception {",
                "-    File document = aDocumentsProvider().getMSWordDocument();",
                "-    converter.convert(document, inFormat(odt));",
                "-  }",
                "-",
                "-  @Test(expected = DocumentFormatConversionException.class)",
                "-  public void conversionWithoutAnyOpenOfficeServiceShouldThrowADocumentFormatConversionException()",
                "-    throws Exception {",
                "-    ODTConverter odtConverter = DocumentFormatConverterProvider.getODTConverter();",
                "-    File document = aDocumentsProvider().getODTDocument();",
                "-    odtConverter.convert(document, inFormat(pdf));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void conversionWithAnOpenOfficeServiceUpShouldSucceed() throws Exception {",
                "-    File document = aDocumentsProvider().getODTDocument();",
                "-    File convertedDocument = converter.convert(document, inFormat(pdf));",
                "-    assertNotNull(convertedDocument);",
                "-",
                "-    OpenOfficeDocumentConverter ooconverter = converter.getMockedOpenOfficeDocumentConverter();",
                "-    verify(ooconverter).convert(document, convertedDocument);",
                "-  }",
                "-}",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/AbstractViewerIT.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/AbstractViewerIT.java",
                "index cc09f90b99..365a3effdd 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/AbstractViewerIT.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/AbstractViewerIT.java",
                "@@ -28,2 +28,3 @@ import org.jboss.arquillian.container.test.api.Deployment;",
                " import org.jboss.shrinkwrap.api.Archive;",
                "+import org.junit.After;",
                " import org.junit.Before;",
                "@@ -32,2 +33,3 @@ import org.silverpeas.core.contribution.attachment.model.SimpleDocument;",
                " import org.silverpeas.core.contribution.attachment.model.SimpleDocumentPK;",
                "+import org.silverpeas.core.contribution.converter.openoffice.OpenOfficeService;",
                " import org.silverpeas.core.initialization.Initialization;",
                "@@ -40,3 +42,5 @@ import org.silverpeas.core.viewer.test.WarBuilder4Viewer;",
                " import java.io.File;",
                "+import java.util.Arrays;",
                " import java.util.Date;",
                "+import java.util.List;",
                " import java.util.logging.Logger;",
                "@@ -59,2 +63,7 @@ public abstract class AbstractViewerIT {",
                "   private static File resourceTestDir;",
                "+  private static List<Class<? extends Initialization>> services = Arrays.asList(",
                "+      Im4javaManager.class,",
                "+      SwfToolManager.class,",
                "+      JsonPdfToolManager.class,",
                "+      OpenOfficeService.class);",
                "@@ -79,8 +88,6 @@ public abstract class AbstractViewerIT {",
                "   @Before",
                "-  public void setupCommonServices() throws Exception {",
                "+  public void initCommonServices() throws Exception {",
                "     init();",
                "-    for (Initialization serviceToInitialize : new Initialization[]{",
                "-        ServiceProvider.getService(Im4javaManager.class),",
                "-        ServiceProvider.getService(SwfToolManager.class),",
                "-        ServiceProvider.getService(JsonPdfToolManager.class)}) {",
                "+    for (Class<? extends Initialization> service: services) {",
                "+      Initialization serviceToInitialize = ServiceProvider.getService(service);",
                "       serviceToInitialize.init();",
                "@@ -89,2 +96,10 @@ public abstract class AbstractViewerIT {",
                "+  @After",
                "+  public void releaseCommonServices() throws Exception {",
                "+    for (Class<? extends Initialization> service: services) {",
                "+      Initialization serviceToInitialize = ServiceProvider.getService(service);",
                "+      serviceToInitialize.release();",
                "+    }",
                "+  }",
                "+",
                "   @SuppressWarnings(\"ConstantConditions\")"
            ],
            "changed_files": [
                "core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/AbstractConverterIntegrationTest.java",
                "core-library/src/integration-test/java/org/silverpeas/core/contribution/converter/HTMLConverterIT.java",
                "core-library/src/integration-test/java/org/silverpeas/core/mail/MsgMailExtractorIT.java",
                "core-library/src/test-awaiting/java/com/silverpeas/converter/ConverterImplementationInjectionTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/converter/DocumentsProvider.java",
                "core-library/src/test-awaiting/java/com/silverpeas/converter/openoffice/MyDocumentConverter.java",
                "core-library/src/test-awaiting/java/com/silverpeas/converter/openoffice/OpenOfficeConversionTest.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/AbstractViewerIT.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10078": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10078",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cbc68b65d345200a0b261d6700b8d8ab3eae37d2",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1542805901,
            "hunks": 398,
            "message": "Feature #9884: Improve the existing code in some classes, some of them based upon feedbacks of SonarQube.",
            "diff": [
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/token/persistent/service/MyUnknownEntityReference.java b/core-api/src/main/java/org/silverpeas/core/notification/NotificationException.java",
                "similarity index 64%",
                "rename from core-library/src/test-awaiting/java/org/silverpeas/token/persistent/service/MyUnknownEntityReference.java",
                "rename to core-api/src/main/java/org/silverpeas/core/notification/NotificationException.java",
                "index 74b3917b55..5da61f25ee 100644",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/token/persistent/service/MyUnknownEntityReference.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/NotificationException.java",
                "@@ -23,22 +23,25 @@",
                "  */",
                "-package org.silverpeas.token.persistent.service;",
                "+package org.silverpeas.core.notification;",
                "-import java.util.Date;",
                "-import org.silverpeas.EntityReference;",
                "+import org.silverpeas.core.SilverpeasException;",
                " /**",
                "- *",
                "- * @author mmoquillon",
                "+ * Exception thrown when an error occurs while preparing, sending, or treating a notification in",
                "+ * Silverpeas.",
                "  */",
                "-public class MyUnknownEntityReference extends EntityReference<Date> {",
                "+public class NotificationException extends SilverpeasException {",
                "+",
                "+  private static final long serialVersionUID = 2605612279043382365L;",
                "-  public MyUnknownEntityReference(String id) {",
                "-    super(id);",
                "+  public NotificationException(final String message, final String... parameters) {",
                "+    super(message, parameters);",
                "   }",
                "-  @Override",
                "-  public Date getEntity() {",
                "-    return new Date();",
                "+  public NotificationException(final String message, final Throwable cause) {",
                "+    super(message, cause);",
                "   }",
                "+  public NotificationException(final Throwable cause) {",
                "+    super(cause);",
                "+  }",
                " }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManager.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManager.java",
                "index f7a2cb2508..443020b368 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManager.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManager.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.notification.user.client;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.util.ServiceProvider;",
                "@@ -45,10 +46,10 @@ public interface NotificationManager {",
                "-  ArrayList<Properties> getNotificationAddresses(int aUserId) throws NotificationManagerException;",
                "+  ArrayList<Properties> getNotificationAddresses(int aUserId) throws NotificationException;",
                "   Properties getNotificationAddress(int aNotificationAddressId, int aUserId)",
                "-      throws NotificationManagerException;",
                "+      throws NotificationException;",
                "-  ArrayList<Properties> getDefaultAddresses(int aUserId) throws NotificationManagerException;",
                "+  ArrayList<Properties> getDefaultAddresses(int aUserId) throws NotificationException;",
                "-  int getDefaultAddress(int aUserId) throws NotificationManagerException;",
                "+  int getDefaultAddress(int aUserId) throws NotificationException;",
                "@@ -58,40 +59,40 @@ public interface NotificationManager {",
                "-  ArrayList<Properties> getNotifChannels() throws NotificationManagerException;",
                "+  ArrayList<Properties> getNotifChannels() throws NotificationException;",
                "-  ArrayList<Properties> getNotifPreferences(int aUserId) throws NotificationManagerException;",
                "+  ArrayList<Properties> getNotifPreferences(int aUserId) throws NotificationException;",
                "-  Properties getNotifPreference(int aPrefId, int aUserId) throws NotificationManagerException;",
                "+  Properties getNotifPreference(int aPrefId, int aUserId) throws NotificationException;",
                "   void setDefaultAddress(int aNotificationAddressId, int aUserId)",
                "-      throws NotificationManagerException;",
                "+      throws NotificationException;",
                "-  void addAddress(int aNotificationAddressId, int aUserId) throws NotificationManagerException;",
                "+  void addAddress(int aNotificationAddressId, int aUserId) throws NotificationException;",
                "   void savePreferences(int aUserId, int aInstanceId, int aMessageType, int aDestinationId)",
                "-      throws NotificationManagerException;",
                "+      throws NotificationException;",
                "   void saveNotifAddress(int aNotificationAddressId, int aUserId, String aNotifName, int aChannelId,",
                "-      String aAddress, String aUsage) throws NotificationManagerException;",
                "+      String aAddress, String aUsage) throws NotificationException;",
                "-  void deletePreference(int aPreferenceId) throws NotificationManagerException;",
                "+  void deletePreference(int aPreferenceId) throws NotificationException;",
                "-  void deleteNotifAddress(int aNotificationAddressId) throws NotificationManagerException;",
                "+  void deleteNotifAddress(int aNotificationAddressId) throws NotificationException;",
                "-  void deleteAllAddress(int userId) throws NotificationManagerException;",
                "+  void deleteAllAddress(int userId) throws NotificationException;",
                "   void testNotifAddress(int aNotificationAddressId, int aUserId)",
                "-      throws NotificationManagerException;",
                "+      throws NotificationException;",
                "   void notifyUsers(NotificationParameters params, String[] userIds)",
                "-      throws NotificationManagerException;",
                "+      throws NotificationException;",
                "   void notifyExternals(NotificationParameters params, Collection<ExternalRecipient> externals)",
                "-      throws NotificationManagerException;",
                "+      throws NotificationException;",
                "-  Collection<UserRecipient> getUsersFromGroup(String groupId) throws NotificationManagerException;",
                "+  Collection<UserRecipient> getUsersFromGroup(String groupId) throws NotificationException;",
                "-  String getComponentFullName(String compInst) throws NotificationManagerException;",
                "+  String getComponentFullName(String compInst) throws NotificationException;",
                "   String getComponentFullName(String compInst, String separator, boolean isPathToComponent)",
                "-      throws NotificationManagerException;",
                "+      throws NotificationException;",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerException.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerException.java",
                "deleted file mode 100644",
                "index 4d6ba77ec7..0000000000",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerException.java",
                "+++ /dev/null",
                "@@ -1,56 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.notification.user.client;",
                "-",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                "-",
                "-public class NotificationManagerException extends SilverpeasException {",
                "-",
                "-  private static final long serialVersionUID = 5537557512687144809L;",
                "-",
                "-  public NotificationManagerException(String callingClass, int errorLevel,",
                "-      String message) {",
                "-    super(callingClass, errorLevel, message);",
                "-  }",
                "-",
                "-  public NotificationManagerException(String callingClass, int errorLevel,",
                "-      String message, String extraParams) {",
                "-    super(callingClass, errorLevel, message, extraParams);",
                "-  }",
                "-",
                "-  public NotificationManagerException(String callingClass, int errorLevel,",
                "-      String message, Exception nested) {",
                "-    super(callingClass, errorLevel, message, nested);",
                "-  }",
                "-",
                "-  public NotificationManagerException(String callingClass, int errorLevel,",
                "-      String message, String extraParams, Exception nested) {",
                "-    super(callingClass, errorLevel, message, extraParams, nested);",
                "-  }",
                "-",
                "-  public String getModule() {",
                "-    return \"notificationManager\";",
                "-  }",
                "-",
                "-}",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "index 3b695d7103..3b37739ac1 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "@@ -27,2 +27,3 @@ import org.silverpeas.core.admin.user.model.Group;",
                " import org.silverpeas.core.admin.user.model.User;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.constant.NotifAction;",
                "@@ -279,3 +280,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "         }",
                "-      } catch (NotificationManagerException e) {",
                "+      } catch (NotificationException e) {",
                "         SilverTrace.warn(\"notificationManager\",",
                "@@ -688,5 +689,5 @@ public class NotificationMetaData implements java.io.Serializable {",
                "    * @return the complete list of users that will receive the notification.",
                "-   * @throws NotificationManagerException if an error occurs",
                "+   * @throws NotificationException if an error occurs",
                "    */",
                "-  public Set<UserRecipient> getAllUserRecipients() throws NotificationManagerException {",
                "+  public Set<UserRecipient> getAllUserRecipients() throws NotificationException {",
                "     return getAllUserRecipients(false);",
                "@@ -702,6 +703,6 @@ public class NotificationMetaData implements java.io.Serializable {",
                "    * @return the complete list of users that will receive the notification.",
                "-   * @throws NotificationManagerException if an error occurs",
                "+   * @throws NotificationException if an error occurs",
                "    */",
                "   public Set<UserRecipient> getAllUserRecipients(boolean updateInternalUserRecipientsToExclude)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "@@ -731,3 +732,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "   private Set<UserRecipient> getUsersForReceiverBlock()",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "     HashSet<UserRecipient> usersSet = new HashSet<>();",
                "@@ -755,3 +756,3 @@ public class NotificationMetaData implements java.io.Serializable {",
                "-  private String getUserReceiverFormattedList() throws NotificationManagerException {",
                "+  private String getUserReceiverFormattedList() throws NotificationException {",
                "     StringBuilder users = new StringBuilder();",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/component/model/ComponentInst.java b/core-library/src/main/java/org/silverpeas/core/admin/component/model/ComponentInst.java",
                "index ebc052d390..0c94dd64d2 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/component/model/ComponentInst.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/component/model/ComponentInst.java",
                "@@ -57,3 +57,3 @@ public class ComponentInst extends AbstractI18NBean<ComponentI18N>",
                "   private static final Pattern COMPONENT_INSTANCE_IDENTIFIER =",
                "-      Pattern.compile(\"^([a-zA-Z-]+)[0-9]+$\");",
                "+      Pattern.compile(\"^([a-zA-Z-]+)([0-9]+)$\");",
                "@@ -112,2 +112,22 @@ public class ComponentInst extends AbstractI18NBean<ComponentI18N>",
                "+  /**",
                "+   * Gets the local identifier of the multi-user component from which the specified instance was",
                "+   * spawn. By convention, the identifiers of the component instances are made up of the name of the",
                "+   * component followed by a number, the local identifier. This method is a way to get directly",
                "+   * the component local identifier from an instance identifier.",
                "+   * @param componentInstanceId the unique identifier of a component instance.",
                "+   * @return the local identifier of the multi-user component or -1 if the specified identifier",
                "+   * doesn't match the rule of a shared component instance identifier.",
                "+   */",
                "+  public static int getComponentLocalId(final String componentInstanceId) {",
                "+    int componentId = -1;",
                "+    if (StringUtil.isDefined(componentInstanceId)) {",
                "+      Matcher matcher = COMPONENT_INSTANCE_IDENTIFIER.matcher(componentInstanceId);",
                "+      if (matcher.matches()) {",
                "+        componentId = Integer.parseInt(matcher.group(2));",
                "+      }",
                "+    }",
                "+    return componentId;",
                "+  }",
                "+",
                "   @Override",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/user/UserRegistrationServiceLegacy.java b/core-library/src/main/java/org/silverpeas/core/admin/user/UserRegistrationServiceLegacy.java",
                "index b8db30235c..8ecc465059 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/user/UserRegistrationServiceLegacy.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/user/UserRegistrationServiceLegacy.java",
                "@@ -32,3 +32,3 @@ import org.silverpeas.core.admin.user.model.UserDetail;",
                " import org.silverpeas.core.admin.user.model.UserFull;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -211,3 +211,3 @@ public class UserRegistrationServiceLegacy implements UserRegistrationService {",
                "       notifSender.notifyUser(notifMetaData);",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new AdminException(\"Fail to notify users\", e);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/attachment/ScheduledReservedFile.java b/core-library/src/main/java/org/silverpeas/core/contribution/attachment/ScheduledReservedFile.java",
                "index ad37244bbc..b737f04889 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/attachment/ScheduledReservedFile.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/attachment/ScheduledReservedFile.java",
                "@@ -27,3 +27,3 @@ import org.silverpeas.core.contribution.attachment.model.SimpleDocument;",
                " import org.silverpeas.core.initialization.Initialization;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -228,3 +228,3 @@ public class ScheduledReservedFile implements Initialization {",
                "       notifSender.notifyUser(notifMetaData);",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new AttachmentException(e);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/datereminder/DateReminderScheduler.java b/core-library/src/main/java/org/silverpeas/core/datereminder/DateReminderScheduler.java",
                "index 325bf1876f..471d4a22f5 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/datereminder/DateReminderScheduler.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/datereminder/DateReminderScheduler.java",
                "@@ -34,3 +34,3 @@ import org.silverpeas.core.datereminder.provider.DateReminderProcessRegistration",
                " import org.silverpeas.core.initialization.Initialization;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.persistence.EntityReference;",
                "@@ -97,3 +97,3 @@ public class DateReminderScheduler implements SchedulerEventListener, Initializa",
                "           performed = true;",
                "-        } catch (NotificationManagerException e) {",
                "+        } catch (NotificationException e) {",
                "           SilverLogger.getLogger(this).error(\"Date reminder failure for type = {0}, resource = {1}\",",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/datereminder/provider/DateReminderProcess.java b/core-library/src/main/java/org/silverpeas/core/datereminder/provider/DateReminderProcess.java",
                "index 1e1ad56860..a3e7a15047 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/datereminder/provider/DateReminderProcess.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/datereminder/provider/DateReminderProcess.java",
                "@@ -25,3 +25,3 @@ package org.silverpeas.core.datereminder.provider;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.datereminder.persistence.PersistentResourceDateReminder;",
                "@@ -39,3 +39,3 @@ public interface DateReminderProcess {",
                "   EntityReference perform(PersistentResourceDateReminder dateReminder)",
                "-      throws NotificationManagerException;",
                "+      throws NotificationException;",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java b/core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java",
                "index 405edf37b4..af24bec485 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java",
                "@@ -26,3 +26,3 @@ package org.silverpeas.core.notification.user;",
                " import org.apache.commons.lang3.StringUtils;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -31,3 +31,2 @@ import org.silverpeas.core.notification.user.client.constant.NotifMediaType;",
                " import org.silverpeas.core.notification.user.client.constant.NotifMessageType;",
                "-import org.silverpeas.core.persistence.Transaction;",
                " import org.silverpeas.core.template.SilverpeasTemplate;",
                "@@ -81,3 +80,3 @@ public class DefaultUserNotification implements UserNotification {",
                "         }",
                "-      } catch (final NotificationManagerException e) {",
                "+      } catch (final NotificationException e) {",
                "         SilverLogger.getLogger(this).warn(e);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/CurrentUserNotificationContext.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/CurrentUserNotificationContext.java",
                "index 85e5359036..b88f70421d 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/CurrentUserNotificationContext.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/CurrentUserNotificationContext.java",
                "@@ -27,3 +27,3 @@ import org.silverpeas.core.admin.user.model.UserDetail;",
                " import org.silverpeas.core.cache.service.CacheServiceProvider;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                "@@ -57,6 +57,6 @@ public class CurrentUserNotificationContext {",
                "    * @param notificationMetaData",
                "-   * @throws NotificationManagerException",
                "+   * @throws NotificationException",
                "    */",
                "   public void checkManualUserNotification(NotificationMetaData notificationMetaData)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "     if (NotificationManagerSettings.isUserManualNotificationRecipientLimitEnabled() && notificationMetaData.isManualUserOne()) {",
                "@@ -76,5 +76,3 @@ public class CurrentUserNotificationContext {",
                "       if (limitExceeded) {",
                "-        throw new NotificationManagerException(\"CurrentUserNotificationContext\",",
                "-            SilverpeasException.ERROR,",
                "-            \"notificationManager.EX_USER_MANUAL_NOTIFICATION_LIMIT_EXCEEDED\");",
                "+        throw new NotificationException(\"The user receiving limit is exceeded\");",
                "       }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "index 1f2f1968ba..3e50783964 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "@@ -26,2 +26,3 @@ package org.silverpeas.core.notification.user.client;",
                " import org.apache.commons.lang3.StringUtils;",
                "+import org.jetbrains.annotations.NotNull;",
                " import org.silverpeas.core.admin.component.ComponentInstanceDeletion;",
                "@@ -35,4 +36,4 @@ import org.silverpeas.core.admin.user.constant.UserAccessLevel;",
                " import org.silverpeas.core.admin.user.model.UserDetail;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                "-import org.silverpeas.core.exception.UtilException;",
                "+import org.silverpeas.core.i18n.I18NHelper;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.constant.NotifChannel;",
                "@@ -53,3 +54,2 @@ import org.silverpeas.core.notification.user.server.NotificationServer;",
                " import org.silverpeas.core.notification.user.server.NotificationServerException;",
                "-import org.silverpeas.core.silvertrace.SilverTrace;",
                " import org.silverpeas.core.util.LocalizationBundle;",
                "@@ -82,8 +82,12 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  public static final String FROM_NO = \" \";",
                "-  public static final String FROM_UID = \"I\";",
                "-  public static final String FROM_EMAIL = \"E\";",
                "-  public static final String FROM_NAME = \"N\";",
                "+  private static final String FROM_UID = \"I\";",
                "+  private static final String FROM_EMAIL = \"E\";",
                "+  private static final String FROM_NAME = \"N\";",
                "+  private static final String HTML_BREAK_LINES = \"<br><br>\";",
                "+  private static final String SUBJECT = \"subject\";",
                "+  private static final String OF_THE_USER = \" of the user \";",
                "+  private static final String FOR_THE_USER = \" for the user \";",
                "+  private static final String MESSAGE_PRIORITY = \"messagePriority\";",
                "-  private LocalizationBundle m_Multilang = null;",
                "+  private LocalizationBundle multilang;",
                "   @Inject",
                "@@ -98,3 +102,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   protected DefaultNotificationManager() {",
                "-    m_Multilang = ResourceLocator.getLocalizationBundle(",
                "+    multilang = ResourceLocator.getLocalizationBundle(",
                "         \"org.silverpeas.notificationManager.multilang.notificationManagerBundle\", \"fr\");",
                "@@ -104,8 +108,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   public DefaultNotificationManager forLanguage(String language) {",
                "-    String safeLanguage = language;",
                "-    if ((language == null) || (language.length() <= 0)) {",
                "-      safeLanguage = \"fr\";",
                "-    }",
                "-    m_Multilang = ResourceLocator.getLocalizationBundle(",
                "-        \"org.silverpeas.notificationManager.multilang.notificationManagerBundle\", safeLanguage);",
                "+    final String lang = StringUtil.isDefined(language) ? language : I18NHelper.defaultLanguage;",
                "+    multilang = ResourceLocator.getLocalizationBundle(",
                "+        \"org.silverpeas.notificationManager.multilang.notificationManagerBundle\", lang);",
                "     return this;",
                "@@ -132,8 +133,7 @@ public class DefaultNotificationManager extends AbstractNotification",
                "    * @return an ArrayList of properties containing \"name\", \"type\", \"usage\" and \"address\" keys",
                "-   * @throws NotificationManagerException",
                "+   * @throws NotificationException",
                "    */",
                "   @Override",
                "-  public ArrayList<Properties> getNotificationAddresses(int aUserId)",
                "-      throws NotificationManagerException {",
                "-    ArrayList<Properties> adresses = new ArrayList<Properties>();",
                "+  public ArrayList<Properties> getNotificationAddresses(int aUserId) throws NotificationException {",
                "+    ArrayList<Properties> addresses = new ArrayList<>();",
                "     try {",
                "@@ -144,3 +144,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       boolean isMultiChannelSupported = isMultiChannelNotification();",
                "-      adresses.add(",
                "+      addresses.add(",
                "           notifAddressRowToProperties(getNotifAddressRow(params, aUserId), false, false, true,",
                "@@ -149,3 +149,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       params.iMediaType = NotificationParameters.ADDRESS_BASIC_SILVERMAIL;",
                "-      adresses.add(notifAddressRowToProperties(getNotifAddressRow(params, aUserId), false, false,",
                "+      addresses.add(notifAddressRowToProperties(getNotifAddressRow(params, aUserId), false, false,",
                "           true, isDefaultAddress(NotificationParameters.ADDRESS_BASIC_SILVERMAIL, aUserId,",
                "@@ -153,3 +153,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       params.iMediaType = NotificationParameters.ADDRESS_BASIC_SMTP_MAIL;",
                "-      adresses.add(notifAddressRowToProperties(getNotifAddressRow(params, aUserId), false, false,",
                "+      addresses.add(notifAddressRowToProperties(getNotifAddressRow(params, aUserId), false, false,",
                "           true, isDefaultAddress(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL, aUserId,",
                "@@ -157,3 +157,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       params.iMediaType = NotificationParameters.ADDRESS_BASIC_REMOVE;",
                "-      adresses.add(",
                "+      addresses.add(",
                "           notifAddressRowToProperties(getNotifAddressRow(params, aUserId), false, false, false,",
                "@@ -165,3 +165,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       for (NotifAddressRow aNar : nar) {",
                "-        adresses.add(notifAddressRowToProperties(aNar, true, true, true,",
                "+        addresses.add(notifAddressRowToProperties(aNar, true, true, true,",
                "             isDefaultAddress(aNar.getId(), aUserId, isMultiChannelSupported)));",
                "@@ -169,20 +169,11 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.getNotificationAddresses()\",",
                "-          SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_GET_NOTIF_ADDRESSES\", \"UserId=\"",
                "-              + Integer.toString(aUserId), e);",
                "+      throw new NotificationException(\"Cannot get notification addresses of the user \" + aUserId,",
                "+          e);",
                "     }",
                "-    return adresses;",
                "+    return addresses;",
                "   }",
                "-  /**",
                "-   * Method declaration",
                "-   * @param aNotificationAddressId",
                "-   * @return",
                "-   * @throws NotificationManagerException",
                "-   */",
                "   @Override",
                "   public Properties getNotificationAddress(int aNotificationAddressId, int aUserId)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "     Properties p;",
                "@@ -196,8 +187,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.getNotificationAddress()\",",
                "-          SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_GET_NOTIF_ADDRESS\", \"UserId=\"",
                "-              + Integer.toString(aUserId) + \",NotifAddId=\"",
                "-              + Integer.toString(aNotificationAddressId), e);",
                "+      throw new NotificationException(",
                "+          \"Cannot get the notification address \" + aNotificationAddressId + OF_THE_USER + aUserId,",
                "+          e);",
                "     }",
                "@@ -207,5 +195,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   @Override",
                "-  public ArrayList<Properties> getDefaultAddresses(int aUserId)",
                "-      throws NotificationManagerException {",
                "-    ArrayList<Properties> ar = new ArrayList<Properties>();",
                "+  public ArrayList<Properties> getDefaultAddresses(int aUserId) throws NotificationException {",
                "+    ArrayList<Properties> ar = new ArrayList<>();",
                "     NotifAddressRow row;",
                "@@ -240,7 +227,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.getDefaultAddresses()\",",
                "-          SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_GET_DEFAULT_ADDRESSES\", \"UserId=\"",
                "-              + Integer.toString(aUserId), e);",
                "+      throw new NotificationException(",
                "+          \"Cannot get the default notification address of the user \" + aUserId, e);",
                "     }",
                "@@ -249,10 +233,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * Method declaration",
                "-   * @param aUserId",
                "-   * @return The user's default address Id",
                "-   * @throws NotificationManagerException",
                "-   */",
                "   @Override",
                "-  public int getDefaultAddress(int aUserId) throws NotificationManagerException {",
                "+  public int getDefaultAddress(int aUserId) throws NotificationException {",
                "     int addressId;",
                "@@ -271,6 +249,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.getDefaultAddress()\", SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_GET_DEFAULT_ADDRESS\", \"UserId=\"",
                "-              + Integer.toString(aUserId), e);",
                "+      throw new NotificationException(",
                "+          \"Cannot get the default notification address of the user \" + aUserId, e);",
                "     }",
                "@@ -285,6 +261,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   public ArrayList<Properties> getNotifPriorities() {",
                "-    ArrayList<Properties> priorities = new ArrayList<Properties>();",
                "+    ArrayList<Properties> priorities = new ArrayList<>();",
                "     Properties priority = new Properties();",
                "     priority.setProperty(\"id\", Integer.toString(NotificationParameters.NORMAL));",
                "-    priority.setProperty(\"name\", m_Multilang.getString(\"messagePriority\"",
                "+    priority.setProperty(\"name\", multilang.getString(MESSAGE_PRIORITY",
                "         + Integer.toString(NotificationParameters.NORMAL)));",
                "@@ -293,3 +269,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     priority.setProperty(\"id\", Integer.toString(NotificationParameters.URGENT));",
                "-    priority.setProperty(\"name\", m_Multilang.getString(\"messagePriority\"",
                "+    priority.setProperty(\"name\", multilang.getString(MESSAGE_PRIORITY",
                "         + Integer.toString(NotificationParameters.URGENT)));",
                "@@ -298,3 +274,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     priority.setProperty(\"id\", Integer.toString(NotificationParameters.ERROR));",
                "-    priority.setProperty(\"name\", m_Multilang.getString(\"messagePriority\"",
                "+    priority.setProperty(\"name\", multilang.getString(MESSAGE_PRIORITY",
                "         + Integer.toString(NotificationParameters.ERROR)));",
                "@@ -311,6 +287,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   public ArrayList<Properties> getNotifUsages() {",
                "-    ArrayList<Properties> ar = new ArrayList<Properties>();",
                "+    ArrayList<Properties> ar = new ArrayList<>();",
                "     Properties p = new Properties();",
                "     p.setProperty(\"id\", NotificationParameters.USAGE_PRO);",
                "-    p.setProperty(\"name\", m_Multilang.getString(NotificationParameters.USAGE_PRO));",
                "+    p.setProperty(\"name\", multilang.getString(NotificationParameters.USAGE_PRO));",
                "     ar.add(p);",
                "@@ -318,3 +294,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     p.setProperty(\"id\", NotificationParameters.USAGE_PERSO);",
                "-    p.setProperty(\"name\", m_Multilang.getString(NotificationParameters.USAGE_PERSO));",
                "+    p.setProperty(\"name\", multilang.getString(NotificationParameters.USAGE_PERSO));",
                "     ar.add(p);",
                "@@ -322,3 +298,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     p.setProperty(\"id\", NotificationParameters.USAGE_REP);",
                "-    p.setProperty(\"name\", m_Multilang.getString(NotificationParameters.USAGE_REP));",
                "+    p.setProperty(\"name\", multilang.getString(NotificationParameters.USAGE_REP));",
                "     ar.add(p);",
                "@@ -326,3 +302,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     p.setProperty(\"id\", NotificationParameters.USAGE_URGENT);",
                "-    p.setProperty(\"name\", m_Multilang.getString(NotificationParameters.USAGE_URGENT));",
                "+    p.setProperty(\"name\", multilang.getString(NotificationParameters.USAGE_URGENT));",
                "     ar.add(p);",
                "@@ -335,7 +311,7 @@ public class DefaultNotificationManager extends AbstractNotification",
                "    * @return an ArrayList of properties containing \"id\" and \"name\" keys",
                "-   * @throws NotificationManagerException",
                "+   * @throws NotificationException",
                "    */",
                "   @Override",
                "-  public ArrayList<Properties> getNotifChannels() throws NotificationManagerException {",
                "-    ArrayList<Properties> ar = new ArrayList<Properties>();",
                "+  public ArrayList<Properties> getNotifChannels() throws NotificationException {",
                "+    ArrayList<Properties> ar = new ArrayList<>();",
                "@@ -350,4 +326,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "           p.setProperty(\"id\", String.valueOf(row.getId()));",
                "-          p.setProperty(\"name\", m_Multilang.getString(\"channelType\"",
                "-              + String.valueOf(row.getId())));",
                "+          p.setProperty(\"name\", multilang.getString(\"channelType\" + row.getId()));",
                "           ar.add(p);",
                "@@ -356,5 +331,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.getNotifChannels()\", SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_GET_NOTIF_CHANNELS\", e);",
                "+      throw new NotificationException(\"Cannot get the notification channels\", e);",
                "     }",
                "@@ -367,8 +340,7 @@ public class DefaultNotificationManager extends AbstractNotification",
                "    * @return an ArrayList of properties containing \"name\", \"type\", \"usage\" and \"address\" keys",
                "-   * @throws NotificationManagerException",
                "+   * @throws NotificationException",
                "    */",
                "   @Override",
                "-  public ArrayList<Properties> getNotifPreferences(int aUserId)",
                "-      throws NotificationManagerException {",
                "-    ArrayList<Properties> ar = new ArrayList<Properties>();",
                "+  public ArrayList<Properties> getNotifPreferences(int aUserId) throws NotificationException {",
                "+    ArrayList<Properties> ar = new ArrayList<>();",
                "@@ -383,7 +355,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.getNotifPreferences()\",",
                "-          SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_GET_NOTIF_PREFS\", \"UserId=\"",
                "-              + Integer.toString(aUserId), e);",
                "+      throw new NotificationException(",
                "+          \"Cannot get the notification preferences of the user \" + aUserId, e);",
                "     }",
                "@@ -392,11 +361,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * Method declaration",
                "-   * @param aUserId",
                "-   * @return",
                "-   * @throws NotificationManagerException",
                "-   */",
                "   @Override",
                "-  public Properties getNotifPreference(int aPrefId, int aUserId)",
                "-      throws NotificationManagerException {",
                "+  public Properties getNotifPreference(int aPrefId, int aUserId) throws NotificationException {",
                "@@ -409,5 +371,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(\"NotificationManager.getNotifPreference()\",",
                "-          SilverpeasException.ERROR, \"notificationManager.EX_CANT_GET_NOTIF_PREF\", \"UserId=\"",
                "-              + aUserId + \",prefID=\" + aPrefId, e);",
                "+      throw new NotificationException(",
                "+          \"Cannot get the notification preference \" + aPrefId + OF_THE_USER + aUserId, e);",
                "     }",
                "@@ -415,11 +376,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * Method declaration",
                "-   * @param aNotificationAddressId",
                "-   * @param aUserId",
                "-   * @throws NotificationManagerException",
                "-   */",
                "   @Override",
                "   public void setDefaultAddress(int aNotificationAddressId, int aUserId)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "@@ -441,6 +396,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.setDefaultAddress()\", SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_SET_DEFAULT_ADDRESS\", \"UserId=\" + aUserId + \",NotifAddId=\"",
                "-              + aNotificationAddressId, e);",
                "+      throw new NotificationException(",
                "+          \"Cannot set the default address \" + aNotificationAddressId + FOR_THE_USER + aUserId, e);",
                "     }",
                "@@ -449,4 +402,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   @Override",
                "-  public void addAddress(int aNotificationAddressId, int aUserId)",
                "-      throws NotificationManagerException {",
                "+  public void addAddress(int aNotificationAddressId, int aUserId) throws NotificationException {",
                "     try {",
                "@@ -457,7 +409,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.setDefaultAddress()\", SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_SET_DEFAULT_ADDRESS\", \"UserId=\"",
                "-              + Integer.toString(aUserId) + \",NotifAddId=\"",
                "-              + Integer.toString(aNotificationAddressId), e);",
                "+      throw new NotificationException(",
                "+          \"Cannot set the address \" + aNotificationAddressId + FOR_THE_USER + aUserId, e);",
                "     }",
                "@@ -465,12 +414,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * Method declaration",
                "-   * @param aUserId",
                "-   * @param aInstanceId",
                "-   * @param aMessageType",
                "-   * @param aDestinationId",
                "-   * @throws NotificationManagerException",
                "-   */",
                "   @Override",
                "-  public void savePreferences(int aUserId, int aInstanceId, int aMessageType, int aDestinationId) throws NotificationManagerException {",
                "+  public void savePreferences(int aUserId, int aInstanceId, int aMessageType, int aDestinationId)",
                "+      throws NotificationException {",
                "@@ -506,8 +448,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.savePreferences()\", SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_SET_NOTIF_PREF\", \"UserId=\"",
                "-              + Integer.toString(aUserId) + \",NotifAddId=\"",
                "-              + Integer.toString(aDestinationId) + \",CompInstId=\"",
                "-              + Integer.toString(aInstanceId), e);",
                "+      throw new NotificationException(",
                "+          \"Cannot save the notification preferences of the user \" + aUserId +",
                "+              \" for the component instance \" + aInstanceId, e);",
                "     }",
                "@@ -515,16 +454,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * Method declaration",
                "-   * @param aNotificationAddressId",
                "-   * @param aUserId",
                "-   * @param aNotifName",
                "-   * @param aChannelId",
                "-   * @param aAddress",
                "-   * @param aUsage",
                "-   * @throws NotificationManagerException",
                "-   */",
                "-  @Override",
                "   public void saveNotifAddress(int aNotificationAddressId, int aUserId, String aNotifName,",
                "-      int aChannelId, String aAddress, String aUsage)",
                "-      throws NotificationManagerException {",
                "+      int aChannelId, String aAddress, String aUsage) throws NotificationException {",
                "@@ -541,8 +468,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.saveNotifAddress()\", SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_SET_NOTIF_ADDRESS\", \"UserId=\"",
                "-              + Integer.toString(aUserId) + \",NotifAddId=\"",
                "-              + Integer.toString(aNotificationAddressId) + \",Name=\"",
                "-              + aNotifName, e);",
                "+      throw new NotificationException(",
                "+          \"Cannot save the address \" + aNotificationAddressId + FOR_THE_USER + aUserId +",
                "+              \" with as name \" + aNotifName + \" and for the channel \" + aChannelId, e);",
                "     }",
                "@@ -550,10 +474,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * Method declaration",
                "-   * @param aPreferenceId",
                "-   * @throws NotificationManagerException",
                "-   */",
                "   @Override",
                "-  public void deletePreference(int aPreferenceId)",
                "-      throws NotificationManagerException {",
                "+  public void deletePreference(int aPreferenceId) throws NotificationException {",
                "@@ -563,6 +481,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.deletePreference()\", SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_DEL_NOTIF_PREF\", \"prefID=\"",
                "-              + Integer.toString(aPreferenceId), e);",
                "+      throw new NotificationException(\"Cannot delete the notification preference \" + aPreferenceId,",
                "+          e);",
                "     }",
                "@@ -570,10 +486,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * Method declaration",
                "-   * @param aNotificationAddressId",
                "-   * @throws NotificationManagerException",
                "-   */",
                "   @Override",
                "-  public void deleteNotifAddress(int aNotificationAddressId)",
                "-      throws NotificationManagerException {",
                "+  public void deleteNotifAddress(int aNotificationAddressId) throws NotificationException {",
                "@@ -585,5 +495,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(\"NotificationManager.deleteNotifAddress()\",",
                "-          SilverpeasException.ERROR, \"notificationManager.EX_CANT_DEL_NOTIF_ADDRESS\", \"notifID=\"",
                "-              + aNotificationAddressId, e);",
                "+      throw new NotificationException(",
                "+          \"Cannot delete the notification address \" + aNotificationAddressId, e);",
                "     }",
                "@@ -591,10 +500,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * Method declaration",
                "-   * @param userId",
                "-   * @throws NotificationManagerException",
                "-   */",
                "   @Override",
                "-  public void deleteAllAddress(int userId)",
                "-      throws NotificationManagerException {",
                "+  public void deleteAllAddress(int userId) throws NotificationException {",
                "@@ -604,7 +507,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.deleteAllAddress()\",",
                "-          SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_DEL_NOTIF_ADDRESS\", \"userId=\"",
                "-              + Integer.toString(userId), e);",
                "+      throw new NotificationException(",
                "+          \"Cannot delete all the notification addresses of the user \" + userId, e);",
                "     }",
                "@@ -618,3 +518,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   public void testNotifAddress(int aNotificationAddressId, int aUserId)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "     NotificationData nd;",
                "@@ -624,4 +524,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       params.iMediaType = aNotificationAddressId;",
                "-      params.sTitle = m_Multilang.getString(\"testMsgTitle\");",
                "-      params.sMessage = m_Multilang.getString(\"testMsgBody\");",
                "+      params.sTitle = multilang.getString(\"testMsgTitle\");",
                "+      params.sMessage = multilang.getString(\"testMsgBody\");",
                "       params.iFromUserId = aUserId;",
                "@@ -631,14 +531,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-    } catch (SQLException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.testNotifAddress()\", SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_CREATE_TEST_NOTIFICATION\", \"UserId=\"",
                "-              + Integer.toString(aUserId) + \",NotifAddId=\"",
                "-              + Integer.toString(aNotificationAddressId), e);",
                "-    } catch (NotificationServerException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.testNotifAddress()\", SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_SEND_TEST_NOTIFICATION\", \"UserId=\"",
                "-              + Integer.toString(aUserId) + \",NotifAddId=\"",
                "-              + Integer.toString(aNotificationAddressId), e);",
                "+    } catch (SQLException | NotificationServerException e) {",
                "+      throw new NotificationException(",
                "+          \"Cannot test the notification address \" + aNotificationAddressId + OF_THE_USER + aUserId,",
                "+          e);",
                "     }",
                "@@ -646,11 +538,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * Method declaration",
                "-   * @param params Notification parameters",
                "-   * @param userIds an array of user identifiers",
                "-   * @throws NotificationManagerException",
                "-   */",
                "   @Override",
                "   public void notifyUsers(NotificationParameters params, String[] userIds)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "     // First Tests if the user is a guest",
                "@@ -658,6 +544,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     if (UserAccessLevel.GUEST.equals(getUserAccessLevel(params.iFromUserId))) {",
                "-      params.sMessage = m_Multilang.getString(\"guestNotAllowedBody1\") + \"<br>\"",
                "-          + params.sTitle + \"<br><br>\"",
                "-          + m_Multilang.getString(\"guestNotAllowedBody2\");",
                "-      params.sTitle = m_Multilang.getString(\"guestNotAllowedTitle\");",
                "+      params.sMessage =",
                "+          multilang.getString(\"guestNotAllowedBody1\") + \"<br>\" + params.sTitle + HTML_BREAK_LINES +",
                "+              multilang.getString(\"guestNotAllowedBody2\");",
                "+      params.sTitle = multilang.getString(\"guestNotAllowedTitle\");",
                "       params.iMessagePriority = NotificationParameters.NORMAL;",
                "@@ -673,6 +559,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } else if (params.sTitle.length() >= NotificationParameters.MAX_SIZE_TITLE) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.notifyUsers()\", SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_TITLE_TOO_LONG\", \"Max=\"",
                "-              + Integer.toString(NotificationParameters.MAX_SIZE_TITLE));",
                "+      throw new NotificationException(\"The title is too long. It exceeds the threshold \" +",
                "+          NotificationParameters.MAX_SIZE_TITLE);",
                "     }",
                "@@ -685,24 +569,20 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       for (String userId : userIds) {",
                "-        try {",
                "-          for (final DelayedNotificationData dnd : createAllDelayedNotificationData(params,",
                "-              userId)) {",
                "-            DelayedNotificationDelegate.executeNewNotification(dnd);",
                "-          }",
                "-        } catch (NotificationServerException e) {",
                "-          throw new NotificationManagerException(",
                "-              \"NotificationManager.notifyUsers()\", SilverpeasException.ERROR,",
                "-              \"notificationManager.EX_CANT_SEND_USER_NOTIFICATION\", \"UserId=\"",
                "-                  + userId, e);",
                "-        } catch (Exception ex) {",
                "-          SilverTrace.warn(\"notificationManager\",",
                "-              \"NotificationManager.notifyUsers()\",",
                "-              \"notificationManager.EX_CANT_SEND_USER_NOTIFICATION\", \"UserId=\"",
                "-                  + userId, ex);",
                "-        }",
                "+        doNewDelayedNotifications(params, userId);",
                "       }",
                "-    } catch (UtilException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.notifyUsers()\", SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_CREATE_USER_NOTIFICATION\", \"NoUserId\", e);",
                "+    } catch (Exception e) {",
                "+      throw new NotificationException(e);",
                "+    }",
                "+  }",
                "+",
                "+  private void doNewDelayedNotifications(final NotificationParameters params, final String userId)",
                "+      throws NotificationException {",
                "+    try {",
                "+      for (final DelayedNotificationData dnd : createAllDelayedNotificationData(params, userId)) {",
                "+        DelayedNotificationDelegate.executeNewNotification(dnd);",
                "+      }",
                "+    } catch (NotificationServerException e) {",
                "+      throw new NotificationException(e);",
                "+    } catch (Exception ex) {",
                "+      SilverLogger.getLogger(this).error(ex);",
                "     }",
                "@@ -712,4 +592,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "   public void notifyExternals(NotificationParameters params,",
                "-      Collection<ExternalRecipient> externals)",
                "-      throws NotificationManagerException {",
                "+      Collection<ExternalRecipient> externals) throws NotificationException {",
                "     // Force media type for external users",
                "@@ -721,6 +600,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } else if (params.sTitle.length() >= NotificationParameters.MAX_SIZE_TITLE) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.notifyUsers()\", SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_TITLE_TOO_LONG\", \"Max=\"",
                "-              + Integer.toString(NotificationParameters.MAX_SIZE_TITLE));",
                "+      throw new NotificationException(\"The title is too long. It exceeds the threshold \" +",
                "+          NotificationParameters.MAX_SIZE_TITLE);",
                "     }",
                "@@ -735,5 +612,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (SQLException | NotificationServerException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"NotificationManager.notifyExternals()\", SilverpeasException.ERROR,",
                "-          \"notificationManager.EX_CANT_CREATE_USER_NOTIFICATION\", \"Invalid\", e);",
                "+      throw new NotificationException(e);",
                "     }",
                "@@ -746,10 +621,9 @@ public class DefaultNotificationManager extends AbstractNotification",
                "    * returned container.",
                "-   * @throws NotificationManagerException",
                "+   * @throws NotificationException",
                "    */",
                "   @Override",
                "-  public Collection<UserRecipient> getUsersFromGroup(String groupId) throws",
                "-      NotificationManagerException {",
                "+  public Collection<UserRecipient> getUsersFromGroup(String groupId) throws NotificationException {",
                "     try {",
                "       UserDetail[] users = AdministrationServiceProvider.getAdminService().getAllUsersOfGroup(groupId);",
                "-      List<UserRecipient> recipients = new ArrayList<UserRecipient>(users.length);",
                "+      List<UserRecipient> recipients = new ArrayList<>(users.length);",
                "       for (UserDetail user : users) {",
                "@@ -761,5 +635,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (AdminException e) {",
                "-      throw new NotificationManagerException(\"NotificationManager.getUsersFromGroup()\",",
                "-          SilverpeasException.ERROR, \"notificationManager.EX_CANT_GET_USERS_OF_GROUP\",",
                "-          \"groupId=\" + groupId, e);",
                "+      throw new NotificationException(e);",
                "     }",
                "@@ -767,10 +639,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * Method declaration",
                "-   * @param compInst",
                "-   * @return",
                "-   * @throws NotificationManagerException",
                "-   */",
                "   @Override",
                "-  public String getComponentFullName(String compInst) throws NotificationManagerException {",
                "+  public String getComponentFullName(String compInst) throws NotificationException {",
                "     return getComponentFullName(compInst, \" - \", false);",
                "@@ -778,13 +644,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  /**",
                "-   * Method declaration",
                "-   * @param compInst",
                "-   * @param separator",
                "-   * @param isPathToComponent",
                "-   * @return",
                "-   * @throws NotificationManagerException",
                "-   */",
                "   @Override",
                "   public String getComponentFullName(String compInst, String separator, boolean isPathToComponent)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "     try {",
                "@@ -808,5 +666,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     } catch (AdminException e) {",
                "-      throw new NotificationManagerException(\"NotificationManager.getComponentFullName()\",",
                "-          SilverpeasException.ERROR, \"notificationManager.EX_CANT_GET_COMPONENT_FULL_NAME\",",
                "-          \"CompInstId\" + compInst, e);",
                "+      throw new NotificationException(e);",
                "     }",
                "@@ -814,3 +670,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  protected String getUserEmail(int userId) {",
                "+  private String getUserEmail(int userId) {",
                "     String valret = \"\";",
                "@@ -822,4 +678,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       } catch (AdminException e) {",
                "-        SilverTrace.warn(\"notificationManager\", \"NotificationManager.getUserEmail()\",",
                "-            \"notificationManager.EX_CANT_GET_USER_EMAIL\", \"UserId=\" + userId, e);",
                "+        SilverLogger.getLogger(this).warn(e);",
                "       }",
                "@@ -829,3 +684,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  protected UserAccessLevel getUserAccessLevel(int userId) {",
                "+  private UserAccessLevel getUserAccessLevel(int userId) {",
                "     UserAccessLevel valret = UserAccessLevel.UNKNOWN;",
                "@@ -838,4 +693,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       } catch (AdminException e) {",
                "-        SilverTrace.warn(\"notificationManager\", \"NotificationManager.getUserAccessLevel()\",",
                "-            \"notificationManager.EX_CANT_GET_USER_FULL_NAME\", \"UserId=\" + userId, e);",
                "+        SilverLogger.getLogger(this).warn(e);",
                "       }",
                "@@ -845,3 +699,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  protected String getUserFullName(int userId) {",
                "+  private String getUserFullName(int userId) {",
                "     String valret = \"\";",
                "@@ -853,6 +707,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       } catch (AdminException e) {",
                "-        SilverTrace.warn(\"notificationManager\",",
                "-            \"NotificationManager.getUserFullName()\",",
                "-            \"notificationManager.EX_CANT_GET_USER_FULL_NAME\", \"UserId=\"",
                "-                + Integer.toString(userId), e);",
                "+        SilverLogger.getLogger(this).warn(e);",
                "       }",
                "@@ -862,5 +713,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  protected Properties notifPreferencesRowToProperties(int aUserId, NotifPreferenceRow npr,",
                "+  private Properties notifPreferencesRowToProperties(int aUserId, NotifPreferenceRow npr,",
                "       boolean canEdit, boolean canDelete, boolean canTest, boolean isDefault)",
                "-      throws NotificationManagerException, SQLException {",
                "+      throws NotificationException, SQLException {",
                "     Properties p = new Properties();",
                "@@ -880,4 +731,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     p.setProperty(\"priority\",",
                "-        getSureString(m_Multilang.getString(\"messagePriority\" + String.valueOf(npr.",
                "-            getMessageType()))));",
                "+        getSureString(multilang.getString(MESSAGE_PRIORITY + npr.getMessageType())));",
                "@@ -891,3 +741,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  protected Properties notifAddressRowToProperties(NotifAddressRow nar,",
                "+  private Properties notifAddressRowToProperties(NotifAddressRow nar,",
                "       boolean canEdit,",
                "@@ -910,3 +760,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     p.setProperty(\"usageId\", getSureString(nar.getUsage()));",
                "-    p.setProperty(\"usage\", getSureString(m_Multilang.getString(getSureString(nar.getUsage()))));",
                "+    p.setProperty(\"usage\", getSureString(multilang.getString(getSureString(nar.getUsage()))));",
                "     if ((id == NotificationParameters.ADDRESS_BASIC_POPUP)",
                "@@ -925,3 +775,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  protected NotifAddressRow getNotifAddressRow(NotificationParameters params, int aUserId)",
                "+  private NotifAddressRow getNotifAddressRow(NotificationParameters params, int aUserId)",
                "       throws SQLException {",
                "@@ -929,17 +779,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     NotifAddressRow nar;",
                "-    int addressId = params.iMediaType;",
                "-",
                "-    if (addressId == NotificationParameters.ADDRESS_COMPONENT_DEFINED) {",
                "-      // In case of problems, try with the default value",
                "-      addressId = NotificationParameters.ADDRESS_DEFAULT;",
                "-      if (params.iComponentInstance != -1) {",
                "-        NotifPreferenceRow npr;",
                "-",
                "-        npr = schema.notifPreference().getByUserIdAndComponentInstanceIdAndMessageType(aUserId,",
                "-            params.iComponentInstance, params.iMessagePriority);",
                "-        if (npr != null) {",
                "-          addressId = npr.getNotifAddressId();",
                "-        }",
                "-      }",
                "-    }",
                "+    int addressId = getAddressId(params, aUserId);",
                "@@ -958,42 +794,39 @@ public class DefaultNotificationManager extends AbstractNotification",
                "+    nar = getNotifAddressRow(params, aUserId, addressId);",
                "+    return nar;",
                "+  }",
                "+",
                "+  private NotifAddressRow getNotifAddressRow(final NotificationParameters params, final int aUserId,",
                "+      final int addressId) throws SQLException {",
                "+    final NotifAddressRow nar;",
                "     switch (addressId) {",
                "       case NotificationParameters.ADDRESS_BASIC_POPUP:",
                "-        nar =",
                "-            new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_POPUP, aUserId,",
                "-                m_Multilang.getString(\"defaultAddressPOPUP\"), NotifChannel.POPUP.getId(),",
                "-                Integer.toString(aUserId), NotificationParameters.USAGE_PRO,",
                "-                params.iMessagePriority);",
                "+        nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_POPUP, aUserId,",
                "+            multilang.getString(\"defaultAddressPOPUP\"), NotifChannel.POPUP.getId(),",
                "+            Integer.toString(aUserId), NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "         break;",
                "       case NotificationParameters.ADDRESS_BASIC_REMOVE:",
                "-        nar =",
                "-            new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_REMOVE, aUserId,",
                "-                m_Multilang.getString(\"defaultAddressREMOVE\"), NotifChannel.REMOVE.getId(), \"\",",
                "-                NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "+        nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_REMOVE, aUserId,",
                "+            multilang.getString(\"defaultAddressREMOVE\"), NotifChannel.REMOVE.getId(), \"\",",
                "+            NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "         break;",
                "       case NotificationParameters.ADDRESS_BASIC_SILVERMAIL:",
                "-        nar =",
                "-            new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SILVERMAIL, aUserId,",
                "-                m_Multilang.getString(\"defaultAddressSILVERMAIL\"), NotifChannel.SILVERMAIL.getId(),",
                "-                Integer.toString(aUserId), NotificationParameters.USAGE_PRO,",
                "-                params.iMessagePriority);",
                "+        nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SILVERMAIL, aUserId,",
                "+            multilang.getString(\"defaultAddressSILVERMAIL\"), NotifChannel.SILVERMAIL.getId(),",
                "+            Integer.toString(aUserId), NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "         break;",
                "       case NotificationParameters.ADDRESS_BASIC_SMTP_MAIL:",
                "-        nar =",
                "-            new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL, aUserId,",
                "-                m_Multilang.getString(\"defaultAddressSPMAIL\"), NotifChannel.SMTP.getId(),",
                "-                getUserEmail(aUserId), NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "+        nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL, aUserId,",
                "+            multilang.getString(\"defaultAddressSPMAIL\"), NotifChannel.SMTP.getId(),",
                "+            getUserEmail(aUserId), NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "         break;",
                "       case NotificationParameters.ADDRESS_BASIC_SERVER:",
                "-        nar =",
                "-            new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SERVER, aUserId,",
                "-                m_Multilang.getString(\"defaultAddressSERVER\"), NotifChannel.SERVER.getId(),",
                "-                Integer.toString(aUserId), NotificationParameters.USAGE_PRO,",
                "-                params.iMessagePriority);",
                "+        nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SERVER, aUserId,",
                "+            multilang.getString(\"defaultAddressSERVER\"), NotifChannel.SERVER.getId(),",
                "+            Integer.toString(aUserId), NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "         break;",
                "       case NotificationParameters.ADDRESS_BASIC_COMMUNICATION_USER:",
                "-        nar =",
                "-            new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_POPUP, aUserId,",
                "-                m_Multilang.getString(\"defaultAddressPOPUP\"), NotifChannel.POPUP.getId(),",
                "-                Integer.toString(aUserId), NotificationParameters.USAGE_PRO,",
                "-                params.iMessagePriority);",
                "+        nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_POPUP, aUserId,",
                "+            multilang.getString(\"defaultAddressPOPUP\"), NotifChannel.POPUP.getId(),",
                "+            Integer.toString(aUserId), NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "         break;",
                "@@ -1006,19 +839,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  protected List<NotifAddressRow> getAllNotifAddressRow(NotificationParameters params, int aUserId)",
                "+  private List<NotifAddressRow> getAllNotifAddressRow(NotificationParameters params, int aUserId)",
                "       throws SQLException {",
                "     int[] addressIds = new int[1];",
                "-    int addressId = params.iMediaType;",
                "-    if (addressId == NotificationParameters.ADDRESS_COMPONENT_DEFINED) {",
                "-      addressId = NotificationParameters.ADDRESS_DEFAULT;",
                "-      // In case of problems, try with the default value",
                "-      if (params.iComponentInstance != -1) {",
                "-        NotifPreferenceRow npr;",
                "-",
                "-        npr = schema.notifPreference().getByUserIdAndComponentInstanceIdAndMessageType(aUserId,",
                "-            params.iComponentInstance, params.iMessagePriority);",
                "-        if (npr != null) {",
                "-          addressId = npr.getNotifAddressId();",
                "-        }",
                "-      }",
                "-    }",
                "+    int addressId = getAddressId(params, aUserId);",
                "@@ -1048,50 +868,5 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-    List<NotifAddressRow> nars = new ArrayList<NotifAddressRow>(addressIds.length);",
                "-    NotifAddressRow curNar;",
                "+    List<NotifAddressRow> nars = new ArrayList<>(addressIds.length);",
                "     for (int curAddressId : addressIds) {",
                "-      switch (curAddressId) {",
                "-        case NotificationParameters.ADDRESS_BASIC_POPUP:",
                "-          curNar =",
                "-              new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_POPUP, aUserId,",
                "-                  m_Multilang.getString(\"defaultAddressPOPUP\"), NotifChannel.POPUP.getId(),",
                "-                  Integer.toString(aUserId), NotificationParameters.USAGE_PRO,",
                "-                  params.iMessagePriority);",
                "-          break;",
                "-        case NotificationParameters.ADDRESS_BASIC_REMOVE:",
                "-          curNar =",
                "-              new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_REMOVE, aUserId,",
                "-                  m_Multilang.getString(\"defaultAddressREMOVE\"), NotifChannel.REMOVE.getId(), \"\",",
                "-                  NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "-          break;",
                "-        case NotificationParameters.ADDRESS_BASIC_SILVERMAIL:",
                "-          curNar =",
                "-              new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SILVERMAIL, aUserId,",
                "-                  m_Multilang.getString(\"defaultAddressSILVERMAIL\"),",
                "-                  NotifChannel.SILVERMAIL.getId(), Integer.toString(aUserId),",
                "-                  NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "-          break;",
                "-        case NotificationParameters.ADDRESS_BASIC_SMTP_MAIL:",
                "-          curNar =",
                "-              new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL, aUserId,",
                "-                  m_Multilang.getString(\"defaultAddressSPMAIL\"), NotifChannel.SMTP.getId(),",
                "-                  getUserEmail(aUserId), NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "-          break;",
                "-        case NotificationParameters.ADDRESS_BASIC_SERVER:",
                "-          curNar =",
                "-              new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SERVER, aUserId,",
                "-                  m_Multilang.getString(\"defaultAddressSERVER\"), NotifChannel.SERVER.getId(),",
                "-                  Integer.toString(aUserId), NotificationParameters.USAGE_PRO,",
                "-                  params.iMessagePriority);",
                "-          break;",
                "-        case NotificationParameters.ADDRESS_BASIC_COMMUNICATION_USER:",
                "-          curNar =",
                "-              new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_POPUP, aUserId,",
                "-                  m_Multilang.getString(\"defaultAddressPOPUP\"), NotifChannel.POPUP.getId(),",
                "-                  Integer.toString(aUserId), NotificationParameters.USAGE_PRO,",
                "-                  params.iMessagePriority);",
                "-          break;",
                "-        default:",
                "-          curNar = schema.notifAddress().getNotifAddress(curAddressId);",
                "-          break;",
                "-      }",
                "+      NotifAddressRow curNar = getNotifAddressRow(params, aUserId, curAddressId);",
                "       nars.add(curNar);",
                "@@ -1101,11 +876,29 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  protected NotificationData createNotificationData(NotificationParameters params, String aUserId)",
                "+  private int getAddressId(final NotificationParameters params, final int aUserId)",
                "+      throws SQLException {",
                "+    int addressId = params.iMediaType;",
                "+    if (addressId == NotificationParameters.ADDRESS_COMPONENT_DEFINED) {",
                "+      addressId = NotificationParameters.ADDRESS_DEFAULT;",
                "+      // In case of problems, try with the default value",
                "+      if (params.iComponentInstance != -1) {",
                "+        NotifPreferenceRow npr;",
                "+",
                "+        npr = schema.notifPreference()",
                "+            .getByUserIdAndComponentInstanceIdAndMessageType(aUserId, params.iComponentInstance,",
                "+                params.iMessagePriority);",
                "+        if (npr != null) {",
                "+          addressId = npr.getNotifAddressId();",
                "+        }",
                "+      }",
                "+    }",
                "+    return addressId;",
                "+  }",
                "+",
                "+  private NotificationData createNotificationData(NotificationParameters params, String aUserId)",
                "       throws SQLException {",
                "-    NotifAddressRow nar;",
                "-    NotifChannelRow ncr;",
                "     StringBuilder theMessage = new StringBuilder(100);",
                "-    Map<String, Object> theExtraParams = new HashMap<String, Object>();",
                "+    Map<String, Object> theExtraParams = new HashMap<>();",
                "-    nar = getNotifAddressRow(params, Integer.parseInt(aUserId));",
                "-    ncr = schema.notifChannel().getNotifChannel(nar.getNotifChannelId());",
                "+    NotifAddressRow nar = getNotifAddressRow(params, Integer.parseInt(aUserId));",
                "+    NotifChannelRow ncr = schema.notifChannel().getNotifChannel(nar.getNotifChannelId());",
                "@@ -1118,37 +911,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-    if (\"Y\".equalsIgnoreCase(ncr.getSubjectAvailable())) {",
                "-      theExtraParams.put(SUBJECT, params.sTitle);",
                "-    } else if (params.iFromUserId < 0) {",
                "-      theMessage.append(m_Multilang.getString(\"subject\")).append(\" : \").append(params.sTitle)",
                "-          .append(\"<br><br>\");",
                "-    }",
                "-",
                "-    String senderName;",
                "-    if (params.iFromUserId < 0) {",
                "-      senderName = params.senderName;",
                "-    } else {",
                "-      senderName = getUserFullName(params.iFromUserId);",
                "-    }",
                "-",
                "-",
                "+    setSubject(params, theMessage, theExtraParams, ncr);",
                "-    if (FROM_UID.equalsIgnoreCase(ncr.getFromAvailable())) {",
                "-      theExtraParams.put(FROM, Integer.toString(params.iFromUserId));",
                "-      nd.setSenderId(Integer.toString(params.iFromUserId));",
                "-",
                "-    } else if (FROM_EMAIL.equalsIgnoreCase(ncr.getFromAvailable())) {",
                "-      String fromEmail = senderName;",
                "-      if (!StringUtil.isValidEmailAddress(fromEmail) || params.iFromUserId >= 0) {",
                "-        fromEmail = getUserEmail(params.iFromUserId);",
                "-        if (!StringUtil.isDefined(fromEmail)) {",
                "-          fromEmail = AdministrationServiceProvider.getAdminService().getSilverpeasEmail();",
                "-        }",
                "-      }",
                "-      theExtraParams.put(FROM, fromEmail);",
                "-    } else if (FROM_NAME.equalsIgnoreCase(ncr.getFromAvailable())) {",
                "-      theExtraParams.put(FROM, senderName);",
                "-    } else {",
                "-      theMessage.append(m_Multilang.getString(\"from\")).append(\" : \").append(senderName).append(",
                "-          \"<br><br>\");",
                "-    }",
                "+    String senderName = getSenderName(params);",
                "+    setSenderAddress(params, theMessage, theExtraParams, ncr, nd, senderName);",
                "@@ -1156,5 +918,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     if (StringUtil.isDefined(params.sURL)) {",
                "-      theExtraParams.put(URL, (params.sURL.startsWith(\"http\")",
                "-          ? params.sURL : getUserAutoRedirectURL(aUserId,",
                "-              params.sURL)));",
                "+      theExtraParams.put(URL, (params.sURL.startsWith(\"http\") ? params.sURL :",
                "+          getUserAutoRedirectURL(aUserId, params.sURL)));",
                "     }",
                "@@ -1162,18 +923,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     // Set Source parameter",
                "-    if (StringUtil.isDefined(params.sSource)) {",
                "-      theExtraParams.put(SOURCE, params.sSource);",
                "-    } else {",
                "-      if (params.iComponentInstance != -1) {",
                "-        try {",
                "-          // New feature : if source is not set, we display space's name and",
                "-          // component's label",
                "-          theExtraParams.put(SOURCE,",
                "-              getComponentFullName(\"\" + params.iComponentInstance));",
                "-        } catch (Exception e) {",
                "-          SilverTrace.warn(\"notificationManager\", \"NotificationManager.createNotificationData()\",",
                "-              \"notificationManager.EX_CANT_GET_INSTANCE_INFO\", \"instanceId = \"",
                "-                  + params.iComponentInstance, e);",
                "-        }",
                "-      }",
                "-    }",
                "+    setSource(params, theExtraParams);",
                "@@ -1181,4 +927,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     if (StringUtil.isDefined(params.sSessionId)) {",
                "-      theExtraParams.put(SESSIONID,",
                "-          params.sSessionId);",
                "+      theExtraParams.put(SESSIONID, params.sSessionId);",
                "     }",
                "@@ -1216,14 +961,41 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  private NotificationData createExternalNotificationData(NotificationParameters params,",
                "-      String email) throws SQLException {",
                "-    NotifAddressRow nar;",
                "-    NotifChannelRow ncr;",
                "+  private void setSubject(final NotificationParameters params, final StringBuilder theMessage,",
                "+      final Map<String, Object> theExtraParams, final NotifChannelRow ncr) {",
                "+    if (\"Y\".equalsIgnoreCase(ncr.getSubjectAvailable())) {",
                "+      theExtraParams.put(SUBJECT, params.sTitle);",
                "+    } else if (params.iFromUserId < 0) {",
                "+      theMessage.append(multilang.getString(SUBJECT))",
                "+          .append(\" : \")",
                "+          .append(params.sTitle)",
                "+          .append(HTML_BREAK_LINES);",
                "+    }",
                "+  }",
                "+",
                "+  private void setSenderAddress(final NotificationParameters params, final StringBuilder theMessage,",
                "+      final Map<String, Object> theExtraParams, final NotifChannelRow ncr,",
                "+      final NotificationData nd, final String senderName) {",
                "+    if (FROM_UID.equalsIgnoreCase(ncr.getFromAvailable())) {",
                "+      theExtraParams.put(FROM, Integer.toString(params.iFromUserId));",
                "+      nd.setSenderId(Integer.toString(params.iFromUserId));",
                "+",
                "+    } else if (FROM_EMAIL.equalsIgnoreCase(ncr.getFromAvailable())) {",
                "+      setSenderEmail(params, theExtraParams, senderName);",
                "+    } else if (FROM_NAME.equalsIgnoreCase(ncr.getFromAvailable())) {",
                "+      theExtraParams.put(FROM, senderName);",
                "+    } else {",
                "+      theMessage.append(multilang.getString(\"from\"))",
                "+          .append(\" : \")",
                "+          .append(senderName)",
                "+          .append(HTML_BREAK_LINES);",
                "+    }",
                "+  }",
                "+",
                "+  private NotificationData createExternalNotificationData(NotificationParameters params, String email) throws SQLException {",
                "     StringBuilder theMessage = new StringBuilder(100);",
                "-    Map<String, Object> theExtraParams = new HashMap<String, Object>();",
                "+    Map<String, Object> theExtraParams = new HashMap<>();",
                "-    nar =",
                "-        new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL, -1,",
                "-            m_Multilang.getString(\"defaultAddressSPMAIL\"), NotifChannel.SMTP.getId(),",
                "-            email, NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "-    ncr = schema.notifChannel().getNotifChannel(nar.getNotifChannelId());",
                "+    NotifAddressRow nar = new NotifAddressRow(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL, -1,",
                "+        multilang.getString(\"defaultAddressSPMAIL\"), NotifChannel.SMTP.getId(), email,",
                "+        NotificationParameters.USAGE_PRO, params.iMessagePriority);",
                "+    NotifChannelRow ncr = schema.notifChannel().getNotifChannel(nar.getNotifChannelId());",
                "@@ -1236,26 +1008,6 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-    if (\"Y\".equalsIgnoreCase(ncr.getSubjectAvailable())) {",
                "-      theExtraParams.put(SUBJECT, params.sTitle);",
                "-    } else if (params.iFromUserId < 0) {",
                "-      theMessage.append(m_Multilang.getString(\"subject\")).append(\" : \").append(params.sTitle)",
                "-          .append(\"<br><br>\");",
                "-    }",
                "-",
                "-    String senderName;",
                "-    if (params.iFromUserId < 0) {",
                "-      senderName = params.senderName;",
                "-    } else {",
                "-      senderName = getUserFullName(params.iFromUserId);",
                "-    }",
                "-",
                "+    setSubject(params, theMessage, theExtraParams, ncr);",
                "-",
                "-    String fromEmail = senderName;",
                "-    if (!StringUtil.isValidEmailAddress(fromEmail) || params.iFromUserId >= 0) {",
                "-      fromEmail = getUserEmail(params.iFromUserId);",
                "-      if (!StringUtil.isDefined(fromEmail)) {",
                "-        fromEmail = AdministrationServiceProvider.getAdminService().getSilverpeasEmail();",
                "-      }",
                "-    }",
                "-    theExtraParams.put(FROM, fromEmail);",
                "+    String senderName = getSenderName(params);",
                "+    setSenderEmail(params, theExtraParams, senderName);",
                "     if (StringUtil.isDefined(params.sURL)) {",
                "@@ -1266,18 +1018,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     // Set Source parameter",
                "-    if (params.sSource != null && params.sSource.length() > 0) {",
                "-      theExtraParams.put(SOURCE, params.sSource);",
                "-    } else {",
                "-      if (params.iComponentInstance != -1) {",
                "-        try {",
                "-          // New feature : if source is not set, we display space's name and",
                "-          // component's label",
                "-          theExtraParams.put(SOURCE,",
                "-              getComponentFullName(\"\" + params.iComponentInstance));",
                "-        } catch (Exception e) {",
                "-          SilverTrace.warn(\"notificationManager\", \"NotificationManager.createNotificationData()\",",
                "-              \"notificationManager.EX_CANT_GET_INSTANCE_INFO\", \"instanceId = \"",
                "-                  + params.iComponentInstance, e);",
                "-        }",
                "-      }",
                "-    }",
                "+    setSource(params, theExtraParams);",
                "@@ -1312,6 +1049,35 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  protected List<DelayedNotificationData> createAllDelayedNotificationData(",
                "+  private void setSource(final NotificationParameters params,",
                "+      final Map<String, Object> theExtraParams) {",
                "+    if (StringUtil.isDefined(params.sSource)) {",
                "+      theExtraParams.put(SOURCE, params.sSource);",
                "+    } else {",
                "+      if (params.iComponentInstance != -1) {",
                "+        try {",
                "+          // New feature : if source is not set, we display space's name and",
                "+          // component's label",
                "+          theExtraParams.put(SOURCE, getComponentFullName(\"\" + params.iComponentInstance));",
                "+        } catch (Exception e) {",
                "+          SilverLogger.getLogger(this).warn(e);",
                "+        }",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  private void setSenderEmail(final NotificationParameters params,",
                "+      final Map<String, Object> theExtraParams, final String senderName) {",
                "+    String fromEmail = senderName;",
                "+    if (!StringUtil.isValidEmailAddress(fromEmail) || params.iFromUserId >= 0) {",
                "+      fromEmail = getUserEmail(params.iFromUserId);",
                "+      if (!StringUtil.isDefined(fromEmail)) {",
                "+        fromEmail = AdministrationServiceProvider.getAdminService().getSilverpeasEmail();",
                "+      }",
                "+    }",
                "+    theExtraParams.put(FROM, fromEmail);",
                "+  }",
                "+",
                "+  private List<DelayedNotificationData> createAllDelayedNotificationData(",
                "       NotificationParameters params, String aUserId) throws SQLException {",
                "     final List<NotifAddressRow> nars = getAllNotifAddressRow(params, Integer.parseInt(aUserId));",
                "-    final List<DelayedNotificationData> dnds = new ArrayList<DelayedNotificationData>(nars.size());",
                "+    final List<DelayedNotificationData> dnds = new ArrayList<>(nars.size());",
                "@@ -1329,14 +1095,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-      delayedNotificationData = new DelayedNotificationData();",
                "-      delayedNotificationData.setUserId(aUserId);",
                "-      delayedNotificationData.setAction(params.eAction);",
                "-      delayedNotificationData.setChannel(NotifChannel.decode(curAddresseRow.getNotifChannelId()));",
                "-      delayedNotificationData.setCreationDate(params.dDate);",
                "-      delayedNotificationData.setFromUserId(params.iFromUserId);",
                "-      delayedNotificationData.setLanguage(params.sLanguage);",
                "-      delayedNotificationData.setMessage(params.sOriginalExtraMessage);",
                "-      delayedNotificationData.setResource(params.nNotificationResourceData);",
                "-      delayedNotificationData.setSendImmediately(params.bSendImmediately);",
                "-      delayedNotificationData.setNotificationData(notificationData);",
                "-      delayedNotificationData.setNotificationParameters(params);",
                "+      delayedNotificationData =",
                "+          initDelayedNotificationData(aUserId, params, notificationData, curAddresseRow);",
                "       dnds.add(delayedNotificationData);",
                "@@ -1344,40 +1100,10 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       StringBuilder theMessage = new StringBuilder(100);",
                "-      Map<String, Object> theExtraParams = new HashMap<String, Object>();",
                "+      Map<String, Object> theExtraParams = new HashMap<>();",
                "       // Set subject parameter",
                "-      if (\"Y\".equalsIgnoreCase(notifChannelRow.getSubjectAvailable())) {",
                "-        theExtraParams.put(SUBJECT, params.sTitle);",
                "-      } else if (params.iFromUserId < 0) {",
                "-        theMessage.append(m_Multilang.getString(\"subject\")).append(\" : \").append(params.sTitle).",
                "-            append(\"<br><br>\");",
                "-      }",
                "-",
                "-      String senderName;",
                "-      if (params.iFromUserId < 0) {",
                "-        senderName = params.senderName;",
                "-      } else {",
                "-        senderName = getUserFullName(params.iFromUserId);",
                "-      }",
                "-",
                "+      setSubject(params, theMessage, theExtraParams, notifChannelRow);",
                "-",
                "-      if (FROM_UID.equalsIgnoreCase(notifChannelRow.getFromAvailable())) {",
                "-        theExtraParams.put(FROM, Integer.toString(params.iFromUserId));",
                "-        notificationData.setSenderId(Integer.toString(params.iFromUserId));",
                "-",
                "-      } else if (FROM_EMAIL.equalsIgnoreCase(notifChannelRow.getFromAvailable())) {",
                "-        String fromEmail = senderName;",
                "-        if (!StringUtil.isValidEmailAddress(fromEmail) || params.iFromUserId >= 0) {",
                "-          fromEmail = getUserEmail(params.iFromUserId);",
                "-          if (!StringUtil.isDefined(fromEmail)) {",
                "-            fromEmail = AdministrationServiceProvider.getAdminService().getSilverpeasEmail();",
                "-          }",
                "-        }",
                "-        theExtraParams.put(FROM, fromEmail);",
                "-      } else if (FROM_NAME.equalsIgnoreCase(notifChannelRow.getFromAvailable())) {",
                "-        theExtraParams.put(FROM, senderName);",
                "-      } else {",
                "-        theMessage.append(m_Multilang.getString(\"from\")).append(\" : \").append(senderName).append(",
                "-            \"<br><br>\");",
                "-      }",
                "+      String senderName = getSenderName(params);",
                "+      setSenderAddress(params, theMessage, theExtraParams, notifChannelRow, notificationData,",
                "+          senderName);",
                "@@ -1391,24 +1117,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       // Set Source parameter",
                "-      if (StringUtil.isDefined(params.sSource)) {",
                "-        theExtraParams.put(SOURCE, params.sSource);",
                "-      } else {",
                "-        if (params.iComponentInstance != -1) {",
                "-          try {",
                "-            // New feature : if source is not set, we display space's name and component's label",
                "-            final String componentFullName =",
                "-                getComponentFullName(String.valueOf(params.iComponentInstance));",
                "-            theExtraParams.put(SOURCE, componentFullName);",
                "-            if (delayedNotificationData.getResource() != null && StringUtils.isBlank(",
                "-                delayedNotificationData.getResource().getResourceLocation())) {",
                "-              delayedNotificationData.getResource().setResourceLocation(",
                "-                  getComponentFullName(String.valueOf(params.iComponentInstance),",
                "-                      NotificationResourceData.LOCATION_SEPARATOR, true));",
                "-            }",
                "-          } catch (Exception e) {",
                "-            SilverTrace.warn(\"notificationManager\", \"NotificationManager.createNotificationData()\",",
                "-                \"notificationManager.EX_CANT_GET_INSTANCE_INFO\", \"instanceId = \"",
                "-                    + params.iComponentInstance, e);",
                "-          }",
                "-        }",
                "-      }",
                "+      setSource(params, delayedNotificationData, theExtraParams);",
                "@@ -1416,4 +1121,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "       if (StringUtil.isDefined(params.sSessionId)) {",
                "-        theExtraParams.put(SESSIONID,",
                "-            params.sSessionId);",
                "+        theExtraParams.put(SESSIONID, params.sSessionId);",
                "       }",
                "@@ -1450,3 +1154,58 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-  protected boolean isDefaultAddress(int aDefaultAddressId, int aUserId,",
                "+  private void setSource(final NotificationParameters params,",
                "+      final DelayedNotificationData delayedNotificationData,",
                "+      final Map<String, Object> theExtraParams) {",
                "+    if (StringUtil.isDefined(params.sSource)) {",
                "+      theExtraParams.put(SOURCE, params.sSource);",
                "+    } else {",
                "+      if (params.iComponentInstance != -1) {",
                "+        try {",
                "+          // New feature : if source is not set, we display space's name and component's label",
                "+          final String componentFullName =",
                "+              getComponentFullName(String.valueOf(params.iComponentInstance));",
                "+          theExtraParams.put(SOURCE, componentFullName);",
                "+          if (delayedNotificationData.getResource() != null &&",
                "+              StringUtils.isBlank(delayedNotificationData.getResource().getResourceLocation())) {",
                "+            delayedNotificationData.getResource()",
                "+                .setResourceLocation(getComponentFullName(String.valueOf(params.iComponentInstance),",
                "+                    NotificationResourceData.LOCATION_SEPARATOR, true));",
                "+          }",
                "+        } catch (Exception e) {",
                "+          SilverLogger.getLogger(this).warn(e);",
                "+        }",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  @NotNull",
                "+  private DelayedNotificationData initDelayedNotificationData(final String aUserId,",
                "+      final NotificationParameters params, final NotificationData notificationData,",
                "+      final NotifAddressRow curAddresseRow) {",
                "+    final DelayedNotificationData delayedNotificationData;",
                "+    delayedNotificationData = new DelayedNotificationData();",
                "+    delayedNotificationData.setUserId(aUserId);",
                "+    delayedNotificationData.setAction(params.eAction);",
                "+    delayedNotificationData.setChannel(NotifChannel.decode(curAddresseRow.getNotifChannelId()));",
                "+    delayedNotificationData.setCreationDate(params.dDate);",
                "+    delayedNotificationData.setFromUserId(params.iFromUserId);",
                "+    delayedNotificationData.setLanguage(params.sLanguage);",
                "+    delayedNotificationData.setMessage(params.sOriginalExtraMessage);",
                "+    delayedNotificationData.setResource(params.nNotificationResourceData);",
                "+    delayedNotificationData.setSendImmediately(params.bSendImmediately);",
                "+    delayedNotificationData.setNotificationData(notificationData);",
                "+    delayedNotificationData.setNotificationParameters(params);",
                "+    return delayedNotificationData;",
                "+  }",
                "+",
                "+  private String getSenderName(final NotificationParameters params) {",
                "+    String senderName;",
                "+    if (params.iFromUserId < 0) {",
                "+      senderName = params.senderName;",
                "+    } else {",
                "+      senderName = getUserFullName(params.iFromUserId);",
                "+    }",
                "+    return senderName;",
                "+  }",
                "+",
                "+  private boolean isDefaultAddress(int aDefaultAddressId, int aUserId,",
                "       boolean isMultiChannelNotification) throws SQLException {",
                "@@ -1457,13 +1216,3 @@ public class DefaultNotificationManager extends AbstractNotification",
                "     if (ndars.length > 0) {",
                "-      if (!isMultiChannelNotification) {",
                "-        if (aDefaultAddressId == ndars[0].getNotifAddressId()) {",
                "-          valret = true;",
                "-        }",
                "-      } else {",
                "-        for (NotifDefaultAddressRow ndar : ndars) {",
                "-          if (aDefaultAddressId == ndar.getNotifAddressId()) {",
                "-            valret = true;",
                "-          }",
                "-        }",
                "-      }",
                "+      valret = checkDefaultAddress(aDefaultAddressId, isMultiChannelNotification, ndars, valret);",
                "     } else {",
                "@@ -1478,2 +1227,19 @@ public class DefaultNotificationManager extends AbstractNotification",
                "+  private boolean checkDefaultAddress(final int aDefaultAddressId,",
                "+      final boolean isMultiChannelNotification, final NotifDefaultAddressRow[] ndars,",
                "+      boolean valret) {",
                "+    if (!isMultiChannelNotification) {",
                "+      if (aDefaultAddressId == ndars[0].getNotifAddressId()) {",
                "+        valret = true;",
                "+      }",
                "+    } else {",
                "+      for (NotifDefaultAddressRow ndar : ndars) {",
                "+        if (aDefaultAddressId == ndar.getNotifAddressId()) {",
                "+          valret = true;",
                "+        }",
                "+      }",
                "+    }",
                "+    return valret;",
                "+  }",
                "+",
                "   protected String getSureString(String s) {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "index 10dc39d5db..acf59b969c 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "@@ -25,8 +25,8 @@ package org.silverpeas.core.notification.user.client;",
                "-import org.silverpeas.core.admin.user.model.Group;",
                "-import org.silverpeas.core.admin.user.model.UserDetail;",
                "+import org.silverpeas.core.admin.component.model.ComponentInst;",
                "+import org.silverpeas.core.admin.user.model.User;",
                " import org.silverpeas.core.i18n.I18NHelper;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.constant.NotifMediaType;",
                " import org.silverpeas.core.notification.user.client.model.SentNotificationInterface;",
                "-import org.silverpeas.core.personalization.service.PersonalizationServiceProvider;",
                " import org.silverpeas.core.util.CollectionUtil;",
                "@@ -34,14 +34,14 @@ import org.silverpeas.core.util.StringUtil;",
                "-import java.util.ArrayList;",
                "+import java.util.Collection;",
                "+import java.util.Collections;",
                " import java.util.HashMap;",
                "-import java.util.Iterator;",
                "-import java.util.List;",
                "+import java.util.HashSet;",
                " import java.util.Map;",
                " import java.util.Set;",
                "-import java.util.StringTokenizer;",
                "+import java.util.stream.Collectors;",
                " /**",
                "- * Cette classe est utilisee par les composants pour envoyer une notification a un (ou des)",
                "- * utilisateur(s) (ou groupes) Elle package les appels et appelle la fonction du NotificationManager",
                "- * pour reellement envoyer les notifications",
                "+ * Sender of a notification to both the users in Silverpeas and to external users. The notification",
                "+ * is defined by a {@link NotificationMetaData} instance. It uses the service of a",
                "+ * {@link NotificationManager} object for doing its job.",
                "  */",
                "@@ -51,4 +51,4 @@ public class NotificationSender implements java.io.Serializable {",
                "-  protected NotificationManager notificationManager = null;",
                "-  protected int instanceId = -1;",
                "+  private NotificationManager notificationManager;",
                "+  private int instanceId;",
                "@@ -66,3 +66,3 @@ public class NotificationSender implements java.io.Serializable {",
                "   public NotificationSender(String instanceId) {",
                "-    this.instanceId = extractLastNumber(instanceId);",
                "+    this.instanceId = ComponentInst.getComponentLocalId(instanceId);",
                "     notificationManager = NotificationManager.get();",
                "@@ -71,5 +71,6 @@ public class NotificationSender implements java.io.Serializable {",
                "   /**",
                "-   * Method declaration",
                "-   * @param metaData",
                "-   * @throws NotificationManagerException",
                "+   * Sends the notification as defined by the specified {@link NotificationMetaData} instance.",
                "+   * @param metaData the meta data of the notification. It defines the content of the notification",
                "+   * as well as the recipients.",
                "+   * @throws NotificationException if an error occurs while sending the notification.",
                "    *",
                "@@ -77,3 +78,3 @@ public class NotificationSender implements java.io.Serializable {",
                "   public void notifyUser(NotificationMetaData metaData)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "     notifyUser(NotifMediaType.COMPONENT_DEFINED.getId(), metaData);",
                "@@ -82,6 +83,8 @@ public class NotificationSender implements java.io.Serializable {",
                "   /**",
                "-   * Method declaration",
                "-   * @param aMediaType",
                "-   * @param metaData",
                "-   * @throws NotificationManagerException",
                "+   * Sends in the given media type the notification as defined by the specified {@link NotificationMetaData}",
                "+   * instance.",
                "+   * @param aMediaType the media type in which the notification content has to be encoded.",
                "+   * @param metaData the meta data of the notification. It defines the content of the notification",
                "+   * as well as the recipients.",
                "+   * @throws NotificationException if an error occurs while sending the notification.",
                "    *",
                "@@ -89,54 +92,92 @@ public class NotificationSender implements java.io.Serializable {",
                "   public void notifyUser(int aMediaType, NotificationMetaData metaData)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "     CurrentUserNotificationContext.getCurrentUserNotificationContext().checkManualUserNotification(metaData);",
                "-    // Getting all the user recipients that represents the user and group recipients",
                "-    Set<UserRecipient> usersSet = metaData.getAllUserRecipients(true);",
                "+    // Getting all the users from the recipients declared in metaData (comes from users and groups)",
                "+    final Set<UserRecipient> recipients = metaData.getAllUserRecipients(true);",
                "+    final Set<String> languages = metaData.getLanguages();",
                "-    Set<String> languages = metaData.getLanguages();",
                "-    Map<String, String> usersLanguage = new HashMap<>(usersSet.size());",
                "-    for (UserRecipient user : usersSet) {",
                "-      usersLanguage.put(user.getUserId(),",
                "-          PersonalizationServiceProvider.getPersonalizationService().",
                "-          getUserSettings(user.getUserId()).getLanguage());",
                "+    // send the notification to the internal recipients",
                "+    final Set<String> recipientIds =",
                "+        recipients.stream().map(UserRecipient::getUserId).collect(Collectors.toSet());",
                "+    if (languages.size() == 1) {",
                "+      sendNotification(recipientIds, metaData, aMediaType, languages.iterator().next());",
                "+    } else {",
                "+      final String defaultLanguage = getDefaultLanguage(metaData.getSender(), languages);",
                "+      final Map<String, Set<String>> usersPerLanguage = new HashMap<>();",
                "+      recipientIds.stream().map(User::getById).forEach(u -> {",
                "+        final String userLang = u.getUserPreferences().getLanguage();",
                "+        if (languages.contains(userLang)) {",
                "+          addUserForLanguage(usersPerLanguage, u, userLang);",
                "+        } else {",
                "+          addUserForLanguage(usersPerLanguage, u, defaultLanguage);",
                "+        }",
                "+      });",
                "+      for (final Map.Entry<String, Set<String>> entry : usersPerLanguage.entrySet()) {",
                "+        sendNotification(entry.getValue(), metaData, aMediaType, entry.getKey());",
                "+      }",
                "     }",
                "-    NotificationParameters params = null;",
                "+    // send the notification to the external recipients who are declared in metaData",
                "+    sendNotification(Collections.emptySet(), metaData, aMediaType, I18NHelper.defaultLanguage);",
                "-    // All usersId to notify",
                "-    Set<String> allUserIds = usersLanguage.keySet();",
                "+    if (metaData.isSendByAUser() && aMediaType != NotificationParameters.ADDRESS_BASIC_COMMUNICATION_USER) {",
                "+      // save notification for history",
                "+      saveNotification(metaData, recipients);",
                "+    }",
                "-    for (String language : languages) {",
                "-      params = getNotificationParameters(aMediaType, metaData);",
                "-      params.sTitle = metaData.getTitle(language);",
                "-      params.sLinkLabel = metaData.getLinkLabel(language);",
                "-      params.sMessage = metaData.getContent(language);",
                "-      params.sLanguage = language;",
                "-      params.nNotificationResourceData = metaData.getNotificationResourceData(language);",
                "-      // Notify users with their native language",
                "-      List<String> userIds = getUserIds(language, usersLanguage);",
                "-      // remove users already notified in their language",
                "-      allUserIds.removeAll(userIds);",
                "-      notificationManager.notifyUsers(params, userIds.toArray(new String[userIds.size()]));",
                "-    }",
                "-    // Notify other users in language of the sender.",
                "-    notificationManager.notifyUsers(params, allUserIds.toArray(new String[allUserIds.size()]));",
                "+  }",
                "-    if (CollectionUtil.isNotEmpty(metaData.getExternalRecipients())) {",
                "-      // We only use default language for external notification",
                "-      params.sLanguage = I18NHelper.defaultLanguage;",
                "-      params.sTitle = metaData.getTitle(params.sLanguage);",
                "-      params.sLinkLabel = metaData.getLinkLabel(params.sLanguage);",
                "-      params.sMessage = metaData.getContent(params.sLanguage);",
                "-      notificationManager.notifyExternals(params, metaData.getExternalRecipients());",
                "-    }",
                "+  private void addUserForLanguage(final Map<String, Set<String>> usersPerLanguage, final User u,",
                "+      final String userLang) {",
                "+    usersPerLanguage.compute(userLang, (l, s) -> {",
                "+      Set<String> users = s;",
                "+      if (users == null) {",
                "+        users = new HashSet<>();",
                "+      }",
                "+      users.add(u.getId());",
                "+      return users;",
                "+    });",
                "+  }",
                "-    if (metaData.isSendByAUser() &&",
                "-        aMediaType != NotificationParameters.ADDRESS_BASIC_COMMUNICATION_USER) {",
                "-      // save notification for history",
                "-      saveNotification(metaData, usersSet);",
                "+  private String getDefaultLanguage(final String senderId, final Collection<String> languages) {",
                "+    final String defaultLanguage;",
                "+    final String senderLanguage = User.getById(senderId).getUserPreferences().getLanguage();",
                "+    if (languages.contains(senderLanguage)) {",
                "+      defaultLanguage = senderLanguage;",
                "+    } else if (languages.contains(I18NHelper.defaultLanguage)) {",
                "+      defaultLanguage = I18NHelper.defaultLanguage;",
                "+    } else {",
                "+      defaultLanguage = languages.iterator().next();",
                "     }",
                "+    return defaultLanguage;",
                "+  }",
                "-",
                "+  /**",
                "+   * Sends to the specified users the notification described by the {@link NotificationMetaData}",
                "+   * by using the given media type and in the specified language.",
                "+   * @param userIds a collection of user identifiers. If the collection is empty, then the",
                "+   * notification will be sent to the external recipients declared within the",
                "+   * {@link NotificationMetaData} object.",
                "+   * @param metaData a {@link NotificationMetaData} instance that describes the notification to",
                "+   * send.",
                "+   * @param aMediaType the media type in which will be encoded the notification content.",
                "+   * @param language the language in which the notification content will be written.",
                "+   * @throws NotificationException if an error occurs while sending the notification.",
                "+   */",
                "+  private void sendNotification(final Collection<String> userIds,",
                "+      final NotificationMetaData metaData, final int aMediaType, final String language)",
                "+      throws NotificationException {",
                "+    final NotificationParameters params = getNotificationParameters(aMediaType, metaData);",
                "+    params.sTitle = metaData.getTitle(language);",
                "+    params.sLinkLabel = metaData.getLinkLabel(language);",
                "+    params.sMessage = metaData.getContent(language);",
                "+    params.sLanguage = language;",
                "+    if (!userIds.isEmpty()) {",
                "+      params.nNotificationResourceData = metaData.getNotificationResourceData(language);",
                "+      notificationManager.notifyUsers(params, userIds.toArray(new String[0]));",
                "+    } else if (CollectionUtil.isNotEmpty(metaData.getExternalRecipients())) {",
                "+      notificationManager.notifyExternals(params, metaData.getExternalRecipients());",
                "+    }",
                "   }",
                "@@ -144,9 +185,10 @@ public class NotificationSender implements java.io.Serializable {",
                "   /**",
                "-   * Saving the notification into history if users have been notified.",
                "-   * @param metaData",
                "-   * @param usersSet",
                "-   * @throws NotificationManagerException",
                "+   * Saves the notification into the history of the sent notifications.",
                "+   * @param metaData the meta data that defines the notification that has been sent.",
                "+   * @param usersSet the recipients that have received the notification.",
                "+   * @throws NotificationException if an error occurs while saving the notification",
                "+   * information.",
                "    */",
                "   private void saveNotification(NotificationMetaData metaData, Set<UserRecipient> usersSet)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "     if (!usersSet.isEmpty()) {",
                "@@ -160,18 +202,2 @@ public class NotificationSender implements java.io.Serializable {",
                "-  private List<String> getUserIds(String lang, Map<String, String> usersLanguage) {",
                "-    List<String> userIds = new ArrayList<>(usersLanguage.keySet());",
                "-    Iterator<String> languages = usersLanguage.values().iterator();",
                "-    List<String> result = new ArrayList<>();",
                "-    String language;",
                "-    int u = 0;",
                "-    while (languages.hasNext()) {",
                "-      language = languages.next();",
                "-      if (lang.equalsIgnoreCase(language)) {",
                "-        result.add(userIds.get(u));",
                "-      }",
                "-      u++;",
                "-    }",
                "-    return result;",
                "-  }",
                "-",
                "   private NotificationParameters getNotificationParameters(int aMediaType,",
                "@@ -192,3 +218,3 @@ public class NotificationSender implements java.io.Serializable {",
                "     } else {",
                "-      params.iComponentInstance = extractLastNumber(metaData.getComponentId());",
                "+      params.iComponentInstance = ComponentInst.getComponentLocalId(metaData.getComponentId());",
                "     }",
                "@@ -211,99 +237,2 @@ public class NotificationSender implements java.io.Serializable {",
                "   }",
                "-",
                "-  /**",
                "-   * Extract the last number from the string",
                "-   * @param chaine The String to clean",
                "-   * @return the clean String Example 1 : kmelia47 -> 47 Example 2 : b2b34 -> 34",
                "-   */",
                "-  static int extractLastNumber(String chaine) {",
                "-    String s = \"\";",
                "-",
                "-    if (chaine != null) {",
                "-      for (int i = 0; i < chaine.length(); i++) {",
                "-        char car = chaine.charAt(i);",
                "-",
                "-        switch (car) {",
                "-          case '0':",
                "-          case '1':",
                "-          case '2':",
                "-          case '3':",
                "-          case '4':",
                "-          case '5':",
                "-          case '6':",
                "-          case '7':",
                "-          case '8':",
                "-          case '9':",
                "-            s = s + car;",
                "-            break;",
                "-          default:",
                "-            s = \"\";",
                "-        }",
                "-      }",
                "-    }",
                "-    if (s.length() > 0) {",
                "-      return Integer.parseInt(s);",
                "-    } else {",
                "-      return -1;",
                "-    }",
                "-  }",
                "-",
                "-  // The next 4 static functions are for the use of NotificationUser component",
                "-  // as a popup window",
                "-  // -------------------------------------------------------------------------------------------",
                "-  public static String getIdsLineFromIdsArray(String[] asrc) {",
                "-    StringBuilder toIds = new StringBuilder(\"\");",
                "-",
                "-    if (asrc != null) {",
                "-      for (int i = 0; i < asrc.length; i++) {",
                "-        if (i > 0) {",
                "-          toIds.append('_');",
                "-        }",
                "-        toIds.append(asrc[i]);",
                "-      }",
                "-    }",
                "-    return toIds.toString();",
                "-  }",
                "-",
                "-  public static String getIdsLineFromUserArray(UserDetail[] users) {",
                "-    StringBuilder toIds = new StringBuilder(\"\");",
                "-",
                "-    if (users != null) {",
                "-      for (int i = 0; i < users.length; i++) {",
                "-        if (i > 0) {",
                "-          toIds.append('_');",
                "-        }",
                "-        toIds.append(users[i].getId());",
                "-      }",
                "-    }",
                "-    return toIds.toString();",
                "-  }",
                "-",
                "-  public static String getIdsLineFromGroupArray(Group[] groups) {",
                "-    StringBuilder toIds = new StringBuilder(\"\");",
                "-",
                "-    if (groups != null) {",
                "-      for (int i = 0; i < groups.length; i++) {",
                "-        if (i > 0) {",
                "-          toIds.append('_');",
                "-        }",
                "-        toIds.append(groups[i].getId());",
                "-      }",
                "-    }",
                "-    return toIds.toString();",
                "-  }",
                "-",
                "-  public static String[] getIdsArrayFromIdsLine(String src) {",
                "-    if (src == null) {",
                "-      return new String[0];",
                "-    }",
                "-    StringTokenizer strTok = new StringTokenizer(src, \"_\");",
                "-    int nbElmt = strTok.countTokens();",
                "-    String[] valret = new String[nbElmt];",
                "-",
                "-    for (int i = 0; i < nbElmt; i++) {",
                "-      valret[i] = strTok.nextToken();",
                "-    }",
                "-    return valret;",
                "-  }",
                "-",
                " }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationUserEventListener.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationUserEventListener.java",
                "index c2cc6e526d..c6038d3cdf 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationUserEventListener.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationUserEventListener.java",
                "@@ -46,2 +46,3 @@ public class NotificationUserEventListener extends CDIResourceEventListener<User",
                "   @Override",
                "+  @Transactional",
                "   public void onDeletion(final UserEvent event) throws Exception {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterface.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterface.java",
                "index fa21f3404c..75064f9999 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterface.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterface.java",
                "@@ -25,3 +25,3 @@ package org.silverpeas.core.notification.user.client.model;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -43,12 +43,12 @@ public interface SentNotificationInterface {",
                "   void saveNotifUser(NotificationMetaData metaData, Set<UserRecipient> usersSet)",
                "-      throws NotificationManagerException;",
                "+      throws NotificationException;",
                "   List<SentNotificationDetail> getAllNotifByUser(String userId)",
                "-      throws NotificationManagerException;",
                "+      throws NotificationException;",
                "-  SentNotificationDetail getNotification(int notifId) throws NotificationManagerException;",
                "+  SentNotificationDetail getNotification(int notifId) throws NotificationException;",
                "-  void deleteNotif(int notifId, String userId) throws NotificationManagerException;",
                "+  void deleteNotif(int notifId, String userId) throws NotificationException;",
                "-  void deleteNotifByUser(String userId) throws NotificationManagerException;",
                "+  void deleteNotifByUser(String userId) throws NotificationException;",
                " }",
                "\\ No newline at end of file",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterfaceImpl.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterfaceImpl.java",
                "index 78779c64e4..828f354f26 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterfaceImpl.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterfaceImpl.java",
                "@@ -25,4 +25,3 @@ package org.silverpeas.core.notification.user.client.model;",
                "-import org.silverpeas.core.exception.SilverpeasRuntimeException;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -50,3 +49,3 @@ public class SentNotificationInterfaceImpl implements SentNotificationInterface",
                "   public void saveNotifUser(NotificationMetaData metaData, Set<UserRecipient> usersSet)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "     try (Connection con = openConnection()) {",
                "@@ -68,4 +67,3 @@ public class SentNotificationInterfaceImpl implements SentNotificationInterface",
                "     } catch (Exception e) {",
                "-      throw new NotificationManagerException(\"SentNotificationInterfaceImpl.saveNotifUser()\",",
                "-          SilverpeasRuntimeException.ERROR, \"notificationManager.EX_CANT_SAVE_NOTIFICATION\", e);",
                "+      throw new NotificationException(e);",
                "     }",
                "@@ -75,3 +73,3 @@ public class SentNotificationInterfaceImpl implements SentNotificationInterface",
                "   public List<SentNotificationDetail> getAllNotifByUser(String userId)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "     try (Connection con = openConnection()) {",
                "@@ -79,4 +77,3 @@ public class SentNotificationInterfaceImpl implements SentNotificationInterface",
                "     } catch (Exception e) {",
                "-      throw new NotificationManagerException(\"SentNotificationInterfaceImpl.getAllNotifByUser()\",",
                "-          SilverpeasRuntimeException.ERROR, \"notificationManager.EX_CANT_GET_NOTIFICATIONS\", e);",
                "+      throw new NotificationException(e);",
                "     }",
                "@@ -85,3 +82,3 @@ public class SentNotificationInterfaceImpl implements SentNotificationInterface",
                "   @Override",
                "-  public SentNotificationDetail getNotification(int notifId) throws NotificationManagerException {",
                "+  public SentNotificationDetail getNotification(int notifId) throws NotificationException {",
                "     try (Connection con = openConnection()) {",
                "@@ -89,4 +86,3 @@ public class SentNotificationInterfaceImpl implements SentNotificationInterface",
                "     } catch (Exception e) {",
                "-      throw new NotificationManagerException(\"SentNotificationInterfaceImpl.getNotification()\",",
                "-          SilverpeasRuntimeException.ERROR, \"notificationManager.EX_CANT_GET_NOTIFICATION\", e);",
                "+      throw new NotificationException(e);",
                "     }",
                "@@ -96,3 +92,3 @@ public class SentNotificationInterfaceImpl implements SentNotificationInterface",
                "   @Override",
                "-  public void deleteNotif(int notifId, String userId) throws NotificationManagerException {",
                "+  public void deleteNotif(int notifId, String userId) throws NotificationException {",
                "     try (Connection con = openConnection()) {",
                "@@ -104,8 +100,7 @@ public class SentNotificationInterfaceImpl implements SentNotificationInterface",
                "       } else {",
                "-        throw new ForbiddenRuntimeException(\"SentNotificationInterfaceImpl.deleteNotif()\",",
                "-            SilverpeasRuntimeException.ERROR, \"peasCore.RESOURCE_ACCESS_UNAUTHORIZED\", \"notifId=\"+notifId+\", userId=\"+userId);",
                "+        throw new ForbiddenRuntimeException(",
                "+            \"Unauthorized to delete the notification \" + notifId + \" for user \" + userId);",
                "       }",
                "     } catch (Exception e) {",
                "-      throw new NotificationManagerException(\"SentNotificationInterfaceImpl.deleteNotif()\",",
                "-          SilverpeasRuntimeException.ERROR, \"notificationManager.EX_CANT_DELETE_NOTIFICATION\", e);",
                "+      throw new NotificationException(e);",
                "     }",
                "@@ -115,3 +110,3 @@ public class SentNotificationInterfaceImpl implements SentNotificationInterface",
                "   @Override",
                "-  public void deleteNotifByUser(String userId) throws NotificationManagerException {",
                "+  public void deleteNotifByUser(String userId) throws NotificationException {",
                "     try (Connection con = openConnection()) {",
                "@@ -119,4 +114,3 @@ public class SentNotificationInterfaceImpl implements SentNotificationInterface",
                "     } catch (Exception e) {",
                "-      throw new NotificationManagerException(\"SentNotificationInterfaceImpl.deleteNotifByUser()\",",
                "-          SilverpeasRuntimeException.ERROR, \"notificationManager.EX_CANT_DELETE_NOTIFICATION\", e);",
                "+      throw new NotificationException(e);",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILException.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILException.java",
                "index 6fcc6193de..313e0e03cf 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILException.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILException.java",
                "@@ -25,8 +25,6 @@ package org.silverpeas.core.notification.user.server.channel.silvermail;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                "+import org.silverpeas.core.SilverpeasException;",
                " /**",
                "- * Title: Description: Copyright: Copyright (c) 2001 Company:",
                "- * @author eDurand",
                "- * @version 1.0",
                "+ * Exception thrown by the Silver mail processing chain.",
                "  */",
                "@@ -34,60 +32,14 @@ public class SILVERMAILException extends SilverpeasException {",
                "-  private static final long serialVersionUID = 1266360603211222081L;",
                "+  private static final long serialVersionUID = 4801319564211794891L;",
                "-  /**",
                "-   * @param callingClass",
                "-   * @param errorLevel",
                "-   * @param message",
                "-   */",
                "-  public SILVERMAILException(String callingClass, int errorLevel, String message) {",
                "-    super(callingClass, errorLevel, message);",
                "+  public SILVERMAILException(final String message, final String... parameters) {",
                "+    super(message, parameters);",
                "   }",
                "-  /**",
                "-   * Constructor declaration",
                "-   * @param callingClass",
                "-   * @param errorLevel",
                "-   * @param message",
                "-   * @param extraParams",
                "-   *",
                "-   */",
                "-  public SILVERMAILException(String callingClass, int errorLevel, String message,",
                "-      String extraParams) {",
                "-    super(callingClass, errorLevel, message, extraParams);",
                "+  public SILVERMAILException(final String message, final Throwable cause) {",
                "+    super(message, cause);",
                "   }",
                "-  /**",
                "-   * Constructor declaration",
                "-   * @param callingClass",
                "-   * @param errorLevel",
                "-   * @param message",
                "-   * @param nested",
                "-   *",
                "-   */",
                "-  public SILVERMAILException(String callingClass, int errorLevel, String message,",
                "-      Exception nested) {",
                "-    super(callingClass, errorLevel, message, nested);",
                "-  }",
                "-",
                "-  /**",
                "-   * Constructor declaration",
                "-   * @param callingClass",
                "-   * @param errorLevel",
                "-   * @param message",
                "-   * @param extraParams",
                "-   * @param nested",
                "-   *",
                "-   */",
                "-  public SILVERMAILException(String callingClass, int errorLevel, String message,",
                "-      String extraParams,",
                "-      Exception nested) {",
                "-    super(callingClass, errorLevel, message, extraParams, nested);",
                "-  }",
                "-",
                "-  /**",
                "-   * -------------------------------------------------------------------------- getModule getModule",
                "-   */",
                "-  @Override",
                "-  public String getModule() {",
                "-    return \"notificationserver\";",
                "+  public SILVERMAILException(final Throwable cause) {",
                "+    super(cause);",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILPersistence.java b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILPersistence.java",
                "index ebb088858b..b17e31a266 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILPersistence.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILPersistence.java",
                "@@ -29,8 +29,5 @@ import org.silverpeas.core.cache.model.SimpleCache;",
                " import org.silverpeas.core.cache.service.CacheServiceProvider;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                "-import org.silverpeas.core.exception.SilverpeasRuntimeException;",
                " import org.silverpeas.core.notification.sse.DefaultServerEventNotifier;",
                " import org.silverpeas.core.notification.user.UserNotificationServerEvent;",
                "-import org.silverpeas.core.notification.user.server.channel.silvermail.SilvermailCriteria",
                "-    .QUERY_ORDER_BY;",
                "+import org.silverpeas.core.notification.user.server.channel.silvermail.SilvermailCriteria.QUERY_ORDER_BY;",
                " import org.silverpeas.core.persistence.Transaction;",
                "@@ -53,5 +50,2 @@ import java.util.stream.Collectors;",
                "-/**",
                "- * Class declaration",
                "- */",
                " public class SILVERMAILPersistence {",
                "@@ -78,5 +72,3 @@ public class SILVERMAILPersistence {",
                "     } catch (Exception e) {",
                "-      throw new SILVERMAILException(",
                "-          \"SILVERMAILPersistence.markMessageAsReaden()\",",
                "-          SilverpeasException.ERROR, \"silvermail.EX_CANT_READ_MSG\", \"MsgId=\" + smb.getId(), e);",
                "+      throw new SILVERMAILException(\"Cannot mark the message \" + smb.getId() + \" as read\", e);",
                "     }",
                "@@ -93,4 +85,3 @@ public class SILVERMAILPersistence {",
                "    */",
                "-  private static SilverpeasList<SILVERMAILMessage> findByCriteria(SilvermailCriteria criteria)",
                "-      throws SILVERMAILException {",
                "+  private static SilverpeasList<SILVERMAILMessage> findByCriteria(SilvermailCriteria criteria) {",
                "     final SilverpeasList<SILVERMAILMessageBean> messageBeans =",
                "@@ -131,6 +122,3 @@ public class SILVERMAILPersistence {",
                "-  /**",
                "-   *",
                "-   */",
                "-  public static void addMessage(SILVERMAILMessage silverMsg) throws SILVERMAILException {",
                "+  static void addMessage(SILVERMAILMessage silverMsg) throws SILVERMAILException {",
                "     SILVERMAILMessageBean smb = new SILVERMAILMessageBean();",
                "@@ -153,4 +141,3 @@ public class SILVERMAILPersistence {",
                "       } catch (Exception e) {",
                "-        throw new SILVERMAILException(\"SILVERMAILPersistence.addMessage()\",",
                "-            SilverpeasException.ERROR, \"silvermail.EX_CANT_WRITE_MESSAGE\", e);",
                "+        throw new SILVERMAILException(e);",
                "       }",
                "@@ -166,40 +153,4 @@ public class SILVERMAILPersistence {",
                "-  public static long countReadMessagesOfFolder(String userId, String folderName) {",
                "-    return getRepository().countByCriteria(SilvermailCriteria.get()",
                "-        .aboutUser(userId)",
                "-        .into(folderName)",
                "-        .read());",
                "-  }",
                "-",
                "-  public static long countMessagesOfFolder(String userId, String folderName) {",
                "-    return getRepository().countByCriteria(SilvermailCriteria.get()",
                "-        .aboutUser(userId)",
                "-        .into(folderName));",
                "-  }",
                "-",
                "-  public static SilverpeasList<SILVERMAILMessage> getNotReadMessagesOfFolder(String userId,",
                "-      String folderName, final PaginationPage pagination, final QUERY_ORDER_BY orderBy)",
                "-      throws SILVERMAILException {",
                "-    final SilvermailCriteria criteria =",
                "-        SilvermailCriteria.get().aboutUser(userId).into(folderName).unread()",
                "-            .paginatedBy(pagination);",
                "-    if (orderBy != null) {",
                "-      criteria.orderedBy(orderBy);",
                "-    }",
                "-    return findByCriteria(criteria);",
                "-  }",
                "-",
                "-  public static SilverpeasList<SILVERMAILMessage> getReadMessagesOfFolder(String userId,",
                "-      String folderName, final PaginationPage pagination, final QUERY_ORDER_BY orderBy)",
                "-      throws SILVERMAILException {",
                "-    final SilvermailCriteria criteria =",
                "-        SilvermailCriteria.get().aboutUser(userId).into(folderName).read().paginatedBy(pagination);",
                "-    if (orderBy != null) {",
                "-      criteria.orderedBy(orderBy);",
                "-    }",
                "-    return findByCriteria(criteria);",
                "-  }",
                "-",
                "   public static SilverpeasList<SILVERMAILMessage> getMessageOfFolder(String userId, String folderName,",
                "-      final PaginationPage pagination, final QUERY_ORDER_BY orderBy) throws SILVERMAILException {",
                "+      final PaginationPage pagination, final QUERY_ORDER_BY orderBy) {",
                "     final SilvermailCriteria criteria =",
                "@@ -246,5 +197,4 @@ public class SILVERMAILPersistence {",
                "         } else {",
                "-          throw new ForbiddenRuntimeException(\"SILVERMAILPersistence.deleteMessage()\",",
                "-              SilverpeasRuntimeException.ERROR, \"peasCore.RESOURCE_ACCESS_UNAUTHORIZED\",",
                "-              \"notifId=\" + msgId + \", userId=\" + userId);",
                "+          throw new ForbiddenRuntimeException(",
                "+              \"Unauthorized deletion of message \" + msgId + \" for user \" + userId);",
                "         }",
                "@@ -255,5 +205,3 @@ public class SILVERMAILPersistence {",
                "     } catch (Exception e) {",
                "-      throw new SILVERMAILException(\"SILVERMAILPersistence.deleteMessage()\",",
                "-          SilverpeasException.ERROR, \"silvermail.EX_CANT_DEL_MSG\", \"MsgId=\"",
                "-          + Long.toString(msgId), e);",
                "+      throw new SILVERMAILException(\"Cannot delete the message \" + msgId, e);",
                "     }",
                "@@ -261,5 +209,4 @@ public class SILVERMAILPersistence {",
                "-  public static void deleteAllMessagesInFolder(String currentUserId, String folderName)",
                "-      throws SILVERMAILException {",
                "-    String folderId = \"INBOX\".equals(folderName) ? \"0\" : \"0\";",
                "+  public static void deleteAllMessagesInFolder(String currentUserId) {",
                "+    String folderId = \"0\";",
                "     long nbDeleted = Transaction.performInOne(() -> getRepository()",
                "@@ -272,3 +219,3 @@ public class SILVERMAILPersistence {",
                "-  public static void markAllMessagesAsRead(String currentUserId) throws SILVERMAILException {",
                "+  public static void markAllMessagesAsRead(String currentUserId) {",
                "     long nbUpdated = Transaction.performInOne(() -> getRepository()",
                "@@ -280,4 +227,3 @@ public class SILVERMAILPersistence {",
                "-  public static void deleteMessages(String currentUserId, Collection<String> ids)",
                "-      throws SILVERMAILException {",
                "+  public static void deleteMessages(String currentUserId, Collection<String> ids) {",
                "     long nbDeleted = Transaction.performInOne(() -> getRepository()",
                "@@ -290,4 +236,3 @@ public class SILVERMAILPersistence {",
                "-  public static void markMessagesAsRead(String currentUserId, Collection<String> ids)",
                "-      throws SILVERMAILException {",
                "+  public static void markMessagesAsRead(String currentUserId, Collection<String> ids) {",
                "     long nbUpdated = Transaction.performInOne(() -> getRepository()",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/security/authorization/ForbiddenRuntimeException.java b/core-library/src/main/java/org/silverpeas/core/security/authorization/ForbiddenRuntimeException.java",
                "index 99e27a6130..5d5ca47fbd 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/security/authorization/ForbiddenRuntimeException.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/security/authorization/ForbiddenRuntimeException.java",
                "@@ -25,3 +25,3 @@ package org.silverpeas.core.security.authorization;",
                "-import org.silverpeas.core.exception.SilverpeasRuntimeException;",
                "+import org.silverpeas.core.SilverpeasRuntimeException;",
                "@@ -29,27 +29,15 @@ public class ForbiddenRuntimeException extends SilverpeasRuntimeException {",
                "-  private static final long serialVersionUID = -4953377031915598557L;",
                "+  private static final long serialVersionUID = -3552375508529902088L;",
                "-  public ForbiddenRuntimeException(String callingClass, int errorLevel, String message) {",
                "-    super(callingClass, errorLevel, message);",
                "+  public ForbiddenRuntimeException(final String message) {",
                "+    super(message);",
                "   }",
                "-  public ForbiddenRuntimeException(String callingClass, int errorLevel, String message,",
                "-      String extraParams) {",
                "-    super(callingClass, errorLevel, message, extraParams);",
                "+  public ForbiddenRuntimeException(final String message, final Throwable cause) {",
                "+    super(message, cause);",
                "   }",
                "-  public ForbiddenRuntimeException(String callingClass, int errorLevel, String message,",
                "-      Exception nested) {",
                "-    super(callingClass, errorLevel, message, nested);",
                "+  public ForbiddenRuntimeException(final Throwable cause) {",
                "+    super(cause);",
                "   }",
                "-",
                "-  public ForbiddenRuntimeException(String callingClass, int errorLevel, String message,",
                "-      String extraParams, Exception nested) {",
                "-    super(callingClass, errorLevel, message, extraParams, nested);",
                "-  }",
                "-",
                "-  public String getModule() {",
                "-    return \"accessController\";",
                "-  }",
                "-",
                " }",
                "\\ No newline at end of file",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/admin/DomainMatcher.java b/core-library/src/test-awaiting/java/com/silverpeas/admin/DomainMatcher.java",
                "deleted file mode 100644",
                "index 3e8c0f6f9e..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/admin/DomainMatcher.java",
                "+++ /dev/null",
                "@@ -1,65 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.admin;",
                "-",
                "-import com.stratelia.webactiv.beans.admin.Domain;",
                "-import org.hamcrest.BaseMatcher;",
                "-import org.hamcrest.Description;",
                "-",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-public class DomainMatcher extends BaseMatcher<Domain> {",
                "-",
                "-  private Domain domain;",
                "-",
                "-  @Override",
                "-  public boolean matches(Object item) {",
                "-    boolean match = false;",
                "-    if (item instanceof Domain) {",
                "-      Domain actual = (Domain) item;",
                "-      match = domain.equals(actual);",
                "-    }",
                "-    return match;",
                "-  }",
                "-",
                "-  @Override",
                "-  public void describeTo(Description description) {",
                "-    description.appendValue(domain);",
                "-  }",
                "-",
                "-  /**",
                "-   * Creates a new matcher with the specified domain.",
                "-   * @param domain the domain to match.",
                "-   * @return a domain matcher.",
                "-   */",
                "-  public static DomainMatcher matches(final Domain domain) {",
                "-    return new DomainMatcher(domain);",
                "-  }",
                "-",
                "-  private DomainMatcher(final Domain domain) {",
                "-    this.domain = domain;",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/form/AbstractFormTest.java b/core-library/src/test-awaiting/java/com/silverpeas/form/AbstractFormTest.java",
                "deleted file mode 100644",
                "index 00d39143a1..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/form/AbstractFormTest.java",
                "+++ /dev/null",
                "@@ -1,350 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.contribution.content.form;",
                "-",
                "-import java.util.Arrays;",
                "-import java.util.List;",
                "-import org.silverpeas.core.contribution.content.form.dummy.DummyRecordTemplate;",
                "-import javax.servlet.jsp.JspWriter;",
                "-import org.apache.commons.fileupload.FileItem;",
                "-import org.junit.After;",
                "-import org.junit.Before;",
                "-import org.junit.Test;",
                "-import static org.mockito.Mockito.*;",
                "-import static org.junit.Assert.*;",
                "-",
                "-import static org.silverpeas.core.contribution.content.form.AbstractForm.REPEATED_FIELD_CSS_HIDE;",
                "-import static org.silverpeas.core.contribution.content.form.AbstractForm.REPEATED_FIELD_CSS_SHOW;",
                "-",
                "-/**",
                "- * Unit tests on the AbstractForm implemented methods.",
                "- *",
                "- */",
                "-public class AbstractFormTest {",
                "-",
                "-  public static final String FIELD_NAME1 = \"name\";",
                "-  public static final String FIELD_NAME2 = \"surname\";",
                "-  public static final String FIELD_TYPE = \"text\";",
                "-  public static final String FIELD_LABEL1 = \"name\";",
                "-  public static final String FIELD_LABEL2 = \"surname\";",
                "-  public static final String FIELD_WYSIWYG = \"wysiwyg\";",
                "-  public static final String FIELD_WYSIWYG_TYPE = \"textarea\";",
                "-",
                "-  public AbstractFormTest() {",
                "-  }",
                "-",
                "-  @Before",
                "-  public void setUp() throws Exception {",
                "-    TypeManager typeManager = TypeManager.getInstance();",
                "-    typeManager.setDisplayer(MyFieldDisplayer.class.getName(),",
                "-        FIELD_TYPE, FIELD_NAME1, true);",
                "-    typeManager.setDisplayer(MyFieldDisplayer.class.getName(),",
                "-        FIELD_TYPE, FIELD_NAME2, true);",
                "-    typeManager.setDisplayer(MyFieldDisplayer.class.getName(),",
                "-        FIELD_WYSIWYG_TYPE, FIELD_WYSIWYG, true);",
                "-  }",
                "-",
                "-  @After",
                "-  public void tearDown() {",
                "-  }",
                "-",
                "-  /**",
                "-   * Empty test to check the unit test passes with its resources set up.",
                "-   */",
                "-  @Test",
                "-  public void emptyTest() {",
                "-    assertTrue(true);",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testDisplayScriptsWithAnEmptyRecordTemplate() throws Exception {",
                "-    MyFormImpl myform = new MyFormImpl(new DummyRecordTemplate());",
                "-    JspWriter jspWriter = mock(JspWriter.class);",
                "-    PagesContext pageContext = mock(PagesContext.class);",
                "-    when(pageContext.getLanguage()).thenReturn(\"fr\");",
                "-    myform.displayScripts(jspWriter, pageContext);",
                "-    verify(jspWriter).write(myform.toScript());",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testDisplayScriptWithANonEmptyRecordTemplate() throws Exception {",
                "-    MyFormImpl myForm = new MyFormImpl(new MyRecordTemplate(",
                "-        new MyFieldTemplate(FIELD_NAME1, FIELD_TYPE, FIELD_LABEL1),",
                "-        new MyFieldTemplate(FIELD_NAME2, FIELD_TYPE, FIELD_LABEL2)));",
                "-    JspWriter jspWriter = mock(JspWriter.class);",
                "-    PagesContext pageContext = mock(PagesContext.class);",
                "-    when(pageContext.getLanguage()).thenReturn(\"fr\");",
                "-    myForm.displayScripts(jspWriter, pageContext);",
                "-    //verify(jspWriter).write(myForm.toScript());",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testIsEmptyWithNoFileItemsFound() throws Exception {",
                "-    MyFormImpl myForm = new MyFormImpl(new MyRecordTemplate(",
                "-        new MyFieldTemplate(FIELD_NAME1, FIELD_TYPE, FIELD_LABEL1),",
                "-        new MyFieldTemplate(FIELD_NAME2, FIELD_TYPE, FIELD_LABEL2)));",
                "-    DataRecord dataRecord = mock(DataRecord.class);",
                "-    PagesContext pagesContext = mock(PagesContext.class);",
                "-    FileItem fileItem = mock(FileItem.class);",
                "-    when(fileItem.getFieldName()).thenReturn(\"\");",
                "-    when(fileItem.getName()).thenReturn(\"\");",
                "-    when(fileItem.isFormField()).thenReturn(true);",
                "-    boolean isEmpty = myForm.isEmpty(Arrays.asList(fileItem, fileItem), dataRecord, pagesContext);",
                "-    assertTrue(isEmpty);",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testIsEmptyWithAllFileItemsWithoutContent() throws Exception {",
                "-    MyFormImpl myForm = new MyFormImpl(new MyRecordTemplate(",
                "-        new MyFieldTemplate(FIELD_NAME1, FIELD_TYPE, FIELD_LABEL1),",
                "-        new MyFieldTemplate(FIELD_NAME2, FIELD_TYPE, FIELD_LABEL2)));",
                "-    DataRecord dataRecord = mock(DataRecord.class);",
                "-    PagesContext pagesContext = mock(PagesContext.class);",
                "-    FileItem fileItem1 = mock(FileItem.class);",
                "-    when(fileItem1.getFieldName()).thenReturn(FIELD_NAME1);",
                "-    when(fileItem1.getName()).thenReturn(FIELD_NAME1);",
                "-    when(fileItem1.isFormField()).thenReturn(true);",
                "-    when(fileItem1.getString(anyString())).thenReturn(\"\");",
                "-    FileItem fileItem2 = mock(FileItem.class);",
                "-    when(fileItem2.getFieldName()).thenReturn(FIELD_NAME2);",
                "-    when(fileItem2.getName()).thenReturn(FIELD_NAME2);",
                "-    when(fileItem2.isFormField()).thenReturn(true);",
                "-    when(fileItem2.getString(anyString())).thenReturn(null);",
                "-    boolean isEmpty = myForm.isEmpty(Arrays.asList(fileItem1, fileItem2), dataRecord, pagesContext);",
                "-    assertTrue(isEmpty);",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testIsNotEmptyWithOnlyOneFileItemWithoutContent() throws Exception {",
                "-    MyFormImpl myForm = new MyFormImpl(new MyRecordTemplate(",
                "-        new MyFieldTemplate(FIELD_NAME1, FIELD_TYPE, FIELD_LABEL1),",
                "-        new MyFieldTemplate(FIELD_NAME2, FIELD_TYPE, FIELD_LABEL2)));",
                "-    DataRecord dataRecord = mock(DataRecord.class);",
                "-    PagesContext pagesContext = mock(PagesContext.class);",
                "-    FileItem fileItem1 = mock(FileItem.class);",
                "-    when(fileItem1.getFieldName()).thenReturn(FIELD_NAME1);",
                "-    when(fileItem1.getName()).thenReturn(FIELD_NAME1);",
                "-    when(fileItem1.isFormField()).thenReturn(true);",
                "-    when(fileItem1.getString(anyString())).thenReturn(\"tartempion\");",
                "-    FileItem fileItem2 = mock(FileItem.class);",
                "-    when(fileItem2.getFieldName()).thenReturn(FIELD_NAME2);",
                "-    when(fileItem2.getName()).thenReturn(FIELD_NAME2);",
                "-    when(fileItem2.isFormField()).thenReturn(true);",
                "-    when(fileItem2.getString(anyString())).thenReturn(null);",
                "-    boolean isEmpty = myForm.isEmpty(Arrays.asList(fileItem1, fileItem2), dataRecord, pagesContext);",
                "-    assertFalse(isEmpty);",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testUpdateOfEmptyFormDoesNothing() throws Exception {",
                "-    MyFormImpl myForm = new MyFormImpl(new DummyRecordTemplate());",
                "-    DataRecord dataRecord = mock(DataRecord.class);",
                "-    PagesContext pagesContext = mock(PagesContext.class);",
                "-    FileItem fileItem = mock(FileItem.class);",
                "-    when(dataRecord.getField(anyString())).thenReturn(null);",
                "-    List<String> attachments = myForm.update(Arrays.asList(fileItem), dataRecord,",
                "-        pagesContext, true);",
                "-    assertTrue(attachments.isEmpty());",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testUpdateWithWysiwygFields() throws Exception {",
                "-    MyFormImpl myForm = new MyFormImpl(new MyRecordTemplate(",
                "-        new MyFieldTemplate(FIELD_NAME1, FIELD_TYPE, FIELD_LABEL1),",
                "-        new MyFieldTemplate(FIELD_NAME2, FIELD_TYPE, FIELD_LABEL2),",
                "-        new MyFieldTemplate(FIELD_WYSIWYG, FIELD_WYSIWYG_TYPE, FIELD_WYSIWYG)));",
                "-    DataRecord dataRecord = mock(DataRecord.class);",
                "-    PagesContext pagesContext = mock(PagesContext.class);",
                "-    FileItem fileItem = mock(FileItem.class);",
                "-    when(dataRecord.getField(anyString())).thenReturn(null);",
                "-    List<String> attachments = myForm.update(Arrays.asList(fileItem), dataRecord, pagesContext,",
                "-        true);",
                "-    assertEquals(3, attachments.size());",
                "-    assertTrue(attachments.contains(FIELD_NAME1));",
                "-    assertTrue(attachments.contains(FIELD_NAME2));",
                "-    assertTrue(attachments.contains(FIELD_WYSIWYG));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testUpdateWithoutWysiwygFields() throws Exception {",
                "-    MyFormImpl myForm = new MyFormImpl(new MyRecordTemplate(",
                "-        new MyFieldTemplate(FIELD_NAME1, FIELD_TYPE, FIELD_LABEL1),",
                "-        new MyFieldTemplate(FIELD_NAME2, FIELD_TYPE, FIELD_LABEL2),",
                "-        new MyFieldTemplate(FIELD_WYSIWYG, FIELD_WYSIWYG_TYPE, FIELD_WYSIWYG)));",
                "-    DataRecord dataRecord = mock(DataRecord.class);",
                "-    PagesContext pagesContext = mock(PagesContext.class);",
                "-    FileItem fileItem = mock(FileItem.class);",
                "-    when(dataRecord.getField(anyString())).thenReturn(null);",
                "-    List<String> attachments = myForm.update(Arrays.asList(fileItem), dataRecord, pagesContext,",
                "-        false);",
                "-    assertEquals(2, attachments.size());",
                "-    assertTrue(attachments.contains(FIELD_NAME1));",
                "-    assertTrue(attachments.contains(FIELD_NAME2));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testUpdateWysiwygOfEmptyFormDoesNothing() throws Exception {",
                "-    MyFormImpl myForm = new MyFormImpl(new DummyRecordTemplate());",
                "-    DataRecord dataRecord = mock(DataRecord.class);",
                "-    PagesContext pagesContext = mock(PagesContext.class);",
                "-    FileItem fileItem = mock(FileItem.class);",
                "-    when(dataRecord.getField(anyString())).thenReturn(null);",
                "-    List<String> attachments = myForm.updateWysiwyg(Arrays.asList(fileItem), dataRecord,",
                "-        pagesContext);",
                "-    assertTrue(attachments.isEmpty());",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testUpdateWysiwyg() throws Exception {",
                "-    MyFormImpl myForm = new MyFormImpl(new MyRecordTemplate(",
                "-        new MyFieldTemplate(FIELD_NAME1, FIELD_TYPE, FIELD_LABEL1),",
                "-        new MyFieldTemplate(FIELD_NAME2, FIELD_TYPE, FIELD_LABEL2),",
                "-        new MyFieldTemplate(FIELD_WYSIWYG, FIELD_WYSIWYG_TYPE, FIELD_WYSIWYG)));",
                "-    DataRecord dataRecord = mock(DataRecord.class);",
                "-    PagesContext pagesContext = mock(PagesContext.class);",
                "-    FileItem fileItem = mock(FileItem.class);",
                "-    when(dataRecord.getField(anyString())).thenReturn(null);",
                "-    List<String> attachments = myForm.updateWysiwyg(Arrays.asList(fileItem), dataRecord,",
                "-        pagesContext);",
                "-    assertEquals(1, attachments.size());",
                "-    assertTrue(attachments.contains(FIELD_WYSIWYG));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testUpdateWysiwygWithNoWysiwygFieldsDoesNothing() throws Exception {",
                "-    MyFormImpl myForm = new MyFormImpl(new MyRecordTemplate(",
                "-        new MyFieldTemplate(FIELD_NAME1, FIELD_TYPE, FIELD_LABEL1),",
                "-        new MyFieldTemplate(FIELD_NAME2, FIELD_TYPE, FIELD_LABEL2)));",
                "-    DataRecord dataRecord = mock(DataRecord.class);",
                "-    PagesContext pagesContext = mock(PagesContext.class);",
                "-    FileItem fileItem = mock(FileItem.class);",
                "-    when(dataRecord.getField(anyString())).thenReturn(null);",
                "-    List<String> attachments = myForm.updateWysiwyg(Arrays.asList(fileItem), dataRecord,",
                "-        pagesContext);",
                "-    assertTrue(attachments.isEmpty());",
                "-  }",
                "-",
                "-  /**",
                "-   * A simple implementation of the AbstractForm class in order to test the method implemented by",
                "-   * the abstract class.",
                "-   */",
                "-  public class MyFormImpl extends AbstractForm {",
                "-",
                "-    private final String language = \"fr\";",
                "-",
                "-    public MyFormImpl(final RecordTemplate recordTemplate) throws Exception {",
                "-      super(recordTemplate);",
                "-    }",
                "-",
                "-    @Override",
                "-    public void display(JspWriter out, PagesContext pagesContext, DataRecord record) {",
                "-    }",
                "-",
                "-    /**",
                "-     * The result expected by the displayScripts method of the AbstractForm class.",
                "-     *",
                "-     * @return the expected result of AbstractForm#displayScripts method",
                "-     */",
                "-    protected String toScript() {",
                "-      List<FieldTemplate> templates = getFieldTemplates();",
                "-      MyFieldDisplayer displayer = new MyFieldDisplayer();",
                "-      StringBuilder builder = new StringBuilder();",
                "-      if (!templates.isEmpty()) {",
                "-        builder.append(\"<script type=\\\"text/javascript\\\" src=\\\"/weblib/xmlForms/\").",
                "-            append(getFieldTemplates().get(0).getTemplateName()).append(",
                "-                \".js\\\"></script>\\n\");",
                "-      }",
                "-",
                "-      builder.append(Util.getJavascriptIncludes(language))",
                "-          .append(\"\\n<script type=\\\"text/javascript\\\">\\n\")",
                "-          .append(\"\tvar errorNb = 0;\\n\")",
                "-          .append(\"\tvar errorMsg = \\\"\\\";\\n\")",
                "-          .append(\"function addXMLError(message) {\\n\")",
                "-          .append(\"\terrorMsg+=\\\"  - \\\"+message+\\\"\\\\n\\\";\\n\")",
                "-          .append(\"\terrorNb++;\\n\")",
                "-          .append(\"}\\n\")",
                "-          .append(\"function getXMLField(fieldName) {\\n\")",
                "-          .append(\"\treturn document.getElementById(fieldName);\\n\")",
                "-          .append(\"}\\n\")",
                "-          .append(\"function isCorrectForm() {\\n\")",
                "-          .append(\"\terrorMsg = \\\"\\\";\\n\")",
                "-          .append(\"\terrorNb = 0;\\n\")",
                "-          .append(\"\tvar field;\\n\")",
                "-          .append(\"\t\\n\\n\");",
                "-      for (FieldTemplate fieldTemplate : templates) {",
                "-        builder.append(\"\tfield = document.getElementById(\\\"\")",
                "-            .append(fieldTemplate.getFieldName())",
                "-            .append(\"\\\");\\n\")",
                "-            .append(\"\tif (field != null) {\\n\")",
                "-            .append(displayer.toScript(fieldTemplate))",
                "-            .append(\"}\\n\\n\");",
                "-      }",
                "-      builder.append(\"\t\\n\\n\")",
                "-          .append(\"\tswitch(errorNb)\\n\")",
                "-          .append(\"\t{\\n\")",
                "-          .append(\"\tcase 0 :\\n\")",
                "-          .append(\"\t\tresult = true;\\n\")",
                "-          .append(\"\t\tbreak;\\n\")",
                "-          .append(\"\tcase 1 :\\n\")",
                "-          .append(\"\t\terrorMsg = \\\"\")",
                "-          .append(Util.getString(\"GML.ThisFormContains\", language))",
                "-          .append(\" 1 \")",
                "-          .append(Util.getString(\"GML.error\", language))",
                "-          .append(\" : \\\\n \\\" + errorMsg;\\n\")",
                "-          .append(\"\t\twindow.alert(errorMsg);\\n\")",
                "-          .append(\"\t\tresult = false;\\n\")",
                "-          .append(\"\t\tbreak;\\n\")",
                "-          .append(\"\tdefault :\\n\")",
                "-          .append(\"\t\terrorMsg = \\\"\")",
                "-          .append(Util.getString(\"GML.ThisFormContains\", language))",
                "-          .append(\" \\\" + errorNb + \\\" \")",
                "-          .append(Util.getString(\"GML.errors\", language))",
                "-          .append(\" :\\\\n \\\" + errorMsg;\\n\")",
                "-          .append(\"\t\twindow.alert(errorMsg);\\n\")",
                "-          .append(\"\t\tresult = false;\\n\")",
                "-          .append(\"\t\tbreak;\\n\")",
                "-          .append(\"\t}\\n\")",
                "-          .append(\"\treturn result;\\n\")",
                "-          .append(\"}\\n\")",
                "-          .append(\"\t\\n\\n\")",
                "-          .append(\"function showOneMoreField(fieldName) {\\n\")",
                "-          .append(\"$('.field_'+fieldName+' .\" + REPEATED_FIELD_CSS_HIDE + \":first').removeClass('\"",
                "-              + REPEATED_FIELD_CSS_HIDE + \"').addClass('\" + REPEATED_FIELD_CSS_SHOW + \"');\\n\")",
                "-          .append(\"if ($('.field_'+fieldName+' .\" + REPEATED_FIELD_CSS_HIDE + \"').length == 0) {\\n\")",
                "-          .append(\" $('#form-row-'+fieldName+' #moreField-'+fieldName).hide();\\n\")",
                "-          .append(\"}\\n\")",
                "-          .append(\"}\\n\")",
                "-          .append(\"</script>\\n\");",
                "-",
                "-      return builder.toString();",
                "-    }",
                "-",
                "-    @Override",
                "-    public String toString(final PagesContext pageContext, final DataRecord dataRecord) {",
                "-      return toScript();",
                "-    }",
                "-",
                "-  }",
                "-",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/form/MyFieldDisplayer.java b/core-library/src/test-awaiting/java/com/silverpeas/form/MyFieldDisplayer.java",
                "deleted file mode 100644",
                "index 8bd52fb56a..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/form/MyFieldDisplayer.java",
                "+++ /dev/null",
                "@@ -1,93 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.contribution.content.form;",
                "-",
                "-import java.io.IOException;",
                "-import java.io.PrintWriter;",
                "-import java.util.List;",
                "-",
                "-import org.silverpeas.search.indexEngine.model.FullIndexEntry;",
                "-",
                "-import org.silverpeas.core.contribution.content.form.displayers.AbstractFieldDisplayer;",
                "-import org.silverpeas.util.CollectionUtil;",
                "-",
                "-import org.apache.commons.fileupload.FileItem;",
                "-",
                "-/**",
                "- * A displayer of a MyField object dedicated to tests.",
                "- */",
                "-public class MyFieldDisplayer extends AbstractFieldDisplayer<Field> {",
                "-",
                "-  @Override",
                "-  public void displayScripts(PrintWriter out, FieldTemplate template, PagesContext PagesContext)",
                "-      throws IOException {",
                "-    out.append(toScript(template));",
                "-  }",
                "-",
                "-  @Override",
                "-  public void display(PrintWriter out, Field field, FieldTemplate template,",
                "-      PagesContext PagesContext) throws FormException {",
                "-    throw new UnsupportedOperationException(\"Not supported yet.\");",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<String> update(List<FileItem> items, Field field, FieldTemplate template,",
                "-      PagesContext PagesContext) throws FormException {",
                "-    return CollectionUtil.asList(template.getFieldName());",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<String> update(String value, Field field, FieldTemplate template,",
                "-      PagesContext PagesContext) throws FormException {",
                "-    throw new UnsupportedOperationException(\"Not supported yet.\");",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isDisplayedMandatory() {",
                "-    return false;",
                "-  }",
                "-",
                "-  @Override",
                "-  public int getNbHtmlObjectsDisplayed(FieldTemplate template, PagesContext pagesContext) {",
                "-    return 1;",
                "-  }",
                "-",
                "-  @Override",
                "-  public void index(FullIndexEntry indexEntry, String key, String fieldName, Field field,",
                "-      String language, boolean stored) {",
                "-    throw new UnsupportedOperationException(\"Not supported yet.\");",
                "-  }",
                "-",
                "-  public String toScript(final FieldTemplate template) {",
                "-    StringBuilder builder = new StringBuilder();",
                "-    builder.append(template.getFieldName())",
                "-        .append(\".name=\")",
                "-        .append(template.getLabel())",
                "-        .append(\";\\n\")",
                "-        .append(template.getFieldName())",
                "-        .append(\".value='';\\n\");",
                "-    return builder.toString();",
                "-  }",
                "-",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/form/MyFieldTemplate.java b/core-library/src/test-awaiting/java/com/silverpeas/form/MyFieldTemplate.java",
                "deleted file mode 100644",
                "index e43eadc4c7..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/form/MyFieldTemplate.java",
                "+++ /dev/null",
                "@@ -1,146 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.contribution.content.form;",
                "-",
                "-import org.silverpeas.core.contribution.content.form.record.GenericFieldTemplate;",
                "-import java.util.ArrayList;",
                "-import java.util.HashMap;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-import org.silverpeas.core.contribution.content.form.record.Parameter;",
                "-",
                "-/**",
                "- * A field template implementation for testing purpose.",
                "- */",
                "-public class MyFieldTemplate extends GenericFieldTemplate {",
                "-",
                "-  private static final long serialVersionUID = 1267481858616773806L;",
                "-",
                "-  private final String name;",
                "-  private final String type;",
                "-  private final String label;",
                "-",
                "-  public MyFieldTemplate(final String name, final String type, final String label) {",
                "-    this.name = name;",
                "-    this.type = type;",
                "-    this.label = label;",
                "-  }",
                "-",
                "-  @Override",
                "-  public String getFieldName() {",
                "-    return name;",
                "-  }",
                "-",
                "-  @Override",
                "-  public String getTypeName() {",
                "-    return type;",
                "-  }",
                "-",
                "-  @Override",
                "-  public String getDisplayerName() {",
                "-    return name;",
                "-  }",
                "-",
                "-  @Override",
                "-  public String getLabel() {",
                "-    return label;",
                "-  }",
                "-",
                "-  @Override",
                "-  public String getLabel(final String lang) {",
                "-    return label;",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getLanguages() {",
                "-    return new String[]{\"fr\", \"en\"};",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isMandatory() {",
                "-    return false;",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isReadOnly() {",
                "-    return false;",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isDisabled() {",
                "-    return false;",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isHidden() {",
                "-    return false;",
                "-  }",
                "-",
                "-  @Override",
                "-  public Map<String, String> getParameters(final String language) {",
                "-    return new HashMap<String, String>();",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<Parameter> getParametersObj() {",
                "-    return new ArrayList<Parameter>();",
                "-  }",
                "-",
                "-  @Override",
                "-  public Field getEmptyField() throws FormException {",
                "-    return null;",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isSearchable() {",
                "-    return false;",
                "-  }",
                "-",
                "-  @Override",
                "-  public String getTemplateName() {",
                "-    return MyFieldTemplate.class.getSimpleName();",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isUsedAsFacet() {",
                "-    return false;",
                "-  }",
                "-",
                "-  @Override",
                "-  public int getMaximumNumberOfOccurrences() {",
                "-    return 1;",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isRepeatable() {",
                "-    return false;",
                "-  }",
                "-",
                "-  @Override",
                "-  public Field getEmptyField(int occurrence) throws FormException {",
                "-    return null;",
                "-  }",
                "-",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/form/MyRecordTemplate.java b/core-library/src/test-awaiting/java/com/silverpeas/form/MyRecordTemplate.java",
                "deleted file mode 100644",
                "index b14fb90b5a..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/form/MyRecordTemplate.java",
                "+++ /dev/null",
                "@@ -1,90 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.contribution.content.form;",
                "-",
                "-import java.util.List;",
                "-",
                "-import org.silverpeas.util.CollectionUtil;",
                "-",
                "-/**",
                "- * A record template implementation for testing purpose.",
                "- */",
                "-public class MyRecordTemplate implements RecordTemplate {",
                "-",
                "-  private List<FieldTemplate> templates;",
                "-",
                "-  public MyRecordTemplate(final FieldTemplate... fieldTemplates) {",
                "-    this.templates = CollectionUtil.asList(fieldTemplates);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getFieldNames() {",
                "-    String[] names = new String[templates.size()];",
                "-    for (int i = 0; i < templates.size(); i++) {",
                "-      names[i] = templates.get(i).getFieldName();",
                "-    }",
                "-    return names;",
                "-  }",
                "-",
                "-  @Override",
                "-  public FieldTemplate[] getFieldTemplates() throws FormException {",
                "-    return templates.toArray(new FieldTemplate[templates.size()]);",
                "-  }",
                "-",
                "-  @Override",
                "-  public FieldTemplate getFieldTemplate(final String fieldName) throws FormException {",
                "-    FieldTemplate template = null;",
                "-    for (FieldTemplate fieldTemplate : templates) {",
                "-      if (fieldTemplate.getFieldName().equals(fieldName)) {",
                "-        template = fieldTemplate;",
                "-        break;",
                "-      }",
                "-    }",
                "-    return template;",
                "-  }",
                "-",
                "-  @Override",
                "-  public int getFieldIndex(final String fieldName) throws FormException {",
                "-    int index = -1;",
                "-    for (int i = 0; i < templates.size(); i++) {",
                "-      FieldTemplate fieldTemplate = templates.get(i);",
                "-      if (fieldTemplate.getFieldName().equals(fieldName)) {",
                "-        index = i;",
                "-        break;",
                "-      }",
                "-    }",
                "-    return index;",
                "-  }",
                "-",
                "-  @Override",
                "-  public DataRecord getEmptyRecord() throws FormException {",
                "-    return null;",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean checkDataRecord(DataRecord record) {",
                "-    throw new UnsupportedOperationException(\"Not supported yet.\");",
                "-  }",
                "-",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/form/displayers/JdbcFieldDisplayerTest.java b/core-library/src/test-awaiting/java/com/silverpeas/form/displayers/JdbcFieldDisplayerTest.java",
                "deleted file mode 100644",
                "index 8c3219acaa..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/form/displayers/JdbcFieldDisplayerTest.java",
                "+++ /dev/null",
                "@@ -1,252 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.contribution.content.form.displayers;",
                "-",
                "-import java.io.ByteArrayOutputStream;",
                "-import java.io.OutputStreamWriter;",
                "-import java.io.PrintWriter;",
                "-import java.util.ArrayList;",
                "-import java.util.HashMap;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-import org.silverpeas.util.Charsets;",
                "-",
                "-import org.silverpeas.core.contribution.content.form.FieldTemplate;",
                "-import org.silverpeas.core.contribution.content.form.PagesContext;",
                "-import org.silverpeas.core.contribution.content.form.fieldType.JdbcField;",
                "-import com.silverpeas.jcrutil.RandomGenerator;",
                "-",
                "-import org.junit.Test;",
                "-",
                "-import static org.hamcrest.Matchers.is;",
                "-import static org.hamcrest.Matchers.notNullValue;",
                "-import static org.junit.Assert.assertThat;",
                "-import static org.mockito.Mockito.*;",
                "-",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-public class JdbcFieldDisplayerTest {",
                "-",
                "-  String lineSeparator = System.getProperty(\"line.separator\");",
                "-  String unixLineSeparator = \"\\n\";",
                "-",
                "-  public JdbcFieldDisplayerTest() {",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getManagedTypes method, of class JdbcFieldDisplayer.",
                "-   */",
                "-  @Test",
                "-  public void testGetManagedTypes() {",
                "-    JdbcFieldDisplayer instance = new JdbcFieldDisplayer();",
                "-    String[] result = instance.getManagedTypes();",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result, org.hamcrest.collection.IsArrayWithSize.arrayWithSize(1));",
                "-    assertThat(result, org.hamcrest.collection.IsArrayContaining.hasItemInArray(JdbcField.TYPE));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of displayScripts method, of class JdbcFieldDisplayer.",
                "-   */",
                "-  @Test",
                "-  public void testDisplayScripts() throws Exception {",
                "-    ByteArrayOutputStream out = new ByteArrayOutputStream(1024);",
                "-    PrintWriter printer = new PrintWriter(new OutputStreamWriter(out, Charsets.UTF_8), true);",
                "-    FieldTemplate template = mock(FieldTemplate.class);",
                "-    when(template.getTypeName()).thenReturn(JdbcField.TYPE);",
                "-    when(template.isMandatory()).thenReturn(true);",
                "-    when(template.getLabel(\"fr\")).thenReturn(\"Mon champs JDBC\");",
                "-    when(template.getFieldName()).thenReturn(\"monChamps\");",
                "-    PagesContext pagesContext = new PagesContext();",
                "-    pagesContext.setUseMandatory(true);",
                "-    pagesContext.setCurrentFieldIndex(\"10\");",
                "-    pagesContext.setLastFieldIndex(20);",
                "-    pagesContext.setLanguage(\"fr\");",
                "-    pagesContext.setEncoding(\"UTF-8\");",
                "-    pagesContext.setUserId(\"0\");",
                "-    JdbcFieldDisplayer instance = new JdbcFieldDisplayer();",
                "-    instance.displayScripts(printer, template, pagesContext);",
                "-    assertThat(new String(out.toByteArray(), Charsets.UTF_8).trim(), is(",
                "-        \"if (isWhitespace(stripInitialWhitespace(field.value))) {\" + lineSeparator",
                "-        + \"\\t\\terrorMsg+=\\\"  - 'Mon champs JDBC' doit \u00c3\u00aatre renseign\u00c3\u00a9\\\\n\\\";\" + lineSeparator",
                "-        + \"\\t\\terrorNb++;\" + lineSeparator + \"\\t}\" + lineSeparator + \" try { \" + lineSeparator",
                "-        + \"if (typeof(checkmonChamps) == 'function')\" + lineSeparator + \" \tcheckmonChamps('fr');\"",
                "-        + lineSeparator + \" } catch (e) { \" + lineSeparator + \" \t//catch all exceptions\"",
                "-        + lineSeparator + \" }\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of display method, of class JdbcFieldDisplayer.",
                "-   */",
                "-  @Test",
                "-  public void testDisplay() throws Exception {",
                "-    ByteArrayOutputStream out = new ByteArrayOutputStream(1024);",
                "-    PrintWriter printer = new PrintWriter(new OutputStreamWriter(out, Charsets.UTF_8), true);",
                "-    FieldTemplate template = mock(FieldTemplate.class);",
                "-    when(template.getTypeName()).thenReturn(JdbcField.TYPE);",
                "-    when(template.isMandatory()).thenReturn(true);",
                "-    when(template.getLabel(\"fr\")).thenReturn(\"Mon champs JDBC\");",
                "-    when(template.getFieldName()).thenReturn(\"monChamps\");",
                "-    PagesContext pagesContext = new PagesContext();",
                "-    pagesContext.setUseMandatory(true);",
                "-    pagesContext.setCurrentFieldIndex(\"10\");",
                "-    pagesContext.setLastFieldIndex(20);",
                "-    pagesContext.setLanguage(\"fr\");",
                "-    pagesContext.setEncoding(\"UTF-8\");",
                "-    pagesContext.setUserId(\"0\");",
                "-    JdbcField field = mock(JdbcField.class);",
                "-    when(field.getTypeName()).thenReturn(JdbcField.TYPE);",
                "-    int size = 5;",
                "-    List<String> resList = new ArrayList<String>(size);",
                "-    for (int i = 0; i < size; i++) {",
                "-      resList.add(String.valueOf(i));",
                "-    }",
                "-    when(field.selectSql(null, null, \"0\")).thenReturn(resList);",
                "-    JdbcFieldDisplayer instance = new JdbcFieldDisplayer();",
                "-    instance.display(printer, field, template, pagesContext);",
                "-    String display = new String(out.toByteArray(), Charsets.UTF_8).trim();",
                "-    assertThat(display, is(notNullValue()));",
                "-    assertThat(display.length(), is(1381));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of display method, of class JdbcFieldDisplayer.",
                "-   */",
                "-  @Test",
                "-  public void testDisplayListBox() throws Exception {",
                "-    ByteArrayOutputStream out = new ByteArrayOutputStream(1024);",
                "-    PrintWriter printer = new PrintWriter(new OutputStreamWriter(out, Charsets.UTF_8), true);",
                "-    FieldTemplate template = mock(FieldTemplate.class);",
                "-    when(template.getTypeName()).thenReturn(JdbcField.TYPE);",
                "-    when(template.isMandatory()).thenReturn(true);",
                "-    when(template.getLabel(\"fr\")).thenReturn(\"Mon champs JDBC\");",
                "-    when(template.getFieldName()).thenReturn(\"monChamps\");",
                "-    Map<String, String> parameters = new HashMap<String, String>(0);",
                "-    parameters.put(\"displayer\", \"listbox\");",
                "-    when(template.getParameters(\"fr\")).thenReturn(parameters);",
                "-    PagesContext pagesContext = new PagesContext();",
                "-    pagesContext.setUseMandatory(true);",
                "-    pagesContext.setCurrentFieldIndex(\"10\");",
                "-    pagesContext.setLastFieldIndex(20);",
                "-    pagesContext.setLanguage(\"fr\");",
                "-    pagesContext.setEncoding(\"UTF-8\");",
                "-    pagesContext.setUserId(\"0\");",
                "-    JdbcField field = mock(JdbcField.class);",
                "-    when(field.getTypeName()).thenReturn(JdbcField.TYPE);",
                "-    int size = 5;",
                "-    List<String> resList = new ArrayList<String>(size);",
                "-    for (int i = 0; i < size; i++) {",
                "-      resList.add(String.valueOf(i));",
                "-    }",
                "-    when(field.selectSql(null, null, \"0\")).thenReturn(resList);",
                "-    JdbcFieldDisplayer instance = new JdbcFieldDisplayer();",
                "-    instance.display(printer, field, template, pagesContext);",
                "-    String display = new String(out.toByteArray(), Charsets.UTF_8).trim();",
                "-    assertThat(display, is(notNullValue()));",
                "-    assertThat(display.length(), is(323));",
                "-",
                "-    assertThat(display, is(",
                "-        \"<select name=\\\"monChamps\\\" id=\\\"monChamps\\\" >\" + unixLineSeparator",
                "-        + \"<option value=\\\"\\\"></option><option value=\\\"0\\\">0</option>\" + unixLineSeparator",
                "-        + \"<option value=\\\"1\\\">1</option>\" + unixLineSeparator + \"<option value=\\\"2\\\">2</option>\"",
                "-        + unixLineSeparator + \"<option value=\\\"3\\\">3</option>\" + unixLineSeparator",
                "-        + \"<option value=\\\"4\\\">4</option>\" + unixLineSeparator",
                "-        + \"</select>\" + unixLineSeparator",
                "-        + \"&nbsp;<img src=\\\"/silverpeas//util/icons/mandatoryField.gif\\\" \"",
                "-        + \"width=\\\"5\\\" height=\\\"5\\\" alt=\\\"Obligatoire\\\"/>\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of update method, of class JdbcFieldDisplayer.",
                "-   */",
                "-  @Test",
                "-  public void testUpdate() throws Exception {",
                "-    String newValue = \"newValue\";",
                "-    PagesContext pagesContext = new PagesContext();",
                "-    pagesContext.setUseMandatory(true);",
                "-    pagesContext.setCurrentFieldIndex(\"10\");",
                "-    pagesContext.setLastFieldIndex(20);",
                "-    pagesContext.setLanguage(\"fr\");",
                "-    pagesContext.setEncoding(\"UTF-8\");",
                "-    pagesContext.setUserId(\"0\");",
                "-    JdbcField field = mock(JdbcField.class);",
                "-    when(field.getTypeName()).thenReturn(JdbcField.TYPE);",
                "-    when(field.isReadOnly()).thenReturn(false);",
                "-    when(field.acceptValue(\"newValue\", \"fr\")).thenReturn(true);",
                "-    JdbcFieldDisplayer instance = new JdbcFieldDisplayer();",
                "-    instance.update(newValue, field, null, pagesContext);",
                "-    verify(field).setValue(\"newValue\", \"fr\");",
                "-  }",
                "-",
                "-  @Test(expected = org.silverpeas.core.contribution.content.form.FormException.class)",
                "-  public void testUpdateIncorrectField() throws Exception {",
                "-    String newValue = \"\";",
                "-    JdbcField field = mock(JdbcField.class);",
                "-    when(field.getTypeName()).thenReturn(RandomGenerator.getRandomString());",
                "-    JdbcFieldDisplayer instance = new JdbcFieldDisplayer();",
                "-    instance.update(newValue, field, null, null);",
                "-  }",
                "-",
                "-  @Test(expected = org.silverpeas.core.contribution.content.form.FormException.class)",
                "-  public void testUpdateIncorrectValue() throws Exception {",
                "-    String newValue = \"\";",
                "-    PagesContext pagesContext = new PagesContext();",
                "-    pagesContext.setUseMandatory(true);",
                "-    pagesContext.setCurrentFieldIndex(\"10\");",
                "-    pagesContext.setLastFieldIndex(20);",
                "-    pagesContext.setLanguage(\"fr\");",
                "-    pagesContext.setEncoding(\"UTF-8\");",
                "-    pagesContext.setUserId(\"0\");",
                "-    JdbcField field = mock(JdbcField.class);",
                "-    when(field.getTypeName()).thenReturn(JdbcField.TYPE);",
                "-    when(field.isReadOnly()).thenReturn(true);",
                "-    JdbcFieldDisplayer instance = new JdbcFieldDisplayer();",
                "-    instance.update(newValue, field, null, pagesContext);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of isDisplayedMandatory method, of class JdbcFieldDisplayer.",
                "-   */",
                "-  @Test",
                "-  public void testIsDisplayedMandatory() {",
                "-    JdbcFieldDisplayer instance = new JdbcFieldDisplayer();",
                "-    assertThat(instance.isDisplayedMandatory(), is(true));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getNbHtmlObjectsDisplayed method, of class JdbcFieldDisplayer.",
                "-   */",
                "-  @Test",
                "-  public void testGetNbHtmlObjectsDisplayed() {",
                "-    FieldTemplate template = null;",
                "-    PagesContext pagesContext = null;",
                "-    JdbcFieldDisplayer instance = new JdbcFieldDisplayer();",
                "-    int expResult = 1;",
                "-    int result = instance.getNbHtmlObjectsDisplayed(template, pagesContext);",
                "-    assertThat(result, is(expResult));",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/form/displayers/VideoFieldDisplayerTest.java b/core-library/src/test-awaiting/java/com/silverpeas/form/displayers/VideoFieldDisplayerTest.java",
                "deleted file mode 100644",
                "index e9f3c7b0b3..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/form/displayers/VideoFieldDisplayerTest.java",
                "+++ /dev/null",
                "@@ -1,135 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.contribution.content.form.displayers;",
                "-",
                "-import org.silverpeas.core.contribution.content.form.FormException;",
                "-import java.util.Arrays;",
                "-import org.silverpeas.core.contribution.content.form.FieldTemplate;",
                "-import org.silverpeas.core.contribution.content.form.PagesContext;",
                "-import org.silverpeas.core.contribution.content.form.fieldType.FileField;",
                "-import org.silverpeas.core.contribution.content.form.record.GenericFieldTemplate;",
                "-import java.util.List;",
                "-import org.junit.After;",
                "-import org.junit.AfterClass;",
                "-import org.junit.Before;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Test;",
                "-import static org.mockito.Mockito.*;",
                "-import static org.junit.Assert.*;",
                "-",
                "-/**",
                "- *",
                "- * @author mmoquillon",
                "- */",
                "-public class VideoFieldDisplayerTest {",
                "-",
                "-  public VideoFieldDisplayerTest() {",
                "-  }",
                "-",
                "-  @BeforeClass",
                "-  public static void setUpClass() throws Exception {",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void tearDownClass() throws Exception {",
                "-  }",
                "-",
                "-  @Before",
                "-  public void setUp() {",
                "-  }",
                "-",
                "-  @After",
                "-  public void tearDown() {",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getManagedTypes method, of class VideoFieldDisplayer.",
                "-   */",
                "-  @Test",
                "-  public void testGetManagedTypes() {",
                "-    VideoFieldDisplayer instance = new VideoFieldDisplayer();",
                "-    String[] expResult = {FileField.TYPE};",
                "-    String[] result = instance.getManagedTypes();",
                "-    assertArrayEquals(expResult, result);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of update method, of class VideoFieldDisplayer.",
                "-   *",
                "-   * @throws java.lang.Exception",
                "-   */",
                "-  @Test",
                "-  public void testUpdateAttachment() throws Exception {",
                "-    String attachmentId = \"toto.flv\";",
                "-    FileField field = new FileField();",
                "-    FieldTemplate template = new GenericFieldTemplate(\"video\", FileField.class);",
                "-    PagesContext PagesContext = mock(PagesContext.class);",
                "-    VideoFieldDisplayer instance = new VideoFieldDisplayer();",
                "-    List<String> expResult = Arrays.asList(\"toto.flv\");",
                "-    List<String> result = instance.update(attachmentId, field, template, PagesContext);",
                "-    assertEquals(expResult, result);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of update method, of class VideoFieldDisplayer.",
                "-   *",
                "-   * @throws java.lang.Exception",
                "-   */",
                "-  @Test",
                "-  public void testUpdateEmptyAttachment() throws Exception {",
                "-    String attachmentId = \"\";",
                "-    FileField field = new FileField();",
                "-    FieldTemplate template = new GenericFieldTemplate(\"video\", FileField.class);",
                "-    PagesContext PagesContext = mock(PagesContext.class);",
                "-    VideoFieldDisplayer instance = new VideoFieldDisplayer();",
                "-    List<String> result = instance.update(attachmentId, field, template, PagesContext);",
                "-    assertTrue(result.isEmpty());",
                "-    assertTrue((field.isNull()));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of isDisplayedMandatory method, of class VideoFieldDisplayer.",
                "-   */",
                "-  @Test",
                "-  public void testIsDisplayedMandatory() {",
                "-    VideoFieldDisplayer instance = new VideoFieldDisplayer();",
                "-    boolean result = instance.isDisplayedMandatory();",
                "-    assertTrue(result);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getNbHtmlObjectsDisplayed method, of class VideoFieldDisplayer.",
                "-   *",
                "-   * @throws org.silverpeas.core.contribution.content.form.FormException",
                "-   */",
                "-  @Test",
                "-  public void testGetNbHtmlObjectsDisplayed() throws FormException {",
                "-    FieldTemplate template = new GenericFieldTemplate(\"video\", FileField.class);",
                "-    PagesContext pagesContext = mock(PagesContext.class);",
                "-    VideoFieldDisplayer instance = new VideoFieldDisplayer();",
                "-    int expResult = 2;",
                "-    int result = instance.getNbHtmlObjectsDisplayed(template, pagesContext);",
                "-    assertEquals(expResult, result);",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/form/form/XmlFormTest.java b/core-library/src/test-awaiting/java/com/silverpeas/form/form/XmlFormTest.java",
                "deleted file mode 100644",
                "index 48b4c0bbd5..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/form/form/XmlFormTest.java",
                "+++ /dev/null",
                "@@ -1,108 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.contribution.content.form.form;",
                "-",
                "-import org.silverpeas.core.contribution.content.form.DataRecord;",
                "-import org.silverpeas.core.contribution.content.form.PagesContext;",
                "-import com.silverpeas.jndi.SimpleMemoryContextFactory;",
                "-import com.silverpeas.publicationTemplate.PublicationTemplate;",
                "-import com.silverpeas.publicationTemplate.PublicationTemplateManager;",
                "-import org.silverpeas.util.DBUtil;",
                "-import org.junit.AfterClass;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Test;",
                "-import org.junit.runner.RunWith;",
                "-import org.junit.runners.BlockJUnit4ClassRunner;",
                "-import org.springframework.mock.web.MockJspWriter;",
                "-",
                "-import javax.naming.InitialContext;",
                "-import javax.servlet.jsp.JspWriter;",
                "-import javax.sql.DataSource;",
                "-import java.io.StringWriter;",
                "-import java.sql.Connection;",
                "-import java.sql.PreparedStatement;",
                "-import java.sql.ResultSet;",
                "-",
                "-import static org.silverpeas.util.PathTestUtil.SEPARATOR;",
                "-import static org.silverpeas.util.PathTestUtil.TARGET_DIR;",
                "-import static org.mockito.Mockito.*;",
                "-",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-@RunWith(BlockJUnit4ClassRunner.class)",
                "-public class XmlFormTest {",
                "-",
                "-  private static PublicationTemplate template;",
                "-",
                "-  public XmlFormTest() {",
                "-  }",
                "-",
                "-  @BeforeClass",
                "-  public static void setUpClass() throws Exception {",
                "-    SimpleMemoryContextFactory.setUpAsInitialContext();",
                "-    DataSource ds = mock(DataSource.class);",
                "-    Connection connection = mock(Connection.class);",
                "-    PreparedStatement pstmt = mock(PreparedStatement.class);",
                "-    ResultSet rs = mock(ResultSet.class);",
                "-    when(ds.getConnection()).thenReturn(connection);",
                "-    when(connection.prepareStatement(anyString())).thenReturn(pstmt);",
                "-    when(pstmt.executeQuery()).thenReturn(rs);",
                "-    when(rs.next()).thenReturn(Boolean.FALSE);",
                "-    /*InitialContext context = new InitialContext();",
                "-    context.bind(JNDINames.FORMTEMPLATE_DATASOURCE, ds);*/",
                "-    PublicationTemplateManager.templateDir = TARGET_DIR + SEPARATOR + \"test-classes\"",
                "-        + SEPARATOR + \"templateRepository\";",
                "-    template = PublicationTemplateManager.getInstance().loadPublicationTemplate(\"MyForm.xml\");",
                "-    DBUtil.clearTestInstance();",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void tearDownClass() throws Exception {",
                "-    SimpleMemoryContextFactory.tearDownAsInitialContext();",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of toString method, of class XmlForm.",
                "-   */",
                "-  @Test",
                "-  public void testToString() {",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of display method, of class XmlForm.",
                "-   *",
                "-   * @throws java.lang.Exception",
                "-   */",
                "-  @Test",
                "-  public void testDisplay() throws Exception {",
                "-    XmlForm form = new XmlForm(template.getRecordTemplate());",
                "-    DataRecord data = template.getRecordSet().getEmptyRecord();",
                "-    PagesContext pagesContext = new PagesContext();",
                "-    StringWriter out = new StringWriter();",
                "-    JspWriter jw = new MockJspWriter(out);",
                "-    form.display(jw, pagesContext, data);",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/jcrutil/TestBasicDaoFactory.java b/core-library/src/test-awaiting/java/com/silverpeas/jcrutil/TestBasicDaoFactory.java",
                "deleted file mode 100644",
                "index 80d8a35836..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/jcrutil/TestBasicDaoFactory.java",
                "+++ /dev/null",
                "@@ -1,391 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.jcrutil;",
                "-",
                "-import java.io.InputStream;",
                "-import java.io.InputStreamReader;",
                "-import java.io.Reader;",
                "-import java.sql.SQLException;",
                "-import java.util.Calendar;",
                "-",
                "-import javax.jcr.Node;",
                "-import javax.jcr.PathNotFoundException;",
                "-import javax.jcr.Property;",
                "-import javax.jcr.Session;",
                "-import javax.jcr.Value;",
                "-import javax.naming.InitialContext;",
                "-",
                "-import org.silverpeas.core.persistence.jcr.util.JcrConstants;",
                "-import org.silverpeas.util.Charsets;",
                "-import com.silverpeas.jcrutil.model.SilverpeasRegister;",
                "-import com.silverpeas.jcrutil.security.impl.SilverpeasSystemCredentials;",
                "-import com.silverpeas.jndi.SimpleMemoryContextFactory;",
                "-",
                "-import org.apache.commons.dbcp.BasicDataSource;",
                "-import org.apache.commons.io.IOUtils;",
                "-import org.apache.jackrabbit.api.JackrabbitRepository;",
                "-import org.apache.jackrabbit.value.ValueFactoryImpl;",
                "-import org.dbunit.database.DatabaseConnection;",
                "-import org.dbunit.database.IDatabaseConnection;",
                "-import org.dbunit.dataset.IDataSet;",
                "-import org.dbunit.dataset.ReplacementDataSet;",
                "-import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;",
                "-import org.dbunit.operation.DatabaseOperation;",
                "-import org.junit.After;",
                "-import org.junit.AfterClass;",
                "-import org.junit.Before;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Test;",
                "-import org.springframework.context.support.ClassPathXmlApplicationContext;",
                "-",
                "-import static org.junit.Assert.*;",
                "-",
                "-public class TestBasicDaoFactory {",
                "-",
                "-  private static ClassPathXmlApplicationContext context;",
                "-  private static JackrabbitRepository repository;",
                "-  private static BasicDataSource datasource;",
                "-",
                "-  @BeforeClass",
                "-  public static void loadSpringContext() throws Exception {",
                "-    SimpleMemoryContextFactory.setUpAsInitialContext();",
                "-    context = new ClassPathXmlApplicationContext(\"/spring-in-memory-jcr.xml\");",
                "-    repository = context.getBean(\"repository\", JackrabbitRepository.class);",
                "-    BasicDaoFactory.getInstance().setApplicationContext(context);",
                "-    Reader reader = new InputStreamReader(TestBasicDaoFactory.class.getClassLoader().",
                "-        getResourceAsStream(\"silverpeas-jcr.txt\"), Charsets.UTF_8);",
                "-    try {",
                "-      SilverpeasRegister.registerNodeTypes(reader);",
                "-    } finally {",
                "-      IOUtils.closeQuietly(reader);",
                "-    }",
                "-    datasource = context.getBean(\"dataSource\", BasicDataSource.class);",
                "-    /*InitialContext ic = new InitialContext();",
                "-    ic.rebind(JNDINames.DATABASE_DATASOURCE, datasource);",
                "-    ic.rebind(JNDINames.ADMIN_DATASOURCE, datasource);*/",
                "-    System.out.println(\" -> node types registered\");",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void tearAlldown() throws Exception {",
                "-    repository.shutdown();",
                "-    datasource.close();",
                "-    context.close();",
                "-    SimpleMemoryContextFactory.tearDownAsInitialContext();",
                "-  }",
                "-",
                "-  public TestBasicDaoFactory() {",
                "-  }",
                "-",
                "-  protected IDataSet getDataSet() throws Exception {",
                "-    InputStream in = TestBasicDaoFactory.class.getResourceAsStream(\"test-jcrutil-dataset.xml\");",
                "-    try {",
                "-      ReplacementDataSet dataSet = new ReplacementDataSet(new FlatXmlDataSetBuilder().build(in));",
                "-      dataSet.addReplacementObject(\"[NULL]\", null);",
                "-      return dataSet;",
                "-    } finally {",
                "-      IOUtils.closeQuietly(in);",
                "-    }",
                "-  }",
                "-",
                "-  @Before",
                "-  public void setUpDatabase() throws Exception {",
                "-    IDatabaseConnection connection = null;",
                "-    try {",
                "-      connection = new DatabaseConnection(datasource.getConnection());",
                "-      DatabaseOperation.CLEAN_INSERT.execute(connection, getDataSet());",
                "-    } catch (Exception ex) {",
                "-      throw ex;",
                "-    } finally {",
                "-      if (connection != null) {",
                "-        try {",
                "-          connection.getConnection().close();",
                "-        } catch (SQLException e) {",
                "-          throw e;",
                "-        }",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  @After",
                "-  public void tearDownDatabase() throws Exception {",
                "-    clearRepository();",
                "-    IDatabaseConnection connection = null;",
                "-    try {",
                "-      connection = new DatabaseConnection(datasource.getConnection());",
                "-      DatabaseOperation.DELETE_ALL.execute(connection, getDataSet());",
                "-    } catch (Exception ex) {",
                "-      throw ex;",
                "-    } finally {",
                "-      if (connection != null) {",
                "-        try {",
                "-          connection.getConnection().close();",
                "-        } catch (SQLException e) {",
                "-          throw e;",
                "-        }",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  protected void clearRepository() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = repository.login(new SilverpeasSystemCredentials());",
                "-      session.getRootNode().getNode(\"kmelia36\").remove();",
                "-      session.save();",
                "-    } catch (PathNotFoundException pex) {",
                "-    } finally {",
                "-      if (session != null) {",
                "-        session.logout();",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetComponentId() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node componentNode = session.getRootNode().addNode(\"kmelia36\", JcrConstants.NT_FOLDER);",
                "-      String firstNodeName = RandomGenerator.getRandomString();",
                "-      Node firstNode = componentNode.addNode(firstNodeName, JcrConstants.NT_FOLDER);",
                "-      assertNotNull(firstNode);",
                "-      assertEquals(\"kmelia36\", BasicDaoFactory.getComponentId(firstNode));",
                "-      String secondNodeName = RandomGenerator.getRandomString();",
                "-      Node secondNode = firstNode.addNode(secondNodeName, JcrConstants.NT_FOLDER);",
                "-      assertNotNull(secondNode);",
                "-      assertEquals(\"kmelia36\", BasicDaoFactory.getComponentId(secondNode));",
                "-      String thirdNodeName = RandomGenerator.getRandomString();",
                "-      Node thirdNode = firstNode.addNode(thirdNodeName, JcrConstants.NT_FOLDER);",
                "-      assertNotNull(thirdNode);",
                "-      assertEquals(\"kmelia36\", BasicDaoFactory.getComponentId(thirdNode));",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testAddStringProperty() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node componentNode = session.getRootNode().addNode(\"kmelia36\", JcrConstants.NT_FOLDER);",
                "-      String nodeName = RandomGenerator.getRandomString();",
                "-      Node node = componentNode.addNode(nodeName, JcrConstants.SLV_I18N_NODE);",
                "-      String property = RandomGenerator.getRandomString();",
                "-      BasicDaoFactory.addStringProperty(node, JcrConstants.SLV_PROPERTY_NAME, property);",
                "-      assertTrue(node.hasProperty(JcrConstants.SLV_PROPERTY_NAME));",
                "-      assertEquals(property, node.getProperty(JcrConstants.SLV_PROPERTY_NAME).getString());",
                "-      String description = RandomGenerator.getRandomString();",
                "-      BasicDaoFactory.addStringProperty(node, JcrConstants.SLV_PROPERTY_DESCRIPTION, description);",
                "-      assertTrue(node.hasProperty(JcrConstants.SLV_PROPERTY_DESCRIPTION));",
                "-      assertEquals(description,",
                "-          node.getProperty(JcrConstants.SLV_PROPERTY_DESCRIPTION).getString());",
                "-      BasicDaoFactory.addStringProperty(node, JcrConstants.SLV_PROPERTY_DESCRIPTION, null);",
                "-      assertFalse(node.hasProperty(JcrConstants.SLV_PROPERTY_DESCRIPTION));",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testAddDateProperty() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node componentNode = session.getRootNode().addNode(\"kmelia36\", JcrConstants.NT_FOLDER);",
                "-      String nodeName = RandomGenerator.getRandomString();",
                "-      Node node = componentNode.addNode(nodeName, JcrConstants.SLV_LINK);",
                "-      Calendar calend = RandomGenerator.getRandomCalendar();",
                "-      BasicDaoFactory",
                "-          .addDateProperty(node, JcrConstants.SLV_PROPERTY_CREATION_DATE, calend.getTime());",
                "-      assertTrue(node.hasProperty(JcrConstants.SLV_PROPERTY_CREATION_DATE));",
                "-      assertEquals(calend.getTime(),",
                "-          node.getProperty(JcrConstants.SLV_PROPERTY_CREATION_DATE).getDate().getTime());",
                "-      BasicDaoFactory.addDateProperty(node, JcrConstants.SLV_PROPERTY_CREATION_DATE, null);",
                "-      assertFalse(node.hasProperty(JcrConstants.SLV_PROPERTY_CREATION_DATE));",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testAddCalendarProperty() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node componentNode = session.getRootNode().addNode(\"kmelia36\", JcrConstants.NT_FOLDER);",
                "-      String nodeName = RandomGenerator.getRandomString();",
                "-      Node node = componentNode.addNode(nodeName, JcrConstants.SLV_LINK);",
                "-      Calendar calend = RandomGenerator.getRandomCalendar();",
                "-      BasicDaoFactory.addCalendarProperty(node, JcrConstants.SLV_PROPERTY_CREATION_DATE, calend);",
                "-      assertTrue(node.hasProperty(JcrConstants.SLV_PROPERTY_CREATION_DATE));",
                "-      assertEquals(calend.getTimeInMillis(),",
                "-          node.getProperty(JcrConstants.SLV_PROPERTY_CREATION_DATE).getDate().getTimeInMillis());",
                "-      BasicDaoFactory.addDateProperty(node, JcrConstants.SLV_PROPERTY_CREATION_DATE, null);",
                "-      assertFalse(node.hasProperty(JcrConstants.SLV_PROPERTY_CREATION_DATE));",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetStringProperty() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node componentNode = session.getRootNode().addNode(\"kmelia36\",",
                "-          JcrConstants.NT_FOLDER);",
                "-      String nodeName = RandomGenerator.getRandomString();",
                "-      Node node = componentNode.addNode(nodeName, JcrConstants.SLV_I18N_NODE);",
                "-      String name = RandomGenerator.getRandomString();",
                "-      node.setProperty(JcrConstants.SLV_PROPERTY_NAME, name);",
                "-      assertEquals(name, BasicDaoFactory.getStringProperty(node,",
                "-          JcrConstants.SLV_PROPERTY_NAME));",
                "-      assertNull(BasicDaoFactory.getStringProperty(node,",
                "-          JcrConstants.SLV_PROPERTY_DESCRIPTION));",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetCalendarProperty() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node componentNode = session.getRootNode().addNode(\"kmelia36\", JcrConstants.NT_FOLDER);",
                "-      String nodeName = RandomGenerator.getRandomString();",
                "-      Node node = componentNode.addNode(nodeName, JcrConstants.SLV_LINK);",
                "-      Calendar calend = RandomGenerator.getRandomCalendar();",
                "-      Property dateProperty = node.setProperty(JcrConstants.SLV_PROPERTY_CREATION_DATE, calend);",
                "-      assertEquals(calend.getTimeInMillis(),",
                "-          BasicDaoFactory.getCalendarProperty(node, JcrConstants.SLV_PROPERTY_CREATION_DATE)",
                "-          .getTimeInMillis());",
                "-      dateProperty.remove();",
                "-      assertNull(",
                "-          BasicDaoFactory.getCalendarProperty(node, JcrConstants.SLV_PROPERTY_CREATION_DATE));",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetDateProperty() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node componentNode = session.getRootNode().addNode(\"kmelia36\", JcrConstants.NT_FOLDER);",
                "-      String nodeName = RandomGenerator.getRandomString();",
                "-      Node node = componentNode.addNode(nodeName, JcrConstants.SLV_LINK);",
                "-      Calendar calend = RandomGenerator.getRandomCalendar();",
                "-      Property dateProperty = node.setProperty(JcrConstants.SLV_PROPERTY_CREATION_DATE, calend);",
                "-      assertEquals(calend.getTime(), BasicDaoFactory.getDateProperty(node,",
                "-          JcrConstants.SLV_PROPERTY_CREATION_DATE));",
                "-      dateProperty.remove();",
                "-      assertNull(BasicDaoFactory.getDateProperty(node, JcrConstants.SLV_PROPERTY_CREATION_DATE));",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetIntProperty() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node componentNode = session.getRootNode().addNode(\"kmelia36\", JcrConstants.NT_FOLDER);",
                "-      String nodeName = RandomGenerator.getRandomString();",
                "-      Node node = componentNode.addNode(nodeName, JcrConstants.SLV_LINK);",
                "-      int id = RandomGenerator.getRandomYear();",
                "-      Property property = node.setProperty(JcrConstants.SLV_PROPERTY_AUTHOR, id);",
                "-      assertEquals(id, BasicDaoFactory.getIntProperty(node, JcrConstants.SLV_PROPERTY_AUTHOR));",
                "-      property.remove();",
                "-      assertEquals(0, BasicDaoFactory.getIntProperty(node, JcrConstants.SLV_PROPERTY_AUTHOR));",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetLongProperty() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node componentNode = session.getRootNode().addNode(\"kmelia36\", JcrConstants.NT_FOLDER);",
                "-      String nodeName = RandomGenerator.getRandomString();",
                "-      Node node = componentNode.addNode(nodeName, JcrConstants.SLV_LINK);",
                "-      long id = RandomGenerator.getRandomYear();",
                "-      Property property = node.setProperty(JcrConstants.SLV_PROPERTY_AUTHOR, id);",
                "-      assertEquals(id, BasicDaoFactory.getLongProperty(node, JcrConstants.SLV_PROPERTY_AUTHOR));",
                "-      property.remove();",
                "-      assertEquals(0l, BasicDaoFactory.getLongProperty(node, JcrConstants.SLV_PROPERTY_AUTHOR));",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testRemoveReference() throws Exception {",
                "-    String uuid1 = RandomGenerator.getRandomString();",
                "-    String uuid2 = RandomGenerator.getRandomString();",
                "-    String uuid3 = RandomGenerator.getRandomString();",
                "-    String uuid4 = RandomGenerator.getRandomString();",
                "-    Value[] references = new Value[]{",
                "-      ValueFactoryImpl.getInstance().createValue(uuid1),",
                "-      ValueFactoryImpl.getInstance().createValue(uuid2),",
                "-      ValueFactoryImpl.getInstance().createValue(uuid3),",
                "-      ValueFactoryImpl.getInstance().createValue(uuid4)};",
                "-    Value[] result = BasicDaoFactory.removeReference(references, uuid3);",
                "-    assertNotNull(result);",
                "-    assertEquals(3, result.length);",
                "-    assertEquals(uuid1, result[0].getString());",
                "-    assertEquals(uuid2, result[1].getString());",
                "-    assertEquals(uuid4, result[2].getString());",
                "-    result = BasicDaoFactory.removeReference(references, uuid1);",
                "-    assertNotNull(result);",
                "-    assertEquals(3, result.length);",
                "-    assertEquals(uuid2, result[0].getString());",
                "-    assertEquals(uuid3, result[1].getString());",
                "-    assertEquals(uuid4, result[2].getString());",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testComputeUniqueName() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node componentNode = session.getRootNode().addNode(\"kmelia36\", JcrConstants.NT_FOLDER);",
                "-      String firstNodeName = BasicDaoFactory.computeUniqueName(\"\", \"SB_Node_Node\");",
                "-      Node firstNode = componentNode.addNode(firstNodeName, JcrConstants.NT_FOLDER);",
                "-      assertNotNull(firstNode);",
                "-      String secondNodeName = BasicDaoFactory.computeUniqueName(\"\", \"SB_Node_Node\");",
                "-      assertEquals((Integer.parseInt(firstNodeName) + 1) + \"\", secondNodeName);",
                "-      Node secondNode = componentNode.addNode(secondNodeName, JcrConstants.NT_FOLDER);",
                "-      assertNotNull(secondNode);",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/jcrutil/security/impl/BasicLoginModule.java b/core-library/src/test-awaiting/java/com/silverpeas/jcrutil/security/impl/BasicLoginModule.java",
                "deleted file mode 100644",
                "index aba0495b6b..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/jcrutil/security/impl/BasicLoginModule.java",
                "+++ /dev/null",
                "@@ -1,95 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.jcrutil.security.impl;",
                "-",
                "-import java.util.Map;",
                "-",
                "-import javax.security.auth.Subject;",
                "-import javax.security.auth.callback.Callback;",
                "-import javax.security.auth.callback.CallbackHandler;",
                "-import javax.security.auth.callback.UnsupportedCallbackException;",
                "-import javax.security.auth.login.LoginException;",
                "-import javax.security.auth.spi.LoginModule;",
                "-",
                "-import org.apache.jackrabbit.core.config.LoginModuleConfig;",
                "-import org.apache.jackrabbit.core.security.authentication.CredentialsCallback;",
                "-import org.apache.jackrabbit.core.security.simple.SimpleLoginModule;",
                "-",
                "-public class BasicLoginModule implements LoginModule {",
                "-",
                "-  private SimpleLoginModule module;",
                "-  private CallbackHandler callbackHandler;",
                "-  private Subject subject;",
                "-  private boolean isRoot = false;",
                "-",
                "-  @Override",
                "-  public boolean abort() throws LoginException {",
                "-    return this.module.abort();",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean commit() throws LoginException {",
                "-    if (isRoot) {",
                "-      subject.getPrincipals().add(new SilverpeasSystemPrincipal());",
                "-      return true;",
                "-    }",
                "-    return this.module.commit();",
                "-  }",
                "-",
                "-  @Override",
                "-  public void initialize(Subject subject, CallbackHandler callbackHandler,",
                "-      Map sharedState, Map options) {",
                "-    if(! options.containsKey(LoginModuleConfig.PARAM_ANONYMOUS_ID)) {",
                "-      options.put(LoginModuleConfig.PARAM_ANONYMOUS_ID, \"anonymous\");",
                "-    }",
                "-    if(! options.containsKey(LoginModuleConfig.PARAM_ADMIN_ID)) {",
                "-      options.put(LoginModuleConfig.PARAM_ADMIN_ID, SilverpeasSystemPrincipal.SYSTEM);",
                "-    }",
                "-    this.module = new SimpleLoginModule();",
                "-    this.module.initialize(subject, callbackHandler, sharedState, options);",
                "-    this.callbackHandler = callbackHandler;",
                "-    this.subject = subject;",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean login() throws LoginException {",
                "-    try {",
                "-      CredentialsCallback ccb = new CredentialsCallback();",
                "-      callbackHandler.handle(new Callback[]{ccb});",
                "-      isRoot = (ccb.getCredentials() instanceof SilverpeasSystemCredentials);",
                "-      return isRoot || this.module.login();",
                "-    } catch (java.io.IOException ioe) {",
                "-      throw new LoginException(ioe.toString());",
                "-    } catch (UnsupportedCallbackException uce) {",
                "-      throw new LoginException(uce.getCallback().toString() + \" not available\");",
                "-    }",
                "-",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean logout() throws LoginException {",
                "-    this.callbackHandler = null;",
                "-    return this.module.logout();",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/jcrutil/security/jaas/TestAccessAuthentified.java b/core-library/src/test-awaiting/java/com/silverpeas/jcrutil/security/jaas/TestAccessAuthentified.java",
                "deleted file mode 100644",
                "index 7c35191783..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/jcrutil/security/jaas/TestAccessAuthentified.java",
                "+++ /dev/null",
                "@@ -1,424 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.jcrutil.security.jaas;",
                "-",
                "-import java.io.ByteArrayInputStream;",
                "-import java.io.InputStream;",
                "-import java.io.InputStreamReader;",
                "-import java.io.Reader;",
                "-import java.sql.SQLException;",
                "-import java.util.Calendar;",
                "-",
                "-import javax.jcr.Node;",
                "-import javax.jcr.RepositoryException;",
                "-import javax.jcr.Session;",
                "-import javax.jcr.nodetype.NodeType;",
                "-import javax.naming.InitialContext;",
                "-",
                "-import org.silverpeas.util.Charsets;",
                "-",
                "-import com.silverpeas.jcrutil.BasicDaoFactory;",
                "-import org.silverpeas.core.persistence.jcr.util.JcrConstants;",
                "-import com.silverpeas.jcrutil.model.SilverpeasRegister;",
                "-import com.silverpeas.jndi.SimpleMemoryContextFactory;",
                "-import org.silverpeas.util.MimeTypes;",
                "-",
                "-import org.apache.commons.dbcp.BasicDataSource;",
                "-import org.apache.commons.io.IOUtils;",
                "-import org.apache.jackrabbit.api.JackrabbitRepository;",
                "-import org.dbunit.database.DatabaseConnection;",
                "-import org.dbunit.database.IDatabaseConnection;",
                "-import org.dbunit.dataset.IDataSet;",
                "-import org.dbunit.dataset.ReplacementDataSet;",
                "-import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;",
                "-import org.dbunit.operation.DatabaseOperation;",
                "-import org.junit.After;",
                "-import org.junit.AfterClass;",
                "-import org.junit.Before;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Ignore;",
                "-import org.junit.Test;",
                "-import org.springframework.context.support.ClassPathXmlApplicationContext;",
                "-",
                "-import static org.junit.Assert.*;",
                "-",
                "-/*",
                "- * All the tests are marked with the @Ignore annotation because it is wrongly made and it impacts",
                "- * the test running of the UsersAndGroupsTest tests class!",
                "- * TODO: refactor it so that is is ran within a clear context.",
                "- */",
                "-public class TestAccessAuthentified {",
                "-",
                "-  private static ClassPathXmlApplicationContext context;",
                "-  private static JackrabbitRepository repository;",
                "-  private static BasicDataSource datasource;",
                "-  private static final String FOLDER_NAME = \"SimpleTest\";",
                "-  private static final String SUB_FOLDER_NAME = \"SubTest\";",
                "-  private static final String FILE_NAME = \"MyTest\";",
                "-  private static final String BART_ID = \"7\";",
                "-  private static final String BART_LOGIN = \"bsimpson\";",
                "-  private static final String BART_PASSWORD = \"bart\";",
                "-",
                "-  @BeforeClass",
                "-  public static void loadSpringContext() throws Exception {",
                "-    SimpleMemoryContextFactory.setUpAsInitialContext();",
                "-    context = new ClassPathXmlApplicationContext(",
                "-        \"classpath:/spring-jaas.xml\", \"classpath:/spring-domains.xml\");",
                "-    BasicDaoFactory.getInstance().setApplicationContext(context);",
                "-    repository = context.getBean(\"repository\", JackrabbitRepository.class);",
                "-    Reader reader = new InputStreamReader(TestAccessAuthentified.class.getClassLoader().",
                "-        getResourceAsStream(\"silverpeas-jcr.txt\"), Charsets.UTF_8);",
                "-    try {",
                "-    SilverpeasRegister.registerNodeTypes(reader);",
                "-    }finally {",
                "-      IOUtils.closeQuietly(reader);",
                "-    }",
                "-    datasource = context.getBean(\"jpaDataSource\", BasicDataSource.class);",
                "-    InitialContext ic = new InitialContext();",
                "-    /*ic.rebind(JNDINames.DATABASE_DATASOURCE, datasource);",
                "-    ic.rebind(JNDINames.ADMIN_DATASOURCE, datasource);*/",
                "-    System.out.println(\" -> node types registered\");",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void tearAlldown() throws Exception {",
                "-    repository.shutdown();",
                "-    datasource.close();",
                "-    context.close();",
                "-    SimpleMemoryContextFactory.tearDownAsInitialContext();",
                "-  }",
                "-",
                "-  @Before",
                "-  public void onSetUp() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node rootNode = session.getRootNode();",
                "-      rootNode.addNode(FOLDER_NAME, JcrConstants.NT_FOLDER);",
                "-      session.save();",
                "-      setUpDatabase();",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  public void setUpDatabase() throws Exception {",
                "-    IDatabaseConnection connection = null;",
                "-    try {",
                "-      connection = new DatabaseConnection(datasource.getConnection());",
                "-      DatabaseOperation.CLEAN_INSERT.execute(connection, getDataSet());",
                "-    } catch (Exception ex) {",
                "-      throw ex;",
                "-    } finally {",
                "-      if (connection != null) {",
                "-        try {",
                "-          connection.getConnection().close();",
                "-        } catch (SQLException e) {",
                "-          throw e;",
                "-        }",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  @After",
                "-  public void tearDownDatabase() throws Exception {",
                "-    clearRepository();",
                "-    IDatabaseConnection connection = null;",
                "-    try {",
                "-      connection = new DatabaseConnection(datasource.getConnection());",
                "-      DatabaseOperation.DELETE_ALL.execute(connection, getDataSet());",
                "-    } catch (Exception ex) {",
                "-      throw ex;",
                "-    } finally {",
                "-      if (connection != null) {",
                "-        try {",
                "-          connection.getConnection().close();",
                "-        } catch (SQLException e) {",
                "-          throw e;",
                "-        }",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  @Ignore",
                "-  public void testAccessFileOwnable() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node folder = session.getRootNode().getNode(FOLDER_NAME);",
                "-      Node fileNode = folder.addNode(FILE_NAME, JcrConstants.NT_FILE);",
                "-      fileNode.addMixin(JcrConstants.SLV_OWNABLE_MIXIN);",
                "-      fileNode.setProperty(JcrConstants.SLV_PROPERTY_OWNER, BART_ID);",
                "-      Node contentNode = fileNode.addNode(JcrConstants.JCR_CONTENT,",
                "-          JcrConstants.NT_RESOURCE);",
                "-      contentNode.setProperty(JcrConstants.JCR_MIMETYPE,",
                "-          MimeTypes.PLAIN_TEXT_MIME_TYPE);",
                "-      contentNode.setProperty(JcrConstants.JCR_ENCODING, \"\");",
                "-      contentNode.setProperty(JcrConstants.JCR_DATA, new ByteArrayInputStream(",
                "-          \"Bonjour le monde\".getBytes()));",
                "-      Calendar lastModified = Calendar.getInstance();",
                "-      contentNode.setProperty(JcrConstants.JCR_LAST_MODIFIED, lastModified);",
                "-      session.save();",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      validateFile(session, true, true);",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-    try {",
                "-      session = BasicDaoFactory.getAuthentifiedSession(BART_LOGIN,",
                "-          BART_PASSWORD);",
                "-      validateFile(session, true, true);",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-    try {",
                "-      session = BasicDaoFactory.getAuthentifiedSession(\"lsimpson\", \"lisa\");",
                "-      validateFile(session, false, true);",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  @Ignore",
                "-  public void testAccessFileNotOwnable() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node folder = session.getRootNode().getNode(FOLDER_NAME);",
                "-      Node fileNode = folder.addNode(FILE_NAME, JcrConstants.NT_FILE);",
                "-      Node contentNode = fileNode.addNode(JcrConstants.JCR_CONTENT,",
                "-          JcrConstants.NT_RESOURCE);",
                "-      contentNode.setProperty(JcrConstants.JCR_MIMETYPE,",
                "-          MimeTypes.PLAIN_TEXT_MIME_TYPE);",
                "-      contentNode.setProperty(JcrConstants.JCR_ENCODING, \"\");",
                "-      contentNode.setProperty(JcrConstants.JCR_DATA, new ByteArrayInputStream(",
                "-          \"Bonjour le monde\".getBytes()));",
                "-      Calendar lastModified = Calendar.getInstance();",
                "-      contentNode.setProperty(JcrConstants.JCR_LAST_MODIFIED, lastModified);",
                "-      session.save();",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      validateFile(session, true, false);",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-    try {",
                "-      session = BasicDaoFactory.getAuthentifiedSession(BART_LOGIN,",
                "-          BART_PASSWORD);",
                "-      validateFile(session, true, false);",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-",
                "-    try {",
                "-      session = BasicDaoFactory.getAuthentifiedSession(\"lsimpson\", \"lisa\");",
                "-      validateFile(session, true, false);",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  protected void validateFile(Session session, boolean isAccessible,",
                "-      boolean hasMixin) throws RepositoryException {",
                "-    Node folderNode = session.getRootNode().getNode(FOLDER_NAME);",
                "-    assertNotNull(\"Folder not found\", folderNode);",
                "-    assertEquals(\"Folder not of correct type\", JcrConstants.NT_FOLDER,",
                "-        folderNode.getPrimaryNodeType().getName());",
                "-    if (isAccessible) {",
                "-      Node fileNode = session.getRootNode().getNode(FOLDER_NAME).getNode(",
                "-          FILE_NAME);",
                "-      assertNotNull(\"File not found\", fileNode);",
                "-      assertEquals(\"File not of correct type\", JcrConstants.NT_FILE, fileNode.getPrimaryNodeType()",
                "-          .getName());",
                "-      assertEquals(\"File has not the correct mixin\", hasMixin, hasMixin(",
                "-          JcrConstants.SLV_OWNABLE_MIXIN, fileNode));",
                "-    } else {",
                "-      assertFalse(\"File should not be accessible\", folderNode.hasNode(FILE_NAME));",
                "-    }",
                "-  }",
                "-",
                "-  protected void validateFolder(Session session, boolean hasMixin)",
                "-      throws RepositoryException {",
                "-    Node parentFolderNode = session.getRootNode().getNode(FOLDER_NAME);",
                "-    assertNotNull(\"Folder not found\", parentFolderNode);",
                "-    assertEquals(\"Folder not of correct type\", JcrConstants.NT_FOLDER,",
                "-        parentFolderNode.getPrimaryNodeType().getName());",
                "-    Node folderNode = parentFolderNode.getNode(SUB_FOLDER_NAME);",
                "-    assertNotNull(\"Folder not found\", folderNode);",
                "-    assertEquals(\"Folder not of correct type\", JcrConstants.NT_FOLDER,",
                "-        folderNode.getPrimaryNodeType().getName());",
                "-    assertEquals(JcrConstants.NT_FOLDER, folderNode.getPrimaryNodeType().getName());",
                "-    assertEquals(\"Folder has not the correct mixin\", hasMixin, hasMixin(",
                "-        JcrConstants.SLV_OWNABLE_MIXIN, folderNode));",
                "-  }",
                "-",
                "-  @Test",
                "-  @Ignore",
                "-  public void testAccessFolderOwnable() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node folder = session.getRootNode().getNode(FOLDER_NAME);",
                "-      Node fileNode = folder.addNode(SUB_FOLDER_NAME, JcrConstants.NT_FOLDER);",
                "-      fileNode.addMixin(JcrConstants.SLV_OWNABLE_MIXIN);",
                "-      fileNode.setProperty(JcrConstants.SLV_PROPERTY_OWNER, BART_ID);",
                "-      session.save();",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      validateFolder(session, true);",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-    try {",
                "-      session = BasicDaoFactory.getAuthentifiedSession(BART_LOGIN,",
                "-          BART_PASSWORD);",
                "-      validateFolder(session, true);",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-",
                "-    try {",
                "-      session = BasicDaoFactory.getAuthentifiedSession(\"lsimpson\", \"lisa\");",
                "-      validateFolder(session, true);",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  @Ignore",
                "-  public void testAccessFolderNotOwnable() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node folder = session.getRootNode().getNode(FOLDER_NAME);",
                "-      folder.addNode(SUB_FOLDER_NAME, JcrConstants.NT_FOLDER);",
                "-      session.save();",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      validateFolder(session, false);",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-    try {",
                "-      session = BasicDaoFactory.getAuthentifiedSession(BART_LOGIN,",
                "-          BART_PASSWORD);",
                "-      validateFolder(session, false);",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-",
                "-    try {",
                "-      session = BasicDaoFactory.getAuthentifiedSession(\"lsimpson\", \"lisa\");",
                "-      validateFolder(session, false);",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  protected IDataSet getDataSet() throws Exception {",
                "-    InputStream in = this.getClass().getResourceAsStream(\"test-jcrutil-dataset.xml\");",
                "-    try {",
                "-      ReplacementDataSet dataSet = new ReplacementDataSet(new FlatXmlDataSetBuilder().build(in));",
                "-      dataSet.addReplacementObject(\"[NULL]\", null);",
                "-      return dataSet;",
                "-    } finally {",
                "-      IOUtils.closeQuietly(in);",
                "-    }",
                "-  }",
                "-",
                "-  protected void clearRepository() throws Exception {",
                "-    Session session = null;",
                "-    try {",
                "-      session = BasicDaoFactory.getSystemSession();",
                "-      Node rootNode = session.getRootNode();",
                "-      rootNode.getNode(FOLDER_NAME).remove();",
                "-      session.save();",
                "-    } catch (Exception ex) {",
                "-      fail(ex.getMessage());",
                "-    } finally {",
                "-      BasicDaoFactory.logout(session);",
                "-    }",
                "-  }",
                "-",
                "-  protected boolean hasMixin(String mixinName, Node node)",
                "-      throws RepositoryException {",
                "-    NodeType[] types = node.getMixinNodeTypes();",
                "-    for (NodeType type : types) {",
                "-      if (mixinName.equals(type.getName())) {",
                "-        return true;",
                "-      }",
                "-    }",
                "-    return false;",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/notification/MyNotificationSubscriber.java b/core-library/src/test-awaiting/java/com/silverpeas/notification/MyNotificationSubscriber.java",
                "deleted file mode 100644",
                "index f35d56e731..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/notification/MyNotificationSubscriber.java",
                "+++ /dev/null",
                "@@ -1,68 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.usernotification;",
                "-",
                "-import javax.inject.Inject;",
                "-import javax.inject.Named;",
                "-",
                "-/**",
                "- * A subscriber on event topics for testing purpose.",
                "- */",
                "-@Named(\"myNotificationSubscriber\")",
                "-public class MyNotificationSubscriber implements NotificationSubscriber {",
                "-",
                "-  @Inject",
                "-  private MessageSubscribingService subscribingService;",
                "-  private String id;",
                "-  private SilverpeasNotification notification;",
                "-",
                "-  @Override",
                "-  public void onNotification(SilverpeasNotification notification, NotificationTopic onTopic) {",
                "-    this.notification = notification;",
                "-  }",
                "-",
                "-  public SilverpeasNotification getReceivedNotification() {",
                "-    return notification;",
                "-  }",
                "-",
                "-  @Override",
                "-  public String getId() {",
                "-    return id;",
                "-  }",
                "-",
                "-  @Override",
                "-  public void setId(String id) {",
                "-    this.id = id;",
                "-  }",
                "-",
                "-  @Override",
                "-  public void subscribeForNotifications(NotificationTopic onTopic) {",
                "-    subscribingService.subscribe(this, onTopic);",
                "-  }",
                "-",
                "-  @Override",
                "-  public void unsubscribeForNotifications(NotificationTopic onTopic) {",
                "-    subscribingService.unsubscribe(this, onTopic);",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/notification/MyResource.java b/core-library/src/test-awaiting/java/com/silverpeas/notification/MyResource.java",
                "deleted file mode 100644",
                "index 2f1b03c898..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/notification/MyResource.java",
                "+++ /dev/null",
                "@@ -1,77 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.usernotification;",
                "-",
                "-import java.io.Serializable;",
                "-import java.util.Date;",
                "-import java.util.UUID;",
                "-",
                "-/**",
                "- * It defines a resource in Silverpeas from which notifications can be triggered.",
                "- * It is dedicated to test the serialization of POJO through the notification API.",
                "- */",
                "-public class MyResource implements Serializable {",
                "-  private static final long serialVersionUID = -8458037386176937030L;",
                "-",
                "-  private String name;",
                "-  private String id = UUID.randomUUID().toString();",
                "-  private Date creationDate = new Date();",
                "-  private Date lastModificationDate = new Date();",
                "-",
                "-  public Date getCreationDate() {",
                "-    return new Date(creationDate.getTime());",
                "-  }",
                "-",
                "-  public void setCreationDate(Date creationDate) {",
                "-    this.creationDate = new Date(creationDate.getTime());",
                "-  }",
                "-",
                "-  public String getId() {",
                "-    return id;",
                "-  }",
                "-",
                "-  public void setId(String id) {",
                "-    this.id = id;",
                "-  }",
                "-",
                "-  public Date getLastModificationDate() {",
                "-    return new Date(lastModificationDate.getTime());",
                "-  }",
                "-",
                "-  public void setLastModificationDate(Date lastModificationDate) {",
                "-    this.lastModificationDate = new Date(lastModificationDate.getTime());",
                "-  }",
                "-",
                "-  public String getName() {",
                "-    return name;",
                "-  }",
                "-",
                "-  public void setName(String name) {",
                "-    this.name = name;",
                "-  }",
                "-",
                "-  public MyResource(String name) {",
                "-    this.name = name;",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/notification/NotificationPublishingTest.java b/core-library/src/test-awaiting/java/com/silverpeas/notification/NotificationPublishingTest.java",
                "deleted file mode 100644",
                "index 89fca371d6..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/notification/NotificationPublishingTest.java",
                "+++ /dev/null",
                "@@ -1,91 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.usernotification;",
                "-",
                "-import javax.inject.Inject;",
                "-",
                "-import com.silverpeas.jms.JMSTestFacade;",
                "-import com.silverpeas.usernotification.jms.JMSPublishingService;",
                "-",
                "-import com.mockrunner.mock.jms.MockMessage;",
                "-import com.mockrunner.mock.jms.MockObjectMessage;",
                "-import org.junit.After;",
                "-import org.junit.Before;",
                "-import org.junit.Test;",
                "-",
                "-import static com.silverpeas.usernotification.NotificationTopic.onTopic;",
                "-import static org.junit.Assert.assertNotNull;",
                "-import static org.junit.Assert.assertTrue;",
                "-",
                "-/**",
                "- * Unit test on the publishing of a notification.",
                "- */",
                "-public class NotificationPublishingTest extends NotificationServiceTest {",
                "-",
                "-  @Inject",
                "-  private NotificationPublisher eventPublisher;",
                "-",
                "-  public NotificationPublishingTest() {",
                "-  }",
                "-",
                "-  @Before",
                "-  public void setUp() throws Exception {",
                "-    assertNotNull(eventPublisher);",
                "-  }",
                "-",
                "-  @After",
                "-  public void tearDown() throws Exception {",
                "-  }",
                "-",
                "-  @Test",
                "-  public void eventPublisherFactoryReturnsTheCorrectEventPublisherImpl() {",
                "-    NotificationPublisherFactory publisherFactory = NotificationPublisherFactory.getFactory();",
                "-    NotificationPublisher publisher = publisherFactory.getNotificationPublisher();",
                "-    assertNotNull(publisher);",
                "-    assertTrue(publisher instanceof JMSPublishingService);",
                "-  }",
                "-",
                "-  @Test",
                "-  public void publishAnEventToAnExistingTopicShouldSucceed() throws Exception {",
                "-    NotificationSource source = new NotificationSource().withUserId(\"simpson\").",
                "-        withComponentInstanceId(\"toto1\");",
                "-    MyResource resource = new MyResource(\"toto\");",
                "-    SilverpeasNotification expectedNotif = new SilverpeasNotification(source,",
                "-        resource);",
                "-    //expectedNotif.addParameter(\"test\", \"true\");",
                "-    eventPublisher.publish(expectedNotif, onTopic(JMSTestFacade.DEFAULT_TOPIC));",
                "-    MockMessage msg = new MockObjectMessage(expectedNotif);",
                "-    getJMSTestFacade().verifyReceivedTopicMessageEquals(JMSTestFacade.DEFAULT_TOPIC, 0, msg);",
                "-  }",
                "-",
                "-  @Test(expected = PublishingException.class)",
                "-  public void publishAnEventToAnUnexistingTopicShouldSucceed() throws Exception {",
                "-    NotificationSource source = new NotificationSource().withUserId(\"simpson\").",
                "-        withComponentInstanceId(\"toto1\");",
                "-    MyResource resource = new MyResource(\"coucou\");",
                "-    SilverpeasNotification expectedNotif = new SilverpeasNotification(source,",
                "-        resource);",
                "-    eventPublisher.publish(expectedNotif, onTopic(\"unknown\"));",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/notification/NotificationServiceTest.java b/core-library/src/test-awaiting/java/com/silverpeas/notification/NotificationServiceTest.java",
                "deleted file mode 100644",
                "index 886fdc6aaa..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/notification/NotificationServiceTest.java",
                "+++ /dev/null",
                "@@ -1,58 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.usernotification;",
                "-",
                "-import com.silverpeas.jms.JMSTestFacade;",
                "-import org.junit.AfterClass;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.runner.RunWith;",
                "-import org.springframework.test.context.ContextConfiguration;",
                "-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;",
                "-",
                "-/**",
                "- * The base class of all of the test cases on the Silverpeas notification service.",
                "- * It bootstraps the default messaging service used by the notification API and prepares a set of",
                "- * data shared by the tests.",
                "- */",
                "-@RunWith(SpringJUnit4ClassRunner.class)",
                "-@ContextConfiguration(locations = \"/spring-notification.xml\")",
                "-public abstract class NotificationServiceTest {",
                "-",
                "-  private static JMSTestFacade jmsTestFacade;",
                "-",
                "-  @BeforeClass",
                "-  public static void bootstrapJMS() throws Exception {",
                "-    jmsTestFacade = new JMSTestFacade();",
                "-    jmsTestFacade.bootstrap();",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void shutdownJMS() throws Exception {",
                "-    jmsTestFacade.shutdown();",
                "-  }",
                "-",
                "-  public static JMSTestFacade getJMSTestFacade() {",
                "-    return jmsTestFacade;",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/notification/NotificationSubscriptionTest.java b/core-library/src/test-awaiting/java/com/silverpeas/notification/NotificationSubscriptionTest.java",
                "deleted file mode 100644",
                "index 259d6f2e29..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/notification/NotificationSubscriptionTest.java",
                "+++ /dev/null",
                "@@ -1,98 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.usernotification;",
                "-",
                "-import com.silverpeas.jms.JMSTestFacade;",
                "-import javax.inject.Named;",
                "-import javax.inject.Inject;",
                "-import org.junit.After;",
                "-import org.junit.Before;",
                "-import org.junit.Test;",
                "-import static org.junit.Assert.*;",
                "-import static org.hamcrest.Matchers.*;",
                "-import static com.silverpeas.usernotification.NotificationTopic.*;",
                "-",
                "-/**",
                "- * Unit test on the subscription to a topic for receiving notifications.",
                "- */",
                "-public class NotificationSubscriptionTest extends NotificationServiceTest {",
                "-",
                "-  @Inject",
                "-  private NotificationPublisher publisher;",
                "-  @Inject",
                "-  @Named(\"myNotificationSubscriber\")",
                "-  private NotificationSubscriber subscriber;",
                "-",
                "-  public NotificationSubscriptionTest() {",
                "-  }",
                "-",
                "-  @Before",
                "-  public void setUp() throws Exception {",
                "-    assertNotNull(subscriber);",
                "-  }",
                "-",
                "-  @After",
                "-  public void tearDown() throws Exception {",
                "-  }",
                "-",
                "-  @Test",
                "-  public void theSubscriptionToAnExistingTopicShouldSucceed() {",
                "-    subscriber.subscribeForNotifications(onTopic(JMSTestFacade.DEFAULT_TOPIC));",
                "-    subscriber.unsubscribeForNotifications(onTopic(JMSTestFacade.DEFAULT_TOPIC));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void theSubscriptionASecondTimeToAnExistingTopicShouldDoNothing() {",
                "-    subscriber.subscribeForNotifications(onTopic(JMSTestFacade.DEFAULT_TOPIC));",
                "-    subscriber.subscribeForNotifications(onTopic(JMSTestFacade.DEFAULT_TOPIC));",
                "-    subscriber.unsubscribeForNotifications(onTopic(JMSTestFacade.DEFAULT_TOPIC));",
                "-  }",
                "-",
                "-  @Test(expected=SubscriptionException.class)",
                "-  public void theSubscriptionToAnUnexistingTopicShouldFailed() {",
                "-    subscriber.subscribeForNotifications(onTopic(\"unknown\"));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void unsubscribeToANonSubscribedTopicShouldDoNothing() {",
                "-    subscriber.unsubscribeForNotifications(onTopic(JMSTestFacade.DEFAULT_TOPIC));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void aSubscribedListenerShouldReceivePublishedEvents() {",
                "-    subscriber.subscribeForNotifications(onTopic(JMSTestFacade.DEFAULT_TOPIC));",
                "-",
                "-    MyResource resource = new MyResource(\"toto\");",
                "-    NotificationSource sender = new NotificationSource().withComponentInstanceId(\"toto1\").withUserId(",
                "-      \"simpson\");",
                "-    SilverpeasNotification expectedNotif = new SilverpeasNotification(sender,",
                "-      resource);",
                "-    publisher.publish(expectedNotif, onTopic(JMSTestFacade.DEFAULT_TOPIC));",
                "-",
                "-    SilverpeasNotification receivedNotif = ((MyNotificationSubscriber) subscriber).",
                "-      getReceivedNotification();",
                "-    assertThat(receivedNotif.getObject(), is(expectedNotif.getObject()));",
                "-    assertThat(receivedNotif.getSource(), is(expectedNotif.getSource()));",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/notification/builder/ResourceDataTest.java b/core-library/src/test-awaiting/java/com/silverpeas/notification/builder/ResourceDataTest.java",
                "deleted file mode 100644",
                "index 2b3197c468..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/notification/builder/ResourceDataTest.java",
                "+++ /dev/null",
                "@@ -1,116 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.usernotification.builder;",
                "-",
                "-import java.util.Date;",
                "-",
                "-import com.silverpeas.SilverpeasContent;",
                "-import com.stratelia.webactiv.beans.admin.UserDetail;",
                "-",
                "-/**",
                "- * @author Yohann Chastagnier",
                "- */",
                "-public class ResourceDataTest implements SilverpeasContent {",
                "-",
                "-  private static final long serialVersionUID = 7473567565248504755L;",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see org.silverpeas.core.contribution.model.SilverpeasContent#getId()",
                "-   */",
                "-  @Override",
                "-  public String getId() {",
                "-    return \"aIdFromResource\";",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see org.silverpeas.core.contribution.model.SilverpeasContent#getComponentInstanceId()",
                "-   */",
                "-  @Override",
                "-  public String getComponentInstanceId() {",
                "-    return \"aComponentInstanceIdFromResource\";",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see org.silverpeas.core.contribution.model.SilverpeasContent#getSilverpeasContentId()",
                "-   */",
                "-  @Override",
                "-  public String getSilverpeasContentId() {",
                "-    return \"aContentIdFromResource\";",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see org.silverpeas.core.contribution.model.SilverpeasContent#getCreator()",
                "-   */",
                "-  @Override",
                "-  public UserDetail getCreator() {",
                "-    final UserDetail userDetail = new UserDetail();",
                "-    userDetail.setId(\"100\");",
                "-    return userDetail;",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see org.silverpeas.core.contribution.model.SilverpeasContent#getCreationDate()",
                "-   */",
                "-  @Override",
                "-  public Date getCreationDate() {",
                "-    return java.sql.Date.valueOf(\"2012-01-01fsb\");",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see org.silverpeas.core.contribution.model.SilverpeasContent#getTitle()",
                "-   */",
                "-  @Override",
                "-  public String getTitle() {",
                "-    return \"aTitleFromResource\";",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see org.silverpeas.core.contribution.model.SilverpeasContent#getDescription()",
                "-   */",
                "-  @Override",
                "-  public String getDescription() {",
                "-    return \"\";",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see org.silverpeas.core.contribution.model.SilverpeasContent#getContributionType()",
                "-   */",
                "-  @Override",
                "-  public String getContributionType() {",
                "-    return \"aContributionTypeFromResource\";",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean canBeAccessedBy(final UserDetail user) {",
                "-    return true;",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/notification/builder/UserNotificationBuilderTest.java b/core-library/src/test-awaiting/java/com/silverpeas/notification/builder/UserNotificationBuilderTest.java",
                "deleted file mode 100644",
                "index bed3a8202d..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/notification/builder/UserNotificationBuilderTest.java",
                "+++ /dev/null",
                "@@ -1,632 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.usernotification.builder;",
                "-",
                "-import com.silverpeas.usernotification.builder.helper.UserNotificationHelper;",
                "-import com.silverpeas.usernotification.builder.mock.OrganizationControllerMock;",
                "-import com.silverpeas.usernotification.model.NotificationResourceData;",
                "-import com.silverpeas.ui.DisplayI18NHelper;",
                "-import org.silverpeas.core.util.StringUtil;",
                "-import org.silverpeas.util.template.SilverpeasTemplate;",
                "-import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "-import org.silverpeas.core.notification.user.client.constant.NotifAction;",
                "-import org.silverpeas.core.notification.user.client.constant.NotifMessageType;",
                "-import com.stratelia.webactiv.beans.admin.UserDetail;",
                "-import org.junit.Before;",
                "-import org.junit.Rule;",
                "-import org.junit.Test;",
                "-import org.mockito.invocation.InvocationOnMock;",
                "-import org.mockito.stubbing.Answer;",
                "-import org.silverpeas.core.admin.OrganisationController;",
                "-import org.silverpeas.core.admin.OrganisationControllerFactory;",
                "-import org.silverpeas.core.test.rule.MockByReflectionRule;",
                "-",
                "-import java.util.Arrays;",
                "-import java.util.Collection;",
                "-import java.util.Collections;",
                "-",
                "-import static org.hamcrest.MatcherAssert.assertThat;",
                "-import static org.hamcrest.Matchers.*;",
                "-import static org.mockito.Matchers.anyString;",
                "-import static org.mockito.Mockito.*;",
                "-",
                "-/**",
                "- * @author Yohann Chastagnier",
                "- */",
                "-public class UserNotificationBuilderTest {",
                "-",
                "-  @Rule",
                "-  public MockByReflectionRule mockByReflectionRule = new MockByReflectionRule();",
                "-",
                "-  private static final String TECHNICAL_CONTENT =",
                "-      \"<!--BEFORE_MESSAGE_FOOTER--><!--AFTER_MESSAGE_FOOTER-->\";",
                "-",
                "-  OrganisationController organizationController;",
                "-",
                "-  @Before",
                "-  public void setup() {",
                "-    organizationController = mockByReflectionRule",
                "-        .mockField(OrganisationControllerFactory.class, OrganisationController.class,",
                "-            \"instance.organisationController\");",
                "-    when(organizationController.getUserDetail(anyString())).thenReturn(new UserDetail());",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testBuild_AUNB_1() {",
                "-",
                "-    // Build",
                "-    NotificationMetaData notifTest = UserNotificationHelper.build(new AUNBTest() {",
                "-",
                "-      @Override",
                "-      protected Collection<String> getUserIdsToNotify() {",
                "-        return null;",
                "-      }",
                "-    });",
                "-    assertThat(notifTest, nullValue());",
                "-",
                "-    // Asserts",
                "-    notifTest = UserNotificationHelper.build(new AUNBTest());",
                "-    assertThat(notifTest, notNullValue());",
                "-    assertThat(notifTest.getMessageType(), is(NotifMessageType.NORMAL.getId()));",
                "-    assertThat(notifTest.getAction(), is(NotifAction.CREATE));",
                "-    assertThat(notifTest.getComponentId(), is(\"aComponentInstanceId\"));",
                "-    assertThat(notifTest.getSender(), is(\"aSenderId\"));",
                "-    assertThat(notifTest.getContent(), is(TECHNICAL_CONTENT));",
                "-    assertThat(notifTest.getDate(), notNullValue());",
                "-    assertThat(notifTest.getFileName(), nullValue());",
                "-    assertThat(notifTest.getLanguages().size(), is(0));",
                "-    assertThat(notifTest.getLink(), is(\"\"));",
                "-    assertThat(notifTest.getSource(), is(\"\"));",
                "-    assertThat(notifTest.getTitle(), nullValue());",
                "-    assertThat(notifTest.getTemplates().size(), is(0));",
                "-    assertThat(notifTest.isSendImmediately(), is(false));",
                "-    assertThat(notifTest.isAnswerAllowed(), is(false));",
                "-    assertThat(notifTest.getUserRecipients().size(), is(1));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testBuild_AUNB_1Bis() {",
                "-",
                "-    // Build",
                "-    final NotificationMetaData notifTest =",
                "-        UserNotificationHelper.build(new AUNBTest() {",
                "-",
                "-          @Override",
                "-          protected NotifMessageType getMessageType() {",
                "-            return NotifMessageType.URGENT;",
                "-          }",
                "-",
                "-          @Override",
                "-          protected boolean isSendImmediatly() {",
                "-            return true;",
                "-          }",
                "-",
                "-          @Override",
                "-          protected NotifAction getAction() {",
                "-            return NotifAction.REPORT;",
                "-          }",
                "-",
                "-          @Override",
                "-          protected void performBuild() {",
                "-            super.performBuild();",
                "-            getNotificationMetaData().setTitle(\"Title_ANB_1Bis\");",
                "-            getNotificationMetaData().setContent(\"Content_ANB_1Bis\");",
                "-          }",
                "-        });",
                "-",
                "-    // Asserts",
                "-    assertThat(notifTest, notNullValue());",
                "-    assertThat(notifTest.getMessageType(), is(NotifMessageType.URGENT.getId()));",
                "-    assertThat(notifTest.getAction(), is(NotifAction.REPORT));",
                "-    assertThat(notifTest.getComponentId(), is(\"aComponentInstanceId\"));",
                "-    assertThat(notifTest.getSender(), is(\"aSenderId\"));",
                "-    assertThat(notifTest.getContent(), is(\"Content_ANB_1Bis\" + TECHNICAL_CONTENT));",
                "-    assertThat(notifTest.getDate(), notNullValue());",
                "-    assertThat(notifTest.getFileName(), nullValue());",
                "-    assertThat(notifTest.getLanguages().size(), is(1));",
                "-    assertThat(notifTest.getLink(), is(\"\"));",
                "-    assertThat(notifTest.getSource(), is(\"\"));",
                "-    assertThat(notifTest.getTitle(), is(\"Title_ANB_1Bis\"));",
                "-    assertThat(notifTest.getTemplates().size(), is(0));",
                "-    assertThat(notifTest.isSendImmediately(), is(true));",
                "-    assertThat(notifTest.isAnswerAllowed(), is(false));",
                "-    assertThat(notifTest.getNotificationResourceData(), nullValue());",
                "-    assertThat(notifTest.getUserRecipients().size(), is(1));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testBuild_AUNB_2() {",
                "-",
                "-    // Build",
                "-    final NotificationMetaData notifTest =",
                "-        UserNotificationHelper.build(new AUNBTest(null, null) {",
                "-",
                "-          @Override",
                "-          protected String getSender() {",
                "-            return \"aSenderId\";",
                "-          }",
                "-",
                "-          @Override",
                "-          protected String getComponentInstanceId() {",
                "-            return \"aComponentInstanceId\";",
                "-          }",
                "-",
                "-          @Override",
                "-          protected NotifAction getAction() {",
                "-            return NotifAction.CREATE;",
                "-          }",
                "-        });",
                "-",
                "-    // Asserts",
                "-    assertThat(notifTest, notNullValue());",
                "-    assertThat(notifTest.getMessageType(), is(NotifMessageType.NORMAL.getId()));",
                "-    assertThat(notifTest.getAction(), is(NotifAction.CREATE));",
                "-    assertThat(notifTest.getComponentId(), is(\"aComponentInstanceId\"));",
                "-    assertThat(notifTest.getSender(), is(\"aSenderId\"));",
                "-    assertThat(notifTest.getContent(), is(TECHNICAL_CONTENT));",
                "-    assertThat(notifTest.getDate(), notNullValue());",
                "-    assertThat(notifTest.getFileName(), nullValue());",
                "-    assertThat(notifTest.getLanguages().size(), is(0));",
                "-    assertThat(notifTest.getLink(), is(\"\"));",
                "-    assertThat(notifTest.getSource(), is(\"\"));",
                "-    assertThat(notifTest.getTitle(), nullValue());",
                "-    assertThat(notifTest.getTemplates().size(), is(0));",
                "-    assertThat(notifTest.isSendImmediately(), is(false));",
                "-    assertThat(notifTest.isAnswerAllowed(), is(false));",
                "-    assertThat(notifTest.getNotificationResourceData(), nullValue());",
                "-    assertThat(notifTest.getUserRecipients().size(), is(1));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testBuild_AUNB_2Bis() {",
                "-",
                "-    // Build",
                "-    final NotificationMetaData notifTest =",
                "-        UserNotificationHelper.build(new AUNBTest(\"aTitle\", \"aContent\"));",
                "-",
                "-    // Asserts",
                "-    assertThat(notifTest, notNullValue());",
                "-    assertThat(notifTest.getMessageType(), is(NotifMessageType.NORMAL.getId()));",
                "-    assertThat(notifTest.getAction(), is(NotifAction.CREATE));",
                "-    assertThat(notifTest.getComponentId(), is(\"aComponentInstanceId\"));",
                "-    assertThat(notifTest.getSender(), is(\"aSenderId\"));",
                "-    assertThat(notifTest.getContent(), is(\"aContent\" + TECHNICAL_CONTENT));",
                "-    assertThat(notifTest.getDate(), notNullValue());",
                "-    assertThat(notifTest.getFileName(), nullValue());",
                "-    assertThat(notifTest.getLanguages().size(), is(1));",
                "-    assertThat(notifTest.getLink(), is(\"\"));",
                "-    assertThat(notifTest.getSource(), is(\"\"));",
                "-    assertThat(notifTest.getTitle(), is(\"aTitle\"));",
                "-    assertThat(notifTest.getTemplates().size(), is(0));",
                "-    assertThat(notifTest.isSendImmediately(), is(false));",
                "-    assertThat(notifTest.isAnswerAllowed(), is(false));",
                "-    assertThat(notifTest.getNotificationResourceData(), nullValue());",
                "-    assertThat(notifTest.getUserRecipients().size(), is(1));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testBuild_ARUNB_1() {",
                "-",
                "-    // Build",
                "-    NotificationMetaData notifTest = UserNotificationHelper.build(new ARUNBTest(null));",
                "-    assertBuild_ARUNB_1(notifTest, \"\", false);",
                "-    notifTest = UserNotificationHelper.build(new ARUNBTest(new String(\"testBuild_ARUNB_1\")) {",
                "-",
                "-      @Override",
                "-      protected void performBuild(final Object resource) {",
                "-        getNotificationMetaData().setSource(resource.toString());",
                "-      }",
                "-    });",
                "-    assertBuild_ARUNB_1(notifTest, \"testBuild_ARUNB_1\", false);",
                "-",
                "-    notifTest = UserNotificationHelper.build(new ARUNBTest(new ResourceDataTest()));",
                "-    assertBuild_ARUNB_1(notifTest, \"\", true);",
                "-",
                "-    notifTest = UserNotificationHelper.build(new ARUNBTest(new ResourceDataTest()) {",
                "-",
                "-      @Override",
                "-      protected void performBuild(final Object resource) {",
                "-        super.performBuild(resource);",
                "-        stop();",
                "-      }",
                "-    });",
                "-    assertThat(notifTest, nullValue());",
                "-  }",
                "-",
                "-  private void assertBuild_ARUNB_1(final NotificationMetaData notifTest, final String aSource,",
                "-      final boolean isSilverpeasContent) {",
                "-    assertThat(notifTest, notNullValue());",
                "-    assertThat(notifTest.getMessageType(), is(NotifMessageType.NORMAL.getId()));",
                "-    assertThat(notifTest.getAction(), is(NotifAction.UPDATE));",
                "-    assertThat(notifTest.getComponentId(), is(\"aComponentInstanceId\"));",
                "-    assertThat(notifTest.getSender(), is(\"aSenderId\"));",
                "-    assertThat(notifTest.getContent(), is(TECHNICAL_CONTENT));",
                "-    assertThat(notifTest.getDate(), notNullValue());",
                "-    assertThat(notifTest.getFileName(), nullValue());",
                "-    assertThat(notifTest.getLanguages().size(), is(0));",
                "-    assertThat(StringUtil.isDefined(notifTest.getLink()), is(isSilverpeasContent));",
                "-    assertThat(notifTest.getSource(), is(aSource));",
                "-    assertThat(notifTest.getTitle(), nullValue());",
                "-    assertThat(notifTest.getTemplates().size(), is(0));",
                "-    assertThat(notifTest.isSendImmediately(), is(false));",
                "-    assertThat(notifTest.isAnswerAllowed(), is(false));",
                "-    final NotificationResourceData nrdTest = notifTest.getNotificationResourceData();",
                "-    assertThat(nrdTest, notNullValue());",
                "-    assertThat(nrdTest.getComponentInstanceId(), is(\"aComponentInstanceId\"));",
                "-    assertThat(nrdTest.getResourceDescription(), nullValue());",
                "-    if (isSilverpeasContent) {",
                "-      assertThat(nrdTest.getResourceId(), is(\"aIdFromResource\"));",
                "-    } else {",
                "-      assertThat(nrdTest.getResourceId(), nullValue());",
                "-    }",
                "-    assertThat(nrdTest.getResourceLocation(), nullValue());",
                "-    assertThat(nrdTest.getResourceName(), nullValue());",
                "-    if (isSilverpeasContent) {",
                "-      assertThat(nrdTest.getResourceType(), is(\"aContributionTypeFromResource\"));",
                "-    } else {",
                "-      assertThat(nrdTest.getResourceType(), nullValue());",
                "-    }",
                "-    assertThat(StringUtil.isDefined(nrdTest.getResourceUrl()), is(isSilverpeasContent));",
                "-    assertThat(notifTest.getUserRecipients().size(), is(2));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testBuild_ARUNB_2() {",
                "-",
                "-    // Build",
                "-    final NotificationMetaData notifTest =",
                "-        UserNotificationHelper.build(new ARUNBTest(new ResourceDataTest()) {",
                "-",
                "-          @Override",
                "-          protected void performNotificationResource(final Object resource,",
                "-              final NotificationResourceData notificationResourceData) {",
                "-            final ResourceDataTest resourceTest = (ResourceDataTest) resource;",
                "-            notificationResourceData.setResourceDescription(\"aResourceDescription\");",
                "-            notificationResourceData.setResourceName(resourceTest.getTitle());",
                "-            notificationResourceData.setResourceLocation(resourceTest.getComponentInstanceId());",
                "-          }",
                "-        });",
                "-",
                "-    // Asserts",
                "-    assertThat(notifTest, notNullValue());",
                "-    assertThat(notifTest.getMessageType(), is(NotifMessageType.NORMAL.getId()));",
                "-    assertThat(notifTest.getAction(), is(NotifAction.UPDATE));",
                "-    assertThat(notifTest.getComponentId(), is(\"aComponentInstanceId\"));",
                "-    assertThat(notifTest.getSender(), is(\"aSenderId\"));",
                "-    assertThat(notifTest.getContent(), is(TECHNICAL_CONTENT));",
                "-    assertThat(notifTest.getDate(), notNullValue());",
                "-    assertThat(notifTest.getFileName(), nullValue());",
                "-    assertThat(notifTest.getLanguages().size(), is(0));",
                "-    assertThat(StringUtil.isDefined(notifTest.getLink()), is(true));",
                "-    assertThat(notifTest.getSource(), is(\"\"));",
                "-    assertThat(notifTest.getTitle(), nullValue());",
                "-    assertThat(notifTest.getTemplates().size(), is(0));",
                "-    assertThat(notifTest.isSendImmediately(), is(false));",
                "-    assertThat(notifTest.isAnswerAllowed(), is(false));",
                "-    final NotificationResourceData nrdTest = notifTest.getNotificationResourceData();",
                "-    assertThat(nrdTest, notNullValue());",
                "-    assertThat(nrdTest.getComponentInstanceId(), is(\"aComponentInstanceId\"));",
                "-    assertThat(nrdTest.getResourceDescription(), is(\"aResourceDescription\"));",
                "-    assertThat(nrdTest.getResourceId(), is(\"aIdFromResource\"));",
                "-    assertThat(nrdTest.getResourceLocation(), is(\"aComponentInstanceIdFromResource\"));",
                "-    assertThat(nrdTest.getResourceName(), is(\"aTitleFromResource\"));",
                "-    assertThat(nrdTest.getResourceType(), is(\"aContributionTypeFromResource\"));",
                "-    assertThat(StringUtil.isDefined(nrdTest.getResourceUrl()), is(true));",
                "-    assertThat(notifTest.getUserRecipients().size(), is(2));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testBuild_ARUNB_2Bis() {",
                "-",
                "-    // Build",
                "-    final NotificationMetaData notifTest =",
                "-        UserNotificationHelper.build(new ARUNBTest(new ResourceDataTest(), \"aTitle\", \"aContent\"));",
                "-",
                "-    // Asserts",
                "-    assertThat(notifTest, notNullValue());",
                "-    assertThat(notifTest.getMessageType(), is(NotifMessageType.NORMAL.getId()));",
                "-    assertThat(notifTest.getAction(), is(NotifAction.UPDATE));",
                "-    assertThat(notifTest.getComponentId(), is(\"aComponentInstanceId\"));",
                "-    assertThat(notifTest.getSender(), is(\"aSenderId\"));",
                "-    assertThat(notifTest.getContent(), is(\"aContent\" + TECHNICAL_CONTENT));",
                "-    assertThat(notifTest.getDate(), notNullValue());",
                "-    assertThat(notifTest.getFileName(), nullValue());",
                "-    assertThat(notifTest.getLanguages().size(), is(1));",
                "-    assertThat(StringUtil.isDefined(notifTest.getLink()), is(true));",
                "-    assertThat(notifTest.getSource(), is(\"\"));",
                "-    assertThat(notifTest.getTitle(), is(\"aTitle\"));",
                "-    assertThat(notifTest.getTemplates().size(), is(0));",
                "-    assertThat(notifTest.isSendImmediately(), is(false));",
                "-    assertThat(notifTest.isAnswerAllowed(), is(false));",
                "-    final NotificationResourceData nrdTest = notifTest.getNotificationResourceData();",
                "-    assertThat(nrdTest, notNullValue());",
                "-    assertThat(nrdTest.getComponentInstanceId(), is(\"aComponentInstanceId\"));",
                "-    assertThat(nrdTest.getResourceDescription(), nullValue());",
                "-    assertThat(nrdTest.getResourceId(), is(\"aIdFromResource\"));",
                "-    assertThat(nrdTest.getResourceLocation(), nullValue());",
                "-    assertThat(nrdTest.getResourceName(), nullValue());",
                "-    assertThat(nrdTest.getResourceType(), is(\"aContributionTypeFromResource\"));",
                "-    assertThat(StringUtil.isDefined(nrdTest.getResourceUrl()), is(true));",
                "-    assertThat(notifTest.getUserRecipients().size(), is(2));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testBuild_ATUNB_1() {",
                "-    mockOrganizationController_isComponentExist();",
                "-",
                "-    NotificationMetaData notifTest =",
                "-        UserNotificationHelper.build(new ATUNBTest(new ResourceDataTest(), \"aTitle\", \"notificationHelperTemplateFile\"));",
                "-    assertBuild_ATUNB_1(notifTest, \"\");",
                "-",
                "-    notifTest =",
                "-        UserNotificationHelper.build(new ATUNBTest(new ResourceDataTest(), \"aTitle\", \"notificationHelperTemplateFile\") {",
                "-",
                "-          @Override",
                "-          protected String getMultilangPropertyFile() {",
                "-            return \"com.silverpeas.notification.helper.multilang.notificationHelperBundle\";",
                "-          }",
                "-",
                "-        });",
                "-    assertBuild_ATUNB_1(notifTest, \"bundleValue\");",
                "-  }",
                "-",
                "-  private void assertBuild_ATUNB_1(final NotificationMetaData notifTest, final String contentValue) {",
                "-    assertThat(notifTest, notNullValue());",
                "-    assertThat(notifTest.getMessageType(), is(NotifMessageType.ERROR.getId()));",
                "-    assertThat(notifTest.getAction(), is(NotifAction.DELETE));",
                "-    assertThat(notifTest.getComponentId(), is(\"aComponentInstanceId\"));",
                "-    assertThat(notifTest.getSender(), is(\"aSenderId\"));",
                "-    assertThat(notifTest.getDate(), notNullValue());",
                "-    assertThat(notifTest.getFileName(), is(\"notificationHelperTemplateFile\"));",
                "-    assertThat(notifTest.getLanguages().size(), is(3));",
                "-    assertThat(StringUtil.isDefined(notifTest.getLink()), is(true));",
                "-    assertThat(notifTest.getSource(), is(\"aSource\"));",
                "-    assertThat(notifTest.getTitle(), is(\"aTitle\"));",
                "-    assertThat(notifTest.getTemplates().size(), is(3));",
                "-    assertThat(notifTest.isSendImmediately(), is(false));",
                "-    assertThat(notifTest.isAnswerAllowed(), is(false));",
                "-    final NotificationResourceData nrdTest = notifTest.getNotificationResourceData();",
                "-    assertThat(nrdTest, notNullValue());",
                "-    assertThat(nrdTest.getComponentInstanceId(), is(\"aComponentInstanceId\"));",
                "-    assertThat(nrdTest.getResourceDescription(), nullValue());",
                "-    assertThat(nrdTest.getResourceId(), is(\"aIdFromResource\"));",
                "-    assertThat(nrdTest.getResourceLocation(), nullValue());",
                "-    assertThat(nrdTest.getResourceName(), is(\"aTitleFromResource\"));",
                "-    assertThat(nrdTest.getResourceType(), is(\"aContributionTypeFromResource\"));",
                "-    assertThat(StringUtil.isDefined(nrdTest.getResourceUrl()), is(true));",
                "-    assertThat(notifTest.getUserRecipients().size(), is(3));",
                "-",
                "-    for (final String curLanguage : DisplayI18NHelper.getLanguages()) {",
                "-      assertThat(notifTest.getContent(curLanguage),",
                "-          is(curLanguage + \"-\" + contentValue + \" :-)\" + TECHNICAL_CONTENT));",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testBuild_ATUNB_2() {",
                "-    mockOrganizationController_isComponentExist();",
                "-",
                "-    // Builds",
                "-    final NotificationMetaData notifTest =",
                "-        UserNotificationHelper.build(new ATUNBTest(new ResourceDataTest(), \"aTitle\", \"notificationHelperTemplateFile\") {",
                "-",
                "-          @Override",
                "-          protected String getMultilangPropertyFile() {",
                "-            return \"com.silverpeas.notification.helper.multilang.notificationHelperBundle\";",
                "-          }",
                "-",
                "-          @Override",
                "-          protected String getComponentInstanceId() {",
                "-            return \"<componentInstanceId>\";",
                "-          }",
                "-        });",
                "-",
                "-    // Asserts",
                "-    assertThat(notifTest, notNullValue());",
                "-    assertThat(notifTest.getMessageType(), is(NotifMessageType.ERROR.getId()));",
                "-    assertThat(notifTest.getAction(), is(NotifAction.DELETE));",
                "-    assertThat(notifTest.getComponentId(), is(\"<componentInstanceId>\"));",
                "-    assertThat(notifTest.getSender(), is(\"aSenderId\"));",
                "-    assertThat(notifTest.getDate(), notNullValue());",
                "-    assertThat(notifTest.getFileName(), is(\"notificationHelperTemplateFile\"));",
                "-    assertThat(notifTest.getLanguages().size(), is(3));",
                "-    assertThat(StringUtil.isDefined(notifTest.getLink()), is(true));",
                "-    assertThat(notifTest.getSource(), is(\"aSource\"));",
                "-    assertThat(notifTest.getTitle(), is(\"aTitle\"));",
                "-    assertThat(notifTest.getTemplates().size(), is(3));",
                "-    assertThat(notifTest.isSendImmediately(), is(false));",
                "-    assertThat(notifTest.isAnswerAllowed(), is(false));",
                "-    final NotificationResourceData nrdTest = notifTest.getNotificationResourceData();",
                "-    assertThat(nrdTest, notNullValue());",
                "-    assertThat(nrdTest.getComponentInstanceId(), is(\"<componentInstanceId>\"));",
                "-    assertThat(nrdTest.getResourceDescription(), nullValue());",
                "-    assertThat(nrdTest.getResourceId(), is(\"aIdFromResource\"));",
                "-    assertThat(nrdTest.getResourceLocation(), nullValue());",
                "-    assertThat(nrdTest.getResourceName(), is(\"aTitleFromResource\"));",
                "-    assertThat(nrdTest.getResourceType(), is(\"aContributionTypeFromResource\"));",
                "-    assertThat(StringUtil.isDefined(nrdTest.getResourceUrl()), is(true));",
                "-    assertThat(notifTest.getUserRecipients().size(), is(3));",
                "-",
                "-    for (final String curLanguage : DisplayI18NHelper.getLanguages()) {",
                "-      assertThat(notifTest.getContent(curLanguage),",
                "-          is(curLanguage + \"-bundleValue :-) - components\" + TECHNICAL_CONTENT));",
                "-    }",
                "-  }",
                "-",
                "-  protected void mockOrganizationController_isComponentExist() {",
                "-    doAnswer(new Answer<Boolean>() {",
                "-      @Override",
                "-      public Boolean answer(final InvocationOnMock invocation) throws Throwable {",
                "-        final String componentInstanceId = (String) invocation.getArguments()[0];",
                "-        if (\"<componentInstanceId>\".equals(componentInstanceId)) {",
                "-          return true;",
                "-        }",
                "-        return false;",
                "-      }",
                "-    }).when(organizationController).isComponentExist(anyString());",
                "-  }",
                "-",
                "-  protected class ATUNBTest extends AbstractTemplateUserNotificationBuilder<ResourceDataTest> {",
                "-",
                "-    public ATUNBTest(final ResourceDataTest resource, final String title, final String fileName) {",
                "-      super(resource, title, fileName);",
                "-    }",
                "-",
                "-    @Override",
                "-    protected String getBundleSubjectKey() {",
                "-      return null;",
                "-    }",
                "-",
                "-    @Override",
                "-    protected Collection<String> getUserIdsToNotify() {",
                "-      return Arrays.asList(\"123\", \"124\", \"125\");",
                "-    }",
                "-",
                "-    @Override",
                "-    protected void perform(final ResourceDataTest resource) {",
                "-      getNotificationMetaData().setSource(\"aSource\");",
                "-    }",
                "-",
                "-    @Override",
                "-    protected String getTemplatePath() {",
                "-      return \"//notification////helper//////\";",
                "-    }",
                "-",
                "-    @Override",
                "-    protected void performTemplateData(final String language, final ResourceDataTest resource,",
                "-        final SilverpeasTemplate template) {",
                "-      if (getBundle(language) != null) {",
                "-        template.setAttribute(\"testAttribute\", getBundle(language).getString(\"testAttributeKey\", \"\"));",
                "-      }",
                "-    }",
                "-",
                "-    @Override",
                "-    protected void performNotificationResource(final String language,",
                "-        final ResourceDataTest resource,",
                "-        final NotificationResourceData notificationResourceData) {",
                "-      notificationResourceData.setResourceName(resource.getTitle());",
                "-    }",
                "-",
                "-    @Override",
                "-    protected String getSender() {",
                "-      return \"aSenderId\";",
                "-    }",
                "-",
                "-    @Override",
                "-    protected String getComponentInstanceId() {",
                "-      return \"aComponentInstanceId\";",
                "-    }",
                "-",
                "-    @Override",
                "-    protected NotifAction getAction() {",
                "-      return NotifAction.DELETE;",
                "-    }",
                "-",
                "-    @Override",
                "-    protected NotifMessageType getMessageType() {",
                "-      return NotifMessageType.ERROR;",
                "-    }",
                "-  }",
                "-",
                "-  protected class ARUNBTest extends AbstractResourceUserNotificationBuilder<Object> {",
                "-",
                "-    public ARUNBTest(final Object resource, final String title, final String content) {",
                "-      super(resource, title, content);",
                "-    }",
                "-",
                "-    public ARUNBTest(final Object resource) {",
                "-      super(resource);",
                "-    }",
                "-",
                "-    @Override",
                "-    protected Collection<String> getUserIdsToNotify() {",
                "-      return Arrays.asList(\"123\", \"124\");",
                "-    }",
                "-",
                "-    @Override",
                "-    protected void performBuild(final Object resource) {",
                "-      // Nothing to do",
                "-    }",
                "-",
                "-    @Override",
                "-    protected void performNotificationResource(final Object resource,",
                "-        final NotificationResourceData notificationResourceData) {",
                "-      // Nothing to do",
                "-    }",
                "-",
                "-    @Override",
                "-    protected String getSender() {",
                "-      return \"aSenderId\";",
                "-    }",
                "-",
                "-    @Override",
                "-    protected String getComponentInstanceId() {",
                "-      return \"aComponentInstanceId\";",
                "-    }",
                "-",
                "-    @Override",
                "-    protected NotifAction getAction() {",
                "-      return NotifAction.UPDATE;",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * @author Yohann Chastagnier",
                "-   */",
                "-  protected class AUNBTest extends AbstractUserNotificationBuilder {",
                "-",
                "-    public AUNBTest() {",
                "-      super();",
                "-    }",
                "-",
                "-    public AUNBTest(final String title, final String content) {",
                "-      super(title, content);",
                "-    }",
                "-",
                "-    @Override",
                "-    protected Collection<String> getUserIdsToNotify() {",
                "-      return Collections.singletonList(\"123\");",
                "-    }",
                "-",
                "-    @Override",
                "-    protected void performBuild() {",
                "-      // Nothing to do",
                "-    }",
                "-",
                "-    @Override",
                "-    protected String getSender() {",
                "-      return \"aSenderId\";",
                "-    }",
                "-",
                "-    @Override",
                "-    protected String getComponentInstanceId() {",
                "-      return \"aComponentInstanceId\";",
                "-    }",
                "-",
                "-    @Override",
                "-    protected NotifAction getAction() {",
                "-      return NotifAction.CREATE;",
                "-    }",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/notification/delayed/DelayedNotificationManagerPerformanceTest.java b/core-library/src/test-awaiting/java/com/silverpeas/notification/delayed/DelayedNotificationManagerPerformanceTest.java",
                "deleted file mode 100644",
                "index 25c9972b33..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/notification/delayed/DelayedNotificationManagerPerformanceTest.java",
                "+++ /dev/null",
                "@@ -1,142 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-/*",
                "- * To change this template, choose Tools | Templates",
                "- * and open the template in the editor.",
                "- */",
                "-package com.silverpeas.usernotification.delayed;",
                "-",
                "-import com.silverpeas.usernotification.delayed.model.DelayedNotificationData;",
                "-import com.silverpeas.usernotification.model.NotificationResourceData;",
                "-import org.silverpeas.core.notification.user.client.constant.NotifAction;",
                "-import org.silverpeas.core.notification.user.client.constant.NotifChannel;",
                "-import org.dbunit.database.DatabaseConnection;",
                "-import org.dbunit.database.IDatabaseConnection;",
                "-import org.dbunit.dataset.ReplacementDataSet;",
                "-import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;",
                "-import org.dbunit.operation.DatabaseOperation;",
                "-import org.junit.Before;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Test;",
                "-import org.junit.runner.RunWith;",
                "-import org.springframework.test.context.ContextConfiguration;",
                "-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;",
                "-import org.springframework.test.context.transaction.TransactionConfiguration;",
                "-import org.springframework.transaction.annotation.Propagation;",
                "-import org.springframework.transaction.annotation.Transactional;",
                "-",
                "-import javax.inject.Inject;",
                "-import javax.inject.Named;",
                "-import javax.sql.DataSource;",
                "-import java.math.BigDecimal;",
                "-import java.util.ArrayList;",
                "-import java.util.Collection;",
                "-import java.util.logging.Level;",
                "-import java.util.logging.Logger;",
                "-",
                "-import static org.hamcrest.MatcherAssert.assertThat;",
                "-import static org.hamcrest.Matchers.*;",
                "-",
                "-@RunWith(SpringJUnit4ClassRunner.class)",
                "-@ContextConfiguration(",
                "-    locations = {\"/spring-delayed-notification.xml\", \"/spring-delayed-notification-datasource.xml\"})",
                "-@TransactionConfiguration(transactionManager = \"jpaTransactionManager\")",
                "-public class DelayedNotificationManagerPerformanceTest {",
                "-  private static ReplacementDataSet dataSet;",
                "-",
                "-  Logger logger = Logger.getLogger(DelayedNotificationManagerPerformanceTest.class.getName());",
                "-",
                "-  public DelayedNotificationManagerPerformanceTest() {",
                "-  }",
                "-",
                "-  @BeforeClass",
                "-  public static void prepareDataSet() throws Exception {",
                "-    final FlatXmlDataSetBuilder builder = new FlatXmlDataSetBuilder();",
                "-    dataSet = new ReplacementDataSet(builder.build(DelayedNotificationManagerPerformanceTest.class.",
                "-        getResourceAsStream(\"delayed-notification-dataset.xml\")));",
                "-    dataSet.addReplacementObject(\"[NULL]\", null);",
                "-  }",
                "-",
                "-  @Inject",
                "-  private DelayedNotification manager;",
                "-  @Inject",
                "-  @Named(\"jpaDataSource\")",
                "-  private DataSource dataSource;",
                "-",
                "-  @Before",
                "-  public void generalSetUp() throws Exception {",
                "-    final IDatabaseConnection myConnection = new DatabaseConnection(dataSource.getConnection());",
                "-    DatabaseOperation.CLEAN_INSERT.execute(myConnection, dataSet);",
                "-  }",
                "-",
                "-  @Transactional(propagation = Propagation.REQUIRED)",
                "-  @Test",
                "-  public void testDeleteDelayedNotifications() throws Exception {",
                "-    Collection<Long> ids = loadDelayedNorifications(1000);",
                "-",
                "-    long start = System.currentTimeMillis();",
                "-    assertThat(manager.deleteDelayedNotifications(ids), is(1000));",
                "-    long end = System.currentTimeMillis();",
                "-",
                "-    logger.log(Level.INFO, \"Deleting delayed notifications in {0} milliseconds.\",",
                "-        new BigDecimal(String.valueOf(end - start)));",
                "-  }",
                "-",
                "-  @Transactional(propagation = Propagation.REQUIRES_NEW)",
                "-  public Collection<Long> loadDelayedNorifications(int size) {",
                "-    NotificationResourceData notificationResourceData =",
                "-        manager.getExistingResource(\"100\", \"publication\", \"aComponentInstanceId\");",
                "-",
                "-    // 10000",
                "-    long start = System.currentTimeMillis();",
                "-    Collection<Long> result = new ArrayList<Long>(size);",
                "-    for (long i = 0; i < size; i++) {",
                "-      DelayedNotificationData data = buildDelayedNotificationData(notificationResourceData);",
                "-      assertThat(data.getId(), nullValue());",
                "-      manager.saveDelayedNotification(data);",
                "-      assertThat(data.getId(), notNullValue());",
                "-      result.add(data.getId());",
                "-    }",
                "-    long end = System.currentTimeMillis();",
                "-",
                "-    logger.log(Level.INFO, \"Loading database in {0} seconds.\",",
                "-        new BigDecimal(String.valueOf(end - start))",
                "-            .divide(new BigDecimal(\"1000\"), 2, BigDecimal.ROUND_HALF_DOWN));",
                "-",
                "-    return result;",
                "-  }",
                "-",
                "-  private static DelayedNotificationData buildDelayedNotificationData(",
                "-      NotificationResourceData notificationResourceData) {",
                "-    final DelayedNotificationData data = new DelayedNotificationData();",
                "-    data.setUserId(26);",
                "-    data.setFromUserId(38);",
                "-    data.setChannel(NotifChannel.SMTP);",
                "-    data.setAction(NotifAction.CREATE);",
                "-    data.setResource(notificationResourceData);",
                "-    data.setLanguage(\"fr\");",
                "-    data.setMessage(\"Ceci est un message !\");",
                "-    return data;",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/notification/delayed/scheduler/DelayedNotificationSchedulerInitializerTest.java b/core-library/src/test-awaiting/java/com/silverpeas/notification/delayed/scheduler/DelayedNotificationSchedulerInitializerTest.java",
                "deleted file mode 100644",
                "index d86f7fcb21..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/notification/delayed/scheduler/DelayedNotificationSchedulerInitializerTest.java",
                "+++ /dev/null",
                "@@ -1,47 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.usernotification.delayed.scheduler;",
                "-",
                "-import org.silverpeas.core.scheduler.Scheduler;",
                "-import javax.inject.Inject;",
                "-import org.junit.Test;",
                "-import org.junit.runner.RunWith;",
                "-import org.springframework.test.context.ContextConfiguration;",
                "-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;",
                "-",
                "-import static org.hamcrest.MatcherAssert.assertThat;",
                "-import static org.hamcrest.Matchers.is;",
                "-",
                "-@RunWith(SpringJUnit4ClassRunner.class)",
                "-@ContextConfiguration(\"/spring-delayed-notification-scheduler.xml\")",
                "-public class DelayedNotificationSchedulerInitializerTest {",
                "-",
                "-  @Inject",
                "-  private Scheduler scheduler;",
                "-",
                "-  @Test",
                "-  public void test() {",
                "-    assertThat(scheduler.isJobScheduled(DelayedNotificationSchedulerInitializer.JOB_NAME), is(true));",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/notification/mock/AdminNotificationServiceMock.java b/core-library/src/test-awaiting/java/com/silverpeas/notification/mock/AdminNotificationServiceMock.java",
                "deleted file mode 100644",
                "index 16cf6c8535..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/notification/mock/AdminNotificationServiceMock.java",
                "+++ /dev/null",
                "@@ -1,43 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.usernotification.mock;",
                "-",
                "-import javax.inject.Named;",
                "-",
                "-import com.silverpeas.admin.notification.AdminNotificationService;",
                "-import com.silverpeas.admin.notification.ComponentJsonPatch;",
                "-",
                "-@Named(\"adminNotificationService\")",
                "-public class AdminNotificationServiceMock implements AdminNotificationService {",
                "-",
                "-  @Override",
                "-  public void notifyOnDeletionOf(String spaceId, String userId) {",
                "-  }",
                "-",
                "-  @Override",
                "-  public void notifyOfComponentConfigurationChange(String componentId, String userId,",
                "-      ComponentJsonPatch changes) {",
                "-  }",
                "-",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/social/dao/ExternalAccountDaoTest.java b/core-library/src/test-awaiting/java/com/silverpeas/social/dao/ExternalAccountDaoTest.java",
                "deleted file mode 100644",
                "index 2360751d8e..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/social/dao/ExternalAccountDaoTest.java",
                "+++ /dev/null",
                "@@ -1,84 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.social.dao;",
                "-",
                "-import static org.hamcrest.MatcherAssert.assertThat;",
                "-import static org.hamcrest.Matchers.is;",
                "-",
                "-import javax.inject.Inject;",
                "-import javax.sql.DataSource;",
                "-",
                "-import org.silverpeas.core.socialnetwork.dao.ExternalAccountManager;",
                "-import org.dbunit.database.DatabaseConnection;",
                "-import org.dbunit.database.IDatabaseConnection;",
                "-import org.dbunit.dataset.ReplacementDataSet;",
                "-import org.dbunit.dataset.xml.FlatXmlDataSet;",
                "-import org.dbunit.operation.DatabaseOperation;",
                "-import org.junit.Before;",
                "-import org.junit.Test;",
                "-import org.junit.runner.RunWith;",
                "-import org.springframework.test.annotation.DirtiesContext;",
                "-import org.springframework.test.context.ContextConfiguration;",
                "-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;",
                "-import org.springframework.test.context.transaction.TransactionConfiguration;",
                "-import org.springframework.transaction.annotation.Transactional;",
                "-",
                "-import org.silverpeas.core.socialnetwork.model.ExternalAccountIdentifier;",
                "-import org.silverpeas.core.socialnetwork.model.ExternalAccount;",
                "-import org.silverpeas.core.socialnetwork.model.SocialNetworkID;",
                "-",
                "-/**",
                "- * @author lbertin",
                "- */",
                "-@RunWith(SpringJUnit4ClassRunner.class)",
                "-@ContextConfiguration(locations = {\"/spring-socialnetwork.xml\"})",
                "-@TransactionConfiguration(transactionManager = \"jpaTransactionManager\")",
                "-public class ExternalAccountDaoTest {",
                "-",
                "-  @Inject",
                "-  private ExternalAccountManager dao;",
                "-  @Inject",
                "-  private DataSource dataSource;",
                "-",
                "-  public ExternalAccountDaoTest() {",
                "-  }",
                "-",
                "-  @Before",
                "-  public void generalSetUp() throws Exception {",
                "-    ReplacementDataSet dataSet = new ReplacementDataSet(new FlatXmlDataSet(",
                "-        ExternalAccountDaoTest.class.getClassLoader().getResourceAsStream(",
                "-        \"com/silverpeas/social/dao/socialnetwork-dataset.xml\")));",
                "-    dataSet.addReplacementObject(\"[NULL]\", null);",
                "-    IDatabaseConnection connection = new DatabaseConnection(dataSource.getConnection());",
                "-    DatabaseOperation.CLEAN_INSERT.execute(connection, dataSet);",
                "-  }",
                "-",
                "-  @Test",
                "-  @Transactional",
                "-  public void testReadByPrimaryKey() throws Exception {",
                "-    ExternalAccount account = dao.findOne(new ExternalAccountIdentifier(SocialNetworkID.LINKEDIN, \"1234\"));",
                "-    assertThat(account.getSilverpeasUserId(), is(\"11\"));",
                "-  }",
                "-",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/social/dao/SocialNetworkServiceLinkedInTest.java b/core-library/src/test-awaiting/java/com/silverpeas/social/dao/SocialNetworkServiceLinkedInTest.java",
                "deleted file mode 100644",
                "index fd2ed00b10..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/social/dao/SocialNetworkServiceLinkedInTest.java",
                "+++ /dev/null",
                "@@ -1,121 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.social.dao;",
                "-",
                "-import com.silverpeas.social.mock.OrganizationControllerMock;",
                "-import org.silverpeas.core.socialnetwork.model.ExternalAccount;",
                "-import org.silverpeas.core.socialnetwork.model.SocialNetworkID;",
                "-import org.silverpeas.core.socialnetwork.service.SocialNetworkService;",
                "-import com.stratelia.webactiv.beans.admin.UserDetail;",
                "-import org.dbunit.database.DatabaseConnection;",
                "-import org.dbunit.database.IDatabaseConnection;",
                "-import org.dbunit.dataset.ReplacementDataSet;",
                "-import org.dbunit.dataset.xml.FlatXmlDataSet;",
                "-import org.dbunit.operation.DatabaseOperation;",
                "-import org.junit.Before;",
                "-import org.junit.Test;",
                "-import org.junit.runner.RunWith;",
                "-import org.mockito.invocation.InvocationOnMock;",
                "-import org.mockito.stubbing.Answer;",
                "-import org.silverpeas.core.admin.user.constant.UserState;",
                "-import org.springframework.test.context.ContextConfiguration;",
                "-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;",
                "-import org.springframework.test.context.transaction.TransactionConfiguration;",
                "-import org.springframework.transaction.annotation.Transactional;",
                "-",
                "-import javax.inject.Inject;",
                "-import javax.sql.DataSource;",
                "-",
                "-import static org.hamcrest.MatcherAssert.assertThat;",
                "-import static org.hamcrest.Matchers.is;",
                "-import static org.hamcrest.Matchers.nullValue;",
                "-import static org.mockito.Matchers.anyString;",
                "-import static org.mockito.Mockito.doAnswer;",
                "-",
                "-/**",
                "- * @author lbertin",
                "- */",
                "-@RunWith(SpringJUnit4ClassRunner.class)",
                "-@ContextConfiguration(locations = {\"/spring-socialnetwork.xml\"})",
                "-@TransactionConfiguration(transactionManager = \"jpaTransactionManager\")",
                "-public class SocialNetworkServiceLinkedInTest {",
                "-",
                "-  @Inject",
                "-  private SocialNetworkService service = null;",
                "-  @Inject",
                "-  private DataSource dataSource;",
                "-",
                "-  @Inject",
                "-  OrganizationControllerMock organizationController;",
                "-",
                "-  public SocialNetworkServiceLinkedInTest() {",
                "-  }",
                "-",
                "-  @Before",
                "-  public void generalSetUp() throws Exception {",
                "-    ReplacementDataSet dataSet = new ReplacementDataSet(new FlatXmlDataSet(",
                "-        SocialNetworkServiceLinkedInTest.class.getClassLoader()",
                "-            .getResourceAsStream(\"com/silverpeas/social/dao/socialnetwork-dataset.xml\")));",
                "-    dataSet.addReplacementObject(\"[NULL]\", null);",
                "-    IDatabaseConnection connection = new DatabaseConnection(dataSource.getConnection());",
                "-    DatabaseOperation.CLEAN_INSERT.execute(connection, dataSet);",
                "-    doAnswer(new Answer<UserDetail>() {",
                "-      @Override",
                "-      public UserDetail answer(InvocationOnMock invocation) throws Throwable {",
                "-        UserDetail user = new UserDetail();",
                "-        String userId = (String) invocation.getArguments()[0];",
                "-        if (\"11\".equals(userId)) {",
                "-          user.setState(UserState.VALID);",
                "-        } else if (\"12\".equals(userId)) {",
                "-          user.setState(UserState.DELETED);",
                "-        } else {",
                "-          user = null;",
                "-        }",
                "-        return user;",
                "-      }",
                "-    }).when(organizationController.getMock()).getUserDetail(anyString());",
                "-  }",
                "-",
                "-  @Test",
                "-  @Transactional",
                "-  public void testReadByPrimaryKeyUnexistingUser() throws Exception {",
                "-    ExternalAccount account = service.getExternalAccount(SocialNetworkID.LINKEDIN, \"1233\");",
                "-    assertThat(account, nullValue());",
                "-  }",
                "-",
                "-  @Test",
                "-  @Transactional",
                "-  public void testReadByPrimaryKeyValidUser() throws Exception {",
                "-    ExternalAccount account = service.getExternalAccount(SocialNetworkID.LINKEDIN, \"1234\");",
                "-    assertThat(account.getSilverpeasUserId(), is(\"11\"));",
                "-  }",
                "-",
                "-  @Test",
                "-  @Transactional",
                "-  public void testReadByPrimaryKeyDeletedUser() throws Exception {",
                "-    ExternalAccount account = service.getExternalAccount(SocialNetworkID.LINKEDIN, \"1235\");",
                "-    assertThat(account, nullValue());",
                "-  }",
                "-",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/social/invitation/TestInvitationDao.java b/core-library/src/test-awaiting/java/com/silverpeas/social/invitation/TestInvitationDao.java",
                "deleted file mode 100644",
                "index 4fc3aec24f..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/social/invitation/TestInvitationDao.java",
                "+++ /dev/null",
                "@@ -1,248 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.social.invitation;",
                "-",
                "-import java.sql.Connection;",
                "-import java.sql.SQLException;",
                "-import java.util.Calendar;",
                "-import java.util.Date;",
                "-import java.util.GregorianCalendar;",
                "-import java.util.List;",
                "-",
                "-import javax.inject.Inject;",
                "-import javax.sql.DataSource;",
                "-",
                "-import org.dbunit.database.DatabaseConnection;",
                "-import org.dbunit.database.IDatabaseConnection;",
                "-import org.dbunit.dataset.ReplacementDataSet;",
                "-import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;",
                "-import org.dbunit.operation.DatabaseOperation;",
                "-import org.junit.After;",
                "-import org.junit.Before;",
                "-import org.junit.Test;",
                "-import org.junit.runner.RunWith;",
                "-import org.springframework.test.context.ContextConfiguration;",
                "-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;",
                "-",
                "-",
                "-",
                "-import static org.junit.Assert.*;",
                "-import org.silverpeas.core.socialnetwork.invitation.Invitation;",
                "-import org.silverpeas.core.socialnetwork.invitation.InvitationDao;",
                "-import org.silverpeas.util.DBUtil;",
                "-",
                "-/**",
                "- * @author Bensalem Nabil",
                "- */",
                "-@RunWith(SpringJUnit4ClassRunner.class)",
                "-@ContextConfiguration(locations = {\"/spring-invitation-embbed-datasource.xml\"})",
                "-public class TestInvitationDao {",
                "-",
                "-  @Inject",
                "-  private DataSource dataSource;",
                "-  private InvitationDao dao = new InvitationDao();",
                "-",
                "-  @Before",
                "-  public void generalSetUp() throws Exception {",
                "-    IDatabaseConnection connection = new DatabaseConnection(dataSource.getConnection());",
                "-    DatabaseOperation.CLEAN_INSERT.execute(connection, getDataSet());",
                "-    DBUtil.getInstanceForTest(dataSource.getConnection());",
                "-  }",
                "-",
                "-  protected ReplacementDataSet getDataSet() throws Exception {",
                "-    ReplacementDataSet dataSet =",
                "-        new ReplacementDataSet(new FlatXmlDataSetBuilder().build(",
                "-        TestInvitationDao.class.getClassLoader().getResourceAsStream(",
                "-        \"com/silverpeas/social/invitation/socialNetwork_Invitation-dataset.xml\")));",
                "-    dataSet.addReplacementObject(\"[NULL]\", null);",
                "-    return dataSet;",
                "-",
                "-  }",
                "-",
                "-  @After",
                "-  public void clear() throws Exception {",
                "-    IDatabaseConnection connection = new DatabaseConnection(dataSource.getConnection());",
                "-    DatabaseOperation.DELETE_ALL.execute(connection, getDataSet());",
                "-    DBUtil.clearTestInstance();",
                "-  }",
                "-",
                "-  public Connection getConnection() throws SQLException {",
                "-    return this.dataSource.getConnection();",
                "-  }",
                "-",
                "-  /*",
                "-   * Test Create invitation",
                "-   */",
                "-  @Test",
                "-  public void testCreateInvitation() throws Exception {",
                "-    Connection connexion = null;",
                "-    Invitation invitation = new Invitation(4, 6, \"message 50 to 30\", new Date());",
                "-    try {",
                "-      connexion = getConnection();",
                "-      int id = dao.createInvitation(connexion, invitation);",
                "-      assertNotNull(\"Invitation should have been created\", id);",
                "-",
                "-      assertTrue(\"New id is correct\", id > 0);",
                "-      invitation.setId(id);",
                "-      Invitation createdInvitation = dao.getInvitation(connexion, id);",
                "-      assertNotNull(\"Invitation not found in db\", createdInvitation);",
                "-      assertEquals(\"Invitation in db not as expected\", invitation, createdInvitation);",
                "-",
                "-    } finally {",
                "-      DBUtil.close(connexion);",
                "-    }",
                "-  }",
                "-",
                "-  /*",
                "-   * Test delete invitation",
                "-   */",
                "-  @Test",
                "-  public void testDeleteInvitation() throws Exception {",
                "-    Connection connexion = null;",
                "-    Invitation expectedLisaInviteMartha = new Invitation(2, 3, \"lisa to martha\", toDate(2010, 4, 3,",
                "-        11, 23, 15));",
                "-    expectedLisaInviteMartha.setId(2);",
                "-    try {",
                "-      connexion = getConnection();",
                "-      Invitation lisaInviteMartha = dao.getInvitation(connexion, 2);",
                "-      assertNotNull(\"Invitation should exist\", lisaInviteMartha);",
                "-      dao.deleteInvitation(connexion, 2);",
                "-      lisaInviteMartha = dao.getInvitation(connexion, 2);",
                "-      assertNull(\"Invitation should no longer exist\", lisaInviteMartha);",
                "-    } finally {",
                "-      DBUtil.close(connexion);",
                "-    }",
                "-  }",
                "-",
                "-  /*",
                "-   * Test delete same invitations",
                "-   */",
                "-  @Test",
                "-  public void testDeleteSameInvitations() throws Exception {",
                "-    Connection connexion = null;",
                "-    Invitation expectedLisaInviteBart =",
                "-        new Invitation(2, 6, \"lisa to bart\", toDate(2011, 5, 2, 10, 8, 00));",
                "-    expectedLisaInviteBart.setId(7);",
                "-    Invitation expectedBartInviteLisa =",
                "-        new Invitation(3, 2, \"bart to lisa\", toDate(2011, 5, 2, 10, 5, 00));",
                "-    expectedBartInviteLisa.setId(6);",
                "-    try {",
                "-      connexion = getConnection();",
                "-      Invitation lisaInviteBart = dao.getInvitation(connexion, 7);",
                "-      assertNotNull(\"Invitation should exist\", lisaInviteBart);",
                "-      Invitation bartInviteLisa = dao.getInvitation(connexion, 6);",
                "-      assertNotNull(\"Invitation should exist\", bartInviteLisa);",
                "-      dao.deleteSameInvitations(connexion, 7);",
                "-      lisaInviteBart = dao.getInvitation(connexion, 7);",
                "-      assertNull(\"Invitation should no longer exist\", lisaInviteBart);",
                "-      bartInviteLisa = dao.getInvitation(connexion, 6);",
                "-      assertNull(\"Invitation should no longer exist\", bartInviteLisa);",
                "-    } finally {",
                "-      DBUtil.close(connexion);",
                "-    }",
                "-  }",
                "-",
                "-  /*",
                "-   * Test get invitation",
                "-   */",
                "-  @Test",
                "-  public void testGetInvitation() throws Exception {",
                "-    Connection connexion = null;",
                "-    Invitation simpsonInviteLisa = new Invitation(1, 2, \"simpson to lisa\", toDate(2010,",
                "-        Calendar.FEBRUARY, 1, 10, 34, 15));",
                "-    int id = 1;",
                "-    simpsonInviteLisa.setId(1);",
                "-    try {",
                "-      connexion = getConnection();",
                "-      Invitation dbInvitation = dao.getInvitation(connexion, id);",
                "-      assertNotNull(\"Invitation not found in db\", dbInvitation);",
                "-      // assertEquals(\"Invitation in db not as expected\", simpsonInviteLisa, dbInvitation);",
                "-      assertEquals(\"Contact in db not as expected\", simpsonInviteLisa.getId(), dbInvitation.getId());",
                "-      assertEquals(\"Contact in db not as expected\", simpsonInviteLisa.getSenderId(), dbInvitation.",
                "-          getSenderId());",
                "-      assertEquals(\"Contact in db not as expected\", simpsonInviteLisa.getReceiverId(), dbInvitation.",
                "-          getReceiverId());",
                "-      assertEquals(\"Contact in db not as expected\", simpsonInviteLisa.getInvitationDate(),",
                "-          dbInvitation.getInvitationDate());",
                "-    } finally {",
                "-      DBUtil.close(connexion);",
                "-    }",
                "-  }",
                "-",
                "-  /*",
                "-   * Test get All my invitations sent",
                "-   */",
                "-  @Test",
                "-  public void testGetAllMyInvitationsSent() throws Exception {",
                "-    Connection connexion = null;",
                "-    Invitation simpsonInviteLisa = new Invitation(1, 2, \"simpson to lisa\", toDate(2010,",
                "-        Calendar.FEBRUARY, 1, 10, 34, 15));",
                "-    Invitation simpsonInviteNabil = new Invitation(1, 4, \"simpson to nabil\", toDate(2010,",
                "-        Calendar.JULY, 2, 10, 33, 10));",
                "-    int myId = 1;",
                "-    try {",
                "-      connexion = getConnection();",
                "-      List<Invitation> invitations = dao.getAllMyInvitationsSent(connexion, myId);",
                "-      assertNotNull(\"Invitation should exist\", invitations);",
                "-      assertEquals(\"Should have 2 invitations in db\", 2, invitations.size());",
                "-      simpsonInviteLisa.setId(invitations.get(0).getId());",
                "-      assertEquals(\"First should be simpson to lisa\", simpsonInviteLisa, invitations.get(0));",
                "-      simpsonInviteNabil.setId(invitations.get(1).getId());",
                "-      assertEquals(\"Second should be simpson to Nabil\", simpsonInviteNabil, invitations.get(1));",
                "-    } finally {",
                "-      DBUtil.close(connexion);",
                "-    }",
                "-  }",
                "-",
                "-  /*",
                "-   * Test get All my invitations Receive",
                "-   */",
                "-  @Test",
                "-  public void testGetAllMyInvitationsReceive() throws Exception {",
                "-    Connection connexion = null;",
                "-    Invitation marthanviteSimpson = new Invitation(3, 1, \"martha to simpson\", toDate(2010,",
                "-        Calendar.MAY, 11, 15, 25, 32));",
                "-    Invitation jacquesinviteSimpson = new Invitation(5, 1, \"jacques to simpson\", toDate(2010,",
                "-        Calendar.JULY, 2, 10, 33, 10));",
                "-    int myId = 1;",
                "-    try {",
                "-      connexion = getConnection();",
                "-      List<Invitation> invitations =",
                "-          dao.getAllMyInvitationsReceive(connexion, myId);",
                "-      assertNotNull(\"Invitation should exist\", invitations);",
                "-      assertEquals(\"Should have 2 invitations in db\", 2, invitations.size());",
                "-      marthanviteSimpson.setId(invitations.get(0).getId());",
                "-      assertEquals(\"First should be martha to simpson\", marthanviteSimpson, invitations.get(0));",
                "-      jacquesinviteSimpson.setId(invitations.get(1).getId());",
                "-      assertEquals(\"Second should be jacques to simpson\", jacquesinviteSimpson, invitations.get(1));",
                "-    } finally {",
                "-      DBUtil.close(connexion);",
                "-    }",
                "-  }",
                "-",
                "-  private Date toDate(int year, int month, int day, int hour, int minute, int second) {",
                "-    GregorianCalendar calendar = new GregorianCalendar(year, month, day, hour, minute, second);",
                "-    return calendar.getTime();",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/social/invitation/TestInvitationService.java b/core-library/src/test-awaiting/java/com/silverpeas/social/invitation/TestInvitationService.java",
                "deleted file mode 100644",
                "index 7c4f943ab0..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/social/invitation/TestInvitationService.java",
                "+++ /dev/null",
                "@@ -1,208 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.social.invitation;",
                "-",
                "-import java.util.Calendar;",
                "-import java.util.Date;",
                "-import java.util.List;",
                "-",
                "-import com.silverpeas.components.model.AbstractTestDao;",
                "-import org.silverpeas.core.socialnetwork.invitation.Invitation;",
                "-import org.silverpeas.core.socialnetwork.invitation.InvitationService;",
                "-",
                "-import org.silverpeas.util.DBUtil;",
                "-",
                "-/**",
                "- *",
                "- * @author Bensalem Nabil",
                "- */",
                "-public class TestInvitationService extends AbstractTestDao {",
                "-",
                "-  private InvitationService invitationService;",
                "-",
                "- @Override",
                "-  public void setUp() throws Exception {",
                "-    super.setUp();",
                "-    DBUtil.getInstanceForTest(getConnection().getConnection());",
                "-    invitationService = new InvitationService();",
                "-  }",
                "-",
                "-  @Override",
                "-  public void tearDown() throws Exception {",
                "-    super.tearDown();",
                "-    DBUtil.clearTestInstance();",
                "-  }",
                "-",
                "-  @Override",
                "-  protected String getDatasetFileName() {",
                "-    return \"socialNetwork_Invitation-dataset.xml\";",
                "-  }",
                "-",
                "-  /*",
                "-   * Test  Invite(Send Invitation)",
                "-   *",
                "-   *",
                "-   */",
                "-  public void testInvite() throws Exception {",
                "-",
                "-    Invitation newInvitation = new Invitation(4, 2, \"message 50 to 30\", new Date());",
                "-    Invitation existsInvitation = new Invitation(2, 3, \"lisa to martha\", new Date());",
                "-",
                "-    int idNewInvitation = invitationService.invite(newInvitation);",
                "-    int idExistsInvitation = invitationService.invite(existsInvitation);",
                "-    assertTrue(\"Invitation should have been created\", idNewInvitation > 0);",
                "-    assertEquals(\"Old Invitation should have been existe\", idExistsInvitation, -1);",
                "-    assertTrue(\"New id is correct\", idNewInvitation > 5);",
                "-    newInvitation.setId(idNewInvitation);",
                "-    Invitation createdInvitation = invitationService.getInvitation(idNewInvitation);",
                "-    assertNotNull(\"Invitation not found in db\", createdInvitation);",
                "-    assertEquals(\"Invitation in db not as expected\", newInvitation, createdInvitation);",
                "-  }",
                "-  /*",
                "-   * Test ignore invitation",
                "-   *",
                "-   *",
                "-   */",
                "-",
                "-  public void testignoreInvitation() throws Exception {",
                "-",
                "-    Invitation expectedLisaInviteMartha = new Invitation(2, 3, \"lisa to martha\", toDate(2010,",
                "-        Calendar.APRIL, 3, 11, 23, 15));",
                "-    expectedLisaInviteMartha.setId(2);",
                "-    Invitation lisaInviteMartha = invitationService.getInvitation(2);",
                "-    assertNotNull(\"Invitation should exist\", lisaInviteMartha);",
                "-    assertEquals(\"Invitation should be lisa\", expectedLisaInviteMartha, lisaInviteMartha);",
                "-    invitationService.ignoreInvitation(2);",
                "-    lisaInviteMartha = invitationService.getInvitation(2);",
                "-    assertNull(\"Invitation should no longer exist\", lisaInviteMartha);",
                "-",
                "-  }",
                "-",
                "-  /*",
                "-   * Test get invitation",
                "-   *",
                "-   *",
                "-   */",
                "-  public void testGetInvitation() throws Exception {",
                "-    Invitation simpsonInviteLisa = new Invitation(1, 2, \"simpson to lisa\", toDate(2010,",
                "-        Calendar.FEBRUARY, 1, 10, 34, 15));",
                "-    int id = 1;",
                "-    simpsonInviteLisa.setId(1);",
                "-",
                "-    Invitation dbInvitation = invitationService.getInvitation(id);",
                "-    assertNotNull(\"Invitation not found in db\", dbInvitation);",
                "-    assertEquals(\"Contact in db not as expected\", simpsonInviteLisa, dbInvitation);",
                "-",
                "-  }",
                "-  /*",
                "-   * Test get All my invitations sent",
                "-   *",
                "-   *",
                "-   */",
                "-",
                "-  public void testGetAllMyInvitationsSent() throws Exception {",
                "-",
                "-    Invitation simpsonInviteLisa = new Invitation(1, 2, \"simpson to lisa\", toDate(2010,",
                "-        Calendar.FEBRUARY, 1, 10, 34, 15));",
                "-    Invitation simpsonInviteNabil = new Invitation(1, 4, \"simpson to nabil\", toDate(2010,",
                "-        Calendar.JULY, 2, 10, 33, 10));",
                "-    int myId = 1;",
                "-",
                "-    List<Invitation> invitations = invitationService.getAllMyInvitationsSent(myId);",
                "-    assertNotNull(\"Invitation should exist\", invitations);",
                "-    assertEquals(\"Should have 2 invitations in db\", 2, invitations.size());",
                "-    simpsonInviteLisa.setId(invitations.get(0).getId());",
                "-    assertEquals(\"First should be simpson to lisa\", simpsonInviteLisa, invitations.get(0));",
                "-    simpsonInviteNabil.setId(invitations.get(1).getId());",
                "-    assertEquals(\"Second should be simpson to Nabil\", simpsonInviteNabil, invitations.get(1));",
                "-",
                "-  }",
                "-  /*",
                "-   * Test get All my invitations Receive",
                "-   *",
                "-   *",
                "-   */",
                "-",
                "-  public void testGetAllMyInvitationsReceive() throws Exception {",
                "-",
                "-",
                "-    Invitation marthanviteSimpson = new Invitation(3, 1, \"martha to simpson\", toDate(2010,",
                "-        Calendar.MAY, 11, 15, 25, 32));",
                "-",
                "-    Invitation jacquesinviteSimpson = new Invitation(5, 1, \"jacques to simpson\", toDate(2010,",
                "-        Calendar.JULY, 2, 10, 33, 10));",
                "-    int myId = 1;",
                "-",
                "-    List<Invitation> invitations = invitationService.getAllMyInvitationsReceive(myId);",
                "-    assertNotNull(\"Invitation should exist\", invitations);",
                "-    assertEquals(\"Should have 2 invitations in db\", 2, invitations.size());",
                "-    marthanviteSimpson.setId(invitations.get(0).getId());",
                "-    assertEquals(\"First should be martha to simpson\", marthanviteSimpson, invitations.get(0));",
                "-    jacquesinviteSimpson.setId(invitations.get(1).getId());",
                "-    assertEquals(\"Second should be jacques to simpson\", jacquesinviteSimpson, invitations.get(1));",
                "-",
                "-  }",
                "-  /*",
                "-   * Test  Invite(Send Invitation)",
                "-   *",
                "-   *",
                "-   */",
                "-",
                "-  public void testAccepteInvitation() throws Exception {",
                "-",
                "-    Invitation noInvitation = new Invitation(4, 2, \"message 50 to 30\", new Date());",
                "-    noInvitation.setId(9);",
                "-    Invitation existsInvitation = new Invitation(2, 3, \"lisa to martha\", new Date());",
                "-    existsInvitation.setId(2);",
                "-    int idNoRelation = invitationService.accepteInvitation(9);",
                "-    assertTrue(\"Invitation should have not existe so relation should have not been existe \",",
                "-        idNoRelation == -1);",
                "-    int idNewRelation = invitationService.accepteInvitation(2);",
                "-    assertTrue(\"Relation should have been existe\", idNewRelation > 0);",
                "-    //this inviatation existe d\u00c3\u00a9ja comme RelationShip",
                "-    Invitation newInvitation = new Invitation(2, 3, \"lisa to martha\", new Date());",
                "-    int idNewInvitation = invitationService.invite(newInvitation);",
                "-    assertTrue(\"Invitation should have not existe because the relation beween them  already existe \",",
                "-        idNewInvitation == -2);",
                "-",
                "-  }",
                "-",
                "-  private Date toDate(int year, int month, int day, int hour, int minute, int second) {",
                "-    Calendar calendar = Calendar.getInstance();",
                "-    calendar.set(Calendar.YEAR, year);",
                "-    calendar.set(Calendar.MONTH, month);",
                "-    calendar.set(Calendar.DAY_OF_MONTH, day);",
                "-    calendar.set(Calendar.HOUR_OF_DAY, hour);",
                "-    calendar.set(Calendar.MINUTE, minute);",
                "-    calendar.set(Calendar.SECOND, second);",
                "-    calendar.set(Calendar.MILLISECOND, 0);",
                "-    return calendar.getTime();",
                "-",
                "-  }",
                "-",
                "-  @Override",
                "-  protected String getTableCreationFileName() {",
                "-    return \"create-database.sql\";",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/social/mock/OrganizationControllerMock.java b/core-library/src/test-awaiting/java/com/silverpeas/social/mock/OrganizationControllerMock.java",
                "deleted file mode 100644",
                "index 8b0ad21347..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/social/mock/OrganizationControllerMock.java",
                "+++ /dev/null",
                "@@ -1,53 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.social.mock;",
                "-",
                "-",
                "-import javax.inject.Named;",
                "-",
                "-import com.stratelia.webactiv.beans.admin.DefaultOrganizationController;",
                "-import org.silverpeas.core.admin.service.OrganizationController;",
                "-",
                "-import com.stratelia.webactiv.beans.admin.UserDetail;",
                "-",
                "-import static org.mockito.Mockito.mock;",
                "-",
                "-/**",
                "- * @author Yohann Chastagnier",
                "- */",
                "-@Named(\"organizationController\")",
                "-public class OrganizationControllerMock extends DefaultOrganizationController {",
                "-  private static final long serialVersionUID = 1L;",
                "-",
                "-  private final OrganizationController mock = mock(OrganizationController.class);",
                "-",
                "-  @Override",
                "-  public UserDetail getUserDetail(final String sUserId) {",
                "-    return mock.getUserDetail(sUserId);",
                "-  }",
                "-",
                "-  public OrganizationController getMock() {",
                "-    return mock;",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/social/provider/TestProviderSwitch.java b/core-library/src/test-awaiting/java/com/silverpeas/social/provider/TestProviderSwitch.java",
                "deleted file mode 100644",
                "index 0a7188b57a..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/social/provider/TestProviderSwitch.java",
                "+++ /dev/null",
                "@@ -1,202 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.social.provider;",
                "-",
                "-import java.text.ParseException;",
                "-import java.util.ArrayList;",
                "-import java.util.Date;",
                "-import java.util.List;",
                "-",
                "-import org.silverpeas.core.socialnetwork.provider.SocialCommentGalleryInterface;",
                "-import org.junit.After;",
                "-import org.junit.AfterClass;",
                "-import org.junit.Before;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Test;",
                "-",
                "-import org.silverpeas.core.socialnetwork.model.SocialInformation;",
                "-import org.silverpeas.core.socialnetwork.model.SocialInformationType;",
                "-import org.silverpeas.core.socialnetwork.provider.ProviderSwitch;",
                "-import org.silverpeas.core.socialnetwork.provider.SocialEventsInterface;",
                "-import org.silverpeas.core.socialnetwork.provider.SocialGalleryInterface;",
                "-import org.silverpeas.core.socialnetwork.provider.SocialPublicationsInterface;",
                "-import org.silverpeas.core.socialnetwork.provider.SocialCommentPublicationsInterface;",
                "-import org.silverpeas.core.socialnetwork.provider.SocialCommentQuickInfosInterface;",
                "-import org.silverpeas.core.socialnetwork.provider.SocialRelationShipsInterface;",
                "-import org.silverpeas.core.socialnetwork.provider.SocialStatusInterface;",
                "-import org.silverpeas.core.socialnetwork.status.SocialInformationStatus;",
                "-import org.silverpeas.core.socialnetwork.status.Status;",
                "-",
                "-import org.silverpeas.core.util.DateUtil;",
                "-import org.silverpeas.util.exception.SilverpeasException;",
                "-",
                "-import static org.junit.Assert.assertEquals;",
                "-import static org.junit.Assert.assertNotNull;",
                "-import static org.mockito.Mockito.mock;",
                "-import static org.mockito.Mockito.when;",
                "-",
                "-/**",
                "- *",
                "- * @author azzedine",
                "- */",
                "-public class TestProviderSwitch {",
                "-",
                "-  public TestProviderSwitch() {",
                "-  }",
                "-",
                "-  @BeforeClass",
                "-  public static void setUpClass() throws Exception {",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void tearDownClass() throws Exception {",
                "-  }",
                "-",
                "-  @Before",
                "-  public void setUp() {",
                "-  }",
                "-",
                "-  @After",
                "-  public void tearDown() {",
                "-  }",
                "-",
                "-  // TODO add test methods here.",
                "-  // The methods must be annotated with annotation @Test. For example:",
                "-  //",
                "-  @Test",
                "-  public void testGetSocialInformationsList() throws SilverpeasException {",
                "-    Status status = new Status(0, new Date(), \"description\");",
                "-",
                "-    List<SocialInformation> listEvent = new ArrayList<SocialInformation>();",
                "-    for (int i = 0; i < 4; i++) {",
                "-      SocialInformationStatus event = new SocialInformationStatus(status);",
                "-      listEvent.add(event);",
                "-    }",
                "-",
                "-    List<SocialInformation> listPhoto = new ArrayList<SocialInformation>();",
                "-    for (int i = 0; i < 2; i++) {",
                "-      SocialInformationStatus image = new SocialInformationStatus(status);",
                "-      listPhoto.add(image);",
                "-    }",
                "-",
                "-    List<SocialInformation> listCommentPhoto = new ArrayList<SocialInformation>();",
                "-    for (int i = 0; i < 6; i++) {",
                "-      SocialInformationStatus commentImage = new SocialInformationStatus(status);",
                "-      listCommentPhoto.add(commentImage);",
                "-    }",
                "-",
                "-    List<SocialInformation> listPub = new ArrayList<SocialInformation>();",
                "-    for (int i = 0; i < 3; i++) {",
                "-      SocialInformationStatus publi = new SocialInformationStatus(status);",
                "-      listPub.add(publi);",
                "-    }",
                "-",
                "-    List<SocialInformation> listCommentPub = new ArrayList<SocialInformation>();",
                "-    for (int i = 0; i < 5; i++) {",
                "-      SocialInformationStatus commentPubli = new SocialInformationStatus(status);",
                "-      listCommentPub.add(commentPubli);",
                "-    }",
                "-",
                "-    List<SocialInformation> listCommentNews = new ArrayList<SocialInformation>();",
                "-    for (int i = 0; i < 1; i++) {",
                "-      SocialInformationStatus commentNews = new SocialInformationStatus(status);",
                "-      listCommentNews.add(commentNews);",
                "-    }",
                "-",
                "-    List<SocialInformation> listStatus = new ArrayList<SocialInformation>();",
                "-    for (int i = 0; i < 4; i++) {",
                "-      SocialInformationStatus eventStatus = new SocialInformationStatus(status);",
                "-      listStatus.add(eventStatus);",
                "-    }",
                "-",
                "-    List<SocialInformation> listRelationShip = new ArrayList<SocialInformation>();",
                "-    for (int i = 0; i < 2; i++) {",
                "-      SocialInformationStatus relationShip = new SocialInformationStatus(status);",
                "-      listRelationShip.add(relationShip);",
                "-    }",
                "-",
                "-    SocialEventsInterface eventsInterface = mock(SocialEventsInterface.class);",
                "-    SocialGalleryInterface galleryInterface = mock(SocialGalleryInterface.class);",
                "-    SocialCommentGalleryInterface commentGalleryInterface = mock(SocialCommentGalleryInterface.class);",
                "-    SocialPublicationsInterface publicationsInterface = mock(SocialPublicationsInterface.class);",
                "-    SocialCommentPublicationsInterface commentPublicationsInterface = mock(SocialCommentPublicationsInterface.class);",
                "-    SocialCommentQuickInfosInterface commentNewsInterface = mock(SocialCommentQuickInfosInterface.class);",
                "-    SocialStatusInterface statusInterface = mock(SocialStatusInterface.class);",
                "-    SocialRelationShipsInterface socialRelationShipsInterface = mock(",
                "-        SocialRelationShipsInterface.class);",
                "-",
                "-    ProviderSwitch switch1 = new ProviderSwitch();",
                "-    switch1.setSocialEventsInterface(eventsInterface);",
                "-    switch1.setSocialGalleryInterface(galleryInterface);",
                "-    switch1.setSocialCommentGalleryInterface(commentGalleryInterface);",
                "-    switch1.setSocialPublicationsInterface(publicationsInterface);",
                "-    switch1.setSocialCommentPublicationsInterface(commentPublicationsInterface);",
                "-    switch1.setSocialCommentQuickInfosInterface(commentNewsInterface);",
                "-    switch1.setSocialStatusInterface(statusInterface);",
                "-    switch1.setSocialRelationShipsInterface(socialRelationShipsInterface);",
                "-",
                "-    org.silverpeas.core.date.Date begin = null;",
                "-    org.silverpeas.core.date.Date end = null;",
                "-    try {",
                "-      begin = new org.silverpeas.core.date.Date(DateUtil.parse(\"2011/02/28\"));",
                "-      end = new org.silverpeas.core.date.Date(DateUtil.parse(\"2011/02/01\"));",
                "-    } catch (ParseException e) {",
                "-      e.printStackTrace();",
                "-    }",
                "-",
                "-    when(switch1.getSocialEventsInterface().getSocialInformationsList(null, null, begin, end)).thenReturn(",
                "-        listEvent);",
                "-    when(switch1.getSocialGalleryInterface().getSocialInformationsList(null, begin, end)).thenReturn(",
                "-        listPhoto);",
                "-    when(switch1.getSocialCommentGalleryInterface().getSocialInformationsList(null, begin, end)).thenReturn(",
                "-        listCommentPhoto);",
                "-    when(switch1.getSocialPublicationsInterface().getSocialInformationsList(null, begin, end)).thenReturn(",
                "-        listPub);",
                "-    when(switch1.getSocialCommentPublicationsInterface().getSocialInformationsList(null, begin, end)).thenReturn(",
                "-        listCommentPub);",
                "-    when(switch1.getSocialCommentQuickInfosInterface().getSocialInformationsList(null, begin, end)).thenReturn(",
                "-        listCommentNews);",
                "-    when(switch1.getSocialStatusInterface().getSocialInformationsList(null, begin, end)).thenReturn(",
                "-        listStatus);",
                "-    when(switch1.getSocialRelationShipsInterface().getSocialInformationsList(null, begin, end)).thenReturn(",
                "-        listRelationShip);",
                "-",
                "-    List<SocialInformation>  list = switch1.getSocialInformationsList(SocialInformationType.ALL, null,",
                "-        null, begin, end);",
                "-    assertEquals(\"must be equal 23\", list.size(), 23);",
                "-",
                "-    list = switch1.getSocialInformationsList(SocialInformationType.EVENT, null,",
                "-        null, begin, end);",
                "-    assertEquals(\"must be equal 4\", list.size(), 4);",
                "-",
                "-    list = switch1.getSocialInformationsList(SocialInformationType.COMMENTMEDIA, null,",
                "-        null, begin, end);",
                "-    assertEquals(\"must be equal 6\", list.size(), 6);",
                "-",
                "-    list = switch1.getSocialInformationsList(SocialInformationType.COMMENTNEWS, null,",
                "-        null, begin, end);",
                "-    assertEquals(\"must be equal 1\", list.size(), 1);",
                "-",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/social/relationShip/TestRelationShipDao.java b/core-library/src/test-awaiting/java/com/silverpeas/social/relationShip/TestRelationShipDao.java",
                "deleted file mode 100644",
                "index 9eea2ee4fa..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/social/relationShip/TestRelationShipDao.java",
                "+++ /dev/null",
                "@@ -1,181 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.social.relationShip;",
                "-",
                "-import java.util.Calendar;",
                "-import java.util.Date;",
                "-import java.util.List;",
                "-",
                "-import com.silverpeas.components.model.AbstractTestDao;",
                "-import org.silverpeas.core.socialnetwork.model.SocialInformation;",
                "-import org.silverpeas.core.socialnetwork.relationship.RelationShip;",
                "-import org.silverpeas.core.socialnetwork.relationship.RelationShipDao;",
                "-",
                "-import org.silverpeas.util.DBUtil;",
                "-import org.silverpeas.core.util.DateUtil;",
                "-",
                "-import org.dbunit.database.IDatabaseConnection;",
                "-",
                "-import static org.hamcrest.Matchers.*;",
                "-import static org.junit.Assert.assertThat;",
                "-",
                "-/**",
                "- * @author Bensalem Nabil",
                "- */",
                "-public class TestRelationShipDao extends AbstractTestDao {",
                "-",
                "-  private RelationShipDao dao;",
                "-",
                "-  @Override",
                "-  public void setUp() throws Exception {",
                "-    super.setUp();",
                "-    DBUtil.getInstanceForTest(getConnection().getConnection());",
                "-    dao = new RelationShipDao();",
                "-  }",
                "-",
                "-  @Override",
                "-  public void tearDown() throws Exception {",
                "-    super.tearDown();",
                "-    DBUtil.clearTestInstance();",
                "-  }",
                "-",
                "-  @Override",
                "-  protected String getDatasetFileName() {",
                "-    return \"socialNetwork_Relationship-dataset.xml\";",
                "-  }",
                "-",
                "-  /*",
                "-   * Test Create RelationShip",
                "-   */",
                "-  public void testCreateRelationShip() throws Exception {",
                "-    IDatabaseConnection connexion = getConnection();",
                "-    RelationShip newRelationShip = new RelationShip(5, 6, 0, toDate(2010, Calendar.FEBRUARY, 1, 10,",
                "-        34, 15), 6);",
                "-    int id = dao.createRelationShip(connexion.getConnection(), newRelationShip);",
                "-    assertThat(id, is(notNullValue()));",
                "-    assertThat(id, is(greaterThan(0)));",
                "-    newRelationShip.setId(id);",
                "-    RelationShip createdRelationShip = dao.getRelationShip(connexion.getConnection(),",
                "-        newRelationShip.getUser1Id(), newRelationShip.getUser2Id());",
                "-    assertThat(createdRelationShip, is(notNullValue()));",
                "-    assertThat(createdRelationShip, is(newRelationShip));",
                "-  }",
                "-",
                "-  /*",
                "-   * Test delete RelationShip",
                "-   */",
                "-  public void testDeleteRelationShip() throws Exception {",
                "-    IDatabaseConnection connexion = getConnection();",
                "-    RelationShip expectedRelationShip = new RelationShip(1, 2, 0, toDate(2010, Calendar.FEBRUARY, 1,",
                "-        10, 34, 15), 2);",
                "-    expectedRelationShip.setId(1);",
                "-    RelationShip relationShip = dao.getRelationShip(connexion.getConnection(), 1, 2);",
                "-    assertThat(relationShip, is(notNullValue()));",
                "-    assertThat(relationShip, is(expectedRelationShip));",
                "-    boolean endAction = dao.deleteRelationShip(connexion.getConnection(), 1, 2);",
                "-    assertThat(endAction, is(true));",
                "-    relationShip = dao.getRelationShip(connexion.getConnection(), 1, 2);",
                "-    assertThat(relationShip, is(nullValue()));",
                "-  }",
                "-",
                "-  /*",
                "-   * Test get RelationShip",
                "-   */",
                "-  public void testGetRelationShip() throws Exception {",
                "-    IDatabaseConnection connexion = getConnection();",
                "-    RelationShip expectedRelationShip = new RelationShip(1, 2, 0, toDate(2010, Calendar.FEBRUARY, 1,",
                "-        10, 34, 15), 2);",
                "-    expectedRelationShip.setId(1);",
                "-    RelationShip dbrelationShip = dao.getRelationShip(connexion.getConnection(),",
                "-        expectedRelationShip.getUser1Id(), expectedRelationShip.getUser2Id());",
                "-    assertThat(dbrelationShip, is(notNullValue()));",
                "-    assertThat(dbrelationShip, is(expectedRelationShip));",
                "-    boolean isInRelationShip = dao.isInRelationShip(connexion.getConnection(), expectedRelationShip.",
                "-        getUser1Id(), expectedRelationShip.getUser2Id());",
                "-    assertThat(isInRelationShip, is(true));",
                "-  }",
                "-",
                "-  /*",
                "-   * Test get RelationShipById",
                "-   */",
                "-  public void testGetRelationShipById() throws Exception {",
                "-    IDatabaseConnection connexion = getConnection();",
                "-",
                "-    RelationShip expectedRelationShip = new RelationShip(1, 2, 0, toDate(2010, Calendar.FEBRUARY, 1,",
                "-        10, 34, 15), 2);",
                "-    expectedRelationShip.setId(1);",
                "-    RelationShip dbrelationShip = dao.getRelationShip(connexion.getConnection(),",
                "-        expectedRelationShip.getId());",
                "-    assertNotNull(\"RelationShip not found in db\", dbrelationShip);",
                "-    assertEquals(\"RelationShip in db not as expected\", expectedRelationShip, dbrelationShip);",
                "-    boolean isInRelationShip = dao.isInRelationShip(connexion.getConnection(),",
                "-        expectedRelationShip.getUser1Id(), expectedRelationShip.getUser2Id());",
                "-    assertTrue(\"must be true\", isInRelationShip);",
                "-  }",
                "-",
                "-  /*",
                "-   * Test get All my RelationShip sent",
                "-   */",
                "-  public void testGetAllMyRelationShips() throws Exception {",
                "-    IDatabaseConnection connexion = getConnection();",
                "-",
                "-    RelationShip expectedRelationShip1 = new RelationShip(1, 2, 0, toDate(2010, Calendar.FEBRUARY,",
                "-        1, 10, 34, 15), 2);",
                "-    expectedRelationShip1.setId(1);",
                "-    RelationShip expectedRelationShip2 =",
                "-        new RelationShip(1, 3, 0, toDate(2010, Calendar.MAY, 11, 15, 25, 32), 3);",
                "-    expectedRelationShip2.setId(4);",
                "-    int myId = 1;",
                "-    List<RelationShip> relationShips = dao.getAllMyRelationShips(connexion.getConnection(), myId);",
                "-    assertNotNull(\"Relationships should exist\", relationShips);",
                "-    assertEquals(\"Should have 2 relationships in db\", 2, relationShips.size());",
                "-    assertEquals(\"First should be 1 et 2\", expectedRelationShip1, relationShips.get(0));",
                "-    assertEquals(\"Second should be 1 et 3\", expectedRelationShip2, relationShips.get(1));",
                "-",
                "-    Date begin = DateUtil.parse(\"2010/12/31\");",
                "-    Date end = DateUtil.parse(\"2010/01/01\");",
                "-",
                "-    List<SocialInformation> listSIR = dao.getAllMyRelationShips(connexion.",
                "-        getConnection(), myId + \"\", begin, end);",
                "-    assertNotNull(\"Relationships should exist\", listSIR);",
                "-",
                "-  }",
                "-",
                "-  private Date toDate(int year, int month, int day, int hour, int minute, int second) {",
                "-    Calendar calend = Calendar.getInstance();",
                "-    calend.set(Calendar.YEAR, year);",
                "-    calend.set(Calendar.MONTH, month);",
                "-    calend.set(Calendar.DAY_OF_MONTH, day);",
                "-    calend.set(Calendar.HOUR_OF_DAY, hour);",
                "-    calend.set(Calendar.MINUTE, minute);",
                "-    calend.set(Calendar.SECOND, second);",
                "-    calend.set(Calendar.MILLISECOND, 0);",
                "-    return calend.getTime();",
                "-  }",
                "-",
                "-  @Override",
                "-  protected String getTableCreationFileName() {",
                "-    return \"create-database.sql\";",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/social/relationShip/TestRelationShipService.java b/core-library/src/test-awaiting/java/com/silverpeas/social/relationShip/TestRelationShipService.java",
                "deleted file mode 100644",
                "index b70995de89..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/social/relationShip/TestRelationShipService.java",
                "+++ /dev/null",
                "@@ -1,131 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.social.relationShip;",
                "-",
                "-import java.util.Calendar;",
                "-import java.util.Date;",
                "-import java.util.List;",
                "-",
                "-import com.silverpeas.components.model.AbstractTestDao;",
                "-import org.silverpeas.core.socialnetwork.relationship.RelationShip;",
                "-import org.silverpeas.core.socialnetwork.relationship.RelationShipService;",
                "-",
                "-import org.junit.Test;",
                "-",
                "-import static org.hamcrest.Matchers.*;",
                "-import static org.junit.Assert.assertThat;",
                "-",
                "-/**",
                "- *",
                "- * @author Bensalem Nabil",
                "- */",
                "-public class TestRelationShipService extends AbstractTestDao {",
                "-",
                "-  private RelationShipService dao;",
                "-",
                "-  @Override",
                "-  public void setUp() throws Exception {",
                "-    super.setUp();",
                "-    dao = new RelationShipService();",
                "-  }",
                "-",
                "-  @Override",
                "-  protected String getDatasetFileName() {",
                "-    return \"socialNetwork_Relationship-dataset.xml\";",
                "-  }",
                "-",
                "-  /**",
                "-   * Test remove RelationShip",
                "-   */",
                "-  @Test",
                "-  public void testRemoveRelationShip() throws Exception {",
                "-    RelationShip expectedRelationShip1 = new RelationShip(1, 2, 0, toDate(2010, Calendar.FEBRUARY,",
                "-        1, 10, 34, 15), 2);",
                "-    RelationShip expectedRelationShip2 = new RelationShip(2, 1, 0, toDate(2010, Calendar.FEBRUARY,",
                "-        1, 10, 34, 15), 1);",
                "-    expectedRelationShip1.setId(1);",
                "-    expectedRelationShip2.setId(2);",
                "-    RelationShip relationShip1 = dao.getRelationShip(1, 2);",
                "-    assertThat(relationShip1, is(notNullValue()));",
                "-    assertThat(relationShip1, is(expectedRelationShip1));",
                "-    RelationShip relationShip2 = dao.getRelationShip(2, 1);",
                "-    assertThat(relationShip2, is(notNullValue()));",
                "-    assertThat(relationShip2, is(expectedRelationShip2));",
                "-    dao.removeRelationShip(1, 2);",
                "-    relationShip1 = dao.getRelationShip(1, 2);",
                "-    assertThat(relationShip1, is(nullValue()));",
                "-    relationShip2 = dao.getRelationShip(2, 1);",
                "-    assertThat(relationShip2, is(nullValue()));",
                "-",
                "-  }",
                "-",
                "-  /**",
                "-   * Test get RelationShip",
                "-   */",
                "-  public void testGetRelationShip() throws Exception {",
                "-    RelationShip expectedRelationShip = new RelationShip(1, 2, 0,",
                "-        toDate(2010, Calendar.FEBRUARY, 01, 10, 34, 15), 2);",
                "-    expectedRelationShip.setId(1);",
                "-    RelationShip dbrelationShip = dao.getRelationShip(expectedRelationShip.getUser1Id(),",
                "-        expectedRelationShip.getUser2Id());",
                "-    assertThat(dbrelationShip, is(notNullValue()));",
                "-    assertThat(dbrelationShip, is(expectedRelationShip));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test get All my RelationShip sent",
                "-   */",
                "-  public void testGetAllMyRelationShips() throws Exception {",
                "-",
                "-    RelationShip expectedRelationShip1 = new RelationShip(1, 2, 0, toDate(2010, Calendar.FEBRUARY,",
                "-        1, 10, 34, 15), 2);",
                "-    expectedRelationShip1.setId(1);",
                "-    RelationShip expectedRelationShip2 = new RelationShip(1, 3, 0,",
                "-        toDate(2010, Calendar.MAY, 11, 15, 25, 32), 3);",
                "-    expectedRelationShip2.setId(4);",
                "-    int myId = 1;",
                "-    List<RelationShip> relationShips = dao.getAllMyRelationShips(myId);",
                "-    assertThat(relationShips, is(notNullValue()));",
                "-    assertThat(relationShips, hasSize(2));",
                "-    assertThat(relationShips, contains(expectedRelationShip1, expectedRelationShip2));",
                "-",
                "-  }",
                "-",
                "-  private Date toDate(int year, int month, int day, int hour, int minute, int second) {",
                "-    Calendar calend = Calendar.getInstance();",
                "-    calend.set(Calendar.YEAR, year);",
                "-    calend.set(Calendar.MONTH, month);",
                "-    calend.set(Calendar.DAY_OF_MONTH, day);",
                "-    calend.set(Calendar.HOUR_OF_DAY, hour);",
                "-    calend.set(Calendar.MINUTE, minute);",
                "-    calend.set(Calendar.SECOND, second);",
                "-    calend.set(Calendar.MILLISECOND, 0);",
                "-    return calend.getTime();",
                "-  }",
                "-",
                "-  @Override",
                "-  protected String getTableCreationFileName() {",
                "-    return \"create-database.sql\";",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/silverpeas/social/status/TestSatusDao.java b/core-library/src/test-awaiting/java/com/silverpeas/social/status/TestSatusDao.java",
                "deleted file mode 100644",
                "index f9f0652e20..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/silverpeas/social/status/TestSatusDao.java",
                "+++ /dev/null",
                "@@ -1,164 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.silverpeas.social.status;",
                "-",
                "-import java.util.Calendar;",
                "-import java.util.Date;",
                "-import java.util.GregorianCalendar;",
                "-",
                "-import com.silverpeas.components.model.AbstractTestDao;",
                "-import org.silverpeas.core.socialnetwork.status.Status;",
                "-import org.silverpeas.core.socialnetwork.status.StatusDao;",
                "-",
                "-import org.silverpeas.util.DBUtil;",
                "-",
                "-import org.dbunit.database.IDatabaseConnection;",
                "-import org.junit.Test;",
                "-",
                "-public class TestSatusDao extends AbstractTestDao {",
                "-",
                "-  private StatusDao dao;",
                "-",
                "-  @Override",
                "-  public void setUp() throws Exception {",
                "-    super.setUp();",
                "-    dao = new org.silverpeas.core.socialnetwork.status.StatusDao();",
                "-    DBUtil.getInstanceForTest(getConnection().getConnection());",
                "-  }",
                "-",
                "-",
                "-  @Override",
                "-  public void tearDown() throws Exception {",
                "-    super.tearDown();",
                "-    DBUtil.clearTestInstance();",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testChangeStatus() throws Exception {",
                "-    IDatabaseConnection connexion = null;",
                "-    Status status = new Status(1, new Date(), \"je teste\");",
                "-",
                "-    try {",
                "-      connexion = getConnection();",
                "-      int id = dao.changeStatus(connexion.getConnection(), status);",
                "-      assertNotNull(\"Status should have been created\", id);",
                "-      assertTrue(\"New id is correct\", id > 0);",
                "-      status.setId(id);",
                "-      Status nouveauStatus = dao.getStatus(connexion.getConnection(), id);",
                "-      assertNotNull(\"Status not found in db\", nouveauStatus);",
                "-      assertEquals(\"Status in db not as expected\", status, nouveauStatus);",
                "-    } finally {",
                "-      closeConnection(connexion);",
                "-    }",
                "-",
                "-  }",
                "-",
                "-  public void testGetStatus() throws Exception {",
                "-    IDatabaseConnection connexion = null;",
                "-    Status status = new Status(1, toDate(2010, Calendar.FEBRUARY, 1, 10, 34, 15), \"je suis l\u00c3\u00a0\");",
                "-    int id = 1;",
                "-    status.setId(id);",
                "-    try {",
                "-      connexion = getConnection();",
                "-      Status dbStatus = dao.getStatus(connexion.getConnection(), id);",
                "-      assertNotNull(\"Status not found in db\", dbStatus);",
                "-      assertEquals(\"Status in db not as expected\", status, dbStatus);",
                "-",
                "-    } finally {",
                "-      closeConnection(connexion);",
                "-    }",
                "-  }",
                "-",
                "-  public void testGetLastStatus() throws Exception {",
                "-    IDatabaseConnection connexion = null;",
                "-    Status status = new Status(1, toDate(2010, Calendar.JULY, 2, 10, 33, 10),",
                "-        \"travaille sur readmine\");",
                "-    status.setId(4);",
                "-",
                "-    int userid = 1;",
                "-",
                "-    try {",
                "-      connexion = getConnection();",
                "-      Status lastStatus = dao.getLastStatus(connexion.getConnection(), userid);",
                "-      assertNotNull(\"Status not found in db\", lastStatus);",
                "-      assertEquals(status.getId(), lastStatus.getId());",
                "-      assertEquals(\"Status in db not as expected\", status, lastStatus);",
                "-",
                "-    } finally {",
                "-      closeConnection(connexion);",
                "-    }",
                "-",
                "-  }",
                "-",
                "-  public void testDeleteStatus() throws Exception {",
                "-    IDatabaseConnection connexion = null;",
                "-    Status expectedStatus = new Status(2, toDate(2010, Calendar.MAY, 11, 15, 25, 32), \"cong\u00c3\u00a9\");",
                "-    expectedStatus.setId(2);",
                "-    try {",
                "-      connexion = getConnection();",
                "-      Status status = dao.getStatus(connexion.getConnection(), 2);",
                "-      assertNotNull(\"Status should exist\", status);",
                "-      dao.deleteStatus(connexion.getConnection(), 2);",
                "-      status = dao.getStatus(connexion.getConnection(), 2);",
                "-      assertNull(\"Status should no longer exist\", status);",
                "-    } finally {",
                "-      closeConnection(connexion);",
                "-    }",
                "-",
                "-  }",
                "-",
                "-  public void testUpdateStatus() throws Exception {",
                "-    IDatabaseConnection connexion = null;",
                "-    Status updateStatus = new Status(2, toDate(2010, Calendar.MAY, 11, 15, 25, 32), \"malade\");",
                "-    updateStatus.setId(3);",
                "-    try {",
                "-      connexion = getConnection();",
                "-      Status status = dao.getStatus(connexion.getConnection(), 3);",
                "-      assertNotNull(\"Status should exist\", status);",
                "-      dao.updateStatus(connexion.getConnection(), updateStatus);",
                "-      status = dao.getStatus(connexion.getConnection(), 3);",
                "-      assertEquals(status, updateStatus);",
                "-",
                "-    } finally {",
                "-      closeConnection(connexion);",
                "-    }",
                "-",
                "-  }",
                "-",
                "-  @Override",
                "-  protected String getDatasetFileName() {",
                "-    return \"socialNetwork_Status-dataset.xml\";",
                "-  }",
                "-",
                "-  private Date toDate(int year, int month, int day, int hour, int minute, int second) {",
                "-    GregorianCalendar calendar = new GregorianCalendar(year, month, day, hour, minute, second);",
                "-    return calendar.getTime();",
                "-",
                "-  }",
                "-",
                "-  @Override",
                "-  protected String getTableCreationFileName() {",
                "-    return \"create-database.sql\";",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/stratelia/silverpeas/domains/ldapdriver/LDAPGroupAllRootTest.java b/core-library/src/test-awaiting/java/com/stratelia/silverpeas/domains/ldapdriver/LDAPGroupAllRootTest.java",
                "deleted file mode 100644",
                "index fc1fdace6e..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/stratelia/silverpeas/domains/ldapdriver/LDAPGroupAllRootTest.java",
                "+++ /dev/null",
                "@@ -1,349 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.admin.domain.driver.ldapdriver;",
                "-",
                "-import java.util.List;",
                "-",
                "-import org.silverpeas.util.Charsets;",
                "-",
                "-import com.stratelia.webactiv.beans.admin.AdminException;",
                "-import com.stratelia.webactiv.beans.admin.Group;",
                "-",
                "-import com.novell.ldap.LDAPAttribute;",
                "-import com.novell.ldap.LDAPEntry;",
                "-import org.junit.After;",
                "-import org.junit.Before;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.ClassRule;",
                "-import org.junit.Test;",
                "-",
                "-import static org.hamcrest.Matchers.*;",
                "-import static org.junit.Assert.assertThat;",
                "-import static org.mockito.Mockito.mock;",
                "-import static org.mockito.Mockito.when;",
                "-",
                "-@CreateLdapServer(ldifConfig = \"opendj/config/config.ldif\", serverHome = \"opendj\", ldifFile",
                "-    = \"silverpeas-ldap.ldif\")",
                "-public class LDAPGroupAllRootTest {",
                "-",
                "-  @ClassRule",
                "-  public static OpenDJRule ldapRule = new OpenDJRule();",
                "-  private static final LDAPSettings settings = new LDAPSettings();",
                "-  private String connectionId;",
                "-  private LDAPGroupAllRoot instance = new LDAPGroupAllRoot();",
                "-",
                "-  public LDAPGroupAllRootTest() {",
                "-  }",
                "-",
                "-  @BeforeClass",
                "-  public static void prepareSettings() throws Exception {",
                "-    settings.configuration.setLdapHost(\"localhost\");",
                "-    settings.configuration.setLdapPort(1389);",
                "-    settings.LDAPSearchRecurs = true;",
                "-    settings.LDAPUserBaseDN = \"dc=silverpeas,dc=org\";",
                "-    settings.configuration.setUsername(\"cn=Directory Manager,cn=Root DNs,cn=config\");",
                "-    settings.configuration.setPassword(\"password\".getBytes(Charsets.UTF_8));",
                "-    settings.LDAPOpAttributesUsed = true;",
                "-",
                "-    settings.usersClassName = \"person\";",
                "-    settings.usersFilter = \"\";",
                "-    settings.usersIdField = \"uid\";",
                "-    settings.usersLoginField = \"uid\";",
                "-    settings.usersFirstNameField = \"givenName\";",
                "-    settings.usersLastNameField = \"sn\";",
                "-    settings.usersEmailField = \"mail\";",
                "-",
                "-    settings.groupsClassName = \"groupOfUniqueNames\";",
                "-    settings.groupsFilter = \"(uniqueMember=*)\";",
                "-    settings.groupsIdField = \"entryUUID\";",
                "-    settings.groupsType = \"org.silverpeas.core.admin.domain.driver.ldapdriver.LDAPGroupAllRoot\";",
                "-    settings.groupsMemberField = \"uniqueMember\";",
                "-    settings.groupsSpecificGroupsBaseDN = \"dc=silverpeas,dc=org\";",
                "-    settings.groupsInheritProfiles = false;",
                "-    settings.groupsNamingDepth = 2;",
                "-    settings.groupsIncludeEmptyGroups = true;",
                "-    settings.groupsNameField = \"cn\";",
                "-    settings.groupsDescriptionField = \"description\";",
                "-",
                "-    settings.LDAPDefaultSearchConstraints = settings.getSearchConstraints(true);",
                "-    settings.LDAPDefaultConstraints = settings.getConstraints(true);",
                "-    settings.sortControlSupported = false;",
                "-  }",
                "-",
                "-  @Before",
                "-  public void prepareConnection() throws Exception {",
                "-    connectionId = LDAPUtility.openConnection(settings);",
                "-    LDAPSynchroCache cache = new LDAPSynchroCache();",
                "-    cache.init(settings);",
                "-    instance.init(settings, cache);",
                "-  }",
                "-",
                "-  @After",
                "-  public void closeConnection() throws AdminException {",
                "-    LDAPUtility.closeConnection(connectionId);",
                "-",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getMemberGroupIds method, of class LDAPGroupAllRoot.",
                "-   */",
                "-  @Test",
                "-  public void testGetMemberGroupIds() throws Exception {",
                "-    String userId = \"user.1\";",
                "-    boolean isGroup = false;",
                "-    List<String> result = instance.getMemberGroupIds(connectionId, userId, isGroup);",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, hasSize(3));",
                "-    assertThat(result, contains(\"a95b39de-ea91-45cb-9af0-890670075d54\",",
                "-        \"b475049f-f640-400a-b643-3a8d047e8d57\", \"04d0ceff-2ccc-4c78-8c55-e819875cb0ae\"));",
                "-    userId = \"user.3\";",
                "-    result = instance.getMemberGroupIds(connectionId, userId, isGroup);",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, hasSize(1));",
                "-    assertThat(result, contains(\"a95b39de-ea91-45cb-9af0-890670075d54\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getGroupMemberGroupIds method, of class LDAPGroupAllRoot.",
                "-   */",
                "-  @Test",
                "-  public void testGetGroupMemberGroupIds() throws Exception {",
                "-    String groupId = \"a95b39de-ea91-45cb-9af0-890670075d54\";",
                "-    String[] result = instance.getGroupMemberGroupIds(connectionId, groupId);",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, arrayWithSize(0));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getUserMemberGroupIds method, of class LDAPGroupAllRoot.",
                "-   */",
                "-  @Test",
                "-  public void testGetUserMemberGroupIds() throws Exception {",
                "-    String userId = \"user.9\";",
                "-    String[] result = instance.getUserMemberGroupIds(connectionId, userId);",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, arrayWithSize(0));",
                "-",
                "-    userId = \"user.1\";",
                "-    result = instance.getUserMemberGroupIds(connectionId, userId);",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, arrayWithSize(3));",
                "-    assertThat(result, arrayContaining(\"a95b39de-ea91-45cb-9af0-890670075d54\",",
                "-        \"b475049f-f640-400a-b643-3a8d047e8d57\", \"04d0ceff-2ccc-4c78-8c55-e819875cb0ae\"));",
                "-",
                "-    userId = \"user.3\";",
                "-    result = instance.getUserMemberGroupIds(connectionId, userId);",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, arrayWithSize(1));",
                "-    assertThat(result, arrayContaining(\"a95b39de-ea91-45cb-9af0-890670075d54\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getUserIds method, of class LDAPGroupAllRoot.",
                "-   */",
                "-  @Test",
                "-  public void testGetUserIds() throws Exception {",
                "-    LDAPEntry groupEntry = mock(LDAPEntry.class);",
                "-    LDAPAttribute uuidAttribute = mock(LDAPAttribute.class);",
                "-    when(uuidAttribute.getName()).thenReturn(\"entryUUID\");",
                "-    when(uuidAttribute.getStringValue()).thenReturn(\"a95b39de-ea91-45cb-9af0-890670075d54\");",
                "-    when(uuidAttribute.getStringValueArray()).thenReturn(new String[]{",
                "-      \"a95b39de-ea91-45cb-9af0-890670075d54\"});",
                "-    when(uuidAttribute.getByteValue()).thenReturn(\"a95b39de-ea91-45cb-9af0-890670075d54\".getBytes(",
                "-        Charsets.UTF_8));",
                "-    when(uuidAttribute.size()).thenReturn(\"a95b39de-ea91-45cb-9af0-890670075d54\".getBytes(",
                "-        Charsets.UTF_8).length);",
                "-",
                "-    LDAPAttribute uniqueMembers = mock(LDAPAttribute.class);",
                "-    when(uniqueMembers.getName()).thenReturn(\"uniqueMember\");",
                "-    when(uniqueMembers.getStringValueArray()).thenReturn(new String[]{",
                "-      \"uid=user.0,ou=People,dc=silverpeas,dc=org\",",
                "-      \"uid=user.1,ou=People,dc=silverpeas,dc=org\",",
                "-      \"uid=user.2,ou=People,dc=silverpeas,dc=org\",",
                "-      \"uid=user.3,ou=People,dc=silverpeas,dc=org\",",
                "-      \"uid=user.4,ou=People,dc=silverpeas,dc=org\"",
                "-    });",
                "-    when(groupEntry.getAttribute(\"entryUUID\")).thenReturn(uuidAttribute);",
                "-    when(groupEntry.getAttribute(\"uniqueMember\")).thenReturn(uniqueMembers);",
                "-",
                "-    String[] result = instance.getUserIds(connectionId, groupEntry);",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, arrayWithSize(6));",
                "-    assertThat(result, arrayContainingInAnyOrder(\"user.0\", \"user.1\", \"user.2\", \"user.3\", \"user.4\",",
                "-        \"user.5\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getTRUEUserIds method, of class LDAPGroupAllRoot.",
                "-   */",
                "-  @Test",
                "-  public void testGetTRUEUserIds() throws Exception {",
                "-    LDAPEntry groupEntry = mock(LDAPEntry.class);",
                "-    LDAPAttribute uuidAttribute = mock(LDAPAttribute.class);",
                "-    when(uuidAttribute.getName()).thenReturn(\"entryUUID\");",
                "-    when(uuidAttribute.getStringValue()).thenReturn(\"a95b39de-ea91-45cb-9af0-890670075d54\");",
                "-    when(uuidAttribute.getStringValueArray()).thenReturn(new String[]{",
                "-      \"a95b39de-ea91-45cb-9af0-890670075d54\"});",
                "-    when(uuidAttribute.getByteValue()).thenReturn(\"a95b39de-ea91-45cb-9af0-890670075d54\".getBytes(",
                "-        Charsets.UTF_8));",
                "-    when(uuidAttribute.size()).thenReturn(\"a95b39de-ea91-45cb-9af0-890670075d54\".getBytes(",
                "-        Charsets.UTF_8).length);",
                "-",
                "-    LDAPAttribute uniqueMembers = mock(LDAPAttribute.class);",
                "-    when(uniqueMembers.getName()).thenReturn(\"uniqueMember\");",
                "-    when(uniqueMembers.getStringValueArray()).thenReturn(new String[]{",
                "-      \"uid=user.0,ou=People,dc=silverpeas,dc=org\",",
                "-      \"uid=user.1,ou=People,dc=silverpeas,dc=org\",",
                "-      \"uid=user.2,ou=People,dc=silverpeas,dc=org\",",
                "-      \"uid=user.3,ou=People,dc=silverpeas,dc=org\",",
                "-      \"uid=user.4,ou=People,dc=silverpeas,dc=org\"",
                "-    });",
                "-    when(groupEntry.getAttribute(\"entryUUID\")).thenReturn(uuidAttribute);",
                "-    when(groupEntry.getAttribute(\"uniqueMember\")).thenReturn(uniqueMembers);",
                "-    List<String> result = instance.getTRUEUserIds(connectionId, groupEntry);",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, hasSize(5));",
                "-    assertThat(result, containsInAnyOrder(\"user.0\", \"user.1\", \"user.2\", \"user.3\", \"user.4\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getChildGroupsEntry method, of class LDAPGroupAllRoot.",
                "-   */",
                "-  @Test",
                "-  public void testGetChildGroupsEntry() throws Exception {",
                "-    LDAPEntry[] result = instance.getChildGroupsEntry(connectionId,",
                "-        \"a95b39de-ea91-45cb-9af0-890670075d54\", \"\");",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, arrayWithSize(0));",
                "-    result = instance.getChildGroupsEntry(connectionId, \"\", \"\");",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, arrayWithSize(3));",
                "-    assertThat(result[0].getDN(), is(\"cn=Groupe 1,dc=silverpeas,dc=org\"));",
                "-    assertThat(result[1].getDN(), is(\"cn=Groupe 2,dc=silverpeas,dc=org\"));",
                "-    assertThat(result[2].getDN(), is(\"cn=Groupe 3,cn=Groupe 1,dc=silverpeas,dc=org\"));",
                "-",
                "-    result = instance.getChildGroupsEntry(connectionId,",
                "-        \"b475049f-f640-400a-b643-3a8d047e8d57\", \"\");",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, arrayWithSize(0));",
                "-    result = instance.getChildGroupsEntry(connectionId, \"\", \"\");",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, arrayWithSize(3));",
                "-    assertThat(result[0].getDN(), is(\"cn=Groupe 1,dc=silverpeas,dc=org\"));",
                "-    assertThat(result[1].getDN(), is(\"cn=Groupe 2,dc=silverpeas,dc=org\"));",
                "-    assertThat(result[2].getDN(), is(\"cn=Groupe 3,cn=Groupe 1,dc=silverpeas,dc=org\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getTRUEChildGroupsEntry method, of class LDAPGroupAllRoot.",
                "-   */",
                "-  @Test",
                "-  public void testGetTRUEChildGroupsEntry() {",
                "-    LDAPEntry groupEntry = mock(LDAPEntry.class);",
                "-    LDAPAttribute uuidAttribute = mock(LDAPAttribute.class);",
                "-    when(uuidAttribute.getName()).thenReturn(\"entryUUID\");",
                "-    when(uuidAttribute.getStringValue()).thenReturn(\"a95b39de-ea91-45cb-9af0-890670075d54\");",
                "-    when(uuidAttribute.getStringValueArray()).thenReturn(new String[]{",
                "-      \"a95b39de-ea91-45cb-9af0-890670075d54\"});",
                "-    when(uuidAttribute.getByteValue()).thenReturn(\"a95b39de-ea91-45cb-9af0-890670075d54\".getBytes(",
                "-        Charsets.UTF_8));",
                "-    when(uuidAttribute.size()).thenReturn(\"a95b39de-ea91-45cb-9af0-890670075d54\".getBytes(",
                "-        Charsets.UTF_8).length);",
                "-    when(groupEntry.getDN()).thenReturn(\"cn=Groupe 1,dc=silverpeas,dc=org\");",
                "-",
                "-    LDAPAttribute uniqueMembers = mock(LDAPAttribute.class);",
                "-    when(uniqueMembers.getName()).thenReturn(\"uniqueMember\");",
                "-    when(uniqueMembers.getStringValueArray()).thenReturn(new String[]{",
                "-      \"uid=user.0,ou=People,dc=silverpeas,dc=org\",",
                "-      \"uid=user.1,ou=People,dc=silverpeas,dc=org\",",
                "-      \"uid=user.2,ou=People,dc=silverpeas,dc=org\",",
                "-      \"uid=user.3,ou=People,dc=silverpeas,dc=org\",",
                "-      \"uid=user.4,ou=People,dc=silverpeas,dc=org\",",
                "-      \"cn=Groupe 2,dc=silverpeas,dc=org\"",
                "-    });",
                "-    when(groupEntry.getAttribute(\"entryUUID\")).thenReturn(uuidAttribute);",
                "-    when(groupEntry.getAttribute(\"uniqueMember\")).thenReturn(uniqueMembers);",
                "-    when(groupEntry.getDN()).thenReturn(\"cn=Groupe 1,dc=silverpeas,dc=org\");",
                "-",
                "-    List<LDAPEntry> result = instance.getTRUEChildGroupsEntry(connectionId, groupEntry);",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, hasSize(1));",
                "-    assertThat(result.get(0).getDN(), is(\"cn=Groupe 3,cn=Groupe 1,dc=silverpeas,dc=org\"));",
                "-    when(groupEntry.getDN()).thenReturn(\"cn=Groupe 2,dc=silverpeas,dc=org\");",
                "-    uuidAttribute = mock(LDAPAttribute.class);",
                "-    when(uuidAttribute.getName()).thenReturn(\"entryUUID\");",
                "-    when(uuidAttribute.getStringValue()).thenReturn(\"b475049f-f640-400a-b643-3a8d047e8d57\");",
                "-    when(uuidAttribute.getStringValueArray()).thenReturn(new String[]{",
                "-      \"b475049f-f640-400a-b643-3a8d047e8d57\"});",
                "-    when(uuidAttribute.getByteValue()).thenReturn(\"b475049f-f640-400a-b643-3a8d047e8d57\".getBytes(",
                "-        Charsets.UTF_8));",
                "-    when(uuidAttribute.size()).thenReturn(\"b475049f-f640-400a-b643-3a8d047e8d57\".getBytes(",
                "-        Charsets.UTF_8).length);",
                "-    when(groupEntry.getAttribute(\"entryUUID\")).thenReturn(uuidAttribute);",
                "-    when(groupEntry.getAttribute(\"uniqueMember\")).thenReturn(uniqueMembers);",
                "-    result = instance.getTRUEChildGroupsEntry(connectionId, groupEntry);",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, hasSize(0));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getAllChangedGroups method, of class LDAPGroupAllRoot.",
                "-   */",
                "-  @Test",
                "-  public void testGetAllChangedGroups() throws Exception {",
                "-    String extraFilter = \"\";",
                "-    Group[] result = instance.getAllChangedGroups(connectionId, extraFilter);",
                "-    assertThat(result, is(not(nullValue())));",
                "-    assertThat(result, arrayWithSize(3));",
                "-    int index = 1;",
                "-    assertThat(result[index].getSpecificId(), is(\"a95b39de-ea91-45cb-9af0-890670075d54\"));",
                "-    assertThat(result[index].getName(), is(\"Groupe 1\"));",
                "-    assertThat(result[index].getDescription(), is(\"Description du premier groupe\"));",
                "-    assertThat(result[index].getDomainId(), is(nullValue()));",
                "-    assertThat(result[index].getId(), is(nullValue()));",
                "-    assertThat(result[index].getRule(), is(nullValue()));",
                "-    assertThat(result[index].getUserIds(), is(not(nullValue())));",
                "-    assertThat(result[index].getUserIds(), arrayWithSize(5));",
                "-",
                "-    index = 2;",
                "-    assertThat(result[index].getSpecificId(), is(\"b475049f-f640-400a-b643-3a8d047e8d57\"));",
                "-    assertThat(result[index].getName(), is(\"Groupe 2\"));",
                "-    assertThat(result[index].getDescription(), is(\"Description du second groupe\"));",
                "-    assertThat(result[index].getDomainId(), is(nullValue()));",
                "-    assertThat(result[index].getId(), is(nullValue()));",
                "-    assertThat(result[index].getRule(), is(nullValue()));",
                "-    assertThat(result[index].getUserIds(), is(not(nullValue())));",
                "-    assertThat(result[index].getUserIds(), arrayWithSize(2));",
                "-",
                "-    index = 0;",
                "-    assertThat(result[index].getSpecificId(), is(\"04d0ceff-2ccc-4c78-8c55-e819875cb0ae\"));",
                "-    assertThat(result[index].getName(), is(\"Groupe 3\"));",
                "-    assertThat(result[index].getDescription(), is(\"Description du trois\u00c3\u00a8me groupe\"));",
                "-    assertThat(result[index].getDomainId(), is(nullValue()));",
                "-    assertThat(result[index].getId(), is(nullValue()));",
                "-    assertThat(result[index].getRule(), is(nullValue()));",
                "-    assertThat(result[index].getUserIds(), is(not(nullValue())));",
                "-    assertThat(result[index].getUserIds(), arrayWithSize(1));",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/stratelia/silverpeas/notificationserver/NotificationServerUtilTest.java b/core-library/src/test-awaiting/java/com/stratelia/silverpeas/notificationserver/NotificationServerUtilTest.java",
                "deleted file mode 100644",
                "index ad5b8917c1..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/stratelia/silverpeas/notificationserver/NotificationServerUtilTest.java",
                "+++ /dev/null",
                "@@ -1,191 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-/*",
                "- * To change this template, choose Tools | Templates",
                "- * and open the template in the editor.",
                "- */",
                "-package org.silverpeas.core.notification.user.server;",
                "-",
                "-import java.util.Date;",
                "-import java.util.HashMap;",
                "-import com.silverpeas.jcrutil.RandomGenerator;",
                "-import java.util.LinkedHashMap;",
                "-import java.util.Map;",
                "-import org.junit.After;",
                "-import org.junit.AfterClass;",
                "-import org.junit.Before;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Test;",
                "-import static org.junit.Assert.*;",
                "-",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-public class NotificationServerUtilTest {",
                "-",
                "-  public NotificationServerUtilTest() {",
                "-  }",
                "-",
                "-  @BeforeClass",
                "-  public static void setUpClass() throws Exception {",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void tearDownClass() throws Exception {",
                "-  }",
                "-",
                "-  @Before",
                "-  public void setUp() {",
                "-  }",
                "-",
                "-  @After",
                "-  public void tearDown() {",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of convertNotificationDataToXML method, of class NotificationServerUtil.",
                "-   * @throws Exception",
                "-   */",
                "-  @Test",
                "-  public void testConvertNotificationDataToXML() throws Exception {",
                "-    NotificationData p_Data = new NotificationData();",
                "-    Map<String, Object> params = new HashMap<String, Object>(2);",
                "-    Date dateParam = RandomGenerator.getRandomCalendar().getTime();",
                "-    params.put(\"date\", dateParam);",
                "-    params.put(\"string\", \"bonjour le monde; 0 + 0 = la t\u00c3\u00aate \u00c3\u00a0 toto\");",
                "-    p_Data.setAnswerAllowed(true);",
                "-    p_Data.setComment(\"comment\");",
                "-    p_Data.setLoginPassword(\"password\");",
                "-    p_Data.setLoginUser(\"user\");",
                "-    p_Data.setMessage(\"message\");",
                "-    p_Data.setNotificationId(RandomGenerator.getRandomLong());",
                "-    p_Data.setPrioritySpeed(\"fast\");",
                "-    p_Data.setReportToLogStatus(\"logStatus\");",
                "-    p_Data.setReportToSenderStatus(\"senderStatus\");",
                "-    p_Data.setReportToSenderTargetChannel(\"POPUP\");",
                "-    p_Data.setReportToSenderTargetParam(\"MyParms\");",
                "-    p_Data.setReportToSenderTargetReceipt(\"SenderReceipt\");",
                "-    p_Data.setSenderId(\"bart.simpson@silverpeas.com\");",
                "-    p_Data.setSenderName(\"Bart Simpson\");",
                "-    p_Data.setTargetChannel(\"SMTP\");",
                "-    p_Data.setTargetName(\"Home Simpson\");",
                "-    p_Data.setTargetParam(params);",
                "-    p_Data.setTargetReceipt(\"receipt\");",
                "-    String result = NotificationServerUtil.convertNotificationDataToXML(p_Data);",
                "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<NOTIFY>\t<LOGIN>\t\t<USER>\"",
                "-        + \"<![CDATA[user]]></USER>\t\t<PASSWORD><![CDATA[password]]></PASSWORD>\t</LOGIN>\t\"",
                "-        + \"<MESSAGE><![CDATA[message]]></MESSAGE>\t<SENDER>\t\t<ID><![CDATA[bart.simpson@silverpeas\"",
                "-        + \".com]]></ID>\t\t<NAME><![CDATA[Bart Simpson]]></NAME>\t\t<ANSWERALLOWED>true\"",
                "-        + \"</ANSWERALLOWED>\t</SENDER>\t<COMMENT><![CDATA[comment]]></COMMENT>\t<TARGET CHANNEL=\\\"SMTP\\\">\"",
                "-        + \"\t\t<NAME><![CDATA[Home Simpson]]></NAME>\t\t<RECEIPT><![CDATA[receipt]]></RECEIPT>\t\t\"",
                "-        + \"<PARAM><![CDATA[date=#DATE#\" + dateParam.getTime() + \";string=bonjour le monde;; 0 + 0 == la t\u00c3\u00aate \u00c3\u00a0 \"",
                "-        + \"toto]]></PARAM>\t</TARGET>\t<PRIORITY SPEED=\\\"fast\\\"/>\t<REPORT>\t</REPORT></NOTIFY>\", result);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of convertXMLToNotificationData method, of class NotificationServerUtil.",
                "-   * @throws Exception",
                "-   */",
                "-  @Test",
                "-  public void testConvertXMLToNotificationData() throws Exception {",
                "-    Date dateParam = RandomGenerator.getRandomCalendar().getTime();",
                "-    String p_XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<NOTIFY>\t<LOGIN>\t\t<USER>\"",
                "-        + \"<![CDATA[user]]></USER>\t\t<PASSWORD><![CDATA[password]]></PASSWORD>\t</LOGIN>\t\"",
                "-        + \"<MESSAGE><![CDATA[message]]></MESSAGE>\t<SENDER>\t\t<ID><![CDATA[bart.simpson@silverpeas\"",
                "-        + \".com]]></ID>\t\t<NAME><![CDATA[Bart Simpson]]></NAME>\t\t<ANSWERALLOWED>true\"",
                "-        + \"</ANSWERALLOWED>\t</SENDER>\t<COMMENT><![CDATA[comment]]></COMMENT>\t<TARGET CHANNEL=\\\"SMTP\\\">\"",
                "-        + \"\t\t<NAME><![CDATA[Home Simpson]]></NAME>\t\t<RECEIPT><![CDATA[receipt]]></RECEIPT>\t\t\"",
                "-        + \"<PARAM><![CDATA[date=#DATE#\" + dateParam.getTime() + \";string=bonjour le monde;; 0 + 0 == la t\u00c3\u00aate \u00c3\u00a0 \"",
                "-        + \"toto]]></PARAM>\t</TARGET>\t<PRIORITY SPEED=\\\"fast\\\"/>\t<REPORT>\t</REPORT></NOTIFY>\";",
                "-    NotificationData expResult = new NotificationData();",
                "-    Map<String, Object> params = new HashMap<String, Object>(2);",
                "-    params.put(\"string\", \"bonjour le monde; 0 + 0 = la t\u00c3\u00aate \u00c3\u00a0 toto\");",
                "-    params.put(\"date\", dateParam);",
                "-    expResult.setAnswerAllowed(true);",
                "-    expResult.setComment(\"comment\");",
                "-    expResult.setLoginPassword(\"password\");",
                "-    expResult.setLoginUser(\"user\");",
                "-    expResult.setMessage(\"message\");",
                "-    expResult.setNotificationId(0L);",
                "-    expResult.setPrioritySpeed(\"fast\");",
                "-    expResult.setSenderId(\"bart.simpson@silverpeas.com\");",
                "-    expResult.setSenderName(\"Bart Simpson\");",
                "-    expResult.setTargetChannel(\"SMTP\");",
                "-    expResult.setTargetName(\"Home Simpson\");",
                "-    expResult.setTargetParam(params);",
                "-    expResult.setTargetReceipt(\"receipt\");",
                "-    NotificationData result = NotificationServerUtil.convertXMLToNotificationData(p_XML);",
                "-    assertEquals(expResult, result);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of unpackKeyValues method, of class NotificationServerUtil.",
                "-   */",
                "-  @Test",
                "-  public void testUnpackKeyValues() {",
                "-    String keyvaluestring = \"date=#DATE#1358963160000;string=bonjour le monde;; 0 + 0 == la t\u00c3\u00aate \u00c3\u00a0 toto;title=Titre d'\u00c5\u0093uvre\";",
                "-    Map<String, Object> expResult = new HashMap<String, Object>(3);",
                "-    expResult.put(\"date\", new Date(1358963160000l));",
                "-    expResult.put(\"string\", \"bonjour le monde; 0 + 0 = la t\u00c3\u00aate \u00c3\u00a0 toto\");",
                "-    expResult.put(\"title\", \"Titre d'\u00c5\u0093uvre\");",
                "-    Map<String, Object> result = NotificationServerUtil.unpackKeyValues(keyvaluestring);",
                "-    assertEquals(expResult, result);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of doubleSeparators method, of class NotificationServerUtil.",
                "-   */",
                "-  @Test",
                "-  public void testDoubleSeparators() {",
                "-    String simpleValue = \"Le petit chat est mort\";",
                "-    String expResult = \"Le petit chat est mort\";",
                "-    String result = NotificationServerUtil.doubleSeparators(simpleValue);",
                "-    assertEquals(expResult, result);",
                "-    String stringWithEqual = \"0+0 = la t\u00c3\u00aate \u00c3\u00a0 toto\";",
                "-    expResult = \"0+0 == la t\u00c3\u00aate \u00c3\u00a0 toto\";",
                "-    result = NotificationServerUtil.doubleSeparators(stringWithEqual);",
                "-    assertEquals(expResult, result);",
                "-",
                "-    String stringWithComa = \"Oh, Oh, oh; comment vas tu ?\";",
                "-    expResult = \"Oh, Oh, oh;; comment vas tu ?\";",
                "-    result = NotificationServerUtil.doubleSeparators(stringWithComa);",
                "-    assertEquals(expResult, result);",
                "-",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of packKeyValues method, of class NotificationServerUtil.",
                "-   */",
                "-  @Test",
                "-  public void testPackKeyValues() {",
                "-    Map<String, Object> params = new LinkedHashMap<String, Object>(2);",
                "-    params.put(\"date\", new Date(1358963160000l));",
                "-    params.put(\"string\", \"bonjour le monde; 0 + 0 = la t\u00c3\u00aate \u00c3\u00a0 toto\");",
                "-    params.put(\"title\", \"Titre d'\u00c5\u0093uvre\");",
                "-    String expResult = \"date=#DATE#1358963160000;string=bonjour le monde;; 0 + 0 == la t\u00c3\u00aate \u00c3\u00a0 toto;title=Titre d'\u00c5\u0093uvre\";",
                "-    String result = NotificationServerUtil.packKeyValues(params);",
                "-    assertEquals(expResult, result);",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/stratelia/silverpeas/peasCore/URLManagerTest.java b/core-library/src/test-awaiting/java/com/stratelia/silverpeas/peasCore/URLManagerTest.java",
                "deleted file mode 100644",
                "index 2c907e4047..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/stratelia/silverpeas/peasCore/URLManagerTest.java",
                "+++ /dev/null",
                "@@ -1,251 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.stratelia.silverpeas.peasCore;",
                "-",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import static org.junit.Assert.*;",
                "-import org.junit.*;",
                "-import static org.hamcrest.Matchers.*;",
                "-import static org.mockito.Mockito.*;",
                "-",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-public class URLManagerTest {",
                "-",
                "-  public URLManagerTest() {",
                "-  }",
                "-",
                "-  @BeforeClass",
                "-  public static void setUpClass() throws Exception {",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void tearDownClass() throws Exception {",
                "-  }",
                "-",
                "-  @Before",
                "-  public void setUp() {",
                "-  }",
                "-",
                "-  @After",
                "-  public void tearDown() {",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getURL method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetURLWithComponentNameSpaceIdAndComponentId() {",
                "-    String sSpace = \"WA12\";",
                "-    String sComponentId = \"kmelia158\";",
                "-    String sComponentName = \"kmelia\";",
                "-    String result = URLUtil.getURL(sComponentName, sSpace, sComponentId);",
                "-    assertThat(result, is(\"/Rkmelia/kmelia158/\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getURL method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetURLWithComponentName() {",
                "-    String sComponentName = \"kmelia\";",
                "-    String result = URLUtil.getURL(sComponentName);",
                "-    assertThat(result, is(\"/Rkmelia/null/\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getURL method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetURLWithSpaceIdAndComponentId() {",
                "-    String sSpace = \"WA12\";",
                "-    String sComponentId = \"kmelia158\";",
                "-    String result = URLUtil.getURL(sSpace, sComponentId);",
                "-    assertThat(result, is(\"/Rkmelia/kmelia158/\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getNewComponentURL method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetNewComponentURL() {",
                "-    String spaceId = \"WA21\";",
                "-    String componentId = \"kmelia128\";",
                "-    String result = URLUtil.getNewComponentURL(spaceId, componentId);",
                "-    assertThat(result, is(\"/Rkmelia/kmelia128/\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getComponentNameFromComponentId method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetComponentNameFromComponentId() {",
                "-    String result = URLUtil.getComponentNameFromComponentId(\"kmelia125\");",
                "-    assertThat(result, is(\"kmelia\"));",
                "-    result = URLUtil.getComponentNameFromComponentId(\"kmelia125\");",
                "-    assertThat(result, is(\"kmelia\"));",
                "-",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getApplicationURL method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetApplicationURL() {",
                "-    String result = URLUtil.getApplicationURL();",
                "-    assertThat(result, is(\"/silverpeas/\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getFullApplicationURL method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetFullApplicationURL() {",
                "-    HttpServletRequest request = mock(HttpServletRequest.class);",
                "-    when(request.getScheme()).thenReturn(\"https\");",
                "-    when(request.getServerName()).thenReturn(\"www.silverpeas.org\");",
                "-    when(request.getServerPort()).thenReturn(8443);",
                "-    String result = URLUtil.getFullApplicationURL(request);",
                "-    assertThat(result, is(\"https://www.silverpeas.org:8443/silverpeas/\"));",
                "-    verify(request, times(2)).getServerPort();",
                "-    reset(request);",
                "-    when(request.getScheme()).thenReturn(\"http\");",
                "-    when(request.getServerName()).thenReturn(\"www.silverpeas.org\");",
                "-    when(request.getServerPort()).thenReturn(80);",
                "-    result = URLUtil.getFullApplicationURL(request);",
                "-    assertThat(result, is(\"http://www.silverpeas.org/silverpeas/\"));",
                "-    verify(request, times(1)).getServerPort();",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getServerURL method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetServerURL() {",
                "-    HttpServletRequest request = mock(HttpServletRequest.class);",
                "-    when(request.getScheme()).thenReturn(\"https\");",
                "-    when(request.getServerName()).thenReturn(\"www.silverpeas.org\");",
                "-    when(request.getServerPort()).thenReturn(8443);",
                "-    String result = URLUtil.getServerURL(request);",
                "-    assertThat(result, is(\"https://www.silverpeas.org:8443\"));",
                "-    verify(request, times(2)).getServerPort();",
                "-    reset(request);",
                "-    when(request.getScheme()).thenReturn(\"http\");",
                "-    when(request.getServerName()).thenReturn(\"www.silverpeas.org\");",
                "-    when(request.getServerPort()).thenReturn(80);",
                "-    result = URLUtil.getServerURL(request);",
                "-    assertThat(result, is(\"http://www.silverpeas.org\"));",
                "-    verify(request, times(1)).getServerPort();",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getHttpMode method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetHttpMode() {",
                "-    String result = URLUtil.getHttpMode();",
                "-    assertThat(result, is(\"http://\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of displayUniversalLinks method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testDisplayUniversalLinks() {",
                "-    boolean result = URLUtil.displayUniversalLinks();",
                "-    assertThat(result, is(true));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getSimpleURL method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetSimpleURLByTypeIdAndComponentid() {",
                "-    int type = URLUtil.URL_SPACE;",
                "-    String id = \"WA21\";",
                "-    String componentId = \"kmelia518\";",
                "-    String result = URLUtil.getSimpleURL(URLUtil.URL_SPACE, id, componentId);",
                "-    assertThat(result, is(\"/silverpeas/Space/WA21\"));",
                "-    id = \"kmelia518\";",
                "-    result = URLUtil.getSimpleURL(URLUtil.URL_COMPONENT, id, componentId);",
                "-    assertThat(result, is(\"/silverpeas/Component/kmelia518\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getSimpleURL method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetSimpleURLToForum() {",
                "-    String id = \"59\";",
                "-    String componentId = \"kmelia518\";",
                "-    String forumId = \"forum38\";",
                "-    boolean appendContext = false;",
                "-    String result = URLUtil.getSimpleURL(URLUtil.URL_SPACE, id, componentId, appendContext,",
                "-            forumId);",
                "-    assertThat(result, is(\"\"));",
                "-    result = URLUtil.getSimpleURL(URLUtil.URL_MESSAGE, id, componentId, appendContext, forumId);",
                "-    assertThat(result, is(\"/ForumsMessage/59?ForumId=forum38\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getSimpleURL method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetSimpleURByTypeIdAndComponentidWithContexteAppended() {",
                "-    int type = URLUtil.URL_SPACE;",
                "-    String id = \"WA21\";",
                "-    String componentId = \"kmelia518\";",
                "-    boolean appendContext = true;",
                "-    String result = URLUtil.getSimpleURL(type, id, componentId, appendContext);",
                "-    assertThat(result, is(\"/silverpeas/Space/WA21\"));",
                "-    id = \"1978\";",
                "-    result = URLUtil.getSimpleURL(URLUtil.URL_PUBLI, id, componentId, appendContext);",
                "-    assertThat(result, is(\"/silverpeas/Publication/1978?ComponentId=kmelia518\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getSimpleURL method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetSimpleURLByTypeAndId() {",
                "-    int type = URLUtil.URL_COMPONENT;",
                "-    String id = \"kmelia518\";",
                "-    String result = URLUtil.getSimpleURL(type, id);",
                "-    assertThat(result, is(\"/silverpeas/Component/kmelia518\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getSimpleURL method, of class URLUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetSimpleURLByTypeAndIdWithContexteNotAppended() {",
                "-    int type = URLUtil.URL_COMPONENT;",
                "-    String id = \"kmelia518\";",
                "-    boolean appendContext = false;",
                "-    String result = URLUtil.getSimpleURL(type, id, appendContext);",
                "-    assertThat(result, is(\"/Component/kmelia518\"));",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/stratelia/webactiv/beans/admin/AdminTest.java b/core-library/src/test-awaiting/java/com/stratelia/webactiv/beans/admin/AdminTest.java",
                "deleted file mode 100644",
                "index 2468cece6c..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/stratelia/webactiv/beans/admin/AdminTest.java",
                "+++ /dev/null",
                "@@ -1,206 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-/*",
                "- * To change this template, choose Tools | Templates",
                "- * and open the template in the editor.",
                "- */",
                "-package com.stratelia.webactiv.beans.admin;",
                "-",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-import com.silverpeas.components.model.AbstractTestDao;",
                "-",
                "-import org.junit.After;",
                "-import org.junit.Before;",
                "-import org.junit.Test;",
                "-",
                "-import static org.junit.Assert.assertThat;",
                "-",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-public class AdminTest extends AbstractTestDao {",
                "-",
                "-  private Admin instance;",
                "-",
                "-  public AdminTest() {",
                "-    instance = new Admin();",
                "-  }",
                "-",
                "-  @Override",
                "-  @Before",
                "-  public void setUp() throws Exception {",
                "-    super.setUp();",
                "-    instance.reloadCache();",
                "-  }",
                "-",
                "-  @Override",
                "-  @After",
                "-  public void tearDown() throws Exception {",
                "-    super.tearDown();",
                "-    instance.reloadCache();",
                "-  }",
                "-",
                "-  @Override",
                "-  protected String getDatasetFileName() {",
                "-    return \"test-admin-spaces-dataset.xml\";",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getGeneralSpaceId method, of class Admin.",
                "-   */",
                "-  @Test",
                "-  public void testGetGeneralSpaceId() {",
                "-    String expResult = \"WA1\";",
                "-    String result = instance.getGeneralSpaceId();",
                "-    assertEquals(expResult, result);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getSpaceInstById method, of class Admin.",
                "-   */",
                "-  @Test",
                "-  public void testGetSpaceInstById() throws Exception {",
                "-    String sClientSpaceId = \"2\";",
                "-    SpaceInst expResult = new SpaceInst();",
                "-    expResult.setId(sClientSpaceId);",
                "-    SpaceInst result = instance.getSpaceInstById(sClientSpaceId);",
                "-    assertNotNull(result);",
                "-    assertEquals(expResult.getId(), result.getId());",
                "-    assertEquals(\"MyTests\", result.getName());",
                "-    assertEquals(\"Space for test\", result.getDescription());",
                "-    assertEquals(\"0\", result.getCreatorUserId());",
                "-    assertEquals(1281941919845L, result.getCreateDate().getTime());",
                "-    assertNotNull(result.getAllComponentsInst());",
                "-    assertEquals(2, result.getAllComponentsInst().size());",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getAllSubSpaceIds method, of class Admin.",
                "-   */",
                "-  @Test",
                "-  public void testGetAllSubSpaceIdsForDomain() throws Exception {",
                "-    String sDomainFatherId = \"1\";",
                "-    String[] result = instance.getAllSubSpaceIds(sDomainFatherId);",
                "-    assertThat(result, org.hamcrest.collection.IsArrayContaining.hasItemInArray(\"WA2\"));",
                "-    assertThat(result, org.hamcrest.collection.IsArrayContaining.hasItemInArray(\"WA5\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of isSpaceInstExist method, of class Admin.",
                "-   */",
                "-  @Test",
                "-  public void testIsSpaceInstExist() throws Exception {",
                "-    assertTrue(instance.isSpaceInstExist(\"WA3\"));",
                "-    assertTrue(instance.isSpaceInstExist(\"WA1\"));",
                "-    assertTrue(instance.isSpaceInstExist(\"WA5\"));",
                "-    assertFalse(instance.isSpaceInstExist(\"WA10\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getAllRootSpaceIds method, of class Admin.",
                "-   */",
                "-  @Test",
                "-  public void testGetAllRootSpaceIds() throws Exception {",
                "-    String[] expResult = new String[]{\"WA1\"};",
                "-    String[] result = instance.getAllRootSpaceIds();",
                "-    assertNotNull(result);",
                "-    assertEquals(1, result.length);",
                "-    assertEquals(expResult[0], result[0]);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getTreeView method, of class Admin.",
                "-   */",
                "-  @Test",
                "-  public void testGetTreeView() throws Exception {",
                "-    String userId = \"0\";",
                "-    String spaceId = \"2\";",
                "-    Map<String, SpaceAndChildren> result = instance.getTreeView(userId, spaceId);",
                "-    assertNotNull(result);",
                "-    assertEquals(3, result.size());",
                "-    SpaceAndChildren space = result.get(\"WA2\");",
                "-    assertNotNull(space);",
                "-    space = result.get(\"WA3\");",
                "-    assertNotNull(space);",
                "-    space = result.get(\"WA4\");",
                "-    assertNotNull(space);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getUserSpaceTreeview method, of class Admin.",
                "-   */",
                "-  @Test",
                "-  public void testGetUserSpaceTreeview() throws Exception {",
                "-    String userId = \"0\";",
                "-    List<SpaceInstLight> result = instance.getUserSpaceTreeview(userId);",
                "-    assertNotNull(result);",
                "-    assertEquals(5, result.size());",
                "-    assertEquals(\"WA1\", result.get(0).getId());",
                "-    assertEquals(\"WA2\", result.get(1).getId());",
                "-    assertEquals(\"WA3\", result.get(2).getId());",
                "-    assertEquals(\"WA4\", result.get(3).getId());",
                "-    assertEquals(\"WA5\", result.get(4).getId());",
                "-",
                "-",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getAllRootSpaceIds method, of class Admin.",
                "-   */",
                "-  @Test",
                "-  public void testGetAllRootSpaceIdsForUser() throws Exception {",
                "-    String sUserId = \"0\";",
                "-    String[] result = instance.getAllRootSpaceIds(sUserId);",
                "-    String[] expectedResult = new String[]{\"WA1\"};",
                "-    assertNotNull(result);",
                "-    assertEquals(expectedResult.length, result.length);",
                "-    for (int i = 0; i < result.length; i++) {",
                "-      assertEquals(expectedResult[i], result[i]);",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getAllDomains method of class Admin",
                "-   * @see redmine #2540",
                "-   */",
                "-  @Test",
                "-  public void testGetAllDomains() throws Exception {",
                "-    Domain[] domains = instance.getAllDomains();",
                "-    assertNotNull(domains);",
                "-    assertEquals(3, domains.length);",
                "-    // Check that domains are ordered by name.",
                "-    assertEquals(\"Customer\", domains[0].getName());",
                "-    assertEquals(\"domainSilverpeas\", domains[1].getName());",
                "-    assertEquals(\"SILVERPEAS\", domains[2].getName());",
                "-  }",
                "-",
                "-",
                "-  @Override",
                "-  protected String getTableCreationFileName() {",
                "-    return \"create-database.sql\";",
                "-  }",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/core-library/src/test-awaiting/java/com/stratelia/webactiv/beans/admin/dao/ComponentDAOTest.java b/core-library/src/test-awaiting/java/com/stratelia/webactiv/beans/admin/dao/ComponentDAOTest.java",
                "deleted file mode 100644",
                "index 9affaf9a93..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/stratelia/webactiv/beans/admin/dao/ComponentDAOTest.java",
                "+++ /dev/null",
                "@@ -1,131 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.stratelia.webactiv.beans.admin.dao;",
                "-",
                "-import java.sql.Connection;",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-",
                "-import com.silverpeas.components.model.AbstractTestDao;",
                "-",
                "-import org.silverpeas.util.DBUtil;",
                "-",
                "-import org.junit.Test;",
                "-",
                "-import static org.hamcrest.Matchers.containsInAnyOrder;",
                "-import static org.hamcrest.collection.IsIterableContainingInOrder.contains;",
                "-import static org.junit.Assert.assertThat;",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-public class ComponentDAOTest extends AbstractTestDao {",
                "-",
                "-  public ComponentDAOTest() {",
                "-  }",
                "-",
                "-",
                "-  @Override",
                "-  protected String getDatasetFileName() {",
                "-    return \"test-components-dataset.xml\";",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getAllAvailableComponentIds method, of class ComponentDAO.",
                "-   * @throws Exception",
                "-   */",
                "-  @Test",
                "-  public void testGetAllAvailableComponentIdsForUser() throws Exception {",
                "-    Connection con = null;",
                "-    try {",
                "-      con = getConnection().getConnection();",
                "-      List<String> groupIds = new ArrayList<String>();",
                "-      int userId = 0;",
                "-      List<String> result = ComponentDAO.getAllAvailableComponentIds(con, groupIds, userId);",
                "-      assertNotNull(result);",
                "-      assertEquals(17, result.size());",
                "-    } finally {",
                "-      DBUtil.close(con);",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getAllAvailableComponentIds method, of class ComponentDAO.",
                "-   * @throws Exception",
                "-   */",
                "-  @Test",
                "-  public void testGetAllAvailableComponentIdsForUserAndGroups() throws Exception {",
                "-    Connection con = null;",
                "-    try {",
                "-      con = getConnection().getConnection();",
                "-      List<String> groupIds = new ArrayList<String>();",
                "-      int userId = 0;",
                "-      List<String> result = ComponentDAO.getAllAvailableComponentIds(con, groupIds, userId, null);",
                "-      assertNotNull(result);",
                "-      assertEquals(17, result.size());",
                "-      result = ComponentDAO.getAllAvailableComponentIds(con, groupIds, userId, \"kmelia\");",
                "-      assertNotNull(result);",
                "-      assertEquals(5, result.size());",
                "-      userId = 3;",
                "-      result = ComponentDAO.getAllAvailableComponentIds(con, groupIds, userId, null);",
                "-      assertNotNull(result);",
                "-      assertEquals(4, result.size());",
                "-      result = ComponentDAO.getAllAvailableComponentIds(con, groupIds, userId, \"kmelia\");",
                "-      assertNotNull(result);",
                "-      assertEquals(1, result.size());",
                "-      assertThat(result, containsInAnyOrder(\"kmelia9\"));",
                "-    } finally {",
                "-      DBUtil.close(con);",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetComponentIdsInSpace() throws Exception {",
                "-    Connection con = null;",
                "-    try {",
                "-      con = getConnection().getConnection();",
                "-      int spaceId = 3;",
                "-      List<String> result = ComponentDAO.getComponentIdsInSpace(con, spaceId);",
                "-      assertNotNull(result);",
                "-      assertEquals(\"This space components should be present\", 2, result.size());",
                "-      assertThat(result, containsInAnyOrder(\"blog10\", \"kmelia11\"));",
                "-      assertThat(result, contains(\"blog10\", \"kmelia11\"));",
                "-",
                "-      spaceId = 2;",
                "-      result = ComponentDAO.getComponentIdsInSpace(con, spaceId);",
                "-      assertNotNull(result);",
                "-      assertEquals(\"Subspace components should not be present\", 2, result.size());",
                "-      assertThat(result, containsInAnyOrder(\"questionReply12\", \"yellowpages19\"));",
                "-      assertThat(result, contains(\"questionReply12\", \"yellowpages19\"));",
                "-    } finally {",
                "-      DBUtil.close(con);",
                "-    }",
                "-  }",
                "-",
                "-",
                "-  @Override",
                "-  protected String getTableCreationFileName() {",
                "-    return \"create-database.sql\";",
                "-  }",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/core-library/src/test-awaiting/java/com/stratelia/webactiv/organization/GroupTableTest.java b/core-library/src/test-awaiting/java/com/stratelia/webactiv/organization/GroupTableTest.java",
                "deleted file mode 100644",
                "index c5e8d17f37..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/stratelia/webactiv/organization/GroupTableTest.java",
                "+++ /dev/null",
                "@@ -1,779 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.stratelia.webactiv.organization;",
                "-",
                "-import java.util.Arrays;",
                "-import java.util.List;",
                "-",
                "-import com.mockrunner.jdbc.JDBCTestModule;",
                "-import com.mockrunner.jdbc.PreparedStatementResultSetHandler;",
                "-import com.mockrunner.mock.jdbc.JDBCMockObjectFactory;",
                "-import com.mockrunner.mock.jdbc.MockConnection;",
                "-import com.mockrunner.mock.jdbc.MockResultSet;",
                "-import org.junit.After;",
                "-import org.junit.AfterClass;",
                "-import org.junit.Before;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Test;",
                "-import org.junit.runner.RunWith;",
                "-import org.junit.runners.BlockJUnit4ClassRunner;",
                "-",
                "-import static org.hamcrest.Matchers.is;",
                "-import static org.hamcrest.Matchers.notNullValue;",
                "-import static org.junit.Assert.assertThat;",
                "-",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-@RunWith(BlockJUnit4ClassRunner.class)",
                "-public class GroupTableTest {",
                "-",
                "-  private JDBCMockObjectFactory factory;",
                "-  private JDBCTestModule module;",
                "-",
                "-  public GroupTableTest() {",
                "-  }",
                "-",
                "-  @BeforeClass",
                "-  public static void setUpClass() throws Exception {",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void tearDownClass() throws Exception {",
                "-  }",
                "-",
                "-  @Before",
                "-  public void setUp() {",
                "-    factory = new JDBCMockObjectFactory();",
                "-    module = new JDBCTestModule(factory);",
                "-    module.setExactMatch(true);",
                "-    module.setCaseSensitive(true);",
                "-  }",
                "-",
                "-  @After",
                "-  public void tearDown() {",
                "-    factory.restoreDrivers();",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of fetchGroup method, of class GroupTable.",
                "-   */",
                "-//  @Test",
                "-//  public void testFetchGroup() throws Exception {",
                "-//    ResultSet rs = null;",
                "-//    GroupTable instance = null;",
                "-//    GroupRow expResult = null;",
                "-//    GroupRow result = instance.fetchGroup(rs);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-  /**",
                "-   * Test of getGroup method, of class GroupTable.",
                "-   */",
                "-  @Test",
                "-  public void testGetGroupById() throws Exception {",
                "-    int id = 5;",
                "-    MockConnection connexion = factory.getMockConnection();",
                "-    PreparedStatementResultSetHandler handler = connexion.getPreparedStatementResultSetHandler();",
                "-    MockResultSet resultSet = handler.createResultSet();",
                "-    resultSet.addColumn(\"id\");",
                "-    resultSet.addColumn(\"specificId\");",
                "-    resultSet.addColumn(\"domainId\");",
                "-    resultSet.addColumn(\"superGroupId\");",
                "-    resultSet.addColumn(\"name\");",
                "-    resultSet.addColumn(\"description\");",
                "-    resultSet.addColumn(\"synchroRule\");",
                "-    resultSet.addRow(Arrays.asList(String.valueOf(id), \"3\", \"0\", \"8\", \"Group for test\",",
                "-        \"Fake group\", \"DS_AccessLevel = *\"));",
                "-    handler.prepareResultSet(\"SELECT id, specificId, domainId, superGroupId, name, \"",
                "-        + \"description, synchroRule FROM ST_Group WHERE id = ?\", resultSet);",
                "-    OrganizationSchema schema = new OrganizationSchema(connexion);",
                "-    GroupTable instance = new GroupTable(schema);",
                "-",
                "-    GroupRow result = instance.getGroup(id);",
                "-",
                "-    module.verifyAllStatementsClosed();",
                "-    module.verifyAllResultSetsClosed();",
                "-    List<?> statements = module.getPreparedStatements(\"SELECT id, specificId, domainId, \"",
                "-        + \"superGroupId, name, description, synchroRule FROM ST_Group WHERE id = ?\");",
                "-    assertThat(statements, is(notNullValue()));",
                "-    assertThat(statements.size(), is(1));",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.id, is(id));",
                "-    assertThat(result.description, is(\"Fake group\"));",
                "-    assertThat(result.name, is(\"Group for test\"));",
                "-    assertThat(result.rule, is(\"DS_AccessLevel = *\"));",
                "-    assertThat(result.specificId, is(\"3\"));",
                "-    assertThat(result.domainId, is(0));",
                "-    assertThat(result.superGroupId, is(8));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getGroupBySpecificId method, of class GroupTable.",
                "-   */",
                "-  @Test",
                "-  public void testGetGroupBySpecificId() throws Exception {",
                "-    int domainId = 0;",
                "-    String specificId = \"3\";",
                "-    MockConnection connexion = factory.getMockConnection();",
                "-    PreparedStatementResultSetHandler handler = connexion.getPreparedStatementResultSetHandler();",
                "-    MockResultSet resultSet = handler.createResultSet();",
                "-    resultSet.addColumn(\"id\");",
                "-    resultSet.addColumn(\"specificId\");",
                "-    resultSet.addColumn(\"domainId\");",
                "-    resultSet.addColumn(\"superGroupId\");",
                "-    resultSet.addColumn(\"name\");",
                "-    resultSet.addColumn(\"description\");",
                "-    resultSet.addColumn(\"synchroRule\");",
                "-    resultSet.addRow(Arrays.asList(\"5\", specificId, String.valueOf(domainId), \"8\", \"Group for test\",",
                "-        \"Fake group\", \"DS_AccessLevel = *\"));",
                "-    handler.prepareResultSet(\"SELECT id, specificId, domainId, superGroupId, name, description, \"",
                "-        + \"synchroRule FROM ST_Group WHERE domainId = ? AND specificId = ?\", resultSet);",
                "-    OrganizationSchema schema = new OrganizationSchema(connexion);",
                "-    GroupTable instance = new GroupTable(schema);",
                "-",
                "-    GroupRow result = instance.getGroupBySpecificId(domainId, specificId);",
                "-",
                "-    module.verifyAllStatementsClosed();",
                "-    module.verifyAllResultSetsClosed();",
                "-    List<?> statements = module.getPreparedStatements(\"SELECT id, specificId, domainId, \"",
                "-        + \"superGroupId, name, description, synchroRule FROM ST_Group WHERE domainId = ? AND \"",
                "-        + \"specificId = ?\");",
                "-    assertThat((Integer) module.getPreparedStatementParameter(\"SELECT id, specificId, domainId, \"",
                "-        + \"superGroupId, name, description, synchroRule FROM ST_Group WHERE domainId = ? AND \"",
                "-        + \"specificId = ?\", 1), is(domainId));",
                "-    assertThat((String) module.getPreparedStatementParameter(\"SELECT id, specificId, domainId, \"",
                "-        + \"superGroupId, name, description, synchroRule FROM ST_Group WHERE domainId = ? AND \"",
                "-        + \"specificId = ?\", 2), is(specificId));",
                "-    assertThat(statements, is(notNullValue()));",
                "-    assertThat(statements.size(), is(1));",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.id, is(5));",
                "-    assertThat(result.description, is(\"Fake group\"));",
                "-    assertThat(result.name, is(\"Group for test\"));",
                "-    assertThat(result.rule, is(\"DS_AccessLevel = *\"));",
                "-    assertThat(result.specificId, is(specificId));",
                "-    assertThat(result.domainId, is(domainId));",
                "-    assertThat(result.superGroupId, is(8));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getRootGroup method, of class GroupTable.",
                "-   */",
                "-  @Test",
                "-  public void testGetRootGroup() throws Exception {",
                "-    String name = \"Root\";",
                "-    MockConnection connexion = factory.getMockConnection();",
                "-    PreparedStatementResultSetHandler handler = connexion.getPreparedStatementResultSetHandler();",
                "-    MockResultSet resultSet = handler.createResultSet();",
                "-    resultSet.addColumn(\"id\");",
                "-    resultSet.addColumn(\"specificId\");",
                "-    resultSet.addColumn(\"domainId\");",
                "-    resultSet.addColumn(\"superGroupId\");",
                "-    resultSet.addColumn(\"name\");",
                "-    resultSet.addColumn(\"description\");",
                "-    resultSet.addColumn(\"synchroRule\");",
                "-    resultSet.addRow(Arrays.asList(\"5\", \"3\", \"0\", null, name, \"Fake group\",",
                "-        \"DS_AccessLevel = *\"));",
                "-    handler.prepareResultSet(\"SELECT id, specificId, domainId, superGroupId, name, description, \"",
                "-        + \"synchroRule FROM ST_Group WHERE superGroupId IS NULL AND name = ?\", resultSet);",
                "-    OrganizationSchema schema = new OrganizationSchema(connexion);",
                "-    GroupTable instance = new GroupTable(schema);",
                "-",
                "-    GroupRow result = instance.getRootGroup(name);",
                "-",
                "-    module.verifyAllStatementsClosed();",
                "-    module.verifyAllResultSetsClosed();",
                "-    List<?> statements = module.getPreparedStatements(\"SELECT id, specificId, domainId, \"",
                "-        + \"superGroupId, name, description, synchroRule FROM ST_Group WHERE superGroupId IS NULL \"",
                "-        + \"AND name = ?\");",
                "-    assertThat((String) module.getPreparedStatementParameter(\"SELECT id, specificId, domainId, \"",
                "-        + \"superGroupId, name, description, synchroRule FROM ST_Group WHERE superGroupId IS NULL \"",
                "-        + \"AND name = ?\", 1), is(name));",
                "-    assertThat(statements, is(notNullValue()));",
                "-    assertThat(statements.size(), is(1));",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.id, is(5));",
                "-    assertThat(result.description, is(\"Fake group\"));",
                "-    assertThat(result.name, is(name));",
                "-    assertThat(result.rule, is(\"DS_AccessLevel = *\"));",
                "-    assertThat(result.specificId, is(\"3\"));",
                "-    assertThat(result.domainId, is(0));",
                "-    assertThat(result.superGroupId, is(-1));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getGroup method, of class GroupTable.",
                "-   */",
                "-  @Test",
                "-  public void testGetGroupByNameAndParentId() throws Exception {",
                "-    int superGroupId = 8;",
                "-    String name = \"Group for test\";",
                "-    MockConnection connexion = factory.getMockConnection();",
                "-    PreparedStatementResultSetHandler statementHandler = connexion",
                "-        .getPreparedStatementResultSetHandler();",
                "-    MockResultSet resultSet = statementHandler.createResultSet();",
                "-    resultSet.addColumn(\"id\");",
                "-    resultSet.addColumn(\"specificId\");",
                "-    resultSet.addColumn(\"domainId\");",
                "-    resultSet.addColumn(\"superGroupId\");",
                "-    resultSet.addColumn(\"name\");",
                "-    resultSet.addColumn(\"description\");",
                "-    resultSet.addColumn(\"synchroRule\");",
                "-    resultSet.addRow(Arrays.asList(\"5\", \"3\", \"0\", \"8\", \"Group for test\", \"Fake group\",",
                "-        \"DS_AccessLevel = *\"));",
                "-    statementHandler.prepareResultSet(\"SELECT id, specificId, domainId, \"",
                "-        + \"superGroupId, name, description, synchroRule FROM ST_Group WHERE \"",
                "-        + \"superGroupId = ? AND name = ?\", resultSet);",
                "-    OrganizationSchema schema = new OrganizationSchema(connexion);",
                "-    GroupTable instance = new GroupTable(schema);",
                "-",
                "-    GroupRow result = instance.getGroup(superGroupId, name);",
                "-",
                "-    module.verifyAllStatementsClosed();",
                "-    module.verifyAllResultSetsClosed();",
                "-    List<?> statements = module.getPreparedStatements(\"SELECT id, specificId, domainId, \"",
                "-        + \"superGroupId, name, description, synchroRule FROM ST_Group WHERE \"",
                "-        + \"superGroupId = ? AND name = ?\");",
                "-    assertThat(statements, is(notNullValue()));",
                "-    assertThat(statements.size(), is(1));",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result.id, is(5));",
                "-    assertThat(result.description, is(\"Fake group\"));",
                "-    assertThat(result.name, is(\"Group for test\"));",
                "-    assertThat(result.rule, is(\"DS_AccessLevel = *\"));",
                "-    assertThat(result.specificId, is(\"3\"));",
                "-    assertThat(result.domainId, is(0));",
                "-    assertThat(result.superGroupId, is(8));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getAllGroups method, of class GroupTable.",
                "-   */",
                "-  @Test",
                "-  public void testGetAllGroups() throws Exception {",
                "-    MockConnection connexion = factory.getMockConnection();",
                "-    PreparedStatementResultSetHandler statementHandler = connexion",
                "-        .getPreparedStatementResultSetHandler();",
                "-    MockResultSet resultSet = statementHandler.createResultSet();",
                "-    resultSet.addColumn(\"id\");",
                "-    resultSet.addColumn(\"specificId\");",
                "-    resultSet.addColumn(\"domainId\");",
                "-    resultSet.addColumn(\"superGroupId\");",
                "-    resultSet.addColumn(\"name\");",
                "-    resultSet.addColumn(\"description\");",
                "-    resultSet.addColumn(\"synchroRule\");",
                "-    resultSet.addRow(Arrays.asList(\"5\", \"3\", \"0\", \"8\", \"Group for test\", \"Fake group\",",
                "-        \"DS_AccessLevel = *\"));",
                "-    resultSet.addRow(Arrays.asList(\"1\", \"4\", \"0\", null, \"Root\", \"Fake group\", \"DS_AccessLevel = A\"));",
                "-    statementHandler.prepareResultSet(\"select id, specificId, domainId, \"",
                "-        + \"superGroupId, name, description, synchroRule from ST_Group\", resultSet);",
                "-    OrganizationSchema schema = new OrganizationSchema(connexion);",
                "-    GroupTable instance = new GroupTable(schema);",
                "-",
                "-    GroupRow[] result = instance.getAllGroups();",
                "-",
                "-    module.verifyAllStatementsClosed();",
                "-    module.verifyAllResultSetsClosed();",
                "-    List<?> statements = module.getPreparedStatements(\"select id, specificId, domainId, \"",
                "-        + \"superGroupId, name, description, synchroRule from ST_Group\");",
                "-    assertThat(statements, is(notNullValue()));",
                "-    assertThat(statements.size(), is(1));",
                "-    assertThat(result, is(notNullValue()));",
                "-    assertThat(result[0].id, is(5));",
                "-    assertThat(result[0].description, is(\"Fake group\"));",
                "-    assertThat(result[0].name, is(\"Group for test\"));",
                "-    assertThat(result[0].rule, is(\"DS_AccessLevel = *\"));",
                "-    assertThat(result[0].specificId, is(\"3\"));",
                "-    assertThat(result[0].domainId, is(0));",
                "-    assertThat(result[0].superGroupId, is(8));",
                "-",
                "-    assertThat(result[1].id, is(1));",
                "-    assertThat(result[1].description, is(\"Fake group\"));",
                "-    assertThat(result[1].name, is(\"Root\"));",
                "-    assertThat(result[1].rule, is(\"DS_AccessLevel = A\"));",
                "-    assertThat(result[1].specificId, is(\"4\"));",
                "-    assertThat(result[1].domainId, is(0));",
                "-    assertThat(result[1].superGroupId, is(-1));",
                "-  }",
                "-",
                "-//  /**",
                "-//   * Test of getSynchronizedGroups method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetSynchronizedGroups() throws Exception {",
                "-//    System.out.println(\"getSynchronizedGroups\");",
                "-//    GroupTable instance = null;",
                "-//    GroupRow[] expResult = null;",
                "-//    GroupRow[] result = instance.getSynchronizedGroups();",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getAllGroupIds method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetAllGroupIds() throws Exception {",
                "-//    System.out.println(\"getAllGroupIds\");",
                "-//    GroupTable instance = null;",
                "-//    String[] expResult = null;",
                "-//    String[] result = instance.getAllGroupIds();",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getAllRootGroups method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetAllRootGroups() throws Exception {",
                "-//    System.out.println(\"getAllRootGroups\");",
                "-//    GroupTable instance = null;",
                "-//    GroupRow[] expResult = null;",
                "-//    GroupRow[] result = instance.getAllRootGroups();",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getAllRootGroupIds method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetAllRootGroupIds() throws Exception {",
                "-//    System.out.println(\"getAllRootGroupIds\");",
                "-//    GroupTable instance = null;",
                "-//    String[] expResult = null;",
                "-//    String[] result = instance.getAllRootGroupIds();",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getDirectSubGroups method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetDirectSubGroups() throws Exception {",
                "-//    System.out.println(\"getDirectSubGroups\");",
                "-//    int superGroupId = 0;",
                "-//    GroupTable instance = null;",
                "-//    GroupRow[] expResult = null;",
                "-//    GroupRow[] result = instance.getDirectSubGroups(superGroupId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getDirectSubGroupIds method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetDirectSubGroupIds() throws Exception {",
                "-//    System.out.println(\"getDirectSubGroupIds\");",
                "-//    int superGroupId = 0;",
                "-//    GroupTable instance = null;",
                "-//    String[] expResult = null;",
                "-//    String[] result = instance.getDirectSubGroupIds(superGroupId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getAllRootGroupsOfDomain method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetAllRootGroupsOfDomain() throws Exception {",
                "-//    System.out.println(\"getAllRootGroupsOfDomain\");",
                "-//    int domainId = 0;",
                "-//    GroupTable instance = null;",
                "-//    GroupRow[] expResult = null;",
                "-//    GroupRow[] result = instance.getAllRootGroupsOfDomain(domainId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getAllRootGroupIdsOfDomain method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetAllRootGroupIdsOfDomain() throws Exception {",
                "-//    System.out.println(\"getAllRootGroupIdsOfDomain\");",
                "-//    int domainId = 0;",
                "-//    GroupTable instance = null;",
                "-//    String[] expResult = null;",
                "-//    String[] result = instance.getAllRootGroupIdsOfDomain(domainId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getAllGroupsOfDomain method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetAllGroupsOfDomain() throws Exception {",
                "-//    System.out.println(\"getAllGroupsOfDomain\");",
                "-//    int domainId = 0;",
                "-//    GroupTable instance = null;",
                "-//    GroupRow[] expResult = null;",
                "-//    GroupRow[] result = instance.getAllGroupsOfDomain(domainId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getSuperGroup method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetSuperGroup() throws Exception {",
                "-//    System.out.println(\"getSuperGroup\");",
                "-//    int subGroupId = 0;",
                "-//    GroupTable instance = null;",
                "-//    GroupRow expResult = null;",
                "-//    GroupRow result = instance.getSuperGroup(subGroupId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getDirectGroupsOfUser method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetDirectGroupsOfUser() throws Exception {",
                "-//    System.out.println(\"getDirectGroupsOfUser\");",
                "-//    int userId = 0;",
                "-//    GroupTable instance = null;",
                "-//    GroupRow[] expResult = null;",
                "-//    GroupRow[] result = instance.getDirectGroupsOfUser(userId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getDirectGroupsInUserRole method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetDirectGroupsInUserRole() throws Exception {",
                "-//    System.out.println(\"getDirectGroupsInUserRole\");",
                "-//    int userRoleId = 0;",
                "-//    GroupTable instance = null;",
                "-//    GroupRow[] expResult = null;",
                "-//    GroupRow[] result = instance.getDirectGroupsInUserRole(userRoleId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getDirectGroupIdsInUserRole method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetDirectGroupIdsInUserRole() throws Exception {",
                "-//    System.out.println(\"getDirectGroupIdsInUserRole\");",
                "-//    int userRoleId = 0;",
                "-//    GroupTable instance = null;",
                "-//    String[] expResult = null;",
                "-//    String[] result = instance.getDirectGroupIdsInUserRole(userRoleId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getDirectGroupsInSpaceUserRole method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetDirectGroupsInSpaceUserRole() throws Exception {",
                "-//    System.out.println(\"getDirectGroupsInSpaceUserRole\");",
                "-//    int spaceUserRoleId = 0;",
                "-//    GroupTable instance = null;",
                "-//    GroupRow[] expResult = null;",
                "-//    GroupRow[] result = instance.getDirectGroupsInSpaceUserRole(spaceUserRoleId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getDirectGroupIdsInSpaceUserRole method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetDirectGroupIdsInSpaceUserRole() throws Exception {",
                "-//    System.out.println(\"getDirectGroupIdsInSpaceUserRole\");",
                "-//    int spaceUserRoleId = 0;",
                "-//    GroupTable instance = null;",
                "-//    String[] expResult = null;",
                "-//    String[] result = instance.getDirectGroupIdsInSpaceUserRole(spaceUserRoleId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getDirectGroupsInGroupUserRole method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetDirectGroupsInGroupUserRole() throws Exception {",
                "-//    System.out.println(\"getDirectGroupsInGroupUserRole\");",
                "-//    int groupUserRoleId = 0;",
                "-//    GroupTable instance = null;",
                "-//    GroupRow[] expResult = null;",
                "-//    GroupRow[] result = instance.getDirectGroupsInGroupUserRole(groupUserRoleId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getGroupOfGroupUserRole method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetGroupOfGroupUserRole() throws Exception {",
                "-//    System.out.println(\"getGroupOfGroupUserRole\");",
                "-//    int groupUserRoleId = 0;",
                "-//    GroupTable instance = null;",
                "-//    GroupRow expResult = null;",
                "-//    GroupRow result = instance.getGroupOfGroupUserRole(groupUserRoleId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getDirectGroupIdsInGroupUserRole method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetDirectGroupIdsInGroupUserRole() throws Exception {",
                "-//    System.out.println(\"getDirectGroupIdsInGroupUserRole\");",
                "-//    int groupUserRoleId = 0;",
                "-//    GroupTable instance = null;",
                "-//    String[] expResult = null;",
                "-//    String[] result = instance.getDirectGroupIdsInGroupUserRole(groupUserRoleId);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of getAllMatchingGroups method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testGetAllMatchingGroups() throws Exception {",
                "-//    System.out.println(\"getAllMatchingGroups\");",
                "-//    GroupRow sampleGroup = null;",
                "-//    GroupTable instance = null;",
                "-//    GroupRow[] expResult = null;",
                "-//    GroupRow[] result = instance.getAllMatchingGroups(sampleGroup);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of searchGroupsIds method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testSearchGroupsIds() throws Exception {",
                "-//    System.out.println(\"searchGroupsIds\");",
                "-//    boolean isRootGroup = false;",
                "-//    int componentId = 0;",
                "-//    int[] aRoleId = null;",
                "-//    GroupRow groupModel = null;",
                "-//    GroupTable instance = null;",
                "-//    String[] expResult = null;",
                "-//    String[] result = instance.searchGroupsIds(isRootGroup, componentId, aRoleId, groupModel);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of searchGroups method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testSearchGroups() throws Exception {",
                "-//    System.out.println(\"searchGroups\");",
                "-//    GroupRow groupModel = null;",
                "-//    boolean isAnd = false;",
                "-//    GroupTable instance = null;",
                "-//    GroupRow[] expResult = null;",
                "-//    GroupRow[] result = instance.searchGroups(groupModel, isAnd);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of createGroup method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testCreateGroup() throws Exception {",
                "-//    System.out.println(\"createGroup\");",
                "-//    GroupRow group = null;",
                "-//    GroupTable instance = null;",
                "-//    instance.createGroup(group);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of prepareInsert method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testPrepareInsert() throws Exception {",
                "-//    System.out.println(\"prepareInsert\");",
                "-//    String insertQuery = \"\";",
                "-//    PreparedStatement insert = null;",
                "-//    GroupRow row = null;",
                "-//    GroupTable instance = null;",
                "-//    instance.prepareInsert(insertQuery, insert, row);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of updateGroup method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testUpdateGroup() throws Exception {",
                "-//    System.out.println(\"updateGroup\");",
                "-//    GroupRow group = null;",
                "-//    GroupTable instance = null;",
                "-//    instance.updateGroup(group);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of prepareUpdate method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testPrepareUpdate() throws Exception {",
                "-//    System.out.println(\"prepareUpdate\");",
                "-//    String updateQuery = \"\";",
                "-//    PreparedStatement update = null;",
                "-//    GroupRow row = null;",
                "-//    GroupTable instance = null;",
                "-//    instance.prepareUpdate(updateQuery, update, row);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of removeGroup method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testRemoveGroup() throws Exception {",
                "-//    System.out.println(\"removeGroup\");",
                "-//    int id = 0;",
                "-//    GroupTable instance = null;",
                "-//    instance.removeGroup(id);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of addUserInGroup method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testAddUserInGroup() throws Exception {",
                "-//    System.out.println(\"addUserInGroup\");",
                "-//    int userId = 0;",
                "-//    int groupId = 0;",
                "-//    GroupTable instance = null;",
                "-//    instance.addUserInGroup(userId, groupId);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of addUsersInGroup method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testAddUsersInGroup() throws Exception {",
                "-//    System.out.println(\"addUsersInGroup\");",
                "-//    String[] userIds = null;",
                "-//    int groupId = 0;",
                "-//    boolean checkRelation = false;",
                "-//    GroupTable instance = null;",
                "-//    instance.addUsersInGroup(userIds, groupId, checkRelation);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of removeUserFromGroup method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testRemoveUserFromGroup() throws Exception {",
                "-//    System.out.println(\"removeUserFromGroup\");",
                "-//    int userId = 0;",
                "-//    int groupId = 0;",
                "-//    GroupTable instance = null;",
                "-//    instance.removeUserFromGroup(userId, groupId);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of removeUsersFromGroup method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testRemoveUsersFromGroup() throws Exception {",
                "-//    System.out.println(\"removeUsersFromGroup\");",
                "-//    String[] userIds = null;",
                "-//    int groupId = 0;",
                "-//    boolean checkRelation = false;",
                "-//    GroupTable instance = null;",
                "-//    instance.removeUsersFromGroup(userIds, groupId, checkRelation);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-//",
                "-//  /**",
                "-//   * Test of fetchRow method, of class GroupTable.",
                "-//   */",
                "-//  @Test",
                "-//  public void testFetchRow() throws Exception {",
                "-//    System.out.println(\"fetchRow\");",
                "-//    ResultSet rs = null;",
                "-//    GroupTable instance = null;",
                "-//    GroupRow expResult = null;",
                "-//    GroupRow result = instance.fetchRow(rs);",
                "-//    assertEquals(expResult, result);",
                "-//    // TODO review the generated test code and remove the default call to fail.",
                "-//    fail(\"The test case is a prototype.\");",
                "-//  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/stratelia/webactiv/organization/OrganizationSchemaTest.java b/core-library/src/test-awaiting/java/com/stratelia/webactiv/organization/OrganizationSchemaTest.java",
                "deleted file mode 100644",
                "index 0154e93d5e..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/stratelia/webactiv/organization/OrganizationSchemaTest.java",
                "+++ /dev/null",
                "@@ -1,136 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.stratelia.webactiv.organization;",
                "-",
                "-import javax.naming.InitialContext;",
                "-import javax.sql.DataSource;",
                "-",
                "-import com.silverpeas.jndi.SimpleMemoryContextFactory;",
                "-",
                "-import org.silverpeas.util.DBUtil;",
                "-",
                "-import org.dbunit.database.DatabaseConnection;",
                "-import org.dbunit.database.IDatabaseConnection;",
                "-import org.dbunit.dataset.DataSetException;",
                "-import org.dbunit.dataset.IDataSet;",
                "-import org.dbunit.dataset.ReplacementDataSet;",
                "-import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;",
                "-import org.dbunit.operation.DatabaseOperation;",
                "-import org.junit.After;",
                "-import org.junit.AfterClass;",
                "-import org.junit.Before;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Test;",
                "-import org.springframework.context.support.ClassPathXmlApplicationContext;",
                "-",
                "-import static org.hamcrest.Matchers.is;",
                "-import static org.hamcrest.Matchers.notNullValue;",
                "-import static org.junit.Assert.assertThat;",
                "-",
                "-public class OrganizationSchemaTest {",
                "-",
                "-  private static DataSource dataSource;",
                "-  private static ClassPathXmlApplicationContext context;",
                "-",
                "-  public OrganizationSchemaTest() {",
                "-  }",
                "-",
                "-  @BeforeClass",
                "-  public static void setUpClass() throws Exception {",
                "-    SimpleMemoryContextFactory.setUpAsInitialContext();",
                "-    context = new ClassPathXmlApplicationContext(new String[]{",
                "-      \"spring-attachments-embbed-datasource.xml\"});",
                "-    dataSource = context.getBean(\"dataSource\", DataSource.class);",
                "-    /*InitialContext ic = new InitialContext();",
                "-    ic.rebind(JNDINames.ATTACHMENT_DATASOURCE, dataSource);*/",
                "-    DBUtil.getInstanceForTest(dataSource.getConnection());",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void tearDownClass() throws Exception {",
                "-    SimpleMemoryContextFactory.tearDownAsInitialContext();",
                "-    context.close();",
                "-    DBUtil.clearTestInstance();",
                "-  }",
                "-",
                "-  @Before",
                "-  public void init() throws Exception {",
                "-    IDatabaseConnection connection = getConnection();",
                "-    DatabaseOperation.CLEAN_INSERT.execute(connection, getDataSet());",
                "-    connection.close();",
                "-  }",
                "-",
                "-  @After",
                "-  public void after() throws Exception {",
                "-    IDatabaseConnection connection = getConnection();",
                "-    DatabaseOperation.DELETE_ALL.execute(connection, getDataSet());",
                "-    connection.close();",
                "-  }",
                "-",
                "-  private IDatabaseConnection getConnection() throws Exception {",
                "-    IDatabaseConnection connection = new DatabaseConnection(dataSource.getConnection());",
                "-    return connection;",
                "-  }",
                "-",
                "-  protected IDataSet getDataSet() throws DataSetException {",
                "-    ReplacementDataSet dataSet = new ReplacementDataSet(new FlatXmlDataSetBuilder().build(",
                "-        this.getClass().getClassLoader().getResourceAsStream(",
                "-        \"com/stratelia/webactiv/organization/test-attachment-dataset.xml\")));",
                "-    dataSet.addReplacementObject(\"[NULL]\", null);",
                "-    return dataSet;",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getJNDIName method, of class OrganizationSchema.",
                "-   */",
                "-  @Test",
                "-  public void testGetJNDIName() {",
                "-    OrganizationSchema instance = new OrganizationSchema();",
                "-    String result = instance.getJNDIName();",
                "-    assertThat(result, is(\"jdbc/Silverpeas\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of init method, of class OrganizationSchema.",
                "-   */",
                "-  @Test",
                "-  public void testInit() {",
                "-    OrganizationSchema instance = new OrganizationSchema();",
                "-    instance.init();",
                "-    assertThat(instance.accessLevel, is(notNullValue()));",
                "-    assertThat(instance.domain, is(notNullValue()));",
                "-    assertThat(instance.group, is(notNullValue()));",
                "-    assertThat(instance.groupUserRole, is(notNullValue()));",
                "-    assertThat(instance.instance, is(notNullValue()));",
                "-    assertThat(instance.instanceData, is(notNullValue()));",
                "-    assertThat(instance.instanceI18N, is(notNullValue()));",
                "-    assertThat(instance.keyStore, is(notNullValue()));",
                "-    assertThat(instance.space, is(notNullValue()));",
                "-    assertThat(instance.spaceI18N, is(notNullValue()));",
                "-    assertThat(instance.spaceUserRole, is(notNullValue()));",
                "-    assertThat(instance.user, is(notNullValue()));",
                "-    assertThat(instance.userRole, is(notNullValue()));",
                "-",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/com/stratelia/webactiv/organization/SpaceTableTest.java b/core-library/src/test-awaiting/java/com/stratelia/webactiv/organization/SpaceTableTest.java",
                "deleted file mode 100644",
                "index 1d8f81c4f0..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/stratelia/webactiv/organization/SpaceTableTest.java",
                "+++ /dev/null",
                "@@ -1,113 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-/*",
                "- * To change this template, choose Tools | Templates",
                "- * and open the template in the editor.",
                "- */",
                "-package com.stratelia.webactiv.organization;",
                "-",
                "-import com.silverpeas.components.model.AbstractTestDao;",
                "-",
                "-import org.junit.Test;",
                "-",
                "-import static org.junit.Assert.assertArrayEquals;",
                "-",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-public class SpaceTableTest extends AbstractTestDao {",
                "-",
                "-  public SpaceTableTest() {",
                "-  }",
                "-",
                "-  @Override",
                "-  protected String getDatasetFileName() {",
                "-    return \"test-admin-spaces-dataset.xml\";",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of isSpaceInstExist method, of class SpaceTable.",
                "-   */",
                "-  @Test",
                "-  public void testIsSpaceInstExist() throws Exception {",
                "-    OrganizationSchema schema = new OrganizationSchema(getConnection().getConnection());",
                "-    SpaceTable instance = schema.space;",
                "-    assertTrue(instance.isSpaceInstExist(1));",
                "-    assertTrue(instance.isSpaceInstExist(2));",
                "-    assertTrue(instance.isSpaceInstExist(3));",
                "-    assertTrue(instance.isSpaceInstExist(4));",
                "-    assertTrue(instance.isSpaceInstExist(5));",
                "-    assertFalse(instance.isSpaceInstExist(6));",
                "-    assertFalse(instance.isSpaceInstExist(100));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getAllSpaceIds method, of class SpaceTable.",
                "-   */",
                "-  @Test",
                "-  public void testGetAllSpaceIds() throws Exception {",
                "-    OrganizationSchema schema = new OrganizationSchema(getConnection().getConnection());",
                "-    SpaceTable instance = schema.space;",
                "-    String[] expResult = new String[]{\"1\", \"2\", \"3\", \"4\", \"5\"};",
                "-    String[] result = instance.getAllSpaceIds();",
                "-    assertNotNull(result);",
                "-    assertEquals(expResult.length, result.length);",
                "-    assertArrayEquals(expResult, result);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getAllRootSpaceIds method, of class SpaceTable.",
                "-   */",
                "-  @Test",
                "-  public void testGetAllRootSpaceIds() throws Exception {",
                "-    OrganizationSchema schema = new OrganizationSchema(getConnection().getConnection());",
                "-    SpaceTable instance = schema.space;",
                "-    String[] expResult = new String[]{\"1\"};",
                "-    String[] result = instance.getAllRootSpaceIds();",
                "-    assertNotNull(result);",
                "-    assertEquals(expResult.length, result.length);",
                "-    assertArrayEquals(expResult, result);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getDirectSubSpaceIds method, of class SpaceTable.",
                "-   */",
                "-  @Test",
                "-  public void testGetDirectSubSpaceIds() throws Exception {",
                "-    OrganizationSchema schema = new OrganizationSchema(getConnection().getConnection());",
                "-    SpaceTable instance = schema.space;",
                "-    String[] result = instance.getDirectSubSpaceIds(2);",
                "-    String[] expResult = new String[]{\"3\", \"4\"};",
                "-    assertNotNull(result);",
                "-    assertEquals(expResult.length, result.length);",
                "-    assertArrayEquals(expResult, result);",
                "-  }",
                "-",
                "-",
                "-  @Override",
                "-  protected String getTableCreationFileName() {",
                "-    return \"create-database.sql\";",
                "-  }",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/core-library/src/test-awaiting/java/com/stratelia/webactiv/util/DBUtilTest.java b/core-library/src/test-awaiting/java/com/stratelia/webactiv/util/DBUtilTest.java",
                "deleted file mode 100644",
                "index e1da7e2386..0000000000",
                "--- a/core-library/src/test-awaiting/java/com/stratelia/webactiv/util/DBUtilTest.java",
                "+++ /dev/null",
                "@@ -1,276 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package com.stratelia.webactiv.util;",
                "-",
                "-import com.silverpeas.jndi.SimpleMemoryContextFactory;",
                "-import org.apache.commons.io.IOUtils;",
                "-import org.apache.commons.lang3.tuple.Pair;",
                "-import org.dbunit.database.DatabaseConnection;",
                "-import org.dbunit.database.IDatabaseConnection;",
                "-import org.dbunit.dataset.IDataSet;",
                "-import org.dbunit.dataset.ReplacementDataSet;",
                "-import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;",
                "-import org.dbunit.operation.DatabaseOperation;",
                "-import org.junit.After;",
                "-import org.junit.AfterClass;",
                "-import org.junit.Before;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Test;",
                "-import org.silverpeas.util.DBUtil;",
                "-import org.springframework.context.support.ClassPathXmlApplicationContext;",
                "-",
                "-import javax.naming.InitialContext;",
                "-import javax.sql.DataSource;",
                "-import java.io.InputStream;",
                "-import java.sql.Connection;",
                "-import java.sql.PreparedStatement;",
                "-import java.sql.ResultSet;",
                "-import java.sql.SQLException;",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-import java.util.concurrent.Callable;",
                "-import java.util.concurrent.ExecutorService;",
                "-import java.util.concurrent.Executors;",
                "-import java.util.concurrent.Future;",
                "-import java.util.logging.Logger;",
                "-",
                "-import static org.hamcrest.Matchers.is;",
                "-import static org.hamcrest.Matchers.notNullValue;",
                "-import static org.junit.Assert.assertThat;",
                "-import static org.junit.Assert.fail;",
                "-",
                "-public class DBUtilTest {",
                "-",
                "-  private static final String DATASOURCE_NAME = \"SilverpeasDB\";",
                "-  private static DataSource dataSource;",
                "-  private static ClassPathXmlApplicationContext context;",
                "-",
                "-  public DBUtilTest() {",
                "-  }",
                "-",
                "-  @BeforeClass",
                "-  public static void setUpClass() throws Exception {",
                "-    SimpleMemoryContextFactory.setUpAsInitialContext();",
                "-    context = new ClassPathXmlApplicationContext(new String[]{",
                "-      \"spring-h2-datasource.xml\"});",
                "-    dataSource = context.getBean(\"dataSource\", DataSource.class);",
                "-    InitialContext ic = new InitialContext();",
                "-    ic.rebind(DATASOURCE_NAME, dataSource);",
                "-    DBUtil.getInstanceForTest(dataSource.getConnection());",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void tearDownClass() throws Exception {",
                "-    SimpleMemoryContextFactory.tearDownAsInitialContext();",
                "-    context.close();",
                "-    DBUtil.clearTestInstance();",
                "-  }",
                "-",
                "-  @Before",
                "-  public void init() throws Exception {",
                "-    IDatabaseConnection connection = getConnection();",
                "-    DatabaseOperation.CLEAN_INSERT.execute(connection, getDataSet());",
                "-    connection.close();",
                "-  }",
                "-",
                "-  @After",
                "-  public void after() throws Exception {",
                "-    IDatabaseConnection connection = getConnection();",
                "-    DatabaseOperation.DELETE_ALL.execute(connection, getDataSet());",
                "-    connection.close();",
                "-  }",
                "-",
                "-  private IDatabaseConnection getConnection() throws Exception {",
                "-    IDatabaseConnection connection = new DatabaseConnection(dataSource.getConnection());",
                "-    return connection;",
                "-  }",
                "-",
                "-  protected IDataSet getDataSet() throws Exception {",
                "-    InputStream in = this.getClass().getClassLoader().getResourceAsStream(",
                "-        \"com/stratelia/webactiv/util/dbutil-dataset.xml\");",
                "-    try {",
                "-      FlatXmlDataSetBuilder builder = new FlatXmlDataSetBuilder();",
                "-      ReplacementDataSet dataSet = new ReplacementDataSet(builder.build(in));",
                "-      dataSet.addReplacementObject(\"[NULL]\", null);",
                "-      return dataSet;",
                "-    } finally {",
                "-      IOUtils.closeQuietly(in);",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getDateFieldLength method, of class DBUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetDateFieldLength() {",
                "-    assertThat(DBUtil.getDateFieldLength(), is(10));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getTextMaxiLength method, of class DBUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetTextMaxiLength() {",
                "-    assertThat(DBUtil.getTextMaxiLength(), is(4000));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getTextAreaLength method, of class DBUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetTextAreaLength() {",
                "-    assertThat(DBUtil.getTextAreaLength(), is(2000));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getTextFieldLength method, of class DBUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetTextFieldLength() {",
                "-    assertThat(DBUtil.getTextFieldLength(), is(1000));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of makeConnection method, of class DBUtil.",
                "-   */",
                "-  @Test",
                "-  public void testMakeConnection() throws SQLException {",
                "-    Connection connection = DBUtil.openConnection();",
                "-    assertThat(connection, is(notNullValue()));",
                "-    connection.close();",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getNextId method, of class DBUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetNextIdWithoutConnectionExistingLine() {",
                "-    String tableName = \"sb_test_dbutil\";",
                "-    String idName = \"id\";",
                "-    int result = DBUtil.getNextId(tableName, idName);",
                "-    assertThat(result, is(501));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getNextId method, of class DBUtil when the line doesn't exist in the table.",
                "-   */",
                "-  @Test",
                "-  public void testGetNextIdWithoutConnectionInexistingLine() {",
                "-    String tableName = \"sb_document_doc\";",
                "-    String idName = \"id\";",
                "-    int result = DBUtil.getNextId(tableName, idName);",
                "-    assertThat(result, is(1));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getNextId method, of class DBUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetNextIdWithConnectionInexistingLine() throws Exception {",
                "-    String tableName = \"sb_simple_document\";",
                "-    String idName = \"id\";",
                "-    Connection connection = dataSource.getConnection();",
                "-    try {",
                "-      connection.setAutoCommit(false);",
                "-      int result = DBUtil.getNextId(connection, tableName, idName);",
                "-      assertThat(result, is(1));",
                "-    } finally {",
                "-      connection.close();",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getNextId method, of class DBUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetNextIdWithConnectionExistingLine() throws Exception {",
                "-    String tableName = \"sb_test_dbutil_connection\";",
                "-    String idName = \"id\";",
                "-    Connection connection = dataSource.getConnection();",
                "-    try {",
                "-      connection.setAutoCommit(false);",
                "-      int result = DBUtil.getNextId(connection, tableName, idName);",
                "-      assertThat(result, is(501));",
                "-    } finally {",
                "-      connection.close();",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getMaxId method, of class DBUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetMaxIdWithExistingLine() throws Exception {",
                "-    Connection connection = dataSource.getConnection();",
                "-    try {",
                "-      connection.setAutoCommit(false);",
                "-      String tableName = \"sb_test_dbutil_connection\";",
                "-      String idName = \"id\";",
                "-      int result = DBUtil.getMaxId(connection, tableName, idName);",
                "-      assertThat(result, is(501));",
                "-    } finally {",
                "-      connection.close();",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getMaxId method, of class DBUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetMaxIdWithInexistingLine() throws Exception {",
                "-    Connection connection = dataSource.getConnection();",
                "-    try {",
                "-      connection.setAutoCommit(false);",
                "-      String tableName = \"sb_simple_document\";",
                "-      String idName = \"id\";",
                "-      int result = DBUtil.getMaxId(connection, tableName, idName);",
                "-      assertThat(result, is(1));",
                "-    } finally {",
                "-      connection.close();",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of getMaxFromTable method, of class DBUtil.",
                "-   */",
                "-  @Test",
                "-  public void testGetMaxFromTable() throws Exception {",
                "-",
                "-    Connection connection = dataSource.getConnection();",
                "-    try {",
                "-      connection.setAutoCommit(false);",
                "-      String tableName = \"sb_test_dbutil_connection\";",
                "-      String idName = \"id\";",
                "-      int result = DBUtil.getMaxFromTable(connection, tableName, idName);",
                "-      assertThat(result, is(1));",
                "-    } finally {",
                "-      connection.close();",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetAllTableNames() {",
                "-    assertThat(29, is(DBUtil.getAllTableNames().size()));",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/admin/mock/OrganizationControllerMockWrapper.java b/core-library/src/test-awaiting/java/org/silverpeas/admin/mock/OrganizationControllerMockWrapper.java",
                "deleted file mode 100644",
                "index b245421126..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/admin/mock/OrganizationControllerMockWrapper.java",
                "+++ /dev/null",
                "@@ -1,478 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.admin.mock;",
                "-",
                "-import com.silverpeas.admin.components.WAComponent;",
                "-import com.stratelia.webactiv.SilverpeasRole;",
                "-import com.stratelia.webactiv.beans.admin.*;",
                "-import org.silverpeas.util.ListSlice;",
                "-",
                "-import javax.inject.Named;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-",
                "-import static org.mockito.Mockito.mock;",
                "-",
                "-/**",
                "- * A wrapper around an OrganizationController mock for testing purpose.",
                "- * It is managed by the IoC container and it plays the role of an OrganizationController instance",
                "- * for the business objects involved in a test. For doing, it delegates the invoked methods to",
                "- * the wrapped mock.",
                "- * You can get the wrapped mock for registering some behaviours an OrganizationController instance",
                "- * should have in the tests.",
                "- */",
                "-@Named(\"organizationController\")",
                "-public class OrganizationControllerMockWrapper extends DefaultOrganizationController {",
                "-",
                "-  private static final long serialVersionUID = 2449731617524868440L;",
                "-  private DefaultOrganizationController mock;",
                "-",
                "-  public OrganizationControllerMockWrapper() {",
                "-    mock = mock(DefaultOrganizationController.class);",
                "-  }",
                "-",
                "-  /**",
                "-   * Gets the mock of the OrganizationController class wrapped by this instance.",
                "-   * @return an OrganizationController mock.",
                "-   */",
                "-  public OrganizationController getMock() {",
                "-    return mock;",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] searchUsersIds(String groupId, String componentId, String[] profileId,",
                "-          UserDetail filterUser) {",
                "-    return mock.searchUsersIds(groupId, componentId, profileId, filterUser);",
                "-  }",
                "-",
                "-  @Override",
                "-  public UserDetail[] searchUsers(UserDetail modelUser, boolean isAnd) {",
                "-    return mock.searchUsers(modelUser, isAnd);",
                "-  }",
                "-",
                "-  @Override",
                "-  public  ListSlice<UserDetail> searchUsers(UserDetailsSearchCriteria criteria) {",
                "-    return mock.searchUsers(criteria);",
                "-  }",
                "-",
                "-  @Override",
                "-  public  ListSlice<Group> searchGroups(GroupsSearchCriteria criteria) {",
                "-    return mock.searchGroups(criteria);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] searchGroupsIds(boolean isRootGroup, String componentId, String[] profileId,",
                "-          Group modelGroup) {",
                "-    return mock.searchGroupsIds(isRootGroup, componentId, profileId, modelGroup);",
                "-  }",
                "-",
                "-  @Override",
                "-  public Group[] searchGroups(Group modelGroup, boolean isAnd) {",
                "-    return mock.searchGroups(modelGroup, isAnd);",
                "-  }",
                "-",
                "-  @Override",
                "-  public void reloadAdminCache() {",
                "-    mock.reloadAdminCache();",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isSpaceAvailable(String spaceId, String userId) {",
                "-    return mock.isSpaceAvailable(spaceId, userId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isObjectAvailable(int objectId, ObjectType objectType, String componentId,",
                "-          String userId) {",
                "-    return mock.isObjectAvailable(objectId, objectType, componentId, userId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isComponentManageable(String componentId, String userId) {",
                "-    return mock.isComponentManageable(componentId, userId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isComponentExist(String componentId) {",
                "-    return mock.isComponentExist(componentId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isComponentAvailable(String componentId, String userId) {",
                "-    return mock.isComponentAvailable(componentId, userId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isAnonymousAccessActivated() {",
                "-    return mock.isAnonymousAccessActivated();",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getUsersIdsByRoleNames(String componentId, String objectId, ObjectType objectType,",
                "-          List<String> profileNames) {",
                "-    return mock.getUsersIdsByRoleNames(componentId, objectId, objectType, profileNames);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getUsersIdsByRoleNames(String componentId,",
                "-          List<String> profileNames) {",
                "-    return mock.getUsersIdsByRoleNames(componentId, profileNames);",
                "-  }",
                "-",
                "-  @Override",
                "-  public UserDetail[] getUsers(String sPrefixTableName, String sComponentName, String sProfile) {",
                "-    return mock.getUsers(sPrefixTableName, sComponentName, sProfile);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getUserProfiles(String userId, String componentId, int objectId,",
                "-          ObjectType objectType) {",
                "-    return mock.getUserProfiles(userId, componentId, objectId, objectType);",
                "-  }",
                "-",
                "-  @Override",
                "-  public Map<Integer, List<String>> getUserObjectProfiles(final String userId,",
                "-      final String componentId, final ObjectType objectType) {",
                "-    return mock.getUserObjectProfiles(userId, componentId, objectType);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getUserProfiles(String userId, String componentId) {",
                "-    return mock.getUserProfiles(userId, componentId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public ProfileInst getUserProfile(String profileId) {",
                "-    return mock.getUserProfile(profileId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getUserManageableSpaceIds(String sUserId) {",
                "-    return mock.getUserManageableSpaceIds(sUserId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public UserFull getUserFull(String sUserId) {",
                "-    return mock.getUserFull(sUserId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public UserDetail[] getUserDetails(String[] asUserIds) {",
                "-    return mock.getUserDetails(asUserIds);",
                "-  }",
                "-",
                "-  @Override",
                "-  public UserDetail getUserDetail(String sUserId) {",
                "-    return mock.getUserDetail(sUserId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<SpaceInstLight> getSubSpacesContainingComponent(String spaceId, String userId,",
                "-          String componentName) {",
                "-    return mock.getSubSpacesContainingComponent(spaceId, userId, componentName);",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<SpaceInstLight> getSpaceTreeview(String userId) {",
                "-    return mock.getSpaceTreeview(userId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<SpaceInst> getSpacePathToComponent(String componentId) {",
                "-    return mock.getSpacePathToComponent(componentId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<SpaceInst> getSpacePath(String spaceId) {",
                "-    return mock.getSpacePath(spaceId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getSpaceNames(String[] asSpaceIds) {",
                "-    return mock.getSpaceNames(asSpaceIds);",
                "-  }",
                "-",
                "-  @Override",
                "-  public SpaceInstLight getSpaceInstLightById(String spaceId) {",
                "-    return mock.getSpaceInstLightById(spaceId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public SpaceInst getSpaceInstById(String sSpaceId) {",
                "-    return mock.getSpaceInstById(sSpaceId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<SpaceInstLight> getRootSpacesContainingComponent(String userId, String componentName) {",
                "-    return mock.getRootSpacesContainingComponent(userId, componentName);",
                "-  }",
                "-",
                "-  @Override",
                "-  public SpaceInstLight getRootSpace(String spaceId) {",
                "-    return mock.getRootSpace(spaceId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<String> getPathToGroup(String groupId) {",
                "-    return mock.getPathToGroup(groupId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public Group[] getGroups(String[] groupsId) {",
                "-    return mock.getGroups(groupsId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public Group getGroup(String sGroupId) {",
                "-    return mock.getGroup(sGroupId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String getGeneralSpaceId() {",
                "-    return mock.getGeneralSpaceId();",
                "-  }",
                "-",
                "-  @Override",
                "-  public UserDetail[] getFiltredDirectUsers(String sGroupId, String sUserLastNameFilter) {",
                "-    return mock.getFiltredDirectUsers(sGroupId, sUserLastNameFilter);",
                "-  }",
                "-",
                "-  @Override",
                "-  public Domain getDomain(String domainId) {",
                "-    return mock.getDomain(domainId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getDirectGroupIdsOfUser(String userId) {",
                "-    return mock.getDirectGroupIdsOfUser(userId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String getComponentParameterValue(String sComponentId, String parameterName) {",
                "-    return mock.getComponentParameterValue(sComponentId, parameterName);",
                "-  }",
                "-",
                "-  @Override",
                "-  public ComponentInstLight getComponentInstLight(String sComponentId) {",
                "-    return mock.getComponentInstLight(sComponentId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public ComponentInst getComponentInst(String sComponentId) {",
                "-    return mock.getComponentInst(sComponentId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getComponentIdsForUser(String sUserId, String sCompoName) {",
                "-    return mock.getComponentIdsForUser(sUserId, sCompoName);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getCompoId(String sCompoName) {",
                "-    return mock.getCompoId(sCompoName);",
                "-  }",
                "-",
                "-  @Override",
                "-  public CompoSpace[] getCompoForUser(String sUserId, String sCompoName) {",
                "-    return mock.getCompoForUser(sUserId, sCompoName);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAvailDriverCompoIds(String sClientSpaceId, String sUserId) {",
                "-    return mock.getAvailDriverCompoIds(sClientSpaceId, sUserId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<ComponentInstLight> getAvailComponentInstLights(String userId, String componentName) {",
                "-    return mock.getAvailComponentInstLights(userId, componentName);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAvailCompoIdsAtRoot(String sClientSpaceId, String sUserId) {",
                "-    return mock.getAvailCompoIdsAtRoot(sClientSpaceId, sUserId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId) {",
                "-    return mock.getAvailCompoIds(sClientSpaceId, sUserId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAllowedSubSpaceIds(String userId, String spaceFatherId) {",
                "-    return mock.getAllowedSubSpaceIds(userId, spaceFatherId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAllowedComponentIds(String userId) {",
                "-    return mock.getAllowedComponentIds(userId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public UserDetail[] getAllUsersOfGroup(String groupId) {",
                "-    return mock.getAllUsersOfGroup(groupId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public UserDetail[] getAllUsersInDomain(String domainId) {",
                "-    return mock.getAllUsersInDomain(domainId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAllUsersIds() {",
                "-    return mock.getAllUsersIds();",
                "-  }",
                "-",
                "-  @Override",
                "-  public UserDetail[] getAllUsers() {",
                "-    return mock.getAllUsers();",
                "-  }",
                "-",
                "-  @Override",
                "-  public UserDetail[] getAllUsers(String componentId) {",
                "-    return mock.getAllUsers(componentId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public int getAllSubUsersNumber(String sGroupId) {",
                "-    return mock.getAllSubUsersNumber(sGroupId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAllSubSpaceIds(String sSpaceId, String sUserId) {",
                "-    return mock.getAllSubSpaceIds(sSpaceId, sUserId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAllSubSpaceIds(String sSpaceId) {",
                "-    return mock.getAllSubSpaceIds(sSpaceId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public Group[] getAllSubGroups(String parentGroupId) {",
                "-    return mock.getAllSubGroups(parentGroupId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAllSpaceIds(String sUserId) {",
                "-    return mock.getAllSpaceIds(sUserId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAllSpaceIds() {",
                "-    return mock.getAllSpaceIds();",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAllRootSpaceIds(String sUserId) {",
                "-    return mock.getAllRootSpaceIds(sUserId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAllRootSpaceIds() {",
                "-    return mock.getAllRootSpaceIds();",
                "-  }",
                "-",
                "-  @Override",
                "-  public Group[] getAllRootGroupsInDomain(String domainId) {",
                "-    return mock.getAllRootGroupsInDomain(domainId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public Group[] getAllRootGroups() {",
                "-    return mock.getAllRootGroups();",
                "-  }",
                "-",
                "-  @Override",
                "-  public Group[] getAllGroups() {",
                "-    return mock.getAllGroups();",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAllGroupIdsOfUser(String userId) {",
                "-    return mock.getAllGroupIdsOfUser(userId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public Domain[] getAllDomains() {",
                "-    return mock.getAllDomains();",
                "-  }",
                "-",
                "-  @Override",
                "-  public Map<String, String> getAllComponentsNames() {",
                "-    return mock.getAllComponentsNames();",
                "-  }",
                "-",
                "-  @Override",
                "-  public Map<String, WAComponent> getAllComponents() {",
                "-    return mock.getAllComponents();",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAllComponentIdsRecur(String sSpaceId, String sUserId, String sComponentRootName,",
                "-          boolean inCurrentSpace, boolean inAllSpaces) {",
                "-    return mock.getAllComponentIdsRecur(sSpaceId, sUserId, sComponentRootName, inCurrentSpace,",
                "-            inAllSpaces);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAllComponentIdsRecur(String sSpaceId) {",
                "-    return mock.getAllComponentIdsRecur(sSpaceId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAllComponentIds(String sSpaceId) {",
                "-    return mock.getAllComponentIds(sSpaceId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public String[] getAdministratorUserIds(String fromUserId) {",
                "-    return mock.getAdministratorUserIds(fromUserId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public boolean isToolAvailable(String toolId) {",
                "-    return mock.isToolAvailable(toolId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public SpaceProfile getSpaceProfile(final String spaceId, final SilverpeasRole role)",
                "-      throws AdminException {",
                "-    return mock.getSpaceProfile(spaceId, role);",
                "-  }",
                "-",
                "-  @Override",
                "-  public SpaceWithSubSpacesAndComponents getFullTreeview(String userId) throws AdminException {",
                "-    return mock.getFullTreeview(userId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<SpaceInstLight> getPathToSpace(String spaceId) {",
                "-    return mock.getPathToSpace(spaceId);",
                "-  }",
                "-",
                "-  @Override",
                "-  public List<SpaceInstLight> getPathToComponent(String componentId) {",
                "-    return mock.getPathToComponent(componentId);",
                "-  }",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/admin/space/mock/DefaultComponentSpaceQuotaService.java b/core-library/src/test-awaiting/java/org/silverpeas/admin/space/mock/DefaultComponentSpaceQuotaService.java",
                "deleted file mode 100644",
                "index 0b6bed5699..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/admin/space/mock/DefaultComponentSpaceQuotaService.java",
                "+++ /dev/null",
                "@@ -1,123 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.admin.space.mock;",
                "-",
                "-import org.silverpeas.core.admin.space.quota.ComponentSpaceQuotaKey;",
                "-import org.silverpeas.core.admin.space.quota.ComponentSpaceQuotaService;",
                "-import org.silverpeas.quota.exception.QuotaException;",
                "-import org.silverpeas.quota.model.Quota;",
                "-import org.silverpeas.quota.offset.AbstractQuotaCountingOffset;",
                "-",
                "-import com.silverpeas.annotation.Service;",
                "-",
                "-/**",
                "- * No quota handling into unit tests",
                "- * @author Yohann Chastagnier",
                "- */",
                "-@Service",
                "-public class DefaultComponentSpaceQuotaService implements ComponentSpaceQuotaService {",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see QuotaService#getCurrentCount(QuotaKey)",
                "-   */",
                "-  @Override",
                "-  public long getCurrentCount(final ComponentSpaceQuotaKey key) throws QuotaException {",
                "-    return 0;",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see QuotaService#initialize(QuotaKey, long)",
                "-   */",
                "-  @Override",
                "-  public Quota initialize(final ComponentSpaceQuotaKey key, final long maxCount)",
                "-      throws QuotaException {",
                "-    return new Quota();",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see QuotaService#initialize(QuotaKey, long,",
                "-   * long)",
                "-   */",
                "-  @Override",
                "-  public Quota initialize(final ComponentSpaceQuotaKey key, final long minCount, final long maxCount)",
                "-      throws QuotaException {",
                "-    return new Quota();",
                "-  }",
                "-",
                "-  @Override",
                "-  public Quota initialize(final ComponentSpaceQuotaKey key, final Quota quota)",
                "-      throws QuotaException {",
                "-    return null;",
                "-  }",
                "-",
                "-  /*",
                "-     * (non-Javadoc)",
                "-     * @see QuotaService#get(QuotaKey)",
                "-     */",
                "-  @Override",
                "-  public Quota get(final ComponentSpaceQuotaKey key) throws QuotaException {",
                "-    return new Quota();",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see QuotaService#verify(QuotaKey)",
                "-   */",
                "-  @Override",
                "-  public Quota verify(final ComponentSpaceQuotaKey key) throws QuotaException {",
                "-    return new Quota();",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see QuotaService#verify(QuotaKey,",
                "-   * AbstractQuotaCountingOffset)",
                "-   */",
                "-  @Override",
                "-  public Quota verify(final ComponentSpaceQuotaKey key,",
                "-      final AbstractQuotaCountingOffset countingOffset) throws QuotaException {",
                "-    return new Quota();",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see QuotaService#remove(QuotaKey)",
                "-   */",
                "-  @Override",
                "-  public void remove(final ComponentSpaceQuotaKey key) {",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * org.silverpeas.core.admin.space.quota.ComponentSpaceQuotaService#getQuotaReachedFromSpacePath(org.",
                "-   * silverpeas.admin.space.quota.ComponentSpaceQuotaKey)",
                "-   */",
                "-  @Override",
                "-  public Quota getQuotaReachedFromSpacePath(final ComponentSpaceQuotaKey key) {",
                "-    return new Quota();",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/admin/space/mock/DefaultDataStorageSpaceQuotaService.java b/core-library/src/test-awaiting/java/org/silverpeas/admin/space/mock/DefaultDataStorageSpaceQuotaService.java",
                "deleted file mode 100644",
                "index 75e0f173d1..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/admin/space/mock/DefaultDataStorageSpaceQuotaService.java",
                "+++ /dev/null",
                "@@ -1,123 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.admin.space.mock;",
                "-",
                "-import org.silverpeas.core.admin.space.quota.DataStorageSpaceQuotaKey;",
                "-import org.silverpeas.core.admin.space.quota.DataStorageSpaceQuotaService;",
                "-import org.silverpeas.quota.exception.QuotaException;",
                "-import org.silverpeas.quota.model.Quota;",
                "-import org.silverpeas.quota.offset.AbstractQuotaCountingOffset;",
                "-",
                "-import com.silverpeas.annotation.Service;",
                "-",
                "-/**",
                "- * No quota handling into unit tests",
                "- * @author Yohann Chastagnier",
                "- */",
                "-@Service",
                "-public class DefaultDataStorageSpaceQuotaService implements DataStorageSpaceQuotaService {",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see QuotaService#getCurrentCount(QuotaKey)",
                "-   */",
                "-  @Override",
                "-  public long getCurrentCount(final DataStorageSpaceQuotaKey key) throws QuotaException {",
                "-    return 0;",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see QuotaService#initialize(QuotaKey, long)",
                "-   */",
                "-  @Override",
                "-  public Quota initialize(final DataStorageSpaceQuotaKey key, final long maxCount)",
                "-      throws QuotaException {",
                "-    return new Quota();",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see QuotaService#initialize(QuotaKey, long,",
                "-   * long)",
                "-   */",
                "-  @Override",
                "-  public Quota initialize(final DataStorageSpaceQuotaKey key, final long minCount,",
                "-      final long maxCount) throws QuotaException {",
                "-    return new Quota();",
                "-  }",
                "-",
                "-  @Override",
                "-  public Quota initialize(final DataStorageSpaceQuotaKey key, final Quota quota)",
                "-      throws QuotaException {",
                "-    return null;",
                "-  }",
                "-",
                "-  /*",
                "-     * (non-Javadoc)",
                "-     * @see QuotaService#get(QuotaKey)",
                "-     */",
                "-  @Override",
                "-  public Quota get(final DataStorageSpaceQuotaKey key) throws QuotaException {",
                "-    return new Quota();",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see QuotaService#verify(QuotaKey)",
                "-   */",
                "-  @Override",
                "-  public Quota verify(final DataStorageSpaceQuotaKey key) throws QuotaException {",
                "-    return new Quota();",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see QuotaService#verify(QuotaKey,",
                "-   * AbstractQuotaCountingOffset)",
                "-   */",
                "-  @Override",
                "-  public Quota verify(final DataStorageSpaceQuotaKey key,",
                "-      final AbstractQuotaCountingOffset countingOffset) throws QuotaException {",
                "-    return new Quota();",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * @see QuotaService#remove(QuotaKey)",
                "-   */",
                "-  @Override",
                "-  public void remove(final DataStorageSpaceQuotaKey key) {",
                "-  }",
                "-",
                "-  /*",
                "-   * (non-Javadoc)",
                "-   * org.silverpeas.core.admin.space.quota.DataStorageSpaceQuotaService#getQuotaReachedFromSpacePath(",
                "-   * org.silverpeas.core.admin.space.quota.DataStorageSpaceQuotaKey)",
                "-   */",
                "-  @Override",
                "-  public Quota getQuotaReachedFromSpacePath(final DataStorageSpaceQuotaKey key) {",
                "-    return new Quota();",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/authentication/encryption/UnixSHA512EncryptionTest.java b/core-library/src/test-awaiting/java/org/silverpeas/authentication/encryption/UnixSHA512EncryptionTest.java",
                "deleted file mode 100644",
                "index 8cf913b2dc..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/authentication/encryption/UnixSHA512EncryptionTest.java",
                "+++ /dev/null",
                "@@ -1,161 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.security.authentication.encryption;",
                "-",
                "-import org.junit.Before;",
                "-import org.junit.Test;",
                "-import org.silverpeas.util.Charsets;",
                "-",
                "-import static org.hamcrest.MatcherAssert.assertThat;",
                "-import static org.hamcrest.Matchers.is;",
                "-",
                "-/**",
                "- * Unit tests on the Unix variant of the SHA-512 encryption for passwords.",
                "- */",
                "-public class UnixSHA512EncryptionTest {",
                "-",
                "-  static final String SIMPLE_DIGEST = \"$6$saltstring$FwwMuPiGNXz8H78tCv7t9djhhB8drD7mo2gjpEpkQ8xnSDPZwvm05vIhse.tgr9lOxZpxL2r/Bvl96m5sDFic.\";",
                "-  static final String COMPLETE_DIGEST = \"$6$rounds=10000$saltstring$6CQL08eiNceWQP69zZ4GiVdq2X20CJ3XrrSeqYcAIkABtUDrObxnmrwwCs11SwXKHW7t5umufCvTKSH34HteK.\";",
                "-  static final String DIGEST_OF_EMPTY_PASSWORD = \"$6$saltstring$kyGrqt6gmjAdtFLPrflEFifSYLCWWq1pyx95SvqinLDy2UHmj0sTF0MSLMwxPFZc3tu5kQckI8fks0zOPda3n1\";",
                "-  static final String MD5_DIGEST = \"$1$saltstring$cV2aCPNGeOcei00Op3/Oo/\";",
                "-",
                "-  static final String password = \"Hello World!\";",
                "-  static final byte[] salt = \"saltstring\".getBytes(Charsets.UTF_8);",
                "-  static final byte[] saltWithRounds = \"rounds=10000$saltstring\".getBytes(Charsets.UTF_8);",
                "-  static final byte[] emptySalt = new byte[0];",
                "-",
                "-  private UnixSHA512Encryption encryption;",
                "-",
                "-  @Before",
                "-  public void setUp() throws Exception {",
                "-    encryption = new UnixSHA512Encryption();",
                "-  }",
                "-",
                "-  @Test(expected = NullPointerException.class)",
                "-  public void testEncryptionOfANullPassword() throws Exception {",
                "-    encryption.encrypt(null, salt);",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testEncryptionOfAnEmptyPassword() throws Exception {",
                "-    String digest = encryption.encrypt(\"\", salt);",
                "-    assertThat(digest, is(DIGEST_OF_EMPTY_PASSWORD));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testEncryptionOfANonEmptyPassword() throws Exception {",
                "-    String digest = encryption.encrypt(password, salt);",
                "-    assertThat(digest, is(SIMPLE_DIGEST));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testEncryptionWithARoundsInstruction() throws Exception {",
                "-    String digest = encryption.encrypt(password, saltWithRounds);",
                "-    assertThat(digest, is(COMPLETE_DIGEST));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testCheckSuccess() throws Exception {",
                "-    encryption.check(password, SIMPLE_DIGEST);",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testCheckSuccessWithEmptyPassword() throws Exception {",
                "-    encryption.check(\"\", DIGEST_OF_EMPTY_PASSWORD);",
                "-  }",
                "-",
                "-  @Test(expected = NullPointerException.class)",
                "-  public void testCheckWithNullPassword() throws Exception {",
                "-    encryption.check(null, DIGEST_OF_EMPTY_PASSWORD);",
                "-  }",
                "-",
                "-  @Test(expected = AssertionError.class)",
                "-  public void testCheckFailure() throws Exception {",
                "-    encryption.check(password, COMPLETE_DIGEST);",
                "-  }",
                "-",
                "-  @Test(expected = AssertionError.class)",
                "-  public void testCheckWithNonConformDigest() throws Exception {",
                "-    encryption.check(password, MD5_DIGEST);",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetSaltUsedInDigest() throws Exception {",
                "-    byte[] actualSalt = encryption.getSaltUsedInDigest(SIMPLE_DIGEST);",
                "-    assertThat(actualSalt, is(salt));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetSaltUsedInACompleteDigest() throws Exception {",
                "-    byte[] actualSalt = encryption.getSaltUsedInDigest(COMPLETE_DIGEST);",
                "-    assertThat(actualSalt, is(salt));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetSaltUsedInANonConformDigest() throws Exception {",
                "-    byte[] actualSalt = encryption.getSaltUsedInDigest(MD5_DIGEST);",
                "-    assertThat(actualSalt, is(emptySalt));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetSaltUsedInAnEmptyDigest() throws Exception {",
                "-    byte[] actualSalt = encryption.getSaltUsedInDigest(\"\");",
                "-    assertThat(actualSalt, is(emptySalt));",
                "-  }",
                "-",
                "-  @Test(expected = NullPointerException.class)",
                "-  public void testGetSaltUsedInANullDigest() throws Exception {",
                "-    encryption.getSaltUsedInDigest(null);",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testDoUnderstandDigestWithoutRounds() throws Exception {",
                "-    assertThat(encryption.doUnderstandDigest(SIMPLE_DIGEST), is(true));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testDoUnderstandCompleteDigest() throws Exception {",
                "-    assertThat(encryption.doUnderstandDigest(COMPLETE_DIGEST), is(true));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testDoUnderstandDigestOfEmptyPassword() throws Exception {",
                "-    assertThat(encryption.doUnderstandDigest(DIGEST_OF_EMPTY_PASSWORD), is(true));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testDoUnderstandNonConformDigest() throws Exception {",
                "-    assertThat(encryption.doUnderstandDigest(MD5_DIGEST), is(false));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testDoUnderstandEmptyDigest() throws Exception {",
                "-    assertThat(encryption.doUnderstandDigest(\"\"), is(false));",
                "-  }",
                "-",
                "-  @Test(expected = NullPointerException.class)",
                "-  public void testDoUnderstandNullDigest() throws Exception {",
                "-    assertThat(encryption.doUnderstandDigest(null), is(false));",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/importExport/versioning/TestDocumentVersion.java b/core-library/src/test-awaiting/java/org/silverpeas/importExport/versioning/TestDocumentVersion.java",
                "deleted file mode 100644",
                "index 51cdaa0e84..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/importExport/versioning/TestDocumentVersion.java",
                "+++ /dev/null",
                "@@ -1,127 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.importExport.versioning;",
                "-",
                "-import org.silverpeas.util.MimeTypes;",
                "-import org.junit.Test;",
                "-",
                "-import java.util.Date;",
                "-",
                "-import static java.io.File.separatorChar;",
                "-import static org.hamcrest.Matchers.is;",
                "-import static org.junit.Assert.assertThat;",
                "-",
                "-public class TestDocumentVersion {",
                "-",
                "-  private static final String instanceId = \"kmelia60\";",
                "-  private static final String UPLOAD_DIR = System.getProperty(\"basedir\") + separatorChar + \"target\"",
                "-      + separatorChar + \"temp\" + separatorChar + \"uploads\" + separatorChar + instanceId",
                "-      + separatorChar",
                "-      + \"Versioning\" + separatorChar;",
                "-",
                "-  @Test",
                "-  public void testIsOfficeDocument() {",
                "-    DocumentVersion doc = new DocumentVersion();",
                "-    doc.setAuthorId(5);",
                "-    doc.setDocumentPK(new DocumentPK(10, instanceId));",
                "-    doc.setCreationDate(new Date());",
                "-    doc.setComments(\"commentaires\");",
                "-    doc.setInstanceId(instanceId);",
                "-    doc.setLogicalName(\"FrenchScrum.odp\");",
                "-    doc.setMajorNumber(1);",
                "-    doc.setMimeType(MimeTypes.MIME_TYPE_OO_FORMATTED_TEXT);",
                "-    doc.setMinorNumber(1);",
                "-    doc.setPhysicalName(\"1210692002788.odp\");",
                "-    assertThat(doc.isOfficeDocument(), is(true));",
                "-    assertThat(doc.isOpenOfficeCompatibleDocument(), is(true));",
                "-    doc.setMimeType(MimeTypes.EXCEL_MIME_TYPE1);",
                "-    assertThat(doc.isOfficeDocument(), is(true));",
                "-    assertThat(doc.isOpenOfficeCompatibleDocument(), is(true));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetJcrPath() {",
                "-    DocumentVersion doc = new DocumentVersion();",
                "-    doc.setDocumentPK(new DocumentPK(10, instanceId));",
                "-    doc.setAuthorId(5);",
                "-    doc.setCreationDate(new Date());",
                "-    doc.setComments(\"commentaires\");",
                "-    doc.setInstanceId(instanceId);",
                "-    doc.setLogicalName(\"FrenchScrum.odp\");",
                "-    doc.setMajorNumber(1);",
                "-    doc.setMimeType(MimeTypes.MIME_TYPE_OO_FORMATTED_TEXT);",
                "-    doc.setMinorNumber(1);",
                "-    doc.setPhysicalName(\"1210692002788.odp\");",
                "-    assertThat(doc.getJcrPath(), is(instanceId + \"/Versioning/10/1.1/FrenchScrum.odp\"));",
                "-    doc.setMimeType(MimeTypes.MIME_TYPE_OO_FORMATTED_TEXT);",
                "-    assertThat(doc.getJcrPath(), is(instanceId + \"/Versioning/10/1.1/FrenchScrum.odp\"));",
                "-    doc.setMinorNumber(2);",
                "-    assertThat(doc.getJcrPath(), is(instanceId + \"/Versioning/10/1.2/FrenchScrum.odp\"));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetWebdavUrl() {",
                "-    DocumentVersion doc = new DocumentVersion();",
                "-    doc.setDocumentPK(new DocumentPK(10, instanceId));",
                "-    doc.setAuthorId(5);",
                "-    doc.setCreationDate(new Date());",
                "-    doc.setComments(\"commentaires\");",
                "-    doc.setInstanceId(instanceId);",
                "-    doc.setLogicalName(\"FrenchScrum.odp\");",
                "-    doc.setMajorNumber(1);",
                "-    doc.setMimeType(MimeTypes.MIME_TYPE_OO_FORMATTED_TEXT);",
                "-    doc.setMinorNumber(1);",
                "-    doc.setPhysicalName(\"1210692002788.odp\");",
                "-    assertThat(doc.getWebdavUrl(), is(\"/silverpeas/repository/jackrabbit/\" + instanceId",
                "-        + \"/Versioning/10/1.1/FrenchScrum.odp\"));",
                "-    doc.setMimeType(MimeTypes.MIME_TYPE_OO_FORMATTED_TEXT);",
                "-    assertThat(doc.getWebdavUrl(), is(\"/silverpeas/repository/jackrabbit/\" + instanceId",
                "-        + \"/Versioning/10/1.1/FrenchScrum.odp\"));",
                "-    doc.setMinorNumber(2);",
                "-    assertThat(doc.getWebdavUrl(), is(\"/silverpeas/repository/jackrabbit/\" + instanceId",
                "-        + \"/Versioning/10/1.2/FrenchScrum.odp\"));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetDocumentPath() {",
                "-    DocumentVersion doc = new DocumentVersion();",
                "-    doc.setDocumentPK(new DocumentPK(10, instanceId));",
                "-    doc.setAuthorId(5);",
                "-    doc.setCreationDate(new Date());",
                "-    doc.setComments(\"commentaires\");",
                "-    doc.setInstanceId(instanceId);",
                "-    doc.setLogicalName(\"FrenchScrum.odp\");",
                "-    doc.setMajorNumber(1);",
                "-    doc.setMimeType(MimeTypes.MIME_TYPE_OO_FORMATTED_TEXT);",
                "-    doc.setMinorNumber(1);",
                "-    doc.setPhysicalName(\"1210692002788.odp\");",
                "-    String documentPath = doc.getDocumentPath().replace('\\\\', separatorChar);",
                "-    documentPath = documentPath.replace('/', separatorChar);",
                "-    assertThat(documentPath, is(UPLOAD_DIR + \"1210692002788.odp\"));",
                "-    doc.setMimeType(MimeTypes.MIME_TYPE_OO_FORMATTED_TEXT);",
                "-    assertThat(documentPath, is(UPLOAD_DIR + \"1210692002788.odp\"));",
                "-    doc.setMinorNumber(2);",
                "-    assertThat(documentPath, is(UPLOAD_DIR + \"1210692002788.odp\"));",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/notification/jsondiff/JsonPatchTest.java b/core-library/src/test-awaiting/java/org/silverpeas/notification/jsondiff/JsonPatchTest.java",
                "deleted file mode 100644",
                "index 347c7d01b2..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/notification/jsondiff/JsonPatchTest.java",
                "+++ /dev/null",
                "@@ -1,114 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.notification.system.jsondiff;",
                "-",
                "-import java.io.ByteArrayOutputStream;",
                "-import java.io.ObjectOutputStream;",
                "-",
                "-import org.apache.commons.io.IOUtils;",
                "-import org.junit.Test;",
                "-",
                "-import static org.hamcrest.Matchers.*;",
                "-import static org.junit.Assert.assertThat;",
                "-",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-public class JsonPatchTest {",
                "-",
                "-  /**",
                "-   * Test of toJson method, of class Patch.",
                "-   */",
                "-  @Test",
                "-  public void testToJson() throws Exception {",
                "-    JsonPatch instance = new JsonPatch();",
                "-    instance.addOperation(new Operation(Op.replace, \"name\", \"Ged corrig\u00c3\u00a9e\"));",
                "-    instance.addOperation(new Operation(Op.replace, \"versionning\", \"false\"));",
                "-    instance.addOperation(new Operation(Op.remove, \"xmlForm\", \"\"));",
                "-    String expResult = \"[{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"name\\\",\\\"value\\\":\\\"Ged \"",
                "-        + \"corrig\u00c3\u00a9e\\\"},{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"versionning\\\",\\\"value\\\":\\\"false\\\"},{\"",
                "-        + \"\\\"op\\\":\\\"remove\\\",\\\"path\\\":\\\"xmlForm\\\",\\\"value\\\":\\\"\\\"}]\";",
                "-    String result = instance.toJson();",
                "-    assertThat(result, is(expResult));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of fromJson method, of class Patch.",
                "-   */",
                "-  @Test",
                "-  public void testFromJson() throws Exception {",
                "-    String json = \"[{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"name\\\",\\\"value\\\":\\\"Ged \"",
                "-        + \"corrig\u00c3\u00a9e\\\"},{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"versionning\\\",\\\"value\\\":\\\"false\\\"},{\"",
                "-        + \"\\\"op\\\":\\\"remove\\\",\\\"path\\\":\\\"xmlForm\\\",\\\"value\\\":\\\"\\\"}]\";",
                "-    JsonPatch instance = new JsonPatch();",
                "-    instance.fromJson(json);",
                "-    assertThat(instance, is(notNullValue()));",
                "-    assertThat(instance.getOperations(), is(notNullValue()));",
                "-    assertThat(instance.getOperations(), hasSize(3));",
                "-    Operation operation = instance.getOperationByPath(\"name\");",
                "-    assertThat(operation, is(notNullValue()));",
                "-    assertThat(operation.getOp(), is(Op.replace));",
                "-    assertThat(operation.getValue(), is(\"Ged corrig\u00c3\u00a9e\"));",
                "-    assertThat(operation.getPath(), is(\"name\"));",
                "-",
                "-    operation = instance.getOperationByPath(\"versionning\");",
                "-    assertThat(operation, is(notNullValue()));",
                "-    assertThat(operation.getOp(), is(Op.replace));",
                "-    assertThat(operation.getValue(), is(\"false\"));",
                "-    assertThat(operation.getPath(), is(\"versionning\"));",
                "-",
                "-    operation = instance.getOperationByPath(\"xmlForm\");",
                "-    assertThat(operation, is(notNullValue()));",
                "-    assertThat(operation.getOp(), is(Op.remove));",
                "-    assertThat(operation.getValue(), is(\"\"));",
                "-    assertThat(operation.getPath(), is(\"xmlForm\"));",
                "-",
                "-    operation = instance.getOperationByPath(\"miguel\");",
                "-    assertThat(operation, is(nullValue()));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of serialize an instance.",
                "-   */",
                "-  @Test",
                "-  public void testSerialize() throws Exception {",
                "-    String json = \"[{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"name\\\",\\\"value\\\":\\\"Ged \"",
                "-        + \"corrig\u00c3\u00a9e\\\"},{\\\"op\\\":\\\"replace\\\",\\\"path\\\":\\\"versionning\\\",\\\"value\\\":\\\"false\\\"},{\"",
                "-        + \"\\\"op\\\":\\\"remove\\\",\\\"path\\\":\\\"xmlForm\\\",\\\"value\\\":\\\"\\\"}]\";",
                "-    JsonPatch instance = new JsonPatch();",
                "-    instance.fromJson(json);",
                "-    assertThat(instance, is(notNullValue()));",
                "-    assertThat(instance.getOperations(), is(notNullValue()));",
                "-    assertThat(instance.getOperations(), hasSize(3));",
                "-    ByteArrayOutputStream buffer = new ByteArrayOutputStream(512);",
                "-    ObjectOutputStream out = new ObjectOutputStream(buffer);",
                "-    try {",
                "-      out.writeObject(instance);",
                "-    } finally {",
                "-      IOUtils.closeQuietly(out);",
                "-    }",
                "-  }",
                "-",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/search/indexEngine/model/RepositoryIndexerTest.java b/core-library/src/test-awaiting/java/org/silverpeas/search/indexEngine/model/RepositoryIndexerTest.java",
                "deleted file mode 100644",
                "index 51b8b621b1..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/search/indexEngine/model/RepositoryIndexerTest.java",
                "+++ /dev/null",
                "@@ -1,150 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.search.indexEngine.model;",
                "-",
                "-import java.io.File;",
                "-import java.io.InputStreamReader;",
                "-import java.io.Reader;",
                "-",
                "-import org.silverpeas.core.contribution.attachment.AttachmentServiceTest;",
                "-import org.silverpeas.util.Charsets;",
                "-",
                "-import com.silverpeas.jcrutil.BasicDaoFactory;",
                "-import com.silverpeas.jcrutil.model.SilverpeasRegister;",
                "-import com.silverpeas.jndi.SimpleMemoryContextFactory;",
                "-import com.silverpeas.util.PathTestUtil;",
                "-",
                "-import org.silverpeas.util.DBUtil;",
                "-",
                "-import org.apache.commons.io.FileUtils;",
                "-import org.apache.commons.io.IOUtils;",
                "-import org.apache.jackrabbit.api.JackrabbitRepository;",
                "-import org.junit.AfterClass;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Test;",
                "-import org.springframework.context.support.ClassPathXmlApplicationContext;",
                "-import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;",
                "-import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;",
                "-import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;",
                "-",
                "-public class RepositoryIndexerTest {",
                "-",
                "-  private static final RepositoryIndexer instance = new RepositoryIndexer(\"\", \"kmelia18\");",
                "-  private static EmbeddedDatabase dataSource;",
                "-  private static ClassPathXmlApplicationContext context;",
                "-  private static JackrabbitRepository repository;",
                "-",
                "-  public RepositoryIndexerTest() {",
                "-  }",
                "-",
                "-  @BeforeClass",
                "-  public static void loadSpringContext() throws Exception {",
                "-    FileUtils.deleteQuietly(new File(PathTestUtil.TARGET_DIR + \"tmp\" + File.separatorChar",
                "-        + \"temp_jackrabbit\"));",
                "-    Reader reader = new InputStreamReader(AttachmentServiceTest.class.getClassLoader().",
                "-        getResourceAsStream(\"silverpeas-jcr.txt\"), Charsets.UTF_8);",
                "-    try {",
                "-      SimpleMemoryContextFactory.setUpAsInitialContext();",
                "-      context = new ClassPathXmlApplicationContext(\"/spring-pure-memory-jcr.xml\");",
                "-      repository = context.getBean(\"repository\", JackrabbitRepository.class);",
                "-",
                "-      BasicDaoFactory.getInstance().setApplicationContext(context);",
                "-      SilverpeasRegister.registerNodeTypes(reader);",
                "-      System.out.println(\" -> node types registered\");",
                "-",
                "-      EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder();",
                "-      dataSource = builder.setType(EmbeddedDatabaseType.H2).addScript(",
                "-          \"classpath:/org/silverpeas/attachment/repository/create-database.sql\").build();",
                "-      DBUtil.getInstanceForTest(dataSource.getConnection());",
                "-    } finally {",
                "-      IOUtils.closeQuietly(reader);",
                "-    }",
                "-  }",
                "-",
                "-  @AfterClass",
                "-  public static void tearAlldown() throws Exception {",
                "-    repository.shutdown();",
                "-    dataSource.shutdown();",
                "-    DBUtil.clearTestInstance();",
                "-    context.close();",
                "-    SimpleMemoryContextFactory.tearDownAsInitialContext();",
                "-    dataSource.shutdown();",
                "-    DBUtil.clearTestInstance();",
                "-    FileUtils.deleteQuietly(new File(PathTestUtil.TARGET_DIR + \"tmp\" + File.separatorChar",
                "-        + \"temp_jackrabbit\"));",
                "-    FileUtils.deleteQuietly(new File(PathTestUtil.BUILD_PATH + \"temp\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of pathIndexer method, of class RepositoryIndexer.",
                "-   */",
                "-  @Test",
                "-  public void testPathIndexer() {",
                "-    String path = PathTestUtil.TARGET_DIR + File.separatorChar + \"test-classes\" + File.separatorChar",
                "-        + \"large\";",
                "-    String creationDate = \"\";",
                "-    String creatorId = \"\";",
                "-",
                "-    instance.pathIndexer(path, creationDate, creatorId, RepositoryIndexer.ADD_ACTION);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of indexFile method, of class RepositoryIndexer.",
                "-   */",
                "-  @Test",
                "-  public void testIndexTifFile() {",
                "-    String action = RepositoryIndexer.ADD_ACTION;",
                "-    String creationDate = \"\";",
                "-    String creatorId = \"\";",
                "-    File file = new File(PathTestUtil.TARGET_DIR + File.separatorChar + \"test-classes\"",
                "-        + File.separatorChar + \"large\", \"fond tableau calque.tif\");",
                "-    instance.indexFile(action, creationDate, creatorId, file);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of indexFile method, of class RepositoryIndexer.",
                "-   */",
                "-  @Test",
                "-  public void testIndexTextFile() {",
                "-    String action = RepositoryIndexer.ADD_ACTION;",
                "-    String creationDate = \"\";",
                "-    String creatorId = \"\";",
                "-    File file = new File(PathTestUtil.TARGET_DIR + File.separatorChar + \"test-classes\"",
                "-        + File.separatorChar + \"large\", \"silverpeas-jcr.txt\");",
                "-    instance.indexFile(action, creationDate, creatorId, file);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test of indexFile method, of class RepositoryIndexer.",
                "-   */",
                "-  @Test",
                "-  public void testIndexFileNotClosingIndex() {",
                "-    String action = RepositoryIndexer.ADD_ACTION;",
                "-    String creationDate = \"\";",
                "-    String creatorId = \"\";",
                "-    File file = new File(PathTestUtil.TARGET_DIR + File.separatorChar + \"test-classes\"",
                "-        + File.separatorChar + \"large\", \"fond tableau calque.tif\");",
                "-    instance.indexFile(action, creationDate, creatorId, file);",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/search/indexEngine/model/TestDidYouMeanIndexer.java b/core-library/src/test-awaiting/java/org/silverpeas/search/indexEngine/model/TestDidYouMeanIndexer.java",
                "deleted file mode 100644",
                "index 57cf1872b9..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/search/indexEngine/model/TestDidYouMeanIndexer.java",
                "+++ /dev/null",
                "@@ -1,383 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.search.indexEngine.model;",
                "-",
                "-import com.silverpeas.util.PathTestUtil;",
                "-import java.io.File;",
                "-import java.io.IOException;",
                "-import java.io.Reader;",
                "-import java.io.StringReader;",
                "-import java.util.ArrayList;",
                "-import java.util.List;",
                "-import org.apache.commons.io.FileUtils;",
                "-import org.apache.lucene.analysis.standard.StandardAnalyzer;",
                "-import org.apache.lucene.document.Document;",
                "-import org.apache.lucene.document.Field;",
                "-import org.apache.lucene.index.IndexWriter;",
                "-import org.apache.lucene.index.IndexWriterConfig;",
                "-import org.apache.lucene.search.spell.SpellChecker;",
                "-import org.apache.lucene.store.FSDirectory;",
                "-import org.apache.lucene.util.Version;",
                "-import org.junit.After;",
                "-import org.junit.AfterClass;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Test;",
                "-",
                "-import static org.hamcrest.Matchers.*;",
                "-import static org.junit.Assert.assertThat;",
                "-import static org.junit.Assert.assertTrue;",
                "-",
                "-/**",
                "- * Test class for DidYouMeanIndexer",
                "- */",
                "-public class TestDidYouMeanIndexer {",
                "-",
                "-  public final static String spellingIndexpath = PathTestUtil.TARGET_DIR + \"test-classes\"",
                "-          + File.separatorChar + \"index\" + File.separatorChar + \"kmelia1\" + File.separatorChar",
                "-          + \"index\" + DidYouMeanIndexer.SUFFIX_SPELLING_INDEX_PATH;",
                "-  final private static String originalIndexpath = PathTestUtil.TARGET_DIR + \"test-classes\"",
                "-          + File.separatorChar + \"index\" + File.separatorChar + \"kmelia1\" + File.separatorChar",
                "-          + \"index\";",
                "-  final private static String secondSpellingIndexPath = PathTestUtil.TARGET_DIR + \"test-classes\"",
                "-          + File.separatorChar + \"index\" + File.separatorChar + \"kmelia1\" + File.separatorChar",
                "-          + \"secondIndex\";",
                "-  final private static String createSpellingIndexpath = spellingIndexpath + \"create\";",
                "-  final private static String clearSpellingIndexpath = spellingIndexpath + \"clear\";",
                "-  final private static String clear2SpellingIndexpath = spellingIndexpath + \"clear2\";",
                "-  final private static String createSpellingIndexpathAllLanguage = spellingIndexpath + \"language\";",
                "-",
                "-  /**",
                "-   * @throws java.lang.Exception",
                "-   */",
                "-  @BeforeClass",
                "-  public static void setUpBeforeClass() throws Exception {",
                "-    File originalIndexes = new File(originalIndexpath);",
                "-    if (originalIndexes.exists()) {",
                "-      FileUtils.forceDelete(originalIndexes);",
                "-    }",
                "-    originalIndexes.mkdirs();",
                "-    FSDirectory directory = FSDirectory.open(originalIndexes);",
                "-    IndexWriterConfig configuration = new IndexWriterConfig(Version.LUCENE_36,",
                "-            new StandardAnalyzer(Version.LUCENE_36));",
                "-    IndexWriter writer = new IndexWriter(directory, configuration);",
                "-    List<Document> docs = new ArrayList<Document>(6);",
                "-    docs.add(createDocument(\"2010/01/25\", \"0\", \"9999/99/99\", \"kmelia1|Node|3\", null, \"\",",
                "-            \"0000/00/00\", \"J2EE\", new StringReader((\"j2ee J2EE administrateur j2ee\"))));",
                "-    docs.add(createDocument(\"2010/01/25\", \"0\", \"9999/99/99\", \"kmelia1|Publication|1\", null, \"\",",
                "-            \"2010/01/25\", \"Introduction au Java Framework\",",
                "-            new StringReader((\"1 introduction java framework Introduction au Java Framework \"",
                "-            + \"null administrateur java framework java\" + \"2 platform est compose trois \"",
                "-            + \"editions destinees usages differents j2me \" + \"java 2 micro edition est \"",
                "-            + \"prevu pour developpement applications embarquees \"",
                "-            + \"notamment sur assistants personnels terminaux \" + \"mobiles j2se java 2 standard \"",
                "-            + \"edition est destine developpement applications \"",
                "-            + \"pour ordinateurs personnels j2ee java \" + \"2 enterprise edition destine usage \"",
                "-            + \"professionnel avec mise en oeuvre \"",
                "-            + \"serveurs chaque edition propose environnement \"",
                "-            + \"complet pour developpement execution applications \"",
                "-            + \"basees sur java comprend notamment \" + \"machine virtuelle java java virtual \"",
                "-            + \"machine ainsi un ensemble classes \" + \"introduction java framework null\"))));",
                "-    docs.add(createDocument(\"2010/01/25\", \"0\", \"9999/99/99\", \"kmelia1|Attachment1|1\", null, null,",
                "-            \"0000/00/00\", \"1wysiwyg.txt\", new StringReader(\"1wysiwyg.txt java framework java 2 \"",
                "-            + \"platform est compose trois editions \" + \"destinees usages differents j2me java \"",
                "-            + \"2 micro edition est prevu \" + \"pour developpement applications embarquees notamment \"",
                "-            + \"sur assistants personnels terminaux mobiles \" + \"j2se java 2 standard edition \"",
                "-            + \"est destine developpement applications pour \" + \"ordinateurs personnels j2ee java 2 \"",
                "-            + \"enterprise edition destine usage professionnel \" + \"avec mise en oeuvre serveurs \"",
                "-            + \"chaque edition propose environnement complet \"",
                "-            + \"pour developpement execution applications basees \"",
                "-            + \"sur java comprend notamment machine \" + \"virtuelle java java virtual machine \"",
                "-            + \"ainsi un ensemble classes 1wysiwyg.txt\")));",
                "-    docs.add(createDocument(\"2010/01/25\", \"0\", \"9999/99/99\", \"kmelia1|Publication|2\",",
                "-            \"java J2ee introduction\", \"\", \"2010/01/25\", \"Introduction \u00c3\u00a0 J2EE \", new StringReader(",
                "-            \"2 introduction j2ee Introduction \u00c3\u00a0 J2EE  java \"",
                "-            + \"j2ee introduction null administrateur j2ee \" + \"java 2 enterprise edition est \"",
                "-            + \"norme proposee par societe sun \" + \"portee par consortium societes internationales \"",
                "-            + \"visant definir standard developpement applications \"",
                "-            + \"entreprises multi niveaux basees sur \" + \"composants on parle generalement plate \"",
                "-            + \"forme j2ee pour designer ensemble \"",
                "-            + \"constitue services api offerts infrastructure \"",
                "-            + \"execution j2ee comprend notamment specifications \"",
                "-            + \"serveur application est dire environnement \"",
                "-            + \"execution j2ee definit finement roles \"",
                "-            + \"interfaces pour applications ainsi environnement \"",
                "-            + \"dans seront executees ces recommandations \"",
                "-            + \"permettent ainsi entreprises tierces developper \"",
                "-            + \"serveurs application conformes specifications ainsi \"",
                "-            + \"definies sans avoir redevelopper principaux \" + \"services services travers api est \"",
                "-            + \"dire extensions java independantes permettant \"",
                "-            + \"offrir en standard certain nombre \"",
                "-            + \"fonctionnalites sun fournit implementation minimale \" + \"ces api appelee j2ee sdk \"",
                "-            + \"j2ee software development kit dans \" + \"mesure j2ee appuie entierement sur \"",
                "-            + \"java beneficie avantages inconvenients ce \"",
                "-            + \"langage en particulier bonne portabilite \"",
                "-            + \"maintenabilite code plus architecture j2ee \"",
                "-            + \"repose sur composants distincts interchangeables \"",
                "-            + \"distribues ce qui signifie notamment \" + \"il est simple etendre architecture \"",
                "-            + \"un systeme reposant sur j2ee \" + \"peut posseder mecanismes haute disponibilite \"",
                "-            + \"afin garantir bonne qualite service \"",
                "-            + \"maintenabilite applications est facilitee introduction \"",
                "-            + \"j2ee java j2ee introduction null\")));",
                "-    docs.add(createDocument(\"2010/01/25\", \"0\", \"9999/99/99\", \"kmelia1|Attachment2|2\", null, null,",
                "-            \"0000/00/00\", \"2wysiwyg.txt\", new StringReader(\"2wysiwyg.txt j2ee java 2 enterprise \"",
                "-            + \"edition est norme proposee par \" + \"societe sun portee par consortium \"",
                "-            + \"societes internationales visant definir standard \"",
                "-            + \"developpement applications entreprises multi niveaux \"",
                "-            + \"basees sur composants on parle \" + \"generalement plate forme j2ee pour \"",
                "-            + \"designer ensemble constitue services api \"",
                "-            + \"offerts infrastructure execution j2ee comprend \"",
                "-            + \"notamment specifications serveur application est \"",
                "-            + \"dire environnement execution j2ee definit \"",
                "-            + \"finement roles interfaces pour applications \"",
                "-            + \"ainsi environnement dans seront executees \"",
                "-            + \"ces recommandations permettent ainsi entreprises \"",
                "-            + \"tierces developper serveurs application conformes \"",
                "-            + \"specifications ainsi definies sans avoir \"",
                "-            + \"redevelopper principaux services services travers \" + \"api est dire extensions java \")));",
                "-    docs.add(createDocument(\"2010/01/27\", \"0\", \"9999/99/99\", \"kmelia1|Attachment7|3\", null, null,",
                "-            \"0000/00/00\", \"3wysiwyg.txt\", new StringReader(\"3wysiwyg.txt api j2ee peuvent se \"",
                "-            + \"repartir en trois grandes categories \"",
                "-            + \"composants on distingue habituellement deux \"",
                "-            + \"familles composants composants web servlets \" + \"jsp java server pages agit \"",
                "-            + \"partie chargee interface avec utilisateur \"",
                "-            + \"on parle logique presentation composants \" + \"metier ejb enterprise java beans \"",
                "-            + \"agit composants specifiques charges traitements \"",
                "-            + \"donnees propres secteur activite on \" + \"parle logique metier logique applicative \"",
                "-            + \"interfacage avec bases donnees services \" + \"pouvant etre classes par categories \"",
                "-            + \"services infrastructures en existe grand \" + \"nombre definis ci dessous jdbc \"",
                "-            + \"java database connectivity est api \" + \"acces bases donnees relationnelles jndi \"",
                "-            + \"java naming directory interface est \" + \"api acces services nommage annuaires \"",
                "-            + \"entreprises tels dns nis ldap \" + \"etc jta jts java transaction \"",
                "-            + \"api java transaction services est \" + \"api definissant interfaces standard avec \"",
                "-            + \"gestionnaire transactions jca j2ee connector \"",
                "-            + \"architecture est api connexion systeme \"",
                "-            + \"information entreprise notamment systemes dits \" + \"legacy tels erp jmx java \"",
                "-            + \"management extension fournit extensions permettant \"",
                "-            + \"developper applications web supervision applications \"",
                "-            + \"services communication jaas java authentication \"",
                "-            + \"authorization service est api gestion \"",
                "-            + \"authentification droits acces javamail est \"",
                "-            + \"api permettant envoi courrier electronique \" + \"jms java message service fournit \"",
                "-            + \"fonctionnalites communication asynchrone appelees mom \"",
                "-            + \"pour middleware object message entre \" + \"applications rmi iiop est api \"",
                "-            + \"permettant communication synchrone entre objets \"",
                "-            + \"architecture j2ee permet ainsi separer \"",
                "-            + \"couche presentation correspondant interface homme \"",
                "-            + \"machine ihm couche metier contenant \" + \"essentiel traitements donnees en se \"",
                "-            + \"basant dans mesure possible sur \" + \"api existantes enfin couche donnees \"",
                "-            + \"correspondant informations entreprise stockees dans \"",
                "-            + \"fichiers dans bases donnees relationnelles \"",
                "-            + \"xml dans annuaires entreprise encore \"",
                "-            + \"dans systemes information complexes 3wysiwyg.txt\")));",
                "-    docs.add(createDocument(\"2010/01/27\", \"0\", \"9999/99/99\", \"kmelia1|Publication|3\", \"\", \"\",",
                "-            \"2010/01/25\", \"Les API de J2EE\", new StringReader(",
                "-            \"3 api j2ee Les API de J2EE administrateur \" + \"api j2ee peuvent se repartir \"",
                "-            + \"en trois grandes categories composants \"",
                "-            + \"on distingue habituellement deux familles \"",
                "-            + \"composants composants web servlets jsp \" + \"java server pages agit partie \"",
                "-            + \"chargee interface avec utilisateur on \"",
                "-            + \"parle logique presentation composants metier \" + \"ejb enterprise java beans agit \"",
                "-            + \"composants specifiques charges traitements donnees \"",
                "-            + \"propres secteur activite on parle \"",
                "-            + \"logique metier logique applicative interfacage \"",
                "-            + \"avec bases donnees services pouvant \" + \"etre classes par categories services \"",
                "-            + \"infrastructures en existe grand nombre \" + \"definis ci dessous jdbc java \"",
                "-            + \"database connectivity est api acces \" + \"bases donnees relationnelles jndi java \"",
                "-            + \"naming directory interface est api \"",
                "-            + \"acces services nommage annuaires entreprises \" + \"tels dns nis ldap etc \"",
                "-            + \"jta jts java transaction api \" + \"java transaction services est api \"",
                "-            + \"definissant interfaces standard avec gestionnaire \"",
                "-            + \"transactions jca j2ee connector architecture \"",
                "-            + \"est api connexion systeme information \"",
                "-            + \"entreprise notamment systemes dits legacy \" + \"tels erp jmx java management \"",
                "-            + \"extension fournit extensions permettant developper \"",
                "-            + \"applications web supervision applications services \"",
                "-            + \"communication jaas java authentication authorization \"",
                "-            + \"service est api gestion authentification \" + \"droits acces javamail est api \"",
                "-            + \"permettant envoi courrier electronique jms \"",
                "-            + \"java message service fournit fonctionnalites \"",
                "-            + \"communication asynchrone appelees mom pour \"",
                "-            + \"middleware object message entre applications \" + \"rmi iiop est api permettant \"",
                "-            + \"communication synchrone entre objets architecture \"",
                "-            + \"j2ee permet ainsi separer couche \"",
                "-            + \"presentation correspondant interface homme machine \"",
                "-            + \"ihm couche metier contenant essentiel \" + \"traitements donnees en se basant \"",
                "-            + \"dans mesure possible sur api \" + \"existantes enfin couche donnees correspondant \"",
                "-            + \"informations entreprise stockees dans fichiers \"",
                "-            + \"dans bases donnees relationnelles xml \" + \"dans annuaires entreprise encore dans \"",
                "-            + \"systemes information complexes api j2ee\")));",
                "-    writer.addDocuments(docs);",
                "-    writer.close();",
                "-  }",
                "-",
                "-  /**",
                "-   * @throws java.lang.Exception",
                "-   */",
                "-  @AfterClass",
                "-  public static void tearDownAfterClass() throws Exception {",
                "-    File file = new File(PathTestUtil.TARGET_DIR + \"test-classes\"",
                "-            + File.separatorChar + \"index\" + File.separatorChar + \"kmelia1\");",
                "-    FileUtils.forceDeleteOnExit(file);",
                "-",
                "-  }",
                "-",
                "-  private static Document createDocument(String creationDate, String creatorId, String endDate,",
                "-          String key, String keywords, String preview, String startDate, String title, Reader reader) {",
                "-    Document doc = new Document();",
                "-    doc.add(new Field(\"creationDate\", creationDate, Field.Store.YES, Field.Index.ANALYZED));",
                "-    doc.add(new Field(\"creationUser\", creatorId, Field.Store.YES, Field.Index.ANALYZED));",
                "-    doc.add(new Field(\"endDate\", endDate, Field.Store.YES, Field.Index.ANALYZED));",
                "-    doc.add(new Field(\"key\", key, Field.Store.YES, Field.Index.ANALYZED));",
                "-    if (keywords != null) {",
                "-      doc.add(new Field(\"keywords\", keywords, Field.Store.YES, Field.Index.NO));",
                "-    }",
                "-    if (preview != null) {",
                "-      doc.add(new Field(\"preview\", preview, Field.Store.YES, Field.Index.ANALYZED));",
                "-    }",
                "-    doc.add(new Field(\"startDate\", startDate, Field.Store.YES, Field.Index.ANALYZED));",
                "-    doc.add(new Field(\"title\", title, Field.Store.YES, Field.Index.ANALYZED));",
                "-    doc.add(new Field(\"content\", reader));",
                "-    return doc;",
                "-  }",
                "-",
                "-  /**",
                "-   * @throws java.lang.Exception",
                "-   */",
                "-  @After",
                "-  public void tearDown() throws Exception {",
                "-  }",
                "-",
                "-  /**",
                "-   * Test method for",
                "-   * {@link org.silverpeas.search.indexEngine.model.DidYouMeanIndexer#createSpellIndex(java.lang.String, java.lang.String, java.lang.String)}",
                "-   * .",
                "-   */",
                "-  @Test",
                "-  public final void testCreateSpellIndexThreeStringParameter() {",
                "-    DidYouMeanIndexer.createSpellIndex(\"content\", originalIndexpath, createSpellingIndexpath);",
                "-    checkIndexExistence(createSpellingIndexpath);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test method for",
                "-   * {@link org.silverpeas.search.indexEngine.model.DidYouMeanIndexer#createSpellIndex(java.lang.String, java.lang.String)}",
                "-   * .",
                "-   */",
                "-  @Test",
                "-  public final void testCreateSpellIndexTwoStringsParameter() {",
                "-    // creating the spelling index",
                "-    DidYouMeanIndexer.createSpellIndex(\"content\", originalIndexpath);",
                "-    checkIndexExistence(spellingIndexpath);",
                "-  }",
                "-",
                "-  /**",
                "-   * Test method for",
                "-   * {@link org.silverpeas.search.indexEngine.model.DidYouMeanIndexer#clearSpellIndex(java.lang.String)}",
                "-   * .",
                "-   *",
                "-   * @throws IOException",
                "-   */",
                "-  @Test",
                "-  public final void testClearSpellIndex() throws IOException {",
                "-    // creating the spelling index",
                "-    DidYouMeanIndexer.createSpellIndex(\"content\", originalIndexpath, clearSpellingIndexpath);",
                "-    // check the index creation",
                "-    checkIndexExistence(clearSpellingIndexpath);",
                "-    // check the existence of a word in the index",
                "-    assertTrue(checkExistingWord(clearSpellingIndexpath, \"java\"));",
                "-    // emptying the spelling index",
                "-    DidYouMeanIndexer.clearSpellIndex(clearSpellingIndexpath);",
                "-    // checks the existence of the same word after the emptying",
                "-    assertTrue(!checkExistingWord(clearSpellingIndexpath, \"java\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test method for",
                "-   * {@link org.silverpeas.search.indexEngine.model.DidYouMeanIndexer#clearSpellIdex(java.lang.String[])}",
                "-   * .",
                "-   *",
                "-   * @throws IOException",
                "-   */",
                "-  @Test",
                "-  public final void testClearSpellIndexWithArrayParameter() throws IOException {",
                "-    // creating the spelling indexes",
                "-    DidYouMeanIndexer.createSpellIndex(\"content\", originalIndexpath, secondSpellingIndexPath);",
                "-    DidYouMeanIndexer.createSpellIndex(\"content\", originalIndexpath, clear2SpellingIndexpath);",
                "-    String[] paths = {clear2SpellingIndexpath, secondSpellingIndexPath};",
                "-    // check the index creation",
                "-    checkIndexExistence(clear2SpellingIndexpath);",
                "-    checkIndexExistence(secondSpellingIndexPath);",
                "-    // check the existence of a word in the first index",
                "-    assertTrue(checkExistingWord(clear2SpellingIndexpath, \"java\"));",
                "-    // check the existence of a word in the second index",
                "-    assertTrue(checkExistingWord(secondSpellingIndexPath, \"java\"));",
                "-    // emptying the spelling indexes",
                "-    DidYouMeanIndexer.clearSpellIndex(paths);",
                "-    // checks the existence of the same word after the emptying",
                "-    assertTrue(!checkExistingWord(clear2SpellingIndexpath, \"java\"));",
                "-    assertTrue(!checkExistingWord(secondSpellingIndexPath, \"java\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * Test method for {@link",
                "-   * org.silverpeas.search.indexEngine.model.DidYouMeanIndexer.createSpellIndexForAllLanguage",
                "-   * (String, String)} .",
                "-   *",
                "-   * @throws IOException",
                "-   * @throws IOException",
                "-   */",
                "-  public final void testCreateSpellIndexForAllLanguage() throws IOException {",
                "-    DidYouMeanIndexer.createSpellIndexForAllLanguage(\"content\", createSpellingIndexpathAllLanguage);",
                "-    // check the index creation",
                "-    checkIndexExistence(createSpellingIndexpathAllLanguage);",
                "-    // check the existence of a word in the index",
                "-    assertTrue(checkExistingWord(createSpellingIndexpathAllLanguage, \"java\"));",
                "-  }",
                "-",
                "-  /**",
                "-   * check the existence of the given word in the index",
                "-   *",
                "-   * @param indexPath index path's",
                "-   * @param word String to check",
                "-   * @return",
                "-   * @throws IOException",
                "-   */",
                "-  private boolean checkExistingWord(String indexPath, String word) throws IOException {",
                "-    File file = new File(indexPath);",
                "-    FSDirectory directory = FSDirectory.open(file);",
                "-    SpellChecker spellChecker = new SpellChecker(directory);",
                "-    return spellChecker.exist(word);",
                "-  }",
                "-",
                "-  /**",
                "-   *",
                "-   */",
                "-  private void checkIndexExistence(String path) {",
                "-    File dir = new File(path);",
                "-    String[] filesList = dir.list();",
                "-    assertThat(filesList.length, is(9));",
                "-    File segmentsGenFile = new File(path + File.separatorChar + \"segments.gen\");",
                "-    assertThat(segmentsGenFile.exists(), is(true));",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/search/searchEngine/TestDidYouMeanSearcher.java b/core-library/src/test-awaiting/java/org/silverpeas/search/searchEngine/TestDidYouMeanSearcher.java",
                "deleted file mode 100644",
                "index ddc8b506fe..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/search/searchEngine/TestDidYouMeanSearcher.java",
                "+++ /dev/null",
                "@@ -1,86 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.search.searchEngine;",
                "-",
                "-import java.io.File;",
                "-import java.io.IOException;",
                "-import java.text.ParseException;",
                "-",
                "-import org.apache.commons.io.FileUtils;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Test;",
                "-",
                "-import org.silverpeas.search.searchEngine.model.DidYouMeanSearcher;",
                "-import org.silverpeas.search.searchEngine.model.QueryDescription;",
                "-",
                "-/**",
                "- *",
                "- *",
                "- */",
                "-public class TestDidYouMeanSearcher {",
                "-",
                "-  /**",
                "-   * @throws java.lang.Exception",
                "-   */",
                "-  @BeforeClass",
                "-  public static void setUpBeforeClass() throws Exception {",
                "-    String indexDirectory = ResourceLocator.getGeneralSettingBundle().getString(\"uploadsIndexPath\")",
                "-        + File.separatorChar + \"kmelia2\";",
                "-    String base = System.getProperty(\"basedir\");",
                "-    File fileDest = new File(indexDirectory);",
                "-    try {",
                "-      FileUtils.forceDelete(fileDest);",
                "-    } catch (IOException ex) {",
                "-    }",
                "-",
                "-    File fileSrc =",
                "-        new File(base + File.separatorChar + \"src\" + File.separatorChar + \"test\"",
                "-        + File.separatorChar + \"resources\" + File.separatorChar + \"index\" + File.separatorChar",
                "-        + \"kmelia2\");",
                "-",
                "-    try {",
                "-      FileUtils.copyDirectory(fileSrc, fileDest);",
                "-    } catch (IOException ioEx) {",
                "-    }",
                "-  }",
                "-",
                "-  /**",
                "-   * Test method for",
                "-   * {@link com.stratelia.webactiv.searchEngine.model.DidYouMeanSearcher#suggest(com.stratelia.webactiv.searchEngine.model.QueryDescription)}",
                "-   * .",
                "-   *",
                "-   * @throws ParseException",
                "-   * @throws com.stratelia.webactiv.searchEngine.model.ParseException",
                "-   */",
                "-  @Test",
                "-  public final void testSuggest() throws ParseException {",
                "-    DidYouMeanSearcher searcher = new DidYouMeanSearcher();",
                "-    QueryDescription query = new QueryDescription(",
                "-        \"\\\"la pierre coche\\\"  NOT pr\u00c3\u00a9sentation  jana OR jacq\");",
                "-    query.setSearchingUser(\"0\");",
                "-    query.addComponent(\"kmelia2\");",
                "-    //assertEquals(\"\\\"tierces couche\\\" NOT presenter java java\", searcher.suggest(query)[0]);",
                "-",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/search/searchEngine/model/TestSearchCompletion.java b/core-library/src/test-awaiting/java/org/silverpeas/search/searchEngine/model/TestSearchCompletion.java",
                "deleted file mode 100644",
                "index 753797bbb6..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/search/searchEngine/model/TestSearchCompletion.java",
                "+++ /dev/null",
                "@@ -1,66 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.search.searchEngine.model;",
                "-",
                "-import java.util.Set;",
                "-",
                "-import com.silverpeas.components.model.AbstractTestDao;",
                "-",
                "-import org.junit.Test;",
                "-",
                "-public class TestSearchCompletion extends AbstractTestDao {",
                "-",
                "-  @Test",
                "-  public void testGetSuggestions() {",
                "-    SearchCompletion completion = new SearchCompletion();",
                "-    Set<String> set = completion.getSuggestions(\"inte\");",
                "-",
                "-    assertEquals(set.size(), 3);",
                "-",
                "-    int i = 0;",
                "-    for (String keyword : set) {",
                "-      if (i == 0) {",
                "-        assertEquals(\"interface\", keyword);",
                "-      }",
                "-      if (i == 1) {",
                "-        assertEquals(\"internet\", keyword);",
                "-      }",
                "-      if (i == 2) {",
                "-        assertEquals(\"interpolation\", keyword);",
                "-      }",
                "-      i++;",
                "-    }",
                "-",
                "-  }",
                "-",
                "-  @Override",
                "-  protected String getDatasetFileName() {",
                "-    return \"autocompletion-dataset.xml\";",
                "-  }",
                "-",
                "-  @Override",
                "-  protected String getTableCreationFileName() {",
                "-    return \"create-database.sql\";",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/servlet/FileUploadUtilTest.java b/core-library/src/test-awaiting/java/org/silverpeas/servlet/FileUploadUtilTest.java",
                "deleted file mode 100644",
                "index bf51bd31dd..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/servlet/FileUploadUtilTest.java",
                "+++ /dev/null",
                "@@ -1,121 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.servlet;",
                "-",
                "-import java.io.File;",
                "-",
                "-import org.silverpeas.util.FileUtil;",
                "-import org.apache.commons.fileupload.FileItem;",
                "-import org.apache.commons.fileupload.FileUploadBase;",
                "-import org.apache.commons.io.IOUtils;",
                "-import org.junit.After;",
                "-import org.junit.Before;",
                "-import org.junit.Test;",
                "-import org.springframework.mock.web.MockHttpServletRequest;",
                "-import org.springframework.mock.web.MockMultipartFile;",
                "-import org.springframework.mock.web.MockMultipartHttpServletRequest;",
                "-import static org.hamcrest.Matchers.*;",
                "-import static org.junit.Assert.*;",
                "-import static org.mockito.Mockito.*;",
                "-/**",
                "- *",
                "- * @author ehugonnet",
                "- */",
                "-public class FileUploadUtilTest {",
                "-",
                "-  public FileUploadUtilTest() {",
                "-  }",
                "-",
                "-  @Before",
                "-  public void setUp() {",
                "-  }",
                "-",
                "-  @After",
                "-  public void tearDown() {",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testIsRequestMultipart() {",
                "-    MockHttpServletRequest request = new MockHttpServletRequest();",
                "-    assertThat(FileUploadUtil.isRequestMultipart(request), is(false));",
                "-    request.setContentType(FileUploadBase.MULTIPART_FORM_DATA);",
                "-    assertFalse(FileUploadUtil.isRequestMultipart(request));",
                "-    request.setContentType(null);",
                "-    request.setMethod(\"POST\");",
                "-    assertFalse(FileUploadUtil.isRequestMultipart(request));",
                "-    request.setContentType(\"text/html\");",
                "-    assertFalse(FileUploadUtil.isRequestMultipart(request));",
                "-    request.setContentType(FileUploadBase.MULTIPART_FORM_DATA);",
                "-    assertTrue(FileUploadUtil.isRequestMultipart(request));",
                "-    request.setContentType(FileUploadBase.MULTIPART_MIXED);",
                "-    assertTrue(FileUploadUtil.isRequestMultipart(request));",
                "-    request.setContentType(FileUploadBase.MULTIPART);",
                "-    assertTrue(FileUploadUtil.isRequestMultipart(request));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetFile() throws Exception {",
                "-    MockMultipartHttpServletRequest request = new MockMultipartHttpServletRequest();",
                "-    request.setMethod(\"POST\");",
                "-    request.setContentType(FileUploadBase.MULTIPART_FORM_DATA);",
                "-    request.addParameter(\"champ1\", \"valeur1\");",
                "-    byte[] content = IOUtils.toByteArray(this.getClass().getClassLoader().getResourceAsStream(\"FrenchScrum.odp\"));",
                "-    assertNotNull(content);",
                "-    request.addFile(new MockMultipartFile(\"FrenchScrum.odp\", content));",
                "-    assertNotNull(content);",
                "-  }",
                "-",
                "-",
                "-  @Test",
                "-  public void testGetFileName() throws Exception {",
                "-    FileItem item = mock(FileItem.class);",
                "-    when(item.getName()).thenReturn(\"C:\\\\Documents and Settings\\\\rivoirede\\\\Bureau\\\\GED KHOLER\\\\import_kohler_partiel.xml\");",
                "-    String fileName = FileUploadUtil.getFileName(item);",
                "-    assertThat(fileName, is(\"import_kohler_partiel.xml\"));",
                "-    item = mock(FileItem.class);",
                "-    when(item.getName()).thenReturn(\"/home/silver/SilverpeasV5/temp/test_partiel.xml\");",
                "-    fileName = FileUploadUtil.getFileName(item);",
                "-    assertThat(fileName, is(\"test_partiel.xml\"));",
                "-  }",
                "-",
                "-",
                "-   @Test",
                "-  public void testConvertPathToServerOS() throws Exception {",
                "-    String fileName = FileUtil.convertPathToServerOS(",
                "-        \"C:\\\\Documents and Settings\\\\rivoirede\\\\Bureau\\\\GED KHOLER\\\\import_kohler_partiel.xml\");",
                "-    if(File.separatorChar == '/') {",
                "-      assertThat(fileName, is(\"C:/Documents and Settings/rivoirede/Bureau/GED KHOLER/import_kohler_partiel.xml\"));",
                "-    } else {",
                "-      assertThat(fileName, is(\"C:\\\\Documents and Settings\\\\rivoirede\\\\Bureau\\\\GED KHOLER\\\\import_kohler_partiel.xml\"));",
                "-    }",
                "-",
                "-",
                "-    fileName = FileUtil.convertPathToServerOS(\"/home/silverpeas/test/result.txt\");",
                "-    if(File.separatorChar == '/') {",
                "-      assertThat(fileName, is(\"/home/silverpeas/test/result.txt\"));",
                "-    } else {",
                "-      assertThat(fileName, is(\"\\\\home\\\\silverpeas\\\\test\\\\result.txt\"));",
                "-    }",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/termsOfService/constant/TermsOfServiceAcceptanceFrequencyTest.java b/core-library/src/test-awaiting/java/org/silverpeas/termsOfService/constant/TermsOfServiceAcceptanceFrequencyTest.java",
                "deleted file mode 100644",
                "index 9cba5a3650..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/termsOfService/constant/TermsOfServiceAcceptanceFrequencyTest.java",
                "+++ /dev/null",
                "@@ -1,244 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.termsOfService.constant;",
                "-",
                "-import org.apache.commons.lang3.time.DateUtils;",
                "-import org.junit.Test;",
                "-",
                "-import java.sql.Timestamp;",
                "-import java.util.Date;",
                "-",
                "-import static org.hamcrest.MatcherAssert.assertThat;",
                "-import static org.hamcrest.Matchers.is;",
                "-import static org.silverpeas.termsOfService.constant.TermsOfServiceAcceptanceFrequency.*;",
                "-",
                "-/**",
                "- * User: Yohann Chastagnier",
                "- * Date: 10/09/13",
                "- */",
                "-public class TermsOfServiceAcceptanceFrequencyTest {",
                "-",
                "-  private static final String LOCALE = \"fr\";",
                "-  // Saturday",
                "-  private static final Date FIRST_OF_JUNE = java.sql.Date.valueOf(\"2013-06-01\");",
                "-  // Sunday",
                "-  private static final Date LAST_OF_JUNE = Timestamp.valueOf(\"2013-06-30 23:59:59.0\");",
                "-",
                "-  @Test",
                "-  public void testDecode() {",
                "-    assertThat(decode(null), is(NEVER));",
                "-    assertThat(decode(\"\"), is(NEVER));",
                "-    assertThat(decode(\"sjdsl\"), is(NEVER));",
                "-    assertThat(decode(\"always\"), is(ALWAYS));",
                "-    for (final TermsOfServiceAcceptanceFrequency current : values()) {",
                "-      assertThat(decode(current.name()), is(current));",
                "-    }",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testIsAcceptanceDateExpired() {",
                "-",
                "-    // This test is to don't forget to add or remove test block below in case of upgrade of the",
                "-    // enum.",
                "-    assertThat(values().length, is(7));",
                "-",
                "-    // NEVER",
                "-    assertThat(NEVER.isAcceptanceDateExpired(FIRST_OF_JUNE, null, LOCALE), is(false));",
                "-    assertThat(NEVER.isAcceptanceDateExpired(FIRST_OF_JUNE, FIRST_OF_JUNE, LOCALE), is(false));",
                "-    assertThat(",
                "-        NEVER.isAcceptanceDateExpired(FIRST_OF_JUNE, java.sql.Date.valueOf(\"1970-01-01\"), LOCALE),",
                "-        is(false));",
                "-",
                "-    // ALWAYS",
                "-    assertThat(ALWAYS.isAcceptanceDateExpired(FIRST_OF_JUNE, null, LOCALE), is(true));",
                "-    assertThat(ALWAYS.isAcceptanceDateExpired(FIRST_OF_JUNE, FIRST_OF_JUNE, LOCALE), is(true));",
                "-    assertThat(",
                "-        ALWAYS.isAcceptanceDateExpired(FIRST_OF_JUNE, java.sql.Date.valueOf(\"1970-01-01\"), LOCALE),",
                "-        is(true));",
                "-",
                "-    // ONE",
                "-    assertThat(ONE.isAcceptanceDateExpired(FIRST_OF_JUNE, null, LOCALE), is(true));",
                "-    assertThat(ONE.isAcceptanceDateExpired(FIRST_OF_JUNE, FIRST_OF_JUNE, LOCALE), is(false));",
                "-    assertThat(",
                "-        ONE.isAcceptanceDateExpired(FIRST_OF_JUNE, java.sql.Date.valueOf(\"1970-01-01\"), LOCALE),",
                "-        is(false));",
                "-",
                "-    // DAILY",
                "-    assertThat(DAILY.isAcceptanceDateExpired(FIRST_OF_JUNE, null, LOCALE), is(true));",
                "-    assertThat(DAILY.isAcceptanceDateExpired(FIRST_OF_JUNE, FIRST_OF_JUNE, LOCALE), is(false));",
                "-    assertThat(DAILY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addMilliseconds(FIRST_OF_JUNE, -1),",
                "-            LOCALE), is(true));",
                "-    assertThat(",
                "-        DAILY.isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addDays(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(",
                "-        DAILY.isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addWeeks(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(DAILY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addMonths(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(",
                "-        DAILY.isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addYears(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(DAILY",
                "-        .isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addMilliseconds(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        DAILY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addDays(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(",
                "-        DAILY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addWeeks(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(",
                "-        DAILY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addMonths(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(",
                "-        DAILY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addYears(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-",
                "-    // WEEKLY",
                "-    assertThat(WEEKLY.isAcceptanceDateExpired(FIRST_OF_JUNE, null, LOCALE), is(true));",
                "-    assertThat(WEEKLY.isAcceptanceDateExpired(FIRST_OF_JUNE, FIRST_OF_JUNE, LOCALE), is(false));",
                "-    assertThat(WEEKLY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addMilliseconds(FIRST_OF_JUNE, -1),",
                "-            LOCALE), is(false));",
                "-    assertThat(",
                "-        WEEKLY.isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addDays(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(false));",
                "-    assertThat(WEEKLY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addWeeks(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(WEEKLY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addMonths(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(WEEKLY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addYears(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(WEEKLY",
                "-        .isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addMilliseconds(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        WEEKLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addDays(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        WEEKLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addDays(LAST_OF_JUNE, -6), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        WEEKLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addWeeks(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(",
                "-        WEEKLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addMonths(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(",
                "-        WEEKLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addYears(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-",
                "-    // MONTHLY",
                "-    assertThat(MONTHLY.isAcceptanceDateExpired(FIRST_OF_JUNE, null, LOCALE), is(true));",
                "-    assertThat(MONTHLY.isAcceptanceDateExpired(FIRST_OF_JUNE, FIRST_OF_JUNE, LOCALE), is(false));",
                "-    assertThat(MONTHLY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addMilliseconds(FIRST_OF_JUNE, -1),",
                "-            LOCALE), is(true));",
                "-    assertThat(MONTHLY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addDays(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(MONTHLY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addWeeks(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(MONTHLY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addMonths(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(MONTHLY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addYears(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(MONTHLY",
                "-        .isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addMilliseconds(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        MONTHLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addDays(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        MONTHLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addDays(LAST_OF_JUNE, -29), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        MONTHLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addWeeks(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        MONTHLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addWeeks(LAST_OF_JUNE, -4), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        MONTHLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addWeeks(LAST_OF_JUNE, -5), LOCALE),",
                "-        is(true));",
                "-    assertThat(MONTHLY",
                "-        .isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addMonths(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(",
                "-        MONTHLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addYears(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-",
                "-    // YEARLY",
                "-    assertThat(YEARLY.isAcceptanceDateExpired(FIRST_OF_JUNE, null, LOCALE), is(true));",
                "-    assertThat(YEARLY.isAcceptanceDateExpired(FIRST_OF_JUNE, FIRST_OF_JUNE, LOCALE), is(false));",
                "-    assertThat(YEARLY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addMilliseconds(FIRST_OF_JUNE, -1),",
                "-            LOCALE), is(false));",
                "-    assertThat(",
                "-        YEARLY.isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addDays(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(false));",
                "-    assertThat(YEARLY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addWeeks(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(false));",
                "-    assertThat(YEARLY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addMonths(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(false));",
                "-    assertThat(YEARLY",
                "-        .isAcceptanceDateExpired(FIRST_OF_JUNE, DateUtils.addYears(FIRST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(YEARLY",
                "-        .isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addMilliseconds(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        YEARLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addDays(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        YEARLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addDays(LAST_OF_JUNE, -150), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        YEARLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addWeeks(LAST_OF_JUNE, -25), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        YEARLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addMonths(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        YEARLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addMonths(LAST_OF_JUNE, -5), LOCALE),",
                "-        is(false));",
                "-    assertThat(",
                "-        YEARLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addYears(LAST_OF_JUNE, -1), LOCALE),",
                "-        is(true));",
                "-    assertThat(",
                "-        YEARLY.isAcceptanceDateExpired(LAST_OF_JUNE, DateUtils.addYears(LAST_OF_JUNE, 1), LOCALE),",
                "-        is(true));",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/token/persistent/PersistentResourceTokenTest.java b/core-library/src/test-awaiting/java/org/silverpeas/token/persistent/PersistentResourceTokenTest.java",
                "deleted file mode 100644",
                "index 73f58b374a..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/token/persistent/PersistentResourceTokenTest.java",
                "+++ /dev/null",
                "@@ -1,91 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.token.persistent;",
                "-",
                "-import org.silverpeas.util.exception.SilverpeasException;",
                "-import org.junit.Test;",
                "-import org.silverpeas.token.exception.TokenException;",
                "-",
                "-import static org.hamcrest.MatcherAssert.assertThat;",
                "-import static org.hamcrest.Matchers.is;",
                "-",
                "-/**",
                "- * @author Yohann Chastagnier",
                "- */",
                "-public class PersistentResourceTokenTest {",
                "-",
                "-  @Test",
                "-  public void testValidate() {",
                "-    PersistentResourceToken token = initializeToken();",
                "-    assertValidate(token, true);",
                "-",
                "-    token = initializeToken();",
                "-    token.setId(null);",
                "-    assertValidate(token, true);",
                "-",
                "-    token = initializeToken();",
                "-    token.setSaveDate(null);",
                "-    assertValidate(token, true);",
                "-",
                "-    token = initializeToken();",
                "-    token.setValue(null);",
                "-    assertValidate(token, true);",
                "-",
                "-    token = initializeToken();",
                "-    token.setValue(\"\");",
                "-    assertValidate(token, true);",
                "-",
                "-    token = initializeToken();",
                "-    token.setResource(new MyEntityReference(\"42\"));",
                "-    assertValidate(token, true);",
                "-",
                "-    token = initializeToken();",
                "-    token.setResource(new MyEntityReference(null));",
                "-    assertValidate(token, false);",
                "-",
                "-    token = initializeToken();",
                "-    token.setResource(null);",
                "-    assertValidate(token, true);",
                "-  }",
                "-",
                "-  private <T extends SilverpeasException> void assertValidate(final PersistentResourceToken token,",
                "-      final boolean isValid) {",
                "-    boolean isException = false;",
                "-    try {",
                "-      token.validate();",
                "-    } catch (final TokenException qe) {",
                "-      isException = true;",
                "-    }",
                "-    assertThat(isException, is(!isValid));",
                "-  }",
                "-",
                "-  private PersistentResourceToken initializeToken() {",
                "-    final PersistentResourceToken token = new PersistentResourceToken(new MyEntityReference(\"26\"),",
                "-        \"token\");",
                "-    token.setId(26L);",
                "-    token.setSaveCount(2);",
                "-    token.setSaveDate(java.sql.Date.valueOf(\"2012-01-01\"));",
                "-    return token;",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/token/persistent/service/TokenServiceTest.java b/core-library/src/test-awaiting/java/org/silverpeas/token/persistent/service/TokenServiceTest.java",
                "deleted file mode 100644",
                "index 4160e549f3..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/token/persistent/service/TokenServiceTest.java",
                "+++ /dev/null",
                "@@ -1,339 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.token.persistent.service;",
                "-",
                "-import java.util.Date;",
                "-import javax.inject.Inject;",
                "-import javax.inject.Named;",
                "-import javax.sql.DataSource;",
                "-import org.dbunit.database.DatabaseConnection;",
                "-import org.dbunit.database.IDatabaseConnection;",
                "-import org.dbunit.dataset.ReplacementDataSet;",
                "-import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;",
                "-import org.dbunit.operation.DatabaseOperation;",
                "-import org.junit.Before;",
                "-import org.junit.BeforeClass;",
                "-import org.junit.Test;",
                "-import org.junit.runner.RunWith;",
                "-import org.silverpeas.EntityReference;",
                "-import org.silverpeas.token.exception.TokenException;",
                "-import org.silverpeas.token.persistent.MyEntityReference;",
                "-import org.silverpeas.token.persistent.PersistentResourceToken;",
                "-import org.springframework.test.context.ContextConfiguration;",
                "-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;",
                "-import org.springframework.test.context.transaction.TransactionConfiguration;",
                "-import org.springframework.transaction.annotation.Transactional;",
                "-",
                "-import static org.hamcrest.MatcherAssert.assertThat;",
                "-import static org.hamcrest.Matchers.*;",
                "-",
                "-/**",
                "- * @author Yohann Chastagnier",
                "- */",
                "-@RunWith(SpringJUnit4ClassRunner.class)",
                "-@ContextConfiguration(locations = {\"/spring-token.xml\", \"/spring-token-embedded-datasource.xml\"})",
                "-@TransactionConfiguration(transactionManager = \"jpaTransactionManager\")",
                "-public class TokenServiceTest {",
                "-",
                "-  private static ReplacementDataSet dataSet;",
                "-",
                "-  private final static String EXISTING_TOKEN = \"existingToken\";",
                "-  private final static String UNEXISTING_TOKEN = \"unexistingToken\";",
                "-",
                "-  private final EntityReference dummyRef = new MyEntityReference(\"dummy\");",
                "-  private final EntityReference existingRef = new MyEntityReference(\"38\");",
                "-  private final EntityReference newRef = new MyEntityReference(\"26\");",
                "-",
                "-  @BeforeClass",
                "-  public static void prepareDataSet() throws Exception {",
                "-    final FlatXmlDataSetBuilder builder = new FlatXmlDataSetBuilder();",
                "-    dataSet = new ReplacementDataSet(builder.build(TokenServiceTest.class",
                "-        .getResourceAsStream(\"token-dataset.xml\")));",
                "-    dataSet.addReplacementObject(\"[NULL]\", null);",
                "-  }",
                "-",
                "-  @Inject",
                "-  private PersistentResourceTokenService tokenService;",
                "-",
                "-  @Inject",
                "-  @Named(\"jpaDataSource\")",
                "-  private DataSource dataSource;",
                "-",
                "-  @Before",
                "-  public void generalSetUp() throws Exception {",
                "-    final IDatabaseConnection myConnection = new DatabaseConnection(dataSource.getConnection());",
                "-    DatabaseOperation.CLEAN_INSERT.execute(myConnection, dataSet);",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGet() throws TokenException {",
                "-",
                "-    // Testing from a dummy key (doesn't exist in database)",
                "-    PersistentResourceToken token = tokenService.get(dummyRef);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.exists(), is(false));",
                "-    assertThat(token.notExists(), is(true));",
                "-    assertThat(token.getResource(MyEntityReference.class), nullValue());",
                "-",
                "-    // Testing from an existing key",
                "-    token = tokenService.get(existingRef);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.exists(), is(true));",
                "-    assertThat(token.notExists(), is(false));",
                "-    assertThat(token.getId(), is(24L));",
                "-    assertThat(token.getResource(MyEntityReference.class), is(existingRef));",
                "-    assertThat(token.getResource(MyUnknownEntityReference.class), nullValue());",
                "-    assertThat(token.getSaveCount(), is(3));",
                "-    assertThat(token.getValue(), is(\"token24\"));",
                "-",
                "-    // Testing from an existing token string key",
                "-    token = tokenService.get(EXISTING_TOKEN);",
                "-    EntityReference expectedResource = new MyEntityReference(\"7\");",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.exists(), is(true));",
                "-    assertThat(token.notExists(), is(false));",
                "-    assertThat(token.getId(), is(6L));",
                "-    assertThat(token.getResource(MyEntityReference.class), is(expectedResource));",
                "-    assertThat(token.getResource(MyUnknownEntityReference.class), nullValue());",
                "-    assertThat(token.getSaveCount(), is(9));",
                "-    assertThat(token.getValue(), is(EXISTING_TOKEN));",
                "-",
                "-    // Testing from an unexisting token string key",
                "-    token = tokenService.get(UNEXISTING_TOKEN);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.exists(), is(false));",
                "-    assertThat(token.notExists(), is(true));",
                "-    assertThat(token.getResource(MyEntityReference.class), nullValue());",
                "-",
                "-    // Testing from an not valid token key",
                "-    token = tokenService.get(new MyEntityReference((null)));",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.exists(), is(false));",
                "-    assertThat(token.notExists(), is(true));",
                "-    assertThat(token.getResource(MyEntityReference.class), nullValue());",
                "-",
                "-    // Testing from an unknown token key",
                "-    token = tokenService.get(new MyUnknownEntityReference(EXISTING_TOKEN));",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.exists(), is(false));",
                "-    assertThat(token.notExists(), is(true));",
                "-    assertThat(token.getResource(MyUnknownEntityReference.class), nullValue());",
                "-    assertThat(token.getResource(MyEntityReference.class), nullValue());",
                "-  }",
                "-",
                "-  @Test(expected = TokenException.class)",
                "-  public void testInitializeFromNotValidKey() throws Exception {",
                "-    tokenService.initialize(new MyEntityReference(null));",
                "-  }",
                "-",
                "-  @Test(expected = NullPointerException.class)",
                "-  public void testInitializeFromNull() throws Exception {",
                "-    tokenService.initialize(null);",
                "-  }",
                "-",
                "-  @Test",
                "-  @Transactional",
                "-  public void initializeFromExistingKeyIntoTransaction() throws Exception {",
                "-",
                "-    // Verifying token before initializing",
                "-    final PersistentResourceToken token = tokenService.get(existingRef);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.getId(), is(24L));",
                "-    assertThat(token.getResource(MyEntityReference.class), is(existingRef));",
                "-    assertThat(token.getSaveCount(), is(3));",
                "-    assertThat(token.getValue(), is(\"token24\"));",
                "-",
                "-    // Initializing",
                "-    final Date date = token.getSaveDate();",
                "-    tokenService.initialize(existingRef);",
                "-",
                "-    // Verifying token after initializing",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.getId(), is(24L));",
                "-    assertThat(token.getResource(MyEntityReference.class), is(existingRef));",
                "-    assertThat(token.getSaveCount(), is(3));",
                "-    assertThat(token.getValue(), not(is(\"token24\")));",
                "-    assertThat(token.getValue().length(), greaterThanOrEqualTo(10));",
                "-    assertThat(token.getSaveDate().getTime(), is(date.getTime()));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void initializeFromExistingKey() throws Exception {",
                "-",
                "-    // Verifying token before initializing",
                "-    PersistentResourceToken token = tokenService.get(existingRef);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.getId(), is(24L));",
                "-    assertThat(token.getResource(MyEntityReference.class), is(existingRef));",
                "-    assertThat(token.getSaveCount(), is(3));",
                "-    assertThat(token.getValue(), is(\"token24\"));",
                "-",
                "-    // Initializing",
                "-    final Date date = token.getSaveDate();",
                "-    token = tokenService.initialize(existingRef);",
                "-",
                "-    // Verifying token after initializing",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.getId(), is(24L));",
                "-    assertThat(token.getResource(MyEntityReference.class), is(existingRef));",
                "-    assertThat(token.getSaveCount(), is(4));",
                "-    assertThat(token.getValue(), not(is(\"token24\")));",
                "-    assertThat(token.getValue().length(), greaterThanOrEqualTo(10));",
                "-    assertThat(token.getSaveDate().getTime(), greaterThanOrEqualTo(date.getTime()));",
                "-  }",
                "-",
                "-  @Test",
                "-  @Transactional",
                "-  public void testInitializeFromNewKeyIntoTransaction() throws Exception {",
                "-    newToken();",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testInitializeFromNewKey() throws Exception {",
                "-    newToken();",
                "-  }",
                "-",
                "-  /**",
                "-   * Centralization",
                "-   */",
                "-  private void newToken() throws Exception {",
                "-",
                "-    // Verifying token before initializing",
                "-    PersistentResourceToken token = tokenService.get(newRef);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.exists(), is(false));",
                "-    assertThat(token.notExists(), is(true));",
                "-    assertThat(token.getResource(MyEntityReference.class), nullValue());",
                "-",
                "-    // Initializing",
                "-    final Date date = new Date();",
                "-    token = tokenService.initialize(newRef);",
                "-",
                "-    // Verifying token after initializing",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.getId(), is(25L));",
                "-    assertThat(token.getResource(MyEntityReference.class), is(newRef));",
                "-    assertThat(token.getSaveCount(), is(1));",
                "-    assertThat(token.getValue().length(), greaterThanOrEqualTo(10));",
                "-    assertThat(token.getSaveDate().getTime(), greaterThanOrEqualTo(date.getTime()));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetTokenFromUnknownTokenValue() throws Exception {",
                "-    PersistentResourceToken token = tokenService.get(UNEXISTING_TOKEN);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.exists(), is(false));",
                "-    assertThat(token.notExists(), is(true));",
                "-    assertThat(token.getResource(MyEntityReference.class), nullValue());",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetTokenFromKnownTokenValue() throws Exception {",
                "-    final Date expectedDate = new Date();",
                "-    PersistentResourceToken token = tokenService.get(EXISTING_TOKEN);",
                "-    EntityReference expectedResource = new MyEntityReference(\"7\");",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.exists(), is(true));",
                "-    assertThat(token.notExists(), is(false));",
                "-    assertThat(token.getId(), is(6L));",
                "-    assertThat(token.getResource(MyEntityReference.class), is(expectedResource));",
                "-    assertThat(token.getSaveCount(), is(9));",
                "-    assertThat(token.getValue(), is(EXISTING_TOKEN));",
                "-    assertThat(token.getSaveDate().getTime(), lessThan(expectedDate.getTime()));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetTokenFromExistingResourceRef() throws Exception {",
                "-    final Date date = new Date();",
                "-    final PersistentResourceToken token = tokenService.get(existingRef);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.getId(), is(24L));",
                "-    assertThat(token.getResource(MyEntityReference.class), is(existingRef));",
                "-    assertThat(token.getSaveCount(), is(3));",
                "-    assertThat(token.getValue(), is(\"token24\"));",
                "-    assertThat(token.getSaveDate().getTime(), lessThan(date.getTime()));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetTokenFromNewResourceRef() throws Exception {",
                "-    final Date date = new Date();",
                "-    PersistentResourceToken token = tokenService.get(newRef);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.notExists(), is(true));",
                "-",
                "-    token = tokenService.initialize(newRef);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.exists(), is(true));",
                "-    assertThat(token.getId(), is(25L));",
                "-    assertThat(token.getResource(MyEntityReference.class), is(newRef));",
                "-    assertThat(token.getSaveCount(), is(1));",
                "-    assertThat(token.getValue().length(), greaterThanOrEqualTo(10));",
                "-    assertThat(token.getSaveDate().getTime(), greaterThanOrEqualTo(date.getTime()));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testGetTokenFromUnexistingResourceRef() throws Exception {",
                "-    final PersistentResourceToken token = tokenService.get(dummyRef);",
                "-",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.exists(), is(false));",
                "-    assertThat(token.notExists(), is(true));",
                "-    assertThat(token.getResource(MyEntityReference.class), nullValue());",
                "-  }",
                "-",
                "-  @Test",
                "-  @Transactional",
                "-  public void testRemoveIntoTransaction() throws TokenException {",
                "-    removeToken();",
                "-  }",
                "-",
                "-  @Test",
                "-  public void testRemove() throws TokenException {",
                "-    removeToken();",
                "-  }",
                "-",
                "-  /**",
                "-   * Centralization",
                "-   */",
                "-  private void removeToken() {",
                "-",
                "-    // Removing from an existing key",
                "-    PersistentResourceToken token = tokenService.get(existingRef);",
                "-    assertThat(token, notNullValue());",
                "-    tokenService.remove(existingRef);",
                "-    token = tokenService.get(existingRef);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.exists(), is(false));",
                "-    assertThat(token.notExists(), is(true));",
                "-",
                "-    // Removing from an existing token string key",
                "-    token = tokenService.get(EXISTING_TOKEN);",
                "-    assertThat(token, notNullValue());",
                "-    tokenService.remove(token.getResource(MyEntityReference.class));",
                "-    token = tokenService.get(EXISTING_TOKEN);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.exists(), is(false));",
                "-    assertThat(token.notExists(), is(true));",
                "-  }",
                "-}",
                "diff --git a/core-library/src/test-awaiting/java/org/silverpeas/token/synchronizer/SynchronizerTokenGeneratorTest.java b/core-library/src/test-awaiting/java/org/silverpeas/token/synchronizer/SynchronizerTokenGeneratorTest.java",
                "deleted file mode 100644",
                "index c945e72348..0000000000",
                "--- a/core-library/src/test-awaiting/java/org/silverpeas/token/synchronizer/SynchronizerTokenGeneratorTest.java",
                "+++ /dev/null",
                "@@ -1,121 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.token.synchronizer;",
                "-",
                "-import java.util.UUID;",
                "-import org.junit.Test;",
                "-import org.silverpeas.token.TokenGenerationParameter;",
                "-import org.silverpeas.token.TokenGenerator;",
                "-import org.silverpeas.token.TokenGeneratorProvider;",
                "-",
                "-import static org.hamcrest.MatcherAssert.assertThat;",
                "-import static org.hamcrest.Matchers.*;",
                "-",
                "-/**",
                "- * Unit tests on the generation of synchronizer tokens.",
                "- *",
                "- * @author mmoquillon",
                "- */",
                "-public class SynchronizerTokenGeneratorTest {",
                "-",
                "-  static final int MIN_LENGTH = 32;",
                "-  static final String SESSION_ID = \"FD4084583B494D66555AF1A846FF9955\";",
                "-  static final String USER_ID = \"0\";",
                "-",
                "-  @Test",
                "-  public void getASynchronizerTokenGenerator() {",
                "-    TokenGenerator generator = TokenGeneratorProvider.getTokenGenerator(SynchronizerToken.class);",
                "-    assertThat(generator, notNullValue());",
                "-  }",
                "-",
                "-  @Test",
                "-  public void generateTokenWithoutAnyParameters() {",
                "-    SynchronizerTokenGenerator generator = new SynchronizerTokenGenerator();",
                "-    SynchronizerToken token = generator.generate();",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.getValue(), notNullValue());",
                "-    assertThat(token.getGenerationParameters().isEmpty(), is(true));",
                "-    assertThat(token.getValue().length(), greaterThan(MIN_LENGTH));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void generateTokenWithSomeParametersShorterThanUsual() {",
                "-    TokenGenerationParameter<String> sessionId = TokenGenerationParameter.params(\"sessionId\",",
                "-        SESSION_ID);",
                "-    TokenGenerationParameter<String> userId = TokenGenerationParameter.params(\"userId\", USER_ID);",
                "-    SynchronizerTokenGenerator generator = new SynchronizerTokenGenerator();",
                "-    SynchronizerToken token = generator.generate(sessionId, userId);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.getGenerationParameters().isEmpty(), is(false));",
                "-    assertThat(token.getGenerationParameters(), contains(SESSION_ID, USER_ID));",
                "-    assertThat(token.getValue(), notNullValue());",
                "-    assertThat(token.getValue().length(), greaterThan(MIN_LENGTH));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void generateTokenWithSomeParametersLongerThanUsual() {",
                "-    String longValue = UUID.randomUUID().toString() + UUID.randomUUID().toString();",
                "-    TokenGenerationParameter<String> sessionId = TokenGenerationParameter.params(\"sessionId\",",
                "-        SESSION_ID);",
                "-    TokenGenerationParameter<String> random = TokenGenerationParameter.params(\"random\", longValue);",
                "-    SynchronizerTokenGenerator generator = new SynchronizerTokenGenerator();",
                "-    SynchronizerToken token = generator.generate(sessionId, random);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.getGenerationParameters().isEmpty(), is(false));",
                "-    assertThat(token.getGenerationParameters(), contains(SESSION_ID, longValue));",
                "-    assertThat(token.getValue(), notNullValue());",
                "-    assertThat(token.getValue().length(), greaterThan(MIN_LENGTH));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void renewTokenWithoutParameters() {",
                "-    SynchronizerTokenGenerator generator = new SynchronizerTokenGenerator();",
                "-    SynchronizerToken token = generator.generate();",
                "-    String value = token.getValue();",
                "-",
                "-    generator.renew(token);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.getGenerationParameters().isEmpty(), is(true));",
                "-    assertThat(token.getValue(), notNullValue());",
                "-    assertThat(token.getValue(), not(value));",
                "-  }",
                "-",
                "-  @Test",
                "-  public void renewTokenWithParameters() {",
                "-    SynchronizerTokenGenerator generator = new SynchronizerTokenGenerator();",
                "-    TokenGenerationParameter<String> sessionId = TokenGenerationParameter.params(\"sessionId\",",
                "-        SESSION_ID);",
                "-    TokenGenerationParameter<String> userId = TokenGenerationParameter.params(\"userId\", USER_ID);",
                "-    SynchronizerToken token = generator.generate(sessionId, userId);",
                "-    String value = token.getValue();",
                "-",
                "-    generator.renew(token);",
                "-    assertThat(token, notNullValue());",
                "-    assertThat(token.getGenerationParameters().isEmpty(), is(false));",
                "-    assertThat(token.getGenerationParameters(), contains(SESSION_ID, USER_ID));",
                "-    assertThat(token.getValue(), notNullValue());",
                "-    assertThat(token.getValue(), not(value));",
                "-  }",
                "-",
                "-}",
                "diff --git a/core-services/comment/src/main/java/org/silverpeas/core/comment/service/notification/CommentUserNotificationService.java b/core-services/comment/src/main/java/org/silverpeas/core/comment/service/notification/CommentUserNotificationService.java",
                "index 83671577d2..6c513481f4 100644",
                "--- a/core-services/comment/src/main/java/org/silverpeas/core/comment/service/notification/CommentUserNotificationService.java",
                "+++ b/core-services/comment/src/main/java/org/silverpeas/core/comment/service/notification/CommentUserNotificationService.java",
                "@@ -36,3 +36,3 @@ import org.silverpeas.core.notification.system.CDIResourceEventListener;",
                " import org.silverpeas.core.notification.user.builder.helper.UserNotificationHelper;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -176,3 +176,3 @@ public class CommentUserNotificationService extends CDIResourceEventListener<Com",
                "    * @param notification the notification information.",
                "-   * @throws NotificationManagerException if the",
                "+   * @throws NotificationException if the",
                "    * notification of the recipients fail.",
                "@@ -180,3 +180,3 @@ public class CommentUserNotificationService extends CDIResourceEventListener<Com",
                "   protected void notifyUsers(final NotificationMetaData notification)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "     getNotificationSender(notification.getComponentId()).notifyUser(notification);",
                "diff --git a/core-services/pdc/src/main/java/org/silverpeas/core/pdc/interests/service/DefaultInterestsService.java b/core-services/pdc/src/main/java/org/silverpeas/core/pdc/interests/service/DefaultInterestsService.java",
                "index c170a4a4d3..15b13f1494 100644",
                "--- a/core-services/pdc/src/main/java/org/silverpeas/core/pdc/interests/service/DefaultInterestsService.java",
                "+++ b/core-services/pdc/src/main/java/org/silverpeas/core/pdc/interests/service/DefaultInterestsService.java",
                "@@ -29,5 +29,5 @@ package org.silverpeas.core.pdc.interests.service;",
                "-import java.sql.Connection;",
                "-import java.sql.SQLException;",
                "-import java.util.List;",
                "+import org.silverpeas.core.pdc.interests.model.Interests;",
                "+import org.silverpeas.core.persistence.jdbc.DBUtil;",
                "+import org.silverpeas.core.security.authorization.ForbiddenRuntimeException;",
                "@@ -35,8 +35,5 @@ import javax.inject.Singleton;",
                " import javax.transaction.Transactional;",
                "-",
                "-import org.silverpeas.core.security.authorization.ForbiddenRuntimeException;",
                "-import org.silverpeas.core.pdc.interests.model.Interests;",
                "-",
                "-import org.silverpeas.core.persistence.jdbc.DBUtil;",
                "-import org.silverpeas.core.exception.SilverpeasRuntimeException;",
                "+import java.sql.Connection;",
                "+import java.sql.SQLException;",
                "+import java.util.List;",
                "@@ -100,4 +97,4 @@ public class DefaultInterestsService implements InterestsService {",
                "         if(userIdInt != interests.getOwnerID()) {",
                "-          throw new ForbiddenRuntimeException(\"DefaultInterestsService.removeInterestsById(ArrayList pks)\",",
                "-            SilverpeasRuntimeException.ERROR, \"peasCore.RESOURCE_ACCESS_UNAUTHORIZED\", \"interest center id=\"+icPk+\", userId=\"+userId);",
                "+          throw new ForbiddenRuntimeException(",
                "+              \"Unauthorized to remove the interest \" + icPk + \" of user \" + userId);",
                "         }",
                "diff --git a/core-services/workflow/src/main/java/org/silverpeas/core/workflow/engine/task/TaskManagerImpl.java b/core-services/workflow/src/main/java/org/silverpeas/core/workflow/engine/task/TaskManagerImpl.java",
                "index a1cb767d3f..581caf0bd0 100644",
                "--- a/core-services/workflow/src/main/java/org/silverpeas/core/workflow/engine/task/TaskManagerImpl.java",
                "+++ b/core-services/workflow/src/main/java/org/silverpeas/core/workflow/engine/task/TaskManagerImpl.java",
                "@@ -30,3 +30,3 @@ import org.silverpeas.core.workflow.api.task.Task;",
                " import org.silverpeas.core.workflow.api.user.User;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -202,3 +202,3 @@ public class TaskManagerImpl extends AbstractTaskManager {",
                "         notifSender.notifyUser(notifMetaData);",
                "-      } catch (WorkflowException | NotificationManagerException e) {",
                "+      } catch (WorkflowException | NotificationException e) {",
                "         SilverLogger.getLogger(this).error(e.getMessage(), e);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/alertuser/control/AlertUserPeasSessionController.java b/core-war/src/main/java/org/silverpeas/web/alertuser/control/AlertUserPeasSessionController.java",
                "index 43eb2b28fd..ad33dc0e4a 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/alertuser/control/AlertUserPeasSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/alertuser/control/AlertUserPeasSessionController.java",
                "@@ -31,3 +31,3 @@ import org.silverpeas.core.web.mvc.util.AlertUser;",
                " import org.silverpeas.core.notification.user.client.GroupRecipient;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -194,3 +194,3 @@ public class AlertUserPeasSessionController extends AbstractComponentSessionCont",
                "-  public void sendNotification() throws NotificationManagerException  {",
                "+  public void sendNotification() throws NotificationException {",
                "     notificationSender.notifyUser(getNotificationMetaData().manualUserNotification());",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/directory/control/DirectorySessionController.java b/core-war/src/main/java/org/silverpeas/web/directory/control/DirectorySessionController.java",
                "index a404c00b43..5bb5e2e58e 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/directory/control/DirectorySessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/directory/control/DirectorySessionController.java",
                "@@ -51,3 +51,3 @@ import org.silverpeas.core.index.search.model.MatchingIndexEntry;",
                " import org.silverpeas.core.index.search.model.QueryDescription;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -536,6 +536,6 @@ public class DirectorySessionController extends AbstractComponentSessionControll",
                "    * @param selectedUsers",
                "-   * @throws NotificationManagerException",
                "+   * @throws NotificationException",
                "    */",
                "   public void sendMessage(String compoId, String txtTitle, String txtMessage,",
                "-      UserRecipient[] selectedUsers) throws NotificationManagerException {",
                "+      UserRecipient[] selectedUsers) throws NotificationException {",
                "     NotificationSender notifSender = new NotificationSender(compoId);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/directory/servlets/DirectoryJSONServlet.java b/core-war/src/main/java/org/silverpeas/web/directory/servlets/DirectoryJSONServlet.java",
                "index 9a3569d41e..1750b6c235 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/directory/servlets/DirectoryJSONServlet.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/directory/servlets/DirectoryJSONServlet.java",
                "@@ -26,3 +26,3 @@ package org.silverpeas.web.directory.servlets;",
                " import org.silverpeas.web.directory.control.DirectorySessionController;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.UserRecipient;",
                "@@ -76,3 +76,3 @@ public class DirectoryJSONServlet extends HttpServlet {",
                "         jsonStatus = JSONCodec.encodeObject(o -> o.put(\"success\", true));",
                "-      } catch (NotificationManagerException ex) {",
                "+      } catch (NotificationException ex) {",
                "         SilverTrace.error(\"directory\", \"DirectoryRequestRouter.sendMessage\", \"ERROR\", ex);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java b/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "index f1febc60c9..fb4113f97b 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "@@ -60,3 +60,3 @@ import org.silverpeas.core.exception.UtilTrappedException;",
                " import org.silverpeas.core.notification.message.MessageNotifier;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -337,3 +337,3 @@ public class JobDomainPeasSessionController extends AbstractComponentSessionCont",
                "         sender.notifyUser(NotificationParameters.ADDRESS_BASIC_SMTP_MAIL, notifMetaData);",
                "-      } catch (NotificationManagerException e) {",
                "+      } catch (NotificationException e) {",
                "         SilverLogger.getLogger(this).error(e.getMessage(), e);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestRouter.java",
                "index 852f72a8e0..0da7249488 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestRouter.java",
                "@@ -30,3 +30,2 @@ package org.silverpeas.web.notificationserver.channel.silvermail;",
                "-import org.silverpeas.core.exception.SilverpeasException;",
                " import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                "@@ -38,2 +37,3 @@ import org.silverpeas.core.web.mvc.route.ComponentRequestRouter;",
                " import java.util.HashMap;",
                "+import java.util.Map;",
                "@@ -61,6 +61,3 @@ public class SILVERMAILRequestRouter extends ComponentRequestRouter<SILVERMAILSe",
                "    */",
                "-  private HashMap handlerHash = new HashMap();",
                "-",
                "-  public SILVERMAILRequestRouter() {",
                "-  }",
                "+  private static final Map<String, SILVERMAILRequestHandler> handlerHash = new HashMap<>();",
                "@@ -90,4 +87,2 @@ public class SILVERMAILRequestRouter extends ComponentRequestRouter<SILVERMAILSe",
                "       requestHandler = getHandlerInstance(function);",
                "-      componentSC.setCurrentFunction(function);",
                "-",
                "       // Return the URL of the view the RequestHandler instance",
                "@@ -108,6 +103,6 @@ public class SILVERMAILRequestRouter extends ComponentRequestRouter<SILVERMAILSe",
                "    */",
                "-  protected SILVERMAILRequestHandler getHandlerInstance(String action) throws SILVERMAILException {",
                "+  private static SILVERMAILRequestHandler getHandlerInstance(String action)",
                "+      throws SILVERMAILException {",
                "     String handlerName = REQUEST_HANDLER_PACKAGE + \".\" + action;",
                "-    SILVERMAILRequestHandler requestHandler =",
                "-        (SILVERMAILRequestHandler) handlerHash.get(handlerName);",
                "+    SILVERMAILRequestHandler requestHandler = handlerHash.get(handlerName);",
                "@@ -122,5 +117,3 @@ public class SILVERMAILRequestRouter extends ComponentRequestRouter<SILVERMAILSe",
                "         if (!SILVERMAILRequestHandler.class.isAssignableFrom(handlerClass)) {",
                "-          throw new SILVERMAILException(\"SILVERMAILRequestRouter.getHandlerInstance()\",",
                "-              SilverpeasException.ERROR, \"silvermail.EX_NOT_A_REQUESTHANDLER\",",
                "-              \"Class=\" + handlerName);",
                "+          throw new SILVERMAILException(\"No such request handler \" + handlerName);",
                "         }",
                "@@ -132,8 +125,6 @@ public class SILVERMAILRequestRouter extends ComponentRequestRouter<SILVERMAILSe",
                "       } catch (ClassNotFoundException ex) {",
                "-        throw new SILVERMAILException(\"SILVERMAILRequestRouter.getHandlerInstance()\",",
                "-            SilverpeasException.ERROR, \"silvermail.EX_NO_HANDLER\", \"Class=\" + handlerName, ex);",
                "+        throw new SILVERMAILException(\"No such request handler \" + handlerName, ex);",
                "       } catch (InstantiationException | IllegalAccessException ex) {",
                "         // It probably doesn't have a no-argument constructor",
                "-        throw new SILVERMAILException(\"SILVERMAILRequestRouter.getHandlerInstance()\",",
                "-            SilverpeasException.ERROR, \"silvermail.EX_CANT_BE_INSTANCIATED\", \"Class=\" + handlerName,",
                "+        throw new SILVERMAILException(\"Cannot execute the request handler \" + handlerName,",
                "             ex);",
                "@@ -146,7 +137,3 @@ public class SILVERMAILRequestRouter extends ComponentRequestRouter<SILVERMAILSe",
                "-  /**",
                "-   * @param action",
                "-   * @return",
                "-   */",
                "-  protected String extractFunctionName(String action) {",
                "+  private static String extractFunctionName(String action) {",
                "     String result = action;",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILSessionController.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILSessionController.java",
                "index 2320432a3e..bf92953300 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILSessionController.java",
                "@@ -28,2 +28,3 @@ package org.silverpeas.web.notificationserver.channel.silvermail;",
                " import org.apache.commons.lang3.tuple.Pair;",
                "+import org.silverpeas.core.SilverpeasRuntimeException;",
                " import org.silverpeas.core.admin.PaginationPage;",
                "@@ -32,4 +33,3 @@ import org.silverpeas.core.admin.service.OrganizationController;",
                " import org.silverpeas.core.admin.space.SpaceInstLight;",
                "-import org.silverpeas.core.exception.SilverpeasRuntimeException;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.model.SentNotificationDetail;",
                "@@ -39,4 +39,3 @@ import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAI",
                " import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILPersistence;",
                "-import org.silverpeas.core.notification.user.server.channel.silvermail.SilvermailCriteria",
                "-    .QUERY_ORDER_BY;",
                "+import org.silverpeas.core.notification.user.server.channel.silvermail.SilvermailCriteria.QUERY_ORDER_BY;",
                " import org.silverpeas.core.util.Mutable;",
                "@@ -59,4 +58,3 @@ import java.util.stream.Collectors;",
                " import static org.silverpeas.core.cache.service.CacheServiceProvider.getRequestCacheService;",
                "-import static org.silverpeas.core.notification.user.server.channel.silvermail.SilvermailCriteria",
                "-    .QUERY_ORDER_BY.*;",
                "+import static org.silverpeas.core.notification.user.server.channel.silvermail.SilvermailCriteria.QUERY_ORDER_BY.*;",
                "@@ -75,4 +73,2 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "   private static final int DEFAULT_PAGINATION_SIZE = 25;",
                "-  private String currentFunction;",
                "-  private long currentMessageId = -1;",
                "   private Set<String> selectedUserNotificationIds = new HashSet<>();",
                "@@ -82,7 +78,2 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "-  /**",
                "-   * Constructor declaration",
                "-   *",
                "-   * @see",
                "-   */",
                "   public SILVERMAILSessionController(MainSessionController mainSessionCtrl,",
                "@@ -112,22 +103,2 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "-  /**",
                "-   * Method declaration",
                "-   *",
                "-   * @return",
                "-   * @see",
                "-   */",
                "-  public String getCurrentFunction() {",
                "-    return currentFunction;",
                "-  }",
                "-",
                "-  /**",
                "-   * Method declaration",
                "-   *",
                "-   * @param currentFunction",
                "-   * @see",
                "-   */",
                "-  public void setCurrentFunction(String currentFunction) {",
                "-    this.currentFunction = currentFunction;",
                "-  }",
                "-",
                "   public Set<String> getSelectedUserNotificationIds() {",
                "@@ -136,9 +107,2 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "-  /**",
                "-   * Method declaration",
                "-   *",
                "-   * @param folderName",
                "-   * @return",
                "-   * @see",
                "-   */",
                "   public SilverpeasList<UserNotificationUIEntity> getFolderMessageList(String folderName) {",
                "@@ -148,4 +112,4 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "           SILVERMAILPersistence.getMessageOfFolder(getUserId(), folderName, pagination, orderBy);",
                "-    } catch (SILVERMAILException e) {",
                "-      throw new org.silverpeas.core.SilverpeasRuntimeException(e);",
                "+    } catch (Exception e) {",
                "+      throw new SilverpeasRuntimeException(e);",
                "     }",
                "@@ -156,12 +120,3 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "-  /**",
                "-   * Method declaration",
                "-   *",
                "-   * @return",
                "-   * @throws NotificationManagerException",
                "-   * @see",
                "-   */",
                "-  public List<SentUserNotificationItem> getUserMessageList()",
                "-      throws NotificationManagerException {",
                "-    try {",
                "+  public List<SentUserNotificationItem> getUserMessageList() throws NotificationException {",
                "       return getNotificationInterface().getAllNotifByUser(getUserId()).stream()",
                "@@ -169,27 +124,8 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "           .collect(Collectors.toList());",
                "-    } catch (NotificationManagerException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"SILVERMAILSessionController.getUserMessageList()\",",
                "-          SilverpeasRuntimeException.ERROR, \"root.EX_CANT_GET_REMOTE_OBJECT\", e);",
                "-    }",
                "   }",
                "-  /**",
                "-   * Method declaration",
                "-   *",
                "-   * @return",
                "-   * @throws NotificationManagerException",
                "-   * @see",
                "-   */",
                "-  public SentNotificationDetail getSentNotification(String notifId)",
                "-      throws NotificationManagerException {",
                "+  public SentNotificationDetail getSentNotification(String notifId) throws NotificationException {",
                "     SentNotificationDetail sentNotification = null;",
                "-    try {",
                "       sentNotification = getNotificationInterface().getNotification(Integer.parseInt(notifId));",
                "       sentNotification.setSource(getSource(sentNotification.getComponentId()));",
                "-    } catch (NotificationManagerException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"SILVERMAILSessionController.getSentNotification()\",",
                "-          SilverpeasRuntimeException.ERROR, \"root.EX_CANT_GET_REMOTE_OBJECT\", e);",
                "-    }",
                "     return sentNotification;",
                "@@ -234,26 +170,13 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "    * @param notifId",
                "-   * @throws NotificationManagerException",
                "+   * @throws NotificationException",
                "    */",
                "-  public void deleteSentNotif(String notifId) throws NotificationManagerException {",
                "-    try {",
                "+  public void deleteSentNotif(String notifId) throws NotificationException {",
                "       getNotificationInterface().deleteNotif(Integer.parseInt(notifId), getUserId());",
                "-    } catch (NotificationManagerException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"SILVERMAILSessionController.deleteSentNotif()\",",
                "-          SilverpeasRuntimeException.ERROR, \"root.EX_CANT_GET_REMOTE_OBJECT\", e);",
                "-    }",
                "   }",
                "-  public void deleteAllSentNotif() throws NotificationManagerException {",
                "-    try {",
                "+  public void deleteAllSentNotif() throws NotificationException {",
                "       getNotificationInterface().deleteNotifByUser(getUserId());",
                "-    } catch (NotificationManagerException e) {",
                "-      throw new NotificationManagerException(",
                "-          \"SILVERMAILSessionController.deleteAllSentNotif()\",",
                "-          SilverpeasRuntimeException.ERROR, \"root.EX_CANT_GET_REMOTE_OBJECT\", e);",
                "-    }",
                "   }",
                "-  private SentNotificationInterface getNotificationInterface()",
                "-      throws NotificationManagerException {",
                "+  private SentNotificationInterface getNotificationInterface() throws NotificationException {",
                "     return SentNotificationInterface.get();",
                "@@ -261,9 +184,2 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "-  /**",
                "-   * Method declaration",
                "-   *",
                "-   * @param messageId",
                "-   * @return",
                "-   * @see",
                "-   */",
                "   public SILVERMAILMessage getMessage(long messageId)",
                "@@ -273,26 +189,2 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "-  /**",
                "-   * Method declaration",
                "-   *",
                "-   * @return",
                "-   * @see",
                "-   */",
                "-  public long getCurrentMessageId() {",
                "-    return currentMessageId;",
                "-  }",
                "-",
                "-  /**",
                "-   * Method declaration",
                "-   *",
                "-   * @param value",
                "-   * @see",
                "-   */",
                "-  public void setCurrentMessageId(long value) {",
                "-    currentMessageId = value;",
                "-  }",
                "-",
                "-  public SILVERMAILMessage getCurrentMessage() throws SILVERMAILException {",
                "-    return getMessage(currentMessageId);",
                "-  }",
                "-",
                "   /**",
                "@@ -308,5 +200,3 @@ public class SILVERMAILSessionController extends AbstractComponentSessionControl",
                "     } catch (SILVERMAILException e) {",
                "-      throw new SILVERMAILException(",
                "-          \"SILVERMAILSessionController.deleteMessage()\",",
                "-          SilverpeasRuntimeException.ERROR, \"root.EX_CANT_GET_REMOTE_OBJECT\", e);",
                "+      throw new SILVERMAILException(e);",
                "     }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllMessages.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllMessages.java",
                "index dc6ff361ad..43a7c295cb 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllMessages.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllMessages.java",
                "@@ -37,17 +37,4 @@ import javax.servlet.http.HttpServletRequest;",
                "-/**",
                "- * Class declaration",
                "- * @author",
                "- * @version %I%, %G%",
                "- */",
                " public class DeleteAllMessages implements SILVERMAILRequestHandler {",
                "-  /**",
                "-   * Method declaration",
                "-   * @param componentSC",
                "-   * @param request",
                "-   * @return",
                "-   * @throws SILVERMAILException",
                "-   *",
                "-   */",
                "   public String handleRequest(ComponentSessionController componentSC,",
                "@@ -57,4 +44,3 @@ public class DeleteAllMessages implements SILVERMAILRequestHandler {",
                "     try {",
                "-      SILVERMAILPersistence.deleteAllMessagesInFolder(componentSC.getUserId(),",
                "-          request.getParameter(\"folder\"));",
                "+      SILVERMAILPersistence.deleteAllMessagesInFolder(componentSC.getUserId());",
                "     } catch (NumberFormatException e) {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllSentNotifications.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllSentNotifications.java",
                "index b02a3cb86d..79412f56ba 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllSentNotifications.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllSentNotifications.java",
                "@@ -28,3 +28,3 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                "@@ -61,3 +61,3 @@ public class DeleteAllSentNotifications implements SILVERMAILRequestHandler {",
                "       request.setAttribute(\"SentNotifs\", sentNotifs);",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       SilverLogger.getLogger(this).error(e);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSentNotification.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSentNotification.java",
                "index d2164834ca..14a71a17c1 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSentNotification.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSentNotification.java",
                "@@ -28,3 +28,3 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                "@@ -51,3 +51,3 @@ public class DeleteSentNotification implements SILVERMAILRequestHandler {",
                "    * @return",
                "-   * @throws NotificationManagerException",
                "+   * @throws NotificationException",
                "    * @throws SILVERMAILException",
                "@@ -63,3 +63,3 @@ public class DeleteSentNotification implements SILVERMAILRequestHandler {",
                "       request.setAttribute(\"SentNotifs\", sentNotifs);",
                "-    } catch(NotificationManagerException e) {",
                "+    } catch(NotificationException e) {",
                "       SilverLogger.getLogger(this).warn(e);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Main.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Main.java",
                "index 25460e4130..689a7d2d67 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Main.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Main.java",
                "@@ -25,3 +25,2 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                "-import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                " import org.silverpeas.core.web.http.HttpRequest;",
                "@@ -34,6 +33,4 @@ import javax.servlet.http.HttpServletRequest;",
                " import static org.silverpeas.core.web.util.viewgenerator.html.arraypanes.ArrayPane.getOrderByFrom;",
                "-import static org.silverpeas.core.web.util.viewgenerator.html.pagination.Pagination",
                "-    .getPaginationPageFrom;",
                "-import static org.silverpeas.web.notificationserver.channel.silvermail",
                "-    .SILVERMAILSessionController.INBOX_ORDER_BIES;",
                "+import static org.silverpeas.core.web.util.viewgenerator.html.pagination.Pagination.getPaginationPageFrom;",
                "+import static org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILSessionController.INBOX_ORDER_BIES;",
                "@@ -47,4 +44,3 @@ public class Main implements SILVERMAILRequestHandler {",
                "    */",
                "-  public String handleRequest(ComponentSessionController componentSC, HttpServletRequest request)",
                "-      throws SILVERMAILException {",
                "+  public String handleRequest(ComponentSessionController componentSC, HttpServletRequest request) {",
                "     HttpRequest httpRequest = HttpRequest.decorate(request);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadMessage.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadMessage.java",
                "index 5a04c55ada..0c965f4ecb 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadMessage.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadMessage.java",
                "@@ -28,7 +28,4 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                "-import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                "-import org.silverpeas.core.util.logging.SilverLogger;",
                " import org.silverpeas.core.web.mvc.controller.ComponentSessionController;",
                " import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILRequestHandler;",
                "-import org.silverpeas.web.notificationserver.channel.silvermail.SILVERMAILSessionController;",
                "@@ -36,27 +33,6 @@ import javax.servlet.http.HttpServletRequest;",
                "-/**",
                "- * Class declaration",
                "- * @author",
                "- * @version %I%, %G%",
                "- */",
                " public class ReadMessage implements SILVERMAILRequestHandler {",
                "-  /**",
                "-   * Method declaration",
                "-   * @param componentSC",
                "-   * @param request",
                "-   * @return",
                "-   * @throws SILVERMAILException",
                "-   *",
                "-   */",
                "   public String handleRequest(ComponentSessionController componentSC,",
                "-      HttpServletRequest request) throws SILVERMAILException {",
                "-    try {",
                "-      String sId = request.getParameter(\"ID\");",
                "-      long id = Long.parseLong(sId);",
                "-",
                "-      ((SILVERMAILSessionController) componentSC).setCurrentMessageId(id);",
                "-    } catch (NumberFormatException e) {",
                "-      SilverLogger.getLogger(this).error(e.getMessage(), e);",
                "-    }",
                "+      HttpServletRequest request) {",
                "     return \"/SILVERMAIL/jsp/readMessage.jsp\";",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadSentNotification.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadSentNotification.java",
                "index fc50d3cb0f..79c971af48 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadSentNotification.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadSentNotification.java",
                "@@ -30,3 +30,3 @@ import javax.servlet.http.HttpServletRequest;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.model.SentNotificationDetail;",
                "@@ -60,3 +60,3 @@ public class ReadSentNotification implements SILVERMAILRequestHandler {",
                "       sentNotification = silvermailScc.getSentNotification(notifId);",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/SentUserNotifications.java b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/SentUserNotifications.java",
                "index dd91e1e78a..4890be875d 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/SentUserNotifications.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/SentUserNotifications.java",
                "@@ -27,3 +27,3 @@ package org.silverpeas.web.notificationserver.channel.silvermail.requesthandlers",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.server.channel.silvermail.SILVERMAILException;",
                "@@ -65,3 +65,3 @@ public class SentUserNotifications implements SILVERMAILRequestHandler {",
                "       sentNotifs = silvermailScc.getUserMessageList();",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       SilverLogger.getLogger(this).warn(e);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java",
                "index b57d64b50c..4a97cdc6ff 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java",
                "@@ -25,3 +25,3 @@ package org.silverpeas.web.notificationuser.control;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -57,6 +57,6 @@ public class NotificationUserSessionController extends AbstractComponentSessionC",
                "    * @param notification the notification to send",
                "-   * @throws NotificationManagerException thrown on error",
                "+   * @throws NotificationException thrown on error",
                "    */",
                "   @SuppressWarnings(\"StatementWithEmptyBody\")",
                "-  public void sendMessage(Notification notification) throws NotificationManagerException {",
                "+  public void sendMessage(Notification notification) throws NotificationException {",
                "     NotificationSender notifSender = new NotificationSender(null);",
                "@@ -79,4 +79,10 @@ public class NotificationUserSessionController extends AbstractComponentSessionC",
                "-  private String[] getIdsArrayFromIdsLine(String src) {",
                "-    return NotificationSender.getIdsArrayFromIdsLine(src);",
                "+  private static String[] lineToArray(String src) {",
                "+    final String[] result;",
                "+    if (StringUtil.isNotDefined(src)) {",
                "+      result = new String[0];",
                "+    } else {",
                "+      result = src.split(\"_\");",
                "+    }",
                "+    return result;",
                "   }",
                "@@ -96,3 +102,3 @@ public class NotificationUserSessionController extends AbstractComponentSessionC",
                "       } else {",
                "-        idUsers = this.getIdsArrayFromIdsLine(theTargetsUsers);",
                "+        idUsers = lineToArray(theTargetsUsers);",
                "       }",
                "@@ -105,3 +111,3 @@ public class NotificationUserSessionController extends AbstractComponentSessionC",
                "     if (theTargetsGroups != null && theTargetsGroups.length() > 0) {",
                "-      idGroups = this.getIdsArrayFromIdsLine(theTargetsGroups);",
                "+      idGroups = lineToArray(theTargetsGroups);",
                "     }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/personalization/control/PersonalizationSessionController.java b/core-war/src/main/java/org/silverpeas/web/personalization/control/PersonalizationSessionController.java",
                "index f3138e082a..b47bdf13e1 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/personalization/control/PersonalizationSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/personalization/control/PersonalizationSessionController.java",
                "@@ -28,3 +28,3 @@ import org.silverpeas.core.exception.SilverpeasException;",
                " import org.silverpeas.core.notification.user.client.NotificationManager;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.util.ArrayUtil;",
                "@@ -86,3 +86,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       return notificationManager.getNotificationAddresses(userId);",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new PeasCoreException(\"PersonalizationSessionController.getNotificationAddresses()\",",
                "@@ -106,3 +106,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       return notificationManager.getNotificationAddress(id, userId);",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new PeasCoreException(\"PersonalizationSessionController.getNotificationAddress()\",",
                "@@ -122,3 +122,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       return notificationManager.getNotifChannels();",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new PeasCoreException(\"PersonalizationSessionController.getNotifChannels()\",",
                "@@ -142,3 +142,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       return notificationManager.getNotifPreference(id, userId);",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new PeasCoreException(\"PersonalizationSessionController.getNotifPreference()\",",
                "@@ -160,3 +160,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       return notificationManager.getNotifPreferences(userId);",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new PeasCoreException(\"PersonalizationSessionController.getNotifPreferences()\",",
                "@@ -190,3 +190,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "           channelId, aAddress, aUsage);",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new PeasCoreException(\"PersonalizationSessionController.saveNotifAddress()\",",
                "@@ -210,3 +210,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       notificationManager.deleteNotifAddress(notifAddressId);",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new PeasCoreException(",
                "@@ -228,3 +228,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       notificationManager.deletePreference(Integer.parseInt(aPreferenceId));",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new PeasCoreException(",
                "@@ -249,3 +249,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       notificationManager.testNotifAddress(notifAddressId, userId);",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new PeasCoreException(",
                "@@ -269,3 +269,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "           notificationManager.getDefaultAddress(userId), userId);",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new PeasCoreException(",
                "@@ -290,3 +290,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "       notificationManager.setDefaultAddress(notifAddressId, userId);",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new PeasCoreException(\"PersonalizationSessionController.setDefaultAddress()\",",
                "@@ -312,3 +312,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "           Integer.parseInt(componentId), -1, Integer.parseInt(notificationId));",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       throw new PeasCoreException(\"PersonalizationSessionController.addPreference()\",",
                "@@ -506,3 +506,3 @@ public class PersonalizationSessionController extends AbstractComponentSessionCo",
                "         }",
                "-      } catch (NotificationManagerException e) {",
                "+      } catch (NotificationException e) {",
                "         throw new PeasCoreException(\"PersonalizationSessionController.setDefaultAddress()\",",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/authentication/SilverpeasSessionOpener.java b/core-web/src/main/java/org/silverpeas/core/web/authentication/SilverpeasSessionOpener.java",
                "index 7b802e243f..d6d0479749 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/authentication/SilverpeasSessionOpener.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/authentication/SilverpeasSessionOpener.java",
                "@@ -28,3 +28,3 @@ import org.silverpeas.core.admin.service.AdminController;",
                " import org.silverpeas.core.admin.user.model.UserDetail;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -359,3 +359,3 @@ public class SilverpeasSessionOpener {",
                "       return passwordChangeURL;",
                "-    } catch (NotificationManagerException e) {",
                "+    } catch (NotificationException e) {",
                "       SilverLogger.getLogger(this)",
                "@@ -367,3 +367,3 @@ public class SilverpeasSessionOpener {",
                "   private void sendPopupNotificationAboutPwdExpiration(String userId, String fromUserId,",
                "-      String language) throws NotificationManagerException {",
                "+      String language) throws NotificationException {",
                "     LocalizationBundle messages = ResourceLocator.getLocalizationBundle(",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/external/webconnections/dao/WebConnectionService.java b/core-web/src/main/java/org/silverpeas/core/web/external/webconnections/dao/WebConnectionService.java",
                "index 4e11099568..e5898d3d75 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/external/webconnections/dao/WebConnectionService.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/external/webconnections/dao/WebConnectionService.java",
                "@@ -25,7 +25,6 @@ package org.silverpeas.core.web.external.webconnections.dao;",
                "-import org.silverpeas.core.security.authorization.ForbiddenRuntimeException;",
                " import org.silverpeas.core.admin.component.ComponentInstanceDeletion;",
                "+import org.silverpeas.core.security.authorization.ForbiddenRuntimeException;",
                " import org.silverpeas.core.web.external.webconnections.model.ConnectionDetail;",
                " import org.silverpeas.core.web.external.webconnections.model.WebConnectionsInterface;",
                "-import org.silverpeas.core.exception.SilverpeasRuntimeException;",
                "@@ -65,4 +64,3 @@ public class WebConnectionService implements WebConnectionsInterface, ComponentI",
                "     } catch (SQLException e) {",
                "-      throw new WebConnectionsRuntimeException(\"WebConnectionsInterface.getConnection()\",",
                "-          SilverpeasRuntimeException.ERROR, \"webConnections.MSG_CONNECTION_NOT_EXIST\", e);",
                "+      throw new WebConnectionsRuntimeException(e);",
                "     }",
                "@@ -74,4 +72,3 @@ public class WebConnectionService implements WebConnectionsInterface, ComponentI",
                "     } catch (SQLException e) {",
                "-      throw new WebConnectionsRuntimeException(\"WebConnectionsInterface.getConnection()\",",
                "-          SilverpeasRuntimeException.ERROR, \"webConnections.MSG_CONNECTION_NOT_EXIST\", e);",
                "+      throw new WebConnectionsRuntimeException(e);",
                "     }",
                "@@ -86,4 +83,4 @@ public class WebConnectionService implements WebConnectionsInterface, ComponentI",
                "       if(!userId.equals(connectionDetail.getUserId())) {",
                "-        throw new ForbiddenRuntimeException(\"WebConnectionsInterface.getWebConnectionById()\",",
                "-          SilverpeasRuntimeException.ERROR, \"peasCore.RESOURCE_ACCESS_UNAUTHORIZED\", \"connectionId=\"+connectionId+\", userId=\"+userId);",
                "+        throw new ForbiddenRuntimeException(",
                "+            \"Web connection \" + connectionId + \" unauthorized for user \" + userId);",
                "       }",
                "@@ -92,4 +89,3 @@ public class WebConnectionService implements WebConnectionsInterface, ComponentI",
                "     } catch (Exception e) {",
                "-      throw new WebConnectionsRuntimeException(\"WebConnectionsInterface.getConnectionById()\",",
                "-          SilverpeasRuntimeException.ERROR, \"webConnections.MSG_CONNECTION_NOT_EXIST\", e);",
                "+      throw new WebConnectionsRuntimeException(e);",
                "     }",
                "@@ -102,4 +98,3 @@ public class WebConnectionService implements WebConnectionsInterface, ComponentI",
                "     } catch (Exception e) {",
                "-      throw new WebConnectionsRuntimeException(\"WebConnectionsInterface.createConnection()\",",
                "-          SilverpeasRuntimeException.ERROR, \"webConnections.MSG_CONNECTION_NOT_CREATE\", e);",
                "+      throw new WebConnectionsRuntimeException(e);",
                "     }",
                "@@ -117,4 +112,3 @@ public class WebConnectionService implements WebConnectionsInterface, ComponentI",
                "     } catch (Exception e) {",
                "-      throw new WebConnectionsRuntimeException(\"WebConnectionsInterface.deleteConnection()\",",
                "-          SilverpeasRuntimeException.ERROR, \"webConnections.MSG_CONNECTION_NOT_DELETE\", e);",
                "+      throw new WebConnectionsRuntimeException(e);",
                "     }",
                "@@ -132,4 +126,3 @@ public class WebConnectionService implements WebConnectionsInterface, ComponentI",
                "     } catch (Exception e) {",
                "-      throw new WebConnectionsRuntimeException(\"WebConnectionsInterface.updateConnection()\",",
                "-          SilverpeasRuntimeException.ERROR, \"webConnections.MSG_CONNECTION_NOT_UPDATE\", e);",
                "+      throw new WebConnectionsRuntimeException(e);",
                "     }",
                "@@ -141,4 +134,3 @@ public class WebConnectionService implements WebConnectionsInterface, ComponentI",
                "     } catch (Exception e) {",
                "-      throw new WebConnectionsRuntimeException(\"WebConnectionsInterface.getConnectionsByUser()\",",
                "-          SilverpeasRuntimeException.ERROR, \"webConnections.MSG_CONNECTIONS_NOT_EXIST\", e);",
                "+      throw new WebConnectionsRuntimeException(e);",
                "     }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/external/webconnections/dao/WebConnectionsRuntimeException.java b/core-web/src/main/java/org/silverpeas/core/web/external/webconnections/dao/WebConnectionsRuntimeException.java",
                "index 90cc1d0d06..d1c0f14adf 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/external/webconnections/dao/WebConnectionsRuntimeException.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/external/webconnections/dao/WebConnectionsRuntimeException.java",
                "@@ -25,30 +25,19 @@ package org.silverpeas.core.web.external.webconnections.dao;",
                "-import org.silverpeas.core.exception.SilverpeasRuntimeException;",
                "+import org.silverpeas.core.SilverpeasRuntimeException;",
                " public class WebConnectionsRuntimeException extends SilverpeasRuntimeException {",
                "-  private static final long serialVersionUID = -5698912998591946797L;",
                "-  public WebConnectionsRuntimeException(String callingClass, int errorLevel, String message) {",
                "-    super(callingClass, errorLevel, message);",
                "-  }",
                "-",
                "-  public WebConnectionsRuntimeException(String callingClass, int errorLevel, String message,",
                "-      String extraParams) {",
                "-    super(callingClass, errorLevel, message, extraParams);",
                "-  }",
                "+  private static final long serialVersionUID = -7721995560763853640L;",
                "-  public WebConnectionsRuntimeException(String callingClass, int errorLevel, String message,",
                "-      Exception nested) {",
                "-    super(callingClass, errorLevel, message, nested);",
                "+  public WebConnectionsRuntimeException(final String message) {",
                "+    super(message);",
                "   }",
                "-  public WebConnectionsRuntimeException(String callingClass, int errorLevel, String message,",
                "-      String extraParams, Exception nested) {",
                "-    super(callingClass, errorLevel, message, extraParams, nested);",
                "+  public WebConnectionsRuntimeException(final String message, final Throwable cause) {",
                "+    super(message, cause);",
                "   }",
                "-  public String getModule() {",
                "-    return \"webConnections\";",
                "+  public WebConnectionsRuntimeException(final Throwable cause) {",
                "+    super(cause);",
                "   }",
                "-",
                " }",
                "\\ No newline at end of file",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/session/SessionManager.java b/core-web/src/main/java/org/silverpeas/core/web/session/SessionManager.java",
                "index f36b94fc3c..6ecd399db3 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/session/SessionManager.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/session/SessionManager.java",
                "@@ -36,3 +36,3 @@ import org.silverpeas.core.notification.sse.DefaultServerEventNotifier;",
                " import org.silverpeas.core.notification.sse.ServerEventDispatcherTask;",
                "-import org.silverpeas.core.notification.user.client.NotificationManagerException;",
                "+import org.silverpeas.core.notification.NotificationException;",
                " import org.silverpeas.core.notification.user.client.NotificationMetaData;",
                "@@ -410,3 +410,3 @@ public class SessionManager implements SessionManagement, Initialization {",
                "             + scheduledSessionManagementTimeStamp, si.getSessionId());",
                "-      } catch (NotificationManagerException ex) {",
                "+      } catch (NotificationException ex) {",
                "         SilverLogger.getLogger(this)",
                "@@ -432,3 +432,3 @@ public class SessionManager implements SessionManagement, Initialization {",
                "   private void notifyEndOfSession(String userId, long endOfSession, String sessionId)",
                "-      throws NotificationManagerException {",
                "+      throws NotificationException {",
                "     UserDetail user = UserDetail.getById(userId);"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/notification/NotificationException.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManager.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerException.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationMetaData.java",
                "core-library/src/main/java/org/silverpeas/core/admin/component/model/ComponentInst.java",
                "core-library/src/main/java/org/silverpeas/core/admin/user/UserRegistrationServiceLegacy.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/attachment/ScheduledReservedFile.java",
                "core-library/src/main/java/org/silverpeas/core/datereminder/DateReminderScheduler.java",
                "core-library/src/main/java/org/silverpeas/core/datereminder/provider/DateReminderProcess.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/DefaultUserNotification.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/CurrentUserNotificationContext.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationUserEventListener.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterface.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/model/SentNotificationInterfaceImpl.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILException.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/server/channel/silvermail/SILVERMAILPersistence.java",
                "core-library/src/main/java/org/silverpeas/core/security/authorization/ForbiddenRuntimeException.java",
                "core-library/src/test-awaiting/java/com/silverpeas/admin/DomainMatcher.java",
                "core-library/src/test-awaiting/java/com/silverpeas/form/AbstractFormTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/form/MyFieldDisplayer.java",
                "core-library/src/test-awaiting/java/com/silverpeas/form/MyFieldTemplate.java",
                "core-library/src/test-awaiting/java/com/silverpeas/form/MyRecordTemplate.java",
                "core-library/src/test-awaiting/java/com/silverpeas/form/displayers/JdbcFieldDisplayerTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/form/displayers/VideoFieldDisplayerTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/form/form/XmlFormTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/jcrutil/TestBasicDaoFactory.java",
                "core-library/src/test-awaiting/java/com/silverpeas/jcrutil/security/impl/BasicLoginModule.java",
                "core-library/src/test-awaiting/java/com/silverpeas/jcrutil/security/jaas/TestAccessAuthentified.java",
                "core-library/src/test-awaiting/java/com/silverpeas/notification/MyNotificationSubscriber.java",
                "core-library/src/test-awaiting/java/com/silverpeas/notification/MyResource.java",
                "core-library/src/test-awaiting/java/com/silverpeas/notification/NotificationPublishingTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/notification/NotificationServiceTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/notification/NotificationSubscriptionTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/notification/builder/ResourceDataTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/notification/builder/UserNotificationBuilderTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/notification/delayed/DelayedNotificationManagerPerformanceTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/notification/delayed/scheduler/DelayedNotificationSchedulerInitializerTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/notification/mock/AdminNotificationServiceMock.java",
                "core-library/src/test-awaiting/java/com/silverpeas/social/dao/ExternalAccountDaoTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/social/dao/SocialNetworkServiceLinkedInTest.java",
                "core-library/src/test-awaiting/java/com/silverpeas/social/invitation/TestInvitationDao.java",
                "core-library/src/test-awaiting/java/com/silverpeas/social/invitation/TestInvitationService.java",
                "core-library/src/test-awaiting/java/com/silverpeas/social/mock/OrganizationControllerMock.java",
                "core-library/src/test-awaiting/java/com/silverpeas/social/provider/TestProviderSwitch.java",
                "core-library/src/test-awaiting/java/com/silverpeas/social/relationShip/TestRelationShipDao.java",
                "core-library/src/test-awaiting/java/com/silverpeas/social/relationShip/TestRelationShipService.java",
                "core-library/src/test-awaiting/java/com/silverpeas/social/status/TestSatusDao.java",
                "core-library/src/test-awaiting/java/com/stratelia/silverpeas/domains/ldapdriver/LDAPGroupAllRootTest.java",
                "core-library/src/test-awaiting/java/com/stratelia/silverpeas/notificationserver/NotificationServerUtilTest.java",
                "core-library/src/test-awaiting/java/com/stratelia/silverpeas/peasCore/URLManagerTest.java",
                "core-library/src/test-awaiting/java/com/stratelia/webactiv/beans/admin/AdminTest.java",
                "core-library/src/test-awaiting/java/com/stratelia/webactiv/beans/admin/dao/ComponentDAOTest.java",
                "core-library/src/test-awaiting/java/com/stratelia/webactiv/organization/GroupTableTest.java",
                "core-library/src/test-awaiting/java/com/stratelia/webactiv/organization/OrganizationSchemaTest.java",
                "core-library/src/test-awaiting/java/com/stratelia/webactiv/organization/SpaceTableTest.java",
                "core-library/src/test-awaiting/java/com/stratelia/webactiv/util/DBUtilTest.java",
                "core-library/src/test-awaiting/java/org/silverpeas/admin/mock/OrganizationControllerMockWrapper.java",
                "core-library/src/test-awaiting/java/org/silverpeas/admin/space/mock/DefaultComponentSpaceQuotaService.java",
                "core-library/src/test-awaiting/java/org/silverpeas/admin/space/mock/DefaultDataStorageSpaceQuotaService.java",
                "core-library/src/test-awaiting/java/org/silverpeas/authentication/encryption/UnixSHA512EncryptionTest.java",
                "core-library/src/test-awaiting/java/org/silverpeas/importExport/versioning/TestDocumentVersion.java",
                "core-library/src/test-awaiting/java/org/silverpeas/notification/jsondiff/JsonPatchTest.java",
                "core-library/src/test-awaiting/java/org/silverpeas/search/indexEngine/model/RepositoryIndexerTest.java",
                "core-library/src/test-awaiting/java/org/silverpeas/search/indexEngine/model/TestDidYouMeanIndexer.java",
                "core-library/src/test-awaiting/java/org/silverpeas/search/searchEngine/TestDidYouMeanSearcher.java",
                "core-library/src/test-awaiting/java/org/silverpeas/search/searchEngine/model/TestSearchCompletion.java",
                "core-library/src/test-awaiting/java/org/silverpeas/servlet/FileUploadUtilTest.java",
                "core-library/src/test-awaiting/java/org/silverpeas/termsOfService/constant/TermsOfServiceAcceptanceFrequencyTest.java",
                "core-library/src/test-awaiting/java/org/silverpeas/token/persistent/PersistentResourceTokenTest.java",
                "core-library/src/test-awaiting/java/org/silverpeas/token/persistent/service/MyUnknownEntityReference.java",
                "core-library/src/test-awaiting/java/org/silverpeas/token/persistent/service/TokenServiceTest.java",
                "core-library/src/test-awaiting/java/org/silverpeas/token/synchronizer/SynchronizerTokenGeneratorTest.java",
                "core-services/comment/src/main/java/org/silverpeas/core/comment/service/notification/CommentUserNotificationService.java",
                "core-services/pdc/src/main/java/org/silverpeas/core/pdc/interests/service/DefaultInterestsService.java",
                "core-services/workflow/src/main/java/org/silverpeas/core/workflow/engine/task/TaskManagerImpl.java",
                "core-war/src/main/java/org/silverpeas/web/alertuser/control/AlertUserPeasSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/directory/control/DirectorySessionController.java",
                "core-war/src/main/java/org/silverpeas/web/directory/servlets/DirectoryJSONServlet.java",
                "core-war/src/main/java/org/silverpeas/web/jobdomain/control/JobDomainPeasSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILRequestRouter.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/SILVERMAILSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllMessages.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteAllSentNotifications.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/DeleteSentNotification.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/Main.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadMessage.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/ReadSentNotification.java",
                "core-war/src/main/java/org/silverpeas/web/notificationserver/channel/silvermail/requesthandlers/SentUserNotifications.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/NotificationUserSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/personalization/control/PersonalizationSessionController.java",
                "core-web/src/main/java/org/silverpeas/core/web/authentication/SilverpeasSessionOpener.java",
                "core-web/src/main/java/org/silverpeas/core/web/external/webconnections/dao/WebConnectionService.java",
                "core-web/src/main/java/org/silverpeas/core/web/external/webconnections/dao/WebConnectionsRuntimeException.java",
                "core-web/src/main/java/org/silverpeas/core/web/session/SessionManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9884": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, file, upload, directory, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9884",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0761ce7be27803ae3a47349a5e2b1834e92ba90f",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1547571940,
            "hunks": 3,
            "message": "integration of feature #10255 : - adding usage of attachment permalink - enlarging width of extra message - escaping extra tabs generated by ckeditor",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/AttachmentLink.java b/core-library/src/main/java/org/silverpeas/core/notification/user/AttachmentLink.java",
                "index a704dbd014..7bfaecb8bf 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/AttachmentLink.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/AttachmentLink.java",
                "@@ -7,2 +7,3 @@ import org.silverpeas.core.util.FileLink;",
                " import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.util.URLUtil;",
                " import org.silverpeas.core.util.memory.MemoryUnit;",
                "@@ -33,3 +34,3 @@ public class AttachmentLink extends FileLink {",
                "       final String label = StringUtil.isDefined(d.getTitle()) ? d.getTitle() : d.getFilename();",
                "-      return new AttachmentLink(d.getAttachmentURL(), label, d.getSize(), language);",
                "+      return new AttachmentLink(URLUtil.getCurrentServerURL()+d.getUniversalURL(), label, d.getSize(), language);",
                "     }).collect(Collectors.toList());",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "index 371e9a0606..e42f012a51 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "@@ -146,3 +146,3 @@ public class UserNotificationSessionController extends AbstractComponentSessionC",
                "     userNotification.setTitle(context.get(\"title\"))",
                "-        .setContent(context.get(\"content\").replaceAll(\"[\\\\n\\\\r]\", \"\"))",
                "+        .setContent(context.get(\"content\").replaceAll(\"[\\\\n\\\\r\\\\t]\", \"\"))",
                "         .setAttachmentLinksFor(contributionId)"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/notification/user/AttachmentLink.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10255": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10255",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1a181a346be3ce8c294ec9fb86fab8e6d559b273",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1545207367,
            "hunks": 11,
            "message": "fixing bug #10128 adding some robustness when some parameters are not set",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/ExplorerFieldDisplayer.java b/core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/ExplorerFieldDisplayer.java",
                "index 10253bb440..310a005b34 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/ExplorerFieldDisplayer.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/ExplorerFieldDisplayer.java",
                "@@ -143,3 +143,3 @@ public class ExplorerFieldDisplayer extends AbstractFieldDisplayer<ExplorerField",
                "           fieldName + \"&elementVisible=\" + fieldName + \"_path\" + \"&scope=\" + scope;",
                "-      html += \"','explorer',800,600,'scrollbars=yes');\\\" >\";",
                "+      html += \"','explorer',800,600,'scrollbars=yes');return false;\\\" >\";",
                "       html += \"<img src=\\\"\" + selectImg + \"\\\" width=\\\"15\\\" height=\\\"15\\\" border=\\\"0\\\" alt=\\\"\" +",
                "@@ -149,3 +149,3 @@ public class ExplorerFieldDisplayer extends AbstractFieldDisplayer<ExplorerField",
                "               \".\" + fieldName + \".value='';\" + \"document.\" + pageContext.getFormName() + \".\" +",
                "-              fieldName + \"$$path\" + \".value='';\" + \"\\\">\";",
                "+              fieldName + \"$$path\" + \".value='';return false;\" + \"\\\">\";",
                "       html += \"<img src=\\\"\" + deleteImg + \"\\\" width=\\\"15\\\" height=\\\"15\\\" border=\\\"0\\\" alt=\\\"\" +",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/LdapFieldDisplayer.java b/core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/LdapFieldDisplayer.java",
                "index 168ccb8d28..49ef2fdb3e 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/LdapFieldDisplayer.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/LdapFieldDisplayer.java",
                "@@ -54,4 +54,4 @@ public class LdapFieldDisplayer extends AbstractFieldDisplayer<LdapField> {",
                "-  private final static String[] MANAGED_TYPES = new String[]{LdapField.TYPE};",
                "-  private final static String mandatoryImg = Util.getIcon(\"mandatoryField\");",
                "+  private static final String[] MANAGED_TYPES = new String[]{LdapField.TYPE};",
                "+  private static final String mandatoryImg = Util.getIcon(\"mandatoryField\");",
                "@@ -82,11 +82,6 @@ public class LdapFieldDisplayer extends AbstractFieldDisplayer<LdapField> {",
                "   @Override",
                "-  public void displayScripts(PrintWriter out, FieldTemplate template, PagesContext pagesContext)",
                "-      throws java.io.IOException {",
                "+  public void displayScripts(PrintWriter out, FieldTemplate template, PagesContext pagesContext) {",
                "     String language = pagesContext.getLanguage();",
                "-",
                "-    if (!template.getTypeName().equals(LdapField.TYPE)) {",
                "-",
                "-    }",
                "-",
                "+    ",
                "     if (template.isMandatory() && pagesContext.useMandatory()) {",
                "@@ -263,3 +258,3 @@ public class LdapFieldDisplayer extends AbstractFieldDisplayer<LdapField> {",
                "       html.append(fieldName).append(\");\\n\").append(\"\tthis.oAutoComp\").append(fieldName);",
                "-      html.append(\".prehighlightClassName = \\\"yui-ac-prehighlight\\\");\\n\");",
                "+      html.append(\".prehighlightClassName = \\\"yui-ac-prehighlight\\\";\\n\");",
                "       html.append(\"\tthis.oAutoComp\").append(fieldName).append(\".typeAhead = true;\\n\");",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/content/form/field/LdapField.java b/core-library/src/main/java/org/silverpeas/core/contribution/content/form/field/LdapField.java",
                "index 7662bb9bca..33ff58089d 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/content/form/field/LdapField.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/content/form/field/LdapField.java",
                "@@ -52,3 +52,3 @@ public class LdapField extends TextField {",
                "    */",
                "-  static public final String TYPE = \"ldap\";",
                "+  public static final String TYPE = \"ldap\";",
                "   /**",
                "@@ -56,3 +56,3 @@ public class LdapField extends TextField {",
                "    */",
                "-  static public final String VARIABLE_LOGIN = \"$$login\";",
                "+  public static final String VARIABLE_LOGIN = \"$$login\";",
                "   /**",
                "@@ -60,3 +60,3 @@ public class LdapField extends TextField {",
                "    */",
                "-  static private final String VARIABLE_REGEX_LOGIN = \"\\\\$\\\\$login\";",
                "+  private static final String VARIABLE_REGEX_LOGIN = \"\\\\$\\\\$login\";",
                "   private String value = \"\";",
                "@@ -167,3 +167,3 @@ public class LdapField extends TextField {",
                "     // parsing filter -> dynamic variable",
                "-    if (filter.contains(VARIABLE_LOGIN)) {",
                "+    if (filter != null && filter.contains(VARIABLE_LOGIN)) {",
                "       try {",
                "@@ -180,3 +180,6 @@ public class LdapField extends TextField {",
                "     try {",
                "-      int scopeInt = Integer.parseInt(scope);",
                "+      int scopeInt = LDAPConnection.SCOPE_SUB;",
                "+      if (StringUtil.isDefined(scope) && StringUtil.isInteger(scope)) {",
                "+        scopeInt = Integer.parseInt(scope);",
                "+      }",
                "       if (StringUtil.isDefined(attribute)) {"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/ExplorerFieldDisplayer.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/LdapFieldDisplayer.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/content/form/field/LdapField.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10128": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10128",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f4a45fb79dff84c521bee788f074664c755b944d",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1546002716,
            "hunks": 1,
            "message": "on feature #8335, fixing a NullPointerException when sending a notification to administrators during synchronization error",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "index 53427e8953..4b97a4d08c 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java",
                "@@ -144,3 +144,6 @@ public class NotificationSender implements java.io.Serializable {",
                "     final String defaultLanguage;",
                "-    final String senderLanguage = User.getById(senderId).getUserPreferences().getLanguage();",
                "+    String senderLanguage = \"\";",
                "+    if (StringUtil.isDefined(senderId)) {",
                "+      senderLanguage = User.getById(senderId).getUserPreferences().getLanguage();",
                "+    }",
                "     if (languages.contains(senderLanguage)) {"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/NotificationSender.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "8335": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 8335",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "51f5c061cfeb832e4c08fbd7f6d7a3afda6fcb7a",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1547816751,
            "hunks": 2,
            "message": "fixing some issues around feature #10255",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java",
                "index 2ddd0fcb15..9f6ebbd3c4 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java",
                "@@ -226,3 +226,3 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "         CollectionUtil.isEmpty(groupIdsToNotify) && CollectionUtil.isEmpty(emailsToNotify)) {",
                "-      SilverLogger.getLogger(this).error(\"No user or groups to notify!\");",
                "+      SilverLogger.getLogger(this).info(\"No user or groups to notify!\");",
                "       stop();",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java b/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "index c1e008c867..012459a199 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java",
                "@@ -954,3 +954,4 @@ public class DefaultNotificationManager extends AbstractNotification",
                "-      if (StringUtil.isDefined(params.getNotificationResourceData().getAttachmentTargetId())) {",
                "+      if (params.getNotificationResourceData() != null &&",
                "+          StringUtil.isDefined(params.getNotificationResourceData().getAttachmentTargetId())) {",
                "         theExtraParams.put(ATTACHMENT_TARGETID,"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/client/DefaultNotificationManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10255": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10255",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a96fbe105112ca799c8661c7f932ddcb18ec9f73",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1538388904,
            "hunks": 11,
            "message": "Feature #10078: - trimming value of openoffice.port property key - adding robustness around cache of computed views and previews of document",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeService.java b/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeService.java",
                "index 7ef58e1672..2579fcce69 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeService.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeService.java",
                "@@ -56,3 +56,6 @@ public class OpenOfficeService implements Initialization {",
                "     final int taskTimeout = settings.getInteger(OPENOFFICE_TASK_TIMEOUT, 30000);",
                "-    final int[] portNumbers = Stream.of(ports.split(\",\")).mapToInt(Integer::parseInt).toArray();",
                "+    final int[] portNumbers = Stream.of(ports.split(\",\"))",
                "+        .map(String::trim)",
                "+        .mapToInt(Integer::parseInt)",
                "+        .toArray();",
                "     LocalOfficeManager.Builder builder = LocalOfficeManager.builder().portNumbers(portNumbers)",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/io/temp/TemporaryWorkspaceTranslation.java b/core-library/src/main/java/org/silverpeas/core/io/temp/TemporaryWorkspaceTranslation.java",
                "index 504c85be4d..e2802567ad 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/io/temp/TemporaryWorkspaceTranslation.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/io/temp/TemporaryWorkspaceTranslation.java",
                "@@ -28,4 +28,4 @@ import org.apache.commons.io.FileUtils;",
                " import org.silverpeas.core.SilverpeasRuntimeException;",
                "-import org.silverpeas.core.util.file.FileRepositoryManager;",
                " import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.util.file.FileRepositoryManager;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -49,2 +49,3 @@ import static org.silverpeas.core.util.SerializationUtil.serializeAsString;",
                "  */",
                "+@SuppressWarnings(\"SynchronizeOnNonFinalField\")",
                " public class TemporaryWorkspaceTranslation {",
                "@@ -57,2 +58,3 @@ public class TemporaryWorkspaceTranslation {",
                "   private Map<String, String> descriptorContent = new HashMap<>();",
                "+  private boolean workInProgress = false;",
                "   private Object lock = new Object();",
                "@@ -130,2 +132,12 @@ public class TemporaryWorkspaceTranslation {",
                "+  /**",
                "+   * Indicates if the workspace is empty.",
                "+   * @return true if it is empty, false otherwise.",
                "+   */",
                "+  public boolean empty() {",
                "+    synchronized (lock) {",
                "+      return exists() && FileUtils.sizeOfDirectory(workspace) == 0;",
                "+    }",
                "+  }",
                "+",
                "   /**",
                "@@ -184,4 +196,4 @@ public class TemporaryWorkspaceTranslation {",
                "         }",
                "-      } catch (IOException ignore) {",
                "-        SilverLogger.getLogger(this).silent(ignore);",
                "+      } catch (IOException e) {",
                "+        SilverLogger.getLogger(this).silent(e);",
                "       }",
                "@@ -190,2 +202,20 @@ public class TemporaryWorkspaceTranslation {",
                "+  public void markWorkInProgress() {",
                "+    synchronized (lock) {",
                "+      workInProgress = true;",
                "+    }",
                "+  }",
                "+",
                "+  private void markWorkNoMoreInProgress() {",
                "+    synchronized (lock) {",
                "+      workInProgress = false;",
                "+    }",
                "+  }",
                "+",
                "+  public boolean isWorkInProgress() {",
                "+    synchronized (lock) {",
                "+      return workInProgress;",
                "+    }",
                "+  }",
                "+",
                "   /**",
                "@@ -205,2 +235,3 @@ public class TemporaryWorkspaceTranslation {",
                "     }",
                "+    markWorkNoMoreInProgress();",
                "     return this;",
                "diff --git a/core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/AbstractViewerService.java b/core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/AbstractViewerService.java",
                "index 8eb713061f..5ab188fbda 100644",
                "--- a/core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/AbstractViewerService.java",
                "+++ b/core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/AbstractViewerService.java",
                "@@ -155,5 +155,13 @@ public abstract class AbstractViewerService {",
                "-          // If the original resource has not changed since the last conversion, then getting the",
                "-          // converted data that exist already.",
                "-          if (workspace.lastModified() >= viewerContext.getOriginalSourceFile().lastModified()) {",
                "+          if (!workspace.isWorkInProgress() && workspace.empty()) {",
                "+            // If workspace is empty, something is wrong and the workspace must be removed to be",
                "+            // again created.",
                "+            getLogger(this).debug(",
                "+                () -> format(\"workspace is empty for view context {0}, create it again\",",
                "+                    viewerContext.getViewId()));",
                "+            workspace.remove();",
                "+          } else if (workspace.lastModified() >=",
                "+              viewerContext.getOriginalSourceFile().lastModified()) {",
                "+            // If the original resource has not changed since the last conversion, then getting the",
                "+            // converted data that exist already.",
                "             Semaphore currentProcessing = (Semaphore) cache.get(workspace.getRootPath().getPath());",
                "@@ -190,2 +198,3 @@ public abstract class AbstractViewerService {",
                "         viewerContext.processingCache();",
                "+        workspace.markWorkInProgress();",
                "         workspace.create();"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/contribution/converter/openoffice/OpenOfficeService.java",
                "core-library/src/main/java/org/silverpeas/core/io/temp/TemporaryWorkspaceTranslation.java",
                "core-services/viewer/src/main/java/org/silverpeas/core/viewer/service/AbstractViewerService.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10078": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10078",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dc5bbef03322f16a6a88fb081609471f8c18adb7",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1544022912,
            "hunks": 65,
            "message": "Feature #9884 Improve a little the notification mechanism with the custom title definition. In the notification sending in \"My Notifications\", the message writting window is now rendered as a popin instead of a popup browser window.",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/calendar/notification/user/AbstractCalendarEventUserNotificationBuilder.java b/core-library/src/main/java/org/silverpeas/core/calendar/notification/user/AbstractCalendarEventUserNotificationBuilder.java",
                "index b913a02233..ca1d19af10 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/calendar/notification/user/AbstractCalendarEventUserNotificationBuilder.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/calendar/notification/user/AbstractCalendarEventUserNotificationBuilder.java",
                "@@ -73,3 +73,3 @@ public abstract class AbstractCalendarEventUserNotificationBuilder<C extends Con",
                "   @Override",
                "-  protected String getMultilangPropertyFile() {",
                "+  protected String getLocalizationBundlePath() {",
                "     return \"org.silverpeas.calendar.multilang.usernotification\";",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/datereminder/PublicationDateReminderUserNotification.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/datereminder/PublicationDateReminderUserNotification.java",
                "index 03c2e81d8b..f490d38627 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/datereminder/PublicationDateReminderUserNotification.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/datereminder/PublicationDateReminderUserNotification.java",
                "@@ -129,3 +129,3 @@ public class PublicationDateReminderUserNotification",
                "   @Override",
                "-  protected String getMultilangPropertyFile() {",
                "+  protected String getLocalizationBundlePath() {",
                "     return \"org.silverpeas.dateReminder.multilang.dateReminder\";",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/SimpleUserNotification.java b/core-library/src/main/java/org/silverpeas/core/notification/user/SimpleUserNotification.java",
                "index 878865392a..0e0f82b0b2 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/SimpleUserNotification.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/SimpleUserNotification.java",
                "@@ -33,3 +33,2 @@ import org.silverpeas.core.notification.user.model.NotificationResourceData;",
                " import org.silverpeas.core.template.SilverpeasTemplate;",
                "-import org.silverpeas.core.ui.DisplayI18NHelper;",
                "@@ -240,4 +239,4 @@ public class SimpleUserNotification implements UserNotification {",
                "     @Override",
                "-    protected String getTitle() {",
                "-      return source.title.apply(DisplayI18NHelper.getDefaultLanguage());",
                "+    protected String getTitle(final String language) {",
                "+      return source.title.apply(language);",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractContributionTemplateUserNotificationBuilder.java b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractContributionTemplateUserNotificationBuilder.java",
                "index 2b8523788c..7a9f137547 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractContributionTemplateUserNotificationBuilder.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractContributionTemplateUserNotificationBuilder.java",
                "@@ -26,3 +26,2 @@ package org.silverpeas.core.notification.user.builder;",
                "-import org.apache.commons.lang3.StringUtils;",
                " import org.silverpeas.core.admin.user.model.User;",
                "@@ -33,3 +32,2 @@ import org.silverpeas.core.template.SilverpeasTemplate;",
                "-import static org.silverpeas.core.util.StringUtil.defaultStringIfNotDefined;",
                " import static org.silverpeas.core.util.StringUtil.isDefined;",
                "@@ -55,6 +53,3 @@ public abstract class AbstractContributionTemplateUserNotificationBuilder<C exte",
                "     final String contributionType = localizedContribution.getContributionType();",
                "-    String title = getTitle();",
                "-    if (StringUtils.isNotBlank(getMultilangPropertyFile())) {",
                "-      title = defaultStringIfNotDefined(getBundle(language).getString(getBundleSubjectKey()), getTitle());",
                "-    }",
                "+    final String title = getTitle(language);",
                "     getNotificationMetaData().addLanguage(language, title, \"\");",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java",
                "index bfb4c946de..406da0295c 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java",
                "@@ -28,2 +28,3 @@ import org.silverpeas.core.admin.component.model.SilverpeasComponentInstance;",
                " import org.silverpeas.core.admin.service.OrganizationControllerProvider;",
                "+import org.silverpeas.core.i18n.I18NHelper;",
                " import org.silverpeas.core.notification.user.DefaultUserNotification;",
                "@@ -99,4 +100,4 @@ public abstract class AbstractTemplateUserNotificationBuilder<T> extends",
                "    * <p>",
                "-   * It can be overridden by specifying a property",
                "-   * in the bundle returned by {@link #getBundleSubjectKey()} and under the name given by",
                "+   * It can be overridden by specifying a another property",
                "+   * in the bundle returned by {@link #getBundle()} and under the name given by",
                "    * {@link #getBundleSubjectKey()}. By this way, each component in Silverpeas has a way to",
                "@@ -104,2 +105,7 @@ public abstract class AbstractTemplateUserNotificationBuilder<T> extends",
                "    * </p>",
                "+   * <p>",
                "+   *  This method delegates its call to the {@link #getTitle(String)} method with",
                "+   *  {@link I18NHelper#defaultLanguage} as locale. So, to specify a custom implementation of this",
                "+   *  method, please override instead the {@link #getTitle(String)} method.",
                "+   * </p>",
                "    * @return the title of the notification. By default, the title is specify globally for all",
                "@@ -108,3 +114,16 @@ public abstract class AbstractTemplateUserNotificationBuilder<T> extends",
                "   @Override",
                "-  protected String getTitle() {",
                "+  protected final String getTitle() {",
                "+    return getTitle(I18NHelper.defaultLanguage);",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the title of the notification to build explicitly in the specified language from the",
                "+   * bundle returned by the {@link #getBundle()} method. This method can be overridden to specify",
                "+   * another implementation.",
                "+   * @see #getTitle()",
                "+   * @param language the ISO-631 code of a language.",
                "+   * @return the title of the notification. By default, the title is specify globally for all",
                "+   * notifications by the <code>GML.st.notification.subject</code> property.",
                "+   */",
                "+  protected String getTitle(final String language) {",
                "     final String subjectKey = getBundleSubjectKey();",
                "@@ -112,5 +131,5 @@ public abstract class AbstractTemplateUserNotificationBuilder<T> extends",
                "     if (StringUtils.isBlank(subjectKey) || !getBundle().containsKey(subjectKey)) {",
                "-      subject = getBundle().getString(DEFAULT_NOTIFICATION_SUBJECT);",
                "+      subject = getBundle(language).getString(DEFAULT_NOTIFICATION_SUBJECT);",
                "     } else {",
                "-      subject = getBundle().getString(subjectKey);",
                "+      subject = getBundle(language).getString(subjectKey);",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java",
                "index b317c774c7..2ddd0fcb15 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java",
                "@@ -38,3 +38,2 @@ import org.silverpeas.core.notification.user.client.constant.NotifAction;",
                " import org.silverpeas.core.notification.user.client.constant.NotifMessageType;",
                "-import org.silverpeas.core.silvertrace.SilverTrace;",
                " import org.silverpeas.core.ui.DisplayI18NHelper;",
                "@@ -48,7 +47,6 @@ import org.silverpeas.core.util.logging.SilverLogger;",
                " import java.util.Collection;",
                "+import java.util.Collections;",
                "-import static org.silverpeas.core.notification.user.UserSubscriptionNotificationSendingHandler",
                "-    .getSubscriptionNotificationUserNoteFromCurrentRequest;",
                "-import static org.silverpeas.core.notification.user.UserSubscriptionNotificationSendingHandler",
                "-    .isSubscriptionNotificationEnabledForCurrentRequest;",
                "+import static org.silverpeas.core.notification.user.UserSubscriptionNotificationSendingHandler.getSubscriptionNotificationUserNoteFromCurrentRequest;",
                "+import static org.silverpeas.core.notification.user.UserSubscriptionNotificationSendingHandler.isSubscriptionNotificationEnabledForCurrentRequest;",
                " import static org.silverpeas.core.util.StringUtil.isDefined;",
                "@@ -76,5 +74,6 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Default constructor",
                "-   * @param title",
                "-   * @param content",
                "+   * Constructs the notification builder and prepares the notification to build with the specified",
                "+   * title and content.",
                "+   * @param title the title of the notification.",
                "+   * @param content the content of the notification.",
                "    */",
                "@@ -87,3 +86,4 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Performs common initializations",
                "+   * Performs common initializations. The {@link UserNotification} object is constructed here by",
                "+   * invoking the {@link #createNotification()} method.",
                "    */",
                "@@ -99,4 +99,5 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Create the user notification container",
                "-   * @return",
                "+   * Creates the user notification. This method is used to construct and initialize a",
                "+   * {@link UserNotification} object in the {@link #build()} method.",
                "+   * @return a {@link UserNotification} object.",
                "    */",
                "@@ -105,4 +106,4 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Gets the type of action on a resource",
                "-   * @return",
                "+   * Gets the type of action on the resource concerned by the notification if any.",
                "+   * @return a value of the {@link NotifAction} enumeration.",
                "    */",
                "@@ -111,4 +112,4 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Gets the component instance id",
                "-   * @return",
                "+   * Gets the component instance identifier.",
                "+   * @return the unique identifier of the component instance concerned by the notification to build.",
                "    */",
                "@@ -117,4 +118,4 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Gets the sender (the user id usually)",
                "-   * @return",
                "+   * Gets the sender (the user identifier usually)",
                "+   * @return the unique identifier of the sender.",
                "    */",
                "@@ -123,4 +124,4 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Gets the notification meta data container",
                "-   * @return",
                "+   * Gets the notification metadata.",
                "+   * @return the metadata about the notification to build.",
                "    */",
                "@@ -131,4 +132,4 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Gets the type of notification message",
                "-   * @return",
                "+   * Gets the type of notification message.",
                "+   * @return a value in the {@link NotifMessageType} enumeration.",
                "    */",
                "@@ -139,4 +140,5 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Forces the sending immediatly if true",
                "-   * @return",
                "+   * Is the notification to build has to be sent immediately? If no, then its sending will be",
                "+   * delayed according to the preferences of the users.",
                "+   * @return true if the notification to build has to be sent immediately.",
                "    */",
                "@@ -147,3 +149,4 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Builds the notification data container",
                "+   * Builds the notification.",
                "+   * @return a {@link UserNotification} object.",
                "    */",
                "@@ -180,2 +183,7 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "+  /**",
                "+   * A collection of user identifiers. All the users in this collection will be notified. This",
                "+   * method requires to be implemented.",
                "+   * @return",
                "+   */",
                "   protected abstract Collection<String> getUserIdsToNotify();",
                "@@ -183,18 +191,29 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Collection of identifiers of users that don't have to be notified ...",
                "-   * @return",
                "+   * Collection of identifiers of users that don't have to be notified. By default, an empty",
                "+   * collection is returned.",
                "+   * @return a collection of identifiers of the users to exclude from the notification.",
                "    */",
                "   protected Collection<String> getUserIdsToExcludeFromNotifying() {",
                "-    return null;",
                "+    return Collections.emptyList();",
                "   }",
                "+  /**",
                "+   * Gets a collection of user group's identifiers. All the users in this collection will be",
                "+   * notified. By default, an empty collection is returned.",
                "+   * @return a collection of user group's identifiers.",
                "+   */",
                "   protected Collection<String> getGroupIdsToNotify() {",
                "-    return null;",
                "+    return Collections.emptyList();",
                "   }",
                "+  /**",
                "+   * Gets a collection of email addresses, each of them corresponding to a person external of",
                "+   * Silverpeas. By default, an empty collection is returned.",
                "+   * @return a collection of email addresses.",
                "+   */",
                "   protected Collection<String> getExternalAddressesToNotify() {",
                "-    return null;",
                "+    return Collections.emptyList();",
                "   }",
                "-  protected final void performUsersToBeNotified() {",
                "+  private void performUsersToBeNotified() {",
                "     final Collection<String> userIdsToNotify = getUserIdsToNotify();",
                "@@ -205,7 +224,5 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "     // Stopping the process if no user to notify",
                "-    if (stopWhenNoUserToNotify() &&",
                "-        CollectionUtil.isEmpty(userIdsToNotify) && CollectionUtil.isEmpty(groupIdsToNotify) &&",
                "-        CollectionUtil.isEmpty(emailsToNotify)) {",
                "-      SilverTrace.warn(\"notification\", \"IUserNotificationBuider.build()\",",
                "-          \"IUserNotificationBuider.EX_NO_USER_OR_GROUP_TO_NOTIFY\");",
                "+    if (stopWhenNoUserToNotify() && CollectionUtil.isEmpty(userIdsToNotify) &&",
                "+        CollectionUtil.isEmpty(groupIdsToNotify) && CollectionUtil.isEmpty(emailsToNotify)) {",
                "+      SilverLogger.getLogger(this).error(\"No user or groups to notify!\");",
                "       stop();",
                "@@ -213,2 +230,26 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "+    addUserRecipients(userIdsToNotify, userIdsToExcludeFromNotifying);",
                "+    addGroupRecipients(groupIdsToNotify);",
                "+    addExternalRecipients(emailsToNotify);",
                "+  }",
                "+",
                "+  private void addExternalRecipients(final Collection<String> emailsToNotify) {",
                "+    if (CollectionUtil.isNotEmpty(emailsToNotify)) {",
                "+      for (String address : emailsToNotify) {",
                "+        getNotificationMetaData().addExternalRecipient(new ExternalRecipient(address));",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  private void addGroupRecipients(final Collection<String> groupIdsToNotify) {",
                "+    if (CollectionUtil.isNotEmpty(groupIdsToNotify)) {",
                "+      // There is at least one group to notify",
                "+      for (final String groupId : groupIdsToNotify) {",
                "+        getNotificationMetaData().addGroupRecipient(new GroupRecipient(groupId));",
                "+      }",
                "+    }",
                "+  }",
                "+",
                "+  private void addUserRecipients(final Collection<String> userIdsToNotify,",
                "+      final Collection<String> userIdsToExcludeFromNotifying) {",
                "     if (CollectionUtil.isNotEmpty(userIdsToNotify)) {",
                "@@ -235,17 +276,10 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "     }",
                "-",
                "-    if (CollectionUtil.isNotEmpty(groupIdsToNotify)) {",
                "-      // There is at least one group to notify",
                "-      for (final String groupId : groupIdsToNotify) {",
                "-        getNotificationMetaData().addGroupRecipient(new GroupRecipient(groupId));",
                "-      }",
                "-    }",
                "-",
                "-    if (CollectionUtil.isNotEmpty(emailsToNotify)) {",
                "-      for (String address : emailsToNotify) {",
                "-        getNotificationMetaData().addExternalRecipient(new ExternalRecipient(address));",
                "-      }",
                "-    }",
                "   }",
                "+  /**",
                "+   * Should the notification treatment be stopped in there is no users to notify? By default true.",
                "+   * This method can be overridden to specify a different or a contextualized answer. In that case,",
                "+   * the recipients setting should be then performed out of the builder.",
                "+   * @return true if no notification has to be done when no recipients are defined.",
                "+   */",
                "   protected boolean stopWhenNoUserToNotify() {",
                "@@ -260,7 +294,8 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Gets the resource locator path",
                "-   * @return",
                "+   * Gets the path of the localization bundle to load. By default, returns the general translations.",
                "+   * For more specific localized text to use in the notification, override this method.",
                "+   * @return the path of the localization bundle.",
                "    */",
                "-  protected String getMultilangPropertyFile() {",
                "-    return null;",
                "+  protected String getLocalizationBundlePath() {",
                "+    return LocalizationBundle.GENERAL_BUNDLE_NAME;",
                "   }",
                "@@ -268,4 +303,6 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Gets the bundle",
                "-   * @return",
                "+   * Gets the localization bundle from which the localized text to use in the notification can",
                "+   * be get.",
                "+   * @return the localization bundle whose the path is provided by the",
                "+   * {@link #getLocalizationBundlePath()} method.",
                "    */",
                "@@ -276,4 +313,6 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Gets the bundle",
                "-   * @return",
                "+   * Gets the localization bundle for the specified locale to use in the building the notification.",
                "+   * @param language the ISO-631 code of a language.",
                "+   * @return the localization bundle whose path is provided by the",
                "+   * {@link #getLocalizationBundlePath()} method.",
                "    */",
                "@@ -281,4 +320,4 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "     LocalizationBundle bundle = null;",
                "-    if (StringUtils.isNotBlank(getMultilangPropertyFile())) {",
                "-      bundle = ResourceLocator.getLocalizationBundle(getMultilangPropertyFile(), language);",
                "+    if (StringUtils.isNotBlank(getLocalizationBundlePath())) {",
                "+      bundle = ResourceLocator.getLocalizationBundle(getLocalizationBundlePath(), language);",
                "     }",
                "@@ -306,3 +345,3 @@ public abstract class AbstractUserNotificationBuilder implements UserNotificatio",
                "   /**",
                "-   * Stopping the treatment",
                "+   * Stops the treatment",
                "    */",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/socialnetwork/invitation/AbstractInvitationUserNotification.java b/core-library/src/main/java/org/silverpeas/core/socialnetwork/invitation/AbstractInvitationUserNotification.java",
                "index 400852b7ed..1342489d63 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/socialnetwork/invitation/AbstractInvitationUserNotification.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/socialnetwork/invitation/AbstractInvitationUserNotification.java",
                "@@ -43,3 +43,3 @@ public abstract class AbstractInvitationUserNotification",
                "   @Override",
                "-  protected String getMultilangPropertyFile() {",
                "+  protected String getLocalizationBundlePath() {",
                "     return \"org.silverpeas.social.multilang.socialNetworkBundle\";",
                "@@ -84,4 +84,4 @@ public abstract class AbstractInvitationUserNotification",
                "   @Override",
                "-  protected String getTitle() {",
                "-    return getBundle()",
                "+  protected String getTitle(final String language) {",
                "+    return getBundle(language)",
                "         .getStringWithParams(getBundleSubjectKey(), User.getById(getSender()).getFirstName());",
                "diff --git a/core-services/comment/src/main/java/org/silverpeas/core/comment/service/CommentUserNotification.java b/core-services/comment/src/main/java/org/silverpeas/core/comment/service/CommentUserNotification.java",
                "index 6117842510..1a3c4276e5 100644",
                "--- a/core-services/comment/src/main/java/org/silverpeas/core/comment/service/CommentUserNotification.java",
                "+++ b/core-services/comment/src/main/java/org/silverpeas/core/comment/service/CommentUserNotification.java",
                "@@ -97,2 +97,4 @@ public class CommentUserNotification",
                "    * comments.",
                "+   * @param language the ISO-631 code of the language. It is here not taken into account. Only the",
                "+   * the locale of the component messages bundle is taken into account.",
                "    * @return the subject of the notification.",
                "@@ -100,3 +102,3 @@ public class CommentUserNotification",
                "   @Override",
                "-  protected String getTitle() {",
                "+  protected String getTitle(final String language) {",
                "     final String subject;",
                "@@ -169,3 +171,3 @@ public class CommentUserNotification",
                "   @Override",
                "-  protected String getMultilangPropertyFile() {",
                "+  protected String getLocalizationBundlePath() {",
                "     return \"org.silverpeas.util.comment.multilang.comment\";",
                "diff --git a/core-services/pdc/src/main/java/org/silverpeas/core/pdc/subscription/service/AbstractPdcSubscriptionUserNotification.java b/core-services/pdc/src/main/java/org/silverpeas/core/pdc/subscription/service/AbstractPdcSubscriptionUserNotification.java",
                "index 283a36975c..096a264beb 100644",
                "--- a/core-services/pdc/src/main/java/org/silverpeas/core/pdc/subscription/service/AbstractPdcSubscriptionUserNotification.java",
                "+++ b/core-services/pdc/src/main/java/org/silverpeas/core/pdc/subscription/service/AbstractPdcSubscriptionUserNotification.java",
                "@@ -47,3 +47,3 @@ public abstract class AbstractPdcSubscriptionUserNotification<T>",
                "   @Override",
                "-  protected String getMultilangPropertyFile() {",
                "+  protected String getLocalizationBundlePath() {",
                "     return \"org.silverpeas.pdcSubscription.multilang.pdcsubscription\";",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java",
                "index 015e3a9082..0d90284ab9 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java",
                "@@ -40,2 +40,4 @@ public class NotificationUserRequestRouter extends ComponentRequestRouter<Notifi",
                "   private static final String EDIT_TARGETS_PARAM = \"editTargets\";",
                "+  private static final String POPIN_MODE_PARAM = \"popinMode\";",
                "+  private static final String COMPONENT_ID = \"componentId\";",
                "@@ -58,6 +60,3 @@ public class NotificationUserRequestRouter extends ComponentRequestRouter<Notifi",
                "   /**",
                "-   * This method has to be implemented by the component request rooter it has to compute a",
                "-   * destination page",
                "-   *",
                "-   *",
                "+   * Compute a destination page.",
                "    * @param function The entering request function (ex : \"Main.jsp\")",
                "@@ -71,12 +70,3 @@ public class NotificationUserRequestRouter extends ComponentRequestRouter<Notifi",
                "       HttpRequest request) {",
                "-    // remarques",
                "-    // tous les param\u00c3\u00a8tres des la jsp sont transfer\u00c3\u00a9 par la request.",
                "-    // le UserPanel \u00c3\u00a9tant unique par session, il est imp\u00c3\u00a9ratif de r\u00c3\u00a9cup\u00c3\u00a9r\u00c3\u00a9r",
                "-    // les objets selectionn\u00c3\u00a9s via userPanel et de transporter",
                "-    // les id des ses de jsp en jsp en soumettant un formulaire.",
                "-    // En effet, la notification peut \u00c3\u00aatre utilis\u00c3\u00a9e \"en m\u00c3\u00aame temps\" que le",
                "-    // client utilises userPanelPeas. Cela m\u00c3\u00a9lange les objets selectionn\u00c3\u00a9e.",
                "     String destination;",
                "-",
                "-",
                "     try {",
                "@@ -87,3 +77,3 @@ public class NotificationUserRequestRouter extends ComponentRequestRouter<Notifi",
                "-        Notification notification = nuSC.resetNotification();",
                "+        final Notification notification;",
                "         if (theTargetsUsers != null || theTargetsGroups != null) {",
                "@@ -91,2 +81,4 @@ public class NotificationUserRequestRouter extends ComponentRequestRouter<Notifi",
                "           notification = nuSC.initTargets(theTargetsUsers, theTargetsGroups);",
                "+        } else {",
                "+          notification = nuSC.resetNotification();",
                "         }",
                "@@ -94,15 +86,21 @@ public class NotificationUserRequestRouter extends ComponentRequestRouter<Notifi",
                "-        boolean popupMode = StringUtil.getBooleanValue(request.getParameter(POPUP_MODE_PARAM));",
                "-        String param = request.getParameter(EDIT_TARGETS_PARAM);",
                "-        boolean editTargets = true;",
                "+        final boolean popupMode = request.getParameterAsBoolean(POPUP_MODE_PARAM);",
                "+        final boolean popinMode = request.getParameterAsBoolean(POPIN_MODE_PARAM);",
                "+        final String instanceId = request.getParameter(COMPONENT_ID);",
                "+        final String param = request.getParameter(EDIT_TARGETS_PARAM);",
                "+        final boolean editTargets;",
                "         if (StringUtil.isDefined(param)) {",
                "           editTargets = StringUtil.getBooleanValue(param);",
                "+        } else {",
                "+          editTargets = true;",
                "         }",
                "         request.setAttribute(POPUP_MODE_PARAM, popupMode);",
                "+        request.setAttribute(POPIN_MODE_PARAM, popinMode);",
                "+        request.setAttribute(COMPONENT_ID, instanceId);",
                "         request.setAttribute(EDIT_TARGETS_PARAM, editTargets);",
                "-",
                "         destination = \"/notificationUser/jsp/notificationSender.jsp\";",
                "       } else if (\"SendNotif\".equals(function)) {",
                "-        Notification notification = request2Notification(request);",
                "+        final Notification notification = request2Notification(request);",
                "         nuSC.sendMessage(notification);",
                "+        nuSC.getAlertUser().resetAll();",
                "         destination = \"/peasCore/jsp/close.jsp\";",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/util/AlertUser.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/util/AlertUser.java",
                "index 25af1f5e0f..3955278ab4 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/util/AlertUser.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/util/AlertUser.java",
                "@@ -35,7 +35,7 @@ public class AlertUser {",
                "-  protected String hostSpaceName;",
                "-  protected String hostComponentId;",
                "-  protected Pair<String, String> hostComponentLabel;",
                "-  protected NotificationMetaData notificationMetaData;",
                "-  protected SelectionUsersGroups extraParams;",
                "+  private String hostSpaceName;",
                "+  private String hostComponentId;",
                "+  private Pair<String, String> hostComponentLabel;",
                "+  private NotificationMetaData notificationMetaData;",
                "+  private SelectionUsersGroups extraParams;",
                "   private List<String> hostPath;",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/sharing/notification/FileSharingUserNotification.java b/core-web/src/main/java/org/silverpeas/core/web/sharing/notification/FileSharingUserNotification.java",
                "index c61f90767e..6936aae86c 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/sharing/notification/FileSharingUserNotification.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/sharing/notification/FileSharingUserNotification.java",
                "@@ -126,3 +126,3 @@ public class FileSharingUserNotification extends AbstractTemplateUserNotificatio",
                "   @Override",
                "-  protected String getMultilangPropertyFile() {",
                "+  protected String getLocalizationBundlePath() {",
                "     return \"org.silverpeas.sharing.multilang.fileSharingBundle\";",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/tools/agenda/notification/AgendaUserNotification.java b/core-web/src/main/java/org/silverpeas/core/web/tools/agenda/notification/AgendaUserNotification.java",
                "index fbc10d2207..5f53539abe 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/tools/agenda/notification/AgendaUserNotification.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/tools/agenda/notification/AgendaUserNotification.java",
                "@@ -291,6 +291,6 @@ public class AgendaUserNotification extends AbstractTemplateUserNotificationBuil",
                "    * @see",
                "-   * com.silverpeas.notification.builder.AbstractUserNotificationBuilder#getMultilangPropertyFile()",
                "+   * com.silverpeas.notification.builder.AbstractUserNotificationBuilder#getLocalizationBundlePath()",
                "    */",
                "   @Override",
                "-  protected String getMultilangPropertyFile() {",
                "+  protected String getLocalizationBundlePath() {",
                "     return \"org.silverpeas.agenda.multilang.agenda\";"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/calendar/notification/user/AbstractCalendarEventUserNotificationBuilder.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/datereminder/PublicationDateReminderUserNotification.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/SimpleUserNotification.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractContributionTemplateUserNotificationBuilder.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractTemplateUserNotificationBuilder.java",
                "core-library/src/main/java/org/silverpeas/core/notification/user/builder/AbstractUserNotificationBuilder.java",
                "core-library/src/main/java/org/silverpeas/core/socialnetwork/invitation/AbstractInvitationUserNotification.java",
                "core-services/comment/src/main/java/org/silverpeas/core/comment/service/CommentUserNotification.java",
                "core-services/pdc/src/main/java/org/silverpeas/core/pdc/subscription/service/AbstractPdcSubscriptionUserNotification.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/servlets/NotificationUserRequestRouter.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/util/AlertUser.java",
                "core-web/src/main/java/org/silverpeas/core/web/sharing/notification/FileSharingUserNotification.java",
                "core-web/src/main/java/org/silverpeas/core/web/tools/agenda/notification/AgendaUserNotification.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9884": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, file, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9884",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "729e335efb5fdcf59a01be46dc963b9ebbfa8f33",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1544210220,
            "hunks": 7,
            "message": "closing feature #10257",
            "diff": [
                "diff --git a/core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcSearchRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcSearchRequestRouter.java",
                "index 79aeb4c51e..494b0fdc15 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcSearchRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcSearchRequestRouter.java",
                "@@ -57,2 +57,3 @@ import java.util.ArrayList;",
                " import java.util.Arrays;",
                "+import java.util.Enumeration;",
                " import java.util.Iterator;",
                "@@ -235,4 +236,29 @@ public class PdcSearchRequestRouter extends ComponentRequestRouter<PdcSearchSess",
                "         destination = doGlobalView(pdcSC, request);",
                "+      } else if (\"XMLDirectSearch\".equals(function)) {",
                "+        pdcSC.clearSearchParameters(true);",
                "+        String templateFileName = request.getParameter(\"xmlSearchSelectedForm\");",
                "+",
                "+        String templateName = templateFileName.substring(0, templateFileName.lastIndexOf(\".\"));",
                "+",
                "+        // build query",
                "+        String fieldParamPrefix = \"field_\";",
                "+        Enumeration<String> paramNames = request.getParameterNames();",
                "+        while (paramNames.hasMoreElements()) {",
                "+          final String paramName = paramNames.nextElement();",
                "+          if (paramName.startsWith(fieldParamPrefix)) {",
                "+            String fieldQuery = request.getParameter(paramName);",
                "+            String fieldName = paramName.substring(fieldParamPrefix.length());",
                "+            pdcSC.getQueryParameters().addXmlSubQuery(templateName + \"$$\" + fieldName, fieldQuery);",
                "+          }",
                "+        }",
                "+",
                "+        // launch the search",
                "+        pdcSC.search(null, false);",
                "+        pdcSC.setSearchScope(PdcSearchSessionController.SEARCH_XML);",
                "+        setDefaultDataToNavigation(request, pdcSC);",
                "+",
                "+        destination = \"/pdcPeas/jsp/globalResult.jsp\";",
                "       } else if (\"XMLSearch\".equals(function)) {",
                "         pdcSC.getQueryParameters().clearXmlQuery();",
                "+        pdcSC.getQueryParameters().clear();",
                "@@ -243,3 +269,10 @@ public class PdcSearchRequestRouter extends ComponentRequestRouter<PdcSearchSess",
                "-        PublicationTemplateImpl template = pdcSC.getXmlTemplate();",
                "+        PublicationTemplateImpl template;",
                "+        String templateFileName = request.getParameter(\"xmlSearchSelectedForm\");",
                "+        if (StringUtil.isDefined(templateFileName)) {",
                "+          template = pdcSC.setXmlTemplate(templateFileName);",
                "+        } else {",
                "+          template = pdcSC.getXmlTemplate();",
                "+          templateFileName = template.getFileName();",
                "+        }",
                "@@ -259,3 +292,2 @@ public class PdcSearchRequestRouter extends ComponentRequestRouter<PdcSearchSess",
                "         // build the xmlSubQuery according to the dataRecord object",
                "-        String templateFileName = template.getFileName();",
                "         String templateName = templateFileName.substring(0, templateFileName.lastIndexOf(\".\"));",
                "@@ -274,5 +306,3 @@ public class PdcSearchRequestRouter extends ComponentRequestRouter<PdcSearchSess",
                "         pdcSC.search(null, isOnlyInPdcSearch(request));",
                "-",
                "         pdcSC.setSearchScope(PdcSearchSessionController.SEARCH_XML);",
                "-",
                "         setDefaultDataToNavigation(request, pdcSC);"
            ],
            "changed_files": [
                "core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcSearchRequestRouter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10257": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10257",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "50a78314dbd76c0d72f664585f896fd5de458fce",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1542377008,
            "hunks": 33,
            "message": "fixing bug #10206 by adding XML namespace",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/content/form/XMLField.java b/core-library/src/main/java/org/silverpeas/core/contribution/content/form/XMLField.java",
                "index a6c1f0dada..9f7e2a7a50 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/content/form/XMLField.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/content/form/XMLField.java",
                "@@ -34,3 +34,3 @@ import java.io.Serializable;",
                "  */",
                "-@XmlRootElement(name = \"xmlField\")",
                "+@XmlRootElement(name = \"xmlField\", namespace = \"http://www.silverpeas.org/exchange\")",
                " @XmlAccessorType(XmlAccessType.NONE)",
                "@@ -39,5 +39,5 @@ public class XMLField implements Serializable {",
                "   private static final long serialVersionUID = -825307243077524947L;",
                "-  @XmlElement(name = \"name\")",
                "+  @XmlElement(name = \"name\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private String name;",
                "-  @XmlElement(name = \"value\")",
                "+  @XmlElement(name = \"value\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private String value;",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/PublicationDetail.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/PublicationDetail.java",
                "index 8d9dcc31ac..f9ecc36e68 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/PublicationDetail.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/PublicationDetail.java",
                "@@ -99,3 +99,3 @@ import static org.silverpeas.core.util.StringUtil.split;",
                "  */",
                "-@XmlRootElement",
                "+@XmlRootElement(namespace = \"http://www.silverpeas.org/exchange\")",
                " @XmlAccessorType(XmlAccessType.NONE)",
                "@@ -108,23 +108,23 @@ public class PublicationDetail extends AbstractI18NBean<PublicationI18N>",
                "   private String infoId;",
                "-  @XmlElement(name = \"creationDate\")",
                "+  @XmlElement(name = \"creationDate\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   @XmlJavaTypeAdapter(DateAdapter.class)",
                "   private Date creationDate;",
                "-  @XmlElement(name = \"beginDate\")",
                "+  @XmlElement(name = \"beginDate\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   @XmlJavaTypeAdapter(DateAdapter.class)",
                "   private Date beginDate;",
                "-  @XmlElement(name = \"endDate\")",
                "+  @XmlElement(name = \"endDate\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   @XmlJavaTypeAdapter(DateAdapter.class)",
                "   private Date endDate;",
                "-  @XmlElement(name = \"creatorId\")",
                "+  @XmlElement(name = \"creatorId\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private String creatorId;",
                "-  @XmlElement(name = \"creatorName\")",
                "+  @XmlElement(name = \"creatorName\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private String creatorName;",
                "-  @XmlElement(name = \"importance\")",
                "+  @XmlElement(name = \"importance\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private int importance;",
                "-  @XmlElement(name = \"version\")",
                "+  @XmlElement(name = \"version\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private String version;",
                "-  @XmlElement(name = \"keywords\")",
                "+  @XmlElement(name = \"keywords\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private String keywords;",
                "   private String content;",
                "-  @XmlElement(name = \"status\")",
                "+  @XmlElement(name = \"status\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private String status;",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/i18n/AbstractI18NBean.java b/core-library/src/main/java/org/silverpeas/core/i18n/AbstractI18NBean.java",
                "index 2c11254e3e..0ee0aa057b 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/i18n/AbstractI18NBean.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/i18n/AbstractI18NBean.java",
                "@@ -43,3 +43,3 @@ public abstract class AbstractI18NBean<T extends BeanTranslation>",
                "   /* Name of the bean */",
                "-  @XmlElement",
                "+  @XmlElement(namespace = \"http://www.silverpeas.org/exchange\")",
                "   private String name = \"\";",
                "@@ -47,3 +47,3 @@ public abstract class AbstractI18NBean<T extends BeanTranslation>",
                "   /* Description of the bean */",
                "-  @XmlElement",
                "+  @XmlElement(namespace = \"http://www.silverpeas.org/exchange\")",
                "   private String description = \"\";",
                "diff --git a/core-services/importExport/src/main/java/org/silverpeas/core/importexport/form/XMLModelContentType.java b/core-services/importExport/src/main/java/org/silverpeas/core/importexport/form/XMLModelContentType.java",
                "index 4dd4ed62cd..50cd1fcfb1 100644",
                "--- a/core-services/importExport/src/main/java/org/silverpeas/core/importexport/form/XMLModelContentType.java",
                "+++ b/core-services/importExport/src/main/java/org/silverpeas/core/importexport/form/XMLModelContentType.java",
                "@@ -38,3 +38,3 @@ import java.util.List;",
                "  */",
                "-@XmlRootElement(name = \"xmlModel\")",
                "+@XmlRootElement(name = \"xmlModel\", namespace = \"http://www.silverpeas.org/exchange\")",
                " @XmlAccessorType(XmlAccessType.NONE)",
                "@@ -44,3 +44,3 @@ public class XMLModelContentType {",
                "   private String name;",
                "-  @XmlElement(name = \"xmlField\")",
                "+  @XmlElement(name = \"xmlField\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private List<XMLField> fields;",
                "diff --git a/core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/PublicationType.java b/core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/PublicationType.java",
                "index 7aaee705da..0677b86aef 100644",
                "--- a/core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/PublicationType.java",
                "+++ b/core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/PublicationType.java",
                "@@ -49,16 +49,16 @@ public class PublicationType {",
                "   private String componentId;",
                "-  @XmlElement(name = \"publicationHeader\")",
                "+  @XmlElement(name = \"publicationHeader\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private PublicationDetail publicationDetail;",
                "-  @XmlElement(name = \"publicationContent\")",
                "+  @XmlElement(name = \"publicationContent\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private PublicationContentType publicationContentType;",
                "-  @XmlElementWrapper(name = \"attachments\")",
                "+  @XmlElementWrapper(name = \"attachments\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   @XmlElement(name = \"attachment\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private List<AttachmentDetail> attachmentsType;",
                "-  @XmlElementWrapper(name = \"documents\")",
                "+  @XmlElementWrapper(name = \"documents\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   @XmlElement(name = \"document\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private List<Document> documentsType;",
                "-  @XmlElementWrapper(name = \"topicPositions\")",
                "+  @XmlElementWrapper(name = \"topicPositions\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   @XmlElement(name = \"topicPosition\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private List<NodePositionType> nodePositionsType;",
                "-  @XmlElementWrapper(name = \"pdcPositions\")",
                "+  @XmlElementWrapper(name = \"pdcPositions\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   @XmlElement(name = \"pdcPosition\", namespace = \"http://www.silverpeas.org/exchange\")",
                "diff --git a/core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/RepositoryType.java b/core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/RepositoryType.java",
                "index 569a756fd2..fb0c73ee77 100644",
                "--- a/core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/RepositoryType.java",
                "+++ b/core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/RepositoryType.java",
                "@@ -40,3 +40,3 @@ import javax.xml.bind.annotation.XmlRootElement;",
                "  */",
                "-@XmlRootElement",
                "+@XmlRootElement(namespace = \"http://www.silverpeas.org/exchange\")",
                " @XmlAccessorType(XmlAccessType.NONE)",
                "diff --git a/core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/SilverPeasExchangeType.java b/core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/SilverPeasExchangeType.java",
                "index 58c0f26d12..b04f1ce285 100644",
                "--- a/core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/SilverPeasExchangeType.java",
                "+++ b/core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/SilverPeasExchangeType.java",
                "@@ -53,16 +53,16 @@ public class SilverPeasExchangeType {",
                "   private boolean usePOI = true;",
                "-  @XmlElementWrapper(name = \"publications\")",
                "+  @XmlElementWrapper(name = \"publications\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   @XmlElement(name = \"publication\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private List<PublicationType> publicationsType;",
                "-  @XmlElementWrapper(name = \"repositories\")",
                "-  @XmlElement(name = \"repository\")",
                "+  @XmlElementWrapper(name = \"repositories\", namespace = \"http://www.silverpeas.org/exchange\")",
                "+  @XmlElement(name = \"repository\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private List<RepositoryType> repositoriesType;",
                "-  @XmlElementWrapper(name = \"topicTrees\")",
                "-  @XmlElement(name = \"topicTree\")",
                "+  @XmlElementWrapper(name = \"topicTrees\", namespace = \"http://www.silverpeas.org/exchange\")",
                "+  @XmlElement(name = \"topicTree\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private List<NodeTreeType> nodeTreesType;",
                "-  @XmlElementWrapper(name = \"pdc\")",
                "-  @XmlElement(name = \"axis\")",
                "+  @XmlElementWrapper(name = \"pdc\", namespace = \"http://www.silverpeas.org/exchange\")",
                "+  @XmlElement(name = \"axis\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private List<AxisType> pdcType;",
                "-  @XmlElementWrapper(name = \"components\")",
                "-  @XmlElement(name = \"component\")",
                "+  @XmlElementWrapper(name = \"components\", namespace = \"http://www.silverpeas.org/exchange\")",
                "+  @XmlElement(name = \"component\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private List<ComponentInst> componentsType;",
                "diff --git a/core-services/importExport/src/main/java/org/silverpeas/core/importexport/publication/PublicationContentType.java b/core-services/importExport/src/main/java/org/silverpeas/core/importexport/publication/PublicationContentType.java",
                "index 55c320ae51..590ebe1316 100644",
                "--- a/core-services/importExport/src/main/java/org/silverpeas/core/importexport/publication/PublicationContentType.java",
                "+++ b/core-services/importExport/src/main/java/org/silverpeas/core/importexport/publication/PublicationContentType.java",
                "@@ -36,3 +36,3 @@ import javax.xml.bind.annotation.XmlRootElement;",
                "  */",
                "-@XmlRootElement(name = \"publicationContent\")",
                "+@XmlRootElement(name = \"publicationContent\", namespace = \"http://www.silverpeas.org/exchange\")",
                " @XmlAccessorType(XmlAccessType.NONE)",
                "@@ -40,5 +40,5 @@ public class PublicationContentType {",
                "-  @XmlElement(name = \"wysiwyg\")",
                "+  @XmlElement(name = \"wysiwyg\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private WysiwygContentType wysiwygContentType;",
                "-  @XmlElement(name = \"xmlModel\")",
                "+  @XmlElement(name = \"xmlModel\", namespace = \"http://www.silverpeas.org/exchange\")",
                "   private XMLModelContentType xmlModelContentType;",
                "diff --git a/core-services/importExport/src/main/java/org/silverpeas/core/importexport/wysiwyg/WysiwygContentType.java b/core-services/importExport/src/main/java/org/silverpeas/core/importexport/wysiwyg/WysiwygContentType.java",
                "index 8697fa186d..baba39503a 100644",
                "--- a/core-services/importExport/src/main/java/org/silverpeas/core/importexport/wysiwyg/WysiwygContentType.java",
                "+++ b/core-services/importExport/src/main/java/org/silverpeas/core/importexport/wysiwyg/WysiwygContentType.java",
                "@@ -37,3 +37,3 @@ import javax.xml.bind.annotation.XmlRootElement;",
                "  */",
                "-@XmlRootElement(name = \"wysiwyg\")",
                "+@XmlRootElement(name = \"wysiwyg\", namespace = \"http://www.silverpeas.org/exchange\")",
                " @XmlAccessorType(XmlAccessType.NONE)"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/contribution/content/form/XMLField.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/model/PublicationDetail.java",
                "core-library/src/main/java/org/silverpeas/core/i18n/AbstractI18NBean.java",
                "core-services/importExport/src/main/java/org/silverpeas/core/importexport/form/XMLModelContentType.java",
                "core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/PublicationType.java",
                "core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/RepositoryType.java",
                "core-services/importExport/src/main/java/org/silverpeas/core/importexport/model/SilverPeasExchangeType.java",
                "core-services/importExport/src/main/java/org/silverpeas/core/importexport/publication/PublicationContentType.java",
                "core-services/importExport/src/main/java/org/silverpeas/core/importexport/wysiwyg/WysiwygContentType.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10206": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10206",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1088fdf6f67e5167327163c9741e2611b9143a05",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1547817070,
            "hunks": 8,
            "message": "modifying operations CSS class to CSS id",
            "diff": [
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPane.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPane.java",
                "index 30b41e1253..6c4552a8ca 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPane.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPane.java",
                "@@ -78,6 +78,6 @@ public interface OperationPane extends SimpleGraphicElement {",
                "    * @param action",
                "-   * @param classes",
                "+   * @param id allows to easily identify operation",
                "    *",
                "    */",
                "-  public abstract void addOperation(String iconPath, String label, String action, String classes);",
                "+  public abstract void addOperation(String iconPath, String label, String action, String id);",
                "@@ -85,3 +85,3 @@ public interface OperationPane extends SimpleGraphicElement {",
                "-  public void addOperationOfCreation(String iconPath, String label, String action, String classes);",
                "+  public void addOperationOfCreation(String iconPath, String label, String action, String id);",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java",
                "index e0e1506eb0..832ada476e 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.web.util.viewgenerator.html.operationpanes;",
                "+import org.apache.ecs.html.LI;",
                " import org.silverpeas.core.util.WebEncodeHelper;",
                "@@ -45,5 +46,3 @@ public class OperationPaneSilverpeasV5Web20 extends AbstractOperationPane {",
                "   public void addOperation(final String iconPath, final String label, final String action,",
                "-      final String classes) {",
                "-    StringBuilder operation = new StringBuilder();",
                "-",
                "+      final String id) {",
                "     String operationLabel = label;",
                "@@ -53,13 +52,12 @@ public class OperationPaneSilverpeasV5Web20 extends AbstractOperationPane {",
                "-    String operationClasses = \"yuimenuitemlabel\";",
                "-    if (StringUtil.isDefined(classes)) {",
                "-      operationClasses += \" \" + classes.trim();",
                "+    LI li = new LI();",
                "+    li.setClass(\"yuimenuitem\");",
                "+    if (StringUtil.isDefined(id)) {",
                "+      li.setID(id);",
                "     }",
                "-",
                "     String href = TagUtil.formatHrefFromAction(action);",
                "-    operation.append(\"<li class=\\\"yuimenuitem\\\"><a class=\\\"\").append(operationClasses)",
                "-        .append(\"\\\" \").append(href).append(\">\").append(operationLabel)",
                "-        .append(\"</a></li>\");",
                "+    String a = \"<a class=\\\"yuimenuitemlabel\\\" \"+href+\">\"+operationLabel+\"</a></li>\";",
                "+    li.addElement(a);",
                "-    getStack().add(operation.toString());",
                "+    getStack().add(li.toString());",
                "   }"
            ],
            "changed_files": [
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPane.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "3730332ef13d77b7d9fdc3d0673046cadcaf2c22",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1548247736,
            "hunks": 6,
            "message": "Making the position of the drop down menu rightly displayed in any case.",
            "diff": [
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java",
                "index 832ada476e..5c7720b913 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java",
                "@@ -26,4 +26,4 @@ package org.silverpeas.core.web.util.viewgenerator.html.operationpanes;",
                " import org.apache.ecs.html.LI;",
                "-import org.silverpeas.core.util.WebEncodeHelper;",
                " import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.util.WebEncodeHelper;",
                " import org.silverpeas.core.web.util.viewgenerator.html.TagUtil;",
                "@@ -34,3 +34,3 @@ public class OperationPaneSilverpeasV5Web20 extends AbstractOperationPane {",
                "-  private final static String line = \"</ul>\\n<ul>\";",
                "+  private static final String LINE = \"</ul>\\n<ul>\";",
                "@@ -76,3 +76,3 @@ public class OperationPaneSilverpeasV5Web20 extends AbstractOperationPane {",
                "   public void addLine() {",
                "-    getStack().add(line);",
                "+    getStack().add(LINE);",
                "   }",
                "@@ -101,3 +101,3 @@ public class OperationPaneSilverpeasV5Web20 extends AbstractOperationPane {",
                "     String lastElement = stack.lastElement();",
                "-    if (lastElement.equals(line)) {",
                "+    if (lastElement.equals(LINE)) {",
                "       stack.removeElementAt(stack.size() - 1);",
                "@@ -169,2 +169,14 @@ public class OperationPaneSilverpeasV5Web20 extends AbstractOperationPane {",
                "+    // Adjusting the position of the drop down menu in order to be rightly displayed in any case",
                "+    result.append(\"var __setDropDownMenuPosition = function() {\");",
                "+    result.append(\"var $menu = document.querySelector('#whatNextMenu');\");",
                "+    result.append(\"var menuWidth = $menu.offsetWidth;\");",
                "+    result.append(\"var $dropDownMenu = oMenu.element;\");",
                "+    result.append(\"var dropDownMenuWidth = $dropDownMenu.offsetWidth;\");",
                "+    result.append(\"var left = menuWidth - dropDownMenuWidth;\");",
                "+    result.append(\"$dropDownMenu.style.left = left + 'px';\");",
                "+    result.append(\"};\");",
                "+    result.append(\"oMenu.subscribe('show', __setDropDownMenuPosition);\");",
                "+    result.append(\"__setDropDownMenuPosition();\");",
                "+",
                "     // Once the menu is rendered this below event is triggered"
            ],
            "changed_files": [
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "96491baf597f21dca71cce916b1aec1a99cf032d",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1542907375,
            "hunks": 86,
            "message": "Making optimizations in order to increase performances about the last visitor feature.",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/persistence/datasource/repository/PaginationCriterion.java b/core-api/src/main/java/org/silverpeas/core/persistence/datasource/repository/PaginationCriterion.java",
                "index 7c5da81ad2..2f9e05dde3 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/persistence/datasource/repository/PaginationCriterion.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/persistence/datasource/repository/PaginationCriterion.java",
                "@@ -40,2 +40,3 @@ public class PaginationCriterion {",
                "   private final int itemCount;",
                "+  private boolean originalSizeRequired = true;",
                "@@ -52,2 +53,12 @@ public class PaginationCriterion {",
                "+  /**",
                "+   * Indicates if the original size of rresult mus be computed or not.",
                "+   * @param originalSizeRequired true to compute, false otherwise.",
                "+   * @return itself.",
                "+   */",
                "+  public PaginationCriterion setOriginalSizeRequired(boolean originalSizeRequired) {",
                "+    this.originalSizeRequired = originalSizeRequired;",
                "+    return this;",
                "+  }",
                "+",
                "   /**",
                "@@ -68,2 +79,10 @@ public class PaginationCriterion {",
                "+  /**",
                "+   * Is the original result size required?",
                "+   * @return true if required, false otherwise.",
                "+   */",
                "+  public boolean isOriginalSizeNeeded() {",
                "+    return originalSizeRequired;",
                "+  }",
                "+",
                "   /**",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java",
                "index a8698a99a7..ae49a37533 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java",
                "@@ -347,2 +347,16 @@ public class JdbcSqlQuery {",
                "+  /**",
                "+   * Group the result of the query by the specified columns. If the statement isn't defined,",
                "+   * then no group by will be done.",
                "+   * @param sqlPart the SQL part that contains the statement over which the result of the query",
                "+   * should be grouped.",
                "+   * @return the instance of {@link JdbcSqlQuery} that represents the SQL query.",
                "+   */",
                "+  public JdbcSqlQuery groupBy(String sqlPart) {",
                "+    if (StringUtil.isDefined(sqlPart)) {",
                "+      return addSqlPart(\"GROUP BY \" + sqlPart);",
                "+    }",
                "+    return this;",
                "+  }",
                "+",
                "   /**",
                "@@ -377,13 +391,2 @@ public class JdbcSqlQuery {",
                "   public JdbcSqlQuery withPagination(PaginationCriterion pagination) {",
                "-    return withPagination(pagination, true);",
                "-  }",
                "-",
                "-  /**",
                "-   * Configures the query execution in order to retrieve only items of pagination.<br>",
                "-   * Be careful to execute a SQL query containing an {@code ORDER BY} clause!!!",
                "-   * @param pagination the pagination criterion to apply.",
                "-   * @param needRealOriginalSize true to obtain the real original mas size.",
                "-   * @return the instance of {@link JdbcSqlQuery} that represents the SQL query.",
                "-   */",
                "-  public JdbcSqlQuery withPagination(PaginationCriterion pagination, boolean needRealOriginalSize) {",
                "     if (pagination != null && pagination.isDefined()) {",
                "@@ -391,3 +394,3 @@ public class JdbcSqlQuery {",
                "       limit(pagination.getItemCount());",
                "-      if (!needRealOriginalSize) {",
                "+      if (!pagination.isOriginalSizeNeeded()) {",
                "         this.configuration.ignoreRealOriginalSize();",
                "@@ -428,2 +431,3 @@ public class JdbcSqlQuery {",
                "    * Centralization in order to build easily a SQL in clause.",
                "+   * <p>If one element exists into list, an equality is performed instead of a in</p>",
                "    * @param parameters the parameters to append to the given SQL query.",
                "@@ -436,4 +440,8 @@ public class JdbcSqlQuery {",
                "     }",
                "-    sqlQuery.append(IN_OPERATOR);",
                "-    addListOfParameters(parameters, true);",
                "+    if (parameters.size() == 1) {",
                "+      addSqlPart(\"= ?\", parameters);",
                "+    } else {",
                "+      sqlQuery.append(IN_OPERATOR);",
                "+      addListOfParameters(parameters, true);",
                "+    }",
                "     return this;",
                "@@ -443,2 +451,3 @@ public class JdbcSqlQuery {",
                "    * Centralization in order to build easily a SQL in clause.",
                "+   * <p>If one element exists into list, an equality is performed instead of a in</p>",
                "    * @param parameters the parameters to append to the given SQL query.",
                "@@ -451,4 +460,8 @@ public class JdbcSqlQuery {",
                "     }",
                "-    sqlQuery.append(IN_OPERATOR);",
                "-    addListOfParameters(Arrays.asList(parameters), true);",
                "+    if (parameters.length == 1) {",
                "+      addSqlPart(\"= ?\", parameters);",
                "+    } else {",
                "+      sqlQuery.append(IN_OPERATOR);",
                "+      addListOfParameters(Arrays.asList(parameters), true);",
                "+    }",
                "     return this;",
                "@@ -458,2 +471,3 @@ public class JdbcSqlQuery {",
                "    * Centralization in order to build easily a SQL in clause.",
                "+   * <p>If one element exists into list, a non equality is performed instead of a not in</p>",
                "    * @param parameters the parameters to append to the given SQL query.",
                "@@ -466,4 +480,8 @@ public class JdbcSqlQuery {",
                "     }",
                "-    sqlQuery.append(NOT_IN_OPERATOR);",
                "-    addListOfParameters(parameters, true);",
                "+    if (parameters.size() == 1) {",
                "+      addSqlPart(\"<> ?\", parameters);",
                "+    } else {",
                "+      sqlQuery.append(NOT_IN_OPERATOR);",
                "+      addListOfParameters(parameters, true);",
                "+    }",
                "     return this;",
                "@@ -473,2 +491,3 @@ public class JdbcSqlQuery {",
                "    * Centralization in order to build easily a SQL in clause.",
                "+   * <p>If one element exists into list, a non equality is performed instead of a not in</p>",
                "    * @param parameters the parameters to append to the given SQL query.",
                "@@ -481,4 +500,8 @@ public class JdbcSqlQuery {",
                "     }",
                "-    sqlQuery.append(NOT_IN_OPERATOR);",
                "-    addListOfParameters(Arrays.asList(parameters), true);",
                "+    if (parameters.length == 1) {",
                "+      addSqlPart(\"<> ?\", parameters);",
                "+    } else {",
                "+      sqlQuery.append(NOT_IN_OPERATOR);",
                "+      addListOfParameters(Arrays.asList(parameters), true);",
                "+    }",
                "     return this;",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/PaginationPage.java b/core-library/src/main/java/org/silverpeas/core/admin/PaginationPage.java",
                "index 71c9edf683..8427e9c41f 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/PaginationPage.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/PaginationPage.java",
                "@@ -44,2 +44,3 @@ public class PaginationPage {",
                "   private final int count;",
                "+  private boolean originalSizeRequired = true;",
                "@@ -55,2 +56,12 @@ public class PaginationPage {",
                "+  /**",
                "+   * Indicates that the caller does not require to use {@link SilverpeasList#originalListSize()}",
                "+   * method, so the original size of a result is not necessary.",
                "+   * @return itself.",
                "+   */",
                "+  public PaginationPage originalSizeIsNotRequired() {",
                "+    this.originalSizeRequired = false;",
                "+    return this;",
                "+  }",
                "+",
                "   /**",
                "@@ -77,3 +88,4 @@ public class PaginationPage {",
                "   public PaginationCriterion asCriterion() {",
                "-    return new PaginationCriterion(getPageNumber(), getPageSize());",
                "+    return new PaginationCriterion(getPageNumber(), getPageSize())",
                "+        .setOriginalSizeRequired(originalSizeRequired);",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "index 5c82983594..f4c535065a 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "@@ -1065,3 +1065,3 @@ public class PublicationDAO {",
                "           .orderBy(\"P.pubUpdateDate desc, P.pubId desc\")",
                "-          .withPagination(pagination, false)",
                "+          .withPagination(pagination)",
                "           .executeWith(con, r -> new PublicationPK(r.getString(1), r.getString(2)));",
                "@@ -1644,3 +1644,3 @@ public class PublicationDAO {",
                "       String userId, Date begin, Date end) throws SQLException {",
                "-  final PaginationCriterion pagination = new PaginationCriterion(1, 500);",
                "+  final PaginationCriterion pagination = new PaginationCriterion(1, 500).setOriginalSizeRequired(false);",
                "   final Map<String, List<Boolean>> statusMapping = new HashMap<>(pagination.getItemCount());",
                "@@ -1661,3 +1661,3 @@ public class PublicationDAO {",
                "       .orderBy(\"dateinformation DESC, pubid DESC, type\")",
                "-      .withPagination(pagination, false)",
                "+      .withPagination(pagination)",
                "       .executeWith(con, r -> {",
                "@@ -1699,3 +1699,3 @@ public class PublicationDAO {",
                "       throws SQLException {",
                "-    final PaginationCriterion pagination = new PaginationCriterion(1, 500);",
                "+    final PaginationCriterion pagination = new PaginationCriterion(1, 500).setOriginalSizeRequired(false);",
                "     final Map<String, List<Boolean>> statusMapping = new HashMap<>(pagination.getItemCount());",
                "@@ -1718,3 +1718,3 @@ public class PublicationDAO {",
                "         .orderBy(\"dateinformation DESC, pubid DESC, type\")",
                "-        .withPagination(pagination, false)",
                "+        .withPagination(pagination)",
                "         .executeWith(con, r -> {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/util/Pagination.java b/core-library/src/main/java/org/silverpeas/core/util/Pagination.java",
                "index c1e44a8fca..c5d2e28f37 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/util/Pagination.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/util/Pagination.java",
                "@@ -38,2 +38,3 @@ public class Pagination<T, R extends SilverpeasList<T>> {",
                "   private Function<R, R> filter;",
                "+  private int minPerPage = 0;",
                "   private int factor = 5;",
                "@@ -55,2 +56,12 @@ public class Pagination<T, R extends SilverpeasList<T>> {",
                "+  /**",
                "+   * The minimum of data per page retrieved from a paginated datasource call.",
                "+   * @param minPerPage a minimum per page.",
                "+   * @return the process instance itself.",
                "+   */",
                "+  public Pagination<T, R> withMinPerPage(final int minPerPage) {",
                "+    this.minPerPage = minPerPage;",
                "+    return this;",
                "+  }",
                "+",
                "   /**",
                "@@ -88,4 +99,7 @@ public class Pagination<T, R extends SilverpeasList<T>> {",
                "     }",
                "+    if (minPerPage < 0) {",
                "+      throw new IllegalArgumentException(\"minPerPage must be positive or equal to zero\");",
                "+    }",
                "     PaginationPage currentPagination = new PaginationPage(pagination.getPageNumber(),",
                "-        pagination.getPageSize() * factor);",
                "+        Math.max(pagination.getPageSize() * factor, minPerPage));",
                "     R result = null;",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/dao/HistoryObjectDAO.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/dao/HistoryObjectDAO.java",
                "index 65674c6831..3f0a31ba24 100644",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/dao/HistoryObjectDAO.java",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/dao/HistoryObjectDAO.java",
                "@@ -28,2 +28,5 @@ import org.silverpeas.core.WAPrimaryKey;",
                " import org.silverpeas.core.persistence.jdbc.DBUtil;",
                "+import org.silverpeas.core.persistence.jdbc.sql.JdbcSqlQuery;",
                "+import org.silverpeas.core.silverstatistics.access.model.HistoryByUser;",
                "+import org.silverpeas.core.silverstatistics.access.model.HistoryCriteria;",
                " import org.silverpeas.core.silverstatistics.access.model.HistoryObjectDetail;",
                "@@ -33,2 +36,3 @@ import org.silverpeas.core.util.CollectionUtil;",
                " import org.silverpeas.core.util.DateUtil;",
                "+import org.silverpeas.core.util.SilverpeasList;",
                " import org.silverpeas.core.util.StringUtil;",
                "@@ -46,2 +50,5 @@ import java.util.List;",
                " import java.util.Set;",
                "+import java.util.stream.Collectors;",
                "+",
                "+import static org.silverpeas.core.util.StringUtil.isDefined;",
                "@@ -50,2 +57,3 @@ public class HistoryObjectDAO {",
                "   private static final String HISTORY_TABLE_NAME = \"SB_Statistic_History\";",
                "+  private static final String USER_ID = \"userId\";",
                "@@ -77,32 +85,33 @@ public class HistoryObjectDAO {",
                "-  /**",
                "-   * @param rs",
                "-   * @param componentName",
                "-   * @return",
                "-   * @throws SQLException",
                "-   */",
                "-  private static Collection<HistoryObjectDetail> getHistoryDetails(ResultSet rs,",
                "-      String componentName) throws SQLException {",
                "-    List<HistoryObjectDetail> list = new ArrayList<>();",
                "+  private static HistoryByUser getHistoryByUser(final ResultSet rs) throws SQLException {",
                "+    String userId = rs.getString(1);",
                "     Date date;",
                "-    String userId;",
                "-    String foreignId;",
                "-",
                "-    while (rs.next()) {",
                "-      try {",
                "-        // First the date of the day is parsed",
                "-        date = DateUtil.parse(rs.getString(1));",
                "-        // Then the hour is set",
                "-        date = DateUtil.getDate(date, rs.getString(2));",
                "-      } catch (java.text.ParseException e) {",
                "-        throw new StatisticRuntimeException(e);",
                "-      }",
                "-      userId = rs.getString(3);",
                "-      foreignId = rs.getString(4);",
                "-      ResourceReference resourceReference = new ResourceReference(foreignId, componentName);",
                "-      HistoryObjectDetail detail = new HistoryObjectDetail(date, userId, resourceReference);",
                "+    try {",
                "+      // First the date of the day is parsed",
                "+      final String[] dateTime = rs.getString(2).split(\"T\");",
                "+      date = DateUtil.parse(dateTime[0]);",
                "+      // Then the hour is set",
                "+      date = DateUtil.getDate(date, dateTime[1]);",
                "+    } catch (java.text.ParseException e) {",
                "+      throw new StatisticRuntimeException(e);",
                "+    }",
                "+    int nbAccess = rs.getInt(3);",
                "+    return new HistoryByUser(userId, date, nbAccess);",
                "+  }",
                "-      list.add(detail);",
                "+  private static HistoryObjectDetail getHistoryDetail(final ResultSet rs) throws SQLException {",
                "+    Date date;",
                "+    try {",
                "+      // First the date of the day is parsed",
                "+      date = DateUtil.parse(rs.getString(1));",
                "+      // Then the hour is set",
                "+      date = DateUtil.getDate(date, rs.getString(2));",
                "+    } catch (java.text.ParseException e) {",
                "+      throw new StatisticRuntimeException(e);",
                "     }",
                "-    return list;",
                "+    String userId = rs.getString(3);",
                "+    String foreignId = rs.getString(4);",
                "+    String componentId = rs.getString(5);",
                "+    ResourceReference resourceReference = new ResourceReference(foreignId, componentId);",
                "+    return new HistoryObjectDetail(date, userId, resourceReference);",
                "   }",
                "@@ -139,51 +148,59 @@ public class HistoryObjectDAO {",
                "   /**",
                "-   * @param con the database connection",
                "-   * @param resourceReference",
                "-   * @param objectType",
                "-   * @return",
                "-   * @throws SQLException",
                "+   * Finds by user last access date and number of access.",
                "+   * @param con the database connection.",
                "+   * @param criteria search criteria.",
                "+   * @return a {@link SilverpeasList} of {@link HistoryByUser}.",
                "    */",
                "-  public static Collection<HistoryObjectDetail> getHistoryDetailByObject(Connection con,",
                "-      ResourceReference resourceReference, String objectType) throws SQLException {",
                "-",
                "-    String componentName = resourceReference.getComponentName();",
                "-    String selectStatement =",
                "-        \"select dateStat, heureStat, userId, resourceId, componentId, actionType, resourceType \" +",
                "-        \"from \" + HISTORY_TABLE_NAME",
                "-        + \" where resourceId=? and componentId=? and resourceType=?\"",
                "-        + \" order by datestat desc, heurestat desc\";",
                "-",
                "-    PreparedStatement stmt = null;",
                "-    ResultSet rs = null;",
                "-    try {",
                "-      stmt = con.prepareStatement(selectStatement);",
                "-      stmt.setString(1, resourceReference.getId());",
                "-      stmt.setString(2, resourceReference.getInstanceId());",
                "-      stmt.setString(3, objectType);",
                "+  public static SilverpeasList<HistoryByUser> findByUserByCriteria(Connection con,",
                "+      final HistoryCriteria criteria) throws SQLException  {",
                "+    final JdbcSqlQuery sqlQuery = JdbcSqlQuery.createSelect(",
                "+        \"userId, max(concat(dateStat, concat('T', heureStat))) as lastAccess, count(userId) as nbAccess\");",
                "+    applySqlCriteria(sqlQuery, criteria);",
                "+    return sqlQuery",
                "+        .groupBy(USER_ID)",
                "+        .orderBy(\"lastAccess desc, nbAccess desc\")",
                "+        .withPagination(criteria.getPagination())",
                "+        .executeWith(con, HistoryObjectDAO::getHistoryByUser);",
                "+  }",
                "-      rs = stmt.executeQuery();",
                "-      return getHistoryDetails(rs, componentName);",
                "-    } finally {",
                "-      DBUtil.close(rs, stmt);",
                "+  /**",
                "+   * Finds all history data satisfying the given criteria.",
                "+   * @param con the database connection.",
                "+   * @param criteria search criteria.",
                "+   * @return a {@link SilverpeasList} of {@link HistoryObjectDetail}.",
                "+   * @throws SQLException on technical error with database.",
                "+   */",
                "+  public static SilverpeasList<HistoryObjectDetail> findByCriteria(Connection con,",
                "+      final HistoryCriteria criteria)",
                "+      throws SQLException {",
                "+    final JdbcSqlQuery sqlQuery = JdbcSqlQuery",
                "+        .createSelect(\"dateStat, heureStat, userId, resourceId, componentId\");",
                "+    applySqlCriteria(sqlQuery, criteria);",
                "+    if (!criteria.getOrderByList().isEmpty()) {",
                "+      sqlQuery.orderBy(criteria.getOrderByList().stream()",
                "+          .map(HistoryCriteria.QUERY_ORDER_BY::getClause)",
                "+          .collect(Collectors.joining(\", \")));",
                "     }",
                "+    return sqlQuery",
                "+        .withPagination(criteria.getPagination())",
                "+        .executeWith(con, HistoryObjectDAO::getHistoryDetail);",
                "   }",
                "-  public static Collection<HistoryObjectDetail> getHistoryDetailByObjectAndUser(Connection con,",
                "-      ResourceReference resourceReference, String objectType, String userId) throws SQLException {",
                "-",
                "-    String componentName = resourceReference.getComponentName();",
                "-    String selectStatement =",
                "-        \"select * from \" + HISTORY_TABLE_NAME + \" where resourceId='\" + resourceReference.getId() +",
                "-            \"' and componentId='\" + resourceReference.getInstanceId() + \"'\" + \" and resourceType='\" +",
                "-            objectType + \"'\" + \" and userId ='\" + userId + \"'\" +",
                "-            \" order by dateStat desc, heureStat desc\";",
                "-",
                "-    Statement stmt = null;",
                "-    ResultSet rs = null;",
                "-    try {",
                "-      stmt = con.createStatement();",
                "-      rs = stmt.executeQuery(selectStatement);",
                "-      return getHistoryDetails(rs, componentName);",
                "-    } finally {",
                "-      DBUtil.close(rs, stmt);",
                "+  private static void applySqlCriteria(final JdbcSqlQuery sqlQuery,",
                "+      final HistoryCriteria criteria) {",
                "+    sqlQuery.from(HISTORY_TABLE_NAME).where(\"actionType = ?\", criteria.getActionType());",
                "+    if (!criteria.getComponentInstanceIds().isEmpty()) {",
                "+      sqlQuery.and(\"componentId\").in(criteria.getComponentInstanceIds());",
                "+    }",
                "+    if (!criteria.getResourceIds().isEmpty()) {",
                "+      sqlQuery.and(\"resourceId\").in(criteria.getResourceIds());",
                "+    }",
                "+    if (isDefined(criteria.getResourceType())) {",
                "+      sqlQuery.and(\"resourceType = ?\", criteria.getResourceType());",
                "+    }",
                "+    if (!criteria.getUserIds().isEmpty()) {",
                "+      sqlQuery.and(USER_ID).in(criteria.getUserIds());",
                "+    }",
                "+    if (!criteria.getExcludedUserIds().isEmpty()) {",
                "+      sqlQuery.and(USER_ID).notIn(criteria.getExcludedUserIds());",
                "     }",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/model/HistoryByUser.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/model/HistoryByUser.java",
                "index d46d4aae34..e1aee96e09 100644",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/model/HistoryByUser.java",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/model/HistoryByUser.java",
                "@@ -28,2 +28,4 @@ package org.silverpeas.core.silverstatistics.access.model;",
                "+import org.silverpeas.core.admin.user.model.User;",
                "+",
                " import java.io.Serializable;",
                "@@ -31,15 +33,13 @@ import java.util.Date;",
                "-import org.silverpeas.core.admin.user.model.UserDetail;",
                "-",
                " /**",
                "  * Class declaration",
                "- * @author",
                "+ * @author silveryocha",
                "  */",
                " public class HistoryByUser implements Serializable {",
                "+  private static final long serialVersionUID = 2990221033670463787L;",
                "-  private static final long serialVersionUID = 1L;",
                "-",
                "-  private UserDetail user;",
                "+  private String userId;",
                "   private Date lastAccess;",
                "   private int nbAccess;",
                "+  private User user;",
                "@@ -47,3 +47,3 @@ public class HistoryByUser implements Serializable {",
                "    * Default constructor",
                "-   * @param user the user detail",
                "+   * @param userId the user identifier",
                "    * @param lastAccess the last access date",
                "@@ -51,5 +51,5 @@ public class HistoryByUser implements Serializable {",
                "    */",
                "-  public HistoryByUser(UserDetail user, Date lastAccess, int nbAccess) {",
                "+  public HistoryByUser(String userId, Date lastAccess, int nbAccess) {",
                "+    this.userId = userId;",
                "     this.lastAccess = lastAccess;",
                "-    this.user = user;",
                "     this.nbAccess = nbAccess;",
                "@@ -57,26 +57,31 @@ public class HistoryByUser implements Serializable {",
                "-  public Date getLastAccess() {",
                "-    return lastAccess;",
                "-  }",
                "-",
                "-  public UserDetail getUser() {",
                "-    return user;",
                "+  /**",
                "+   * Default constructor",
                "+   * @param user the user",
                "+   * @param lastAccess the last access date",
                "+   * @param nbAccess the number of access",
                "+   */",
                "+  public HistoryByUser(User user, Date lastAccess, int nbAccess) {",
                "+    this(user.getId(), lastAccess, nbAccess);",
                "+    this.user = user;",
                "   }",
                "-  public int getNbAccess() {",
                "-    return nbAccess;",
                "+  public String getUserId() {",
                "+    return userId;",
                "   }",
                "-  public void setLastAccess(Date lastAccess) {",
                "-    this.lastAccess = lastAccess;",
                "+  public User getUser() {",
                "+    if (user == null) {",
                "+      user = User.getById(userId);",
                "+    }",
                "+    return user;",
                "   }",
                "-  public void setNbAccess(int nbAccess) {",
                "-    this.nbAccess = nbAccess;",
                "+  public Date getLastAccess() {",
                "+    return lastAccess;",
                "   }",
                "-  public void setUser(UserDetail user) {",
                "-    this.user = user;",
                "+  public int getNbAccess() {",
                "+    return nbAccess;",
                "   }",
                "-",
                " }",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/model/HistoryCriteria.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/model/HistoryCriteria.java",
                "new file mode 100644",
                "index 0000000000..bb4d8b1236",
                "--- /dev/null",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/model/HistoryCriteria.java",
                "@@ -0,0 +1,204 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+package org.silverpeas.core.silverstatistics.access.model;",
                "+",
                "+import org.silverpeas.core.ResourceReference;",
                "+import org.silverpeas.core.admin.PaginationPage;",
                "+import org.silverpeas.core.persistence.datasource.repository.PaginationCriterion;",
                "+",
                "+import java.util.Arrays;",
                "+import java.util.Collection;",
                "+import java.util.List;",
                "+import java.util.Objects;",
                "+import java.util.stream.Collectors;",
                "+import java.util.stream.Stream;",
                "+",
                "+import static java.util.Arrays.stream;",
                "+import static java.util.Collections.emptyList;",
                "+import static java.util.Collections.singletonList;",
                "+import static org.silverpeas.core.silverstatistics.access.model.HistoryCriteria.QUERY_ORDER_BY.ACCESS_DATE_DESC;",
                "+",
                "+/**",
                "+ * Class that permits to set search criteria for history statistics.",
                "+ * @author silveryocha",
                "+ */",
                "+public class HistoryCriteria {",
                "+",
                "+  public enum QUERY_ORDER_BY {",
                "+",
                "+    ACCESS_DATE_ASC(\"datestat, heurestat\"), ACCESS_DATE_DESC(\"datestat desc, heurestat desc\");",
                "+",
                "+    private final String clause;",
                "+",
                "+    QUERY_ORDER_BY(final String clause) {",
                "+      this.clause = clause;",
                "+    }",
                "+",
                "+    public String getClause() {",
                "+      return clause;",
                "+    }",
                "+  }",
                "+",
                "+  private final int actionType;",
                "+  private String resourceType;",
                "+  private List<String> resourceIds = emptyList();",
                "+  private List<String> componentInstanceIds = emptyList();",
                "+  private List<String> userIds = emptyList();",
                "+  private List<String> excludedUserIds = emptyList();",
                "+  private PaginationPage pagination;",
                "+  private List<QUERY_ORDER_BY> orderByList = singletonList(ACCESS_DATE_DESC);",
                "+",
                "+  public HistoryCriteria(final int actionType) {",
                "+    this.actionType = actionType;",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets the criterion of resources the history must be attached to.",
                "+   * @param resourceReference the reference of the resource.",
                "+   * @return criteria itself.",
                "+   */",
                "+  public HistoryCriteria onResource(final ResourceReference resourceReference) {",
                "+    this.resourceIds = singletonList(resourceReference.getLocalId());",
                "+    this.componentInstanceIds = singletonList(resourceReference.getComponentInstanceId());",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets the criterion of resources type the history must be attached.",
                "+   * @param resourceType the reference of the resource.",
                "+   * @return criteria itself.",
                "+   */",
                "+  public HistoryCriteria ofType(final String resourceType) {",
                "+    this.resourceType = resourceType;",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets the criterion of identifier of users the history must be attached to.",
                "+   * @param userIds identifier of users.",
                "+   * @return criteria itself.",
                "+   */",
                "+  public HistoryCriteria aboutUsers(String... userIds) {",
                "+    return aboutUsers(stream(userIds));",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets the criterion of identifier of users the history must be attached to.",
                "+   * @param userIds identifier of users.",
                "+   * @return criteria itself.",
                "+   */",
                "+  public HistoryCriteria aboutUsers(Collection<String> userIds) {",
                "+    return aboutUsers(userIds.stream());",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets the criterion of identifier of users the history must be attached to.",
                "+   * @param userIds identifier of users.",
                "+   * @return criteria itself.",
                "+   */",
                "+  public HistoryCriteria aboutUsers(Stream<String> userIds) {",
                "+    this.userIds = userIds.filter(Objects::nonNull).collect(Collectors.toList());",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets the criterion of identifier of users the history must not be attached to.",
                "+   * @param excludedUserIds identifier of users.",
                "+   * @return criteria itself.",
                "+   */",
                "+  public HistoryCriteria byExcludingUsers(String... excludedUserIds) {",
                "+    return byExcludingUsers(stream(excludedUserIds));",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets the criterion of identifier of users the history must not be attached to.",
                "+   * @param excludedUserIds identifier of users.",
                "+   * @return criteria itself.",
                "+   */",
                "+  public HistoryCriteria byExcludingUsers(Collection<String> excludedUserIds) {",
                "+    return byExcludingUsers(excludedUserIds.stream());",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets the criterion of identifier of users the history must not be attached to.",
                "+   * @param excludedUserIds identifier of users.",
                "+   * @return criteria itself.",
                "+   */",
                "+  public HistoryCriteria byExcludingUsers(Stream<String> excludedUserIds) {",
                "+    this.excludedUserIds = excludedUserIds.filter(Objects::nonNull).collect(Collectors.toList());",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets the criteria of pagination.",
                "+   * @param pagination the pagination.",
                "+   * @return criteria itself.",
                "+   */",
                "+  public HistoryCriteria paginatedBy(PaginationPage pagination) {",
                "+    this.pagination = pagination;",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Configures the order of the list.",
                "+   * @param orderBies the list of order by directives.",
                "+   * @return itself.",
                "+   */",
                "+  public HistoryCriteria orderedBy(QUERY_ORDER_BY... orderBies) {",
                "+    this.orderByList = Arrays.stream(orderBies).filter(Objects::nonNull).collect(Collectors.toList());",
                "+    return this;",
                "+  }",
                "+",
                "+  public int getActionType() {",
                "+    return actionType;",
                "+  }",
                "+",
                "+  public String getResourceType() {",
                "+    return resourceType;",
                "+  }",
                "+",
                "+  public List<String> getResourceIds() {",
                "+    return resourceIds;",
                "+  }",
                "+",
                "+  public List<String> getComponentInstanceIds() {",
                "+    return componentInstanceIds;",
                "+  }",
                "+",
                "+  public List<String> getUserIds() {",
                "+    return userIds;",
                "+  }",
                "+",
                "+  public List<String> getExcludedUserIds() {",
                "+    return excludedUserIds;",
                "+  }",
                "+",
                "+  public PaginationCriterion getPagination() {",
                "+    return pagination != null ? pagination.asCriterion() : null;",
                "+  }",
                "+",
                "+  public List<QUERY_ORDER_BY> getOrderByList() {",
                "+    return orderByList;",
                "+  }",
                "+}",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/DefaultStatisticService.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/DefaultStatisticService.java",
                "index 535c120262..bda0bbf815 100644",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/DefaultStatisticService.java",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/DefaultStatisticService.java",
                "@@ -28,2 +28,3 @@ import org.silverpeas.core.SilverpeasRuntimeException;",
                " import org.silverpeas.core.WAPrimaryKey;",
                "+import org.silverpeas.core.admin.PaginationPage;",
                " import org.silverpeas.core.admin.component.ComponentInstanceDeletion;",
                "@@ -35,2 +36,4 @@ import org.silverpeas.core.silverstatistics.access.dao.HistoryObjectDAO;",
                " import org.silverpeas.core.silverstatistics.access.model.HistoryByUser;",
                "+import org.silverpeas.core.silverstatistics.access.model.HistoryCriteria;",
                "+import org.silverpeas.core.silverstatistics.access.model.HistoryCriteria.QUERY_ORDER_BY;",
                " import org.silverpeas.core.silverstatistics.access.model.HistoryObjectDetail;",
                "@@ -38,2 +41,3 @@ import org.silverpeas.core.silverstatistics.access.model.StatisticRuntimeExcepti",
                " import org.silverpeas.core.silvertrace.SilverTrace;",
                "+import org.silverpeas.core.util.SilverpeasList;",
                "@@ -42,3 +46,10 @@ import javax.transaction.Transactional;",
                " import java.sql.Connection;",
                "-import java.util.*;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.Collection;",
                "+import java.util.Date;",
                "+import java.util.HashSet;",
                "+import java.util.List;",
                "+import java.util.Set;",
                "+import java.util.stream.Collectors;",
                "@@ -123,12 +134,30 @@ public class DefaultStatisticService implements StatisticService, ComponentInsta",
                "   @Override",
                "-  public Collection<HistoryObjectDetail> getHistoryByAction(ResourceReference resourceReference, int action,",
                "+  public List<HistoryByUser> getHistoryByUser(ResourceReference resourceReference, int action,",
                "       String objectType) {",
                "+    try (Connection con = getConnection()) {",
                "+      final HistoryCriteria criteria = new HistoryCriteria(action)",
                "+          .onResource(resourceReference)",
                "+          .ofType(objectType);",
                "+      return HistoryObjectDAO.findByUserByCriteria(con, criteria);",
                "+    } catch (Exception e) {",
                "+      throw new StatisticRuntimeException(e);",
                "+    }",
                "+  }",
                "-    Connection con = getConnection();",
                "-    try {",
                "-      return HistoryObjectDAO.getHistoryDetailByObject(con, resourceReference, objectType);",
                "+  @Override",
                "+  public SilverpeasList<HistoryObjectDetail> getHistoryByAction(",
                "+      final ResourceReference resourceReference, final int action, final String objectType,",
                "+      final Collection<String> excludedUserIds, final PaginationPage pagination) {",
                "+    try (Connection con = getConnection()) {",
                "+      final HistoryCriteria criteria = new HistoryCriteria(action)",
                "+          .onResource(resourceReference)",
                "+          .ofType(objectType)",
                "+          .paginatedBy(pagination);",
                "+      if (excludedUserIds != null) {",
                "+        criteria",
                "+          .byExcludingUsers(excludedUserIds);",
                "+      }",
                "+      return HistoryObjectDAO.findByCriteria(con, criteria);",
                "     } catch (Exception e) {",
                "       throw new StatisticRuntimeException(e);",
                "-    } finally {",
                "-      DBUtil.close(con);",
                "     }",
                "@@ -137,12 +166,18 @@ public class DefaultStatisticService implements StatisticService, ComponentInsta",
                "   @Override",
                "-  public Collection<HistoryObjectDetail> getHistoryByObjectAndUser(ResourceReference",
                "-      resourceReference, int action,",
                "-      String objectType, String userId) {",
                "-    Connection con = getConnection();",
                "-    try {",
                "-      return HistoryObjectDAO.getHistoryDetailByObjectAndUser(con, resourceReference, objectType, userId);",
                "+  public SilverpeasList<HistoryObjectDetail> getHistoryByObjectAndUser(",
                "+      ResourceReference resourceReference, int action, String objectType, String userId,",
                "+      final PaginationPage paginationPage, final QUERY_ORDER_BY orderBy) {",
                "+    try (Connection con = getConnection()) {",
                "+      final HistoryCriteria criteria = new HistoryCriteria(action)",
                "+          .onResource(resourceReference)",
                "+          .ofType(objectType)",
                "+          .aboutUsers(userId)",
                "+          .paginatedBy(paginationPage);",
                "+      if (orderBy != null) {",
                "+        criteria",
                "+          .orderedBy(orderBy);",
                "+      }",
                "+      return HistoryObjectDAO.findByCriteria(con, criteria);",
                "     } catch (Exception e) {",
                "       throw new StatisticRuntimeException(e);",
                "-    } finally {",
                "-      DBUtil.close(con);",
                "     }",
                "@@ -151,3 +186,3 @@ public class DefaultStatisticService implements StatisticService, ComponentInsta",
                "   @Override",
                "-  public Collection<HistoryByUser> getHistoryByObject(ResourceReference resourceReference, int action,",
                "+  public List<HistoryByUser> getHistoryByObject(ResourceReference resourceReference, int action,",
                "       String objectType) {",
                "@@ -159,3 +194,3 @@ public class DefaultStatisticService implements StatisticService, ComponentInsta",
                "   @Override",
                "-  public Collection<HistoryByUser> getHistoryByObject(ResourceReference resourceReference, int action,",
                "+  public List<HistoryByUser> getHistoryByObject(ResourceReference resourceReference, int action,",
                "       String objectType, List<String> userIds) {",
                "@@ -165,3 +200,3 @@ public class DefaultStatisticService implements StatisticService, ComponentInsta",
                "     UserDetail[] users = OrganizationControllerProvider.getOrganisationController()",
                "-        .getUserDetails(userIds.toArray(new String[userIds.size()]));",
                "+        .getUserDetails(userIds.toArray(new String[0]));",
                "     return getHistoryByObject(resourceReference, action, objectType, users);",
                "@@ -169,112 +204,12 @@ public class DefaultStatisticService implements StatisticService, ComponentInsta",
                "-  private Collection<HistoryByUser> getHistoryByObject(ResourceReference resourceReference, int action,",
                "+  private List<HistoryByUser> getHistoryByObject(ResourceReference resourceReference, int action,",
                "       String objectType, UserDetail[] users) {",
                "-    Collection<HistoryObjectDetail> list =",
                "-        getHistoryByAction(resourceReference, action, objectType);",
                "-    String[] readerIds = new String[list.size()];",
                "-    Date[] date = new Date[list.size()];",
                "-    getHistoryReadersAndDates(list, readerIds, date);",
                "-    UserDetail[] controlledUsers = OrganizationControllerProvider.getOrganisationController().getUserDetails(readerIds);",
                "-",
                "-    // ajouter \u00c3\u00a0 la liste \"allUsers\" (liste des users des r\u00c3\u00b4les) les users ayant lu mais ne faisant",
                "-    // pas partis d'un r\u00c3\u00b4le",
                "-    Collection<UserDetail> allUsers = getReadingUsersWithoutRoles(users, controlledUsers);",
                "-",
                "-    // cr\u00c3\u00a9ation de la liste de tous les utilisateur ayant le droit de lecture",
                "-    Collection<HistoryByUser> statByUser = getUsersWithReadRights(allUsers);",
                "-",
                "-    // cr\u00c3\u00a9ation d'une liste des acc\u00c3\u00a8s par utilisateur",
                "-    Map<UserDetail, Date> byUser = new HashMap<>(controlledUsers.length);",
                "-    Map<UserDetail, Integer> nbAccessbyUser = new HashMap<>(controlledUsers.length);",
                "-    getAccessRightsPerUser(date, controlledUsers, byUser, nbAccessbyUser);",
                "-",
                "-    // mise \u00c3\u00a0 jour de la date de dernier acc\u00c3\u00a8s et du nombre d'acc\u00c3\u00a8s pour les utilisateurs ayant lu",
                "-    updateAccessDateForReadingUsers(statByUser, byUser, nbAccessbyUser);",
                "-",
                "-    // Sort list to get readers first",
                "-    LastAccessComparatorDesc comparator = new LastAccessComparatorDesc();",
                "-    Collections.sort((List<HistoryByUser>) statByUser, comparator);",
                "-    return statByUser;",
                "-  }",
                "-",
                "-  private void updateAccessDateForReadingUsers(final Collection<HistoryByUser> statByUser,",
                "-      final Map<UserDetail, Date> byUser, final Map<UserDetail, Integer> nbAccessbyUser) {",
                "-    for (final HistoryByUser historyByUser : statByUser) {",
                "-      UserDetail user = historyByUser.getUser();",
                "-      // recherche de la date de dernier acc\u00c3\u00a8s",
                "-      Date lastAccess = byUser.get(user);",
                "-      if (lastAccess != null) {",
                "-        historyByUser.setLastAccess(lastAccess);",
                "-      }",
                "-      // retrieve access number",
                "-      Integer nbAccess = nbAccessbyUser.get(user);",
                "-      if (nbAccess != null) {",
                "-        historyByUser.setNbAccess(nbAccess);",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  private void getAccessRightsPerUser(final Date[] date, final UserDetail[] controlledUsers,",
                "-      final Map<UserDetail, Date> byUser, final Map<UserDetail, Integer> nbAccessbyUser) {",
                "-    for (int j = 0; j < controlledUsers.length; j++) {",
                "-      if (controlledUsers[j] == null) {",
                "-        continue;",
                "-      }",
                "-      // regarder si la date en cours est > \u00c3\u00a0 la date enregistr\u00c3\u00a9e...",
                "-      Object obj = byUser.get(controlledUsers[j]);",
                "-      if (obj != null && !obj.toString().equals(\"Never\")) {",
                "-        Date dateTab = (Date) obj;",
                "-        if (date[j].after(dateTab)) {",
                "-          byUser.put(controlledUsers[j], date[j]);",
                "-        }",
                "-        Object objNb = nbAccessbyUser.get(controlledUsers[j]);",
                "-        int nbAccess = 0;",
                "-        if (objNb != null) {",
                "-          nbAccess = (Integer) objNb;",
                "-          nbAccess = nbAccess + 1;",
                "-        }",
                "-        nbAccessbyUser.put(controlledUsers[j], nbAccess);",
                "-      } else {",
                "-        byUser.put(controlledUsers[j], date[j]);",
                "-        nbAccessbyUser.put(controlledUsers[j], 1);",
                "-      }",
                "-    }",
                "-  }",
                "-",
                "-  private Collection<HistoryByUser> getUsersWithReadRights(final Collection<UserDetail> allUsers) {",
                "-    Collection<HistoryByUser> statByUser = new ArrayList<>(allUsers.size());",
                "-    for (UserDetail user : allUsers) {",
                "-      if (user != null) {",
                "-        HistoryByUser historyByUser = new HistoryByUser(user, null, 0);",
                "-        statByUser.add(historyByUser);",
                "-      }",
                "-    }",
                "-    return statByUser;",
                "-  }",
                "-",
                "-  private Collection<UserDetail> getReadingUsersWithoutRoles(final UserDetail[] users,",
                "-      final UserDetail[] controlledUsers) {",
                "-    int compteur = 0;",
                "-    Collection<UserDetail> allUsers = new ArrayList<>(users.length + controlledUsers.length);",
                "-    for (int j = 0; j < users.length; j++) {",
                "-      allUsers.add(users[j]);",
                "-      compteur = j + 1;",
                "-    }",
                "-    for (int j = compteur; j < controlledUsers.length; j++) {",
                "-      if (!allUsers.contains(controlledUsers[j])) {",
                "-        allUsers.add(controlledUsers[j]);",
                "-      }",
                "-    }",
                "-    return allUsers;",
                "-  }",
                "-",
                "-  private void getHistoryReadersAndDates(final Collection<HistoryObjectDetail> list,",
                "-      final String[] readerIds, final Date[] date) {",
                "-    Iterator<HistoryObjectDetail> iterator = list.iterator();",
                "-    int i = 0;",
                "-    while (iterator.hasNext()) {",
                "-      HistoryObjectDetail historyObject = iterator.next();",
                "-      readerIds[i] = historyObject.getUserId();",
                "-      date[i++] = historyObject.getDate();",
                "+    final List<HistoryByUser> allStatsByUser = new ArrayList<>(getHistoryByUser(resourceReference, action, objectType));",
                "+    if (users != null && users.length > 0) {",
                "+      final Set<String> userIds = allStatsByUser.stream().map(HistoryByUser::getUserId).collect(Collectors.toSet());",
                "+      Arrays.stream(users)",
                "+          .filter(u -> !userIds.contains(u.getId()))",
                "+          .forEach(u -> allStatsByUser.add(new HistoryByUser(u, null, 0)));",
                "     }",
                "+    return allStatsByUser;",
                "   }",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/LastAccessComparatorDesc.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/LastAccessComparatorDesc.java",
                "deleted file mode 100644",
                "index d2569981e1..0000000000",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/LastAccessComparatorDesc.java",
                "+++ /dev/null",
                "@@ -1,52 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.core.silverstatistics.access.service;",
                "-",
                "-import java.util.Comparator;",
                "-import java.util.Date;",
                "-",
                "-import org.silverpeas.core.silverstatistics.access.model.HistoryByUser;",
                "-",
                "-public class LastAccessComparatorDesc implements Comparator<HistoryByUser> {",
                "-  final static public LastAccessComparatorDesc comparator = new LastAccessComparatorDesc();",
                "-",
                "-  @Override",
                "-  public int compare(HistoryByUser historyUser1, HistoryByUser historyUser2) {",
                "-    Date dateUser1 = historyUser1.getLastAccess();",
                "-    Date dateUser2 = historyUser2.getLastAccess();",
                "-    int compareResult = 0;",
                "-",
                "-    if (dateUser1 != null && dateUser2 != null) {",
                "-      compareResult = dateUser1.compareTo(dateUser2);",
                "-    } else {",
                "-      if (dateUser1 == null && dateUser2 != null) {",
                "-        compareResult = -1;",
                "-      }",
                "-      if (dateUser1 != null && dateUser2 == null) {",
                "-        compareResult = 1;",
                "-      }",
                "-    }",
                "-    return 0 - compareResult;",
                "-  }",
                "-}",
                "\\ No newline at end of file",
                "diff --git a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/StatisticService.java b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/StatisticService.java",
                "index 777f417252..2618f9fad5 100644",
                "--- a/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/StatisticService.java",
                "+++ b/core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/StatisticService.java",
                "@@ -26,6 +26,9 @@ package org.silverpeas.core.silverstatistics.access.service;",
                " import org.silverpeas.core.ResourceReference;",
                "+import org.silverpeas.core.WAPrimaryKey;",
                "+import org.silverpeas.core.admin.PaginationPage;",
                " import org.silverpeas.core.contribution.model.SilverpeasContent;",
                " import org.silverpeas.core.silverstatistics.access.model.HistoryByUser;",
                "+import org.silverpeas.core.silverstatistics.access.model.HistoryCriteria.QUERY_ORDER_BY;",
                " import org.silverpeas.core.silverstatistics.access.model.HistoryObjectDetail;",
                "-import org.silverpeas.core.WAPrimaryKey;",
                "+import org.silverpeas.core.util.SilverpeasList;",
                "@@ -44,12 +47,17 @@ public interface StatisticService {",
                "-  Collection<HistoryObjectDetail> getHistoryByAction(ResourceReference resourceReference, int action,",
                "+  List<HistoryByUser> getHistoryByUser(ResourceReference resourceReference, int action,",
                "       String objectType);",
                "-  Collection<HistoryObjectDetail> getHistoryByObjectAndUser(ResourceReference resourceReference, int action,",
                "-      String objectType, String userId);",
                "+  SilverpeasList<HistoryObjectDetail> getHistoryByAction(ResourceReference resourceReference,",
                "+      int action, String objectType, final Collection<String> excludedUserIds,",
                "+      PaginationPage pagination);",
                "+",
                "+  SilverpeasList<HistoryObjectDetail> getHistoryByObjectAndUser(ResourceReference resourceReference,",
                "+      int action, String objectType, String userId, final PaginationPage paginationPage,",
                "+      final QUERY_ORDER_BY orderBy);",
                "-  Collection<HistoryByUser> getHistoryByObject(ResourceReference resourceReference, int action,",
                "+  List<HistoryByUser> getHistoryByObject(ResourceReference resourceReference, int action,",
                "       String objectType);",
                "-  Collection<HistoryByUser> getHistoryByObject(ResourceReference resourceReference, int action,",
                "+  List<HistoryByUser> getHistoryByObject(ResourceReference resourceReference, int action,",
                "       String objectType, List<String> userIds);",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/UserNameGenerator.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/UserNameGenerator.java",
                "index 0efe924b37..77b4702531 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/UserNameGenerator.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/UserNameGenerator.java",
                "@@ -32,2 +32,6 @@ public class UserNameGenerator {",
                "+  private UserNameGenerator() {",
                "+    throw new IllegalStateException(\"Utility class\");",
                "+  }",
                "+",
                "   public static span generate(String userId, String currentUserId) {",
                "@@ -38,7 +42,6 @@ public class UserNameGenerator {",
                "     span userName = new span(org.owasp.encoder.Encode.forHtml(user.getDisplayedName()));",
                "-    if (StringUtil.isDefined(currentUserId)) {",
                "-      if (!user.getId().equals(currentUserId) && !UserDetail.isAnonymousUser(currentUserId)) {",
                "-        userName.setClass(\"userToZoom\");",
                "-        userName.addAttribute(\"rel\", user.getId());",
                "-      }",
                "+    if (StringUtil.isDefined(currentUserId) && !user.getId().equals(currentUserId) &&",
                "+        !UserDetail.isAnonymousUser(currentUserId)) {",
                "+      userName.setClass(\"userToZoom\");",
                "+      userName.addAttribute(\"rel\", user.getId());",
                "     }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/UserNameTag.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/UserNameTag.java",
                "index c70e290ab5..6f87f8811f 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/UserNameTag.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/UserNameTag.java",
                "@@ -25,7 +25,7 @@ package org.silverpeas.core.web.util.viewgenerator.html;",
                "-import static org.silverpeas.core.util.StringUtil.isDefined;",
                "+import org.apache.ecs.ElementContainer;",
                "+import org.apache.ecs.xhtml.span;",
                "+import org.silverpeas.core.admin.user.model.User;",
                " import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "-import static org.silverpeas.core.web.mvc.controller.MainSessionController.MAIN_SESSION_CONTROLLER_ATT;",
                "-import java.io.IOException;",
                "-import javax.servlet.jsp.JspException;",
                "+",
                " import javax.servlet.jsp.JspWriter;",
                "@@ -33,4 +33,6 @@ import javax.servlet.jsp.PageContext;",
                " import javax.servlet.jsp.tagext.SimpleTagSupport;",
                "-import org.apache.ecs.ElementContainer;",
                "-import org.apache.ecs.xhtml.span;",
                "+import java.util.Optional;",
                "+",
                "+import static org.silverpeas.core.util.StringUtil.isDefined;",
                "+import static org.silverpeas.core.web.mvc.controller.MainSessionController.MAIN_SESSION_CONTROLLER_ATT;",
                "@@ -50,2 +52,3 @@ public class UserNameTag extends SimpleTagSupport {",
                "   private String userId;",
                "+  private User user;",
                "   private boolean zoom = true;",
                "@@ -54,3 +57,2 @@ public class UserNameTag extends SimpleTagSupport {",
                "    * Gets the unique identifier of the user concerned by this tag.",
                "-   *",
                "    * @return the user unique identifier.",
                "@@ -63,3 +65,2 @@ public class UserNameTag extends SimpleTagSupport {",
                "    * Sets the unique identifier of the user whose the name has to be printed out.",
                "-   *",
                "    * @param userId the user unique identifier.",
                "@@ -70,2 +71,19 @@ public class UserNameTag extends SimpleTagSupport {",
                "+",
                "+  /**",
                "+   * Gets the user concerned by this tag.",
                "+   * @return the user.",
                "+   */",
                "+  public User getUser() {",
                "+    return user;",
                "+  }",
                "+",
                "+  /**",
                "+   * Sets the user whose the name has to be printed out.",
                "+   * @param user the user.",
                "+   */",
                "+  public void setUser(final User user) {",
                "+    this.user = user;",
                "+  }",
                "+",
                "   /**",
                "@@ -90,9 +108,16 @@ public class UserNameTag extends SimpleTagSupport {",
                "   @Override",
                "-  public void doTag() throws JspException, IOException {",
                "-    if (isDefined(userId)) {",
                "-      span userName = UserNameGenerator.generate(userId, getCurrentUserIdInSession());",
                "+  public void doTag() {",
                "+    final Optional<span> userName;",
                "+    if (user != null) {",
                "+      userName = Optional.of(UserNameGenerator.generate(user, getCurrentUserIdInSession()));",
                "+    } else if (isDefined(userId)) {",
                "+      userName = Optional.of(UserNameGenerator.generate(userId, getCurrentUserIdInSession()));",
                "+    } else {",
                "+      userName = Optional.empty();",
                "+    }",
                "+    userName.ifPresent(u -> {",
                "       ElementContainer container = new ElementContainer();",
                "-      container.addElement(userName);",
                "+      container.addElement(u);",
                "       container.output(getOut());",
                "-    }",
                "+    });",
                "   }"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/persistence/datasource/repository/PaginationCriterion.java",
                "core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java",
                "core-library/src/main/java/org/silverpeas/core/admin/PaginationPage.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "core-library/src/main/java/org/silverpeas/core/util/Pagination.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/dao/HistoryObjectDAO.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/model/HistoryByUser.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/model/HistoryCriteria.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/DefaultStatisticService.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/LastAccessComparatorDesc.java",
                "core-services/silverstatistics/src/main/java/org/silverpeas/core/silverstatistics/access/service/StatisticService.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/UserNameGenerator.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/UserNameTag.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "ccdcdcab0eaff96d2d41455f504fef3c7d700c49",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1540224113,
            "hunks": 103,
            "message": "Improving performances on PublicationService.getPublications() which was executing one request per publication... And also one request per publication for translations.",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "index c6b89d5d4e..1d01458063 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "@@ -39,2 +39,3 @@ import org.silverpeas.core.util.DateUtil;",
                " import org.silverpeas.core.util.StringUtil;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -56,2 +57,5 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.stream.Collectors;",
                "+",
                "+import static org.silverpeas.core.util.StringUtil.defaultStringIfNotDefined;",
                "@@ -72,2 +76,3 @@ public class PublicationDAO {",
                "   private static final String UNDEFINED_ID = \"unknown\";",
                "+  private static final String PUB_ID = \"pubId\";",
                "@@ -123,3 +128,3 @@ public class PublicationDAO {",
                "       // removing not visible publications from the cache",
                "-      ArrayList<PublicationDetail> listLastPublisCacheMAJ = new ArrayList<PublicationDetail>();",
                "+      ArrayList<PublicationDetail> listLastPublisCacheMAJ = new ArrayList<>();",
                "       java.util.Date date = new java.util.Date();",
                "@@ -131,3 +136,3 @@ public class PublicationDAO {",
                "       String sDate = simpleDateFormat.format(date);",
                "-      java.util.Date theDateFormat = null;",
                "+      java.util.Date theDateFormat;",
                "       try {",
                "@@ -144,6 +149,6 @@ public class PublicationDAO {",
                "       Calendar cDateEnd = Calendar.getInstance();",
                "-      String sBeginHour = null;",
                "-      String sEndHour = null;",
                "-      int beginHour = 0;",
                "-      int endHour = 0;",
                "+      String sBeginHour;",
                "+      String sEndHour;",
                "+      int beginHour;",
                "+      int endHour;",
                "       for (PublicationDetail pubDetail : listLastPublisCache) {",
                "@@ -254,3 +259,3 @@ public class PublicationDAO {",
                "       String statusSubQuery, boolean checkVisibility) throws SQLException {",
                "-    Map<String, Integer> nodes = new HashMap<String, Integer>();",
                "+    Map<String, Integer> nodes = new HashMap<>();",
                "     StringBuilder selectStatement = new StringBuilder(128);",
                "@@ -509,10 +514,9 @@ public class PublicationDAO {",
                "-  private static PublicationDetail resultSet2PublicationDetail(ResultSet rs,",
                "-      PublicationPK pubPK) throws SQLException {",
                "-    return resultSet2PublicationDetail(rs, pubPK, false);",
                "+  private static PublicationDetail resultSet2PublicationDetail(ResultSet rs) throws SQLException {",
                "+    return resultSet2PublicationDetail(rs, false);",
                "   }",
                "-  private static PublicationDetail resultSet2PublicationDetail(ResultSet rs,",
                "-      PublicationPK pubPK, boolean getSort) throws SQLException {",
                "-    PublicationDetail pub = null;",
                "+  private static PublicationDetail resultSet2PublicationDetail(ResultSet rs, boolean getSort)",
                "+      throws SQLException {",
                "+    PublicationDetail pub;",
                "     int id = rs.getInt(\"pubid\");",
                "@@ -522,6 +526,3 @@ public class PublicationDAO {",
                "     String name = rs.getString(\"pubname\");",
                "-    String description = rs.getString(\"pubDescription\");",
                "-    if (description == null) {",
                "-      description = \"\";",
                "-    }",
                "+    String description = defaultStringIfNotDefined(rs.getString(\"pubDescription\"));",
                "     Date creationDate;",
                "@@ -586,11 +587,5 @@ public class PublicationDAO {",
                "     }",
                "-    String updaterId;",
                "-    String v = rs.getString(\"pubUpdaterId\");",
                "-    if (v != null) {",
                "-      updaterId = v;",
                "-    } else {",
                "-      updaterId = creatorId;",
                "-    }",
                "+    String updaterId = defaultStringIfNotDefined(rs.getString(\"pubUpdaterId\"), creatorId);",
                "-    Date validateDate = null;",
                "+    Date validateDate;",
                "     String strValDate = rs.getString(\"pubValidateDate\");",
                "@@ -614,3 +609,3 @@ public class PublicationDAO {",
                "-    Date draftOutDate = null;",
                "+    Date draftOutDate;",
                "     try {",
                "@@ -693,3 +688,3 @@ public class PublicationDAO {",
                "-        String hourNow = null;",
                "+        String hourNow;",
                "         hourNow = DateUtil.formatTime(now);",
                "@@ -711,6 +706,6 @@ public class PublicationDAO {",
                "       rs = prepStmt.executeQuery();",
                "-      List<PublicationDetail> list = new ArrayList<PublicationDetail>();",
                "-      PublicationDetail pub = null;",
                "+      List<PublicationDetail> list = new ArrayList<>();",
                "+      PublicationDetail pub;",
                "       while (rs.next()) {",
                "-        pub = resultSet2PublicationDetail(rs, pubPK, true);",
                "+        pub = resultSet2PublicationDetail(rs, true);",
                "         list.add(pub);",
                "@@ -763,6 +758,6 @@ public class PublicationDAO {",
                "       rs = prepStmt.executeQuery();",
                "-      ArrayList<PublicationDetail> list = new ArrayList<PublicationDetail>();",
                "-      PublicationDetail pub = null;",
                "+      ArrayList<PublicationDetail> list = new ArrayList<>();",
                "+      PublicationDetail pub;",
                "       while (rs.next()) {",
                "-        pub = resultSet2PublicationDetail(rs, pubPK);",
                "+        pub = resultSet2PublicationDetail(rs);",
                "         list.add(pub);",
                "@@ -779,7 +774,7 @@ public class PublicationDAO {",
                "-    ArrayList<PublicationDetail> list = new ArrayList<PublicationDetail>();",
                "+    ArrayList<PublicationDetail> list = new ArrayList<>();",
                "     ResultSet rs = null;",
                "-    PublicationDetail pub = null;",
                "+    PublicationDetail pub;",
                "-    String fatherId = \"\";",
                "+    String fatherId;",
                "     StringBuilder whereClause = new StringBuilder(128);",
                "@@ -837,3 +832,3 @@ public class PublicationDAO {",
                "       statusBuffer.append(\"(\");",
                "-      String sStatus = null;",
                "+      String sStatus;",
                "       while (it.hasNext()) {",
                "@@ -883,3 +878,3 @@ public class PublicationDAO {",
                "       while (rs.next()) {",
                "-        pub = resultSet2PublicationDetail(rs, pubPK);",
                "+        pub = resultSet2PublicationDetail(rs);",
                "         list.add(pub);",
                "@@ -893,19 +888,21 @@ public class PublicationDAO {",
                "-  public static Collection<PublicationDetail> selectByPublicationPKs(Connection con,",
                "-      Collection<PublicationPK> publicationPKs) {",
                "-    ArrayList<PublicationDetail> publications = new ArrayList<PublicationDetail>();",
                "-    Iterator<PublicationPK> iterator = publicationPKs.iterator();",
                "-",
                "-    while (iterator.hasNext()) {",
                "-      PublicationPK pubPK = iterator.next();",
                "-      PublicationDetail pub;",
                "-      try {",
                "-        pub = loadRow(con, pubPK);",
                "-        publications.add(pub);",
                "-      } catch (Exception e) {",
                "-        SilverTrace.error(\"publication\", \"PublicationDAO.selectByPublicationPKs\",",
                "-            \"publication.GETTING_PUBLICATION_FAILED\", \"pubPK = \" + pubPK.toString());",
                "-      }",
                "+  public static List<PublicationDetail> getByIds(Connection con,",
                "+      Collection<String> publicationIds) {",
                "+    final String tableName = new PublicationPK(null).getTableName();",
                "+    try {",
                "+      final List<PublicationDetail> result = new ArrayList<>(publicationIds.size());",
                "+      JdbcSqlQuery.executeBySplittingOn(publicationIds, (idBatch, ignore) -> JdbcSqlQuery",
                "+        .createSelect(QueryStringFactory.getLoadRowFields())",
                "+        .from(tableName)",
                "+        .where(PUB_ID).in(idBatch.stream().map(Integer::parseInt).collect(Collectors.toList()))",
                "+        .executeWith(con, r -> {",
                "+          result.add(resultSet2PublicationDetail(r));",
                "+          return null;",
                "+        }));",
                "+      return result;",
                "+    } catch (SQLException e) {",
                "+      SilverLogger.getLogger(PublicationDAO.class)",
                "+          .error(\"failing getting publications from PK list\");",
                "     }",
                "-    return publications;",
                "+    return new ArrayList<>();",
                "   }",
                "@@ -934,8 +931,8 @@ public class PublicationDAO {",
                "     try {",
                "-      PublicationDetail pub = null;",
                "+      PublicationDetail pub;",
                "       stmt = con.createStatement();",
                "       rs = stmt.executeQuery(selectStatement.toString());",
                "-      List<PublicationDetail> list = new ArrayList<PublicationDetail>();",
                "+      List<PublicationDetail> list = new ArrayList<>();",
                "       while (rs.next()) {",
                "-        pub = resultSet2PublicationDetail(rs, pubPK);",
                "+        pub = resultSet2PublicationDetail(rs);",
                "         list.add(pub);",
                "@@ -951,3 +948,3 @@ public class PublicationDAO {",
                "       String status) throws SQLException {",
                "-    List<PublicationDetail> list = new ArrayList<PublicationDetail>();",
                "+    List<PublicationDetail> list = new ArrayList<>();",
                "     if (componentIds != null && componentIds.size() > 0) {",
                "@@ -980,3 +977,3 @@ public class PublicationDAO {",
                "-      String componentId = null;",
                "+      String componentId;",
                "       for (int c = 0; c < componentIds.size(); c++) {",
                "@@ -1020,3 +1017,3 @@ public class PublicationDAO {",
                "         PublicationPK pubPK = new PublicationPK(UNDEFINED_ID, UNDEFINED_ID);",
                "-        PublicationDetail pub = null;",
                "+        PublicationDetail pub;",
                "         while (rs.next()) {",
                "@@ -1025,3 +1022,3 @@ public class PublicationDAO {",
                "-          pub = resultSet2PublicationDetail(rs, pubPK);",
                "+          pub = resultSet2PublicationDetail(rs);",
                "           list.add(pub);",
                "@@ -1037,3 +1034,3 @@ public class PublicationDAO {",
                "       List<String> componentIds, String status) throws SQLException {",
                "-    List<PublicationPK> list = new ArrayList<PublicationPK>();",
                "+    List<PublicationPK> list = new ArrayList<>();",
                "     if (componentIds != null && componentIds.size() > 0) {",
                "@@ -1054,3 +1051,3 @@ public class PublicationDAO {",
                "       selectStatement.append(\" and P.instanceId IN (\");",
                "-      String componentId = null;",
                "+      String componentId;",
                "       for (int c = 0; c < componentIds.size(); c++) {",
                "@@ -1089,5 +1086,5 @@ public class PublicationDAO {",
                "         rs = prepStmt.executeQuery();",
                "-        PublicationPK pubPK = null;",
                "+        PublicationPK pubPK;",
                "         while (rs.next()) {",
                "-          pubPK = new PublicationPK(rs.getString(\"pubId\"), rs.getString(\"instanceId\"));",
                "+          pubPK = new PublicationPK(rs.getString(PUB_ID), rs.getString(\"instanceId\"));",
                "           list.add(pubPK);",
                "@@ -1104,3 +1101,3 @@ public class PublicationDAO {",
                "       SQLException {",
                "-    List<PublicationPK> list = new ArrayList<PublicationPK>();",
                "+    List<PublicationPK> list = new ArrayList<>();",
                "     if (componentIds != null && componentIds.size() > 0) {",
                "@@ -1121,3 +1118,3 @@ public class PublicationDAO {",
                "       selectStatement.append(\" AND P.instanceId IN (\");",
                "-      String componentId = null;",
                "+      String componentId;",
                "       for (int c = 0; c < componentIds.size(); c++) {",
                "@@ -1157,6 +1154,6 @@ public class PublicationDAO {",
                "         rs = prepStmt.executeQuery();",
                "-        PublicationPK pubPK = null;",
                "+        PublicationPK pubPK;",
                "         int i = 0;",
                "         while (rs.next() && (maxSize <= 0 || i <= maxSize)) {",
                "-          pubPK = new PublicationPK(rs.getString(\"pubId\"), rs.getString(\"instanceId\"));",
                "+          pubPK = new PublicationPK(rs.getString(PUB_ID), rs.getString(\"instanceId\"));",
                "           list.add(pubPK);",
                "@@ -1201,6 +1198,6 @@ public class PublicationDAO {",
                "-      ArrayList<PublicationDetail> list = new ArrayList<PublicationDetail>();",
                "-      PublicationDetail pub = null;",
                "+      ArrayList<PublicationDetail> list = new ArrayList<>();",
                "+      PublicationDetail pub;",
                "       while (rs.next()) {",
                "-        pub = resultSet2PublicationDetail(rs, pubPK);",
                "+        pub = resultSet2PublicationDetail(rs);",
                "         list.add(pub);",
                "@@ -1264,6 +1261,6 @@ public class PublicationDAO {",
                "-      ArrayList<PublicationDetail> list = new ArrayList<PublicationDetail>();",
                "-      PublicationDetail pub = null;",
                "+      ArrayList<PublicationDetail> list = new ArrayList<>();",
                "+      PublicationDetail pub;",
                "       while (rs.next()) {",
                "-        pub = resultSet2PublicationDetail(rs, pubPK);",
                "+        pub = resultSet2PublicationDetail(rs);",
                "         list.add(pub);",
                "@@ -1317,6 +1314,6 @@ public class PublicationDAO {",
                "         int nbFetch = 0;",
                "-        List<PublicationDetail> list = new ArrayList<PublicationDetail>();",
                "-        PublicationDetail pub = null;",
                "+        List<PublicationDetail> list = new ArrayList<>();",
                "+        PublicationDetail pub;",
                "         while (rs.next() && nbFetch < fetchSize) {",
                "-          pub = resultSet2PublicationDetail(rs, pubPK);",
                "+          pub = resultSet2PublicationDetail(rs);",
                "           list.add(pub);",
                "@@ -1378,6 +1375,6 @@ public class PublicationDAO {",
                "       rs = prepStmt.executeQuery();",
                "-      List<PublicationDetail> list = new ArrayList<PublicationDetail>();",
                "-      PublicationDetail pub = null;",
                "+      List<PublicationDetail> list = new ArrayList<>();",
                "+      PublicationDetail pub;",
                "       while (rs.next()) {",
                "-        pub = resultSet2PublicationDetail(rs, pubPK);",
                "+        pub = resultSet2PublicationDetail(rs);",
                "         list.add(pub);",
                "@@ -1411,6 +1408,6 @@ public class PublicationDAO {",
                "       rs = stmt.executeQuery(selectStatement.toString());",
                "-      List<PublicationDetail> list = new ArrayList<PublicationDetail>();",
                "-      PublicationDetail pub = null;",
                "+      List<PublicationDetail> list = new ArrayList<>();",
                "+      PublicationDetail pub;",
                "       while (rs.next()) {",
                "-        pub = resultSet2PublicationDetail(rs, pubPK);",
                "+        pub = resultSet2PublicationDetail(rs);",
                "         list.add(pub);",
                "@@ -1469,6 +1466,6 @@ public class PublicationDAO {",
                "       rs = prepStmt.executeQuery();",
                "-      List<PublicationDetail> list = new ArrayList<PublicationDetail>();",
                "-      PublicationDetail pub = null;",
                "+      List<PublicationDetail> list = new ArrayList<>();",
                "+      PublicationDetail pub;",
                "       while (rs.next()) {",
                "-        pub = resultSet2PublicationDetail(rs, pubPK);",
                "+        pub = resultSet2PublicationDetail(rs);",
                "         list.add(pub);",
                "@@ -1496,3 +1493,3 @@ public class PublicationDAO {",
                "     try {",
                "-      PublicationDetail pub = null;",
                "+      PublicationDetail pub;",
                "       stmt = con.prepareStatement(selectStatement);",
                "@@ -1501,3 +1498,3 @@ public class PublicationDAO {",
                "       if (rs.next()) {",
                "-        pub = resultSet2PublicationDetail(rs, pk);",
                "+        pub = resultSet2PublicationDetail(rs);",
                "         return pub;",
                "@@ -1517,3 +1514,3 @@ public class PublicationDAO {",
                "-    int rowCount = 0;",
                "+    int rowCount;",
                "@@ -1549,3 +1546,3 @@ public class PublicationDAO {",
                "       throws SQLException {",
                "-    int rowCount = 0;",
                "+    int rowCount;",
                "     PreparedStatement prepStmt = null;",
                "@@ -1655,3 +1652,3 @@ public class PublicationDAO {",
                "       if (rs.next()) {",
                "-        pub = resultSet2PublicationDetail(rs, pubPK);",
                "+        pub = resultSet2PublicationDetail(rs);",
                "       }",
                "@@ -1678,3 +1675,3 @@ public class PublicationDAO {",
                "       if (rs.next()) {",
                "-        pub = resultSet2PublicationDetail(rs, pubPK);",
                "+        pub = resultSet2PublicationDetail(rs);",
                "       }",
                "@@ -1708,6 +1705,6 @@ public class PublicationDAO {",
                "       rs = prepStmt.executeQuery();",
                "-      List<PublicationDetail> list = new ArrayList<PublicationDetail>();",
                "-      PublicationDetail pub = null;",
                "+      List<PublicationDetail> list = new ArrayList<>();",
                "+      PublicationDetail pub;",
                "       while (rs.next()) {",
                "-        pub = resultSet2PublicationDetail(rs, null);",
                "+        pub = resultSet2PublicationDetail(rs);",
                "         list.add(pub);",
                "@@ -1733,3 +1730,3 @@ public class PublicationDAO {",
                "-    List<SocialInformation> listPublications = new ArrayList<SocialInformation>();",
                "+    List<SocialInformation> listPublications = new ArrayList<>();",
                "@@ -1777,4 +1774,3 @@ public class PublicationDAO {",
                "       throws SQLException {",
                "-    List<SocialInformationPublication> listPublications =",
                "-        new ArrayList<SocialInformationPublication>();",
                "+    List<SocialInformationPublication> listPublications = new ArrayList<>();",
                "@@ -1847,3 +1843,3 @@ public class PublicationDAO {",
                "-    List<PublicationDetail> publications = new ArrayList<PublicationDetail>();",
                "+    List<PublicationDetail> publications = new ArrayList<>();",
                "     PreparedStatement prepStmt = null;",
                "@@ -1855,3 +1851,3 @@ public class PublicationDAO {",
                "       while (rs.next()) {",
                "-        publications.add(resultSet2PublicationDetail(rs, null));",
                "+        publications.add(resultSet2PublicationDetail(rs));",
                "       }",
                "@@ -1876,3 +1872,3 @@ public class PublicationDAO {",
                "-    List<PublicationDetail> publications = new ArrayList<PublicationDetail>();",
                "+    List<PublicationDetail> publications = new ArrayList<>();",
                "     PreparedStatement prepStmt = null;",
                "@@ -1886,3 +1882,3 @@ public class PublicationDAO {",
                "       while (rs.next()) {",
                "-        publications.add(resultSet2PublicationDetail(rs, null));",
                "+        publications.add(resultSet2PublicationDetail(rs));",
                "       }",
                "@@ -1900,3 +1896,3 @@ public class PublicationDAO {",
                "-    List<PublicationDetail> publications = new ArrayList<PublicationDetail>();",
                "+    List<PublicationDetail> publications = new ArrayList<>();",
                "     PreparedStatement prepStmt = null;",
                "@@ -1911,3 +1907,3 @@ public class PublicationDAO {",
                "         if (ArrayUtil.contains(userIds, userId)) {",
                "-          publications.add(resultSet2PublicationDetail(rs, null));",
                "+          publications.add(resultSet2PublicationDetail(rs));",
                "         }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationI18NDAO.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationI18NDAO.java",
                "index 3583a80494..3adb8f9b0b 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationI18NDAO.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationI18NDAO.java",
                "@@ -28,5 +28,7 @@ import org.silverpeas.core.contribution.publication.model.PublicationPK;",
                " import org.silverpeas.core.contribution.publication.model.PublicationRuntimeException;",
                "-import org.silverpeas.core.persistence.jdbc.sql.JdbcSqlQuery;",
                "-import org.silverpeas.core.persistence.jdbc.DBUtil;",
                " import org.silverpeas.core.exception.SilverpeasRuntimeException;",
                "+import org.silverpeas.core.persistence.jdbc.DBUtil;",
                "+import org.silverpeas.core.persistence.jdbc.sql.JdbcSqlQuery;",
                "+import org.silverpeas.core.persistence.jdbc.sql.ResultSetWrapper;",
                "+import org.silverpeas.core.util.MapUtil;",
                "@@ -38,2 +40,5 @@ import java.util.ArrayList;",
                " import java.util.List;",
                "+import java.util.Map;",
                "+",
                "+import static java.util.stream.Collectors.toList;",
                "@@ -44,3 +49,9 @@ import java.util.List;",
                " public class PublicationI18NDAO {",
                "-  private static String TABLENAME = \"SB_Publication_PubliI18N\";",
                "+",
                "+  private static final String TABLENAME = \"SB_Publication_PubliI18N\";",
                "+  private static final String FIELDS = \"id, pubId, lang, name, description, keywords\";",
                "+",
                "+  private PublicationI18NDAO() {",
                "+    throw new IllegalStateException(\"DAO class\");",
                "+  }",
                "@@ -51,3 +62,3 @@ public class PublicationI18NDAO {",
                "    * must be deleted.",
                "-   * @throws SQLException",
                "+   * @throws SQLException on technical SQL error",
                "    */",
                "@@ -61,27 +72,12 @@ public class PublicationI18NDAO {",
                "       throws SQLException {",
                "-    StringBuffer selectStatement = new StringBuffer(128);",
                "-    selectStatement.append(\"select * from \").append(TABLENAME);",
                "-    selectStatement.append(\" where pubId = ? \");",
                "-    PreparedStatement stmt = null;",
                "-    ResultSet rs = null;",
                "-",
                "-    try {",
                "-      PublicationI18N pub = null;",
                "-      stmt = con.prepareStatement(selectStatement.toString());",
                "+    final String selectStatement = \"select * from \" + TABLENAME + \" where pubId = ? \";",
                "+    try (PreparedStatement stmt = con.prepareStatement(selectStatement)) {",
                "       stmt.setInt(1, Integer.parseInt(pubPK.getId()));",
                "-      rs = stmt.executeQuery();",
                "-      ArrayList<PublicationI18N> list = new ArrayList<PublicationI18N>();",
                "-      while (rs.next()) {",
                "-        pub = new PublicationI18N();",
                "-        pub.setId(rs.getInt(1));",
                "-        pub.setObjectId(Integer.toString(rs.getInt(2)));",
                "-        pub.setLanguage(rs.getString(3));",
                "-        pub.setName(rs.getString(4));",
                "-        pub.setDescription(rs.getString(5));",
                "-        pub.setKeywords(rs.getString(6));",
                "-        list.add(pub);",
                "+      try (ResultSet rs = stmt.executeQuery()) {",
                "+        final List<PublicationI18N> list = new ArrayList<>();",
                "+        while (rs.next()) {",
                "+          list.add(resultSetToEntity(rs));",
                "+        }",
                "+        return list;",
                "       }",
                "-      return list;",
                "-    } finally {",
                "-      DBUtil.close(rs, stmt);",
                "     }",
                "@@ -89,5 +85,29 @@ public class PublicationI18NDAO {",
                "+  public static Map<String, List<PublicationI18N>> getIndexedTranslations(Connection con,",
                "+      List<String> publicationIds) throws SQLException {",
                "+    return JdbcSqlQuery.executeBySplittingOn(publicationIds, (idBatch, result) -> JdbcSqlQuery",
                "+        .createSelect(FIELDS)",
                "+        .from(TABLENAME)",
                "+        .where(\"pubId\").in(idBatch.stream().map(Integer::parseInt).collect(toList()))",
                "+        .executeWith(con, r -> {",
                "+          final PublicationI18N pub = resultSetToEntity(r);",
                "+          MapUtil.putAddList(result, pub.getObjectId(), pub);",
                "+          return null;",
                "+        }));",
                "+  }",
                "+",
                "+  private static PublicationI18N resultSetToEntity(final ResultSet r) throws SQLException {",
                "+    final PublicationI18N pub = new PublicationI18N();",
                "+    pub.setId(r.getInt(1));",
                "+    pub.setObjectId(Integer.toString(r.getInt(2)));",
                "+    pub.setLanguage(r.getString(3));",
                "+    pub.setName(r.getString(4));",
                "+    pub.setDescription(r.getString(5));",
                "+    pub.setKeywords(r.getString(6));",
                "+    return pub;",
                "+  }",
                "+",
                "   public static void addTranslation(Connection con, PublicationI18N translation)",
                "       throws SQLException {",
                "-    StringBuffer insertStatement = new StringBuffer(128);",
                "+    StringBuilder insertStatement = new StringBuilder(128);",
                "     insertStatement.append(\"insert into \").append(TABLENAME).append(",
                "@@ -112,5 +132,5 @@ public class PublicationI18NDAO {",
                "       PublicationI18N translation) throws SQLException {",
                "-    int rowCount = 0;",
                "+    int rowCount;",
                "-    StringBuffer updateQuery = new StringBuffer(128);",
                "+    StringBuilder updateQuery = new StringBuilder(128);",
                "     updateQuery.append(\"update \").append(TABLENAME);",
                "@@ -148,3 +168,3 @@ public class PublicationI18NDAO {",
                "       throws SQLException {",
                "-    StringBuffer deleteStatement = new StringBuffer(128);",
                "+    StringBuilder deleteStatement = new StringBuilder(128);",
                "     deleteStatement.append(\"delete from \").append(TABLENAME).append(",
                "@@ -164,3 +184,3 @@ public class PublicationI18NDAO {",
                "       throws SQLException {",
                "-    StringBuffer deleteStatement = new StringBuffer(128);",
                "+    StringBuilder deleteStatement = new StringBuilder(128);",
                "     deleteStatement.append(\"delete from \").append(TABLENAME).append(",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/QueryStringFactory.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/QueryStringFactory.java",
                "index f328ad757b..ec60cc955c 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/QueryStringFactory.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/QueryStringFactory.java",
                "@@ -39,2 +39,3 @@ public class QueryStringFactory {",
                "   private static String loadRow = null;",
                "+  private static String loadRowFields = null;",
                "   private static final String SELECT_BY_NAME;",
                "@@ -179,4 +180,10 @@ public class QueryStringFactory {",
                "     if (loadRow == null) {",
                "-      final StringBuilder query = new StringBuilder();",
                "-      query.append(\"select pubid, infoid, pubname, pubdescription, pubcreationdate, \" +",
                "+      loadRow = \"select\" + getLoadRowFields() + \" from \" + tableName + \" where pubId = ? \";",
                "+    }",
                "+    return loadRow;",
                "+  }",
                "+",
                "+  public static synchronized String getLoadRowFields() {",
                "+    if (loadRowFields == null) {",
                "+      loadRowFields = \" pubid, infoid, pubname, pubdescription, pubcreationdate, \" +",
                "           \"pubbegindate, pubenddate, pubcreatorid, pubimportance, pubversion, pubkeywords,\" +",
                "@@ -185,8 +192,5 @@ public class QueryStringFactory {",
                "           \"pubendhour, pubauthor, pubtargetvalidatorid, pubcloneid, pubclonestatus,\" +",
                "-          \"lang, pubDraftOutDate \");",
                "-      query.append(\" from \").append(tableName);",
                "-      query.append(\" where pubId = ? \");",
                "-      loadRow = query.toString();",
                "+          \"lang, pubDraftOutDate \";",
                "     }",
                "-    return loadRow;",
                "+    return loadRowFields;",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java",
                "index c1374f386d..cf5b36cd02 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java",
                "@@ -88,2 +88,5 @@ import java.sql.SQLException;",
                " import java.util.*;",
                "+import java.util.stream.Collectors;",
                "+",
                "+import static java.util.Collections.singletonList;",
                "@@ -124,4 +127,3 @@ public class DefaultPublicationService implements PublicationService, ComponentI",
                "   public PublicationDetail getDetail(PublicationPK pubPK) {",
                "-    Connection con = getConnection();",
                "-    try {",
                "+    try (Connection con = getConnection()) {",
                "       PublicationDetail publicationDetail = PublicationDAO.selectByPrimaryKey(con, pubPK);",
                "@@ -135,19 +137,2 @@ public class DefaultPublicationService implements PublicationService, ComponentI",
                "           \"pubId = \" + pubPK.getId(), e);",
                "-    } finally {",
                "-      DBUtil.close(con);",
                "-    }",
                "-  }",
                "-",
                "-  private void setTranslations(Connection con, PublicationDetail publi) {",
                "-    try {",
                "-      PublicationI18N translation =",
                "-          new PublicationI18N(publi.getLanguage(), publi.getName(), publi.getDescription(),",
                "-              publi.getKeywords());",
                "-      publi.addTranslation(translation);",
                "-      List translations = PublicationI18NDAO.getTranslations(con, publi.getPK());",
                "-      publi.setTranslations(translations);",
                "-    } catch (SQLException e) {",
                "-      throw new PublicationRuntimeException(\"DefaultPublicationService.setTranslations()\",",
                "-          SilverpeasRuntimeException.ERROR, \"publication.GETTING_TRANSLATIONS_FAILED\",",
                "-          \"pubId = \" + publi.getPK().getId(), e);",
                "     }",
                "@@ -157,4 +142,17 @@ public class DefaultPublicationService implements PublicationService, ComponentI",
                "     if (publis != null && !publis.isEmpty()) {",
                "-      for (PublicationDetail publi : publis) {",
                "-        setTranslations(con, publi);",
                "+      final List<String> publicationIds =",
                "+          publis.stream().map(PublicationDetail::getId).collect(Collectors.toList());",
                "+      try {",
                "+        final Map<String, List<PublicationI18N>> translations = PublicationI18NDAO",
                "+            .getIndexedTranslations(con, publicationIds);",
                "+        publis.forEach(p -> {",
                "+          PublicationI18N translation = new PublicationI18N(p.getLanguage(), p.getName(),",
                "+              p.getDescription(), p.getKeywords());",
                "+          p.addTranslation(translation);",
                "+          p.setTranslations(translations.get(p.getId()));",
                "+        });",
                "+      } catch (SQLException e) {",
                "+        throw new PublicationRuntimeException(\"DefaultPublicationService.setTranslations()\",",
                "+            SilverpeasRuntimeException.ERROR, \"publication.GETTING_TRANSLATIONS_FAILED\",",
                "+            \"pubId list\", e);",
                "       }",
                "@@ -930,3 +928,3 @@ public class DefaultPublicationService implements PublicationService, ComponentI",
                "       if (I18NHelper.isI18nContentActivated) {",
                "-        setTranslations(con, detail);",
                "+        setTranslations(con, singletonList(detail));",
                "       }",
                "@@ -947,7 +945,10 @@ public class DefaultPublicationService implements PublicationService, ComponentI",
                "   @Override",
                "-  public Collection<PublicationDetail> getPublications(Collection<PublicationPK> publicationPKs) {",
                "-    Connection con = getConnection();",
                "-    try {",
                "-      Collection<PublicationDetail> publications =",
                "-          PublicationDAO.selectByPublicationPKs(con, publicationPKs);",
                "+  public List<PublicationDetail> getPublications(Collection<PublicationPK> publicationPKs) {",
                "+    return getByIds(publicationPKs.stream().map(WAPrimaryKey::getId).collect(Collectors.toList()));",
                "+  }",
                "+",
                "+  @Override",
                "+  public List<PublicationDetail> getByIds(final Collection<String> publicationIds) {",
                "+    try (Connection con = getConnection()) {",
                "+      final List<PublicationDetail> publications = PublicationDAO.getByIds(con, publicationIds);",
                "       if (I18NHelper.isI18nContentActivated) {",
                "@@ -959,5 +960,3 @@ public class DefaultPublicationService implements PublicationService, ComponentI",
                "           SilverpeasRuntimeException.ERROR, \"publication.GETTING_PUBLICATIONS_FAILED\",",
                "-          \"publicationPKs = \" + publicationPKs, e);",
                "-    } finally {",
                "-      DBUtil.close(con);",
                "+          \"publicationPKs = \" + publicationIds, e);",
                "     }",
                "@@ -1278,3 +1277,3 @@ public class DefaultPublicationService implements PublicationService, ComponentI",
                "           Collection<NodePK> fathers = getAllFatherPK(pubDetail.getPK());",
                "-          List<String> paths = new ArrayList<String>();",
                "+          List<String> paths = new ArrayList<>();",
                "           for (NodePK father : fathers) {",
                "@@ -1452,3 +1451,3 @@ public class DefaultPublicationService implements PublicationService, ComponentI",
                "           PublicationDAO.selectBetweenDate(con, beginDate, endDate, instanceId);",
                "-      List<PublicationDetail> result = new ArrayList<PublicationDetail>(detailList);",
                "+      List<PublicationDetail> result = new ArrayList<>(detailList);",
                "       if (I18NHelper.isI18nContentActivated) {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/PublicationService.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/PublicationService.java",
                "index 67b67414f7..87511e6847 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/PublicationService.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/PublicationService.java",
                "@@ -201,3 +201,10 @@ public interface PublicationService {",
                "    */",
                "-  Collection<PublicationDetail> getPublications(Collection<PublicationPK> publicationPKs);",
                "+  List<PublicationDetail> getPublications(Collection<PublicationPK> publicationPKs);",
                "+",
                "+  /**",
                "+   * Gets publications from given identifiers.",
                "+   * @param publicationIds list of identifiers of publications",
                "+   * @return a list of {@link PublicationDetail}.",
                "+   */",
                "+  List<PublicationDetail> getByIds(Collection<String> publicationIds);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/i18n/AbstractI18NBean.java b/core-library/src/main/java/org/silverpeas/core/i18n/AbstractI18NBean.java",
                "index 990dafd259..2c11254e3e 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/i18n/AbstractI18NBean.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/i18n/AbstractI18NBean.java",
                "@@ -52,3 +52,3 @@ public abstract class AbstractI18NBean<T extends BeanTranslation>",
                "   private String translationId = null;",
                "-  private Map<String, T> translations = new HashMap<String, T>(3);",
                "+  private Map<String, T> translations = new HashMap<>(3);",
                "   private boolean removeTranslation = false;",
                "@@ -141,2 +141,3 @@ public abstract class AbstractI18NBean<T extends BeanTranslation>",
                "+  @Override",
                "   public void setLanguage(String language) {",
                "@@ -149,2 +150,3 @@ public abstract class AbstractI18NBean<T extends BeanTranslation>",
                "+  @Override",
                "   public void setRemoveTranslation(boolean removeTranslation) {",
                "@@ -157,2 +159,3 @@ public abstract class AbstractI18NBean<T extends BeanTranslation>",
                "+  @Override",
                "   public void setTranslationId(String translationId) {",
                "@@ -165,2 +168,3 @@ public abstract class AbstractI18NBean<T extends BeanTranslation>",
                "+  @Override",
                "   public Map<String, T> getTranslations() {",
                "@@ -176,3 +180,3 @@ public abstract class AbstractI18NBean<T extends BeanTranslation>",
                "   public Map<String, T> getClonedTranslations() {",
                "-    Map<String, T> clonedTranslations = new HashMap<String, T>(3);",
                "+    Map<String, T> clonedTranslations = new HashMap<>(3);",
                "     for (Map.Entry<String, T> entry : translations.entrySet()) {",
                "@@ -203,2 +207,3 @@ public abstract class AbstractI18NBean<T extends BeanTranslation>",
                "+  @Override",
                "   public T getTranslation(String language) {",
                "@@ -208,10 +213,11 @@ public abstract class AbstractI18NBean<T extends BeanTranslation>",
                "   public void addTranslation(T translation) {",
                "-    String language = translation.getLanguage();",
                "-    if (!StringUtil.isDefined(language)) {",
                "-      language = I18NHelper.defaultLanguage;",
                "-      translation.setLanguage(language);",
                "+    String lang = translation.getLanguage();",
                "+    if (!StringUtil.isDefined(lang)) {",
                "+      lang = I18NHelper.defaultLanguage;",
                "+      translation.setLanguage(lang);",
                "     }",
                "-    translations.put(language, translation);",
                "+    translations.put(lang, translation);",
                "   }",
                "+  @Override",
                "   public T getNextTranslation() {"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationI18NDAO.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/QueryStringFactory.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/service/PublicationService.java",
                "core-library/src/main/java/org/silverpeas/core/i18n/AbstractI18NBean.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "6a993801ddcf7a16f40034c175be1758b2af87c9",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1541684022,
            "hunks": 1,
            "message": "Fixing little mistake.",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateManager.java b/core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateManager.java",
                "index f1219334e8..d329e1b505 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateManager.java",
                "@@ -130,3 +130,3 @@ public class PublicationTemplateManager implements ComponentInstanceDeletion {",
                "   private String makeDefaultPath(String fileName) {",
                "-    if (!StringUtil.isDefined(templateDir)) {",
                "+    if (!StringUtil.isDefined(defaultTemplateDir)) {",
                "       return fileName;"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "404291f9ddb3f5b99385f1bd88f0ad053d96d1c4",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1545836650,
            "hunks": 5,
            "message": "fixing some issues during form-based search",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java b/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "index a1048fe7d3..b01f9d9427 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "@@ -327,3 +327,3 @@ public class IndexSearcher {",
                "       if (StringUtil.isDefined(keyword)) {",
                "-        Query headerQuery = getQuery(IndexManager.HEADER, keyword, languages, analyzer);",
                "+        Query headerQuery = getQuery(IndexManager.CONTENT, keyword, languages, analyzer);",
                "         booleanQuery.add(headerQuery, BooleanClause.Occur.MUST);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/pdc/control/PdcSearchSessionController.java b/core-war/src/main/java/org/silverpeas/web/pdc/control/PdcSearchSessionController.java",
                "index 80d87912de..d3e8edacb4 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/pdc/control/PdcSearchSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/pdc/control/PdcSearchSessionController.java",
                "@@ -828,14 +828,19 @@ public class PdcSearchSessionController extends AbstractComponentSessionControll",
                "               for (Map.Entry<String, String> facet : theSelectedFacetEntries.entrySet()) {",
                "-                // get stored value relative to given facet",
                "-                String resultFieldValue = gsrFormFieldsForFacets.get(facet.getKey());",
                "-                Facet uiFacet = getFieldFacets().get(facet.getKey());",
                "-                if (uiFacet instanceof FacetOnDates) {",
                "-                  visible =",
                "-                      resultFieldValue != null && resultFieldValue.startsWith(facet.getValue());",
                "-                } else if (uiFacet instanceof FacetOnCheckboxes) {",
                "-                  String[] resultValues = resultFieldValue.split(\" \");",
                "-                  visible = ArrayUtil.contains(resultValues, facet.getValue());",
                "-                } else {",
                "-                  // visible if stored value is equals to selected facet entry",
                "-                  visible = facet.getValue().equalsIgnoreCase(resultFieldValue);",
                "+                if (visible) {",
                "+                  // get stored value relative to given facet",
                "+                  String resultFieldValue = gsrFormFieldsForFacets.get(facet.getKey());",
                "+                  if (resultFieldValue != null) {",
                "+                    Facet uiFacet = getFieldFacets().get(facet.getKey());",
                "+                    if (uiFacet instanceof FacetOnDates) {",
                "+                      visible = resultFieldValue.startsWith(facet.getValue());",
                "+                    } else if (uiFacet instanceof FacetOnCheckboxes) {",
                "+                      String[] resultValues = resultFieldValue.split(\" \");",
                "+                      visible = ArrayUtil.contains(resultValues, facet.getValue());",
                "+                    } else {",
                "+                      // visible if stored value is equals to selected facet entry",
                "+                      visible = facet.getValue().equalsIgnoreCase(resultFieldValue);",
                "+                    }",
                "+                  } else {",
                "+                    visible = false;",
                "+                  }",
                "                 }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcSearchRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcSearchRequestRouter.java",
                "index 494b0fdc15..496cbe1e28 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcSearchRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcSearchRequestRouter.java",
                "@@ -266,3 +266,3 @@ public class PdcSearchRequestRouter extends ComponentRequestRouter<PdcSearchSess",
                "-        String title = getParameterValue(items, \"TitleNotInXMLForm\");",
                "+        String title = request.getParameter(\"TitleNotInXMLForm\");",
                "         pdcSC.getQueryParameters().setXmlTitle(title);",
                "@@ -494,13 +494,2 @@ public class PdcSearchRequestRouter extends ComponentRequestRouter<PdcSearchSess",
                "-  private String getParameterValue(List<FileItem> items, String parameterName) {",
                "-    Iterator<FileItem> iter = items.iterator();",
                "-    while (iter.hasNext()) {",
                "-      FileItem item = iter.next();",
                "-      if (item.isFormField() && parameterName.equals(item.getFieldName())) {",
                "-        return item.getString();",
                "-      }",
                "-    }",
                "-    return null;",
                "-  }",
                "-",
                "   private List<WAAttributeValuePair> getItemPks(List<GlobalSilverResult> listGR) {",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/result/HtmlSearchResultTag.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/result/HtmlSearchResultTag.java",
                "index 0be061f919..a373b34aad 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/result/HtmlSearchResultTag.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/result/HtmlSearchResultTag.java",
                "@@ -245,2 +245,3 @@ public class HtmlSearchResultTag extends TagSupport {",
                "     result.append(gsr.getInstanceId()).append(\" \");",
                "+    result.append(gsr.getType()).append(\" \");",
                "     result.append(serverName).append(\"\\\">\");"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "core-war/src/main/java/org/silverpeas/web/pdc/control/PdcSearchSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/pdc/servlets/PdcSearchRequestRouter.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/result/HtmlSearchResultTag.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "46c649c9c2ce9a4f9bbbdffd46a4656bb7934fb9",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1545411664,
            "hunks": 12,
            "message": "Adjusting some stuffs.",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java b/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "index edca2bce3d..43eb21cabc 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "@@ -16,2 +16,3 @@ import static org.apache.commons.lang3.StringUtils.split;",
                " public class NotificationContext extends HashMap<String, String> {",
                "+  private static final long serialVersionUID = 341715544034127254L;",
                "@@ -24,3 +25,3 @@ public class NotificationContext extends HashMap<String, String> {",
                "     final String value = get(key);",
                "-    return StringUtil.getBooleanValue(key);",
                "+    return StringUtil.getBooleanValue(value);",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/synchro/SynchroDomainScheduler.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/synchro/SynchroDomainScheduler.java",
                "index 7a13f241f6..fb48803940 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/synchro/SynchroDomainScheduler.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/synchro/SynchroDomainScheduler.java",
                "@@ -29,2 +29,3 @@ import org.silverpeas.core.admin.service.OrganizationController;",
                " import org.silverpeas.core.admin.user.constant.UserAccessLevel;",
                "+import org.silverpeas.core.admin.user.model.User;",
                " import org.silverpeas.core.admin.user.model.UserDetailsSearchCriteria;",
                "@@ -82,6 +83,11 @@ public class SynchroDomainScheduler implements SchedulerEventListener {",
                "           final Domain domain = organizationController.getDomain(domainId);",
                "-          final UserDetailsSearchCriteria criteria = new UserDetailsSearchCriteria();",
                "-          criteria.onAccessLevels(UserAccessLevel.ADMINISTRATOR);",
                "+          UserDetailsSearchCriteria criteria = new UserDetailsSearchCriteria()",
                "+              .onAccessLevels(UserAccessLevel.ADMINISTRATOR);",
                "+          final List<User> admins = organizationController.searchUsers(criteria);",
                "+          criteria = new UserDetailsSearchCriteria()",
                "+              .onDomainIds(domainId)",
                "+              .onAccessLevels(UserAccessLevel.DOMAIN_ADMINISTRATOR);",
                "+          admins.addAll(organizationController.searchUsers(criteria));",
                "           SimpleUserNotification.fromSystem()",
                "-              .toUsers(organizationController.searchUsers(criteria))",
                "+              .toUsers(admins)",
                "               .withTitle(l -> bundle(l).getStringWithParams(\"admin.domain.sync.error.notif.title\", domain.getName()))",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "index 8003b71e48..ccb6d16eed 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "@@ -39,2 +39,3 @@ import org.silverpeas.core.web.mvc.controller.ComponentContext;",
                " import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "+import org.silverpeas.core.web.mvc.webcomponent.WebMessager;",
                " import org.silverpeas.web.notificationuser.Notification;",
                "@@ -47,2 +48,3 @@ import java.util.stream.Stream;",
                " public class UserNotificationSessionController extends AbstractComponentSessionController {",
                "+  private static final long serialVersionUID = 4415724531986026943L;",
                "@@ -147,2 +149,3 @@ public class UserNotificationSessionController extends AbstractComponentSessionC",
                "         .send();",
                "+    WebMessager.getInstance().addSuccess(getString(\"notification.user.send.success\"));",
                "   }",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "index 453b2eb000..ee2bea2d6f 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "@@ -71,5 +71,6 @@ public class UserNotificationWrapper implements UserNotification {",
                "       final NotificationMetaData metaData = notification.getNotificationMetaData();",
                "-      metaData.setContent(Encode.forHtml(content));",
                "+      final String htmlContent = Encode.forHtml(content);",
                "+      metaData.setContent(htmlContent);",
                "       for (String lang : DisplayI18NHelper.getLanguages()) {",
                "-        metaData.addExtraMessage(content, lang);",
                "+        metaData.addExtraMessage(htmlContent, lang);",
                "       }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/token/SynchronizerTokenService.java b/core-web/src/main/java/org/silverpeas/core/web/token/SynchronizerTokenService.java",
                "index b9bf318b50..9e893a25d5 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/token/SynchronizerTokenService.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/token/SynchronizerTokenService.java",
                "@@ -65,3 +65,3 @@ public class SynchronizerTokenService {",
                "   private static final String UNPROTECTED_URI_RULE =",
                "-      \"(?i)(?!.*(/qaptcha|rpdcsearch/|rclipboard/|rchat/chat[0-9]+|blockingNews|services/password/)).*\";",
                "+      \"(?i)(?!.*(/qaptcha|rpdcsearch/|rclipboard/|rusernotification/|blockingNews|services/password/)).*\";",
                "   private static final String DEFAULT_GET_RULE",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "index ae6ddcb01a..153423f5e3 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java",
                "@@ -946,3 +946,3 @@ public class JavascriptPluginInclusion {",
                "         .add(\"cancel\", notifBundle.getString(\"GML.cancel\"))",
                "-        .add(\"theField\", notifBundle.getString(\"GML.theField\"))",
                "+        .add(\"thefield\", notifBundle.getString(\"GML.thefield\"))",
                "         .add(\"addressees\", notifBundle.getString(\"addressees\"))"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/notification/user/NotificationContext.java",
                "core-library/src/main/java/org/silverpeas/core/admin/domain/synchro/SynchroDomainScheduler.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/notificationuser/control/UserNotificationWrapper.java",
                "core-web/src/main/java/org/silverpeas/core/web/token/SynchronizerTokenService.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/JavascriptPluginInclusion.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "86fb8ae2b4ce6483ed514468913c5588953a99ca",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1541775536,
            "hunks": 59,
            "message": "Completing the pagination mechanism with process feature which permits to combines pagination on a data source with functional pagination. Optimizing the loading of publications into context of news feed. Modifying publication DAO in order to use pagination. Fixing also a little problem about the space context on personal space rendering (with all portlets).",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/cache/service/InMemoryCache.java b/core-api/src/main/java/org/silverpeas/core/cache/service/InMemoryCache.java",
                "index 0a5938c8e2..5f289b7785 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/cache/service/InMemoryCache.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/cache/service/InMemoryCache.java",
                "@@ -27,4 +27,5 @@ import org.silverpeas.core.cache.model.AbstractSimpleCache;",
                "-import java.util.HashMap;",
                " import java.util.Map;",
                "+import java.util.concurrent.ConcurrentHashMap;",
                "+import java.util.concurrent.ConcurrentMap;",
                "@@ -32,4 +33,2 @@ import java.util.Map;",
                "  * Cache managed in memory.",
                "- * User: Yohann Chastagnier",
                "- * Date: 25/10/13",
                "  */",
                "@@ -37,3 +36,3 @@ class InMemoryCache extends AbstractSimpleCache {",
                "-  private final Map<Object, Object> cache = new HashMap<>();",
                "+  private final ConcurrentMap<Object, Object> cache = new ConcurrentHashMap<>();",
                "@@ -59,7 +58,3 @@ class InMemoryCache extends AbstractSimpleCache {",
                "   public Object remove(final Object key) {",
                "-    Object value = get(key);",
                "-    if (value != null) {",
                "-      getCache().remove(key);",
                "-    }",
                "-    return value;",
                "+    return getCache().remove(key);",
                "   }",
                "@@ -70,3 +65,3 @@ class InMemoryCache extends AbstractSimpleCache {",
                "     if (value != null) {",
                "-      getCache().remove(key);",
                "+      remove(key);",
                "     }",
                "@@ -77,3 +72,7 @@ class InMemoryCache extends AbstractSimpleCache {",
                "   public void put(final Object key, final Object value) {",
                "-    getCache().put(key, value);",
                "+    if (value == null) {",
                "+      remove(key);",
                "+    } else {",
                "+      getCache().put(key, value);",
                "+    }",
                "   }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "index e57c1cf989..262ba284a5 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "@@ -28,2 +28,3 @@ import org.silverpeas.core.persistence.jdbc.ConnectionPool;",
                " import org.silverpeas.core.util.ListSlice;",
                "+import org.silverpeas.core.util.ResourceLocator;",
                " import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -105,12 +106,32 @@ class DefaultJdbcSqlExecutor implements JdbcSqlExecutor {",
                "       final SelectResultRowProcess<R> process) throws SQLException {",
                "-    JdbcSqlQuery.Configuration queryConf = selectQuery.getConfiguration();",
                "-    try (PreparedStatement st = queryConf.isFirstResultScrolled() ?",
                "-        con.prepareStatement(selectQuery.getSqlQuery(), ResultSet.TYPE_SCROLL_INSENSITIVE,",
                "-            ResultSet.CONCUR_READ_ONLY) : con.prepareStatement(selectQuery.getSqlQuery())) {",
                "+    final JdbcSqlQuery.Configuration queryConf = selectQuery.getConfiguration();",
                "+    final String sqlQuery;",
                "+    boolean countOverPaginationMethod = isCountOverPaginationMethod(queryConf);",
                "+    if (countOverPaginationMethod) {",
                "+      final int selectIndex = selectQuery.getSqlQuery().indexOf(\"select\");",
                "+      if (selectIndex >= 0 &&",
                "+          selectQuery.getSqlQuery().indexOf(\"select\", selectIndex + 1) < 0) {",
                "+        sqlQuery = selectQuery.getSqlQuery()",
                "+            .replaceFirst(\"(?i)(select .*)from \", \"$1, COUNT(*) OVER() AS SP_MAX_ROW_COUNT FROM \");",
                "+      } else {",
                "+        sqlQuery = selectQuery.getSqlQuery();",
                "+        countOverPaginationMethod = false;",
                "+      }",
                "+    } else {",
                "+      sqlQuery = selectQuery.getSqlQuery();",
                "+    }",
                "+    try (PreparedStatement st = queryConf.isResultCountLimited() || queryConf.isFirstResultScrolled()",
                "+        ? con.prepareStatement(sqlQuery, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)",
                "+        : con.prepareStatement(sqlQuery)) {",
                "+      if (queryConf.isResultCountLimited()) {",
                "+        st.setFetchSize(queryConf.getResultLimit());",
                "+        if (!queryConf.isNeedRealOriginalSize() || countOverPaginationMethod) {",
                "+          st.setMaxRows(queryConf.getOffset() + queryConf.getResultLimit());",
                "+        }",
                "+      }",
                "       setParameters(st, selectQuery.getParameters());",
                "       try (ResultSet rs = st.executeQuery()) {",
                "-        return fetchEntities(rs, process, queryConf);",
                "+        return fetchEntities(rs, process, queryConf, countOverPaginationMethod);",
                "       } catch (SQLException e) {",
                "-        SilverLogger.getLogger(this)",
                "-            .debug(e.getMessage() + SQL_REQUEST + selectQuery.getSqlQuery());",
                "+        SilverLogger.getLogger(this).debug(e.getMessage() + SQL_REQUEST + sqlQuery);",
                "         throw e;",
                "@@ -161,22 +182,49 @@ class DefaultJdbcSqlExecutor implements JdbcSqlExecutor {",
                "   private <R> ListSlice<R> fetchEntities(final ResultSet rs,",
                "-      final SelectResultRowProcess<R> process, final JdbcSqlQuery.Configuration queryConf)",
                "+      final SelectResultRowProcess<R> process, final JdbcSqlQuery.Configuration queryConf,",
                "+      final boolean countOverPaginationMethod)",
                "       throws SQLException {",
                "     final ResultSetWrapper rsw = new ResultSetWrapper(rs);",
                "-    int idx = queryConf.getOffset();",
                "+    int startIndex = queryConf.getOffset();",
                "     if (queryConf.isFirstResultScrolled()) {",
                "       rsw.next();",
                "-      rsw.relative(idx - 1);",
                "+      rsw.relative(startIndex - 1);",
                "     }",
                "-    final int lastIdx =",
                "-        queryConf.isResultCountLimited() ? idx + queryConf.getResultLimit() - 1 : 0;",
                "-    ListSlice<R> entities = new ListSlice<>(idx, lastIdx);",
                "-    int originalSize = idx;",
                "-    for (;rsw.next(); originalSize++) {",
                "-      if (!queryConf.isResultCountLimited() ||",
                "-          (queryConf.isResultCountLimited() && entities.size() < queryConf.getResultLimit())) {",
                "-        rsw.setCurrentRowIndex(idx++);",
                "-        R entity = process.currentRow(rsw);",
                "-        if (entity != null) {",
                "-          entities.add(entity);",
                "-        }",
                "+    final boolean resultCountLimited = queryConf.isResultCountLimited();",
                "+    final int lastIdx = resultCountLimited ? startIndex + queryConf.getResultLimit() - 1 : 0;",
                "+    final ListSlice<R> entities = new ListSlice<>(startIndex, lastIdx);",
                "+    if (!resultCountLimited) {",
                "+      fetchWithoutLimit(startIndex, rsw, process, entities);",
                "+    } else {",
                "+      fetchWithLimit(queryConf, startIndex, rsw, process, entities, countOverPaginationMethod);",
                "+    }",
                "+    return entities;",
                "+  }",
                "+",
                "+  private <R> void fetchWithoutLimit(final int startIdx, final ResultSetWrapper rsw,",
                "+      final SelectResultRowProcess<R> process, final ListSlice<R> entities) throws SQLException {",
                "+    int idx = startIdx;",
                "+    for (; rsw.next(); idx++) {",
                "+      handleRow(idx, rsw, process, entities);",
                "+    }",
                "+    entities.setOriginalListSize(entities.size());",
                "+  }",
                "+",
                "+  private <R> void fetchWithLimit(final JdbcSqlQuery.Configuration queryConf, final int startIdx,",
                "+      final ResultSetWrapper rsw, final SelectResultRowProcess<R> process,",
                "+      final ListSlice<R> entities, final boolean countOverPaginationMethod) throws SQLException {",
                "+    final int offsetCountAtStart = rsw.getRow();",
                "+    int idx = startIdx;",
                "+    int originalSize = (int) entities.originalListSize();",
                "+    if (queryConf.isNeedRealOriginalSize() && countOverPaginationMethod && rsw.next()) {",
                "+      handleRow(idx++, rsw, process, entities);",
                "+      originalSize = rsw.getInt(\"SP_MAX_ROW_COUNT\");",
                "+    }",
                "+    for (; entities.size() < queryConf.getResultLimit() && rsw.next(); idx++) {",
                "+      handleRow(idx, rsw, process, entities);",
                "+    }",
                "+    if (originalSize <= 0 && queryConf.isNeedRealOriginalSize()) {",
                "+      if (rsw.last()) {",
                "+        originalSize = rsw.getRow();",
                "+      } else {",
                "+        originalSize = offsetCountAtStart == 0 ? offsetCountAtStart : idx;",
                "       }",
                "@@ -184,3 +232,21 @@ class DefaultJdbcSqlExecutor implements JdbcSqlExecutor {",
                "     entities.setOriginalListSize(originalSize);",
                "-    return entities;",
                "+  }",
                "+",
                "+  private <R> void handleRow(final int idx, final ResultSetWrapper rsw,",
                "+      final SelectResultRowProcess<R> process, final ListSlice<R> entities) throws SQLException {",
                "+    rsw.setCurrentRowIndex(idx);",
                "+    R entity = process.currentRow(rsw);",
                "+    if (entity != null) {",
                "+      entities.add(entity);",
                "+    }",
                "+  }",
                "+",
                "+  private boolean isCountOverPaginationMethod(final JdbcSqlQuery.Configuration queryConf) {",
                "+    return queryConf.isResultCountLimited() && queryConf.isNeedRealOriginalSize() &&",
                "+        isCountOverPaginationMethod();",
                "+  }",
                "+",
                "+  private static boolean isCountOverPaginationMethod() {",
                "+    return ResourceLocator.getGeneralSettingBundle()",
                "+        .getBoolean(\"jdbc.pagination.method.countOver\", false);",
                "   }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java",
                "index ea8b7e6deb..a8698a99a7 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java",
                "@@ -377,2 +377,13 @@ public class JdbcSqlQuery {",
                "   public JdbcSqlQuery withPagination(PaginationCriterion pagination) {",
                "+    return withPagination(pagination, true);",
                "+  }",
                "+",
                "+  /**",
                "+   * Configures the query execution in order to retrieve only items of pagination.<br>",
                "+   * Be careful to execute a SQL query containing an {@code ORDER BY} clause!!!",
                "+   * @param pagination the pagination criterion to apply.",
                "+   * @param needRealOriginalSize true to obtain the real original mas size.",
                "+   * @return the instance of {@link JdbcSqlQuery} that represents the SQL query.",
                "+   */",
                "+  public JdbcSqlQuery withPagination(PaginationCriterion pagination, boolean needRealOriginalSize) {",
                "     if (pagination != null && pagination.isDefined()) {",
                "@@ -380,2 +391,5 @@ public class JdbcSqlQuery {",
                "       limit(pagination.getItemCount());",
                "+      if (!needRealOriginalSize) {",
                "+        this.configuration.ignoreRealOriginalSize();",
                "+      }",
                "     }",
                "@@ -731,2 +745,3 @@ public class JdbcSqlQuery {",
                "     private int offset = 0;",
                "+    private boolean needRealOriginalSize = true;",
                "@@ -748,2 +763,6 @@ public class JdbcSqlQuery {",
                "+    public boolean isNeedRealOriginalSize() {",
                "+      return needRealOriginalSize;",
                "+    }",
                "+",
                "     public Configuration withResultLimit(final int limit) {",
                "@@ -759,2 +778,7 @@ public class JdbcSqlQuery {",
                "     }",
                "+",
                "+    public Configuration ignoreRealOriginalSize() {",
                "+      this.needRealOriginalSize = false;",
                "+      return this;",
                "+    }",
                "   }",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/util/ListSlice.java b/core-api/src/main/java/org/silverpeas/core/util/ListSlice.java",
                "index 5cd20cb749..10745c2c0b 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/util/ListSlice.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/util/ListSlice.java",
                "@@ -105,3 +105,5 @@ public class ListSlice<T> extends ArrayList<T> implements SilverpeasList<T> {",
                "   public <U> SilverpeasList<U> newEmptyListWithSameProperties() {",
                "-    return new ListSlice<>(this.start, this.end, this.maxsize);",
                "+    final ListSlice<U> newEmptyList = new ListSlice<>(this.start, this.end);",
                "+    newEmptyList.setOriginalListSize(this.maxsize);",
                "+    return newEmptyList;",
                "   }",
                "@@ -144,3 +146,3 @@ public class ListSlice<T> extends ArrayList<T> implements SilverpeasList<T> {",
                "    */",
                "-  public void setOriginalListSize(int size) {",
                "+  public void setOriginalListSize(long size) {",
                "     this.maxsize = size;",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/contribution/publication/service/LastPublicationDAOIT.java b/core-library/src/integration-test/java/org/silverpeas/core/contribution/publication/service/LastPublicationDAOIT.java",
                "index 9778cba021..ad694798eb 100644",
                "--- a/core-library/src/integration-test/java/org/silverpeas/core/contribution/publication/service/LastPublicationDAOIT.java",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/contribution/publication/service/LastPublicationDAOIT.java",
                "@@ -40,2 +40,3 @@ import org.junit.runner.RunWith;",
                " import org.silverpeas.core.contribution.publication.test.WarBuilder4Publication;",
                "+import org.silverpeas.core.persistence.datasource.repository.PaginationCriterion;",
                " import org.silverpeas.core.test.rule.DbUnitLoadingRule;",
                "@@ -84,4 +85,4 @@ public class LastPublicationDAOIT {",
                "       calend.set(MILLISECOND, 0);",
                "-      Collection<PublicationPK> keys =",
                "-          PublicationDAO.selectPKsByStatus(con, componentIds, PublicationDetail.VALID_STATUS);",
                "+      Collection<PublicationPK> keys = PublicationDAO",
                "+          .selectPKsByStatus(con, componentIds, PublicationDetail.VALID_STATUS, null);",
                "       assertNotNull(keys);",
                "@@ -94,2 +95,43 @@ public class LastPublicationDAOIT {",
                "+  @Test",
                "+  public void selectPksByStatusWithSmallPaginationFirstPageResult() throws Exception {",
                "+    try (Connection con = getSafeConnection()) {",
                "+      List<String> componentIds = Arrays.asList(\"kmelia100\", \"kmelia200\");",
                "+      Calendar calend = Calendar.getInstance();",
                "+      calend.set(YEAR, 2009);",
                "+      calend.set(MONTH, NOVEMBER);",
                "+      calend.set(DAY_OF_MONTH, 15);",
                "+      calend.set(HOUR_OF_DAY, 10);",
                "+      calend.set(MINUTE, 15);",
                "+      calend.set(SECOND, 0);",
                "+      calend.set(MILLISECOND, 0);",
                "+      Collection<PublicationPK> keys = PublicationDAO",
                "+          .selectPKsByStatus(con, componentIds, PublicationDetail.VALID_STATUS, new PaginationCriterion(1, 2));",
                "+      assertNotNull(keys);",
                "+      assertEquals(2, keys.size());",
                "+      assertThat(keys, IsIterableContainingInOrder",
                "+          .contains(new PublicationPK(\"200\", \"kmelia200\"), new PublicationPK(\"101\", \"kmelia100\")));",
                "+    }",
                "+  }",
                "+",
                "+  @Test",
                "+  public void selectPksByStatusWithSmallPaginationSecondPageResult() throws Exception {",
                "+    try (Connection con = getSafeConnection()) {",
                "+      List<String> componentIds = Arrays.asList(\"kmelia100\", \"kmelia200\");",
                "+      Calendar calend = Calendar.getInstance();",
                "+      calend.set(YEAR, 2009);",
                "+      calend.set(MONTH, NOVEMBER);",
                "+      calend.set(DAY_OF_MONTH, 15);",
                "+      calend.set(HOUR_OF_DAY, 10);",
                "+      calend.set(MINUTE, 15);",
                "+      calend.set(SECOND, 0);",
                "+      calend.set(MILLISECOND, 0);",
                "+      Collection<PublicationPK> keys = PublicationDAO",
                "+          .selectPKsByStatus(con, componentIds, PublicationDetail.VALID_STATUS, new PaginationCriterion(2, 3));",
                "+      assertNotNull(keys);",
                "+      assertEquals(1, keys.size());",
                "+      assertThat(keys, IsIterableContainingInOrder.contains(new PublicationPK(\"202\", \"kmelia200\")));",
                "+    }",
                "+  }",
                "+",
                "   @Test",
                "@@ -107,4 +149,4 @@ public class LastPublicationDAOIT {",
                "       Collection<PublicationPK> keys = PublicationDAO",
                "-          .selectUpdatedPublicationsSince(con, componentIds, PublicationDetail.VALID_STATUS,",
                "-              calend.getTime(), 0);",
                "+          .selectPKsByStatusAndUpdatedSince(con, componentIds, PublicationDetail.VALID_STATUS,",
                "+              calend.getTime(), null);",
                "       assertNotNull(keys);",
                "@@ -115,4 +157,4 @@ public class LastPublicationDAOIT {",
                "       keys = PublicationDAO",
                "-          .selectUpdatedPublicationsSince(con, componentIds, PublicationDetail.VALID_STATUS,",
                "-              calend.getTime(), 1);",
                "+          .selectPKsByStatusAndUpdatedSince(con, componentIds, PublicationDetail.VALID_STATUS,",
                "+              calend.getTime(), new PaginationCriterion(1, 2));",
                "       assertNotNull(keys);",
                "@@ -121,2 +163,9 @@ public class LastPublicationDAOIT {",
                "           .contains(new PublicationPK(\"200\", \"kmelia200\"), new PublicationPK(\"101\", \"kmelia100\")));",
                "+      keys = PublicationDAO",
                "+          .selectPKsByStatusAndUpdatedSince(con, componentIds, PublicationDetail.VALID_STATUS,",
                "+              calend.getTime(), new PaginationCriterion(3, 1));",
                "+      assertNotNull(keys);",
                "+      assertEquals(1, keys.size());",
                "+      assertThat(keys, IsIterableContainingInOrder",
                "+          .contains(new PublicationPK(\"100\", \"kmelia100\")));",
                "     }",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/persistence/jdbc/JdbcSqlQueryIT.java b/core-library/src/integration-test/java/org/silverpeas/core/persistence/jdbc/JdbcSqlQueryIT.java",
                "index bd62f56ada..16a9f349c5 100644",
                "--- a/core-library/src/integration-test/java/org/silverpeas/core/persistence/jdbc/JdbcSqlQueryIT.java",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/persistence/jdbc/JdbcSqlQueryIT.java",
                "@@ -280,2 +280,11 @@ public class JdbcSqlQueryIT {",
                "     private int rowIndex = 0;",
                "+    private boolean assertion = false;",
                "+",
                "+    TableResultProcess() {",
                "+      this(true);",
                "+    }",
                "+",
                "+    TableResultProcess(boolean assertion) {",
                "+      this.assertion = assertion;",
                "+    }",
                "@@ -284,3 +293,5 @@ public class JdbcSqlQueryIT {",
                "       try {",
                "-        assertThat(row.getCurrentRowIndex(), is(rowIndex));",
                "+        if (assertion) {",
                "+          assertThat(row.getCurrentRowIndex(), is(rowIndex));",
                "+        }",
                "         return Pair.of(row.getLongObject(1), row.getString(2));",
                "@@ -292,2 +303,30 @@ public class JdbcSqlQueryIT {",
                "+  @Test",
                "+  public void selectWithOffsetAndLimitAll() throws SQLException {",
                "+    List<Pair<Long, String>> rows = createSelect(\"*\").from(\"a_table\").where(\"value like ?\", \"%0\")",
                "+        .orderBy(\"id desc\").execute(new TableResultProcess());",
                "+    assertThat(rows, hasSize(10));",
                "+    assertThat(rows.get(0).getRight(), is(\"value_90\"));",
                "+    assertThat(rows.get(1).getRight(), is(\"value_80\"));",
                "+",
                "+    int resultLimit = 5;",
                "+",
                "+    rows = createSelect(\"*\").from(\"a_table\").where(\"value like ?\", \"%0\").orderBy(\"id desc\")",
                "+        .configure(config -> config.withResultLimit(resultLimit)).execute(new TableResultProcess());",
                "+",
                "+    assertThat(rows, hasSize(resultLimit));",
                "+    assertThat(rows.get(0).getRight(), is(\"value_90\"));",
                "+    assertThat(rows.get(1).getRight(), is(\"value_80\"));",
                "+",
                "+    int offset = 2;",
                "+",
                "+    rows = createSelect(\"*\").from(\"a_table\").where(\"value like ?\", \"%0\").orderBy(\"id desc\")",
                "+        .configure(config -> config.withOffset(offset))",
                "+        .configure(config -> config.withResultLimit(resultLimit)).execute(new TableResultProcess(false));",
                "+",
                "+    assertThat(rows, hasSize(resultLimit));",
                "+    assertThat(rows.get(0).getRight(), is(\"value_70\"));",
                "+    assertThat(rows.get(1).getRight(), is(\"value_60\"));",
                "+  }",
                "+",
                "   @Test",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/user/dao/GroupSearchCriteriaForDAO.java b/core-library/src/main/java/org/silverpeas/core/admin/user/dao/GroupSearchCriteriaForDAO.java",
                "index 973a0f62a8..c77f7b9be1 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/user/dao/GroupSearchCriteriaForDAO.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/user/dao/GroupSearchCriteriaForDAO.java",
                "@@ -287,4 +287,3 @@ public class GroupSearchCriteriaForDAO implements SearchCriteria {",
                "       PaginationPage page = criteria.getCriterionOnPagination();",
                "-      query.offset((page.getPageNumber() - 1) * page.getPageSize());",
                "-      query.limit(page.getPageSize());",
                "+      query.withPagination(page.asCriterion());",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserSearchCriteriaForDAO.java b/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserSearchCriteriaForDAO.java",
                "index 6048863506..4d37f90cde 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserSearchCriteriaForDAO.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserSearchCriteriaForDAO.java",
                "@@ -265,4 +265,3 @@ public class UserSearchCriteriaForDAO implements SearchCriteria {",
                "       PaginationPage page = criteria.getCriterionOnPagination();",
                "-      query.offset((page.getPageNumber() - 1) * page.getPageSize());",
                "-      query.limit(page.getPageSize());",
                "+      query.withPagination(page.asCriterion());",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "index 5acd0e4746..5c82983594 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "@@ -32,2 +32,3 @@ import org.silverpeas.core.exception.SilverpeasRuntimeException;",
                " import org.silverpeas.core.node.model.NodePK;",
                "+import org.silverpeas.core.persistence.datasource.repository.PaginationCriterion;",
                " import org.silverpeas.core.persistence.jdbc.DBUtil;",
                "@@ -38,2 +39,5 @@ import org.silverpeas.core.util.ArrayUtil;",
                " import org.silverpeas.core.util.DateUtil;",
                "+import org.silverpeas.core.util.MapUtil;",
                "+import org.silverpeas.core.util.SilverpeasArrayList;",
                "+import org.silverpeas.core.util.SilverpeasList;",
                " import org.silverpeas.core.util.StringUtil;",
                "@@ -78,2 +82,4 @@ public class PublicationDAO {",
                "   private static final String PUB_ID = \"pubId\";",
                "+  private static final String SB_PUBLICATION_PUBLI_TABLE = \"sb_publication_publi\";",
                "+  private static final String PUBSTATUS_VALID_CRITERION = \"pubstatus = 'Valid'\";",
                "@@ -1037,136 +1043,39 @@ public class PublicationDAO {",
                "-  public static Collection<PublicationPK> selectPKsByStatus(Connection con,",
                "-      List<String> componentIds, String status) throws SQLException {",
                "-    List<PublicationPK> list = new ArrayList<>();",
                "-    if (componentIds != null && componentIds.size() > 0) {",
                "-      StringBuilder selectStatement = new StringBuilder(128);",
                "-      selectStatement.append(\"SELECT  DISTINCT(P.pubId), P.instanceId, P.pubUpdateDate \");",
                "-      selectStatement.append(\"FROM SB_Publication_Publi P, SB_Publication_PubliFather F \");",
                "-      selectStatement.append(\"WHERE P.pubStatus = ? AND F.nodeId <> 1 AND (\");",
                "-      selectStatement.append(\"( ? > P.pubBeginDate AND ? < P.pubEndDate ) OR \");",
                "-      selectStatement.append(",
                "-          \"( ? = P.pubBeginDate AND ? < P.pubEndDate AND ? > P.pubBeginHour ) OR \");",
                "-      selectStatement",
                "-          .append(\"( ? > P.pubBeginDate AND ? = P.pubEndDate AND ? < P.pubEndHour ) OR \");",
                "-      selectStatement",
                "-          .append(",
                "-          \"( ? = P.pubBeginDate AND ? = P.pubEndDate AND ? > P.pubBeginHour AND ? < P.pubEndHour )\");",
                "-      selectStatement.append(\" ) \");",
                "-      selectStatement.append(\" and F.pubId = P.pubId \");",
                "-      selectStatement.append(\" and P.instanceId IN (\");",
                "-      String componentId;",
                "-      for (int c = 0; c < componentIds.size(); c++) {",
                "-        componentId = componentIds.get(c);",
                "-        if (c != 0) {",
                "-          selectStatement.append(\", \");",
                "-        }",
                "-        selectStatement.append(\"'\").append(componentId).append(\"'\");",
                "-      }",
                "-      selectStatement.append(\")\");",
                "-      selectStatement.append(\" order by P.pubUpdateDate desc, P.pubId desc\");",
                "-",
                "-      PreparedStatement prepStmt = null;",
                "-      ResultSet rs = null;",
                "-      try {",
                "-        java.util.Date now = new java.util.Date();",
                "-        String dateNow = DateUtil.formatDate(now);",
                "-",
                "-        String hourNow = DateUtil.formatTime(now);",
                "-",
                "-        prepStmt = con.prepareStatement(selectStatement.toString());",
                "-",
                "-        prepStmt.setString(1, status);",
                "-        prepStmt.setString(2, dateNow);",
                "-        prepStmt.setString(3, dateNow);",
                "-        prepStmt.setString(4, dateNow);",
                "-        prepStmt.setString(5, dateNow);",
                "-        prepStmt.setString(6, hourNow);",
                "-        prepStmt.setString(7, dateNow);",
                "-        prepStmt.setString(8, dateNow);",
                "-        prepStmt.setString(9, hourNow);",
                "-        prepStmt.setString(10, dateNow);",
                "-        prepStmt.setString(11, dateNow);",
                "-        prepStmt.setString(12, hourNow);",
                "-        prepStmt.setString(13, hourNow);",
                "-        rs = prepStmt.executeQuery();",
                "-        PublicationPK pubPK;",
                "-        while (rs.next()) {",
                "-          pubPK = new PublicationPK(rs.getString(PUB_ID), rs.getString(\"instanceId\"));",
                "-          list.add(pubPK);",
                "-        }",
                "-      } finally {",
                "-        DBUtil.close(rs, prepStmt);",
                "-      }",
                "-    }",
                "-    return list;",
                "+  public static SilverpeasList<PublicationPK> selectPKsByStatus(final Connection con,",
                "+      final List<String> componentIds, final String status, final PaginationCriterion pagination)",
                "+      throws SQLException {",
                "+    return selectPKsByStatusAndUpdatedSince(con, componentIds, status, null, pagination);",
                "   }",
                "-  public static Collection<PublicationPK> selectUpdatedPublicationsSince(Connection con,",
                "-      List<String> componentIds, String status, java.util.Date since, int maxSize) throws",
                "+  public static SilverpeasList<PublicationPK> selectPKsByStatusAndUpdatedSince(Connection con,",
                "+      List<String> componentIds, String status, Date since, PaginationCriterion pagination) throws",
                "       SQLException {",
                "-    List<PublicationPK> list = new ArrayList<>();",
                "-    if (componentIds != null && componentIds.size() > 0) {",
                "-      StringBuilder selectStatement = new StringBuilder(128);",
                "-      selectStatement.append(\"SELECT  DISTINCT(P.pubId), P.instanceId, P.pubUpdateDate \");",
                "-      selectStatement.append(\"FROM SB_Publication_Publi P, SB_Publication_PubliFather F \");",
                "-      selectStatement.append(\"WHERE P.pubStatus = ? AND F.nodeId <> 1 AND (\");",
                "-      selectStatement.append(\"( ? > P.pubBeginDate AND ? < P.pubEndDate ) OR \");",
                "-      selectStatement.append(",
                "-          \"( ? = P.pubBeginDate AND ? < P.pubEndDate AND ? > P.pubBeginHour ) OR \");",
                "-      selectStatement",
                "-          .append(\"( ? > P.pubBeginDate AND ? = P.pubEndDate AND ? < P.pubEndHour ) OR \");",
                "-      selectStatement",
                "-          .append(",
                "-          \"( ? = P.pubBeginDate AND ? = P.pubEndDate AND ? > P.pubBeginHour AND ? < P.pubEndHour )\");",
                "-      selectStatement.append(\" ) \");",
                "-      selectStatement.append(\" AND F.pubId = P.pubId AND P.pubupdatedate > ? \");",
                "-      selectStatement.append(\" AND P.instanceId IN (\");",
                "-      String componentId;",
                "-      for (int c = 0; c < componentIds.size(); c++) {",
                "-        componentId = componentIds.get(c);",
                "-        if (c != 0) {",
                "-          selectStatement.append(\", \");",
                "-        }",
                "-        selectStatement.append(\"'\").append(componentId).append(\"'\");",
                "-      }",
                "-      selectStatement.append(\")\");",
                "-      selectStatement.append(\" ORDER BY P.pubUpdateDate DESC, P.pubId DESC\");",
                "-",
                "-      PreparedStatement prepStmt = null;",
                "-      ResultSet rs = null;",
                "-      try {",
                "-        java.util.Date now = new java.util.Date();",
                "-        String dateNow = DateUtil.formatDate(now);",
                "-",
                "-        String hourNow = DateUtil.formatTime(now);",
                "-",
                "-        prepStmt = con.prepareStatement(selectStatement.toString());",
                "-        prepStmt.setFetchSize(maxSize);",
                "-        prepStmt.setString(1, status);",
                "-        prepStmt.setString(2, dateNow);",
                "-        prepStmt.setString(3, dateNow);",
                "-        prepStmt.setString(4, dateNow);",
                "-        prepStmt.setString(5, dateNow);",
                "-        prepStmt.setString(6, hourNow);",
                "-        prepStmt.setString(7, dateNow);",
                "-        prepStmt.setString(8, dateNow);",
                "-        prepStmt.setString(9, hourNow);",
                "-        prepStmt.setString(10, dateNow);",
                "-        prepStmt.setString(11, dateNow);",
                "-        prepStmt.setString(12, hourNow);",
                "-        prepStmt.setString(13, hourNow);",
                "-        prepStmt.setString(14, DateUtil.date2SQLDate(since));",
                "-        rs = prepStmt.executeQuery();",
                "-        PublicationPK pubPK;",
                "-        int i = 0;",
                "-        while (rs.next() && (maxSize <= 0 || i <= maxSize)) {",
                "-          pubPK = new PublicationPK(rs.getString(PUB_ID), rs.getString(\"instanceId\"));",
                "-          list.add(pubPK);",
                "-          i++;",
                "-        }",
                "-      } finally {",
                "-        DBUtil.close(rs, prepStmt);",
                "+    if (componentIds != null && !componentIds.isEmpty()) {",
                "+      final JdbcSqlQuery sqlQuery = JdbcSqlQuery",
                "+          .createSelect(\"DISTINCT(P.pubId), P.instanceId, P.pubUpdateDate\")",
                "+          .from(\"SB_Publication_Publi P\")",
                "+          .join(\"SB_Publication_PubliFather F\").on(\"F.pubId = P.pubId\")",
                "+          .where(\"F.nodeId <> 1\")",
                "+          .and(\"P.pubStatus = ?\", status);",
                "+      if (since != null) {",
                "+        sqlQuery.and(\"P.pubupdatedate > ?\", DateUtil.date2SQLDate(since));",
                "       }",
                "+      return dateFilters(sqlQuery)",
                "+          .and(\"P.instanceId\").in(componentIds)",
                "+          .orderBy(\"P.pubUpdateDate desc, P.pubId desc\")",
                "+          .withPagination(pagination, false)",
                "+          .executeWith(con, r -> new PublicationPK(r.getString(1), r.getString(2)));",
                "     }",
                "-    return list;",
                "+    return new SilverpeasArrayList<>(0);",
                "+  }",
                "+",
                "+  private static JdbcSqlQuery dateFilters(final JdbcSqlQuery sqlQuery) {",
                "+    final java.util.Date now = new java.util.Date();",
                "+    final String dateNow = DateUtil.formatDate(now);",
                "+    final String hourNow = DateUtil.formatTime(now);",
                "+    return sqlQuery",
                "+      .and(\"((? > P.pubBeginDate\", dateNow).and(\"? < P.pubEndDate)\", dateNow)",
                "+      .or(\"(? = P.pubBeginDate\", dateNow).and(\"? < P.pubEndDate\", dateNow).and(\"? > P.pubBeginHour)\", hourNow)",
                "+      .or(\"(? > P.pubBeginDate\", dateNow).and(\"? = P.pubEndDate\", dateNow).and(\"? < P.pubEndHour)\", hourNow)",
                "+      .or(\"(? = P.pubBeginDate\", dateNow).and(\"? = P.pubEndDate\", dateNow).and(\"? > P.pubBeginHour\", hourNow).and(\"? < P.pubEndHour))\", hourNow);",
                "   }",
                "@@ -1732,34 +1641,45 @@ public class PublicationDAO {",
                "    */",
                "+  @SuppressWarnings(\"unchecked\")",
                "   public static List<SocialInformation> getAllPublicationsIDbyUserid(Connection con,",
                "       String userId, Date begin, Date end) throws SQLException {",
                "+  final PaginationCriterion pagination = new PaginationCriterion(1, 500);",
                "+  final Map<String, List<Boolean>> statusMapping = new HashMap<>(pagination.getItemCount());",
                "+  final List<String> pubIds = JdbcSqlQuery",
                "+      .create(\"(SELECT pubcreationdate AS dateinformation, pubid, 'false' as type\")",
                "+      .from(SB_PUBLICATION_PUBLI_TABLE)",
                "+      .where(\"pubcreatorid = ?\", userId)",
                "+      .and(PUBSTATUS_VALID_CRITERION)",
                "+      .and(\"pubCreationDate >= ?\", DateUtil.date2SQLDate(begin))",
                "+      .and(\"pubCreationDate <= ?)\", DateUtil.date2SQLDate(end))",
                "+      .union()",
                "+      .addSqlPart(\"(SELECT pubupdatedate AS dateinformation, pubid, 'true' as type\")",
                "+      .from(SB_PUBLICATION_PUBLI_TABLE)",
                "+      .where(\"pubupdaterid = ?\", userId)",
                "+      .and(PUBSTATUS_VALID_CRITERION)",
                "+      .and(\"pubupdatedate >= ?\", DateUtil.date2SQLDate(begin))",
                "+      .and(\"pubupdatedate <= ?)\", DateUtil.date2SQLDate(end))",
                "+      .orderBy(\"dateinformation DESC, pubid DESC, type\")",
                "+      .withPagination(pagination, false)",
                "+      .executeWith(con, r -> {",
                "+        final String pubId = Integer.toString(r.getInt(2));",
                "+        MapUtil.putAddList(statusMapping, pubId, r.getBoolean(3));",
                "+        return pubId;",
                "+      });",
                "+    return (SilverpeasList) buildSocialInformationResult(con, pubIds, statusMapping);",
                "+  }",
                "-    List<SocialInformation> listPublications = new ArrayList<>();",
                "-",
                "-    String query =",
                "-        \"(SELECT pubcreationdate AS dateinformation, pubid, 'false' as type  FROM sb_publication_publi WHERE pubcreatorid = ? and pubstatus = 'Valid' and pubCreationDate >= ? and pubCreationDate <= ? )\"",
                "-            + \"UNION (SELECT pubupdatedate AS dateinformation, pubid, 'true' as type FROM sb_publication_publi WHERE pubupdaterid = ? and pubstatus = 'Valid' and pubupdatedate >= ? and pubupdatedate <= ? )\"",
                "-            + \"ORDER BY dateinformation DESC, pubid DESC\";",
                "-    PreparedStatement prepStmt = null;",
                "-    ResultSet rs = null;",
                "-    try {",
                "-      prepStmt = con.prepareStatement(query);",
                "-      prepStmt.setString(1, userId);",
                "-      prepStmt.setString(2, DateUtil.date2SQLDate(begin));",
                "-      prepStmt.setString(3, DateUtil.date2SQLDate(end));",
                "-      prepStmt.setString(4, userId);",
                "-      prepStmt.setString(5, DateUtil.date2SQLDate(begin));",
                "-      prepStmt.setString(6, DateUtil.date2SQLDate(end));",
                "-      rs = prepStmt.executeQuery();",
                "-      while (rs.next()) {",
                "-",
                "-        PublicationDetail pd = loadRow(con, new PublicationPK(Integer.toString(rs.getInt(2))));",
                "-        PublicationWithStatus withStatus = new PublicationWithStatus(pd, rs.getBoolean(3));",
                "-",
                "-        listPublications.add(new SocialInformationPublication(withStatus));",
                "-      }",
                "-",
                "-    } finally {",
                "-      DBUtil.close(rs, prepStmt);",
                "-    }",
                "-    return listPublications;",
                "+  private static SilverpeasList<SocialInformationPublication> buildSocialInformationResult(",
                "+      final Connection con, final List<String> pubIds,",
                "+      final Map<String, List<Boolean>> statusMapping) {",
                "+    final Map<String, PublicationDetail> publications = new HashMap<>(pubIds.size());",
                "+    getByIds(con, pubIds).forEach(p -> publications.put(p.getId(), p));",
                "+    return pubIds",
                "+        .stream()",
                "+        .map(i -> {",
                "+          final PublicationDetail p = publications.get(i);",
                "+          final Boolean s = statusMapping.get(i).remove(0);",
                "+          final PublicationWithStatus withStatus = new PublicationWithStatus(p, s);",
                "+          return new SocialInformationPublication(withStatus);",
                "+        })",
                "+        .collect(SilverpeasList.collector(pubIds));",
                "   }",
                "@@ -1779,58 +1699,28 @@ public class PublicationDAO {",
                "       throws SQLException {",
                "-    List<SocialInformationPublication> listPublications = new ArrayList<>();",
                "-",
                "-    String query =",
                "-        \"(SELECT pubcreationdate AS dateinformation, pubid, 'false' as type FROM sb_publication_publi WHERE pubcreatorid in(\" +",
                "-            toSqlString(",
                "-            myContactsIds) +",
                "-            \") and instanceid in(\" +",
                "-            toSqlString(options) +",
                "-            \") and pubstatus = 'Valid' and pubCreationDate >= ? and pubCreationDate <= ? )\"",
                "-            +",
                "-            \"UNION (SELECT  pubupdatedate AS dateinformation, pubid, 'true' as type FROM sb_publication_publi WHERE pubupdaterid in(\" +",
                "-            toSqlString(",
                "-            myContactsIds) +",
                "-            \")  and instanceid in(\" +",
                "-            toSqlString(options) +",
                "-            \")and pubstatus = 'Valid' and pubupdatedate >= ? and pubupdatedate <= ? )\"",
                "-            + \"ORDER BY dateinformation DESC, pubid DESC\";",
                "-    PreparedStatement prepStmt = null;",
                "-    ResultSet rs = null;",
                "-    try {",
                "-      prepStmt = con.prepareStatement(query);",
                "-      prepStmt.setString(1, DateUtil.date2SQLDate(begin));",
                "-      prepStmt.setString(2, DateUtil.date2SQLDate(end));",
                "-      prepStmt.setString(3, DateUtil.date2SQLDate(begin));",
                "-      prepStmt.setString(4, DateUtil.date2SQLDate(end));",
                "-      rs = prepStmt.executeQuery();",
                "-      while (rs.next()) {",
                "-        PublicationDetail pd = loadRow(con, new PublicationPK(Integer.toString(rs.getInt(2))));",
                "-        PublicationWithStatus withStatus = new PublicationWithStatus(pd, rs.getBoolean(3));",
                "-        listPublications.add(new SocialInformationPublication(withStatus));",
                "-      }",
                "-    } finally {",
                "-      DBUtil.close(rs, prepStmt);",
                "-    }",
                "-    return listPublications;",
                "-  }",
                "-",
                "-  /**",
                "-   * tronsform the list of string to String for using in query sql",
                "-   * @param list",
                "-   * @return String",
                "-   */",
                "-  private static String toSqlString(List<String> list) {",
                "-    StringBuilder result = new StringBuilder(100);",
                "-    if (list == null || list.isEmpty()) {",
                "-      return \"''\";",
                "-    }",
                "-    int i = 0;",
                "-    for (String var : list) {",
                "-      if (i != 0) {",
                "-        result.append(\",\");",
                "-      }",
                "-      result.append(\"'\").append(var).append(\"'\");",
                "-      i++;",
                "-    }",
                "-    return result.toString();",
                "+    final PaginationCriterion pagination = new PaginationCriterion(1, 500);",
                "+    final Map<String, List<Boolean>> statusMapping = new HashMap<>(pagination.getItemCount());",
                "+    final List<String> pubIds = JdbcSqlQuery",
                "+        .create(\"(SELECT pubcreationdate AS dateinformation, pubid, 'false' as type\")",
                "+        .from(SB_PUBLICATION_PUBLI_TABLE)",
                "+        .where(\"pubcreatorid\").in(myContactsIds)",
                "+        .and(\"instanceid\").in(options)",
                "+        .and(PUBSTATUS_VALID_CRITERION)",
                "+        .and(\"pubCreationDate >= ?\", DateUtil.date2SQLDate(begin))",
                "+        .and(\"pubCreationDate <= ?)\", DateUtil.date2SQLDate(end))",
                "+        .union()",
                "+        .addSqlPart(\"(SELECT pubupdatedate AS dateinformation, pubid, 'true' as type\")",
                "+        .from(SB_PUBLICATION_PUBLI_TABLE)",
                "+        .where(\"pubupdaterid\").in(myContactsIds)",
                "+        .and(\"instanceid\").in(options)",
                "+        .and(PUBSTATUS_VALID_CRITERION)",
                "+        .and(\"pubupdatedate >= ?\", DateUtil.date2SQLDate(begin))",
                "+        .and(\"pubupdatedate <= ?)\", DateUtil.date2SQLDate(end))",
                "+        .orderBy(\"dateinformation DESC, pubid DESC, type\")",
                "+        .withPagination(pagination, false)",
                "+        .executeWith(con, r -> {",
                "+          final String pubId = Integer.toString(r.getInt(2));",
                "+          MapUtil.putAddList(statusMapping, pubId, r.getBoolean(3));",
                "+          return pubId;",
                "+        });",
                "+    return buildSocialInformationResult(con, pubIds, statusMapping);",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java",
                "index cf5b36cd02..f0e99ee2f8 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java",
                "@@ -27,2 +27,3 @@ import org.silverpeas.core.ResourceReference;",
                " import org.silverpeas.core.WAPrimaryKey;",
                "+import org.silverpeas.core.admin.PaginationPage;",
                " import org.silverpeas.core.admin.component.ComponentInstanceDeletion;",
                "@@ -78,2 +79,3 @@ import org.silverpeas.core.util.ResourceLocator;",
                " import org.silverpeas.core.util.SettingBundle;",
                "+import org.silverpeas.core.util.SilverpeasList;",
                " import org.silverpeas.core.util.StringUtil;",
                "@@ -985,7 +987,7 @@ public class DefaultPublicationService implements PublicationService, ComponentI",
                "   @Override",
                "-  public Collection<PublicationPK> getPublicationPKsByStatus(String status,",
                "-      List<String> componentIds) {",
                "-    Connection con = getConnection();",
                "-    try {",
                "-      return PublicationDAO.selectPKsByStatus(con, componentIds, status);",
                "+  public SilverpeasList<PublicationPK> getPublicationPKsByStatus(final String status,",
                "+      final List<String> componentIds, final PaginationPage pagination) {",
                "+    try (final Connection con = getConnection()) {",
                "+      return PublicationDAO.selectPKsByStatus(con, componentIds, status,",
                "+          pagination != null && pagination.getPageSize() > 0 ? pagination.asCriterion() : null);",
                "     } catch (Exception e) {",
                "@@ -994,4 +996,2 @@ public class DefaultPublicationService implements PublicationService, ComponentI",
                "           \"status = \" + status + \", componentIds = \" + componentIds, e);",
                "-    } finally {",
                "-      DBUtil.close(con);",
                "     }",
                "@@ -1654,8 +1654,7 @@ public class DefaultPublicationService implements PublicationService, ComponentI",
                "   @Override",
                "-  public Collection<PublicationPK> getUpdatedPublicationPKsByStatus(String status, Date since,",
                "-      int maxSize, List<String> componentIds) {",
                "-    Connection con = getConnection();",
                "-    try {",
                "-      return PublicationDAO",
                "-          .selectUpdatedPublicationsSince(con, componentIds, status, since, maxSize);",
                "+  public SilverpeasList<PublicationPK> getUpdatedPublicationPKsByStatus(String status, Date since,",
                "+      List<String> componentIds, PaginationPage pagination) {",
                "+    try (final Connection con = getConnection()) {",
                "+      return PublicationDAO.selectPKsByStatusAndUpdatedSince(con, componentIds, status, since,",
                "+          pagination != null && pagination.getPageSize() > 0 ? pagination.asCriterion() : null);",
                "     } catch (SQLException e) {",
                "@@ -1664,4 +1663,2 @@ public class DefaultPublicationService implements PublicationService, ComponentI",
                "           \"status = \" + status + \", componentIds = \" + componentIds, e);",
                "-    } finally {",
                "-      DBUtil.close(con);",
                "     }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/PublicationService.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/PublicationService.java",
                "index 87511e6847..66a8ffbe0e 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/PublicationService.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/service/PublicationService.java",
                "@@ -26,2 +26,3 @@ package org.silverpeas.core.contribution.publication.service;",
                " import org.silverpeas.core.ResourceReference;",
                "+import org.silverpeas.core.admin.PaginationPage;",
                " import org.silverpeas.core.contribution.publication.model.Alias;",
                "@@ -36,2 +37,3 @@ import org.silverpeas.core.socialnetwork.model.SocialInformation;",
                " import org.silverpeas.core.util.ServiceProvider;",
                "+import org.silverpeas.core.util.SilverpeasList;",
                "@@ -221,4 +223,4 @@ public interface PublicationService {",
                "-  Collection<PublicationPK> getPublicationPKsByStatus(String status,",
                "-      List<String> componentIds);",
                "+  SilverpeasList<PublicationPK> getPublicationPKsByStatus(String status, List<String> componentIds,",
                "+      final PaginationPage pagination);",
                "@@ -230,4 +232,4 @@ public interface PublicationService {",
                "    * @param since : the last update of the publication",
                "-   * @param maxSize : the maximum size of the list. If 0 is specified, the limit is not used.",
                "    * @param componentIds",
                "+   * @param pagination : the maximum size of the list. If 0 is specified, the limit is not used.",
                "    * @return a list of publications with the specified maxSize or none if 0 or less is specified.",
                "@@ -235,4 +237,4 @@ public interface PublicationService {",
                "    */",
                "-  Collection<PublicationPK> getUpdatedPublicationPKsByStatus(String status, Date since,",
                "-      int maxSize, List<String> componentIds);",
                "+  SilverpeasList<PublicationPK> getUpdatedPublicationPKsByStatus(String status, Date since,",
                "+      List<String> componentIds, PaginationPage pagination);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/util/Pagination.java b/core-library/src/main/java/org/silverpeas/core/util/Pagination.java",
                "new file mode 100644",
                "index 0000000000..c1e44a8fca",
                "--- /dev/null",
                "+++ b/core-library/src/main/java/org/silverpeas/core/util/Pagination.java",
                "@@ -0,0 +1,122 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+",
                "+package org.silverpeas.core.util;",
                "+",
                "+import org.silverpeas.core.admin.PaginationPage;",
                "+",
                "+import java.util.function.Function;",
                "+",
                "+/**",
                "+ * @author silveryocha",
                "+ */",
                "+public class Pagination<T, R extends SilverpeasList<T>> {",
                "+",
                "+  final PaginationPage pagination;",
                "+  private Function<PaginationPage, R> paginatedDataSource;",
                "+  private Function<R, R> filter;",
                "+  private int factor = 5;",
                "+",
                "+  public Pagination(final PaginationPage pagination) {",
                "+    this.pagination = pagination;",
                "+  }",
                "+",
                "+  /**",
                "+   * The factor applied on page size on the paginated data source in order to retrieve more",
                "+   * data in the aime to get enough for filtering operation.",
                "+   * @param factor a positive integer.",
                "+   * @return the process instance itself.",
                "+   */",
                "+  public Pagination<T, R> factor(final int factor) {",
                "+    this.factor = factor;",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets data by applying a pagination clause.",
                "+   * @param paginatedDataSource the directive of data querying with pagination clause.",
                "+   * @return the process instance itself.",
                "+   */",
                "+  public Pagination<T, R> paginatedDataSource(",
                "+      final Function<PaginationPage, R> paginatedDataSource) {",
                "+    this.paginatedDataSource = paginatedDataSource;",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Applying a filtering operation on data querying from the data source.",
                "+   * @param filter the filtering directive.",
                "+   * @return the process instance itself.",
                "+   */",
                "+  public Pagination<T, R> filter(final Function<R, R> filter) {",
                "+    this.filter = filter;",
                "+    return this;",
                "+  }",
                "+",
                "+  /**",
                "+   * Execute the process of paginated data querying.",
                "+   * @return the result {@link SilverpeasList}.",
                "+   */",
                "+  @SuppressWarnings(\"unchecked\")",
                "+  public R execute() {",
                "+    if (paginatedDataSource == null) {",
                "+      throw new IllegalArgumentException(\"paginatedDataSource must be defined\");",
                "+    }",
                "+    if (factor <= 0) {",
                "+      throw new IllegalArgumentException(\"factor must be positive\");",
                "+    }",
                "+    PaginationPage currentPagination = new PaginationPage(pagination.getPageNumber(),",
                "+        pagination.getPageSize() * factor);",
                "+    R result = null;",
                "+    boolean running = true;",
                "+    while(running) {",
                "+      R currentResult = paginatedDataSource.apply(currentPagination);",
                "+      if (currentResult.size() < pagination.getPageSize()) {",
                "+        running = false;",
                "+      }",
                "+      currentResult = filter.apply(currentResult);",
                "+      result = completeResult(currentResult, result);",
                "+      currentPagination = new PaginationPage(currentPagination.getPageNumber() + 1,",
                "+          currentPagination.getPageSize());",
                "+      if (result.size() >= pagination.getPageSize()) {",
                "+        running = false;",
                "+      }",
                "+    }",
                "+    return result;",
                "+  }",
                "+",
                "+  private R completeResult(final R currentResult, final R previousResult) {",
                "+    R result = previousResult;",
                "+    if (result == null) {",
                "+      result = pagination.getPageSize() > 0 && currentResult.size() > pagination.getPageSize()",
                "+          ? currentResult.stream().limit(pagination.getPageSize()).collect(SilverpeasList.collector(currentResult))",
                "+          : currentResult;",
                "+    } else {",
                "+      for (int i = 0; i < currentResult.size() && result.size() < pagination.getPageSize(); i++) {",
                "+        result.add(currentResult.get(i));",
                "+      }",
                "+    }",
                "+    return result;",
                "+  }",
                "+}",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/portlets/portal/SPDesktopServlet.java b/core-war/src/main/java/org/silverpeas/web/portlets/portal/SPDesktopServlet.java",
                "index 99be7c17d3..f74a1a7967 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/portlets/portal/SPDesktopServlet.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/portlets/portal/SPDesktopServlet.java",
                "@@ -97,3 +97,4 @@ public class SPDesktopServlet extends SilverpeasAuthenticatedHttpServlet {",
                "     String spaceId = request.getParameter(\"SpaceId\");",
                "-    if (SpaceInst.PERSONAL_SPACE_ID.equals(spaceId) || SpaceInst.DEFAULT_SPACE_ID.equals(spaceId)) {",
                "+    if (StringUtil.isNotDefined(spaceId) || SpaceInst.PERSONAL_SPACE_ID.equals(spaceId) ||",
                "+        SpaceInst.DEFAULT_SPACE_ID.equals(spaceId)) {",
                "       request.getSession().removeAttribute(\"Silverpeas_Portlet_SpaceId\");"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/cache/service/InMemoryCache.java",
                "core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java",
                "core-api/src/main/java/org/silverpeas/core/util/ListSlice.java",
                "core-library/src/integration-test/java/org/silverpeas/core/contribution/publication/service/LastPublicationDAOIT.java",
                "core-library/src/integration-test/java/org/silverpeas/core/persistence/jdbc/JdbcSqlQueryIT.java",
                "core-library/src/main/java/org/silverpeas/core/admin/user/dao/GroupSearchCriteriaForDAO.java",
                "core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserSearchCriteriaForDAO.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/service/DefaultPublicationService.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/service/PublicationService.java",
                "core-library/src/main/java/org/silverpeas/core/util/Pagination.java",
                "core-war/src/main/java/org/silverpeas/web/portlets/portal/SPDesktopServlet.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "1cbdf358d15fa335d4fd86d9ac5bbd75e2a84707",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1539706653,
            "hunks": 24,
            "message": "Use now weld-junit5 instead of cdi-unit. The cdi-unit lib is now replaced either by weld-junit5 or by our own extensions. Improve SilverTestEnv extension to support depedency injections for some beans (those annotated with TestedBean).",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateImpl.java b/core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateImpl.java",
                "index 48202f159c..23f4507050 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateImpl.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateImpl.java",
                "@@ -306,4 +306,4 @@ public class PublicationTemplateImpl implements PublicationTemplate {",
                "     } else {",
                "-      String htmlFileName = PublicationTemplateManager.makePath(",
                "-          PublicationTemplateManager.templateDir, currentFileName);",
                "+      PublicationTemplateManager templateManager = PublicationTemplateManager.getInstance();",
                "+      String htmlFileName = templateManager.makePath(currentFileName);",
                "       currentFileName = currentFileName.replaceAll(\".html\", \".xml\");",
                "@@ -448,5 +448,4 @@ public class PublicationTemplateImpl implements PublicationTemplate {",
                "     }",
                "-",
                "-    String filePath = PublicationTemplateManager.makePath(PublicationTemplateManager.templateDir,",
                "-        xmlFileName);",
                "+    final PublicationTemplateManager templateManager = PublicationTemplateManager.getInstance();",
                "+    String filePath = templateManager.makePath(xmlFileName);",
                "@@ -505,4 +504,4 @@ public class PublicationTemplateImpl implements PublicationTemplate {",
                "       // Format this URL",
                "-      String xmlFilePath = PublicationTemplateManager.makePath(",
                "-          PublicationTemplateManager.templateDir, subDir + xmlFileName);",
                "+      PublicationTemplateManager templateManager = PublicationTemplateManager.getInstance();",
                "+      String xmlFilePath = templateManager.makePath(subDir + xmlFileName);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateManager.java b/core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateManager.java",
                "index c4f0bd03d4..f1219334e8 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateManager.java",
                "@@ -66,2 +66,3 @@ import javax.xml.bind.Unmarshaller;",
                " import java.io.File;",
                "+import java.nio.file.Paths;",
                " import java.util.ArrayList;",
                "@@ -87,10 +88,10 @@ public class PublicationTemplateManager implements ComponentInstanceDeletion {",
                "   private final Map<String, PublicationTemplateImpl> templates = new HashMap<>();",
                "-  public static String templateDir = null;",
                "-  public static String defaultTemplateDir = null;",
                "+  private String templateDir;",
                "+  private String defaultTemplateDir;",
                "   private JAXBContext JAXB_CONTEXT = null;",
                "-  static {",
                "-    SettingBundle templateSettings =",
                "+  @PostConstruct",
                "+  private void setup() {",
                "+    final SettingBundle templateSettings =",
                "         ResourceLocator.getSettingBundle(\"org.silverpeas.publicationTemplate.settings.template\");",
                "-",
                "     templateDir = templateSettings.getString(\"templateDir\");",
                "@@ -98,6 +99,2 @@ public class PublicationTemplateManager implements ComponentInstanceDeletion {",
                "         SystemWrapper.get().getenv(\"SILVERPEAS_HOME\") + \"/data/templateRepository/\";",
                "-  }",
                "-",
                "-  @PostConstruct",
                "-  private void setup() {",
                "     try {",
                "@@ -117,4 +114,9 @@ public class PublicationTemplateManager implements ComponentInstanceDeletion {",
                "-  public static String makePath(String dirName, String fileName) {",
                "-    if (!StringUtil.isDefined(dirName)) {",
                "+  /**",
                "+   * Makes the path denoted by the specified file name relative to the template directory.",
                "+   * @param fileName the path of a file or a directory",
                "+   * @return the absolute path of the specified file name in the template directory.",
                "+   */",
                "+  public String makePath(String fileName) {",
                "+    if (!StringUtil.isDefined(templateDir)) {",
                "       return fileName;",
                "@@ -122,9 +124,19 @@ public class PublicationTemplateManager implements ComponentInstanceDeletion {",
                "     if (!StringUtil.isDefined(fileName)) {",
                "-      return dirName;",
                "+      return templateDir;",
                "     }",
                "+    return Paths.get(templateDir, fileName).toString().replace('\\\\', '/');",
                "+  }",
                "-    if (dirName.charAt(dirName.length() - 1) == '/' || dirName.charAt(dirName.length() - 1) == '\\\\') {",
                "-      return dirName.replace('\\\\', '/') + fileName.replace('\\\\', '/');",
                "+  private String makeDefaultPath(String fileName) {",
                "+    if (!StringUtil.isDefined(templateDir)) {",
                "+      return fileName;",
                "+    }",
                "+    if (!StringUtil.isDefined(fileName)) {",
                "+      return defaultTemplateDir;",
                "     }",
                "-    return dirName.replace('\\\\', '/') + \"/\" + fileName.replace('\\\\', '/');",
                "+    return Paths.get(defaultTemplateDir, fileName).toString().replace('\\\\', '/');",
                "+  }",
                "+",
                "+  public String getTemplateDirectoryPath() {",
                "+    return this.templateDir;",
                "   }",
                "@@ -229,3 +241,3 @@ public class PublicationTemplateManager implements ComponentInstanceDeletion {",
                "       }",
                "-      String xmlFilePath = makePath(templateDir, xmlFileName);",
                "+      String xmlFilePath = makePath(xmlFileName);",
                "@@ -234,3 +246,3 @@ public class PublicationTemplateManager implements ComponentInstanceDeletion {",
                "         // file does not exist in directory, try to locate it in default one",
                "-        xmlFilePath = makePath(defaultTemplateDir, xmlFileName);",
                "+        xmlFilePath = makeDefaultPath(xmlFileName);",
                "         xmlFile = new File(xmlFilePath);",
                "@@ -283,4 +295,3 @@ public class PublicationTemplateManager implements ComponentInstanceDeletion {",
                "       // Format this URL",
                "-      String xmlFilePath = makePath(templateDir, xmlFileName);",
                "-",
                "+      String xmlFilePath = makePath(xmlFileName);",
                "       Marshaller marshaller = JAXB_CONTEXT.createMarshaller();",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/templatedesigner/control/TemplateDesignerSessionController.java b/core-war/src/main/java/org/silverpeas/web/templatedesigner/control/TemplateDesignerSessionController.java",
                "index 512168c534..e085605ab9 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/templatedesigner/control/TemplateDesignerSessionController.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/templatedesigner/control/TemplateDesignerSessionController.java",
                "@@ -61,3 +61,2 @@ import java.util.Arrays;",
                " import java.util.Collections;",
                "-import java.util.Comparator;",
                " import java.util.Iterator;",
                "@@ -152,4 +151,3 @@ public class TemplateDesignerSessionController extends AbstractComponentSessionC",
                "-    String templateDirPath =",
                "-        PublicationTemplateManager.makePath(PublicationTemplateManager.templateDir, fileName);",
                "+    String templateDirPath = PublicationTemplateManager.getInstance().makePath(fileName);",
                "     File templateDir = new File(templateDirPath);",
                "@@ -458,4 +456,4 @@ public class TemplateDesignerSessionController extends AbstractComponentSessionC",
                "-      String dir = PublicationTemplateManager",
                "-          .makePath(PublicationTemplateManager.templateDir, getSubdir(template.getFileName()));",
                "+      String dir =",
                "+          PublicationTemplateManager.getInstance().makePath(getSubdir(template.getFileName()));",
                "@@ -547,9 +545,6 @@ public class TemplateDesignerSessionController extends AbstractComponentSessionC",
                "     if (!result.isEmpty()) {",
                "-      Collections.sort(result, new Comparator<LocalizedComponent>() {",
                "-        @Override",
                "-        public int compare(LocalizedComponent o1, LocalizedComponent o2) {",
                "-          String valcomp1 = o1.getSuite() + o1.getLabel();",
                "-          String valcomp2 = o2.getSuite() + o2.getLabel();",
                "-          return valcomp1.toUpperCase().compareTo(valcomp2.toUpperCase());",
                "-        }",
                "+      Collections.sort(result, (o1, o2) -> {",
                "+        String valcomp1 = o1.getSuite() + o1.getLabel();",
                "+        String valcomp2 = o2.getSuite() + o2.getLabel();",
                "+        return valcomp1.toUpperCase().compareTo(valcomp2.toUpperCase());",
                "       });",
                "@@ -570,4 +565,3 @@ public class TemplateDesignerSessionController extends AbstractComponentSessionC",
                "     String fileName = string2fileName(duplicatedFormName);",
                "-    String templateDirPath =",
                "-        PublicationTemplateManager.makePath(PublicationTemplateManager.templateDir, fileName);",
                "+    String templateDirPath = PublicationTemplateManager.getInstance().makePath(fileName);",
                "     File templateDir = new File(templateDirPath);",
                "@@ -607,3 +601,5 @@ public class TemplateDesignerSessionController extends AbstractComponentSessionC",
                "     if (layerFileName != null && layerFileName.endsWith(\".html\")) {",
                "-      Path layerPath = Paths.get(PublicationTemplateManager.templateDir, layerFileName);",
                "+      Path layerPath =",
                "+          Paths.get(PublicationTemplateManager.getInstance().getTemplateDirectoryPath(),",
                "+              layerFileName);",
                "       File tempDir = new File(FileRepositoryManager.getTemporaryPath() + System.currentTimeMillis());",
                "@@ -636,8 +632,6 @@ public class TemplateDesignerSessionController extends AbstractComponentSessionC",
                "-    String templateDirPath =",
                "-        PublicationTemplateManager.makePath(PublicationTemplateManager.templateDir, name);",
                "+    String templateDirPath = PublicationTemplateManager.getInstance().makePath(name);",
                "     File templateDir = new File(templateDirPath);",
                "-    String templateFilePath =",
                "-        PublicationTemplateManager.makePath(PublicationTemplateManager.templateDir, fileName);",
                "+    String templateFilePath = PublicationTemplateManager.getInstance().makePath(fileName);",
                "     File templateFile = new File(templateFilePath);",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/templatedesigner/servlets/FormLayerServlet.java b/core-war/src/main/java/org/silverpeas/web/templatedesigner/servlets/FormLayerServlet.java",
                "index 6dd6e293a0..e9d989ba8c 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/templatedesigner/servlets/FormLayerServlet.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/templatedesigner/servlets/FormLayerServlet.java",
                "@@ -60,3 +60,3 @@ public class FormLayerServlet extends HttpServlet {",
                "       String filename = request.getParameter(\"Layer\");",
                "-      String dir = PublicationTemplateManager.makePath(PublicationTemplateManager.templateDir, form);",
                "+      String dir = PublicationTemplateManager.getInstance().makePath(form);",
                "       File file = new File(dir, filename);"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateImpl.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/template/publication/PublicationTemplateManager.java",
                "core-war/src/main/java/org/silverpeas/web/templatedesigner/control/TemplateDesignerSessionController.java",
                "core-war/src/main/java/org/silverpeas/web/templatedesigner/servlets/FormLayerServlet.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "9bf76d1230e1e9cd20025d6d4ee34f3e9c87b00b",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1537178228,
            "hunks": 2,
            "message": "Improve JdbcSqlQuery#orderBy method by setting the order by statement only if the sql part is defined.",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java",
                "index c9278700ce..ea8b7e6deb 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java",
                "@@ -334,3 +334,4 @@ public class JdbcSqlQuery {",
                "   /**",
                "-   * Orders the result of the query by the specified statement.",
                "+   * Orders the result of the query by the specified statement. If the statement isn't defined,",
                "+   * then no ordering will be done.",
                "    * @param sqlPart the SQL part that contains the statement over which the result of the query",
                "@@ -340,3 +341,6 @@ public class JdbcSqlQuery {",
                "   public JdbcSqlQuery orderBy(String sqlPart) {",
                "-    return addSqlPart(\"ORDER BY \" + sqlPart);",
                "+    if (StringUtil.isDefined(sqlPart)) {",
                "+      return addSqlPart(\"ORDER BY \" + sqlPart);",
                "+    }",
                "+    return this;",
                "   }"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/JdbcSqlQuery.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "0cf95b71de46c322c77791547910cd618a8734a6",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1544795954,
            "hunks": 4,
            "message": "fixing bug when displaying treeview (folder sharing and form field 'explorer') treeview was displaying only first level, browsing was impossible",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/ExplorerFieldDisplayer.java b/core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/ExplorerFieldDisplayer.java",
                "index dfde073f24..10253bb440 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/ExplorerFieldDisplayer.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/ExplorerFieldDisplayer.java",
                "@@ -76,4 +76,3 @@ public class ExplorerFieldDisplayer extends AbstractFieldDisplayer<ExplorerField",
                "   @Override",
                "-  public void displayScripts(PrintWriter out, FieldTemplate template, PagesContext pageContext)",
                "-      throws IOException {",
                "+  public void displayScripts(PrintWriter out, FieldTemplate template, PagesContext pageContext) {",
                "     String language = pageContext.getLanguage();",
                "@@ -120,5 +119,3 @@ public class ExplorerFieldDisplayer extends AbstractFieldDisplayer<ExplorerField",
                "-    if (!field.getTypeName().equals(ExplorerField.TYPE)) {",
                "-",
                "-    } else {",
                "+    if (field.getTypeName().equals(ExplorerField.TYPE)) {",
                "       nodePK = field.getNodePK();",
                "@@ -145,5 +142,4 @@ public class ExplorerFieldDisplayer extends AbstractFieldDisplayer<ExplorerField",
                "           URLUtil.getApplicationURL() + \"/explorer/jsp/explorer.jsp\" + \"?elementHidden=\" +",
                "-          fieldName + \"&elementVisible=\" + fieldName + \"_path\" + \"&dedicatedToWriters=true\" +",
                "-          \"&scope=\" + scope;",
                "-      html += \"','explorer',400,600,'scrollbars=yes');\\\" >\";",
                "+          fieldName + \"&elementVisible=\" + fieldName + \"_path\" + \"&scope=\" + scope;",
                "+      html += \"','explorer',800,600,'scrollbars=yes');\\\" >\";",
                "       html += \"<img src=\\\"\" + selectImg + \"\\\" width=\\\"15\\\" height=\\\"15\\\" border=\\\"0\\\" alt=\\\"\" +",
                "diff --git a/core-war/src/main/java/org/silverpeas/web/node/servlets/GetNodes.java b/core-war/src/main/java/org/silverpeas/web/node/servlets/GetNodes.java",
                "deleted file mode 100644",
                "index 5b1ad0343a..0000000000",
                "--- a/core-war/src/main/java/org/silverpeas/web/node/servlets/GetNodes.java",
                "+++ /dev/null",
                "@@ -1,296 +0,0 @@",
                "-/*",
                "- * Copyright (C) 2000 - 2018 Silverpeas",
                "- *",
                "- * This program is free software: you can redistribute it and/or modify",
                "- * it under the terms of the GNU Affero General Public License as",
                "- * published by the Free Software Foundation, either version 3 of the",
                "- * License, or (at your option) any later version.",
                "- *",
                "- * As a special exception to the terms and conditions of version 3.0 of",
                "- * the GPL, you may redistribute this Program in connection with Free/Libre",
                "- * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "- * FLOSS exception.  You should have received a copy of the text describing",
                "- * the FLOSS exception, and it is also available here:",
                "- * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "- *",
                "- * This program is distributed in the hope that it will be useful,",
                "- * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "- * GNU Affero General Public License for more details.",
                "- *",
                "- * You should have received a copy of the GNU Affero General Public License",
                "- * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "- */",
                "-package org.silverpeas.web.node.servlets;",
                "-",
                "-import org.silverpeas.core.admin.ObjectType;",
                "-import org.silverpeas.core.admin.component.model.ComponentInstLight;",
                "-import org.silverpeas.core.admin.service.OrganizationController;",
                "-import org.silverpeas.core.admin.user.model.SilverpeasRole;",
                "-import org.silverpeas.core.node.model.NodeDetail;",
                "-import org.silverpeas.core.node.model.NodePK;",
                "-import org.silverpeas.core.node.service.NodeService;",
                "-import org.silverpeas.core.util.JSONCodec;",
                "-import org.silverpeas.core.util.StringUtil;",
                "-import org.silverpeas.core.web.mvc.controller.MainSessionController;",
                "-import org.silverpeas.web.servlets.RestRequest;",
                "-",
                "-import javax.inject.Inject;",
                "-import javax.servlet.ServletException;",
                "-import javax.servlet.http.HttpServlet;",
                "-import javax.servlet.http.HttpServletRequest;",
                "-import javax.servlet.http.HttpServletResponse;",
                "-import javax.servlet.http.HttpSession;",
                "-import java.io.IOException;",
                "-import java.io.Writer;",
                "-import java.util.ArrayList;",
                "-import java.util.Arrays;",
                "-import java.util.Collection;",
                "-import java.util.Iterator;",
                "-import java.util.List;",
                "-import java.util.function.Function;",
                "-",
                "-import static org.silverpeas.core.web.mvc.controller.MainSessionController",
                "-    .MAIN_SESSION_CONTROLLER_ATT;",
                "-",
                "-public class GetNodes extends HttpServlet {",
                "-",
                "-  private static final long serialVersionUID = -6406943829713290811L;",
                "-",
                "-  @Inject",
                "-  private OrganizationController organizationController;",
                "-",
                "-  @Override",
                "-  protected void doGet(HttpServletRequest req, HttpServletResponse resp)",
                "-      throws ServletException, IOException {",
                "-    doPost(req, resp);",
                "-  }",
                "-",
                "-  @Override",
                "-  protected void doPost(HttpServletRequest request, HttpServletResponse response)",
                "-      throws ServletException, IOException {",
                "-    response.setContentType(\"application/json\");",
                "-    Writer writer = response.getWriter();",
                "-    HttpSession session = request.getSession(true);",
                "-    MainSessionController mainSessionCtrl =",
                "-        (MainSessionController) session.getAttribute(MAIN_SESSION_CONTROLLER_ATT);",
                "-    if (mainSessionCtrl == null) {",
                "-      writer.write(\"This service required to be logged in !\");",
                "-      return;",
                "-    }",
                "-",
                "-    RestRequest req = new RestRequest(request, null);",
                "-",
                "-    String scope = req.getElementValue(\"scope\");",
                "-    if (StringUtil.isDefined(scope)) {",
                "-      // One or more application instances are requested",
                "-      String[] ids = scope.split(\",\");",
                "-      List<String> componentIds = Arrays.asList(ids);",
                "-",
                "-      // retain only available instances for current user",
                "-      List<String> availableComponentIds = new ArrayList<>();",
                "-      for (String componentId : componentIds) {",
                "-        if (organizationController.isComponentAvailable(componentId, mainSessionCtrl.getUserId())) {",
                "-          availableComponentIds.add(componentId);",
                "-        }",
                "-      }",
                "-",
                "-      if (availableComponentIds.size() == 1) {",
                "-        // only one instance is available, root must be expanded by default",
                "-        NodeDetail node = getRoot(availableComponentIds.get(0), mainSessionCtrl);",
                "-        writer.write(getNodeAsJSTreeObject(node, mainSessionCtrl, \"selected,opened\"));",
                "-      } else {",
                "-        // at least two instances are available, only root of instances have to be displayed",
                "-        List<NodeDetail> nodes = new ArrayList<>();",
                "-        for (String componentId : availableComponentIds) {",
                "-          nodes.add(getRoot(componentId, mainSessionCtrl));",
                "-        }",
                "-        writer.write(getListAsJSONArray(nodes, mainSessionCtrl));",
                "-      }",
                "-",
                "-    } else {",
                "-      String componentId = req.getElementValue(\"componentid\");",
                "-      String id = req.getElementValue(\"id\");",
                "-      if (!StringUtil.isDefined(id)) {",
                "-        id = \"0\";",
                "-      }",
                "-      NodePK nodePK = new NodePK(id, componentId);",
                "-      getChildren(nodePK, mainSessionCtrl, writer);",
                "-    }",
                "-",
                "-  }",
                "-",
                "-  private void getChildren(NodePK pk, MainSessionController session, Writer writer)",
                "-      throws IOException {",
                "-    NodeDetail node = getNodeBm().getDetail(pk);",
                "-    List<NodeDetail> availableChildren = getAvailableChildren(node.getChildrenDetails(), session);",
                "-    writer.write(getListAsJSONArray(availableChildren, session));",
                "-  }",
                "-",
                "-  private NodeDetail getRoot(String componentId, MainSessionController session) {",
                "-    NodeDetail node = getNodeBm().getHeader(new NodePK(\"0\", componentId));",
                "-    ComponentInstLight component = organizationController.getComponentInstLight(componentId);",
                "-    if (component != null) {",
                "-      node.setName(component.getLabel(session.getFavoriteLanguage()));",
                "-    }",
                "-    return node;",
                "-  }",
                "-",
                "-  private List<NodeDetail> getAvailableChildren(Collection<NodeDetail> children,",
                "-      MainSessionController session) {",
                "-    List<NodeDetail> availableChildren = new ArrayList<>();",
                "-    for (NodeDetail child : children) {",
                "-      String childId = child.getNodePK().getId();",
                "-      if (child.getNodePK().isTrash() || \"2\".equals(childId)) {",
                "-        // do not add these nodes",
                "-      } else if (!child.haveRights()) {",
                "-        availableChildren.add(child);",
                "-      } else {",
                "-        int rightsDependsOn = child.getRightsDependsOn();",
                "-        boolean nodeAvailable = organizationController",
                "-            .isObjectAvailable(rightsDependsOn, ObjectType.NODE, child.getNodePK().getInstanceId(),",
                "-                session.getUserId());",
                "-        if (nodeAvailable) {",
                "-          availableChildren.add(child);",
                "-        } else { // check if at least one descendant is available",
                "-          Iterator<NodeDetail> descendants = getNodeBm().getDescendantDetails(child).iterator();",
                "-          NodeDetail descendant = null;",
                "-          boolean childAllowed = false;",
                "-          while (!childAllowed && descendants.hasNext()) {",
                "-            descendant = descendants.next();",
                "-            if (descendant.getRightsDependsOn() == rightsDependsOn) {",
                "-              // same rights of father (which is not available) so it is not available too",
                "-            } else {",
                "-              // different rights of father check if it is available",
                "-              if (organizationController",
                "-                  .isObjectAvailable(descendant.getRightsDependsOn(), ObjectType.NODE,",
                "-                      child.getNodePK().",
                "-                          getInstanceId(), session.getUserId())) {",
                "-                childAllowed = true;",
                "-                if (!availableChildren.contains(child)) {",
                "-                  availableChildren.add(child);",
                "-                }",
                "-              }",
                "-            }",
                "-          }",
                "-        }",
                "-      }",
                "-    }",
                "-    return availableChildren;",
                "-  }",
                "-",
                "-  private String getListAsJSONArray(Collection<NodeDetail> nodes, MainSessionController session) {",
                "-    return JSONCodec.encodeArray(jsonNodeDetails -> {",
                "-      for (NodeDetail node : nodes) {",
                "-        jsonNodeDetails.addJSONObject(root -> {",
                "-          root.put(\"text\", node.getName(session.getFavoriteLanguage()))",
                "-              .put(\"id\", node.getNodePK().getId())",
                "-              .putJSONObject(\"attr\", getJsonAttr(node))",
                "-              .putJSONObject(\"state\", getJsonState(\"closed\"))",
                "-              .put(\"type\", getNodeType(node, session));",
                "-          return root;",
                "-        });",
                "-      }",
                "-      return jsonNodeDetails;",
                "-    });",
                "-  }",
                "-",
                "-  private String getNodeAsJSTreeObject(NodeDetail node, MainSessionController session,",
                "-      String state) {",
                "-    return JSONCodec.encodeObject(jsonNode -> {",
                "-      jsonNode.put(\"text\", node.getName(session.getFavoriteLanguage()))",
                "-          .put(\"id\", node.getNodePK().getId())",
                "-          .put(\"type\", getNodeType(node, session))",
                "-          .putJSONObject(\"attr\", getJsonAttr(node))",
                "-          .putJSONObject(\"state\", getJsonState(state));",
                "-      return jsonNode;",
                "-    });",
                "-  }",
                "-",
                "-  private Function<JSONCodec.JSONObject, JSONCodec.JSONObject> getJsonState(String state) {",
                "-    return o -> {",
                "-        o.put(\"selected\", state.contains(\"selected\"));",
                "-        o.put(\"opened\", state.contains(\"opened\"));",
                "-        return o;",
                "-    };",
                "-  }",
                "-",
                "-  private Function<JSONCodec.JSONObject, JSONCodec.JSONObject> getJsonAttr(NodeDetail node) {",
                "-    return o -> {",
                "-      o.put(\"id\", node.getNodePK().getId())",
                "-          .put(\"instanceId\", node.getNodePK().getInstanceId())",
                "-          .put(\"path\", node.getFullPath());",
                "-      return o;",
                "-    };",
                "-  }",
                "-",
                "-  private String getNodeType(NodeDetail node, MainSessionController session) {",
                "-    String role = getRole(session, node);",
                "-    if (node.getNodePK().isRoot()) {",
                "-      role += \"-root\";",
                "-    }",
                "-    return role;",
                "-  }",
                "-",
                "-  private boolean isRightsEnabled(MainSessionController session, String componentId) {",
                "-    return StringUtil",
                "-        .getBooleanValue(session.getComponentParameterValue(componentId, \"rightsOnTopics\"));",
                "-  }",
                "-",
                "-  private String getRole(MainSessionController session, NodeDetail node) {",
                "-    if (node.getNodePK().isRoot() && !isPublicationAllowedOnRoot(node.getNodePK(), session)) {",
                "-      return SilverpeasRole.user.toString();",
                "-    }",
                "-    if (!isRightsEnabled(session, node.getNodePK().getInstanceId())) {",
                "-      return getProfile(organizationController",
                "-          .getUserProfiles(session.getUserId(), node.getNodePK().getInstanceId()));",
                "-    }",
                "-",
                "-    // check if we have to take care of topic's rights",
                "-    if (node.haveRights()) {",
                "-      int rightsDependsOn = node.getRightsDependsOn();",
                "-      return getProfile(organizationController",
                "-          .getUserProfiles(session.getUserId(), node.getNodePK().getInstanceId(), rightsDependsOn,",
                "-              ObjectType.NODE));",
                "-    } else {",
                "-      return getProfile(organizationController",
                "-          .getUserProfiles(session.getUserId(), node.getNodePK().getInstanceId()));",
                "-    }",
                "-  }",
                "-",
                "-  private String getProfile(String[] profiles) {",
                "-    SilverpeasRole flag = SilverpeasRole.user;",
                "-    for (String profile : profiles) {",
                "-      SilverpeasRole role = SilverpeasRole.valueOf(profile);",
                "-      switch (role) {",
                "-        case admin:",
                "-          return SilverpeasRole.admin.toString();",
                "-        case publisher:",
                "-          flag = SilverpeasRole.publisher;",
                "-          break;",
                "-        case writer:",
                "-          if (flag != SilverpeasRole.publisher) {",
                "-            flag = SilverpeasRole.writer;",
                "-          }",
                "-          break;",
                "-        case supervisor:",
                "-          flag = SilverpeasRole.supervisor;",
                "-          break;",
                "-      }",
                "-    }",
                "-    return flag.toString();",
                "-  }",
                "-",
                "-  private NodeService getNodeBm() {",
                "-    return NodeService.get();",
                "-  }",
                "-",
                "-  private boolean isPublicationAllowedOnRoot(NodePK pk, MainSessionController session) {",
                "-    if (pk.getInstanceId().startsWith(\"toolbox\")) {",
                "-      return true;",
                "-    }",
                "-    String param = session.getComponentParameterValue(pk.getInstanceId(), \"nbPubliOnRoot\");",
                "-    return StringUtil.isInteger(param) && Integer.parseInt(param) == 0;",
                "-  }",
                "-",
                "-}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/contribution/content/form/displayers/ExplorerFieldDisplayer.java",
                "core-war/src/main/java/org/silverpeas/web/node/servlets/GetNodes.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: StringUtil",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "4e67bda13679fe879d609cf8062c3ef3ffd6b853",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1539001129,
            "hunks": 15,
            "message": "Bug #9733 & #10067: adjusting some stuff. # Conflicts: #\tcore-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java b/core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java",
                "index 9900462ef0..ca9f2a5091 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java",
                "@@ -63,3 +63,2 @@ import java.util.Set;",
                "-import static org.silverpeas.core.i18n.I18NHelper.defaultLocale;",
                " import static org.silverpeas.core.index.indexing.model.IndexProcessor.doRemoveAll;",
                "@@ -452,11 +451,11 @@ public class IndexManager {",
                "     final Iterator<String> languages;",
                "-    if (indexEntry.getObjectType() != null && indexEntry.getObjectType().startsWith(",
                "-        ATTACHMENT_PREFIX)) {",
                "+    if (indexEntry.getObjectType() != null &&",
                "+        indexEntry.getObjectType().startsWith(ATTACHMENT_PREFIX)) {",
                "       String lang = indexEntry.getLang();",
                "       if (indexEntry.getTitle(lang) != null) {",
                "-        addTitleToDocContent(indexEntry.getTitle(lang), doc, lang);",
                "+        addToDocContent(indexEntry.getTitle(lang), doc, lang);",
                "       }",
                "-      addTitleToDocContent(indexEntry.getFilename(), doc, lang);",
                "+      addToDocContent(indexEntry.getFilename(), doc, lang);",
                "     } else {",
                "-      addTitleToDocContent(indexEntry.getTitle(), doc);",
                "+      addToDocContent(indexEntry.getTitle(), doc);",
                "     }",
                "@@ -467,11 +466,9 @@ public class IndexManager {",
                "       if (indexEntry.getTitle(language) != null) {",
                "-        addTitleToDocContent(indexEntry.getTitle(language), doc, language);",
                "+        addToDocContent(indexEntry.getTitle(language), doc, language);",
                "       }",
                "       if (indexEntry.getPreview(language) != null) {",
                "-        doc.add(new Field(getFieldName(CONTENT, language), indexEntry.getPreview(language),",
                "-            TextField.TYPE_NOT_STORED));",
                "+        addToDocContent(indexEntry.getPreview(language), doc, language);",
                "       }",
                "       if (indexEntry.getKeywords(language) != null) {",
                "-        doc.add(new Field(getFieldName(CONTENT, language), indexEntry.getKeywords(language),",
                "-            TextField.TYPE_NOT_STORED));",
                "+        addToDocContent(indexEntry.getKeywords(language), doc, language);",
                "       }",
                "@@ -480,15 +477,14 @@ public class IndexManager {",
                "-  private void addTitleToDocContent(String title, Document doc) {",
                "-    addTitleToDocContent(CONTENT, title, doc);",
                "+  private void addToDocContent(String value, Document doc) {",
                "+    addToDocContent(CONTENT, value, doc);",
                "   }",
                "-  private void addTitleToDocContent(String title, Document doc, String lang) {",
                "+  private void addToDocContent(String value, Document doc, String lang) {",
                "     String fieldName = getFieldName(CONTENT, lang);",
                "-    addTitleToDocContent(fieldName, title, doc);",
                "+    addToDocContent(fieldName, value, doc);",
                "   }",
                "-  private void addTitleToDocContent(String fieldName, String title, Document doc) {",
                "-    doc.add(new Field(fieldName, title, TextField.TYPE_NOT_STORED));",
                "-    doc.add(new Field(fieldName, title.replaceAll(\"_\", \" \").replaceAll(\"-\", \" \"),",
                "-        TextField.TYPE_NOT_STORED));",
                "+  private void addToDocContent(String fieldName, String value, Document doc) {",
                "+    doc.add(new Field(fieldName, value, TextField.TYPE_NOT_STORED));",
                "+    doc.add(new Field(fieldName, value.replaceAll(\"[_-]\", \" \"), TextField.TYPE_NOT_STORED));",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java b/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "index 3b04bda6c8..a1048fe7d3 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "@@ -30,3 +30,2 @@ import org.apache.lucene.index.MultiReader;",
                " import org.apache.lucene.index.Term;",
                "-import org.apache.lucene.queryparser.classic.MultiFieldQueryParser;",
                " import org.apache.lucene.queryparser.classic.QueryParser;",
                "@@ -298,14 +297,4 @@ public class IndexSearcher {",
                "         // search over all languages",
                "-        String[] fields = new String[I18NHelper.getNumberOfLanguages()];",
                "-",
                "-        int l = 0;",
                "         Set<String> languages = I18NHelper.getAllSupportedLanguages();",
                "-        for (String lang : languages) {",
                "-          fields[l] = getFieldName(searchField, lang);",
                "-          l++;",
                "-        }",
                "-",
                "-        MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, analyzer);",
                "-        mfqp.setDefaultOperator(defaultOperator);",
                "-        parsedQuery = mfqp.parse(query.getQuery());",
                "+        parsedQuery = getQuery(searchField, query.getQuery(), languages, analyzer);",
                "       } else {"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java",
                "core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9733": "",
                "10067": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9733, 10067",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6a40a87e05249f7b23093a9fe6a880248be9ee16",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1538740335,
            "hunks": 3,
            "message": "fixing bug #10067 # Conflicts: #\tcore-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java b/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "index 7d68676a0e..3b04bda6c8 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "@@ -371,14 +371,13 @@ public class IndexSearcher {",
                "       throws ParseException {",
                "-    Map<String, BooleanClause.Occur> fieldNames = new HashMap<>();",
                "+    BooleanQuery.Builder booleanQueryBuilder = new BooleanQuery.Builder();",
                "     for (String language : languages) {",
                "-      fieldNames.put(getFieldName(fieldName, language), BooleanClause.Occur.SHOULD);",
                "-    }",
                "-    Query query;",
                "-    try {",
                "-      query = MultiFieldQueryParser.parse(queryStr, fieldNames.keySet().toArray(new String[0]),",
                "-          fieldNames.values().toArray(new BooleanClause.Occur[0]), analyzer);",
                "-    } catch (org.apache.lucene.queryparser.classic.ParseException e) {",
                "-      throw new org.silverpeas.core.index.search.model.ParseException(INDEX_SEARCH_ERROR, e);",
                "+      QueryParser parser = new QueryParser(getFieldName(fieldName, language), analyzer);",
                "+      parser.setDefaultOperator(defaultOperator);",
                "+      try {",
                "+        booleanQueryBuilder.add(parser.parse(queryStr), BooleanClause.Occur.SHOULD);",
                "+      } catch (org.apache.lucene.queryparser.classic.ParseException e) {",
                "+        throw new org.silverpeas.core.index.search.model.ParseException(INDEX_SEARCH_ERROR, e);",
                "+      }",
                "     }",
                "-    return query;",
                "+    return booleanQueryBuilder.build();",
                "   }"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10067": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10067",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6d7cc97876c925a8fb3ad03f6cc8f60460267448",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1546018990,
            "hunks": 4,
            "message": "fixing bug #10299",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java b/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "index 951806c4c5..fb17da255b 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "@@ -1681,11 +1681,16 @@ class Admin implements Administration {",
                "       }",
                "-      if (!spaceProfile.isInherited()) {",
                "-        SpaceProfileInst inheritedProfile = spaceProfileManager.getInheritedSpaceProfileInstByName(",
                "-            spaceId, spaceProfile.getName());",
                "-        if (inheritedProfile != null) {",
                "-          spaceProfile.addGroups(inheritedProfile.getAllGroups());",
                "-          spaceProfile.addUsers(inheritedProfile.getAllUsers());",
                "+",
                "+      // profile 'Manager' does not need to be spread",
                "+      if (!spaceProfile.isManager()) {",
                "+        if (!spaceProfile.isInherited()) {",
                "+          SpaceProfileInst inheritedProfile = spaceProfileManager",
                "+              .getInheritedSpaceProfileInstByName(spaceId, spaceProfile.getName());",
                "+          if (inheritedProfile != null) {",
                "+            spaceProfile.addGroups(inheritedProfile.getAllGroups());",
                "+            spaceProfile.addUsers(inheritedProfile.getAllUsers());",
                "+          }",
                "         }",
                "+        spreadSpaceProfile(spaceId, spaceProfile);",
                "       }",
                "-      spreadSpaceProfile(spaceId, spaceProfile);",
                "+",
                "       cache.opAddSpaceProfile(spaceProfile);",
                "@@ -1758,2 +1763,3 @@ class Admin implements Administration {",
                "+      // profile 'Manager' does not need to be spread",
                "       if (!oldSpaceProfile.isManager()) {"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10299": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a63d23e34153c5fd3cdbd95700787a64b9ae3dd4"
                ],
                [
                    "no-tag",
                    "b61870e525d0c971da40ad55b6c72879ecaf4c3a"
                ]
            ],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10299",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "353d16ad71235a57193720869159b2f15ec75b18",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1546623324,
            "hunks": 2,
            "message": "Clipboard was shared by all users ! MainClipboardService from Singleton to SessionScoped.",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/clipboard/service/MainClipboardService.java b/core-library/src/main/java/org/silverpeas/core/clipboard/service/MainClipboardService.java",
                "index d63452585c..74991135e5 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/clipboard/service/MainClipboardService.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/clipboard/service/MainClipboardService.java",
                "@@ -30,3 +30,3 @@ import org.silverpeas.core.index.indexing.model.IndexEntry;",
                " import javax.annotation.PostConstruct;",
                "-import javax.inject.Singleton;",
                "+import javax.enterprise.context.SessionScoped;",
                " import javax.transaction.Transactional;",
                "@@ -44,3 +44,3 @@ import static org.silverpeas.core.clipboard.ClipboardSelection.IndexFlavor;",
                "  */",
                "-@Singleton",
                "+@SessionScoped",
                " @Transactional"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/clipboard/service/MainClipboardService.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "076e8e12b1bdbb2dc628b0e9406af83e406c4ebf",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1541588250,
            "hunks": 14,
            "message": "Optimizing a SQL query executed several times at user session start. Using also request cache into WEB treatments using this SQL query result.",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/user/UserManager.java b/core-library/src/main/java/org/silverpeas/core/admin/user/UserManager.java",
                "index d892a01f4e..a4fd224f7e 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/user/UserManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/user/UserManager.java",
                "@@ -470,4 +470,3 @@ public class UserManager {",
                "     try (Connection connection = DBUtil.openConnection()) {",
                "-      UserDetail user = userDAO.getUserByLogin(connection, sDomainId, sLogin);",
                "-      return user != null ? user.getId() : null;",
                "+      return userDAO.getUserIdByLoginAndDomain(connection, sLogin, sDomainId);",
                "     } catch (Exception e) {",
                "@@ -547,5 +546,5 @@ public class UserManager {",
                "           \"Ajout de l'utilisateur \" + userDetail.getSpecificId() + \" dans la base...\");",
                "-      UserDetail user = userDAO.getUserByLogin(connection, userDetail.getDomainId(),",
                "-          userDetail.getLogin());",
                "-      if (user != null) {",
                "+      final String alreadyExistingUserId = userDAO",
                "+          .getUserIdByLoginAndDomain(connection, userDetail.getLogin(), userDetail.getDomainId());",
                "+      if (alreadyExistingUserId != null) {",
                "         SynchroDomainReport.error(USERMANAGER_SYNCHRO_REPORT + addUser,",
                "@@ -562,3 +561,3 @@ public class UserManager {",
                "-      String userId = userDAO.saveUser(connection, userDetail);",
                "+      final String userId = userDAO.saveUser(connection, userDetail);",
                "       userDetail.setId(userId);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserDAO.java b/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserDAO.java",
                "index 1476a7effa..fb60bd05d2 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserDAO.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserDAO.java",
                "@@ -187,9 +187,10 @@ public class UserDAO {",
                "-  public UserDetail getUserByLogin(final Connection connection, final String domainId,",
                "-      final String login) throws SQLException {",
                "-    return JdbcSqlQuery.createSelect(USER_COLUMNS)",
                "+  public String getUserIdByLoginAndDomain(final Connection connection, final String login,",
                "+      final String domainId) throws SQLException {",
                "+    return JdbcSqlQuery.createSelect(\"id\")",
                "         .from(USER_TABLE)",
                "         .where(DOMAIN_ID_CRITERION, Integer.parseInt(domainId))",
                "-        .and(\"lower(login) = lower(?)\", login).and(STATE_CRITERION_NOT, UserState.DELETED)",
                "-        .executeUniqueWith(connection, UserDAO::fetchUser);",
                "+        .and(\"lower(login) = lower(?)\", login)",
                "+        .and(STATE_CRITERION_NOT, UserState.DELETED)",
                "+        .executeUniqueWith(connection, r -> Integer.toString(r.getInt(1)));",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/scheduler/quartz/JobExecutor.java b/core-library/src/main/java/org/silverpeas/core/scheduler/quartz/JobExecutor.java",
                "index e1a66db9a5..f4fcc0dcf7 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/scheduler/quartz/JobExecutor.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/scheduler/quartz/JobExecutor.java",
                "@@ -27,2 +27,3 @@ import org.quartz.JobDetail;",
                " import org.quartz.JobExecutionException;",
                "+import org.silverpeas.core.cache.service.CacheServiceProvider;",
                " import org.silverpeas.core.scheduler.Job;",
                "@@ -63,2 +64,3 @@ public abstract class JobExecutor implements org.quartz.Job {",
                "       final SchedulerEventListener eventListener) {",
                "+    CacheServiceProvider.clearAllThreadCaches();",
                "     if (eventListener == null) {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/security/authentication/verifier/AbstractAuthenticationVerifier.java b/core-library/src/main/java/org/silverpeas/core/security/authentication/verifier/AbstractAuthenticationVerifier.java",
                "index fd9afedf83..e42ca4a06c 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/security/authentication/verifier/AbstractAuthenticationVerifier.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/security/authentication/verifier/AbstractAuthenticationVerifier.java",
                "@@ -26,3 +26,2 @@ package org.silverpeas.core.security.authentication.verifier;",
                " import org.silverpeas.core.admin.service.AdminException;",
                "-import org.silverpeas.core.admin.service.AdministrationServiceProvider;",
                " import org.silverpeas.core.admin.user.model.UserDetail;",
                "@@ -35,2 +34,5 @@ import java.util.MissingResourceException;",
                "+import static org.silverpeas.core.admin.service.AdministrationServiceProvider.getAdminService;",
                "+import static org.silverpeas.core.cache.service.CacheServiceProvider.getRequestCacheService;",
                "+",
                " /**",
                "@@ -41,6 +43,8 @@ import java.util.MissingResourceException;",
                " class AbstractAuthenticationVerifier {",
                "-  protected final static SettingBundle settings = ResourceLocator.getSettingBundle(",
                "+  protected static final SettingBundle settings = ResourceLocator.getSettingBundle(",
                "       \"org.silverpeas.authentication.settings.authenticationSettings\");",
                "-  protected final static SettingBundle otherSettings =",
                "+  protected static final SettingBundle otherSettings =",
                "       ResourceLocator.getSettingBundle(\"org.silverpeas.authentication.settings.passwordExpiration\");",
                "+  private static final String CACHE_KEY_PREFIX =",
                "+      AbstractAuthenticationVerifier.class.getSimpleName() + \"_userByLoginDomain_\";",
                "@@ -77,9 +81,12 @@ class AbstractAuthenticationVerifier {",
                "    */",
                "-  protected static UserDetail getUserByCredential(AuthenticationCredential credential) {",
                "-    try {",
                "-      return UserDetail.getById(AdministrationServiceProvider.getAdminService()",
                "-          .getUserIdByLoginAndDomain(credential.getLogin(), credential.getDomainId()));",
                "-    } catch (AdminException ignore) {",
                "-      return null;",
                "-    }",
                "+  static UserDetail getUserByCredential(AuthenticationCredential credential) {",
                "+    final String cacheKey = CACHE_KEY_PREFIX + credential.getLogin() + credential.getDomainId();",
                "+    return getRequestCacheService().getCache().computeIfAbsent(cacheKey, UserDetail.class, () -> {",
                "+      try {",
                "+        return UserDetail.getById(getAdminService()",
                "+            .getUserIdByLoginAndDomain(credential.getLogin(), credential.getDomainId()));",
                "+      } catch (AdminException ignore) {",
                "+        return null;",
                "+      }",
                "+    });",
                "   }",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/mvc/SilverListener.java b/core-web/src/main/java/org/silverpeas/core/web/mvc/SilverListener.java",
                "index 0dab1f6b9c..b451d45307 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/mvc/SilverListener.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/mvc/SilverListener.java",
                "@@ -142,3 +142,3 @@ public class SilverListener",
                "   private void clearRequestCache() {",
                "-    CacheServiceProvider.getRequestCacheService().getCache().clear();",
                "+    CacheServiceProvider.clearAllThreadCaches();",
                "   }"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/admin/user/UserManager.java",
                "core-library/src/main/java/org/silverpeas/core/admin/user/dao/UserDAO.java",
                "core-library/src/main/java/org/silverpeas/core/scheduler/quartz/JobExecutor.java",
                "core-library/src/main/java/org/silverpeas/core/security/authentication/verifier/AbstractAuthenticationVerifier.java",
                "core-web/src/main/java/org/silverpeas/core/web/mvc/SilverListener.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: execute, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "64311bbb0afdde2efc07d804e2e077f8086e893f",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1538728984,
            "hunks": 11,
            "message": "fixing bug #9733",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java b/core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java",
                "index dc8cca49be..9900462ef0 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java",
                "@@ -60,3 +60,2 @@ import java.util.LinkedHashMap;",
                " import java.util.List;",
                "-import java.util.Locale;",
                " import java.util.Map;",
                "@@ -457,12 +456,7 @@ public class IndexManager {",
                "       if (indexEntry.getTitle(lang) != null) {",
                "-        doc.add(new Field(getFieldName(CONTENT, lang), indexEntry.getTitle(lang),",
                "-            TextField.TYPE_NOT_STORED));",
                "+        addTitleToDocContent(indexEntry.getTitle(lang), doc, lang);",
                "       }",
                "-      doc.add(new Field(getFieldName(CONTENT, lang), indexEntry.getFilename(),",
                "-          TextField.TYPE_NOT_STORED));",
                "-      doc.add(new Field(getFieldName(CONTENT, lang), indexEntry.getFilename(),",
                "-          TextField.TYPE_NOT_STORED));",
                "+      addTitleToDocContent(indexEntry.getFilename(), doc, lang);",
                "     } else {",
                "-      doc.add(new Field(CONTENT, indexEntry.getTitle().toLowerCase(defaultLocale),",
                "-          TextField.TYPE_NOT_STORED));",
                "+      addTitleToDocContent(indexEntry.getTitle(), doc);",
                "     }",
                "@@ -473,12 +467,11 @@ public class IndexManager {",
                "       if (indexEntry.getTitle(language) != null) {",
                "-        doc.add(new Field(getFieldName(CONTENT, language), indexEntry.getTitle(language),",
                "-            TextField.TYPE_NOT_STORED));",
                "+        addTitleToDocContent(indexEntry.getTitle(language), doc, language);",
                "       }",
                "       if (indexEntry.getPreview(language) != null) {",
                "-        doc.add(new Field(getFieldName(CONTENT, language), indexEntry.getPreview(language).",
                "-            toLowerCase(new Locale(language)), TextField.TYPE_NOT_STORED));",
                "+        doc.add(new Field(getFieldName(CONTENT, language), indexEntry.getPreview(language),",
                "+            TextField.TYPE_NOT_STORED));",
                "       }",
                "       if (indexEntry.getKeywords(language) != null) {",
                "-        doc.add(new Field(getFieldName(CONTENT, language), indexEntry.getKeywords(language).",
                "-            toLowerCase(new Locale(language)), TextField.TYPE_NOT_STORED));",
                "+        doc.add(new Field(getFieldName(CONTENT, language), indexEntry.getKeywords(language),",
                "+            TextField.TYPE_NOT_STORED));",
                "       }",
                "@@ -487,2 +480,17 @@ public class IndexManager {",
                "+  private void addTitleToDocContent(String title, Document doc) {",
                "+    addTitleToDocContent(CONTENT, title, doc);",
                "+  }",
                "+",
                "+  private void addTitleToDocContent(String title, Document doc, String lang) {",
                "+    String fieldName = getFieldName(CONTENT, lang);",
                "+    addTitleToDocContent(fieldName, title, doc);",
                "+  }",
                "+",
                "+  private void addTitleToDocContent(String fieldName, String title, Document doc) {",
                "+    doc.add(new Field(fieldName, title, TextField.TYPE_NOT_STORED));",
                "+    doc.add(new Field(fieldName, title.replaceAll(\"_\", \" \").replaceAll(\"-\", \" \"),",
                "+        TextField.TYPE_NOT_STORED));",
                "+  }",
                "+",
                "   private void setHeaderFields(final FullIndexEntry indexEntry, final Document doc) {",
                "@@ -504,6 +512,4 @@ public class IndexManager {",
                "         if (indexEntry.getTitle(language) != null) {",
                "-          doc.add(new Field(getFieldName(HEADER, language), indexEntry.getTitle(language).",
                "-              toLowerCase(new Locale(language)), TextField.TYPE_NOT_STORED));",
                "-          doc.add(new Field(getFieldName(HEADER, language), indexEntry.getTitle(language).",
                "-              toLowerCase(new Locale(language)), TextField.TYPE_NOT_STORED));",
                "+          doc.add(new Field(getFieldName(HEADER, language), indexEntry.getTitle(language),",
                "+              TextField.TYPE_NOT_STORED));",
                "         }",
                "@@ -515,8 +521,8 @@ public class IndexManager {",
                "       if (indexEntry.getPreview(language) != null) {",
                "-        doc.add(new Field(getFieldName(HEADER, language), indexEntry.getPreview(language).",
                "-            toLowerCase(new Locale(language)), TextField.TYPE_NOT_STORED));",
                "+        doc.add(new Field(getFieldName(HEADER, language), indexEntry.getPreview(language),",
                "+            TextField.TYPE_NOT_STORED));",
                "       }",
                "       if (indexEntry.getKeywords(language) != null) {",
                "-        doc.add(new Field(getFieldName(HEADER, language), indexEntry.getKeywords(language).",
                "-            toLowerCase(new Locale(language)), TextField.TYPE_NOT_STORED));",
                "+        doc.add(new Field(getFieldName(HEADER, language), indexEntry.getKeywords(language),",
                "+            TextField.TYPE_NOT_STORED));",
                "       }"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9733": ""
            },
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6e0ad31c32009ccf19893fbbdce3d9ba55594ee4"
                ]
            ],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9733",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "39f44175b8b1e8f6ca10f97d9aaf96ccbec05b0a",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1541602115,
            "hunks": 1,
            "message": "When login.sso.path is defined, a new user session is created only if parameter login.sso.path.newSession is true. Otherwise, the common behavior is observed on Silverpeas's root URL access.",
            "diff": [
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/authentication/LoginServlet.java b/core-web/src/main/java/org/silverpeas/core/web/authentication/LoginServlet.java",
                "index adeabc78d5..0da4f12f19 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/authentication/LoginServlet.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/authentication/LoginServlet.java",
                "@@ -107,3 +107,4 @@ public class LoginServlet extends SilverpeasHttpServlet {",
                "   private boolean mustCloseSession(final HttpServletRequest request) {",
                "-    return getSsoLoginPage(request).isPresent() || \"Error_SsoNotAllowed\".equals(getErrorCode(request));",
                "+    return (getSsoLoginPage(request).isPresent() && general.getBoolean(\"login.sso.path.newSession\", false))",
                "+        || \"Error_SsoNotAllowed\".equals(getErrorCode(request));",
                "   }"
            ],
            "changed_files": [
                "core-web/src/main/java/org/silverpeas/core/web/authentication/LoginServlet.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea, user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "abc2ce130c8d120bd9d5579c09675a7446f136f1",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1546512929,
            "hunks": 1,
            "message": "Making silverpeas-popup cleaner.",
            "diff": [
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/progressmessage/ProgressMessageTag.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/progressmessage/ProgressMessageTag.java",
                "index b42458c48c..ddb4cbb862 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/progressmessage/ProgressMessageTag.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/progressmessage/ProgressMessageTag.java",
                "@@ -37,3 +37,3 @@ public class ProgressMessageTag extends TagSupport {",
                "   private static final long serialVersionUID = 1L;",
                "-  private List<String> messages = new ArrayList<String>();",
                "+  private List<String> messages = new ArrayList<>();"
            ],
            "changed_files": [
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/progressmessage/ProgressMessageTag.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a37a53f146ac4a4131b88839dcb734e771f42dc9",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1542736003,
            "hunks": 24,
            "message": "Increasing performance about the USER_SESSION server event by computing one time only the number of connected user. Adding the behavior which the aim is to register into task queue the fewest requests as possible (avoiding to queue requests with same goal). Modifying the processing of a server event in order to use a thread pool for data writing process.",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/sse/ServerEventDispatcherTask.java b/core-api/src/main/java/org/silverpeas/core/notification/sse/ServerEventDispatcherTask.java",
                "index aa740174ab..c6b5338ed0 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/sse/ServerEventDispatcherTask.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/sse/ServerEventDispatcherTask.java",
                "@@ -26,2 +26,3 @@ package org.silverpeas.core.notification.sse;",
                " import org.silverpeas.core.admin.user.model.User;",
                "+import org.silverpeas.core.notification.sse.behavior.AfterSentToAllContexts;",
                " import org.silverpeas.core.notification.sse.behavior.IgnoreStoring;",
                "@@ -29,2 +30,3 @@ import org.silverpeas.core.notification.sse.behavior.KeepAlwaysLastStored;",
                " import org.silverpeas.core.notification.sse.behavior.StoreLastOnly;",
                "+import org.silverpeas.core.thread.ManagedThreadPool;",
                " import org.silverpeas.core.thread.task.AbstractRequestTask;",
                "@@ -41,6 +43,10 @@ import java.util.List;",
                " import java.util.Set;",
                "+import java.util.concurrent.Callable;",
                "+import java.util.concurrent.Future;",
                "+import java.util.stream.Collectors;",
                " import static java.text.MessageFormat.format;",
                "-import static org.silverpeas.core.notification.user.client.NotificationManagerSettings.getSseStoreEventLifeTime;",
                "-import static org.silverpeas.core.notification.user.client.NotificationManagerSettings.isSseEnabledFor;",
                "+import static java.util.Collections.emptyList;",
                "+import static org.silverpeas.core.notification.user.client.NotificationManagerSettings.*;",
                "+import static org.silverpeas.core.thread.ManagedThreadPool.ExecutionConfig.defaultConfig;",
                "@@ -212,8 +218,13 @@ public class ServerEventDispatcherTask extends AbstractRequestTask {",
                "     @Override",
                "-    public void process(Object context) throws InterruptedException {",
                "+    public String getReplacementId() {",
                "+      return serverEventToDispatch instanceof StoreLastOnly",
                "+          ? serverEventToDispatch.getName().asString()",
                "+          : null;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void process(Object context) {",
                "       final List<SilverpeasAsyncContext> safeContexts = getSafeContexts();",
                "       if (!safeContexts.isEmpty()) {",
                "-        SseLogger.get().debug(() -> format(\"Sending {0}\", serverEventToDispatch));",
                "-        safeContexts.forEach(",
                "-            asyncContext -> push(this.serverEventToDispatch, asyncContext, completeAfterSend()));",
                "+        sendTo(safeContexts);",
                "       }",
                "@@ -222,2 +233,30 @@ public class ServerEventDispatcherTask extends AbstractRequestTask {",
                "+    private void sendTo(final List<SilverpeasAsyncContext> safeContexts) {",
                "+      SseLogger.get().debug(() -> format(\"Sending {0}\", serverEventToDispatch));",
                "+      final List<Callable<Void>> threadedSends = safeContexts",
                "+          .stream()",
                "+          .map(c -> (Callable<Void>) () -> {",
                "+            push(this.serverEventToDispatch, c, completeAfterSend());",
                "+            return null;",
                "+          }).collect(Collectors.toList());",
                "+      List<Future<Void>> sendResult;",
                "+      try {",
                "+        sendResult = ManagedThreadPool.getPool().invoke(threadedSends,",
                "+            defaultConfig().withMaxThreadPoolSizeOf(getSseSendMaxThreadPool()));",
                "+      } catch (Exception e) {",
                "+        SseLogger.get().error(e);",
                "+        sendResult = emptyList();",
                "+      }",
                "+      sendResult.forEach(s -> {",
                "+        try {",
                "+          s.get();",
                "+        } catch (Exception e) {",
                "+          SseLogger.get().error(e);",
                "+        }",
                "+      });",
                "+      if (serverEventToDispatch instanceof AfterSentToAllContexts) {",
                "+        ((AfterSentToAllContexts) serverEventToDispatch).afterAllContexts();",
                "+      }",
                "+    }",
                "+",
                "     /**",
                "@@ -239,30 +278,2 @@ public class ServerEventDispatcherTask extends AbstractRequestTask {",
                "-  private static class AimedServerEventDispatchRequest extends ServerEventDispatchRequest {",
                "-    private final SilverpeasAsyncContext silverpeasAsyncContext;",
                "-    private final boolean completeAfterSend;",
                "-",
                "-    /**",
                "-     * @param serverEventToDispatch the server event to dispatch.",
                "-     * @param silverpeasAsyncContext the asynchronous context.",
                "-     * @param completeAfterSend true if the complete async context method must be called after",
                "-     * the send.",
                "-     */",
                "-    AimedServerEventDispatchRequest(final ServerEvent serverEventToDispatch,",
                "-        final SilverpeasAsyncContext silverpeasAsyncContext, final boolean completeAfterSend) {",
                "-      super(serverEventToDispatch);",
                "-      this.silverpeasAsyncContext = silverpeasAsyncContext;",
                "-      this.completeAfterSend = completeAfterSend;",
                "-    }",
                "-",
                "-    @Override",
                "-    List<SilverpeasAsyncContext> getSafeContexts() {",
                "-      return Collections.singletonList(silverpeasAsyncContext);",
                "-    }",
                "-",
                "-    @Override",
                "-    boolean completeAfterSend() {",
                "-      return completeAfterSend;",
                "-    }",
                "-  }",
                "-",
                "   /**",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/sse/behavior/AfterSentToAllContexts.java b/core-api/src/main/java/org/silverpeas/core/notification/sse/behavior/AfterSentToAllContexts.java",
                "new file mode 100644",
                "index 0000000000..da08fb2c3e",
                "--- /dev/null",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/sse/behavior/AfterSentToAllContexts.java",
                "@@ -0,0 +1,38 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"https://www.silverpeas.org/legal/floss_exception.html\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+",
                "+package org.silverpeas.core.notification.sse.behavior;",
                "+",
                "+/**",
                "+ * Implements this interface in order to get \"an after sent to all context\" behavior.",
                "+ * @author silveryocha",
                "+ */",
                "+public interface AfterSentToAllContexts {",
                "+",
                "+  /**",
                "+   * Called just after the send to all context process.",
                "+   */",
                "+  default void afterAllContexts() {",
                "+  }",
                "+}",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "index e1f87b1302..ccdfe7c51f 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "@@ -230,3 +230,3 @@ public class NotificationManagerSettings {",
                "   public static int getSseAsyncJobTrigger() {",
                "-    return settings.getInteger(\"notification.see.job.trigger\", DEFAULT_SSE_JOB_TRIGGER);",
                "+    return settings.getInteger(\"notification.sse.job.trigger\", DEFAULT_SSE_JOB_TRIGGER);",
                "   }",
                "@@ -238,3 +238,11 @@ public class NotificationManagerSettings {",
                "   public static int getSseAsyncTimeout() {",
                "-    return settings.getInteger(\"notification.see.async.timeout\", DEFAULT_SSE_ASYNC_TIMEOUT) * MS;",
                "+    return settings.getInteger(\"notification.sse.async.timeout\", DEFAULT_SSE_ASYNC_TIMEOUT) * MS;",
                "+  }",
                "+",
                "+  /**",
                "+   * Gets the number of thread used to perform the send of a server event.",
                "+   * @return the maximum number of thread for send thread pool.",
                "+   */",
                "+  public static int getSseSendMaxThreadPool() {",
                "+    return settings.getInteger(\"notification.sse.send.thread.pool.max\", 8);",
                "   }",
                "@@ -248,3 +256,3 @@ public class NotificationManagerSettings {",
                "     return settings",
                "-        .getInteger(\"notification.see.store.event.lifetime\", DEFAULT_SSE_STORE_EVENT_LIFETIME) * MS;",
                "+        .getInteger(\"notification.sse.store.event.lifetime\", DEFAULT_SSE_STORE_EVENT_LIFETIME) * MS;",
                "   }",
                "@@ -257,3 +265,3 @@ public class NotificationManagerSettings {",
                "   public static boolean isSseEnabled() {",
                "-    return settings.getBoolean(\"notification.see.enabled\", true);",
                "+    return settings.getBoolean(\"notification.sse.enabled\", true);",
                "   }",
                "@@ -267,3 +275,3 @@ public class NotificationManagerSettings {",
                "     return isSseEnabled() && settings",
                "-        .getBoolean(\"notification.see.event.\" + serverEvent.getName().asString() + \".enabled\",",
                "+        .getBoolean(\"notification.sse.event.\" + serverEvent.getName().asString() + \".enabled\",",
                "             true);",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/thread/ManagedThreadPool.java b/core-api/src/main/java/org/silverpeas/core/thread/ManagedThreadPool.java",
                "index c987eae70e..216e803029 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/thread/ManagedThreadPool.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/thread/ManagedThreadPool.java",
                "@@ -269,4 +269,4 @@ public class ManagedThreadPool {",
                "     final ExecutorService executorService;",
                "-    if (config.getMaxThreadPoolSize() > 0) {",
                "-      int maxThreadPoolSize = config.getMaxThreadPoolSize();",
                "+    final int maxThreadPoolSize = config.getMaxThreadPoolSize();",
                "+    if (maxThreadPoolSize > 0) {",
                "       if (maxThreadPoolSize == 1) {",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/thread/task/AbstractRequestTask.java b/core-api/src/main/java/org/silverpeas/core/thread/task/AbstractRequestTask.java",
                "index 2cdf2d8f0f..68b98bce72 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/thread/task/AbstractRequestTask.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/thread/task/AbstractRequestTask.java",
                "@@ -167,2 +167,24 @@ public abstract class AbstractRequestTask<C extends AbstractRequestTask.ProcessC",
                "   public interface Request<C> {",
                "+",
                "+    /**",
                "+     * Gets a replacement identifier.",
                "+     * <p>",
                "+     * In almost cases, it will be null and means there is no replacement to perform into queue.",
                "+     * </p>",
                "+     * <p>",
                "+     * In rare cases, it will not be null and means that if it exists already a request into",
                "+     * queue with a same identifier then this request must be replaced by the new one.",
                "+     * </p>",
                "+     * @return a string representing a unique type. If null, the request behavior is the one of",
                "+     * simple {@link Request}.",
                "+     */",
                "+    default String getReplacementId() {",
                "+      return null;",
                "+    }",
                "+",
                "+    /**",
                "+     * Process the request according to the given context.",
                "+     * @param context the context of the process.",
                "+     * @throws InterruptedException in case of technical error.",
                "+     */",
                "     void process(C context) throws InterruptedException;",
                "diff --git a/core-api/src/main/java/org/silverpeas/core/thread/task/RequestTaskManager.java b/core-api/src/main/java/org/silverpeas/core/thread/task/RequestTaskManager.java",
                "index a5458b561b..c06a3699c2 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/thread/task/RequestTaskManager.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/thread/task/RequestTaskManager.java",
                "@@ -35,2 +35,3 @@ import java.util.ArrayList;",
                " import java.util.List;",
                "+import java.util.ListIterator;",
                " import java.util.concurrent.Callable;",
                "@@ -145,3 +146,3 @@ public class RequestTaskManager {",
                "    * {@link AbstractRequestTask.Request}.",
                "-   * @param request the request to process.",
                "+   * @param newRequest the request to process.",
                "    * @param <T> the type of the task.",
                "@@ -151,5 +152,4 @@ public class RequestTaskManager {",
                "   public static <T extends AbstractRequestTask, C extends AbstractRequestTask.ProcessContext>",
                "-  void push(",
                "-      Class<T> taskClass, Request<C> request) {",
                "-    RequestTaskMonitor<T, C> monitor = tasks.computeIfAbsent(taskClass, c -> {",
                "+  void push(Class<T> taskClass, Request<C> newRequest) {",
                "+    final RequestTaskMonitor<T, C> monitor = tasks.computeIfAbsent(taskClass, c -> {",
                "       AbstractRequestTask<C> taskForInit = (AbstractRequestTask) ServiceProvider.getService(c);",
                "@@ -163,4 +163,27 @@ public class RequestTaskManager {",
                "       debug(taskClass, \"pushing new request {0} ({1} requests queued before push)\",",
                "-          request.getClass().getSimpleName(), monitor.requestList.size());",
                "-      monitor.requestList.add(request);",
                "+          newRequest.getClass().getSimpleName(), monitor.requestList.size());",
                "+      final String uniqueType = newRequest.getReplacementId();",
                "+      boolean replaced = false;",
                "+      if (uniqueType != null) {",
                "+        debug(taskClass, \"searching awaiting request {0} of type {1} to replace\",",
                "+            newRequest.getClass().getSimpleName(), uniqueType);",
                "+        final ListIterator<Request<C>> it = monitor.requestList.listIterator();",
                "+        while (it.hasNext()) {",
                "+          final Request<C> queueRequest = it.next();",
                "+          if (uniqueType.equals(queueRequest.getReplacementId())) {",
                "+            debug(taskClass, \"replacing awaiting request {0} of type {1} with new one\",",
                "+                newRequest.getClass().getSimpleName(), uniqueType);",
                "+            it.set(newRequest);",
                "+            replaced = true;",
                "+            break;",
                "+          }",
                "+        }",
                "+        if (!replaced) {",
                "+          debug(taskClass, \"no awaiting request {0} of type {1} to replace\",",
                "+              newRequest.getClass().getSimpleName(), uniqueType);",
                "+        }",
                "+      }",
                "+      if (!replaced) {",
                "+        monitor.requestList.add(newRequest);",
                "+      }",
                "       startIfNecessary(monitor);",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/session/UserSessionServerEvent.java b/core-web/src/main/java/org/silverpeas/core/web/session/UserSessionServerEvent.java",
                "index e60ec5338f..cf4605e2ef 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/session/UserSessionServerEvent.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/session/UserSessionServerEvent.java",
                "@@ -27,2 +27,3 @@ import org.silverpeas.core.admin.user.model.User;",
                " import org.silverpeas.core.notification.sse.CommonServerEvent;",
                "+import org.silverpeas.core.notification.sse.behavior.AfterSentToAllContexts;",
                " import org.silverpeas.core.notification.sse.behavior.KeepAlwaysLastStored;",
                "@@ -37,4 +38,6 @@ import org.silverpeas.core.util.JSONCodec;",
                "  */",
                "-public class UserSessionServerEvent extends CommonServerEvent implements KeepAlwaysLastStored {",
                "+public class UserSessionServerEvent extends CommonServerEvent implements KeepAlwaysLastStored,",
                "+    AfterSentToAllContexts {",
                "+  private static final Object DATA_MUTEX = new Object();",
                "   private static final String IS_OPENING_ATTR_NAME = \"isOpening\";",
                "@@ -48,2 +51,3 @@ public class UserSessionServerEvent extends CommonServerEvent implements KeepAlw",
                "   private final SessionManagement sessionManagement;",
                "+  private String data = null;",
                "@@ -80,2 +84,20 @@ public class UserSessionServerEvent extends CommonServerEvent implements KeepAlw",
                "+  @Override",
                "+  public String getData(final String receiverSessionId, final User receiver) {",
                "+    synchronized (DATA_MUTEX) {",
                "+      // data computed one time only",
                "+      if (data == null) {",
                "+        data = super.getData(receiverSessionId, receiver);",
                "+      }",
                "+    }",
                "+    return data;",
                "+  }",
                "+",
                "+  @Override",
                "+  public void afterAllContexts() {",
                "+    synchronized (DATA_MUTEX) {",
                "+      data = null;",
                "+    }",
                "+  }",
                "+",
                "   /**"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/notification/sse/ServerEventDispatcherTask.java",
                "core-api/src/main/java/org/silverpeas/core/notification/sse/behavior/AfterSentToAllContexts.java",
                "core-api/src/main/java/org/silverpeas/core/notification/user/client/NotificationManagerSettings.java",
                "core-api/src/main/java/org/silverpeas/core/thread/ManagedThreadPool.java",
                "core-api/src/main/java/org/silverpeas/core/thread/task/AbstractRequestTask.java",
                "core-api/src/main/java/org/silverpeas/core/thread/task/RequestTaskManager.java",
                "core-web/src/main/java/org/silverpeas/core/web/session/UserSessionServerEvent.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: user",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "3b7c6f6f392a01eb0b4696dbcfe4d77d798882cf",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1545210212,
            "hunks": 1,
            "message": "fixing bug #10128",
            "diff": [
                "diff --git a/lib-core/src/main/java/com/silverpeas/form/displayers/LdapFieldDisplayer.java b/lib-core/src/main/java/com/silverpeas/form/displayers/LdapFieldDisplayer.java",
                "index 0e48b7cf23..8acb513b9b 100644",
                "--- a/lib-core/src/main/java/com/silverpeas/form/displayers/LdapFieldDisplayer.java",
                "+++ b/lib-core/src/main/java/com/silverpeas/form/displayers/LdapFieldDisplayer.java",
                "@@ -273,3 +273,3 @@ public class LdapFieldDisplayer extends AbstractFieldDisplayer<LdapField> {",
                "       html.append(fieldName).append(\");\\n\").append(\"\tthis.oAutoComp\").append(fieldName);",
                "-      html.append(\".prehighlightClassName = \\\"yui-ac-prehighlight\\\");\\n\");",
                "+      html.append(\".prehighlightClassName = \\\"yui-ac-prehighlight\\\";\\n\");",
                "       html.append(\"\tthis.oAutoComp\").append(fieldName).append(\".typeAhead = true;\\n\");"
            ],
            "changed_files": [
                "lib-core/src/main/java/com/silverpeas/form/displayers/LdapFieldDisplayer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10128": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "core-5.15.10",
                "core-5.15.11",
                "core-5.15.12",
                "core-5.15.13",
                "core-5.15.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10128",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "70182d54e2b8de9108cbba838c7874852b3d28f2",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1545598959,
            "hunks": 1,
            "message": "fixing bug #10300",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/component/model/ComponentInst.java b/core-library/src/main/java/org/silverpeas/core/admin/component/model/ComponentInst.java",
                "index 0c94dd64d2..ae8c45b9e6 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/component/model/ComponentInst.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/component/model/ComponentInst.java",
                "@@ -57,3 +57,3 @@ public class ComponentInst extends AbstractI18NBean<ComponentI18N>",
                "   private static final Pattern COMPONENT_INSTANCE_IDENTIFIER =",
                "-      Pattern.compile(\"^([a-zA-Z-]+)([0-9]+)$\");",
                "+      Pattern.compile(\"^([a-zA-Z-_]+)([0-9]+)$\");"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/admin/component/model/ComponentInst.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10300": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10300",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "817f3c7ea3895aececff1e2e3bd3bb9f9564d048",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1545301451,
            "hunks": 0,
            "message": "Merge pull request #950 from SilverYoCha/bug-file-upload-5.15.x [5.15.x] Sending an HTTP forbidden code error when detecting transversal path for HTTP header X-FULL-PATH.",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "950": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "core-5.15.10",
                "core-5.15.11",
                "core-5.15.12",
                "core-5.15.13",
                "core-5.15.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file, upload",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 950",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "52994bd907e269e49a22e7c83412958cbb854f85",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1540918963,
            "hunks": 2,
            "message": "on feature #7507, removing circular references",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/CompletePublication.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/CompletePublication.java",
                "index a643613121..3a5cca33b4 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/CompletePublication.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/model/CompletePublication.java",
                "@@ -101,3 +101,10 @@ public class CompletePublication implements Serializable {",
                "     List<Link> publications = getAuthorizedLinks(userId, linkList);",
                "-    publications.addAll(getAuthorizedLinks(userId, reverseLinkList));",
                "+    // remove reverse link linked by the same publication",
                "+    List<Link> reverseLinkListWithoutDuplicates = new ArrayList<>();",
                "+    for (Link reverseLink : reverseLinkList) {",
                "+      if (!isReverseLinkADuplication(publications, reverseLink)) {",
                "+        reverseLinkListWithoutDuplicates.add(reverseLink);",
                "+      }",
                "+    }",
                "+    publications.addAll(getAuthorizedLinks(userId, reverseLinkListWithoutDuplicates));",
                "     return publications;",
                "@@ -105,2 +112,11 @@ public class CompletePublication implements Serializable {",
                "+  private boolean isReverseLinkADuplication(List<Link> links, Link linkToTest) {",
                "+    for (Link link : links) {",
                "+      if (link.getTarget().equals(linkToTest.getTarget())) {",
                "+        return true;",
                "+      }",
                "+    }",
                "+    return false;",
                "+  }",
                "+",
                "   private List<Link> getAuthorizedLinks(String userId, List<Link> links) {"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/model/CompletePublication.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "7507": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 7507",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "63a737f96ec6eaab20f037e1e57095f70280ecd3",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1539001129,
            "hunks": 15,
            "message": "Bug #9733 & #10067: adjusting some stuff.",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java b/core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java",
                "index 66a78e27f6..5e1eb5e4b3 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java",
                "@@ -60,4 +60,2 @@ import java.util.Set;",
                "-import static org.silverpeas.core.i18n.I18NHelper.defaultLocale;",
                "-",
                " /**",
                "@@ -412,11 +410,11 @@ public class IndexManager {",
                "     final Iterator<String> languages;",
                "-    if (indexEntry.getObjectType() != null && indexEntry.getObjectType().startsWith(",
                "-        ATTACHMENT_PREFIX)) {",
                "+    if (indexEntry.getObjectType() != null &&",
                "+        indexEntry.getObjectType().startsWith(ATTACHMENT_PREFIX)) {",
                "       String lang = indexEntry.getLang();",
                "       if (indexEntry.getTitle(lang) != null) {",
                "-        addTitleToDocContent(indexEntry.getTitle(lang), doc, lang);",
                "+        addToDocContent(indexEntry.getTitle(lang), doc, lang);",
                "       }",
                "-      addTitleToDocContent(indexEntry.getFilename(), doc, lang);",
                "+      addToDocContent(indexEntry.getFilename(), doc, lang);",
                "     } else {",
                "-      addTitleToDocContent(indexEntry.getTitle(), doc);",
                "+      addToDocContent(indexEntry.getTitle(), doc);",
                "     }",
                "@@ -427,11 +425,9 @@ public class IndexManager {",
                "       if (indexEntry.getTitle(language) != null) {",
                "-        addTitleToDocContent(indexEntry.getTitle(language), doc, language);",
                "+        addToDocContent(indexEntry.getTitle(language), doc, language);",
                "       }",
                "       if (indexEntry.getPreview(language) != null) {",
                "-        doc.add(new Field(getFieldName(CONTENT, language), indexEntry.getPreview(language),",
                "-            TextField.TYPE_NOT_STORED));",
                "+        addToDocContent(indexEntry.getPreview(language), doc, language);",
                "       }",
                "       if (indexEntry.getKeywords(language) != null) {",
                "-        doc.add(new Field(getFieldName(CONTENT, language), indexEntry.getKeywords(language),",
                "-            TextField.TYPE_NOT_STORED));",
                "+        addToDocContent(indexEntry.getKeywords(language), doc, language);",
                "       }",
                "@@ -440,15 +436,14 @@ public class IndexManager {",
                "-  private void addTitleToDocContent(String title, Document doc) {",
                "-    addTitleToDocContent(CONTENT, title, doc);",
                "+  private void addToDocContent(String value, Document doc) {",
                "+    addToDocContent(CONTENT, value, doc);",
                "   }",
                "-  private void addTitleToDocContent(String title, Document doc, String lang) {",
                "+  private void addToDocContent(String value, Document doc, String lang) {",
                "     String fieldName = getFieldName(CONTENT, lang);",
                "-    addTitleToDocContent(fieldName, title, doc);",
                "+    addToDocContent(fieldName, value, doc);",
                "   }",
                "-  private void addTitleToDocContent(String fieldName, String title, Document doc) {",
                "-    doc.add(new Field(fieldName, title, TextField.TYPE_NOT_STORED));",
                "-    doc.add(new Field(fieldName, title.replaceAll(\"_\", \" \").replaceAll(\"-\", \" \"),",
                "-        TextField.TYPE_NOT_STORED));",
                "+  private void addToDocContent(String fieldName, String value, Document doc) {",
                "+    doc.add(new Field(fieldName, value, TextField.TYPE_NOT_STORED));",
                "+    doc.add(new Field(fieldName, value.replaceAll(\"[_-]\", \" \"), TextField.TYPE_NOT_STORED));",
                "   }",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java b/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "index 9bdfab3558..a4695471eb 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "@@ -30,3 +30,2 @@ import org.apache.lucene.index.MultiReader;",
                " import org.apache.lucene.index.Term;",
                "-import org.apache.lucene.queryparser.classic.MultiFieldQueryParser;",
                " import org.apache.lucene.queryparser.classic.QueryParser;",
                "@@ -286,14 +285,4 @@ public class IndexSearcher {",
                "         // search over all languages",
                "-        String[] fields = new String[I18NHelper.getNumberOfLanguages()];",
                "-",
                "-        int l = 0;",
                "         Set<String> languages = I18NHelper.getAllSupportedLanguages();",
                "-        for (String lang : languages) {",
                "-          fields[l] = getFieldName(searchField, lang);",
                "-          l++;",
                "-        }",
                "-",
                "-        MultiFieldQueryParser mfqp = new MultiFieldQueryParser(fields, analyzer);",
                "-        mfqp.setDefaultOperator(defaultOperator);",
                "-        parsedQuery = mfqp.parse(query.getQuery());",
                "+        parsedQuery = getQuery(searchField, query.getQuery(), languages, analyzer);",
                "       } else {"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/index/indexing/model/IndexManager.java",
                "core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "9733": "",
                "10067": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.0.2"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 9733, 10067",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "70d800d57b51ec684a84392cb2dc9f3eb15a141b",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1538740335,
            "hunks": 3,
            "message": "fixing bug #10067",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java b/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "index a4e3fa6db7..9bdfab3558 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java",
                "@@ -359,14 +359,13 @@ public class IndexSearcher {",
                "       throws ParseException {",
                "-    Map<String, BooleanClause.Occur> fieldNames = new HashMap<>();",
                "+    BooleanQuery.Builder booleanQueryBuilder = new BooleanQuery.Builder();",
                "     for (String language : languages) {",
                "-      fieldNames.put(getFieldName(fieldName, language), BooleanClause.Occur.SHOULD);",
                "-    }",
                "-    Query query;",
                "-    try {",
                "-      query = MultiFieldQueryParser.parse(queryStr, fieldNames.keySet().toArray(new String[fieldNames.size()]),",
                "-          fieldNames.values().toArray(new BooleanClause.Occur[fieldNames.size()]), analyzer);",
                "-    } catch (org.apache.lucene.queryparser.classic.ParseException e) {",
                "-      throw new org.silverpeas.core.index.search.model.ParseException(INDEX_SEARCH_ERROR, e);",
                "+      QueryParser parser = new QueryParser(getFieldName(fieldName, language), analyzer);",
                "+      parser.setDefaultOperator(defaultOperator);",
                "+      try {",
                "+        booleanQueryBuilder.add(parser.parse(queryStr), BooleanClause.Occur.SHOULD);",
                "+      } catch (org.apache.lucene.queryparser.classic.ParseException e) {",
                "+        throw new org.silverpeas.core.index.search.model.ParseException(INDEX_SEARCH_ERROR, e);",
                "+      }",
                "     }",
                "-    return query;",
                "+    return booleanQueryBuilder.build();",
                "   }"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/index/search/model/IndexSearcher.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10067": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.0.2"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10067",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "24499cae0705098fa115f5b10ade23d4c394df83",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1544308542,
            "hunks": 9,
            "message": "on feature #10284, managing 'max results' parameter",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "index 6eadde903d..d3827acd67 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java",
                "@@ -36,3 +36,6 @@ import com.google.api.services.admin.directory.DirectoryScopes;",
                " import com.google.api.services.admin.directory.model.User;",
                "+import com.google.api.services.admin.directory.model.Users;",
                "+import org.apache.commons.lang3.time.DurationFormatUtils;",
                " import org.silverpeas.core.admin.service.AdminException;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -41,4 +44,6 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.text.MessageFormat;",
                " import java.util.Collections;",
                " import java.util.Comparator;",
                "+import java.util.LinkedList;",
                " import java.util.List;",
                "@@ -50,2 +55,3 @@ public class GoogleDirectoryRequester {",
                "   private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();",
                "+  private static final int QUERY_MAX_RESULTS = 500;",
                "   private static final String MY_CUSTOMER = \"my_customer\";",
                "@@ -69,5 +75,5 @@ public class GoogleDirectoryRequester {",
                "    * Creates an authorized Credential object.",
                "+   * @param httpTransport the HTTP transport.",
                "    * @return An authorized Credential object.",
                "    * @throws IOException If the credentials.json file cannot be found.",
                "-   * @param httpTransport",
                "    */",
                "@@ -103,8 +109,23 @@ public class GoogleDirectoryRequester {",
                "     try {",
                "-      final List<User> users = getDirectoryService().users().list().setCustomer(MY_CUSTOMER)",
                "-          .execute().getUsers();",
                "-      users.sort(Comparator",
                "+      final List<User> result = new LinkedList<>();",
                "+      final long start = System.currentTimeMillis();",
                "+      final Directory.Users.List users = getDirectoryService().users().list()",
                "+          .setMaxResults(QUERY_MAX_RESULTS).setCustomer(MY_CUSTOMER);",
                "+      String pageToken = null;",
                "+      while (true) {",
                "+        final Users currentUsers = users.setPageToken(pageToken).execute();",
                "+        pageToken = currentUsers.getNextPageToken();",
                "+        final List<User> currentResult = currentUsers.getUsers();",
                "+        result.addAll(currentResult);",
                "+        if (currentResult.size() < QUERY_MAX_RESULTS || pageToken == null) {",
                "+          break;",
                "+        }",
                "+      }",
                "+      result.sort(Comparator",
                "           .comparing((User g) -> g.getName().getFamilyName())",
                "           .thenComparing(g -> g.getName().getGivenName()));",
                "-      return users;",
                "+      final long end = System.currentTimeMillis();",
                "+      SilverLogger.getLogger(this).debug(() -> MessageFormat",
                "+          .format(\"Getting accounts in {0}\", DurationFormatUtils.formatDurationHMS(end - start)));",
                "+      return result;",
                "     } catch (IOException e) {"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleDirectoryRequester.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10284": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, directory",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10284",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cf0cc7c45527ea87a1cd569e942f0e193538bf8e",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1547481867,
            "hunks": 1,
            "message": "making some adjustments during integration of feature #10284",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "index 22399924af..6b24867d31 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java",
                "@@ -230,3 +230,3 @@ class GoogleUserFilter<T extends GenericJson> {",
                "     } else {",
                "-      filterResult = likeIgnoreCase((String) attributeValues.get(attr), expectedValue);",
                "+      filterResult = likeIgnoreCase(String.valueOf(attributeValues.get(attr)), expectedValue);",
                "     }"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/admin/domain/driver/googledriver/GoogleUserFilter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10284": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10284",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c2c46e6b5f8a667904a531058f4f794a64fe77ce",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1545210131,
            "hunks": 3,
            "message": "fixing bug #10055",
            "diff": [
                "diff --git a/lib-core/src/main/java/com/stratelia/webactiv/beans/admin/Admin.java b/lib-core/src/main/java/com/stratelia/webactiv/beans/admin/Admin.java",
                "index a6d81539ce..0c8651b13e 100644",
                "--- a/lib-core/src/main/java/com/stratelia/webactiv/beans/admin/Admin.java",
                "+++ b/lib-core/src/main/java/com/stratelia/webactiv/beans/admin/Admin.java",
                "@@ -1449,5 +1449,6 @@ public class Admin {",
                "       if (space.getFirstPageType() == SpaceInst.FP_TYPE_COMPONENT_INST &&",
                "-          space.getFirstPageExtraParam().equals(componentId)) {",
                "+          space.getFirstPageExtraParam().equals(componentId) && !definitive) {",
                "         space.setFirstPageType(SpaceInst.FP_TYPE_STANDARD);",
                "         space.setFirstPageExtraParam(null);",
                "+        space.setUpdaterUserId(userId);",
                "         updateSpaceInst(space);",
                "@@ -7278,2 +7279,3 @@ public class Admin {",
                "         space.setFirstPageExtraParam(newFirstPageExtraParam);",
                "+        space.setUpdaterUserId(pasteDetail.getUserId());",
                "         updateSpaceInst(space);"
            ],
            "changed_files": [
                "lib-core/src/main/java/com/stratelia/webactiv/beans/admin/Admin.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "10055": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "core-5.15.10",
                "core-5.15.11",
                "core-5.15.12",
                "core-5.15.13",
                "core-5.15.9"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: core",
                    "relevance": 4
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 10055",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a232cd1fba7bae5efbd9378cf060a397068c66f9",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1547817010,
            "hunks": 1,
            "message": "adjusting log level on end of session",
            "diff": [
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/session/HTTPSessionInfo.java b/core-web/src/main/java/org/silverpeas/core/web/session/HTTPSessionInfo.java",
                "index 7e1134a196..58d0234d7c 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/session/HTTPSessionInfo.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/session/HTTPSessionInfo.java",
                "@@ -74,3 +74,3 @@ public class HTTPSessionInfo extends org.silverpeas.core.security.session.Sessio",
                "       } catch (IllegalStateException ex) {",
                "-        SilverLogger.getLogger(this).error(ex.getMessage(), ex);",
                "+        SilverLogger.getLogger(this).info(ex.getMessage(), ex);",
                "       }"
            ],
            "changed_files": [
                "core-web/src/main/java/org/silverpeas/core/web/session/HTTPSessionInfo.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "f0919f2ed78d62ca243c51c5e8eeadbe82a09c86",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1538730511,
            "hunks": 2,
            "message": "In DefaultJdbcSqlExecutor, take into account of the two SQL types: Boolean and Byte.",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "index a353dffd44..e57c1cf989 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "@@ -198,31 +198,3 @@ class DefaultJdbcSqlExecutor implements JdbcSqlExecutor {",
                "     for (Object parameter : parameters) {",
                "-      if (parameter == null) {",
                "-        preparedStatement.setObject(paramIndex, null);",
                "-      } else if (parameter instanceof String) {",
                "-        preparedStatement.setString(paramIndex, (String) parameter);",
                "-      } else if (parameter instanceof Enum) {",
                "-        preparedStatement.setString(paramIndex, ((Enum) parameter).name());",
                "-      } else if (parameter instanceof Integer) {",
                "-        preparedStatement.setInt(paramIndex, (Integer) parameter);",
                "-      } else if (parameter instanceof Long) {",
                "-        preparedStatement.setLong(paramIndex, (Long) parameter);",
                "-      } else if (parameter instanceof BigInteger) {",
                "-        preparedStatement.setBigDecimal(paramIndex, new BigDecimal((BigInteger) parameter));",
                "-      } else if (parameter instanceof BigDecimal) {",
                "-        preparedStatement.setBigDecimal(paramIndex, (BigDecimal) parameter);",
                "-      } else if (parameter instanceof Timestamp) {",
                "-        preparedStatement.setTimestamp(paramIndex, (Timestamp) parameter);",
                "-      } else if (isADateTime(parameter)) {",
                "-        preparedStatement.setTimestamp(paramIndex,",
                "-            new java.sql.Timestamp(toInstant(parameter).toEpochMilli()));",
                "-      } else if (isADate(parameter)) {",
                "-        preparedStatement.setDate(paramIndex,",
                "-            new java.sql.Date(toInstant(parameter).toEpochMilli()));",
                "-      } else if (parameter instanceof Blob) {",
                "-        preparedStatement.setBlob(paramIndex, (Blob) parameter);",
                "-      } else if (parameter instanceof Clob) {",
                "-        preparedStatement.setClob(paramIndex, (Clob) parameter);",
                "-      } else {",
                "-        setObjectIdentifier(preparedStatement, paramIndex, parameter);",
                "-      }",
                "+      setParameter(preparedStatement, paramIndex, parameter);",
                "       paramIndex++;",
                "@@ -231,2 +203,39 @@ class DefaultJdbcSqlExecutor implements JdbcSqlExecutor {",
                "+  private static void setParameter(final PreparedStatement preparedStatement, final int paramIndex,",
                "+      final Object parameter) throws SQLException {",
                "+    if (parameter == null) {",
                "+      preparedStatement.setObject(paramIndex, null);",
                "+    } else if (parameter instanceof String) {",
                "+      preparedStatement.setString(paramIndex, (String) parameter);",
                "+    } else if (parameter instanceof Enum) {",
                "+      preparedStatement.setString(paramIndex, ((Enum) parameter).name());",
                "+    } else if (parameter instanceof Integer) {",
                "+      preparedStatement.setInt(paramIndex, (Integer) parameter);",
                "+    } else if (parameter instanceof Long) {",
                "+      preparedStatement.setLong(paramIndex, (Long) parameter);",
                "+    } else if (parameter instanceof BigInteger) {",
                "+      preparedStatement.setBigDecimal(paramIndex, new BigDecimal((BigInteger) parameter));",
                "+    } else if (parameter instanceof BigDecimal) {",
                "+      preparedStatement.setBigDecimal(paramIndex, (BigDecimal) parameter);",
                "+    } else if (parameter instanceof Boolean) {",
                "+      preparedStatement.setBoolean(paramIndex, (Boolean) parameter);",
                "+    } else if (parameter instanceof Timestamp) {",
                "+      preparedStatement.setTimestamp(paramIndex, (Timestamp) parameter);",
                "+    } else if (parameter instanceof Byte) {",
                "+      preparedStatement.setByte(paramIndex, (Byte) parameter);",
                "+    } else if (isADateTime(parameter)) {",
                "+      preparedStatement.setTimestamp(paramIndex,",
                "+          new Timestamp(toInstant(parameter).toEpochMilli()));",
                "+    } else if (isADate(parameter)) {",
                "+      preparedStatement.setDate(paramIndex,",
                "+          new java.sql.Date(toInstant(parameter).toEpochMilli()));",
                "+    } else if (parameter instanceof Blob) {",
                "+      preparedStatement.setBlob(paramIndex, (Blob) parameter);",
                "+    } else if (parameter instanceof Clob) {",
                "+      preparedStatement.setClob(paramIndex, (Clob) parameter);",
                "+    } else {",
                "+      setObjectIdentifier(preparedStatement, paramIndex, parameter);",
                "+    }",
                "+  }",
                "+",
                "   private static void setObjectIdentifier(final PreparedStatement preparedStatement,"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "b2402d1c942a2a9a6b3eed2cc54af021a101c92a",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1545316947,
            "hunks": 0,
            "message": "Merge branch 'feature-9884' of https://github.com/mmoqui/Silverpeas-Core into mmoqui-feature-9884",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c786a25494b14b2c4710989e006c722759ae45e5",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1538669465,
            "hunks": 4,
            "message": "Fixing the add button of attachment bloc which was moved into creation area. Fixing missing @Transactional. Adding new method sp.ajaxrequest(...).loadTarget(...) in replacement of sp.load(...)",
            "diff": [
                "diff --git a/core-services/personalOrganizer/src/main/java/org/silverpeas/core/personalorganizer/service/DefaultCalendarService.java b/core-services/personalOrganizer/src/main/java/org/silverpeas/core/personalorganizer/service/DefaultCalendarService.java",
                "index 4c3776553b..ab45ed3503 100644",
                "--- a/core-services/personalOrganizer/src/main/java/org/silverpeas/core/personalorganizer/service/DefaultCalendarService.java",
                "+++ b/core-services/personalOrganizer/src/main/java/org/silverpeas/core/personalorganizer/service/DefaultCalendarService.java",
                "@@ -296,3 +296,3 @@ public class DefaultCalendarService implements SilverpeasCalendar, ComponentInst",
                "   @Override",
                "-  @Transactional",
                "+  @Transactional(Transactional.TxType.REQUIRED)",
                "   public void removeToDo(String id) {",
                "@@ -311,2 +311,4 @@ public class DefaultCalendarService implements SilverpeasCalendar, ComponentInst",
                "+  @Override",
                "+  @Transactional(Transactional.TxType.REQUIRED)",
                "   public void removeToDoFromExternal(String spaceId, String componentId, String externalId) {",
                "@@ -322,2 +324,4 @@ public class DefaultCalendarService implements SilverpeasCalendar, ComponentInst",
                "+  @Override",
                "+  @Transactional(Transactional.TxType.REQUIRED)",
                "   public void removeAttendeeInToDoFromExternal(String componentId, String externalId,",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java",
                "index 1447dbc800..e0e1506eb0 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java",
                "@@ -164,3 +164,3 @@ public class OperationPaneSilverpeasV5Web20 extends AbstractOperationPane {",
                "       if (!getCreationItems().isEmpty()) {",
                "-        result.append(\"$('.menubar-creation-actions-item').appendTo($creationArea);\");",
                "+        result.append(\"$('.menubar-creation-actions-item:not(.menubar-creation-actions-move-ignored)').appendTo($creationArea);\");",
                "         result.append(\"$('a', $creationArea).css({'display':''});\");"
            ],
            "changed_files": [
                "core-services/personalOrganizer/src/main/java/org/silverpeas/core/personalorganizer/service/DefaultCalendarService.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/operationpanes/OperationPaneSilverpeasV5Web20.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "579e78429c9cd35b1a1f7c080faba52a152931ec",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1538760565,
            "hunks": 5,
            "message": "Now the Logger annotation used in a class-level is also taken into account",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/util/logging/SilverLoggerProvider.java b/core-api/src/main/java/org/silverpeas/core/util/logging/SilverLoggerProvider.java",
                "index f2d5050dc3..7c32c72e21 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/util/logging/SilverLoggerProvider.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/util/logging/SilverLoggerProvider.java",
                "@@ -107,2 +107,5 @@ public class SilverLoggerProvider {",
                "     Logger annotation = pkg.getAnnotation(Logger.class);",
                "+    if (annotation == null && object instanceof Class) {",
                "+      annotation = (Logger) ((Class) object).getAnnotation(Logger.class);",
                "+    }",
                "     if (annotation != null) {",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/util/logging/ClassWithLoggerAnnotation.java b/core-library/src/integration-test/java/org/silverpeas/core/util/logging/ClassWithLoggerAnnotation.java",
                "new file mode 100644",
                "index 0000000000..5d57d830da",
                "--- /dev/null",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/util/logging/ClassWithLoggerAnnotation.java",
                "@@ -0,0 +1,34 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"http://www.silverpeas.org/legal/licensing\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+",
                "+package org.silverpeas.core.util.logging;",
                "+",
                "+@Logger(\"silverpeas.core.tartempion\")",
                "+public class ClassWithLoggerAnnotation {",
                "+",
                "+  public void logMeAMessage(final String message) {",
                "+    SilverLogger.getLogger(this).info(message);",
                "+  }",
                "+}",
                "+  ",
                "\\ No newline at end of file",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/util/logging/LoggerAnnotationIT.java b/core-library/src/integration-test/java/org/silverpeas/core/util/logging/LoggerAnnotationIT.java",
                "new file mode 100644",
                "index 0000000000..9e216ce440",
                "--- /dev/null",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/util/logging/LoggerAnnotationIT.java",
                "@@ -0,0 +1,118 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"http://www.silverpeas.org/legal/licensing\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+package org.silverpeas.core.util.logging;",
                "+",
                "+import org.jboss.arquillian.container.test.api.Deployment;",
                "+import org.jboss.arquillian.junit.Arquillian;",
                "+import org.jboss.shrinkwrap.api.Archive;",
                "+import org.junit.Before;",
                "+import org.junit.Rule;",
                "+import org.junit.Test;",
                "+import org.junit.runner.RunWith;",
                "+import org.silverpeas.core.test.WarBuilder4LibCore;",
                "+import org.silverpeas.core.test.rule.CommonAPI4Test;",
                "+import org.silverpeas.core.test.rule.MavenTargetDirectoryRule;",
                "+import org.silverpeas.core.util.lang.SystemWrapper;",
                "+import org.silverpeas.core.util.toto.ABasicClass;",
                "+",
                "+import javax.inject.Inject;",
                "+import java.io.IOException;",
                "+import java.nio.file.Files;",
                "+import java.nio.file.Path;",
                "+import java.nio.file.Paths;",
                "+",
                "+import static org.hamcrest.Matchers.greaterThanOrEqualTo;",
                "+import static org.hamcrest.Matchers.is;",
                "+import static org.junit.Assert.assertThat;",
                "+import static org.junit.Assert.fail;",
                "+",
                "+/**",
                "+ * Integration test on the use of the Logger annotation.",
                "+ * @author mmoquillon",
                "+ */",
                "+@RunWith(Arquillian.class)",
                "+public class LoggerAnnotationIT {",
                "+",
                "+  @Rule",
                "+  public MavenTargetDirectoryRule mavenTargetDirectoryRule = new MavenTargetDirectoryRule(this);",
                "+",
                "+  @Rule",
                "+  public CommonAPI4Test commonAPI4Test = new CommonAPI4Test();",
                "+",
                "+  @Inject",
                "+  private ClassWithLoggerAnnotation object1;",
                "+",
                "+  @Inject",
                "+  private ABasicClass object2;",
                "+",
                "+  @Deployment",
                "+  public static Archive<?> createTestArchive() {",
                "+    return WarBuilder4LibCore.onWarForTestClass(LoggerAnnotationIT.class)",
                "+        .addCommonBasicUtilities()",
                "+        .addCommonUserBeans()",
                "+        .addPackages(true, \"org.silverpeas.core.util.toto\")",
                "+        .addAsResource(\"org/silverpeas/util/logging/\")",
                "+        .build();",
                "+  }",
                "+",
                "+  @Before",
                "+  public void SetUpTestContext() {",
                "+    commonAPI4Test.setLoggerLevel(Level.DEBUG);",
                "+    SystemWrapper.get()",
                "+        .getenv()",
                "+        .put(\"SILVERPEAS_HOME\", mavenTargetDirectoryRule.getBuildDirFile().getAbsolutePath());",
                "+",
                "+  }",
                "+",
                "+  @Test",
                "+  public void invokeMethodOfALoggerAnnotatedObject() {",
                "+    final String message = \"Hello world!\";",
                "+    object1.logMeAMessage(message);",
                "+    assertThatLogContainsTheMessage(message);",
                "+  }",
                "+",
                "+  @Test",
                "+  public void invokeMethodOfAnObjectInALoggerAnnotatedPackage() {",
                "+    final String message = \"Prout prout @ home\";",
                "+    object2.logMeAMessage(message);",
                "+    assertThatLogContainsTheMessage(message);",
                "+  }",
                "+",
                "+  private void assertThatLogContainsTheMessage(final String message) {",
                "+    final String record = \"INFOS: \" + message;",
                "+    try {",
                "+      // the log file can contains more than this record as the tests can be ran several",
                "+      // times.",
                "+      assertThat(Files.lines(getLogFile()).filter(line -> line.contains(record))",
                "+          .count(), is(greaterThanOrEqualTo(1l)));",
                "+    } catch (IOException e) {",
                "+      fail(e.getMessage());",
                "+    }",
                "+  }",
                "+",
                "+  private Path getLogFile() {",
                "+    return Paths.get(mavenTargetDirectoryRule.getWildflyHomeFile().getPath(), \"standalone\", \"log\",",
                "+        \"server.log\");",
                "+  }",
                "+}",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/util/toto/ABasicClass.java b/core-library/src/integration-test/java/org/silverpeas/core/util/toto/ABasicClass.java",
                "new file mode 100644",
                "index 0000000000..6c478b0b03",
                "--- /dev/null",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/util/toto/ABasicClass.java",
                "@@ -0,0 +1,35 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"http://www.silverpeas.org/legal/licensing\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+",
                "+package org.silverpeas.core.util.toto;",
                "+",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "+",
                "+public class ABasicClass {",
                "+",
                "+  public void logMeAMessage(final String message) {",
                "+    SilverLogger.getLogger(this).info(message);",
                "+  }",
                "+}",
                "+  ",
                "\\ No newline at end of file",
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/util/toto/package-info.java b/core-library/src/integration-test/java/org/silverpeas/core/util/toto/package-info.java",
                "new file mode 100644",
                "index 0000000000..48c7626d7e",
                "--- /dev/null",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/util/toto/package-info.java",
                "@@ -0,0 +1,28 @@",
                "+/*",
                "+ * Copyright (C) 2000 - 2018 Silverpeas",
                "+ *",
                "+ * This program is free software: you can redistribute it and/or modify",
                "+ * it under the terms of the GNU Affero General Public License as",
                "+ * published by the Free Software Foundation, either version 3 of the",
                "+ * License, or (at your option) any later version.",
                "+ *",
                "+ * As a special exception to the terms and conditions of version 3.0 of",
                "+ * the GPL, you may redistribute this Program in connection with Free/Libre",
                "+ * Open Source Software (\"FLOSS\") applications as described in Silverpeas's",
                "+ * FLOSS exception.  You should have received a copy of the text describing",
                "+ * the FLOSS exception, and it is also available here:",
                "+ * \"http://www.silverpeas.org/legal/licensing\"",
                "+ *",
                "+ * This program is distributed in the hope that it will be useful,",
                "+ * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "+ * GNU Affero General Public License for more details.",
                "+ *",
                "+ * You should have received a copy of the GNU Affero General Public License",
                "+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.",
                "+ */",
                "+",
                "+@Logger(\"silverpeas.core.tartempion\")",
                "+package org.silverpeas.core.util.toto;",
                "+",
                "+import org.silverpeas.core.util.logging.Logger;",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/util/logging/SilverLoggerProvider.java",
                "core-library/src/integration-test/java/org/silverpeas/core/util/logging/ClassWithLoggerAnnotation.java",
                "core-library/src/integration-test/java/org/silverpeas/core/util/logging/LoggerAnnotationIT.java",
                "core-library/src/integration-test/java/org/silverpeas/core/util/toto/ABasicClass.java",
                "core-library/src/integration-test/java/org/silverpeas/core/util/toto/package-info.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2d31b37453eb09cea0e84a6380129439cb099648",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1539888392,
            "hunks": 0,
            "message": "Merge branch 'feature-9990' of https://github.com/SilverTeamWork/Silverpeas-Core into SilverTeamWork-feature-9990",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a4063cd8bc272e0a8a40d13d513dbcbf32e0bfdd",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1547050245,
            "hunks": 9,
            "message": "Fixing a technical error during component creation and update which can intriduce bad behaviors...",
            "diff": [
                "diff --git a/core-library/src/integration-test/java/org/silverpeas/core/admin/StubbedAdministration.java b/core-library/src/integration-test/java/org/silverpeas/core/admin/StubbedAdministration.java",
                "index fec2b00c36..3f770cda2f 100644",
                "--- a/core-library/src/integration-test/java/org/silverpeas/core/admin/StubbedAdministration.java",
                "+++ b/core-library/src/integration-test/java/org/silverpeas/core/admin/StubbedAdministration.java",
                "@@ -228,3 +228,3 @@ public class StubbedAdministration implements Administration {",
                "   @Override",
                "-  public void createComponentIndex(final ComponentInstLight componentInst) {",
                "+  public void createComponentIndex(final SilverpeasComponentInstance componentInst) {",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java b/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "index fa3f899343..f7d58c1776 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "@@ -913,3 +913,3 @@ class Admin implements Administration {",
                "       if (!componentInstance.isPersonal()) {",
                "-        createComponentIndex((ComponentInstLight) componentInstance);",
                "+        createComponentIndex(componentInstance);",
                "       }",
                "@@ -921,13 +921,22 @@ class Admin implements Administration {",
                "   @Override",
                "-  public void createComponentIndex(ComponentInstLight componentInst) {",
                "-    if (componentInst != null) {",
                "+  public void createComponentIndex(SilverpeasComponentInstance instance) {",
                "+    if (instance != null) {",
                "       // Index the component",
                "-      String componentId = componentInst.getId();",
                "+      String componentId = instance.getId();",
                "       FullIndexEntry indexEntry = new FullIndexEntry(INDEX_COMPONENT_SCOPE, \"Component\", componentId);",
                "-      indexEntry.setTitle(componentInst.getLabel());",
                "-      indexEntry.setPreview(componentInst.getDescription());",
                "-      indexEntry.setCreationUser(Integer.toString(componentInst.getCreatedBy()));",
                "-      indexEntry.setCreationDate(componentInst.getCreateDate());",
                "-      indexEntry.setLastModificationUser(String.valueOf(componentInst.getUpdatedBy()));",
                "-      indexEntry.setLastModificationDate(componentInst.getUpdateDate());",
                "+      indexEntry.setTitle(instance.getLabel());",
                "+      indexEntry.setPreview(instance.getDescription());",
                "+      if (instance instanceof ComponentInst) {",
                "+        final ComponentInst componentInst = (ComponentInst) instance;",
                "+        indexEntry.setCreationUser(componentInst.getCreatorUserId());",
                "+        indexEntry.setCreationDate(componentInst.getCreateDate());",
                "+        indexEntry.setLastModificationUser(componentInst.getUpdaterUserId());",
                "+        indexEntry.setLastModificationDate(componentInst.getUpdateDate());",
                "+      } else if (instance instanceof ComponentInstLight) {",
                "+        final ComponentInstLight componentInstLight = (ComponentInstLight) instance;",
                "+        indexEntry.setCreationUser(Integer.toString(componentInstLight.getCreatedBy()));",
                "+        indexEntry.setCreationDate(componentInstLight.getCreateDate());",
                "+        indexEntry.setLastModificationUser(String.valueOf(componentInstLight.getUpdatedBy()));",
                "+        indexEntry.setLastModificationDate(componentInstLight.getUpdateDate());",
                "+      }",
                "       IndexEngineProxy.addIndexEntry(indexEntry);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/admin/service/Administration.java b/core-library/src/main/java/org/silverpeas/core/admin/service/Administration.java",
                "index 8281b9fd38..e9c1603f72 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/admin/service/Administration.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/admin/service/Administration.java",
                "@@ -280,3 +280,3 @@ public interface Administration {",
                "    */",
                "-  void createComponentIndex(ComponentInstLight componentInst);",
                "+  void createComponentIndex(SilverpeasComponentInstance componentInst);",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/upload/FileUploadTag.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/upload/FileUploadTag.java",
                "index 73260e944b..f236cbc173 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/upload/FileUploadTag.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/upload/FileUploadTag.java",
                "@@ -54,2 +54,3 @@ public class FileUploadTag extends TagSupport {",
                "   private boolean multiple = true;",
                "+  private boolean infoInputs = true;",
                "   private boolean dragAndDropDisplay = true;",
                "@@ -84,2 +85,10 @@ public class FileUploadTag extends TagSupport {",
                "+  public boolean isInfoInputs() {",
                "+    return infoInputs;",
                "+  }",
                "+",
                "+  public void setInfoInputs(final boolean infoInputs) {",
                "+    this.infoInputs = infoInputs;",
                "+  }",
                "+",
                "   public boolean isDragAndDropDisplay() {",
                "@@ -163,2 +172,4 @@ public class FileUploadTag extends TagSupport {",
                "       jQueryStart.append(isMultiple());",
                "+      jQueryStart.append(\",infoInputs:\");",
                "+      jQueryStart.append(isInfoInputs());",
                "       jQueryStart.append(\",dragAndDropDisplay:\");"
            ],
            "changed_files": [
                "core-library/src/integration-test/java/org/silverpeas/core/admin/StubbedAdministration.java",
                "core-library/src/main/java/org/silverpeas/core/admin/service/Admin.java",
                "core-library/src/main/java/org/silverpeas/core/admin/service/Administration.java",
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/upload/FileUploadTag.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, file, upload",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "33f4e4c441055046f85bbff0cd18c655233fa8d2",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1547632620,
            "hunks": 23,
            "message": "Making the attachment services able to copy versioned documents which the first version is not starting from 1.0 or 0.1",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/attachment/SimpleDocumentService.java b/core-library/src/main/java/org/silverpeas/core/contribution/attachment/SimpleDocumentService.java",
                "index 69df01b1ba..a320d007c5 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/attachment/SimpleDocumentService.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/attachment/SimpleDocumentService.java",
                "@@ -221,3 +221,3 @@ public class SimpleDocumentService",
                "       session.save();",
                "-    } catch (RepositoryException | IOException ex) {",
                "+    } catch (RepositoryException ex) {",
                "       throw new AttachmentException(ex);",
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/attachment/repository/DocumentRepository.java b/core-library/src/main/java/org/silverpeas/core/contribution/attachment/repository/DocumentRepository.java",
                "index 17177c5707..ab0fa3fe4c 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/attachment/repository/DocumentRepository.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/attachment/repository/DocumentRepository.java",
                "@@ -27,2 +27,3 @@ import org.apache.commons.io.FileUtils;",
                " import org.silverpeas.core.WAPrimaryKey;",
                "+import org.silverpeas.core.cache.model.SimpleCache;",
                " import org.silverpeas.core.contribution.attachment.model.DocumentType;",
                "@@ -43,2 +44,3 @@ import org.silverpeas.core.util.file.FileRepositoryManager;",
                " import org.silverpeas.core.util.file.FileUtil;",
                "+import org.silverpeas.core.util.logging.SilverLogger;",
                "@@ -76,2 +78,3 @@ import java.util.Set;",
                " import static javax.jcr.nodetype.NodeType.MIX_SIMPLE_VERSIONABLE;",
                "+import static org.silverpeas.core.cache.service.CacheServiceProvider.getThreadCacheService;",
                " import static org.silverpeas.core.persistence.jcr.util.JcrConstants.*;",
                "@@ -224,50 +227,31 @@ public class DocumentRepository {",
                "   public SimpleDocumentPK copyDocument(Session session, HistorisedDocument document,",
                "-      WAPrimaryKey destination) throws RepositoryException, IOException {",
                "-    prepareComponentAttachments(destination.getInstanceId(), document.getFolder());",
                "-    SimpleDocumentPK pk = new SimpleDocumentPK(null, destination.getInstanceId());",
                "-    List<SimpleDocument> history = new ArrayList<SimpleDocument>(document.getHistory());",
                "-    Collections.reverse(history);",
                "-    history.add(document);",
                "-    SimpleDocument targetDoc = new HistorisedDocument(history.remove(0));",
                "-    targetDoc.setNodeName(null);",
                "-    targetDoc.setPK(pk);",
                "-    targetDoc.setDocumentType(document.getDocumentType());",
                "-    targetDoc.setForeignId(destination.getId());",
                "-    targetDoc.setUpdatedBy(null);",
                "-    targetDoc.computeNodeName();",
                "-    pk = createDocument(session, targetDoc);",
                "-    if (I18NHelper.isI18nContentEnabled()) {",
                "-      // The first version can have several language contents.",
                "-      Set<String> checkedLanguages = new HashSet<String>();",
                "-      checkedLanguages.add(targetDoc.getLanguage());",
                "-      for (String language : I18NHelper.getAllSupportedLanguages()) {",
                "-        if (!checkedLanguages.contains(language)) {",
                "-          HistorisedDocument temp =",
                "-              (HistorisedDocument) findDocumentById(session, document.getPk(), language);",
                "-          List<SimpleDocumentVersion> versions = temp.getHistory();",
                "-          if (!versions.isEmpty()) {",
                "-            SimpleDocumentVersion firstVersion = versions.get(versions.size() - 1);",
                "-            if (!checkedLanguages.contains(firstVersion.getLanguage())) {",
                "-              addContent(session, targetDoc.getPk(), firstVersion.getAttachment());",
                "-            }",
                "-          }",
                "-          checkedLanguages.add(language);",
                "-        }",
                "-      }",
                "-    }",
                "-    unlock(session, targetDoc, false);",
                "-    VersionManager versionManager = session.getWorkspace().getVersionManager();",
                "-    String currentVersion = targetDoc.getVersion();",
                "-    for (SimpleDocument doc : history) {",
                "+      WAPrimaryKey destination) throws RepositoryException {",
                "+    try {",
                "+      prepareComponentAttachments(destination.getInstanceId(), document.getFolder());",
                "+      SimpleDocumentPK pk = new SimpleDocumentPK(null, destination.getInstanceId());",
                "+      List<SimpleDocument> history = new ArrayList<>(document.getHistory());",
                "+      Collections.reverse(history);",
                "+      history.add(document);",
                "+      SimpleDocument targetDoc = new HistorisedDocument(history.remove(0));",
                "+      FirstVersionManager.computeIfAbsent(new DocumentVersion(targetDoc));",
                "+      targetDoc.setNodeName(null);",
                "+      targetDoc.setPK(pk);",
                "+      targetDoc.setDocumentType(document.getDocumentType());",
                "+      targetDoc.setForeignId(destination.getId());",
                "+      targetDoc.setUpdatedBy(null);",
                "+      targetDoc.computeNodeName();",
                "+      pk = createDocument(session, targetDoc);",
                "       if (I18NHelper.isI18nContentEnabled()) {",
                "-        // One language content is aimed by a version. So the first step here is to search the",
                "-        // language content updated.",
                "-        Set<String> checkedLanguages = new HashSet<String>();",
                "-        checkedLanguages.add(doc.getLanguage());",
                "+        // The first version can have several language contents.",
                "+        Set<String> checkedLanguages = new HashSet<>();",
                "+        checkedLanguages.add(targetDoc.getLanguage());",
                "         for (String language : I18NHelper.getAllSupportedLanguages()) {",
                "           if (!checkedLanguages.contains(language)) {",
                "-            SimpleDocument temp = findDocumentById(session, doc.getPk(), language);",
                "-            if (temp != null && !checkedLanguages.contains(temp.getLanguage()) &&",
                "-                temp.getUpdated().after(doc.getUpdated())) {",
                "-              doc = temp;",
                "+            HistorisedDocument temp = (HistorisedDocument) findDocumentById(session, document.getPk(), language);",
                "+            List<SimpleDocumentVersion> versions = temp.getHistory();",
                "+            if (!versions.isEmpty()) {",
                "+              SimpleDocumentVersion firstVersion = versions.get(versions.size() - 1);",
                "+              if (!checkedLanguages.contains(firstVersion.getLanguage())) {",
                "+                addContent(session, targetDoc.getPk(), firstVersion.getAttachment());",
                "+              }",
                "             }",
                "@@ -277,25 +261,48 @@ public class DocumentRepository {",
                "       }",
                "-      HistorisedDocument targetHistorisedDoc = new HistorisedDocument(doc);",
                "-      targetHistorisedDoc.setPK(pk);",
                "-      targetHistorisedDoc.setForeignId(destination.getId());",
                "-      targetHistorisedDoc.setNodeName(targetDoc.getNodeName());",
                "-      // The reservation is not copied.",
                "-      targetHistorisedDoc.release();",
                "-      Node masterDocumentNode = session.getNodeByIdentifier(pk.getId());",
                "-      if (!currentVersion.equals(doc.getVersion())) {",
                "-        // In this case, a functional version is performed, so the common tools are used",
                "-        lock(session, targetDoc, doc.getUpdatedBy());",
                "-        converter.fillNode(targetHistorisedDoc, masterDocumentNode);",
                "-        unlock(session, targetHistorisedDoc, false);",
                "-        currentVersion = targetHistorisedDoc.getVersion();",
                "-      } else {",
                "-        // In this case, the version is a technical one (setOrder for example) and technical",
                "-        // tools are used",
                "-        versionManager.checkout(masterDocumentNode.getPath());",
                "-        converter.fillNode(targetHistorisedDoc, masterDocumentNode);",
                "-        session.save();",
                "-        versionManager.checkin(masterDocumentNode.getPath());",
                "+      unlock(session, targetDoc, false);",
                "+      VersionManager versionManager = session.getWorkspace().getVersionManager();",
                "+      String previousVersion = targetDoc.getVersion();",
                "+      for (SimpleDocument doc : history) {",
                "+        if (I18NHelper.isI18nContentEnabled()) {",
                "+          // One language content is aimed by a version. So the first step here is to search the",
                "+          // language content updated.",
                "+          Set<String> checkedLanguages = new HashSet<>();",
                "+          checkedLanguages.add(doc.getLanguage());",
                "+          for (String language : I18NHelper.getAllSupportedLanguages()) {",
                "+            if (!checkedLanguages.contains(language)) {",
                "+              SimpleDocument temp = findDocumentById(session, doc.getPk(), language);",
                "+              if (temp != null && !checkedLanguages.contains(temp.getLanguage()) &&",
                "+                  temp.getUpdated().after(doc.getUpdated())) {",
                "+                doc = temp;",
                "+              }",
                "+              checkedLanguages.add(language);",
                "+            }",
                "+          }",
                "+        }",
                "+        HistorisedDocument targetHistorisedDoc = new HistorisedDocument(doc);",
                "+        targetHistorisedDoc.setPK(pk);",
                "+        targetHistorisedDoc.setForeignId(destination.getId());",
                "+        targetHistorisedDoc.setNodeName(targetDoc.getNodeName());",
                "+        // The reservation is not copied.",
                "+        targetHistorisedDoc.release();",
                "+        Node masterDocumentNode = session.getNodeByIdentifier(pk.getId());",
                "+        if (!previousVersion.equals(doc.getVersion())) {",
                "+          // In this case, a functional version is performed, so the common tools are used",
                "+          lock(session, targetDoc, doc.getUpdatedBy());",
                "+          converter.fillNode(targetHistorisedDoc, masterDocumentNode);",
                "+          unlock(session, targetHistorisedDoc, false);",
                "+          previousVersion = targetHistorisedDoc.getVersion();",
                "+        } else {",
                "+          // In this case, the version is a technical one (setOrder for example) and technical",
                "+          // tools are used",
                "+          versionManager.checkout(masterDocumentNode.getPath());",
                "+          converter.fillNode(targetHistorisedDoc, masterDocumentNode);",
                "+          session.save();",
                "+          versionManager.checkin(masterDocumentNode.getPath());",
                "+        }",
                "       }",
                "+      return pk;",
                "+    } finally {",
                "+      FirstVersionManager.clear();",
                "     }",
                "-    return pk;",
                "   }",
                "@@ -310,7 +317,5 @@ public class DocumentRepository {",
                "    * @throws RepositoryException",
                "-   * @throws IOException",
                "    */",
                "   public void updateDocument(Session session, SimpleDocument document,",
                "-      final boolean updateLastModifiedData) throws",
                "-      RepositoryException, IOException {",
                "+      final boolean updateLastModifiedData) throws RepositoryException {",
                "     Node documentNode = session.getNodeByIdentifier(document.getPk().getId());",
                "@@ -436,3 +441,3 @@ public class DocumentRepository {",
                "     } catch (ItemNotFoundException infex) {",
                "-",
                "+      SilverLogger.getLogger(this).silent(infex);",
                "     }",
                "@@ -532,3 +537,3 @@ public class DocumentRepository {",
                "     } catch (ItemNotFoundException infex) {",
                "-",
                "+      SilverLogger.getLogger(this).silent(infex);",
                "     }",
                "@@ -1182,3 +1187,2 @@ public class DocumentRepository {",
                "    * Check the document in.",
                "-   *",
                "    * @param documentNode the node to checkin.",
                "@@ -1186,3 +1190,3 @@ public class DocumentRepository {",
                "    * @return the document for this new version.",
                "-   * @throws RepositoryException",
                "+   * @throws RepositoryException on technical JCR error.",
                "    */",
                "@@ -1190,2 +1194,10 @@ public class DocumentRepository {",
                "       RepositoryException {",
                "+    final DocumentVersion firstVersion = FirstVersionManager.remove();",
                "+    if (!documentNode.hasProperty(SLV_PROPERTY_MAJOR) && firstVersion != null) {",
                "+      isMajor = firstVersion.isMajor();",
                "+      int major = firstVersion.getMajor();",
                "+      int minor = firstVersion.getMinor();",
                "+      documentNode.setProperty(SLV_PROPERTY_MAJOR, isMajor ? major - 1 : major);",
                "+      documentNode.setProperty(SLV_PROPERTY_MINOR, isMajor ? minor : minor - 1);",
                "+    }",
                "     VersionManager versionManager = documentNode.getSession().getWorkspace().getVersionManager();",
                "@@ -1195,4 +1207,3 @@ public class DocumentRepository {",
                "     lastVersion.getContainingHistory().addVersionLabel(lastVersion.getName(), versionLabel, false);",
                "-    SimpleDocument doc = converter.convertNode(documentNode, lang);",
                "-    return doc;",
                "+    return converter.convertNode(documentNode, lang);",
                "   }",
                "@@ -1258,4 +1269,4 @@ public class DocumentRepository {",
                "-  public long storeContent(SimpleDocument document, InputStream in, boolean update) throws",
                "-      RepositoryException, IOException {",
                "+  public long storeContent(SimpleDocument document, InputStream in, boolean update)",
                "+      throws IOException {",
                "     File file = new File(document.getAttachmentPath());",
                "@@ -1272,4 +1283,3 @@ public class DocumentRepository {",
                "-  public long storeContent(SimpleDocument document, InputStream in) throws",
                "-      RepositoryException, IOException {",
                "+  public long storeContent(SimpleDocument document, InputStream in) throws IOException {",
                "     return storeContent(document, in, false);",
                "@@ -1277,4 +1287,3 @@ public class DocumentRepository {",
                "-  public void duplicateContent(SimpleDocument origin, SimpleDocument document)",
                "-      throws IOException, RepositoryException {",
                "+  public void duplicateContent(SimpleDocument origin, SimpleDocument document) throws IOException {",
                "     String originDir = origin.getDirectoryPath(null);",
                "@@ -1374,3 +1383,3 @@ public class DocumentRepository {",
                "     Node originalNode = session.getNodeByIdentifier(attachment.getId());",
                "-    Set<String> existingAttachements = new HashSet<String>(I18NHelper.getNumberOfLanguages());",
                "+    Set<String> existingAttachements = new HashSet<>(I18NHelper.getNumberOfLanguages());",
                "     for (Node child : new NodeIterable(originalNode.getNodes())) {",
                "@@ -1416,2 +1425,102 @@ public class DocumentRepository {",
                "   }",
                "+",
                "+  /**",
                "+   * Represents a version of a document.",
                "+   */",
                "+  public static class DocumentVersion {",
                "+    private final int major;",
                "+    private final int minor;",
                "+",
                "+    public DocumentVersion(final int major, final int minor) {",
                "+      this.major = major;",
                "+      this.minor = minor;",
                "+    }",
                "+",
                "+    public DocumentVersion(final SimpleDocument document) {",
                "+      this(document.getMajorVersion(), document.getMinorVersion());",
                "+    }",
                "+",
                "+    boolean isMajor() {",
                "+      return minor == 0;",
                "+    }",
                "+",
                "+    int getMajor() {",
                "+      return major;",
                "+    }",
                "+",
                "+    int getMinor() {",
                "+      return minor;",
                "+    }",
                "+  }",
                "+",
                "+  /**",
                "+   * In charge of registering the first version to apply for {@link HistorisedDocument}.",
                "+   * <p>",
                "+   * When a first version will be registered (document copy as an example), using this manager",
                "+   * permits to apply the right first version.",
                "+   * </p>",
                "+   * <p>",
                "+   * BE CAREFUL: the repository of this manager is the thread memory, so it MUST be used into a",
                "+   * try finally statement:",
                "+   * <pre>",
                "+   *   try {",
                "+   *     ...",
                "+   *     FirstVersionManager.set(new Version(...));",
                "+   *     ...",
                "+   *   } finally {",
                "+   *     FirstVersionManager.clear();",
                "+   *   }",
                "+   * </pre> or",
                "+   * <pre>",
                "+   *   try {",
                "+   *     ...",
                "+   *     FirstVersionManager.computeIfAbsent(new Version(...));",
                "+   *     ...",
                "+   *   } finally {",
                "+   *     FirstVersionManager.clear();",
                "+   *   }",
                "+   * </pre>",
                "+   * </p>",
                "+   */",
                "+  public static class FirstVersionManager {",
                "+",
                "+    private static final String CACHE_KEY = DocumentVersion.class.getSimpleName() + \"@theFirst\";",
                "+",
                "+    private FirstVersionManager() {",
                "+      throw new IllegalAccessError(\"Utility class\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Gets first version and computes it if it does not yet exist.",
                "+     * @param version a version to register if none yet registered.",
                "+     * @return the already registered version if any, the given version otherwise.",
                "+     */",
                "+    public static DocumentVersion computeIfAbsent(final DocumentVersion version) {",
                "+      return getThreadCache().computeIfAbsent(CACHE_KEY, DocumentVersion.class, () -> version);",
                "+    }",
                "+",
                "+    /**",
                "+     * Registers the given version version, even if an other one is already registered.",
                "+     * <p>The previous one registered if any is lost.</p>",
                "+     * @param version a version to register.",
                "+     */",
                "+    public static void set(final DocumentVersion version) {",
                "+      getThreadCache().put(CACHE_KEY, version);",
                "+    }",
                "+",
                "+    /**",
                "+     * Clears the registered version as a first one.",
                "+     */",
                "+    public static void clear() {",
                "+      remove();",
                "+    }",
                "+",
                "+    static DocumentVersion remove() {",
                "+      return getThreadCache().remove(CACHE_KEY, DocumentVersion.class);",
                "+    }",
                "+",
                "+    private static SimpleCache getThreadCache() {",
                "+      return getThreadCacheService().getCache();",
                "+    }",
                "+  }",
                " }"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/contribution/attachment/SimpleDocumentService.java",
                "core-library/src/main/java/org/silverpeas/core/contribution/attachment/repository/DocumentRepository.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "664ddb4cd056bda56a4b04c5914fcfa996095285",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1547482792,
            "hunks": 0,
            "message": "Merge branch 'feature-10255' of https://github.com/mmoqui/Silverpeas-Core into mmoqui-feature-10255",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e9409ca1126a25f60f36cc34a443a0422c538e1b",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1545983093,
            "hunks": 0,
            "message": "Merge branch 'feature-8335' of https://github.com/SilverYoCha/Silverpeas-Core into SilverYoCha-feature-8335",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2ff8819db851e4896fb76a4af41789c55c3676c9",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1541673037,
            "hunks": 4,
            "message": "Fixing the order by of PublicationService.getPublications which has been disturbed after a work of performance optimization.",
            "diff": [
                "diff --git a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "index 1d01458063..5acd0e4746 100644",
                "--- a/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "+++ b/core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java",
                "@@ -57,2 +57,3 @@ import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Objects;",
                " import java.util.stream.Collectors;",
                "@@ -892,3 +893,3 @@ public class PublicationDAO {",
                "     try {",
                "-      final List<PublicationDetail> result = new ArrayList<>(publicationIds.size());",
                "+      final Map<String, PublicationDetail> result = new HashMap<>(publicationIds.size());",
                "       JdbcSqlQuery.executeBySplittingOn(publicationIds, (idBatch, ignore) -> JdbcSqlQuery",
                "@@ -898,6 +899,10 @@ public class PublicationDAO {",
                "         .executeWith(con, r -> {",
                "-          result.add(resultSet2PublicationDetail(r));",
                "+          final PublicationDetail publicationDetail = resultSet2PublicationDetail(r);",
                "+          result.put(publicationDetail.getId(), publicationDetail);",
                "           return null;",
                "         }));",
                "-      return result;",
                "+      return publicationIds.stream()",
                "+          .map(result::get)",
                "+          .filter(Objects::nonNull)",
                "+          .collect(Collectors.toList());",
                "     } catch (SQLException e) {"
            ],
            "changed_files": [
                "core-library/src/main/java/org/silverpeas/core/contribution/publication/dao/PublicationDAO.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "d07da47d04c69a13b4c9d5827d1f05d96dbb28ae",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1540470139,
            "hunks": 3,
            "message": "Adding the possibility to logout from a SSO session even if login.sso.path parameter has been filled.",
            "diff": [
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/authentication/LoginServlet.java b/core-web/src/main/java/org/silverpeas/core/web/authentication/LoginServlet.java",
                "index bcb09d2030..adeabc78d5 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/authentication/LoginServlet.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/authentication/LoginServlet.java",
                "@@ -52,2 +52,3 @@ public class LoginServlet extends SilverpeasHttpServlet {",
                "   private static final long serialVersionUID = 4492227920914085441L;",
                "+  private static final String LOGOUT_PARAM = \"logout\";",
                "@@ -139,3 +140,5 @@ public class LoginServlet extends SilverpeasHttpServlet {",
                "     final Optional<String> ssoLoginPage = getSsoLoginPage(request);",
                "-    if (ssoLoginPage.isPresent() && (isNotDefined(errorCode) || \"3\".equals(errorCode))) {",
                "+    if (ssoLoginPage.isPresent()",
                "+        && (isNotDefined(errorCode) || \"3\".equals(errorCode))",
                "+        && !request.getParameterAsBoolean(LOGOUT_PARAM)) {",
                "       loginPage = ssoLoginPage.get();",
                "@@ -165,3 +168,3 @@ public class LoginServlet extends SilverpeasHttpServlet {",
                "       addParameter(uriBuilder, \"ErrorCode\", errorCode);",
                "-      addParameter(uriBuilder, \"logout\", request.getParameter(\"logout\"));",
                "+      addParameter(uriBuilder, LOGOUT_PARAM, request.getParameter(LOGOUT_PARAM));"
            ],
            "changed_files": [
                "core-web/src/main/java/org/silverpeas/core/web/authentication/LoginServlet.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "33a9a1e4b129af57a7017274cc63573f9ff9c34d",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1540282809,
            "hunks": 5,
            "message": "Fix some issues detected by SonarQube",
            "diff": [
                "diff --git a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/arraypanes/ArrayLineTag.java b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/arraypanes/ArrayLineTag.java",
                "index a80ec3aff7..599d1abcf3 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/arraypanes/ArrayLineTag.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/arraypanes/ArrayLineTag.java",
                "@@ -39,13 +39,4 @@ public class ArrayLineTag extends TagSupport {",
                "-  private String id = null;",
                "   private String classes;",
                "-  public String getId() {",
                "-    return id;",
                "-  }",
                "-",
                "-  public void setId(String id) {",
                "-    this.id = id;",
                "-  }",
                "-",
                "   public void setClasses(final String classes) {",
                "diff --git a/core-web/src/main/java/org/silverpeas/core/webapi/mylinks/MyLinkEntity.java b/core-web/src/main/java/org/silverpeas/core/webapi/mylinks/MyLinkEntity.java",
                "index b47d4d0dc5..5ff59a7926 100644",
                "--- a/core-web/src/main/java/org/silverpeas/core/webapi/mylinks/MyLinkEntity.java",
                "+++ b/core-web/src/main/java/org/silverpeas/core/webapi/mylinks/MyLinkEntity.java",
                "@@ -25,3 +25,4 @@ package org.silverpeas.core.webapi.mylinks;",
                "-import java.net.URI;",
                "+import org.silverpeas.core.mylinks.model.LinkDetail;",
                "+import org.silverpeas.core.webapi.base.WebEntity;",
                "@@ -33,6 +34,3 @@ import javax.xml.bind.annotation.XmlElement;",
                " import javax.xml.bind.annotation.XmlRootElement;",
                "-",
                "-import org.silverpeas.core.webapi.base.WebEntity;",
                "-",
                "-import org.silverpeas.core.mylinks.model.LinkDetail;",
                "+import java.net.URI;",
                "@@ -141,9 +139,2 @@ public class MyLinkEntity implements WebEntity {",
                "-  /**",
                "-   * @return the uri",
                "-   */",
                "-  public URI getUri() {",
                "-    return uri;",
                "-  }",
                "-",
                "   /**"
            ],
            "changed_files": [
                "core-web/src/main/java/org/silverpeas/core/web/util/viewgenerator/html/arraypanes/ArrayLineTag.java",
                "core-web/src/main/java/org/silverpeas/core/webapi/mylinks/MyLinkEntity.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, webapi",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "7a9d533b024931470c5d0ab0e5fae1871d99dc24",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1537191591,
            "hunks": 2,
            "message": "Fix sonarqube feedback",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "index b87b666a9e..a353dffd44 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java",
                "@@ -225,10 +225,3 @@ class DefaultJdbcSqlExecutor implements JdbcSqlExecutor {",
                "       } else {",
                "-        try {",
                "-          Method idGetter = parameter.getClass().getDeclaredMethod(\"getId\");",
                "-          String id = (String) idGetter.invoke(parameter);",
                "-          preparedStatement.setString(paramIndex, id);",
                "-        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {",
                "-          throw new IllegalArgumentException(",
                "-              \"SQL parameter type not handled: \" + parameter.getClass(), e);",
                "-        }",
                "+        setObjectIdentifier(preparedStatement, paramIndex, parameter);",
                "       }",
                "@@ -238,2 +231,14 @@ class DefaultJdbcSqlExecutor implements JdbcSqlExecutor {",
                "+  private static void setObjectIdentifier(final PreparedStatement preparedStatement,",
                "+      final int paramIndex, final Object parameter) throws SQLException {",
                "+    try {",
                "+      Method idGetter = parameter.getClass().getDeclaredMethod(\"getId\");",
                "+      String id = (String) idGetter.invoke(parameter);",
                "+      preparedStatement.setString(paramIndex, id);",
                "+    } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {",
                "+      throw new IllegalArgumentException(",
                "+          \"SQL parameter type not handled: \" + parameter.getClass(), e);",
                "+    }",
                "+  }",
                "+",
                "   private static boolean isADate(final Object parameter) {"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/persistence/jdbc/sql/DefaultJdbcSqlExecutor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "92477491433a289639dc3655e22b2d34c29086a3",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1548081157,
            "hunks": 1,
            "message": "Fix a bug in AbstractCache (missing to take care of the time-to-live parameter). Add a new javascript type: SelectionPipeline to process in a pipeline several decisions (each of them being a function) to select the correct result according to the passed value",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/cache/model/AbstractCache.java b/core-api/src/main/java/org/silverpeas/core/cache/model/AbstractCache.java",
                "index 1fc3bf1231..a52fece958 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/cache/model/AbstractCache.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/cache/model/AbstractCache.java",
                "@@ -72,3 +72,3 @@ public abstract class AbstractCache extends AbstractSimpleCache",
                "       final Supplier<T> valueSupplier) {",
                "-    return computeIfAbsent(key, classType, 0, DEFAULT_TIME_TO_IDLE, valueSupplier);",
                "+    return computeIfAbsent(key, classType, timeToLive, DEFAULT_TIME_TO_IDLE, valueSupplier);",
                "   }"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/cache/model/AbstractCache.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "50a805ce089d2698d24a840f21410615aec4f472",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1539178776,
            "hunks": 24,
            "message": "Ignoring some integration tests around the document service converter.",
            "diff": [
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceIT.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceIT.java",
                "index d6ccb3b195..a8cabda3e4 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceIT.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceIT.java",
                "@@ -29,2 +29,3 @@ import org.junit.After;",
                " import org.junit.Before;",
                "+import org.junit.Ignore;",
                " import org.junit.Rule;",
                "@@ -47,2 +48,3 @@ import static org.mockito.Mockito.when;",
                " @RunWith(Arquillian.class)",
                "+@Ignore",
                " public class PreviewServiceIT extends AbstractViewerIT {",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceWithoutSwfrenderIT.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceWithoutSwfrenderIT.java",
                "index 5d4e7cfc6b..4ec146c22e 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceWithoutSwfrenderIT.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceWithoutSwfrenderIT.java",
                "@@ -29,2 +29,3 @@ import org.junit.After;",
                " import org.junit.Before;",
                "+import org.junit.Ignore;",
                " import org.junit.Rule;",
                "@@ -47,2 +48,3 @@ import static org.mockito.Mockito.when;",
                " @RunWith(Arquillian.class)",
                "+@Ignore",
                " public class PreviewServiceWithoutSwfrenderIT extends AbstractViewerIT {",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationAfter.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationAfter.java",
                "index 91333e9da3..38f4d9c0f3 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationAfter.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationAfter.java",
                "@@ -30,2 +30,3 @@ import org.junit.After;",
                " import org.junit.Before;",
                "+import org.junit.Ignore;",
                " import org.junit.Rule;",
                "@@ -50,2 +51,3 @@ import static org.mockito.Mockito.when;",
                " @RunWith(Arquillian.class)",
                "+@Ignore",
                " public class ViewServiceCacheDemonstrationAfter extends AbstractViewerIT {",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationBefore.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationBefore.java",
                "index a30f1f430b..6e759952f0 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationBefore.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationBefore.java",
                "@@ -29,2 +29,3 @@ import org.jboss.arquillian.junit.Arquillian;",
                " import org.junit.Before;",
                "+import org.junit.Ignore;",
                " import org.junit.Rule;",
                "@@ -49,2 +50,3 @@ import static org.mockito.Mockito.when;",
                " @RunWith(Arquillian.class)",
                "+@Ignore",
                " public class ViewServiceCacheDemonstrationBefore extends AbstractViewerIT {",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationITSuite.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationITSuite.java",
                "index 179c016741..8e8b490045 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationITSuite.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationITSuite.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.viewer.service;",
                "+import org.junit.Ignore;",
                " import org.junit.runner.RunWith;",
                "@@ -33,2 +34,3 @@ import org.junit.runners.Suite;",
                " @RunWith(Suite.class)",
                "+@Ignore",
                " @Suite.SuiteClasses({",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceConcurrencyDemonstrationIT.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceConcurrencyDemonstrationIT.java",
                "index 23c561a9cf..0bd9f6e66c 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceConcurrencyDemonstrationIT.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceConcurrencyDemonstrationIT.java",
                "@@ -30,2 +30,3 @@ import org.junit.After;",
                " import org.junit.Before;",
                "+import org.junit.Ignore;",
                " import org.junit.Rule;",
                "@@ -49,2 +50,3 @@ import static org.mockito.Mockito.when;",
                " @RunWith(Arquillian.class)",
                "+@Ignore",
                " public class ViewServiceConcurrencyDemonstrationIT extends AbstractViewerIT {",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceIT.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceIT.java",
                "index 1946217433..b0ac4eeb54 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceIT.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceIT.java",
                "@@ -29,2 +29,3 @@ import org.junit.After;",
                " import org.junit.Before;",
                "+import org.junit.Ignore;",
                " import org.junit.Rule;",
                "@@ -46,2 +47,3 @@ import static org.mockito.Mockito.when;",
                " @RunWith(Arquillian.class)",
                "+@Ignore",
                " public class ViewServiceIT extends AbstractViewerIT {",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationAfter.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationAfter.java",
                "index d676c268c6..d66ac98e73 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationAfter.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationAfter.java",
                "@@ -30,2 +30,3 @@ import org.junit.After;",
                " import org.junit.Before;",
                "+import org.junit.Ignore;",
                " import org.junit.Rule;",
                "@@ -50,2 +51,3 @@ import static org.mockito.Mockito.when;",
                " @RunWith(Arquillian.class)",
                "+@Ignore",
                " public class ViewServiceNoCacheDemonstrationAfter extends AbstractViewerIT {",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationBefore.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationBefore.java",
                "index 83faa5427d..0bc129e323 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationBefore.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationBefore.java",
                "@@ -29,2 +29,3 @@ import org.jboss.arquillian.junit.Arquillian;",
                " import org.junit.Before;",
                "+import org.junit.Ignore;",
                " import org.junit.Rule;",
                "@@ -49,2 +50,3 @@ import static org.mockito.Mockito.when;",
                " @RunWith(Arquillian.class)",
                "+@Ignore",
                " public class ViewServiceNoCacheDemonstrationBefore extends AbstractViewerIT {",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationITSuite.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationITSuite.java",
                "index 2ab472f95a..78c5263b28 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationITSuite.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationITSuite.java",
                "@@ -25,2 +25,3 @@ package org.silverpeas.core.viewer.service;",
                "+import org.junit.Ignore;",
                " import org.junit.runner.RunWith;",
                "@@ -33,2 +34,3 @@ import org.junit.runners.Suite;",
                " @RunWith(Suite.class)",
                "+@Ignore",
                " @Suite.SuiteClasses({",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceSplitMethodIT.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceSplitMethodIT.java",
                "index 2e34321f28..2f346d7224 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceSplitMethodIT.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceSplitMethodIT.java",
                "@@ -29,2 +29,3 @@ import org.junit.After;",
                " import org.junit.Before;",
                "+import org.junit.Ignore;",
                " import org.junit.Rule;",
                "@@ -48,2 +49,3 @@ import static org.mockito.Mockito.when;",
                " @RunWith(Arquillian.class)",
                "+@Ignore",
                " public class ViewServiceSplitMethodIT extends AbstractViewerIT {",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceSplitMethodWithoutJsonPdfIT.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceSplitMethodWithoutJsonPdfIT.java",
                "index 4cae6d769a..857c3554ce 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceSplitMethodWithoutJsonPdfIT.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceSplitMethodWithoutJsonPdfIT.java",
                "@@ -29,2 +29,3 @@ import org.junit.After;",
                " import org.junit.Before;",
                "+import org.junit.Ignore;",
                " import org.junit.Rule;",
                "@@ -46,2 +47,3 @@ import static org.mockito.Mockito.when;",
                " @RunWith(Arquillian.class)",
                "+@Ignore",
                " public class ViewServiceSplitMethodWithoutJsonPdfIT extends AbstractViewerIT {"
            ],
            "changed_files": [
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceIT.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceWithoutSwfrenderIT.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationAfter.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationBefore.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceCacheDemonstrationITSuite.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceConcurrencyDemonstrationIT.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceIT.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationAfter.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationBefore.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceNoCacheDemonstrationITSuite.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceSplitMethodIT.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/ViewServiceSplitMethodWithoutJsonPdfIT.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.0.2"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fe345fccc67f0e201cf22baa6df8ef017547897b",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1538570498,
            "hunks": 27,
            "message": "In the preview test integration, take into account the conversion of an office spreadsheet can be converted in landscape mode than portrait one according to the office suite used (or its configuration).",
            "diff": [
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/AbstractViewerIT.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/AbstractViewerIT.java",
                "index 365a3effdd..252977e0c9 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/AbstractViewerIT.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/AbstractViewerIT.java",
                "@@ -36,2 +36,3 @@ import org.silverpeas.core.initialization.Initialization;",
                " import org.silverpeas.core.io.media.image.imagemagick.Im4javaManager;",
                "+import org.silverpeas.core.io.media.image.option.DimensionOption;",
                " import org.silverpeas.core.test.rule.MavenTargetDirectoryRule;",
                "@@ -55,2 +56,4 @@ public abstract class AbstractViewerIT {",
                "+  static final DimensionOption IMG_PORTRAIT = DimensionOption.widthAndHeight(595, 842);",
                "+  static final DimensionOption IMG_LANDSCAPE = DimensionOption.widthAndHeight(612, 792);",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceIT.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceIT.java",
                "index c673a03c0d..10513b2873 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceIT.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceIT.java",
                "@@ -32,2 +32,3 @@ import org.junit.Test;",
                " import org.junit.runner.RunWith;",
                "+import org.silverpeas.core.io.media.image.option.DimensionOption;",
                " import org.silverpeas.core.test.rule.MockByReflectionRule;",
                "@@ -39,2 +40,3 @@ import org.silverpeas.core.viewer.model.ViewerSettings;",
                " import javax.inject.Inject;",
                "+import java.util.stream.Stream;",
                "@@ -300,3 +302,3 @@ public class PreviewServiceIT extends AbstractViewerIT {",
                "   private void assertPptDocumentPreview(Preview preview) {",
                "-    assertDocumentPreview(preview, 720, 540, false);",
                "+    assertDocumentPreview(preview, false, DimensionOption.widthAndHeight(720, 540));",
                "   }",
                "@@ -304,3 +306,3 @@ public class PreviewServiceIT extends AbstractViewerIT {",
                "   private void assertPptDocumentPreviewWithCacheManagement(Preview preview) {",
                "-    assertDocumentPreview(preview, 720, 540, true);",
                "+    assertDocumentPreview(preview, true, DimensionOption.widthAndHeight(720, 540));",
                "   }",
                "@@ -308,3 +310,3 @@ public class PreviewServiceIT extends AbstractViewerIT {",
                "   private void assertImageDocumentPreview(Preview preview) {",
                "-    assertDocumentPreview(preview, 1000, 750, false);",
                "+    assertDocumentPreview(preview, false, DimensionOption.widthAndHeight(1000, 750));",
                "   }",
                "@@ -312,3 +314,3 @@ public class PreviewServiceIT extends AbstractViewerIT {",
                "   private void assertImageDocumentPreviewWithCacheManagement(Preview preview) {",
                "-    assertDocumentPreview(preview, 1000, 750, true);",
                "+    assertDocumentPreview(preview, true, DimensionOption.widthAndHeight(1000, 750));",
                "   }",
                "@@ -316,3 +318,3 @@ public class PreviewServiceIT extends AbstractViewerIT {",
                "   private void assertOfficeOrPdfDocumentPreview(Preview preview) {",
                "-    assertDocumentPreview(preview, 595, 842, false);",
                "+    assertDocumentPreview(preview, false, IMG_PORTRAIT, IMG_LANDSCAPE);",
                "   }",
                "@@ -320,9 +322,17 @@ public class PreviewServiceIT extends AbstractViewerIT {",
                "   private void assertOfficeOrPdfDocumentPreviewWithCacheManagement(Preview preview) {",
                "-    assertDocumentPreview(preview, 595, 842, true);",
                "+    assertDocumentPreview(preview, true, IMG_PORTRAIT, IMG_LANDSCAPE);",
                "   }",
                "-  private void assertDocumentPreview(Preview preview, int width, int height,",
                "-      final boolean cacheUsed) {",
                "+  private void assertDocumentPreview(Preview preview, final boolean cacheUsed,",
                "+      final DimensionOption... dimensions) {",
                "     assertThat(preview, notNullValue());",
                "     int nbFilesAtTempRoot = cacheUsed ? 2 : 1;",
                "+    String[] widths = Stream.of(dimensions)",
                "+        .map(DimensionOption::getWidth)",
                "+        .map(String::valueOf)",
                "+        .toArray(String[]::new);",
                "+    String[] heights = Stream.of(dimensions)",
                "+        .map(DimensionOption::getHeight)",
                "+        .map(String::valueOf)",
                "+        .toArray(String[]::new);",
                "     assertThat(getTemporaryPath().listFiles(), arrayWithSize(nbFilesAtTempRoot));",
                "@@ -331,7 +341,7 @@ public class PreviewServiceIT extends AbstractViewerIT {",
                "     assertThat(preview.getPhysicalFile().getName().length(), is(8));",
                "-    assertThat(preview.getWidth(), is(String.valueOf(width)));",
                "-    assertThat(preview.getHeight(), is(String.valueOf(height)));",
                "+    assertThat(preview.getWidth(), isIn(widths));",
                "+    assertThat(preview.getHeight(), isIn(heights));",
                "     final String[] previewSize = ImageUtil.getWidthAndHeight(preview.getPhysicalFile());",
                "-    assertThat(previewSize[0], is(String.valueOf(width)));",
                "-    assertThat(previewSize[1], is(String.valueOf(height)));",
                "+    assertThat(previewSize[0], isIn(widths));",
                "+    assertThat(previewSize[1], isIn(heights));",
                "   }",
                "diff --git a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceWithoutSwfrenderIT.java b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceWithoutSwfrenderIT.java",
                "index 6fb1756fbd..2a23f30762 100644",
                "--- a/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceWithoutSwfrenderIT.java",
                "+++ b/core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceWithoutSwfrenderIT.java",
                "@@ -32,4 +32,3 @@ import org.junit.Test;",
                " import org.junit.runner.RunWith;",
                "-import org.silverpeas.core.viewer.model.Preview;",
                "-import org.silverpeas.core.viewer.model.ViewerSettings;",
                "+import org.silverpeas.core.io.media.image.option.DimensionOption;",
                " import org.silverpeas.core.test.rule.MockByReflectionRule;",
                "@@ -37,2 +36,4 @@ import org.silverpeas.core.util.ImageUtil;",
                " import org.silverpeas.core.util.SettingBundle;",
                "+import org.silverpeas.core.viewer.model.Preview;",
                "+import org.silverpeas.core.viewer.model.ViewerSettings;",
                "@@ -40,2 +41,4 @@ import javax.inject.Inject;",
                "+import java.util.stream.Stream;",
                "+",
                " import static org.hamcrest.MatcherAssert.assertThat;",
                "@@ -299,3 +302,3 @@ public class PreviewServiceWithoutSwfrenderIT extends AbstractViewerIT {",
                "   private void assertPptDocumentPreview(Preview preview) {",
                "-    assertDocumentPreview(preview, 720, 540, false, \"jpg\");",
                "+    assertDocumentPreview(preview, false, DimensionOption.widthAndHeight(720, 540));",
                "   }",
                "@@ -303,3 +306,3 @@ public class PreviewServiceWithoutSwfrenderIT extends AbstractViewerIT {",
                "   private void assertPptDocumentPreviewWithCacheManagement(Preview preview) {",
                "-    assertDocumentPreview(preview, 720, 540, true, \"jpg\");",
                "+    assertDocumentPreview(preview, true, DimensionOption.widthAndHeight(720, 540));",
                "   }",
                "@@ -307,3 +310,3 @@ public class PreviewServiceWithoutSwfrenderIT extends AbstractViewerIT {",
                "   private void assertImageDocumentPreview(Preview preview) {",
                "-    assertDocumentPreview(preview, 1000, 750, false, \"jpg\");",
                "+    assertDocumentPreview(preview, false, DimensionOption.widthAndHeight(1000, 750));",
                "   }",
                "@@ -311,3 +314,3 @@ public class PreviewServiceWithoutSwfrenderIT extends AbstractViewerIT {",
                "   private void assertImageDocumentPreviewWithCacheManagement(Preview preview) {",
                "-    assertDocumentPreview(preview, 1000, 750, true, \"jpg\");",
                "+    assertDocumentPreview(preview, true, DimensionOption.widthAndHeight(1000, 750));",
                "   }",
                "@@ -315,3 +318,3 @@ public class PreviewServiceWithoutSwfrenderIT extends AbstractViewerIT {",
                "   private void assertOfficeOrPdfDocumentPreview(Preview preview) {",
                "-    assertDocumentPreview(preview, 595, 842, false, \"jpg\");",
                "+    assertDocumentPreview(preview, false, IMG_PORTRAIT, IMG_LANDSCAPE);",
                "   }",
                "@@ -319,9 +322,18 @@ public class PreviewServiceWithoutSwfrenderIT extends AbstractViewerIT {",
                "   private void assertOfficeOrPdfDocumentPreviewWithCacheManagement(Preview preview) {",
                "-    assertDocumentPreview(preview, 595, 842, true, \"jpg\");",
                "+    assertDocumentPreview(preview, true, IMG_PORTRAIT, IMG_LANDSCAPE);",
                "   }",
                "-  private void assertDocumentPreview(Preview preview, int width, int height,",
                "-      final boolean cacheUsed, final String fileExtension) {",
                "+  private void assertDocumentPreview(Preview preview, final boolean cacheUsed,",
                "+      final DimensionOption... dimensions) {",
                "     assertThat(preview, notNullValue());",
                "-    int nbFilesAtTempRoot = cacheUsed ? 2 : 1;",
                "+    final String fileExtension = \"jpg\";",
                "+    final int nbFilesAtTempRoot = cacheUsed ? 2 : 1;",
                "+    String[] widths = Stream.of(dimensions)",
                "+        .map(DimensionOption::getWidth)",
                "+        .map(String::valueOf)",
                "+        .toArray(String[]::new);",
                "+    String[] heights = Stream.of(dimensions)",
                "+        .map(DimensionOption::getHeight)",
                "+        .map(String::valueOf)",
                "+        .toArray(String[]::new);",
                "     assertThat(getTemporaryPath().listFiles(), arrayWithSize(nbFilesAtTempRoot));",
                "@@ -329,7 +341,7 @@ public class PreviewServiceWithoutSwfrenderIT extends AbstractViewerIT {",
                "     assertThat(preview.getPhysicalFile().getName(), is(\"file.\" + fileExtension));",
                "-    assertThat(preview.getWidth(), is(String.valueOf(width)));",
                "-    assertThat(preview.getHeight(), is(String.valueOf(height)));",
                "+    assertThat(preview.getWidth(), isIn(widths));",
                "+    assertThat(preview.getHeight(), isIn(heights));",
                "     final String[] previewSize = ImageUtil.getWidthAndHeight(preview.getPhysicalFile());",
                "-    assertThat(previewSize[0], is(String.valueOf(width)));",
                "-    assertThat(previewSize[1], is(String.valueOf(height)));",
                "+    assertThat(previewSize[0], isIn(widths));",
                "+    assertThat(previewSize[1], isIn(heights));",
                "   }"
            ],
            "changed_files": [
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/AbstractViewerIT.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceIT.java",
                "core-services/viewer/src/integration-test/java/org/silverpeas/core/viewer/service/PreviewServiceWithoutSwfrenderIT.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "89db6fbba81207c7db94ef75157471bc74d2d9da",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1547657387,
            "hunks": 1,
            "message": "now, last modifier of a contribution is notified when a comment is posted",
            "diff": [
                "diff --git a/core-services/comment/src/main/java/org/silverpeas/core/comment/service/notification/CommentUserNotificationService.java b/core-services/comment/src/main/java/org/silverpeas/core/comment/service/notification/CommentUserNotificationService.java",
                "index 6c513481f4..90dfbe6dbe 100644",
                "--- a/core-services/comment/src/main/java/org/silverpeas/core/comment/service/notification/CommentUserNotificationService.java",
                "+++ b/core-services/comment/src/main/java/org/silverpeas/core/comment/service/notification/CommentUserNotificationService.java",
                "@@ -169,2 +169,7 @@ public class CommentUserNotificationService extends CDIResourceEventListener<Com",
                "     }",
                "+    User contentUpdater = content.getLastModifier();",
                "+    if (contentUpdater != null && !contentUpdater.getId().equals(contentCreator.getId()) &&",
                "+        !commentAuthorId.equals(contentUpdater.getId()) && canBeSent(content, contentUpdater)) {",
                "+      interestedUsers.add(contentUpdater.getId());",
                "+    }",
                "     return interestedUsers;"
            ],
            "changed_files": [
                "core-services/comment/src/main/java/org/silverpeas/core/comment/service/notification/CommentUserNotificationService.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core, user",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "62b3cb563767ab403bfd58ec571465f78eec6d6d",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1540462538,
            "hunks": 2,
            "message": "When creating a DateTime, take into account by default the current timezone Disable a test that fails depending on the platform on which it runs",
            "diff": [
                "diff --git a/core-api/src/main/java/org/silverpeas/core/date/DateTime.java b/core-api/src/main/java/org/silverpeas/core/date/DateTime.java",
                "index bfaad8da7b..69b0a2f3c2 100644",
                "--- a/core-api/src/main/java/org/silverpeas/core/date/DateTime.java",
                "+++ b/core-api/src/main/java/org/silverpeas/core/date/DateTime.java",
                "@@ -100,3 +100,3 @@ public class DateTime extends AbstractDateTemporal<DateTime> {",
                "   public DateTime(final java.util.Date aDate) {",
                "-    super(aDate.getTime());",
                "+    this(aDate, TimeZone.getDefault());",
                "   }",
                "@@ -125,3 +125,5 @@ public class DateTime extends AbstractDateTemporal<DateTime> {",
                "   public java.util.Date asDate() {",
                "-    return new java.util.Date(getTime());",
                "+    Calendar calendar = Calendar.getInstance(getTimeZone());",
                "+    calendar.setTimeInMillis(getTime());",
                "+    return calendar.getTime();",
                "   }"
            ],
            "changed_files": [
                "core-api/src/main/java/org/silverpeas/core/date/DateTime.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c84cc3f3ee53e8f80328fb909dab5584c61aa35e",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1546529749,
            "hunks": 0,
            "message": "Merge branch 'bug-file-upload' into 6.0.x",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file, upload",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "e6e6b988d37df0e81ca0810be2890dacb95802a4",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1545836296,
            "hunks": 5,
            "message": "in subscriptions tool, folder subscriptions are now displayed by default",
            "diff": [
                "diff --git a/core-war/src/main/java/org/silverpeas/web/pdcsubscription/servlets/PdcSubscriptionPeasRequestRouter.java b/core-war/src/main/java/org/silverpeas/web/pdcsubscription/servlets/PdcSubscriptionPeasRequestRouter.java",
                "index ba2deeaebb..69e7356465 100644",
                "--- a/core-war/src/main/java/org/silverpeas/web/pdcsubscription/servlets/PdcSubscriptionPeasRequestRouter.java",
                "+++ b/core-war/src/main/java/org/silverpeas/web/pdcsubscription/servlets/PdcSubscriptionPeasRequestRouter.java",
                "@@ -82,2 +82,4 @@ public class PdcSubscriptionPeasRequestRouter extends ComponentRequestRouter<Pdc",
                "       if (function.startsWith(\"subscriptionList\")) {",
                "+        destination = getDestination(\"ViewSubscriptionTheme\", pdcSC, request);",
                "+      } else if (\"ViewSubscriptionTaxonomy\".equals(function)) {",
                "         destination = rootDest + processSubscriptionList(request, pdcSC);",
                "@@ -136,3 +138,3 @@ public class PdcSubscriptionPeasRequestRouter extends ComponentRequestRouter<Pdc",
                "         pdcSC.createPDCSubscription(name, criteria);",
                "-        destination = getDestination(\"subscriptionList\", pdcSC, request);",
                "+        destination = getDestination(\"ViewSubscriptionTaxonomy\", pdcSC, request);",
                "       } else if (function.startsWith(\"updateSubscription\")) {",
                "@@ -142,3 +144,3 @@ public class PdcSubscriptionPeasRequestRouter extends ComponentRequestRouter<Pdc",
                "         pdcSC.updateCurrentSubscription(name, criteria);",
                "-        destination = getDestination(\"subscriptionList\", pdcSC, request);",
                "+        destination = getDestination(\"ViewSubscriptionTaxonomy\", pdcSC, request);",
                "       }",
                "@@ -161,3 +163,3 @@ public class PdcSubscriptionPeasRequestRouter extends ComponentRequestRouter<Pdc",
                "       throws Exception {",
                "-    request.setAttribute(\"action\", \"subscriptionList\");",
                "+    request.setAttribute(\"action\", \"ViewSubscriptionTaxonomy\");",
                "@@ -212,7 +214,2 @@ public class PdcSubscriptionPeasRequestRouter extends ComponentRequestRouter<Pdc",
                "   }",
                "-",
                "-  public List<? extends Criteria> criteriasFromAxisValues(String axisValues) {",
                "-    List<? extends Criteria> criteria = AxisValueCriterion.fromFlattenedAxisValues(axisValues);",
                "-    return criteria;",
                "-  }",
                "-}",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "core-war/src/main/java/org/silverpeas/web/pdcsubscription/servlets/PdcSubscriptionPeasRequestRouter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: silverpea, core",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "743723568aa41219d72dd5d5370a2cb53ecc71fa",
            "repository": "https://github.com/Silverpeas/Silverpeas-Core",
            "timestamp": 1540993159,
            "hunks": 0,
            "message": "Merge branch 'bug-10135-10136'",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "6.1",
                "6.1.1",
                "6.1.2",
                "6.1.3",
                "6.2",
                "6.2.1",
                "6.2.2",
                "6.2.3",
                "6.3",
                "6.3.1",
                "6.3.2",
                "6.3.3",
                "6.3.4",
                "6.3.5",
                "6.4",
                "6.4.1"
            ],
            "matched_rules": []
        }
    ]
}
