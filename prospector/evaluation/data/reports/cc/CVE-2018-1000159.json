{
    "advisory_record": {
        "cve_id": "CVE-2018-1000159",
        "description": "tlslite-ng version 0.7.3 and earlier, since commit d7b288316bca7bcdd082e6ccff5491e241305233 contains a CWE-354: Improper Validation of Integrity Check Value vulnerability in TLS implementation, tlslite/utils/constanttime.py: ct_check_cbc_mac_and_pad(); line \"end_pos = data_len - 1 - mac.digest_size\" that can result in an attacker manipulating the TLS ciphertext which will not be detected by receiving tlslite-ng. This attack appears to be exploitable via man in the middle on a network connection. This vulnerability appears to have been fixed after commit 3674815d1b0f7484454995e2737a352e0a6a93d8.",
        "reserved_timestamp": 1522108800,
        "published_timestamp": 1524078000,
        "updated_timestamp": 1524077821,
        "repository_url": null,
        "references": {
            "": 138,
            "commit::3674815d1b0f7484454995e2737a352e0a6a93d8": 6,
            "https://github.com/tomato42/tlslite-ng/pull/234": 4,
            "commit::e5e9145558f4c1a81071c61c947aa55a52542585": 4,
            "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax": 4,
            "https://github.com/tomato42/tlslite-ng/pull/235": 2,
            "https://github.com/features/actions": 2,
            "https://github.com/features/packages": 2,
            "https://github.com/features/security": 2,
            "https://github.com/features/codespaces": 2,
            "https://github.com/features/copilot": 2,
            "https://github.com/features/code-review": 2,
            "https://github.com/features/issues": 2,
            "https://github.com/features/discussions": 2,
            "https://github.com/features": 2,
            "https://docs.github.com": 2,
            "https://skills.github.com": 2,
            "https://github.blog": 2,
            "https://github.com/enterprise": 2,
            "https://github.com/team": 2,
            "https://github.com/enterprise/startups": 2,
            "https://github.com/solutions/industries/healthcare": 2,
            "https://github.com/solutions/industries/financial-services": 2,
            "https://github.com/solutions/industries/manufacturing": 2,
            "https://github.com/solutions/ci-cd": 2,
            "https://github.com/solutions/devops": 2,
            "https://github.com/solutions/devsecops": 2,
            "https://resources.github.com/learn/pathways": 2,
            "https://resources.github.com": 2,
            "https://github.com/customer-stories": 2,
            "https://partner.github.com": 2,
            "https://github.com/readme": 2,
            "https://github.com/topics": 2,
            "https://github.com/trending": 2,
            "https://github.com/collections": 2,
            "https://github.com/enterprise/advanced-security": 2,
            "https://github.com/pricing": 2,
            "https://docs.github.com/terms": 2,
            "https://docs.github.com/privacy": 2,
            "https://github.co/hiddenchars": 2,
            "https://github.com/advisories/GHSA-cwh5-3cw7-4286": 2,
            "https://github.com": 2,
            "https://docs.github.com/site-policy/github-terms/github-terms-of-service": 2,
            "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement": 2,
            "https://github.com/security": 2,
            "https://www.githubstatus.com/": 2,
            "https://docs.github.com/": 2,
            "https://support.github.com?tags=dotcom-footer": 2,
            "https://reviewable.io/reviews/tomato42/tlslite-ng/234": 1,
            "commit::ec5c61fae8b8eee0f62717091775f68d8161ca34": 1,
            "https://github.com/tlsfuzzer/tlslite-ng/pull/234#event-1549680361": 1,
            "https://reviewable.io/reviews/tomato42/tlslite-ng/235": 1,
            "commit::cf1e82729f3bd44b9dd5d88a6f3a64c73b131889": 1,
            "https://github.com/tlsfuzzer/tlslite-ng/pull/235#event-1549680843": 1
        },
        "affected_products": [
            "Value",
            "Integrity",
            "Validation",
            "tlslite",
            "Check",
            "n/a",
            "TLS"
        ],
        "versions": {
            "status": "affected",
            "version": "n/a"
        },
        "files": [
            "CWE-354",
            "ct_check_cbc_mac_and_pad",
            "tlslite-ng",
            "data_len",
            "mac",
            "constanttime",
            "digest_size",
            "end_pos",
            "TLS"
        ],
        "keywords": [
            "connection",
            "line",
            "result",
            "attack",
            "ciphertext",
            "attacker",
            "d7b288316bca7bcdd082e6ccff5491e241305233",
            "commit",
            "receive",
            "vulnerability",
            "value",
            "appear",
            "integrity",
            "implementation",
            "middle",
            "contain",
            "tlslite",
            "util",
            "network",
            "check",
            "3674815d1b0f7484454995e2737a352e0a6a93d8",
            "manipulate",
            "validation",
            "detect",
            "version"
        ],
        "files_extension": [
            "py"
        ],
        "has_fixing_commit": true
    },
    "commits": [
        {
            "commit_id": "cf1e82729f3bd44b9dd5d88a6f3a64c73b131889",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1522413980,
            "hunks": 0,
            "message": "Merge pull request #235 from tomato42/backport-0-pad-fix verify the mac even if the padding is 1 byte long",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "235": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.7.4",
                "v0.7.5",
                "v0.7.6"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 235",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 1 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: mac",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 235",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ec5c61fae8b8eee0f62717091775f68d8161ca34",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1522413953,
            "hunks": 0,
            "message": "Merge pull request #234 from tomato42/0-pad-ignore-mac-fix verify the mac even if the padding is 1 byte long",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "234": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.8.0-alpha10",
                "v0.8.0-alpha11",
                "v0.8.0-alpha12",
                "v0.8.0-alpha13",
                "v0.8.0-alpha14",
                "v0.8.0-alpha15",
                "v0.8.0-alpha16",
                "v0.8.0-alpha17",
                "v0.8.0-alpha18",
                "v0.8.0-alpha19",
                "v0.8.0-alpha20",
                "v0.8.0-alpha21",
                "v0.8.0-alpha22",
                "v0.8.0-alpha23",
                "v0.8.0-alpha24",
                "v0.8.0-alpha25",
                "v0.8.0-alpha26",
                "v0.8.0-alpha27",
                "v0.8.0-alpha28",
                "v0.8.0-alpha29",
                "v0.8.0-alpha3",
                "v0.8.0-alpha30",
                "v0.8.0-alpha31",
                "v0.8.0-alpha32",
                "v0.8.0-alpha33",
                "v0.8.0-alpha34",
                "v0.8.0-alpha35",
                "v0.8.0-alpha36",
                "v0.8.0-alpha37",
                "v0.8.0-alpha38",
                "v0.8.0-alpha39",
                "v0.8.0-alpha4",
                "v0.8.0-alpha40",
                "v0.8.0-alpha41",
                "v0.8.0-alpha42",
                "v0.8.0-alpha43",
                "v0.8.0-alpha44",
                "v0.8.0-alpha45",
                "v0.8.0-alpha46",
                "v0.8.0-alpha47",
                "v0.8.0-alpha5",
                "v0.8.0-alpha6",
                "v0.8.0-alpha7",
                "v0.8.0-alpha8",
                "v0.8.0-alpha9",
                "v0.8.0-beta1"
            ],
            "matched_rules": [
                {
                    "id": "XREF_GH",
                    "message": "The commit and the advisory (including referenced pages) mention the same github issue: 234",
                    "relevance": 32
                },
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 1 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: mac",
                    "relevance": 8
                },
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 234",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3674815d1b0f7484454995e2737a352e0a6a93d8",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1522157178,
            "hunks": 3,
            "message": "verify the mac even if the padding is 1 byte long off-by-one error on mac checking, if the padding is of minimal length (a single 0x00 byte), the mac is not checked and thus the return value is never falsified this fixes the issue",
            "diff": [
                "diff --git a/tlslite/utils/constanttime.py b/tlslite/utils/constanttime.py",
                "index 60322c1..d4f5b1c 100644",
                "--- a/tlslite/utils/constanttime.py",
                "+++ b/tlslite/utils/constanttime.py",
                "@@ -172,3 +172,3 @@ def ct_check_cbc_mac_and_pad(data, mac, seqnumBytes, contentType, version):",
                "     # don't check past the array end (already checked to be >= zero)",
                "-    end_pos = data_len - 1 - mac.digest_size",
                "+    end_pos = data_len - mac.digest_size",
                "diff --git a/unit_tests/test_tlslite_utils_constanttime.py b/unit_tests/test_tlslite_utils_constanttime.py",
                "index 0edaf3f..0a6446d 100644",
                "--- a/unit_tests/test_tlslite_utils_constanttime.py",
                "+++ b/unit_tests/test_tlslite_utils_constanttime.py",
                "@@ -18,2 +18,3 @@ import hypothesis.strategies as st",
                " from tlslite.utils.compat import compatHMAC",
                "+from tlslite.utils.cryptomath import getRandomBytes",
                " from tlslite.recordlayer import RecordLayer",
                "@@ -268,2 +269,22 @@ class TestContanttimeCBCCheck(unittest.TestCase):",
                "+    @given(i=st.integers(1, 20))",
                "+    def test_with_invalid_random_hash(self, i):",
                "+        key = compatHMAC(getRandomBytes(20))",
                "+        seqnum_bytes = bytearray(16)",
                "+        content_type = 0x15",
                "+        version = (3, 3)",
                "+        application_data = getRandomBytes(63)",
                "+        mac = hashlib.sha1",
                "+",
                "+        data = self.data_prepare(application_data, seqnum_bytes, content_type,",
                "+                                 version, mac, key)",
                "+        data[-i] ^= 0xff",
                "+        padding = bytearray(b'\\x00')",
                "+        data += padding",
                "+",
                "+        h = hmac.new(key, digestmod=mac)",
                "+        h.block_size = mac().block_size",
                "+        self.assertFalse(ct_check_cbc_mac_and_pad(data, h, seqnum_bytes,",
                "+                                                  content_type, version))",
                "+",
                "     def test_with_invalid_pad(self):"
            ],
            "changed_files": [
                "tlslite/utils/constanttime.py",
                "unit_tests/test_tlslite_utils_constanttime.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e5e9145558f4c1a81071c61c947aa55a52542585"
                ]
            ],
            "tags": [
                "v0.8.0-alpha10",
                "v0.8.0-alpha11",
                "v0.8.0-alpha12",
                "v0.8.0-alpha13",
                "v0.8.0-alpha14",
                "v0.8.0-alpha15",
                "v0.8.0-alpha16",
                "v0.8.0-alpha17",
                "v0.8.0-alpha18",
                "v0.8.0-alpha19",
                "v0.8.0-alpha20",
                "v0.8.0-alpha21",
                "v0.8.0-alpha22",
                "v0.8.0-alpha23",
                "v0.8.0-alpha24",
                "v0.8.0-alpha25",
                "v0.8.0-alpha26",
                "v0.8.0-alpha27",
                "v0.8.0-alpha28",
                "v0.8.0-alpha29",
                "v0.8.0-alpha3",
                "v0.8.0-alpha30",
                "v0.8.0-alpha31",
                "v0.8.0-alpha32",
                "v0.8.0-alpha33",
                "v0.8.0-alpha34",
                "v0.8.0-alpha35",
                "v0.8.0-alpha36",
                "v0.8.0-alpha37",
                "v0.8.0-alpha38",
                "v0.8.0-alpha39",
                "v0.8.0-alpha4",
                "v0.8.0-alpha40",
                "v0.8.0-alpha41",
                "v0.8.0-alpha42",
                "v0.8.0-alpha43",
                "v0.8.0-alpha44",
                "v0.8.0-alpha45",
                "v0.8.0-alpha46",
                "v0.8.0-alpha47",
                "v0.8.0-alpha5",
                "v0.8.0-alpha6",
                "v0.8.0-alpha7",
                "v0.8.0-alpha8",
                "v0.8.0-alpha9",
                "v0.8.0-beta1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_IN_REFERENCE",
                    "message": "This commit is mentioned 6 times in the references.",
                    "relevance": 64
                },
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: mac",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: ct_check_cbc_mac_and_pad, data_len, mac, digest_size, end_pos",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_FILES",
                    "message": "The commit changes some relevant files: tlslite/utils/constanttime.py, unit_tests/test_tlslite_utils_constanttime.py",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: check, value",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: util",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2f24f4edf4645aa6ae597aa768fb9ba7da686a7f",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1521460733,
            "hunks": 4,
            "message": "version 0.7.3",
            "diff": [
                "diff --git a/docs/conf.py b/docs/conf.py",
                "index e40c044..80c3ec8 100644",
                "--- a/docs/conf.py",
                "+++ b/docs/conf.py",
                "@@ -63,3 +63,3 @@ version = u'0.7'",
                " # The full version, including alpha/beta/rc tags.",
                "-release = u'0.7.2'",
                "+release = u'0.7.3'",
                "diff --git a/setup.py b/setup.py",
                "index 2187f92..824680f 100755",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -13,3 +13,3 @@ with open(os.path.join(here, \"README\")) as f:",
                " setup(name=\"tlslite-ng\",",
                "-      version=\"0.7.2\",",
                "+      version=\"0.7.3\",",
                "       author=\"Hubert Kario\",",
                "diff --git a/tlslite/__init__.py b/tlslite/__init__.py",
                "index 5e77331..c1cce37 100644",
                "--- a/tlslite/__init__.py",
                "+++ b/tlslite/__init__.py",
                "@@ -23,3 +23,3 @@ Then use the L{tlslite.TLSConnection.TLSConnection} class with a socket.",
                "-@version: 0.7.2",
                "+@version: 0.7.3",
                " \"\"\"",
                "diff --git a/tlslite/api.py b/tlslite/api.py",
                "index 1677c59..1afff2f 100644",
                "--- a/tlslite/api.py",
                "+++ b/tlslite/api.py",
                "@@ -3,3 +3,3 @@",
                "-__version__ = \"0.7.2\"",
                "+__version__ = \"0.7.3\"",
                " from .constants import AlertLevel, AlertDescription, Fault"
            ],
            "changed_files": [
                "docs/conf.py",
                "setup.py",
                "tlslite/__init__.py",
                "tlslite/api.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.7.3",
                "v0.7.4",
                "v0.7.5",
                "v0.7.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: TLS",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: version",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "c9afee632145cfe19e3de32693cf093426699465",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1523273246,
            "hunks": 4,
            "message": "Tag the security release",
            "diff": [
                "diff --git a/docs/conf.py b/docs/conf.py",
                "index 80c3ec8..36d879d 100644",
                "--- a/docs/conf.py",
                "+++ b/docs/conf.py",
                "@@ -63,3 +63,3 @@ version = u'0.7'",
                " # The full version, including alpha/beta/rc tags.",
                "-release = u'0.7.3'",
                "+release = u'0.7.4'",
                "diff --git a/setup.py b/setup.py",
                "index 824680f..5b876b3 100755",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -13,3 +13,3 @@ with open(os.path.join(here, \"README\")) as f:",
                " setup(name=\"tlslite-ng\",",
                "-      version=\"0.7.3\",",
                "+      version=\"0.7.4\",",
                "       author=\"Hubert Kario\",",
                "diff --git a/tlslite/__init__.py b/tlslite/__init__.py",
                "index c1cce37..d1b9245 100644",
                "--- a/tlslite/__init__.py",
                "+++ b/tlslite/__init__.py",
                "@@ -23,3 +23,3 @@ Then use the L{tlslite.TLSConnection.TLSConnection} class with a socket.",
                "-@version: 0.7.3",
                "+@version: 0.7.4",
                " \"\"\"",
                "diff --git a/tlslite/api.py b/tlslite/api.py",
                "index 1afff2f..c70982d 100644",
                "--- a/tlslite/api.py",
                "+++ b/tlslite/api.py",
                "@@ -3,3 +3,3 @@",
                "-__version__ = \"0.7.3\"",
                "+__version__ = \"0.7.4\"",
                " from .constants import AlertLevel, AlertDescription, Fault"
            ],
            "changed_files": [
                "docs/conf.py",
                "setup.py",
                "tlslite/__init__.py",
                "tlslite/api.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.7.4",
                "v0.7.5",
                "v0.7.6"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: TLS",
                    "relevance": 8
                },
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: security",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "2e4193d441ee060a6ceaa13a78baed4137408758",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1521460485,
            "hunks": 1,
            "message": "fix M2Crypto 0.27.0 test compatibility the different behaviour was introduced in 0.28.0, not in 0.27.0, so the test needs to check against 0.28.0 also (0, 27, 0) > (0, 27) evaluates to True (this is where the original confuson came from)",
            "diff": [
                "diff --git a/unit_tests/test_tlslite_utils_keyfactory.py b/unit_tests/test_tlslite_utils_keyfactory.py",
                "index eb8eeb7..f5511e8 100644",
                "--- a/unit_tests/test_tlslite_utils_keyfactory.py",
                "+++ b/unit_tests/test_tlslite_utils_keyfactory.py",
                "@@ -175,3 +175,3 @@ class TestParsePEMKey(unittest.TestCase):",
                "         # old version of M2Crypto return a Null, in Python3 it raises exception",
                "-        if M2Crypto.version_info >= (0, 27, 0):",
                "+        if M2Crypto.version_info >= (0, 28, 0):",
                "             exp = M2Crypto.EVP.EVPError"
            ],
            "changed_files": [
                "unit_tests/test_tlslite_utils_keyfactory.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3e170b4e6b8c958e5accaaeb9ecc239bc4aabdfc"
                ]
            ],
            "tags": [
                "v0.8.0-alpha10",
                "v0.8.0-alpha11",
                "v0.8.0-alpha12",
                "v0.8.0-alpha13",
                "v0.8.0-alpha14",
                "v0.8.0-alpha15",
                "v0.8.0-alpha16",
                "v0.8.0-alpha17",
                "v0.8.0-alpha18",
                "v0.8.0-alpha19",
                "v0.8.0-alpha20",
                "v0.8.0-alpha21",
                "v0.8.0-alpha22",
                "v0.8.0-alpha23",
                "v0.8.0-alpha24",
                "v0.8.0-alpha25",
                "v0.8.0-alpha26",
                "v0.8.0-alpha27",
                "v0.8.0-alpha28",
                "v0.8.0-alpha29",
                "v0.8.0-alpha3",
                "v0.8.0-alpha30",
                "v0.8.0-alpha31",
                "v0.8.0-alpha32",
                "v0.8.0-alpha33",
                "v0.8.0-alpha34",
                "v0.8.0-alpha35",
                "v0.8.0-alpha36",
                "v0.8.0-alpha37",
                "v0.8.0-alpha38",
                "v0.8.0-alpha39",
                "v0.8.0-alpha4",
                "v0.8.0-alpha40",
                "v0.8.0-alpha41",
                "v0.8.0-alpha42",
                "v0.8.0-alpha43",
                "v0.8.0-alpha44",
                "v0.8.0-alpha45",
                "v0.8.0-alpha46",
                "v0.8.0-alpha47",
                "v0.8.0-alpha5",
                "v0.8.0-alpha6",
                "v0.8.0-alpha7",
                "v0.8.0-alpha8",
                "v0.8.0-alpha9",
                "v0.8.0-beta1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: check",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: util",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "63f9eb13dec772354e5c1f6cb86ea4a2c5ca3f44",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1521109059,
            "hunks": 7,
            "message": "Add primary OCSP response handling",
            "diff": [
                "diff --git a/tlslite/ocsp.py b/tlslite/ocsp.py",
                "new file mode 100644",
                "index 0000000..d0b2f2f",
                "--- /dev/null",
                "+++ b/tlslite/ocsp.py",
                "@@ -0,0 +1,123 @@",
                "+\"\"\"Class for handling primary OCSP responses\"\"\"",
                "+",
                "+from .utils.asn1parser import ASN1Parser",
                "+",
                "+",
                "+class OCSPRespStatus(object):",
                "+    \"\"\" OCSP response status codes (RFC 2560) \"\"\"",
                "+    successful = 0",
                "+    malformedRequest = 1",
                "+    internalError = 2",
                "+    tryLater = 3    # 4 is not used to match RFC2560 specification",
                "+    sigRequired = 5",
                "+    unauthorized = 6",
                "+",
                "+",
                "+class CertStatus(object):",
                "+    \"\"\" Certificate status in an OCSP response \"\"\"",
                "+    good, revoked, unknown = range(3)",
                "+",
                "+",
                "+class SingleResponse(object):",
                "+    \"\"\" This class represents SingleResponse ASN1 type (defined in RFC2560) \"\"\"",
                "+    def __init__(self, value):",
                "+        self.value = value",
                "+        self.cert_hash_alg = None",
                "+        self.cert_issuer_name_hash = None",
                "+        self.cert_issuer_key_hash = None",
                "+        self.cert_serial_num = None",
                "+        self.cert_status = None",
                "+        self.this_update = None",
                "+        self.next_update = None",
                "+        self.parse(value)",
                "+",
                "+    def parse(self, value):",
                "+        certID = value.getChild(0)",
                "+        self.cert_hash_alg = certID.getChild(0).value",
                "+        self.cert_issuer_name_hash = certID.getChild(1).value",
                "+        self.cert_issuer_key_hash = certID.getChild(2).value",
                "+        self.cert_serial_num = certID.getChild(3).value",
                "+        self.cert_status = value.getChild(1).value",
                "+        self.this_update = value.getChild(2).value",
                "+        # next_update is optional",
                "+        try:",
                "+            fld = value.getChild(3)",
                "+            if fld.type.tag_id == 0:",
                "+                self.next_update = fld.value",
                "+        except SyntaxError:",
                "+            self.next_update = None",
                "+",
                "+",
                "+class OCSPResponse(object):",
                "+    \"\"\" This class represents an OCSP response. \"\"\"",
                "+    def __init__(self, value):",
                "+        self.bytes = None",
                "+        self.resp_status = None",
                "+        self.resp_type = None",
                "+        self.version = None",
                "+        self.resp_ID = None",
                "+        self.produced_at = None",
                "+        self.responses = []",
                "+        self.signature_alg = None",
                "+        self.signature = None",
                "+        self.certs = []",
                "+        self.parse(value)",
                "+",
                "+    def parse(self, value):",
                "+        \"\"\"",
                "+        Parse a DER-encoded OCSP response.",
                "+",
                "+        :type value: stream of bytes",
                "+        :param value: An DER-encoded OCSP response",
                "+        \"\"\"",
                "+        self.bytes = bytearray(value)",
                "+        parser = ASN1Parser(self.bytes)",
                "+        resp_status = parser.getChild(0)",
                "+        self.resp_status = resp_status.value[0]",
                "+        # if the response status is not successsful, abort parsing other fields",
                "+        if self.resp_status != OCSPRespStatus.successful:",
                "+            return self",
                "+        resp_bytes = parser.getChild(1).getChild(0)",
                "+        self.resp_type = resp_bytes.getChild(0).value",
                "+        response = resp_bytes.getChild(1)",
                "+        # check if response is id-pkix-ocsp-basic",
                "+        if list(self.resp_type) != [43, 6, 1, 5, 5, 7, 48, 1, 1]:",
                "+            raise SyntaxError()",
                "+        basic_resp = response.getChild(0)",
                "+        # parsing tbsResponseData fields",
                "+        self.tbsDataParse(basic_resp.getChild(0))",
                "+        self.signature_alg = basic_resp.getChild(1).getChild(0).value",
                "+        self.signature = basic_resp.getChild(2).value",
                "+        # test if certs field is present",
                "+        if basic_resp.getChildCount() > 3:",
                "+            certs = basic_resp.getChild(3)",
                "+            cnt = certs.getChildCount()",
                "+            for i in range(cnt):",
                "+                certificate = certs.getChild(i).value",
                "+                self.certs.append(certificate)",
                "+        return self",
                "+",
                "+    def tbsDataParse(self, value):",
                "+        \"\"\"",
                "+        Parse to be signed data,",
                "+",
                "+        :type value: stream of bytes",
                "+        :param value: TBS data",
                "+        \"\"\"",
                "+        # test if version is ommited",
                "+        field = value.getChild(0)",
                "+        cnt = 0",
                "+        if field.type.tag_id == 0:",
                "+            # version is not omitted",
                "+            cnt += 1",
                "+            self.version = field.value",
                "+        else:",
                "+            self.version = 1",
                "+        self.resp_ID = value.getChild(cnt).value",
                "+        self.produced_at = value.getChild(cnt+1).value",
                "+        responses = value.getChild(cnt+2)",
                "+        resp_cnt = responses.getChildCount()",
                "+        for i in range(resp_cnt):",
                "+            resp = responses.getChild(i)",
                "+            parsed_resp = SingleResponse(resp)",
                "+            self.responses.append(parsed_resp)",
                "diff --git a/tlslite/utils/asn1parser.py b/tlslite/utils/asn1parser.py",
                "index c619a38..01738a3 100644",
                "--- a/tlslite/utils/asn1parser.py",
                "+++ b/tlslite/utils/asn1parser.py",
                "@@ -10,2 +10,28 @@ from .codec import Parser",
                "+class ASN1Type(object):",
                "+    \"\"\"",
                "+    Class that represents the ASN.1 type bit octet.",
                "+    Consists of a class (universal(0), application(1), context-specific(2)",
                "+    or private(3)), boolean value that indicates if a type is constructed or",
                "+    primitive and the ASN1 type itself.",
                "+",
                "+    :vartype bytes: bytearray",
                "+    :ivar field: bit octet",
                "+",
                "+    :vartype tagClass: int",
                "+    :ivar tagClass: type's class",
                "+",
                "+    :vartype isPrimitive: int",
                "+    :ivar isPrimitive: equals to 0 if the type is primitive, 1 if not",
                "+",
                "+    :vartype tagId: int",
                "+    :ivar tagId: ANS1 tag number",
                "+    \"\"\"",
                "+",
                "+    def __init__(self, tag_class, is_primitive, tag_id):",
                "+        self.tag_class = tag_class",
                "+        self.is_primitive = is_primitive",
                "+        self.tag_id = tag_id",
                "+",
                "+",
                " class ASN1Parser(object):",
                "@@ -24,6 +50,8 @@ class ASN1Parser(object):",
                "         :type bytes: bytearray",
                "-        :param bytes: DER encoded ANS.1 object",
                "+        :param bytes: DER encoded ASN.1 object",
                "         \"\"\"",
                "         p = Parser(bytes)",
                "-        p.get(1) #skip Type",
                "+",
                "+        #Get Type",
                "+        self.type = self._getASN1Type(p)",
                "@@ -92 +120,21 @@ class ASN1Parser(object):",
                "             return p.get(lengthLength)",
                "+",
                "+    @staticmethod",
                "+    def _getASN1Type(p):",
                "+        \"\"\"Decode the ASN.1 DER type field\"\"\"",
                "+        header = p.get(1)",
                "+        tag_class = (header & 0xc0) >> 6",
                "+        tag_is_primitive = (header & 0x20) >> 5",
                "+        tag_id = header & 0x1f",
                "+",
                "+        if tag_id == 0x1f:",
                "+            tag_id = 0",
                "+            while True:",
                "+                value = p.get(1)",
                "+                tag_id += value & 0x7f",
                "+                if not value & 0x80:",
                "+                    break",
                "+                tag_id <<= 7",
                "+",
                "+        asn1type = ASN1Type(tag_class, tag_is_primitive, tag_id)",
                "+        return asn1type",
                "diff --git a/unit_tests/test_tlslite_ocsp.py b/unit_tests/test_tlslite_ocsp.py",
                "new file mode 100644",
                "index 0000000..3c1d13c",
                "--- /dev/null",
                "+++ b/unit_tests/test_tlslite_ocsp.py",
                "@@ -0,0 +1,153 @@",
                "+# Author: Anna Khaitovich (c) 2017",
                "+# see LICENCE file for legal information regarding use of this file",
                "+",
                "+# compatibility with Python 2.6, for that we need unittest2 package,",
                "+# which is not available on 3.3 or 3.4",
                "+try:",
                "+    import unittest2 as unittest",
                "+except ImportError:",
                "+    import unittest",
                "+",
                "+from tlslite.utils.compat import a2b_base64, b2a_hex",
                "+from tlslite.utils.asn1parser import ASN1Parser",
                "+from tlslite.x509 import X509",
                "+from tlslite.ocsp import OCSPResponse, OCSPRespStatus, SingleResponse",
                "+",
                "+resp_OK = a2b_base64(str(",
                "+\"MIIGQwoBAKCCBjwwggY4BgkrBgEFBQcwAQEEggYpMIIGJTCBv6IWBBScTQCZAA6LsAGBdaG68NAl\"",
                "+\"16AcRxgPMjAxNzExMTMxMzUxMTJaMG8wbTBFMAkGBSsOAwIaBQAEFAyeTZw97e+E2JHpcsfPhAa8\"",
                "+\"GXsHBBSW3mHxvRwWKVMcwMx9O4MAQOYafAIMEOb8YrdBitUAXkW2gAAYDzIwMTcxMTEzMTM1MTEy\"",
                "+\"WqARGA8yMDE3MTExNzEzNTExMlqhIzAhMB8GCSsGAQUFBzABAgQSBBCaJ3RKL6xdUzjZb2szrKTz\"",
                "+\"MA0GCSqGSIb3DQEBCwUAA4IBAQCb9exoMqi0HgERpQz50GQF6uO2Cs7Jxeajd1XSefnY+lVWZubl\"",
                "+\"UrPQTdBo5P5VjLgF9rgYzI8es7zwFLhPdzLmos8Sp5OjDD0z5NDqoRqSGQxEK7OQ48Bx8EoPtVfP\"",
                "+\"B4wr8tHbJtowaLYM5Jt1Nfmys9at1H+uq+NcrNvs+4HQEMZHUMk88k8wH3cPfdQCYJVk3faRnQyE\"",
                "+\"kAARX1Ytq2LGEtoK94nJTlwz+khJDtiyvg7fclBbfuM7LIVdligPBF8384yy7W8tifRow/NuMDv4\"",
                "+\"BgDHIA6I5PPSM5CZjGm5ur6Kia/LKvu8abw/31h/ufZH3SNk5XRh7dDUfscM2cSnoIIESzCCBEcw\"",
                "+\"ggRDMIIDK6ADAgECAgwaYEAHumSvQwbKFvowDQYJKoZIhvcNAQELBQAwZjELMAkGA1UEBhMCQkUx\"",
                "+\"GTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExPDA6BgNVBAMTM0dsb2JhbFNpZ24gT3JnYW5pemF0\"",
                "+\"aW9uIFZhbGlkYXRpb24gQ0EgLSBTSEEyNTYgLSBHMjAeFw0xNzEwMDkwNzU1MDRaFw0xODAxMDkw\"",
                "+\"NzU1MDRaMIGOMQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU2lnbiBudi1zYTEVMBMGA1UE\"",
                "+\"BRMMMjAxNzEwMDkwMDAyMU0wSwYDVQQDE0RHbG9iYWxTaWduIE9yZ2FuaXphdGlvbiBWYWxpZGF0\"",
                "+\"aW9uIENBIC0gU0hBMjU2IC0gRzIgLSBPQ1NQIFJlc3BvbmRlcjCCASIwDQYJKoZIhvcNAQEBBQAD\"",
                "+\"ggEPADCCAQoCggEBANJDl88wauPZUs7bp+veBYvXMBMiyGWoJt42J4pklvr6X6kKBRf1OPCRqln1\"",
                "+\"zrfBL53Jen+jLWhpr2sY4Ln9mq7tRLcUuaXV/P+D7XUXBj5oG8G5/FQyLpJ+D/EqO7/Wn3YdXqIh\"",
                "+\"ZOyo6vcMyvo4g3DaZaaibWXVFZQ+rO5WluGlbBMHu1AZNoZWgcVH5dM7WJsHf9y5/gYxMlUWKUTR\"",
                "+\"RShsZFHqDYc2N80QQKqdHRz9x2zwlBlBnj5s6fO9vN30bQXUZTvYsZOAt272fpCQV2KBP6KLZ0XV\"",
                "+\"jLiQmLmzYeBLTflGzhOCfYFxbztT5QQcYC/WEnOSmOuWNhz3jaFH62ECAwEAAaOBxzCBxDAdBgNV\"",
                "+\"HQ4EFgQUnE0AmQAOi7ABgXWhuvDQJdegHEcwHwYDVR0jBBgwFoAUlt5h8b0cFilTHMDMfTuDAEDm\"",
                "+\"GnwwDwYJKwYBBQUHMAEFBAIFADBMBgNVHSAERTBDMEEGCSsGAQQBoDIBXzA0MDIGCCsGAQUFBwIB\"",
                "+\"FiZodHRwczovL3d3dy5nbG9iYWxzaWduLmNvbS9yZXBvc2l0b3J5LzAOBgNVHQ8BAf8EBAMCB4Aw\"",
                "+\"EwYDVR0lBAwwCgYIKwYBBQUHAwkwDQYJKoZIhvcNAQELBQADggEBADOlR5gacWfQOaRVrOaRAfEA\"",
                "+\"SZdVfyAXjubDTl4Z0/jXQCIhM7EJaCLpEKKDVkSb2TZZVNqYsegHs1kRVo9U6chXSRtG4JKKPCAy\"",
                "+\"kGw8MYyX5Eewu1JpKy/RqkbBBUDJS6pSj1LYwQxTb0JrfQbEddRBIexRYEZ+JXtqdOqpsV1R/4E/\"",
                "+\"k82y7fOo9N96hDrWZLF7h+p2Bg8og+eUD9kNNGPx2/iLfNYYUDynU4Ay3wOxRzb8MHTw7OpevlEN\"",
                "+\"GNUvcGYyOSWwMQHk8P0BCJZA8RpXuEkW/ep0ZSnNVMpbjtSpSE1i0OxMdKbfJTzm+l87FMXz/8oX\"",
                "+\"p+YNJ+UJfB6ALag=\"))",
                "+resp_malformed = a2b_base64(\"MAMKAQE=\")",
                "+resp_internal = a2b_base64(\"MAMKAQI=\")",
                "+resp_trylater = a2b_base64(\"MAMKAQM=\")",
                "+resp_sigreq = a2b_base64(\"MAMKAQU=\")",
                "+resp_unauthorized = a2b_base64(\"MAMKAQY=\")",
                "+resp_nonext = a2b_base64(str(",
                "+\"MIIBsAoBAKCCAakwggGlBgkrBgEFBQcwAQEEggGWMIIBkjB8ohYEFPW6BZQHpc7jISl5Z3Tq3X0p\"",
                "+\"dI9AGA8yMDE4MDExNzEzMzgyOVowUTBPMDowCQYFKw4DAhoFAAQUkBUkEUsQTCuZ8rp/mrdlULbf\"",
                "+\"yK4EFPW6BZQHpc7jISl5Z3Tq3X0pdI9AAgEBgAAYDzIwMTgwMTE3MTMzODI5WjANBgkqhkiG9w0B\"",
                "+\"AQUFAAOCAQEAgX46PdN6W6gLbOuWNwTHAwJ79agqjADHLtvYyISVCenKmaCMrhoe6jcutw1A4wz4\"",
                "+\"9BKfYqnO9AL1LYHOJ6ZPlzJx/nEiFue8HXb+ChiwG+nEhXprug+wP/APuKSOaKH2kcQf4Jtuv9cz\"",
                "+\"n/2PCaVmC+ErEThuGTZouT4eEIFMUGGDH+nZFHbl+DNm6R3+D7atOE1gDBO2LDJqIoZvaZTSpY+4\"",
                "+\"djZaiTdWAdOcUnnBhlhBvjg8nv6zxJ9ERBqm5P9cffnYVAJeGqylq/WFT/Ni6MprXgYoZq9bc7tk\"",
                "+\"PGGh5CnrOhcIQCUIX+ceM6ruxdraiPJALpY1gZz7SY53GQsXfg==\"))",
                "+",
                "+class TestOCSP(unittest.TestCase):",
                "+    def test___init__(self):",
                "+        resp = OCSPResponse(resp_OK)",
                "+        self.assertEqual(OCSPRespStatus.successful, resp.resp_status)",
                "+    ",
                "+    def test_malformedrequest(self):",
                "+        resp = OCSPResponse(resp_malformed)",
                "+        self.assertEqual(OCSPRespStatus.malformedRequest, resp.resp_status)",
                "+    ",
                "+    def test_internalerror(self):",
                "+        resp = OCSPResponse(resp_internal)",
                "+        self.assertEqual(OCSPRespStatus.internalError, resp.resp_status)",
                "+",
                "+    def test_trylater(self):",
                "+        resp = OCSPResponse(resp_trylater)",
                "+        self.assertEqual(OCSPRespStatus.tryLater, resp.resp_status)",
                "+",
                "+    def test_sigrequired(self):",
                "+        resp = OCSPResponse(resp_sigreq)",
                "+        self.assertEqual(OCSPRespStatus.sigRequired, resp.resp_status)",
                "+",
                "+    def test_unauthorized(self):",
                "+        resp = OCSPResponse(resp_unauthorized)",
                "+        self.assertEqual(OCSPRespStatus.unauthorized, resp.resp_status)",
                "+",
                "+    def test_type_id_pkix_ocsp_basic(self):",
                "+        resp = OCSPResponse(resp_OK)",
                "+        self.assertEqual(bytearray([43, 6, 1, 5, 5, 7, 48, 1, 1]), resp.resp_type)",
                "+",
                "+    def test_resp_ID(self):",
                "+        resp = OCSPResponse(resp_OK)",
                "+        self.assertEqual(bytearray([4, 20, 156, 77, 0, 153, 0, 14, 139, 176, 1, 129, ",
                "+                                    117, 161, 186, 240, 208, 37, 215, 160, 28, 71]), ",
                "+                        resp.resp_ID)",
                "+    ",
                "+    def test_produced_at(self):",
                "+        resp = OCSPResponse(resp_OK)",
                "+        self.assertEqual(bytearray(b\"20171113135112Z\"), resp.produced_at)",
                "+",
                "+    def test_signature_alg(self):",
                "+        resp = OCSPResponse(resp_OK)",
                "+        self.assertEqual(bytearray([42, 134, 72, 134, 247, 13, 1, 1, 11]), resp.signature_alg)",
                "+",
                "+    def test_signature(self):",
                "+        resp = OCSPResponse(resp_OK)",
                "+        self.assertEqual(",
                "+            bytearray([0, 155, 245, 236, 104, 50, 168, 180, 30, 1, 17, 165, 12, 249, 208,",
                "+            100, 5, 234, 227, 182, 10, 206, 201, 197, 230, 163, 119, 85, 210, 121, 249,",
                "+            216, 250, 85, 86, 102, 230, 229, 82, 179, 208, 77, 208, 104, 228, 254, 85,",
                "+            140, 184, 5, 246, 184, 24, 204, 143, 30, 179, 188, 240, 20, 184, 79, 119, 50,",
                "+            230, 162, 207, 18, 167, 147, 163, 12, 61, 51, 228, 208, 234, 161, 26, 146, 25,",
                "+            12, 68, 43, 179, 144, 227, 192, 113, 240, 74, 15, 181, 87, 207, 7, 140, 43,",
                "+            242, 209, 219, 38, 218, 48, 104, 182, 12, 228, 155, 117, 53, 249, 178, 179,",
                "+            214, 173, 212, 127, 174, 171, 227, 92, 172, 219, 236, 251, 129, 208, 16, 198,",
                "+            71, 80, 201, 60, 242, 79, 48, 31, 119, 15, 125, 212, 2, 96, 149, 100, 221,",
                "+            246, 145, 157, 12, 132, 144, 0, 17, 95, 86, 45, 171, 98, 198, 18, 218, 10,",
                "+            247, 137, 201, 78, 92, 51, 250, 72, 73, 14, 216, 178, 190, 14, 223, 114, 80,",
                "+            91, 126, 227, 59, 44, 133, 93, 150, 40, 15, 4, 95, 55, 243, 140, 178, 237,",
                "+            111, 45, 137, 244, 104, 195, 243, 110, 48, 59, 248, 6, 0, 199, 32, 14, 136,",
                "+            228, 243, 210, 51, 144, 153, 140, 105, 185, 186, 190, 138, 137, 175, 203, 42,",
                "+            251, 188, 105, 188, 63, 223, 88, 127, 185, 246, 71, 221, 35, 100, 229, 116,",
                "+            97, 237, 208, 212, 126, 199, 12, 217, 196, 167]), ",
                "+            resp.signature)",
                "+",
                "+    def test_certs(self):",
                "+        resp = OCSPResponse(resp_OK)",
                "+        self.assertGreater(len(resp.certs), 0)",
                "+        cert = resp.certs[0]  # checking only first certificate",
                "+        self.assertIsInstance(cert, bytearray)",
                "+        x509 = X509()",
                "+        x509.parseBinary(cert)",
                "+        self.assertIsInstance(x509, X509)",
                "+",
                "+class TestSingleResponse(unittest.TestCase):",
                "+    def test___init__(self):",
                "+        resp = OCSPResponse(resp_OK)",
                "+        singleRespList = resp.responses",
                "+        singleRespCnt = len(singleRespList)",
                "+        for i in range(singleRespCnt):",
                "+            singleResp = resp.responses[i]",
                "+            self.assertEqual(bytearray(), singleResp.cert_status)",
                "+",
                "+    def test_nonextupdate(self):",
                "+        resp = OCSPResponse(resp_nonext)",
                "+        singleRespList = resp.responses",
                "+        singleRespCnt = len(singleRespList)",
                "+        for i in range(singleRespCnt):",
                "+            singleResp = resp.responses[i]",
                "+            self.assertEqual(bytearray(), singleResp.cert_status)",
                "+            self.assertEqual(None, singleResp.next_update)",
                "+",
                "+if __name__ == '__main__':",
                "+    unittest.main()",
                "diff --git a/unit_tests/test_tlslite_utils_asn1.py b/unit_tests/test_tlslite_utils_asn1.py",
                "new file mode 100644",
                "index 0000000..662c917",
                "--- /dev/null",
                "+++ b/unit_tests/test_tlslite_utils_asn1.py",
                "@@ -0,0 +1,56 @@",
                "+# Author: Anna Khaitovich (c) 2017",
                "+# see LICENCE file for legal information regarding use of this file",
                "+",
                "+# compatibility with Python 2.6, for that we need unittest2 package,",
                "+# which is not available on 3.3 or 3.4",
                "+try:",
                "+    import unittest2 as unittest",
                "+except ImportError:",
                "+    import unittest",
                "+",
                "+from tlslite.utils.compat import a2b_base64",
                "+from tlslite.utils.asn1parser import ASN1Type, ASN1Parser",
                "+",
                "+class TestASN1Parser(unittest.TestCase):",
                "+    def test_integer(self):",
                "+        # universal, primitive, integer",
                "+        p = ASN1Parser(a2b_base64('AgEB'))",
                "+        self.assertEqual(0, p.type.tag_class)",
                "+        self.assertEqual(0, p.type.is_primitive)",
                "+        self.assertEqual(2, p.type.tag_id)",
                "+        self.assertEqual(bytearray(b'\\x01'), p.value)",
                "+",
                "+    def test_bitstring(self):",
                "+        # universal, primitive, bit string",
                "+        p = ASN1Parser(a2b_base64('AwUAQUJDRA=='))",
                "+        self.assertEqual(0, p.type.tag_class)",
                "+        self.assertEqual(0, p.type.is_primitive)",
                "+        self.assertEqual(3, p.type.tag_id)",
                "+        self.assertEqual(bytearray(b'\\x00ABCD'), p.value)",
                "+",
                "+    def test_utctime(self):",
                "+        # universal, primitive, utc time",
                "+        p = ASN1Parser(a2b_base64('FwsxODEyMzEyMzU5Wg=='))",
                "+        self.assertEqual(0, p.type.tag_class)",
                "+        self.assertEqual(0, p.type.is_primitive)",
                "+        self.assertEqual(23, p.type.tag_id)",
                "+        self.assertEqual(bytearray(b'1812312359Z'), p.value)",
                "+",
                "+    def test_sequence(self):",
                "+        # universal, non-primitive, sequence",
                "+        p = ASN1Parser(a2b_base64('MAMBAf8='))",
                "+        self.assertEqual(0, p.type.tag_class)",
                "+        self.assertEqual(1, p.type.is_primitive)",
                "+        self.assertEqual(16, p.type.tag_id)",
                "+        self.assertEqual(bytearray(b'\\x01\\x01\\xff'), p.value)",
                "+",
                "+    def test_explicit_string(self):",
                "+        # context-specific, non-primitive, explicit string",
                "+        p = ASN1Parser(a2b_base64('v5oFFAwSc29tZSByYW5kb20gc3RyaW5n'))",
                "+        self.assertEqual(2, p.type.tag_class)",
                "+        self.assertEqual(1, p.type.is_primitive)",
                "+        self.assertEqual(3333, p.type.tag_id)",
                "+        self.assertEqual(bytearray(b'\\x0c\\x12some random string'), p.value)",
                "+",
                "+if __name__ == '__main__':",
                "+    unittest.main()"
            ],
            "changed_files": [
                "tlslite/ocsp.py",
                "tlslite/utils/asn1parser.py",
                "unit_tests/test_tlslite_ocsp.py",
                "unit_tests/test_tlslite_utils_asn1.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.8.0-alpha10",
                "v0.8.0-alpha11",
                "v0.8.0-alpha12",
                "v0.8.0-alpha13",
                "v0.8.0-alpha14",
                "v0.8.0-alpha15",
                "v0.8.0-alpha16",
                "v0.8.0-alpha17",
                "v0.8.0-alpha18",
                "v0.8.0-alpha19",
                "v0.8.0-alpha20",
                "v0.8.0-alpha21",
                "v0.8.0-alpha22",
                "v0.8.0-alpha23",
                "v0.8.0-alpha24",
                "v0.8.0-alpha25",
                "v0.8.0-alpha26",
                "v0.8.0-alpha27",
                "v0.8.0-alpha28",
                "v0.8.0-alpha29",
                "v0.8.0-alpha3",
                "v0.8.0-alpha30",
                "v0.8.0-alpha31",
                "v0.8.0-alpha32",
                "v0.8.0-alpha33",
                "v0.8.0-alpha34",
                "v0.8.0-alpha35",
                "v0.8.0-alpha36",
                "v0.8.0-alpha37",
                "v0.8.0-alpha38",
                "v0.8.0-alpha39",
                "v0.8.0-alpha4",
                "v0.8.0-alpha40",
                "v0.8.0-alpha41",
                "v0.8.0-alpha42",
                "v0.8.0-alpha43",
                "v0.8.0-alpha44",
                "v0.8.0-alpha45",
                "v0.8.0-alpha46",
                "v0.8.0-alpha47",
                "v0.8.0-alpha5",
                "v0.8.0-alpha6",
                "v0.8.0-alpha7",
                "v0.8.0-alpha8",
                "v0.8.0-alpha9",
                "v0.8.0-beta1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: util",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "fc36e010a71db8057881c4b169245d81a577c1f1",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1522312501,
            "hunks": 11,
            "message": "Minor code tweaks",
            "diff": [
                "diff --git a/tlslite/ocsp.py b/tlslite/ocsp.py",
                "index d0b2f2f..5ca1d77 100644",
                "--- a/tlslite/ocsp.py",
                "+++ b/tlslite/ocsp.py",
                "@@ -34,7 +34,7 @@ class SingleResponse(object):",
                "     def parse(self, value):",
                "-        certID = value.getChild(0)",
                "-        self.cert_hash_alg = certID.getChild(0).value",
                "-        self.cert_issuer_name_hash = certID.getChild(1).value",
                "-        self.cert_issuer_key_hash = certID.getChild(2).value",
                "-        self.cert_serial_num = certID.getChild(3).value",
                "+        cert_id = value.getChild(0)",
                "+        self.cert_hash_alg = cert_id.getChild(0).value",
                "+        self.cert_issuer_name_hash = cert_id.getChild(1).value",
                "+        self.cert_issuer_key_hash = cert_id.getChild(2).value",
                "+        self.cert_serial_num = cert_id.getChild(3).value",
                "         self.cert_status = value.getChild(1).value",
                "@@ -57,3 +57,3 @@ class OCSPResponse(object):",
                "         self.version = None",
                "-        self.resp_ID = None",
                "+        self.resp_id = None",
                "         self.produced_at = None",
                "@@ -87,3 +87,3 @@ class OCSPResponse(object):",
                "         # parsing tbsResponseData fields",
                "-        self.tbsDataParse(basic_resp.getChild(0))",
                "+        self._tbsdataparse(basic_resp.getChild(0))",
                "         self.signature_alg = basic_resp.getChild(1).getChild(0).value",
                "@@ -99,3 +99,3 @@ class OCSPResponse(object):",
                "-    def tbsDataParse(self, value):",
                "+    def _tbsdataparse(self, value):",
                "         \"\"\"",
                "@@ -115,3 +115,3 @@ class OCSPResponse(object):",
                "             self.version = 1",
                "-        self.resp_ID = value.getChild(cnt).value",
                "+        self.resp_id = value.getChild(cnt).value",
                "         self.produced_at = value.getChild(cnt+1).value",
                "diff --git a/tlslite/utils/asn1parser.py b/tlslite/utils/asn1parser.py",
                "index 01738a3..0e0416a 100644",
                "--- a/tlslite/utils/asn1parser.py",
                "+++ b/tlslite/utils/asn1parser.py",
                "@@ -54,4 +54,4 @@ class ASN1Parser(object):",
                "-        #Get Type",
                "-        self.type = self._getASN1Type(p)",
                "+        # Get Type",
                "+        self.type = self._parse_type(p)",
                "@@ -122,5 +122,5 @@ class ASN1Parser(object):",
                "     @staticmethod",
                "-    def _getASN1Type(p):",
                "+    def _parse_type(parser):",
                "         \"\"\"Decode the ASN.1 DER type field\"\"\"",
                "-        header = p.get(1)",
                "+        header = parser.get(1)",
                "         tag_class = (header & 0xc0) >> 6",
                "@@ -132,3 +132,3 @@ class ASN1Parser(object):",
                "             while True:",
                "-                value = p.get(1)",
                "+                value = parser.get(1)",
                "                 tag_id += value & 0x7f",
                "diff --git a/unit_tests/test_tlslite_ocsp.py b/unit_tests/test_tlslite_ocsp.py",
                "index 3c1d13c..d55391e 100644",
                "--- a/unit_tests/test_tlslite_ocsp.py",
                "+++ b/unit_tests/test_tlslite_ocsp.py",
                "@@ -89,3 +89,3 @@ class TestOCSP(unittest.TestCase):",
                "-    def test_resp_ID(self):",
                "+    def test_resp_id(self):",
                "         resp = OCSPResponse(resp_OK)",
                "@@ -93,3 +93,3 @@ class TestOCSP(unittest.TestCase):",
                "                                     117, 161, 186, 240, 208, 37, 215, 160, 28, 71]), ",
                "-                        resp.resp_ID)",
                "+                        resp.resp_id)"
            ],
            "changed_files": [
                "tlslite/ocsp.py",
                "tlslite/utils/asn1parser.py",
                "unit_tests/test_tlslite_ocsp.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.8.0-alpha10",
                "v0.8.0-alpha11",
                "v0.8.0-alpha12",
                "v0.8.0-alpha13",
                "v0.8.0-alpha14",
                "v0.8.0-alpha15",
                "v0.8.0-alpha16",
                "v0.8.0-alpha17",
                "v0.8.0-alpha18",
                "v0.8.0-alpha19",
                "v0.8.0-alpha20",
                "v0.8.0-alpha21",
                "v0.8.0-alpha22",
                "v0.8.0-alpha23",
                "v0.8.0-alpha24",
                "v0.8.0-alpha25",
                "v0.8.0-alpha26",
                "v0.8.0-alpha27",
                "v0.8.0-alpha28",
                "v0.8.0-alpha29",
                "v0.8.0-alpha3",
                "v0.8.0-alpha30",
                "v0.8.0-alpha31",
                "v0.8.0-alpha32",
                "v0.8.0-alpha33",
                "v0.8.0-alpha34",
                "v0.8.0-alpha35",
                "v0.8.0-alpha36",
                "v0.8.0-alpha37",
                "v0.8.0-alpha38",
                "v0.8.0-alpha39",
                "v0.8.0-alpha4",
                "v0.8.0-alpha40",
                "v0.8.0-alpha41",
                "v0.8.0-alpha42",
                "v0.8.0-alpha43",
                "v0.8.0-alpha44",
                "v0.8.0-alpha45",
                "v0.8.0-alpha46",
                "v0.8.0-alpha47",
                "v0.8.0-alpha5",
                "v0.8.0-alpha6",
                "v0.8.0-alpha7",
                "v0.8.0-alpha8",
                "v0.8.0-alpha9",
                "v0.8.0-beta1"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: util",
                    "relevance": 4
                }
            ]
        },
        {
            "commit_id": "a68d2fba349dcda1c081f1751ca57a298eb81a86",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1522776023,
            "hunks": 0,
            "message": "Merge pull request #195 from akhait/ocsp Add primary OCSP response handling",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "195": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.8.0-alpha10",
                "v0.8.0-alpha11",
                "v0.8.0-alpha12",
                "v0.8.0-alpha13",
                "v0.8.0-alpha14",
                "v0.8.0-alpha15",
                "v0.8.0-alpha16",
                "v0.8.0-alpha17",
                "v0.8.0-alpha18",
                "v0.8.0-alpha19",
                "v0.8.0-alpha20",
                "v0.8.0-alpha21",
                "v0.8.0-alpha22",
                "v0.8.0-alpha23",
                "v0.8.0-alpha24",
                "v0.8.0-alpha25",
                "v0.8.0-alpha26",
                "v0.8.0-alpha27",
                "v0.8.0-alpha28",
                "v0.8.0-alpha29",
                "v0.8.0-alpha3",
                "v0.8.0-alpha30",
                "v0.8.0-alpha31",
                "v0.8.0-alpha32",
                "v0.8.0-alpha33",
                "v0.8.0-alpha34",
                "v0.8.0-alpha35",
                "v0.8.0-alpha36",
                "v0.8.0-alpha37",
                "v0.8.0-alpha38",
                "v0.8.0-alpha39",
                "v0.8.0-alpha4",
                "v0.8.0-alpha40",
                "v0.8.0-alpha41",
                "v0.8.0-alpha42",
                "v0.8.0-alpha43",
                "v0.8.0-alpha44",
                "v0.8.0-alpha45",
                "v0.8.0-alpha46",
                "v0.8.0-alpha47",
                "v0.8.0-alpha5",
                "v0.8.0-alpha6",
                "v0.8.0-alpha7",
                "v0.8.0-alpha8",
                "v0.8.0-alpha9",
                "v0.8.0-beta1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 195",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "22a93f61c00716842cced84a8d2b224dc25322f7",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1522839467,
            "hunks": 2,
            "message": "increase timeout for SRP (db) case because of issues like the ones in #219 the test runs sometimes fail (with logging indicating very slow disk access on slow machine), try increasing the timeout to combat this also add logging to show how long the client really waited before aborting",
            "diff": [
                "diff --git a/tests/tlstest.py b/tests/tlstest.py",
                "index a0b9ede..a8d6010 100755",
                "--- a/tests/tlstest.py",
                "+++ b/tests/tlstest.py",
                "@@ -94,3 +94,3 @@ def clientTestCmd(argv):",
                "     synchro = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
                "-    synchro.settimeout(15)",
                "+    synchro.settimeout(60)",
                "     synchro.connect((address[0], address[1]-1))",
                "@@ -255,3 +255,7 @@ def clientTestCmd(argv):",
                "     print(\"client {0} - waiting for synchro\".format(time.time()))",
                "-    synchro.recv(1)",
                "+    try:",
                "+        synchro.recv(1)",
                "+    except Exception:",
                "+        print(\"client {0} - wait abort\".format(time.time()))",
                "+        raise",
                "     print(\"client {0} - synchro received\".format(time.time()))"
            ],
            "changed_files": [
                "tests/tlstest.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "219": "Fix python2 compatibility issue with X509 DER parsing #223 increase timeout for SRP (db) case #238"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.8.0-alpha10",
                "v0.8.0-alpha11",
                "v0.8.0-alpha12",
                "v0.8.0-alpha13",
                "v0.8.0-alpha14",
                "v0.8.0-alpha15",
                "v0.8.0-alpha16",
                "v0.8.0-alpha17",
                "v0.8.0-alpha18",
                "v0.8.0-alpha19",
                "v0.8.0-alpha20",
                "v0.8.0-alpha21",
                "v0.8.0-alpha22",
                "v0.8.0-alpha23",
                "v0.8.0-alpha24",
                "v0.8.0-alpha25",
                "v0.8.0-alpha26",
                "v0.8.0-alpha27",
                "v0.8.0-alpha28",
                "v0.8.0-alpha29",
                "v0.8.0-alpha3",
                "v0.8.0-alpha30",
                "v0.8.0-alpha31",
                "v0.8.0-alpha32",
                "v0.8.0-alpha33",
                "v0.8.0-alpha34",
                "v0.8.0-alpha35",
                "v0.8.0-alpha36",
                "v0.8.0-alpha37",
                "v0.8.0-alpha38",
                "v0.8.0-alpha39",
                "v0.8.0-alpha4",
                "v0.8.0-alpha40",
                "v0.8.0-alpha41",
                "v0.8.0-alpha42",
                "v0.8.0-alpha43",
                "v0.8.0-alpha44",
                "v0.8.0-alpha45",
                "v0.8.0-alpha46",
                "v0.8.0-alpha47",
                "v0.8.0-alpha5",
                "v0.8.0-alpha6",
                "v0.8.0-alpha7",
                "v0.8.0-alpha8",
                "v0.8.0-alpha9",
                "v0.8.0-beta1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 219",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a453bc7ca090ba1e0a4e344fb7d87dc18fa27bcb",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1523277431,
            "hunks": 0,
            "message": "Merge pull request #239 from tomato42/certChain-property fix API break in certChain property",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "239": "AttributeError: can't set attribute mozilla/cipherscan#145"
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.8.0-alpha10",
                "v0.8.0-alpha11",
                "v0.8.0-alpha12",
                "v0.8.0-alpha13",
                "v0.8.0-alpha14",
                "v0.8.0-alpha15",
                "v0.8.0-alpha16",
                "v0.8.0-alpha17",
                "v0.8.0-alpha18",
                "v0.8.0-alpha19",
                "v0.8.0-alpha20",
                "v0.8.0-alpha21",
                "v0.8.0-alpha22",
                "v0.8.0-alpha23",
                "v0.8.0-alpha24",
                "v0.8.0-alpha25",
                "v0.8.0-alpha26",
                "v0.8.0-alpha27",
                "v0.8.0-alpha28",
                "v0.8.0-alpha29",
                "v0.8.0-alpha3",
                "v0.8.0-alpha30",
                "v0.8.0-alpha31",
                "v0.8.0-alpha32",
                "v0.8.0-alpha33",
                "v0.8.0-alpha34",
                "v0.8.0-alpha35",
                "v0.8.0-alpha36",
                "v0.8.0-alpha37",
                "v0.8.0-alpha38",
                "v0.8.0-alpha39",
                "v0.8.0-alpha4",
                "v0.8.0-alpha40",
                "v0.8.0-alpha41",
                "v0.8.0-alpha42",
                "v0.8.0-alpha43",
                "v0.8.0-alpha44",
                "v0.8.0-alpha45",
                "v0.8.0-alpha46",
                "v0.8.0-alpha47",
                "v0.8.0-alpha5",
                "v0.8.0-alpha6",
                "v0.8.0-alpha7",
                "v0.8.0-alpha8",
                "v0.8.0-alpha9",
                "v0.8.0-beta1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 239",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "67096fdf207c490024a861f61bab042331e1290c",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1522856079,
            "hunks": 0,
            "message": "Merge pull request #238 from tomato42/higher-timeout increase timeout for SRP (db) case",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {
                "238": ""
            },
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.8.0-alpha10",
                "v0.8.0-alpha11",
                "v0.8.0-alpha12",
                "v0.8.0-alpha13",
                "v0.8.0-alpha14",
                "v0.8.0-alpha15",
                "v0.8.0-alpha16",
                "v0.8.0-alpha17",
                "v0.8.0-alpha18",
                "v0.8.0-alpha19",
                "v0.8.0-alpha20",
                "v0.8.0-alpha21",
                "v0.8.0-alpha22",
                "v0.8.0-alpha23",
                "v0.8.0-alpha24",
                "v0.8.0-alpha25",
                "v0.8.0-alpha26",
                "v0.8.0-alpha27",
                "v0.8.0-alpha28",
                "v0.8.0-alpha29",
                "v0.8.0-alpha3",
                "v0.8.0-alpha30",
                "v0.8.0-alpha31",
                "v0.8.0-alpha32",
                "v0.8.0-alpha33",
                "v0.8.0-alpha34",
                "v0.8.0-alpha35",
                "v0.8.0-alpha36",
                "v0.8.0-alpha37",
                "v0.8.0-alpha38",
                "v0.8.0-alpha39",
                "v0.8.0-alpha4",
                "v0.8.0-alpha40",
                "v0.8.0-alpha41",
                "v0.8.0-alpha42",
                "v0.8.0-alpha43",
                "v0.8.0-alpha44",
                "v0.8.0-alpha45",
                "v0.8.0-alpha46",
                "v0.8.0-alpha47",
                "v0.8.0-alpha5",
                "v0.8.0-alpha6",
                "v0.8.0-alpha7",
                "v0.8.0-alpha8",
                "v0.8.0-alpha9",
                "v0.8.0-beta1"
            ],
            "matched_rules": [
                {
                    "id": "GITHUB_ISSUE_IN_MESSAGE",
                    "message": "The commit message references some github issue: 238",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b99e9bff327dde7d175207797a6521025846ea07",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1522857011,
            "hunks": 2,
            "message": "restore setter for cert_chain (certChain) as the certChain previously was public, to retain API we need to add setter for it",
            "diff": [
                "diff --git a/tlslite/messages.py b/tlslite/messages.py",
                "index 98619f6..2a82ef9 100644",
                "--- a/tlslite/messages.py",
                "+++ b/tlslite/messages.py",
                "@@ -1114,4 +1114,4 @@ class Certificate(HandshakeMsg):",
                "-    @deprecated_params({\"cert_chain\": \"certChain\"})",
                "-    def create(self, cert_chain, context=None):",
                "+    @cert_chain.setter",
                "+    def cert_chain(self, cert_chain):",
                "         if isinstance(cert_chain, X509CertChain):",
                "@@ -1123,2 +1123,6 @@ class Certificate(HandshakeMsg):",
                "             self.certificate_list = cert_chain",
                "+",
                "+    @deprecated_params({\"cert_chain\": \"certChain\"})",
                "+    def create(self, cert_chain, context=None):",
                "+        self.cert_chain = cert_chain",
                "         self.certificate_request_context = context"
            ],
            "changed_files": [
                "tlslite/messages.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.8.0-alpha10",
                "v0.8.0-alpha11",
                "v0.8.0-alpha12",
                "v0.8.0-alpha13",
                "v0.8.0-alpha14",
                "v0.8.0-alpha15",
                "v0.8.0-alpha16",
                "v0.8.0-alpha17",
                "v0.8.0-alpha18",
                "v0.8.0-alpha19",
                "v0.8.0-alpha20",
                "v0.8.0-alpha21",
                "v0.8.0-alpha22",
                "v0.8.0-alpha23",
                "v0.8.0-alpha24",
                "v0.8.0-alpha25",
                "v0.8.0-alpha26",
                "v0.8.0-alpha27",
                "v0.8.0-alpha28",
                "v0.8.0-alpha29",
                "v0.8.0-alpha3",
                "v0.8.0-alpha30",
                "v0.8.0-alpha31",
                "v0.8.0-alpha32",
                "v0.8.0-alpha33",
                "v0.8.0-alpha34",
                "v0.8.0-alpha35",
                "v0.8.0-alpha36",
                "v0.8.0-alpha37",
                "v0.8.0-alpha38",
                "v0.8.0-alpha39",
                "v0.8.0-alpha4",
                "v0.8.0-alpha40",
                "v0.8.0-alpha41",
                "v0.8.0-alpha42",
                "v0.8.0-alpha43",
                "v0.8.0-alpha44",
                "v0.8.0-alpha45",
                "v0.8.0-alpha46",
                "v0.8.0-alpha47",
                "v0.8.0-alpha5",
                "v0.8.0-alpha6",
                "v0.8.0-alpha7",
                "v0.8.0-alpha8",
                "v0.8.0-alpha9",
                "v0.8.0-beta1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "4c6dcdfccb1778c68ba7d3003931cfa7ff50df76",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1521661156,
            "hunks": 2,
            "message": "be explicit in py2 and py3 support",
            "diff": [
                "diff --git a/setup.py b/setup.py",
                "index 88a401a..20d0816 100755",
                "--- a/setup.py",
                "+++ b/setup.py",
                "@@ -32,4 +32,6 @@ setup(name=\"tlslite-ng\",",
                "             'Programming Language :: Python',",
                "+            'Programming Language :: Python :: 2',",
                "             'Programming Language :: Python :: 2.6',",
                "             'Programming Language :: Python :: 2.7',",
                "+            'Programming Language :: Python :: 3',",
                "             'Programming Language :: Python :: 3.2',"
            ],
            "changed_files": [
                "setup.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.8.0-alpha10",
                "v0.8.0-alpha11",
                "v0.8.0-alpha12",
                "v0.8.0-alpha13",
                "v0.8.0-alpha14",
                "v0.8.0-alpha15",
                "v0.8.0-alpha16",
                "v0.8.0-alpha17",
                "v0.8.0-alpha18",
                "v0.8.0-alpha19",
                "v0.8.0-alpha20",
                "v0.8.0-alpha21",
                "v0.8.0-alpha22",
                "v0.8.0-alpha23",
                "v0.8.0-alpha24",
                "v0.8.0-alpha25",
                "v0.8.0-alpha26",
                "v0.8.0-alpha27",
                "v0.8.0-alpha28",
                "v0.8.0-alpha29",
                "v0.8.0-alpha3",
                "v0.8.0-alpha30",
                "v0.8.0-alpha31",
                "v0.8.0-alpha32",
                "v0.8.0-alpha33",
                "v0.8.0-alpha34",
                "v0.8.0-alpha35",
                "v0.8.0-alpha36",
                "v0.8.0-alpha37",
                "v0.8.0-alpha38",
                "v0.8.0-alpha39",
                "v0.8.0-alpha4",
                "v0.8.0-alpha40",
                "v0.8.0-alpha41",
                "v0.8.0-alpha42",
                "v0.8.0-alpha43",
                "v0.8.0-alpha44",
                "v0.8.0-alpha45",
                "v0.8.0-alpha46",
                "v0.8.0-alpha47",
                "v0.8.0-alpha5",
                "v0.8.0-alpha6",
                "v0.8.0-alpha7",
                "v0.8.0-alpha8",
                "v0.8.0-alpha9",
                "v0.8.0-beta1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "1571440e7c8cb1dc8a1f3ee2b351f80a665b3e07",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1522856831,
            "hunks": 11,
            "message": "fix the name of certChain property don't use the unpythonic camelCase in instance variables",
            "diff": [
                "diff --git a/tlslite/messages.py b/tlslite/messages.py",
                "index 49c7683..98619f6 100644",
                "--- a/tlslite/messages.py",
                "+++ b/tlslite/messages.py",
                "@@ -20,2 +20,3 @@ from .x509certchain import X509CertChain",
                " from .utils.tackwrapper import *",
                "+from .utils.deprecations import deprecated_attrs, deprecated_params",
                " from .extensions import *",
                "@@ -1093,2 +1094,3 @@ class CertificateEntry(object):",
                "+@deprecated_attrs({\"cert_chain\": \"certChain\"})",
                " class Certificate(HandshakeMsg):",
                "@@ -1097,3 +1099,3 @@ class Certificate(HandshakeMsg):",
                "         self.certificateType = certificateType",
                "-        self._certChain = None",
                "+        self._cert_chain = None",
                "         self.version = version",
                "@@ -1103,5 +1105,5 @@ class Certificate(HandshakeMsg):",
                "     @property",
                "-    def certChain(self):",
                "-        if self._certChain:",
                "-            return self._certChain",
                "+    def cert_chain(self):",
                "+        if self._cert_chain:",
                "+            return self._cert_chain",
                "         elif self.certificate_list is None:",
                "@@ -1112,10 +1114,11 @@ class Certificate(HandshakeMsg):",
                "-    def create(self, certChain, context=None):",
                "-        if isinstance(certChain, X509CertChain):",
                "-            self._certChain = certChain",
                "+    @deprecated_params({\"cert_chain\": \"certChain\"})",
                "+    def create(self, cert_chain, context=None):",
                "+        if isinstance(cert_chain, X509CertChain):",
                "+            self._cert_chain = cert_chain",
                "             self.certificate_list = [CertificateEntry(self.certificateType)",
                "                                      .create(i, []) for i",
                "-                                     in certChain.x509List]",
                "+                                     in cert_chain.x509List]",
                "         else:",
                "-            self.certificate_list = certChain",
                "+            self.certificate_list = cert_chain",
                "         self.certificate_request_context = context",
                "@@ -1149,3 +1152,3 @@ class Certificate(HandshakeMsg):",
                "             if certificate_list:",
                "-                self._certChain = X509CertChain(certificate_list)",
                "+                self._cert_chain = X509CertChain(certificate_list)",
                "         else:",
                "@@ -1175,4 +1178,4 @@ class Certificate(HandshakeMsg):",
                "             chainLength = 0",
                "-            if self._certChain:",
                "-                certificate_list = self._certChain.x509List",
                "+            if self._cert_chain:",
                "+                certificate_list = self._cert_chain.x509List",
                "             else:",
                "@@ -1201,4 +1204,4 @@ class Certificate(HandshakeMsg):",
                "         if self.version <= (3, 3):",
                "-            return \"Certificate(certChain={0!r})\".format(",
                "-                    self.certChain.x509List)",
                "+            return \"Certificate(cert_chain={0!r})\".format(",
                "+                    self.cert_chain.x509List)",
                "         else:",
                "diff --git a/unit_tests/test_tlslite_messages.py b/unit_tests/test_tlslite_messages.py",
                "index 8bf0f69..018f9bd 100644",
                "--- a/unit_tests/test_tlslite_messages.py",
                "+++ b/unit_tests/test_tlslite_messages.py",
                "@@ -2928,3 +2928,3 @@ class TestCertificate(unittest.TestCase):",
                "         self.assertEqual(repr(cert),",
                "-                \"Certificate(certChain=[bytearray(b'one'), \"",
                "+                \"Certificate(cert_chain=[bytearray(b'one'), \"",
                "                 \"bytearray(b'two')])\")"
            ],
            "changed_files": [
                "tlslite/messages.py",
                "unit_tests/test_tlslite_messages.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.8.0-alpha10",
                "v0.8.0-alpha11",
                "v0.8.0-alpha12",
                "v0.8.0-alpha13",
                "v0.8.0-alpha14",
                "v0.8.0-alpha15",
                "v0.8.0-alpha16",
                "v0.8.0-alpha17",
                "v0.8.0-alpha18",
                "v0.8.0-alpha19",
                "v0.8.0-alpha20",
                "v0.8.0-alpha21",
                "v0.8.0-alpha22",
                "v0.8.0-alpha23",
                "v0.8.0-alpha24",
                "v0.8.0-alpha25",
                "v0.8.0-alpha26",
                "v0.8.0-alpha27",
                "v0.8.0-alpha28",
                "v0.8.0-alpha29",
                "v0.8.0-alpha3",
                "v0.8.0-alpha30",
                "v0.8.0-alpha31",
                "v0.8.0-alpha32",
                "v0.8.0-alpha33",
                "v0.8.0-alpha34",
                "v0.8.0-alpha35",
                "v0.8.0-alpha36",
                "v0.8.0-alpha37",
                "v0.8.0-alpha38",
                "v0.8.0-alpha39",
                "v0.8.0-alpha4",
                "v0.8.0-alpha40",
                "v0.8.0-alpha41",
                "v0.8.0-alpha42",
                "v0.8.0-alpha43",
                "v0.8.0-alpha44",
                "v0.8.0-alpha45",
                "v0.8.0-alpha46",
                "v0.8.0-alpha47",
                "v0.8.0-alpha5",
                "v0.8.0-alpha6",
                "v0.8.0-alpha7",
                "v0.8.0-alpha8",
                "v0.8.0-alpha9",
                "v0.8.0-beta1"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "90ca45dea7ee5b7ddad25a8fbd380ecf017fa152",
            "repository": "https://github.com/tomato42/tlslite-ng",
            "timestamp": 1522858045,
            "hunks": 5,
            "message": "small style fixes for Certificate class add few doc strings, fix indentation, else after return, etc.",
            "diff": [
                "diff --git a/tlslite/messages.py b/tlslite/messages.py",
                "index 2a82ef9..e15e138 100644",
                "--- a/tlslite/messages.py",
                "+++ b/tlslite/messages.py",
                "@@ -1106,2 +1106,3 @@ class Certificate(HandshakeMsg):",
                "     def cert_chain(self):",
                "+        \"\"\"Getter for the cert_chain property.\"\"\"",
                "         if self._cert_chain:",
                "@@ -1110,5 +1111,4 @@ class Certificate(HandshakeMsg):",
                "             return None",
                "-        else:",
                "-            return X509CertChain([i.certificate",
                "-                                  for i in self.certificate_list])",
                "+        return X509CertChain([i.certificate",
                "+                              for i in self.certificate_list])",
                "@@ -1116,2 +1116,3 @@ class Certificate(HandshakeMsg):",
                "     def cert_chain(self, cert_chain):",
                "+        \"\"\"Setter for the cert_chain property.\"\"\"",
                "         if isinstance(cert_chain, X509CertChain):",
                "@@ -1126,2 +1127,3 @@ class Certificate(HandshakeMsg):",
                "     def create(self, cert_chain, context=None):",
                "+        \"\"\"Initialise fields of the class.\"\"\"",
                "         self.cert_chain = cert_chain",
                "@@ -1208,9 +1210,8 @@ class Certificate(HandshakeMsg):",
                "         if self.version <= (3, 3):",
                "-            return \"Certificate(cert_chain={0!r})\".format(",
                "-                    self.cert_chain.x509List)",
                "-        else:",
                "-            return \"Certificate(request_context={0!r}, \"\\",
                "-                   \"certificate_list={1!r})\"\\",
                "-                    .format(self.certificate_request_context,",
                "-                            self.certificate_list)",
                "+            return \"Certificate(cert_chain={0!r})\"\\",
                "+                   .format(self.cert_chain.x509List)",
                "+        return \"Certificate(request_context={0!r}, \"\\",
                "+               \"certificate_list={1!r})\"\\",
                "+               .format(self.certificate_request_context,",
                "+                       self.certificate_list)"
            ],
            "changed_files": [
                "tlslite/messages.py"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "v0.8.0-alpha10",
                "v0.8.0-alpha11",
                "v0.8.0-alpha12",
                "v0.8.0-alpha13",
                "v0.8.0-alpha14",
                "v0.8.0-alpha15",
                "v0.8.0-alpha16",
                "v0.8.0-alpha17",
                "v0.8.0-alpha18",
                "v0.8.0-alpha19",
                "v0.8.0-alpha20",
                "v0.8.0-alpha21",
                "v0.8.0-alpha22",
                "v0.8.0-alpha23",
                "v0.8.0-alpha24",
                "v0.8.0-alpha25",
                "v0.8.0-alpha26",
                "v0.8.0-alpha27",
                "v0.8.0-alpha28",
                "v0.8.0-alpha29",
                "v0.8.0-alpha3",
                "v0.8.0-alpha30",
                "v0.8.0-alpha31",
                "v0.8.0-alpha32",
                "v0.8.0-alpha33",
                "v0.8.0-alpha34",
                "v0.8.0-alpha35",
                "v0.8.0-alpha36",
                "v0.8.0-alpha37",
                "v0.8.0-alpha38",
                "v0.8.0-alpha39",
                "v0.8.0-alpha4",
                "v0.8.0-alpha40",
                "v0.8.0-alpha41",
                "v0.8.0-alpha42",
                "v0.8.0-alpha43",
                "v0.8.0-alpha44",
                "v0.8.0-alpha45",
                "v0.8.0-alpha46",
                "v0.8.0-alpha47",
                "v0.8.0-alpha5",
                "v0.8.0-alpha6",
                "v0.8.0-alpha7",
                "v0.8.0-alpha8",
                "v0.8.0-alpha9",
                "v0.8.0-beta1"
            ],
            "matched_rules": []
        }
    ]
}
