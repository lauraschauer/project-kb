{
    "advisory_record": {
        "cve_id": "CVE-2018-11797",
        "description": "In Apache PDFBox 1.8.0 to 1.8.15 and 2.0.0RC1 to 2.0.11, a carefully crafted PDF file can trigger an extremely long running computation when parsing the page tree.",
        "reserved_timestamp": 1528156800,
        "published_timestamp": 1538697600,
        "updated_timestamp": 1621346775,
        "repository_url": null,
        "references": {
            "https://lists.apache.org/thread.html/645574bc50b886d39c20b4065d51ccb1cd5d3a6b4750a22edbb565eb%40%3Cannounce.apache.org%3E": 2,
            "https://lists.apache.org/thread.html/a9760973a873522f4d4c0a99916ceb74f361d91006b663a0a418d34a%40%3Cannounce.apache.org%3E": 2,
            "https://lists.debian.org/debian-lts-announce/2018/10/msg00008.html": 2,
            "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/POPOGHJ5CVMUVCRQU7APBAN5IVZGZFDX/": 2,
            "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/6HKVPTJWZGUB4MH4AAOWMRJHRDBYFHGJ/": 2,
            "https://www.oracle.com/security-alerts/cpuapr2020.html": 2,
            "https://lists.apache.org/thread.html/r54594251369e14c185da9662a5340a52afbbdf75d61c9c3a69c8f2e8%40%3Cdev.pdfbox.apache.org%3E": 2
        },
        "affected_products": [
            "PDFBox",
            "Apache PDFBox",
            "Apache"
        ],
        "versions": {
            "status": "affected",
            "version": "1.8.0 to 1.8.15"
        },
        "files": [
            "PDF",
            "PDFBox"
        ],
        "keywords": [
            "tree",
            "apache",
            "craft",
            "file",
            "parse",
            "page",
            "pdfbox",
            "running",
            "trigger",
            "computation"
        ],
        "files_extension": [],
        "has_fixing_commit": false
    },
    "commits": [
        {
            "commit_id": "48dbb7ff9c2ef62282f8363c8592239251b48244",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523989276,
            "hunks": 5,
            "message": "PDFBOX-2941: don't lose benchmark result when mouse moves into PDF pane and out git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1829382 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java b/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
                "index 83702b12f..3a6ba445b 100644",
                "--- a/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
                "+++ b/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
                "@@ -63,2 +63,3 @@ public class PagePane implements ActionListener, AncestorListener, MouseMotionLi",
                "     private final PDPage page;",
                "+    private String labelText = \"\";",
                "@@ -236,3 +237,3 @@ public class PagePane implements ActionListener, AncestorListener, MouseMotionLi",
                "     {",
                "-        statuslabel.setText(\"\");",
                "+        statuslabel.setText(labelText);",
                "     }",
                "@@ -259,3 +260,4 @@ public class PagePane implements ActionListener, AncestorListener, MouseMotionLi",
                "             label.setIcon(null);",
                "-            label.setText(\"Rendering...\");",
                "+            labelText = \"Rendering...\";",
                "+            label.setText(labelText);",
                "             PDFRenderer renderer = new PDFRenderer(document);",
                "@@ -263,6 +265,7 @@ public class PagePane implements ActionListener, AncestorListener, MouseMotionLi",
                "             long t0 = System.currentTimeMillis();",
                "-            statuslabel.setText(\"Rendering...\");",
                "+            statuslabel.setText(labelText);",
                "             BufferedImage bim = renderer.renderImage(pageIndex, scale);",
                "             float t = (System.currentTimeMillis() - t0) / 1000f;",
                "-            statuslabel.setText(\"Rendered in \" + t + \" second\" + (t > 1 ? \"s\" : \"\"));",
                "+            labelText = \"Rendered in \" + t + \" second\" + (t > 1 ? \"s\" : \"\");",
                "+            statuslabel.setText(labelText);",
                "             return ImageUtil.getRotatedImage(bim, rotation);"
            ],
            "changed_files": [
                "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-2941": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: PDF",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-2941",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "54c040c429912040f5a1911c0a8c593b0b9d4821",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524320249,
            "hunks": 150,
            "message": "PDFBOX-4189: Enable PDF creation with Bengali by reading and utilizing the GSUB table, by Palash Ray git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829710 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "new file mode 100644",
                "index 000000000..221549918",
                "--- /dev/null",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "@@ -0,0 +1,115 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.pdfbox.examples.pdmodel;",
                "+",
                "+import java.io.IOException;",
                "+import java.net.URISyntaxException;",
                "+",
                "+import org.apache.pdfbox.pdmodel.PDDocument;",
                "+import org.apache.pdfbox.pdmodel.PDPage;",
                "+import org.apache.pdfbox.pdmodel.PDPageContentStream;",
                "+import org.apache.pdfbox.pdmodel.font.PDFont;",
                "+import org.apache.pdfbox.pdmodel.font.PDType0Font;",
                "+import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;",
                "+",
                "+/**",
                "+ * Inspired from <a href=",
                "+ * \"https://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/HelloWorldTTF.java?view=markup\">PdfBox",
                "+ * Example</a>. This attempts to correctly demonstrate to what extent Bengali text rendering is",
                "+ * supported. First, we render some text, and then embed an image with the correct text displayed on",
                "+ * the next page.",
                "+ *",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class BengaliPdfGenerationHelloWorld",
                "+{",
                "+",
                "+    /**",
                "+     * The unicode of this is given below:",
                "+     * ",
                "+     * <pre>",
                "+     * \\u0986\\u09ae\\u09bf  \\u0995\\u09cb\\u09a8 \\u09aa\\u09a5\\u09c7  \\u0995\\u09cd\\u09b7\\u09c0\\u09b0\\u09c7\\u09b0 \\u09b7\\u09a8\\u09cd\\u09a1  \\u09aa\\u09c1\\u09a4\\u09c1\\u09b2 \\u09b0\\u09c1\\u09aa\\u09cb  \\u0997\\u0999\\u09cd\\u0997\\u09be \\u098b\\u09b7\\u09bf",
                "+     * </pre>",
                "+     * ",
                "+     */",
                "+    private static final String BANGLA_TEXT_1 = \"\u00e0\u00a6\u0086\u00e0\u00a6\u00ae\u00e0\u00a6\u00bf \u00e0\u00a6\u0095\u00e0\u00a7\u008b\u00e0\u00a6\u00a8 \u00e0\u00a6\u00aa\u00e0\u00a6\u00a5\u00e0\u00a7\u0087 \u00e0\u00a6\u0095\u00e0\u00a7\u008d\u00e0\u00a6\u00b7\u00e0\u00a7\u0080\u00e0\u00a6\u00b0\u00e0\u00a7\u0087\u00e0\u00a6\u00b0 \u00e0\u00a6\u00b2\u00e0\u00a6\u0095\u00e0\u00a7\u008d\u00e0\u00a6\u00b7\u00e0\u00a7\u008d\u00e0\u00a6\u00ae\u00e0\u00a7\u0080 \u00e0\u00a6\u00b7\u00e0\u00a6\u00a8\u00e0\u00a7\u008d\u00e0\u00a6\u00a1 \u00e0\u00a6\u00aa\u00e0\u00a7\u0081\u00e0\u00a6\u00a4\u00e0\u00a7\u0081\u00e0\u00a6\u00b2 \u00e0\u00a6\u00b0\u00e0\u00a7\u0081\u00e0\u00a6\u00aa\u00e0\u00a7\u008b \u00e0\u00a6\u0097\u00e0\u00a6\u0099\u00e0\u00a7\u008d\u00e0\u00a6\u0097\u00e0\u00a6\u00be \u00e0\u00a6\u008b\u00e0\u00a6\u00b7\u00e0\u00a6\u00bf\";",
                "+    private static final String BANGLA_TEXT_2 = \"\u00e0\u00a6\u00a6\u00e0\u00a7\u008d\u00e0\u00a6\u00b0\u00e0\u00a7\u0081\u00e0\u00a6\u00a4 \u00e0\u00a6\u0097\u00e0\u00a6\u00be\u00e0\u00a6\u00a2\u00e0\u00a6\u00bc \u00e0\u00a6\u00b6\u00e0\u00a7\u0087\u00e0\u00a6\u00af\u00e0\u00a6\u00bc\u00e0\u00a6\u00be\u00e0\u00a6\u00b2 \u00e0\u00a6\u0085\u00e0\u00a6\u00b2\u00e0\u00a6\u00b8 \u00e0\u00a6\u0095\u00e0\u00a7\u0081\u00e0\u00a6\u0095\u00e0\u00a7\u0081\u00e0\u00a6\u00b0 \u00e0\u00a6\u009c\u00e0\u00a7\u0081\u00e0\u00a6\u00a1\u00e0\u00a6\u00bc\u00e0\u00a7\u0087 \u00e0\u00a6\u009c\u00e0\u00a6\u00be\u00e0\u00a6\u00ae\u00e0\u00a7\u008d\u00e0\u00a6\u00aa \u00e0\u00a6\u00a7\u00e0\u00a7\u0081\u00e0\u00a6\u00b0\u00e0\u00a7\u008d\u00e0\u00a6\u00a4  \u00e0\u00a6\u00b9\u00e0\u00a6\u00a0\u00e0\u00a6\u00be\u00e0\u00a7\u008e \u00e0\u00a6\u00ad\u00e0\u00a6\u00be\u00e0\u00a6\u0099\u00e0\u00a7\u0087\u00e0\u00a6\u00a8\u00e0\u00a6\u00bf \u00e0\u00a6\u00ae\u00e0\u00a7\u008c\u00e0\u00a6\u00b2\u00e0\u00a6\u00bf\u00e0\u00a6\u0095 \u00e0\u00a6\u0090\u00e0\u00a6\u00b6\u00e0\u00a6\u00bf \u00e0\u00a6\u00a6\u00e0\u00a7\u0088\";",
                "+    private static final String BANGLA_TEXT_3 = \"\u00e0\u00a6\u008b\u00e0\u00a6\u00b7\u00e0\u00a6\u00bf \u00e0\u00a6\u0095\u00e0\u00a6\u00b2\u00e0\u00a7\u008d\u00e0\u00a6\u00b2\u00e0\u00a7\u008b\u00e0\u00a6\u00b2 \u00e0\u00a6\u00ac\u00e0\u00a7\u008d\u00e0\u00a6\u00af\u00e0\u00a6\u00be\u00e0\u00a6\u00b8 \u00e0\u00a6\u00a8\u00e0\u00a6\u00bf\u00e0\u00a6\u00b0\u00e0\u00a7\u008d\u00e0\u00a6\u00ad\u00e0\u00a7\u009f \";",
                "+",
                "+    static",
                "+    {",
                "+        if (System.getProperty(\"java.version\").startsWith(\"1.8\"))",
                "+        {",
                "+            System.setProperty(\"sun.java2d.cmm\", \"sun.java2d.cmm.kcms.KcmsServiceProvider\");",
                "+        }",
                "+    }",
                "+",
                "+    public static void main(String[] args) throws IOException, URISyntaxException",
                "+    {",
                "+        if (args.length != 1)",
                "+        {",
                "+            System.err.println(",
                "+                    \"usage: \" + BengaliPdfGenerationHelloWorld.class.getName() + \" <output-file> \");",
                "+            System.exit(1);",
                "+        }",
                "+",
                "+        String filename = args[0];",
                "+",
                "+        System.out.println(\"The generated pdf filename is: \" + filename);",
                "+",
                "+        PDDocument doc = new PDDocument();",
                "+        try",
                "+        {",
                "+",
                "+            PDPage page1 = new PDPage();",
                "+            doc.addPage(page1);",
                "+",
                "+            PDFont font = PDType0Font.load(doc, BengaliPdfGenerationHelloWorld.class",
                "+                    .getResourceAsStream(\"/org/apache/pdfbox/resources/ttf/Lohit-Bengali.ttf\"),",
                "+                    true);",
                "+",
                "+            PDPageContentStream contents = new PDPageContentStream(doc, page1);",
                "+            contents.beginText();",
                "+            contents.setFont(font, 12);",
                "+            contents.newLineAtOffset(10, 750);",
                "+            contents.showText(BANGLA_TEXT_1);",
                "+            contents.newLineAtOffset(0, -50);",
                "+            contents.showText(BANGLA_TEXT_2);",
                "+            contents.newLineAtOffset(0, -30);",
                "+            contents.showText(BANGLA_TEXT_3);",
                "+            contents.endText();",
                "+",
                "+            PDImageXObject pdImage = PDImageXObject",
                "+                    .createFromFile(BengaliPdfGenerationHelloWorld.class",
                "+                            .getResource(",
                "+                                    \"/org/apache/pdfbox/resources/ttf/bengali-correct-text.png\")",
                "+                            // getFile() doesn't work if there is a space in the path",
                "+                            .toURI().getPath(), doc);",
                "+            contents.drawImage(pdImage, 0, 300, pdImage.getWidth(), pdImage.getHeight());",
                "+            contents.close();",
                "+",
                "+            doc.save(filename);",
                "+        }",
                "+        finally",
                "+        {",
                "+            doc.close();",
                "+        }",
                "+    }",
                "+",
                "+}",
                "diff --git a/examples/src/main/resources/org/apache/pdfbox/resources/ttf/bengali-correct-text.png b/examples/src/main/resources/org/apache/pdfbox/resources/ttf/bengali-correct-text.png",
                "new file mode 100644",
                "index 000000000..b5aadd116",
                "Binary files /dev/null and b/examples/src/main/resources/org/apache/pdfbox/resources/ttf/bengali-correct-text.png differ",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java",
                "index 2b5de0109..1986d0dbd 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java",
                "@@ -21,3 +21,2 @@ import java.io.IOException;",
                " import java.util.ArrayList;",
                "-import java.util.Arrays;",
                " import java.util.Collection;",
                "@@ -33,2 +32,22 @@ import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "+import org.apache.fontbox.ttf.gsub.GlyphSubstitutionDataExtractor;",
                "+import org.apache.fontbox.ttf.table.common.CoverageTable;",
                "+import org.apache.fontbox.ttf.table.common.CoverageTableFormat1;",
                "+import org.apache.fontbox.ttf.table.common.CoverageTableFormat2;",
                "+import org.apache.fontbox.ttf.table.common.FeatureListTable;",
                "+import org.apache.fontbox.ttf.table.common.FeatureRecord;",
                "+import org.apache.fontbox.ttf.table.common.FeatureTable;",
                "+import org.apache.fontbox.ttf.table.common.LangSysRecord;",
                "+import org.apache.fontbox.ttf.table.common.LangSysTable;",
                "+import org.apache.fontbox.ttf.table.common.LookupListTable;",
                "+import org.apache.fontbox.ttf.table.common.LookupSubTable;",
                "+import org.apache.fontbox.ttf.table.common.LookupTable;",
                "+import org.apache.fontbox.ttf.table.common.RangeRecord;",
                "+import org.apache.fontbox.ttf.table.common.ScriptRecord;",
                "+import org.apache.fontbox.ttf.table.common.ScriptTable;",
                "+import org.apache.fontbox.ttf.table.gsub.LigatureSetTable;",
                "+import org.apache.fontbox.ttf.table.gsub.LigatureTable;",
                "+import org.apache.fontbox.ttf.table.gsub.LookupTypeLigatureSubstitutionSubstFormat1;",
                "+import org.apache.fontbox.ttf.table.gsub.LookupTypeSingleSubstFormat1;",
                "+import org.apache.fontbox.ttf.table.gsub.LookupTypeSingleSubstFormat2;",
                "@@ -45,6 +64,6 @@ public class GlyphSubstitutionTable extends TTFTable",
                "-    private LinkedHashMap<String, ScriptTable> scriptList;",
                "+    private Map<String, ScriptTable> scriptList;",
                "     // featureList and lookupList are not maps because we need to index into them",
                "-    private FeatureRecord[] featureList;",
                "-    private LookupTable[] lookupList;",
                "+    private FeatureListTable featureListTable;",
                "+    private LookupListTable lookupListTable;",
                "@@ -55,2 +74,4 @@ public class GlyphSubstitutionTable extends TTFTable",
                "+    private Map<String, Map<List<Integer>, Integer>> rawGSubData;",
                "+",
                "     GlyphSubstitutionTable(TrueTypeFont font)",
                "@@ -79,7 +100,14 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         scriptList = readScriptList(data, start + scriptListOffset);",
                "-        featureList = readFeatureList(data, start + featureListOffset);",
                "-        lookupList = readLookupList(data, start + lookupListOffset);",
                "+        featureListTable = readFeatureList(data, start + featureListOffset);",
                "+        lookupListTable = readLookupList(data, start + lookupListOffset);",
                "+",
                "+        GlyphSubstitutionDataExtractor glyphSubstitutionDataExtractor = new GlyphSubstitutionDataExtractor();",
                "+",
                "+        rawGSubData = glyphSubstitutionDataExtractor",
                "+                .getGsubData(scriptList, featureListTable, lookupListTable);",
                "+        LOG.debug(\"rawGSubData: \" + rawGSubData);",
                "     }",
                "-    LinkedHashMap<String, ScriptTable> readScriptList(TTFDataStream data, long offset) throws IOException",
                "+    private Map<String, ScriptTable> readScriptList(TTFDataStream data, long offset)",
                "+            throws IOException",
                "     {",
                "@@ -87,10 +115,9 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         int scriptCount = data.readUnsignedShort();",
                "-        ScriptRecord[] scriptRecords = new ScriptRecord[scriptCount];",
                "+        ScriptTable[] scriptTables= new ScriptTable[scriptCount];",
                "         int[] scriptOffsets = new int[scriptCount];",
                "+        String[] scriptTags = new String[scriptCount];",
                "         for (int i = 0; i < scriptCount; i++)",
                "         {",
                "-            ScriptRecord scriptRecord = new ScriptRecord();",
                "-            scriptRecord.scriptTag = data.readString(4);",
                "+            scriptTags[i] = data.readString(4);",
                "             scriptOffsets[i] = data.readUnsignedShort();",
                "-            scriptRecords[i] = scriptRecord;",
                "         }",
                "@@ -98,16 +125,16 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         {",
                "-            scriptRecords[i].scriptTable = readScriptTable(data, offset + scriptOffsets[i]);",
                "+            scriptTables[i] = readScriptTable(data, offset + scriptOffsets[i]);",
                "         }",
                "-        LinkedHashMap<String, ScriptTable> resultScriptList = new LinkedHashMap<>(scriptCount);",
                "-        for (ScriptRecord scriptRecord : scriptRecords)",
                "+        Map<String, ScriptTable> resultScriptList = new LinkedHashMap<>(scriptCount);",
                "+        for (int i = 0; i < scriptCount; i++)",
                "         {",
                "-            resultScriptList.put(scriptRecord.scriptTag, scriptRecord.scriptTable);",
                "+            ScriptRecord scriptRecord = new ScriptRecord(scriptTags[i], scriptTables[i]);",
                "+            resultScriptList.put(scriptRecord.getScriptTag(), scriptRecord.getScriptTable());",
                "         }",
                "-        return resultScriptList;",
                "+        return Collections.unmodifiableMap(resultScriptList);",
                "     }",
                "-    ScriptTable readScriptTable(TTFDataStream data, long offset) throws IOException",
                "+    private ScriptTable readScriptTable(TTFDataStream data, long offset) throws IOException",
                "     {",
                "         data.seek(offset);",
                "-        ScriptTable scriptTable = new ScriptTable();",
                "         int defaultLangSys = data.readUnsignedShort();",
                "@@ -115,2 +142,3 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         LangSysRecord[] langSysRecords = new LangSysRecord[langSysCount];",
                "+        String[] langSysTags = new String[langSysCount];",
                "         int[] langSysOffsets = new int[langSysCount];",
                "@@ -118,10 +146,11 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         {",
                "-            LangSysRecord langSysRecord = new LangSysRecord();",
                "-            langSysRecord.langSysTag = data.readString(4);",
                "+            langSysTags[i] = data.readString(4);",
                "             langSysOffsets[i] = data.readUnsignedShort();",
                "-            langSysRecords[i] = langSysRecord;",
                "         }",
                "+",
                "+        LangSysTable defaultLangSysTable = null;",
                "+",
                "         if (defaultLangSys != 0)",
                "         {",
                "-            scriptTable.defaultLangSysTable = readLangSysTable(data, offset + defaultLangSys);",
                "+            defaultLangSysTable = readLangSysTable(data, offset + defaultLangSys);",
                "         }",
                "@@ -129,29 +158,30 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         {",
                "-            langSysRecords[i].langSysTable = readLangSysTable(data, offset + langSysOffsets[i]);",
                "+            LangSysTable langSysTable = readLangSysTable(data, offset + langSysOffsets[i]);",
                "+            langSysRecords[i] = new LangSysRecord(langSysTags[i], langSysTable);",
                "         }",
                "-        scriptTable.langSysTables = new LinkedHashMap<>(langSysCount);",
                "+        Map<String, LangSysTable> langSysTables = new LinkedHashMap<>(langSysCount);",
                "         for (LangSysRecord langSysRecord : langSysRecords)",
                "         {",
                "-            scriptTable.langSysTables.put(langSysRecord.langSysTag, langSysRecord.langSysTable);",
                "+            langSysTables.put(langSysRecord.getLangSysTag(),",
                "+                    langSysRecord.getLangSysTable());",
                "         }",
                "-        return scriptTable;",
                "+        return new ScriptTable(defaultLangSysTable, Collections.unmodifiableMap(langSysTables));",
                "     }",
                "-    LangSysTable readLangSysTable(TTFDataStream data, long offset) throws IOException",
                "+    private LangSysTable readLangSysTable(TTFDataStream data, long offset) throws IOException",
                "     {",
                "         data.seek(offset);",
                "-        LangSysTable langSysTable = new LangSysTable();",
                "-        @SuppressWarnings({\"unused\", \"squid:S1854\"})",
                "         int lookupOrder = data.readUnsignedShort();",
                "-        langSysTable.requiredFeatureIndex = data.readUnsignedShort();",
                "+        int requiredFeatureIndex = data.readUnsignedShort();",
                "         int featureIndexCount = data.readUnsignedShort();",
                "-        langSysTable.featureIndices = new int[featureIndexCount];",
                "+        int[] featureIndices = new int[featureIndexCount];",
                "         for (int i = 0; i < featureIndexCount; i++)",
                "         {",
                "-            langSysTable.featureIndices[i] = data.readUnsignedShort();",
                "+            featureIndices[i] = data.readUnsignedShort();",
                "         }",
                "-        return langSysTable;",
                "+        return new LangSysTable(lookupOrder, requiredFeatureIndex, featureIndexCount,",
                "+                featureIndices);",
                "     }",
                "-    FeatureRecord[] readFeatureList(TTFDataStream data, long offset) throws IOException",
                "+    private FeatureListTable readFeatureList(TTFDataStream data, long offset) throws IOException",
                "     {",
                "@@ -161,8 +191,7 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         int[] featureOffsets = new int[featureCount];",
                "+        String[] featureTags = new String[featureCount];",
                "         for (int i = 0; i < featureCount; i++)",
                "         {",
                "-            FeatureRecord featureRecord = new FeatureRecord();",
                "-            featureRecord.featureTag = data.readString(4);",
                "+            featureTags[i] = data.readString(4);",
                "             featureOffsets[i] = data.readUnsignedShort();",
                "-            featureRecords[i] = featureRecord;",
                "         }",
                "@@ -170,23 +199,22 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         {",
                "-            featureRecords[i].featureTable = readFeatureTable(data, offset + featureOffsets[i]);",
                "+            FeatureTable featureTable = readFeatureTable(data, offset + featureOffsets[i]);",
                "+            featureRecords[i] = new FeatureRecord(featureTags[i], featureTable);",
                "         }",
                "-        return featureRecords;",
                "+        return new FeatureListTable(featureCount, featureRecords);",
                "     }",
                "-    FeatureTable readFeatureTable(TTFDataStream data, long offset) throws IOException",
                "+    private FeatureTable readFeatureTable(TTFDataStream data, long offset) throws IOException",
                "     {",
                "         data.seek(offset);",
                "-        FeatureTable featureTable = new FeatureTable();",
                "-        @SuppressWarnings({\"unused\", \"squid:S1854\"})",
                "         int featureParams = data.readUnsignedShort();",
                "         int lookupIndexCount = data.readUnsignedShort();",
                "-        featureTable.lookupListIndices = new int[lookupIndexCount];",
                "+        int[] lookupListIndices = new int[lookupIndexCount];",
                "         for (int i = 0; i < lookupIndexCount; i++)",
                "         {",
                "-            featureTable.lookupListIndices[i] = data.readUnsignedShort();",
                "+            lookupListIndices[i] = data.readUnsignedShort();",
                "         }",
                "-        return featureTable;",
                "+        return new FeatureTable(featureParams, lookupIndexCount, lookupListIndices);",
                "     }",
                "-    LookupTable[] readLookupList(TTFDataStream data, long offset) throws IOException",
                "+    private LookupListTable readLookupList(TTFDataStream data, long offset) throws IOException",
                "     {",
                "@@ -204,11 +232,10 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         }",
                "-        return lookupTables;",
                "+        return new LookupListTable(lookupCount, lookupTables);",
                "     }",
                "-    LookupTable readLookupTable(TTFDataStream data, long offset) throws IOException",
                "+    private LookupTable readLookupTable(TTFDataStream data, long offset) throws IOException",
                "     {",
                "         data.seek(offset);",
                "-        LookupTable lookupTable = new LookupTable();",
                "-        lookupTable.lookupType = data.readUnsignedShort();",
                "-        lookupTable.lookupFlag = data.readUnsignedShort();",
                "+        int lookupType = data.readUnsignedShort();",
                "+        int lookupFlag = data.readUnsignedShort();",
                "         int subTableCount = data.readUnsignedShort();",
                "@@ -219,8 +246,14 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         }",
                "-        if ((lookupTable.lookupFlag & 0x0010) != 0)",
                "+",
                "+        int markFilteringSet;",
                "+        if ((lookupFlag & 0x0010) != 0)",
                "+        {",
                "+            markFilteringSet = data.readUnsignedShort();",
                "+        }",
                "+        else",
                "         {",
                "-            lookupTable.markFilteringSet = data.readUnsignedShort();",
                "+            markFilteringSet = 0;",
                "         }",
                "-        lookupTable.subTables = new LookupSubTable[subTableCount];",
                "-        switch (lookupTable.lookupType)",
                "+        LookupSubTable[] subTables = new LookupSubTable[subTableCount];",
                "+        switch (lookupType)",
                "         {",
                "@@ -229,3 +262,10 @@ public class GlyphSubstitutionTable extends TTFTable",
                "             {",
                "-                lookupTable.subTables[i] = readLookupSubTable(data, offset + subTableOffets[i]);",
                "+                subTables[i] = readLookupSubTable(data, offset + subTableOffets[i]);",
                "+            }",
                "+            break;",
                "+        case 4: // Ligature Substitution Subtable",
                "+            for (int i = 0; i < subTableCount; i++)",
                "+            {",
                "+                subTables[i] = readLigatureSubstitutionSubtable(data,",
                "+                        offset + subTableOffets[i]);",
                "             }",
                "@@ -234,8 +274,9 @@ public class GlyphSubstitutionTable extends TTFTable",
                "             // Other lookup types are not supported",
                "-            LOG.debug(\"Type \" + lookupTable.lookupType + \" GSUB lookup table is not supported and will be ignored\");",
                "+            LOG.debug(\"Type \" + lookupType",
                "+                    + \" GSUB lookup table is not supported and will be ignored\");",
                "         }",
                "-        return lookupTable;",
                "+        return new LookupTable(lookupType, lookupFlag, markFilteringSet, subTables);",
                "     }",
                "-    LookupSubTable readLookupSubTable(TTFDataStream data, long offset) throws IOException",
                "+    private LookupSubTable readLookupSubTable(TTFDataStream data, long offset) throws IOException",
                "     {",
                "@@ -247,8 +288,6 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         {",
                "-            LookupTypeSingleSubstFormat1 lookupSubTable = new LookupTypeSingleSubstFormat1();",
                "-            lookupSubTable.substFormat = substFormat;",
                "             int coverageOffset = data.readUnsignedShort();",
                "-            lookupSubTable.deltaGlyphID = data.readSignedShort();",
                "-            lookupSubTable.coverageTable = readCoverageTable(data, offset + coverageOffset);",
                "-            return lookupSubTable;",
                "+            short deltaGlyphID = data.readSignedShort();",
                "+            CoverageTable coverageTable = readCoverageTable(data, offset + coverageOffset);",
                "+            return new LookupTypeSingleSubstFormat1(substFormat, coverageTable, deltaGlyphID);",
                "         }",
                "@@ -256,13 +295,11 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         {",
                "-            LookupTypeSingleSubstFormat2 lookupSubTable = new LookupTypeSingleSubstFormat2();",
                "-            lookupSubTable.substFormat = substFormat;",
                "             int coverageOffset = data.readUnsignedShort();",
                "             int glyphCount = data.readUnsignedShort();",
                "-            lookupSubTable.substituteGlyphIDs = new int[glyphCount];",
                "+            int[] substituteGlyphIDs = new int[glyphCount];",
                "             for (int i = 0; i < glyphCount; i++)",
                "             {",
                "-                lookupSubTable.substituteGlyphIDs[i] = data.readUnsignedShort();",
                "+                substituteGlyphIDs[i] = data.readUnsignedShort();",
                "             }",
                "-            lookupSubTable.coverageTable = readCoverageTable(data, offset + coverageOffset);",
                "-            return lookupSubTable;",
                "+            CoverageTable coverageTable = readCoverageTable(data, offset + coverageOffset);",
                "+            return new LookupTypeSingleSubstFormat2(substFormat, coverageTable, substituteGlyphIDs);",
                "         }",
                "@@ -273,3 +310,96 @@ public class GlyphSubstitutionTable extends TTFTable",
                "-    CoverageTable readCoverageTable(TTFDataStream data, long offset) throws IOException",
                "+    private LookupSubTable readLigatureSubstitutionSubtable(TTFDataStream data, long offset)",
                "+            throws IOException",
                "+    {",
                "+        data.seek(offset);",
                "+        int substFormat = data.readUnsignedShort();",
                "+",
                "+        if (substFormat != 1)",
                "+        {",
                "+            throw new IllegalArgumentException(",
                "+                    \"The expected SubstFormat for LigatureSubstitutionTable is 1\");",
                "+        }",
                "+",
                "+        int coverage = data.readUnsignedShort();",
                "+        int ligSetCount = data.readUnsignedShort();",
                "+",
                "+        int[] ligatureOffsets = new int[ligSetCount];",
                "+",
                "+        for (int i = 0; i < ligSetCount; i++)",
                "+        {",
                "+            ligatureOffsets[i] = data.readUnsignedShort();",
                "+        }",
                "+",
                "+        CoverageTable coverageTable = readCoverageTable(data, offset + coverage);",
                "+",
                "+        if (ligSetCount != coverageTable.getSize())",
                "+        {",
                "+            throw new IllegalArgumentException(",
                "+                    \"According to the OpenTypeFont specifications, the coverage count should be equal to the no. of LigatureSetTables\");",
                "+        }",
                "+",
                "+        LigatureSetTable[] ligatureSetTables = new LigatureSetTable[ligSetCount];",
                "+",
                "+        for (int i = 0; i < ligSetCount; i++)",
                "+        {",
                "+",
                "+            int coverageGlyphId = coverageTable.getGlyphId(i);",
                "+",
                "+            ligatureSetTables[i] = readLigatureSetTable(data,",
                "+                    offset + ligatureOffsets[i], coverageGlyphId);",
                "+        }",
                "+",
                "+        return new LookupTypeLigatureSubstitutionSubstFormat1(substFormat, coverageTable,",
                "+                ligatureSetTables);",
                "+    }",
                "+",
                "+    private LigatureSetTable readLigatureSetTable(TTFDataStream data, long ligatureSetTableLocation,",
                "+            int coverageGlyphId) throws IOException",
                "+    {",
                "+        data.seek(ligatureSetTableLocation);",
                "+",
                "+        int ligatureCount = data.readUnsignedShort();",
                "+        LOG.debug(\"ligatureCount=\" + ligatureCount);",
                "+",
                "+        int[] ligatureOffsets = new int[ligatureCount];",
                "+        LigatureTable[] ligatureTables = new LigatureTable[ligatureCount];",
                "+",
                "+        for (int i = 0; i < ligatureOffsets.length; i++)",
                "+        {",
                "+            ligatureOffsets[i] = data.readUnsignedShort();",
                "+        }",
                "+",
                "+        for (int i = 0; i < ligatureOffsets.length; i++)",
                "+        {",
                "+            int ligatureOffset = ligatureOffsets[i];",
                "+            ligatureTables[i] = readLigatureTable(data,",
                "+                    ligatureSetTableLocation + ligatureOffset, coverageGlyphId);",
                "+        }",
                "+",
                "+        return new LigatureSetTable(ligatureCount, ligatureTables);",
                "+    }",
                "+",
                "+    private LigatureTable readLigatureTable(TTFDataStream data, long ligatureTableLocation,",
                "+            int coverageGlyphId) throws IOException",
                "+    {",
                "+        data.seek(ligatureTableLocation);",
                "+",
                "+        int ligatureGlyph = data.readUnsignedShort();",
                "+",
                "+        int componentCount = data.readUnsignedShort();",
                "+",
                "+        int[] componentGlyphIDs = new int[componentCount];",
                "+",
                "+        componentGlyphIDs[0] = coverageGlyphId;",
                "+",
                "+        for (int i = 1; i <= componentCount - 1; i++)",
                "+        {",
                "+            componentGlyphIDs[i] = data.readUnsignedShort();",
                "+        }",
                "+",
                "+        return new LigatureTable(ligatureGlyph, componentCount, componentGlyphIDs);",
                "+",
                "+    }",
                "+",
                "+    private CoverageTable readCoverageTable(TTFDataStream data, long offset) throws IOException",
                "     {",
                "@@ -281,11 +411,9 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         {",
                "-            CoverageTableFormat1 coverageTable = new CoverageTableFormat1();",
                "-            coverageTable.coverageFormat = coverageFormat;",
                "             int glyphCount = data.readUnsignedShort();",
                "-            coverageTable.glyphArray = new int[glyphCount];",
                "+            int[] glyphArray = new int[glyphCount];",
                "             for (int i = 0; i < glyphCount; i++)",
                "             {",
                "-                coverageTable.glyphArray[i] = data.readUnsignedShort();",
                "+                glyphArray[i] = data.readUnsignedShort();",
                "             }",
                "-            return coverageTable;",
                "+            return new CoverageTableFormat1(coverageFormat, glyphArray);",
                "         }",
                "@@ -293,12 +421,12 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         {",
                "-            CoverageTableFormat2 coverageTable = new CoverageTableFormat2();",
                "-            coverageTable.coverageFormat = coverageFormat;",
                "             int rangeCount = data.readUnsignedShort();",
                "-            coverageTable.rangeRecords = new RangeRecord[rangeCount];",
                "+            RangeRecord[] rangeRecords = new RangeRecord[rangeCount];",
                "+",
                "+",
                "             for (int i = 0; i < rangeCount; i++)",
                "             {",
                "-                coverageTable.rangeRecords[i] = readRangeRecord(data);",
                "+                rangeRecords[i] = readRangeRecord(data);",
                "             }",
                "-            return coverageTable;",
                "+            return new CoverageTableFormat2(coverageFormat, rangeRecords);",
                "         }",
                "@@ -310,6 +438,5 @@ public class GlyphSubstitutionTable extends TTFTable",
                "-",
                "     /**",
                "-     * Choose from one of the supplied OpenType script tags, depending on what the font supports and",
                "-     * potentially on context.",
                "+     * Choose from one of the supplied OpenType script tags, depending on what the font supports and potentially on",
                "+     * context.",
                "      *",
                "@@ -356,5 +483,5 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         {",
                "-            if (scriptTable.defaultLangSysTable == null)",
                "+            if (scriptTable.getDefaultLangSysTable() == null)",
                "             {",
                "-                result = scriptTable.langSysTables.values();",
                "+                result = scriptTable.getLangSysTables().values();",
                "             }",
                "@@ -362,4 +489,4 @@ public class GlyphSubstitutionTable extends TTFTable",
                "             {",
                "-                result = new ArrayList<>(scriptTable.langSysTables.values());",
                "-                result.add(scriptTable.defaultLangSysTable);",
                "+                result = new ArrayList<>(scriptTable.getLangSysTables().values());",
                "+                result.add(scriptTable.getDefaultLangSysTable());",
                "             }",
                "@@ -392,13 +519,14 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         {",
                "-            int required = langSysTable.requiredFeatureIndex;",
                "+            int required = langSysTable.getRequiredFeatureIndex();",
                "             if (required != 0xffff) // if no required features = 0xFFFF",
                "             {",
                "-                result.add(featureList[required]);",
                "+                result.add(featureListTable.getFeatureRecords()[required]);",
                "             }",
                "-            for (int featureIndex : langSysTable.featureIndices)",
                "+            for (int featureIndex : langSysTable.getFeatureIndices())",
                "             {",
                "                 if (enabledFeatures == null",
                "-                        || enabledFeatures.contains(featureList[featureIndex].featureTag))",
                "+                        || enabledFeatures.contains(",
                "+                                featureListTable.getFeatureRecords()[featureIndex].getFeatureTag()))",
                "                 {",
                "-                    result.add(featureList[featureIndex]);",
                "+                    result.add(featureListTable.getFeatureRecords()[featureIndex]);",
                "                 }",
                "@@ -421,4 +549,4 @@ public class GlyphSubstitutionTable extends TTFTable",
                "                 {",
                "-                    return Integer.compare(enabledFeatures.indexOf(o1.featureTag),",
                "-                            enabledFeatures.indexOf(o2.featureTag));",
                "+                    return Integer.compare(enabledFeatures.indexOf(o1.getFeatureTag()),",
                "+                            enabledFeatures.indexOf(o2.getFeatureTag()));",
                "                 }",
                "@@ -434,3 +562,3 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         {",
                "-            if (featureRecord.featureTag.equals(featureTag))",
                "+            if (featureRecord.getFeatureTag().equals(featureTag))",
                "             {",
                "@@ -447,3 +575,3 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         {",
                "-            if (iter.next().featureTag.equals(featureTag))",
                "+            if (iter.next().getFeatureTag().equals(featureTag))",
                "             {",
                "@@ -457,9 +585,10 @@ public class GlyphSubstitutionTable extends TTFTable",
                "         int lookupResult = gid;",
                "-        for (int lookupListIndex : featureRecord.featureTable.lookupListIndices)",
                "+        for (int lookupListIndex : featureRecord.getFeatureTable().getLookupListIndices())",
                "         {",
                "-            LookupTable lookupTable = lookupList[lookupListIndex];",
                "-            if (lookupTable.lookupType != 1)",
                "+            LookupTable lookupTable = lookupListTable.getLookups()[lookupListIndex];",
                "+            if (lookupTable.getLookupType() != 1)",
                "             {",
                "-                LOG.debug(\"Skipping GSUB feature '\" + featureRecord.featureTag",
                "-                        + \"' because it requires unsupported lookup table type \" + lookupTable.lookupType);",
                "+                LOG.debug(\"Skipping GSUB feature '\" + featureRecord.getFeatureTag()",
                "+                        + \"' because it requires unsupported lookup table type \"",
                "+                        + lookupTable.getLookupType());",
                "                 continue;",
                "@@ -473,5 +602,5 @@ public class GlyphSubstitutionTable extends TTFTable",
                "     {",
                "-        for (LookupSubTable lookupSubtable : lookupTable.subTables)",
                "+        for (LookupSubTable lookupSubtable : lookupTable.getSubTables())",
                "         {",
                "-            int coverageIndex = lookupSubtable.coverageTable.getCoverageIndex(gid);",
                "+            int coverageIndex = lookupSubtable.getCoverageTable().getCoverageIndex(gid);",
                "             if (coverageIndex >= 0)",
                "@@ -544,208 +673,15 @@ public class GlyphSubstitutionTable extends TTFTable",
                "-    RangeRecord readRangeRecord(TTFDataStream data) throws IOException",
                "-    {",
                "-        RangeRecord rangeRecord = new RangeRecord();",
                "-        rangeRecord.startGlyphID = data.readUnsignedShort();",
                "-        rangeRecord.endGlyphID = data.readUnsignedShort();",
                "-        rangeRecord.startCoverageIndex = data.readUnsignedShort();",
                "-        return rangeRecord;",
                "-    }",
                "-",
                "-    static class ScriptRecord",
                "-    {",
                "-        // https://www.microsoft.com/typography/otspec/scripttags.htm",
                "-        String scriptTag;",
                "-        ScriptTable scriptTable;",
                "-",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return String.format(\"ScriptRecord[scriptTag=%s]\", scriptTag);",
                "-        }",
                "-    }",
                "-",
                "-    static class ScriptTable",
                "+    public Map<String, Map<List<Integer>, Integer>> getRawGSubData()",
                "     {",
                "-        LangSysTable defaultLangSysTable;",
                "-        LinkedHashMap<String, LangSysTable> langSysTables;",
                "-",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return String.format(\"ScriptTable[hasDefault=%s,langSysRecordsCount=%d]\",",
                "-                    defaultLangSysTable != null, langSysTables.size());",
                "-        }",
                "+        return rawGSubData;",
                "     }",
                "-    static class LangSysRecord",
                "+    private RangeRecord readRangeRecord(TTFDataStream data) throws IOException",
                "     {",
                "-        // https://www.microsoft.com/typography/otspec/languagetags.htm",
                "-        String langSysTag;",
                "-        LangSysTable langSysTable;",
                "-",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return String.format(\"LangSysRecord[langSysTag=%s]\", langSysTag);",
                "-        }",
                "+        int startGlyphID = data.readUnsignedShort();",
                "+        int endGlyphID = data.readUnsignedShort();",
                "+        int startCoverageIndex = data.readUnsignedShort();",
                "+        return new RangeRecord(startGlyphID, endGlyphID, startCoverageIndex);",
                "     }",
                "-    static class LangSysTable",
                "-    {",
                "-        int requiredFeatureIndex;",
                "-        int[] featureIndices;",
                "-",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return String.format(\"LangSysTable[requiredFeatureIndex=%d]\", requiredFeatureIndex);",
                "-        }",
                "-    }",
                "-",
                "-    static class FeatureRecord",
                "-    {",
                "-        String featureTag;",
                "-        FeatureTable featureTable;",
                "-",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return String.format(\"FeatureRecord[featureTag=%s]\", featureTag);",
                "-        }",
                "-    }",
                "-",
                "-    static class FeatureTable",
                "-    {",
                "-        int[] lookupListIndices;",
                "-",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return String.format(\"FeatureTable[lookupListIndiciesCount=%d]\",",
                "-                    lookupListIndices.length);",
                "-        }",
                "-    }",
                "-",
                "-    static class LookupTable",
                "-    {",
                "-        int lookupType;",
                "-        int lookupFlag;",
                "-        int markFilteringSet;",
                "-        LookupSubTable[] subTables;",
                "-",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return String.format(\"LookupTable[lookupType=%d,lookupFlag=%d,markFilteringSet=%d]\",",
                "-                    lookupType, lookupFlag, markFilteringSet);",
                "-        }",
                "-    }",
                "-",
                "-    static abstract class LookupSubTable",
                "-    {",
                "-        int substFormat;",
                "-        CoverageTable coverageTable;",
                "-",
                "-        abstract int doSubstitution(int gid, int coverageIndex);",
                "-    }",
                "-",
                "-    static class LookupTypeSingleSubstFormat1 extends LookupSubTable",
                "-    {",
                "-        short deltaGlyphID;",
                "-",
                "-        @Override",
                "-        int doSubstitution(int gid, int coverageIndex)",
                "-        {",
                "-            return coverageIndex < 0 ? gid : gid + deltaGlyphID;",
                "-        }",
                "-",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return String.format(\"LookupTypeSingleSubstFormat1[substFormat=%d,deltaGlyphID=%d]\",",
                "-                    substFormat, deltaGlyphID);",
                "-        }",
                "-    }",
                "-",
                "-    static class LookupTypeSingleSubstFormat2 extends LookupSubTable",
                "-    {",
                "-        int[] substituteGlyphIDs;",
                "-",
                "-        @Override",
                "-        int doSubstitution(int gid, int coverageIndex)",
                "-        {",
                "-            return coverageIndex < 0 ? gid : substituteGlyphIDs[coverageIndex];",
                "-        }",
                "-",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return String.format(",
                "-                    \"LookupTypeSingleSubstFormat2[substFormat=%d,substituteGlyphIDs=%s]\",",
                "-                    substFormat, Arrays.toString(substituteGlyphIDs));",
                "-        }",
                "-    }",
                "-",
                "-    static abstract class CoverageTable",
                "-    {",
                "-        int coverageFormat;",
                "-",
                "-        abstract int getCoverageIndex(int gid);",
                "-    }",
                "-",
                "-    static class CoverageTableFormat1 extends CoverageTable",
                "-    {",
                "-        int[] glyphArray;",
                "-",
                "-        @Override",
                "-        int getCoverageIndex(int gid)",
                "-        {",
                "-            return Arrays.binarySearch(glyphArray, gid);",
                "-        }",
                "-",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return String.format(\"CoverageTableFormat1[coverageFormat=%d,glyphArray=%s]\",",
                "-                    coverageFormat, Arrays.toString(glyphArray));",
                "-        }",
                "-    }",
                "-",
                "-    static class CoverageTableFormat2 extends CoverageTable",
                "-    {",
                "-        RangeRecord[] rangeRecords;",
                "-",
                "-        @Override",
                "-        int getCoverageIndex(int gid)",
                "-        {",
                "-            for (RangeRecord rangeRecord : rangeRecords)",
                "-            {",
                "-                if (rangeRecord.startGlyphID <= gid && gid <= rangeRecord.endGlyphID)",
                "-                {",
                "-                    return rangeRecord.startCoverageIndex + gid - rangeRecord.startGlyphID;",
                "-                }",
                "-            }",
                "-            return -1;",
                "-        }",
                "-",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return String.format(\"CoverageTableFormat2[coverageFormat=%d]\", coverageFormat);",
                "-        }",
                "-    }",
                "-",
                "-    static class RangeRecord",
                "-    {",
                "-        int startGlyphID;",
                "-        int endGlyphID;",
                "-        int startCoverageIndex;",
                "-",
                "-        @Override",
                "-        public String toString()",
                "-        {",
                "-            return String.format(\"RangeRecord[startGlyphID=%d,endGlyphID=%d,startCoverageIndex=%d]\",",
                "-                    startGlyphID, endGlyphID, startCoverageIndex);",
                "-        }",
                "-    }",
                " }",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java b/fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java",
                "index 7731b3342..1e7b4880a 100755",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java",
                "@@ -1130,2 +1130,8 @@ public final class TTFSubsetter",
                "     }",
                "+",
                "+    public void addGlyphIds(Set<Integer> allGlyphIds)",
                "+    {",
                "+        glyphIds.addAll(allGlyphIds);",
                "+    }",
                "+",
                " }",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java b/fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java",
                "index 3867ede86..8edcc6188 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java",
                "@@ -567,3 +567,3 @@ public class TrueTypeFont implements FontBoxFont, Closeable",
                "             {",
                "-                return new SubstitutingCmapLookup(cmap, (GlyphSubstitutionTable) table,",
                "+                return new SubstitutingCmapLookup(cmap, table,",
                "                         Collections.unmodifiableList(enabledGsubFeatures));",
                "@@ -656,2 +656,13 @@ public class TrueTypeFont implements FontBoxFont, Closeable",
                "+    public Map<String, Map<List<Integer>, Integer>> getGlyphSubstitutionMap() throws IOException",
                "+    {",
                "+        GlyphSubstitutionTable table = getGsub();",
                "+        if (table == null)",
                "+        {",
                "+            return Collections.emptyMap();",
                "+        }",
                "+",
                "+        return table.getRawGSubData();",
                "+    }",
                "+",
                "     /**",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/CompoundCharacterTokenizer.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/CompoundCharacterTokenizer.java",
                "new file mode 100644",
                "index 000000000..e24828d1b",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/CompoundCharacterTokenizer.java",
                "@@ -0,0 +1,102 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.gsub;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import java.util.Set;",
                "+import java.util.regex.Matcher;",
                "+import java.util.regex.Pattern;",
                "+",
                "+/**",
                "+ * Takes in the given text having compound-glyphs to substitute, and splits it into chunks consisting of parts that",
                "+ * should be substituted and the ones that can be processed normally.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ * ",
                "+ */",
                "+public class CompoundCharacterTokenizer",
                "+{",
                "+",
                "+    private final Pattern regexExpression;",
                "+",
                "+    public CompoundCharacterTokenizer(Set<String> compoundWords)",
                "+    {",
                "+        regexExpression = Pattern.compile(getRegexFromTokens(compoundWords));",
                "+    }",
                "+",
                "+    public CompoundCharacterTokenizer(String singleRegex)",
                "+    {",
                "+        regexExpression = Pattern.compile(singleRegex);",
                "+    }",
                "+",
                "+    public List<String> tokenize(String text)",
                "+    {",
                "+        List<String> tokens = new ArrayList<String>();",
                "+",
                "+        Matcher regexMatcher = regexExpression.matcher(text);",
                "+",
                "+        int lastIndexOfPrevMatch = 0;",
                "+",
                "+        while (regexMatcher.find())",
                "+        {",
                "+",
                "+            int beginIndexOfNextMatch = regexMatcher.start();",
                "+",
                "+            String prevToken = text.substring(lastIndexOfPrevMatch, beginIndexOfNextMatch);",
                "+",
                "+            if (prevToken.length() > 0)",
                "+            {",
                "+                tokens.add(prevToken);",
                "+            }",
                "+",
                "+            String currentMatch = regexMatcher.group();",
                "+",
                "+            tokens.add(currentMatch);",
                "+",
                "+            lastIndexOfPrevMatch = regexMatcher.end();",
                "+",
                "+        }",
                "+",
                "+        String tail = text.substring(lastIndexOfPrevMatch, text.length());",
                "+",
                "+        if (tail.length() > 0)",
                "+        {",
                "+            tokens.add(tail);",
                "+        }",
                "+",
                "+        return tokens;",
                "+    }",
                "+",
                "+    private String getRegexFromTokens(Set<String> compoundWords)",
                "+    {",
                "+        StringBuilder sb = new StringBuilder();",
                "+",
                "+        for (String compoundWord : compoundWords)",
                "+        {",
                "+            sb.append(\"(\");",
                "+            sb.append(compoundWord);",
                "+            sb.append(\")|\");",
                "+        }",
                "+",
                "+        sb.setLength(sb.length() - 1);",
                "+",
                "+        return sb.toString();",
                "+    }",
                "+",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphArraySplitter.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphArraySplitter.java",
                "new file mode 100644",
                "index 000000000..fcb91afa2",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphArraySplitter.java",
                "@@ -0,0 +1,33 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.gsub;",
                "+",
                "+import java.util.List;",
                "+",
                "+/**",
                "+ * This class splits an array of GlyphIds with a prospective match.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public interface GlyphArraySplitter",
                "+{",
                "+",
                "+    List<List<Integer>> split(List<Integer> glyphIds);",
                "+",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphArraySplitterRegexImpl.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphArraySplitterRegexImpl.java",
                "new file mode 100644",
                "index 000000000..8cf324fb0",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphArraySplitterRegexImpl.java",
                "@@ -0,0 +1,95 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.gsub;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.HashSet;",
                "+import java.util.List;",
                "+import java.util.Set;",
                "+",
                "+/**",
                "+ * This is an in-efficient implementation based on regex, which helps split the array.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class GlyphArraySplitterRegexImpl implements GlyphArraySplitter",
                "+{",
                "+    private static final String GLYPH_ID_SEPARATOR = \"_\";",
                "+",
                "+    private final CompoundCharacterTokenizer compoundCharacterTokenizer;",
                "+",
                "+    public GlyphArraySplitterRegexImpl(Set<List<Integer>> matchers)",
                "+    {",
                "+        compoundCharacterTokenizer = new CompoundCharacterTokenizer(getMatchersAsStrings(matchers));",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<List<Integer>> split(List<Integer> glyphIds)",
                "+    {",
                "+        String originalGlyphsAsText = convertGlyphIdsToString(glyphIds);",
                "+        List<String> tokens = compoundCharacterTokenizer.tokenize(originalGlyphsAsText);",
                "+",
                "+        List<List<Integer>> modifiedGlyphs = new ArrayList<>();",
                "+",
                "+        for (String token : tokens)",
                "+        {",
                "+            modifiedGlyphs.add(convertGlyphIdsToList(token));",
                "+        }",
                "+",
                "+        return modifiedGlyphs;",
                "+    }",
                "+",
                "+    private Set<String> getMatchersAsStrings(Set<List<Integer>> matchers)",
                "+    {",
                "+        Set<String> stringMatchers = new HashSet<>(matchers.size());",
                "+        for (List<Integer> glyphIds : matchers)",
                "+        {",
                "+            stringMatchers.add(convertGlyphIdsToString(glyphIds));",
                "+        }",
                "+        return stringMatchers;",
                "+    }",
                "+",
                "+    private String convertGlyphIdsToString(List<Integer> glyphIds)",
                "+    {",
                "+        StringBuilder sb = new StringBuilder(20);",
                "+        sb.append(GLYPH_ID_SEPARATOR);",
                "+        for (Integer glyphId : glyphIds)",
                "+        {",
                "+            sb.append(glyphId).append(GLYPH_ID_SEPARATOR);",
                "+        }",
                "+        return sb.toString();",
                "+    }",
                "+",
                "+    private List<Integer> convertGlyphIdsToList(String glyphIdsAsString)",
                "+    {",
                "+        List<Integer> gsubProcessedGlyphsIds = new ArrayList<>();",
                "+",
                "+        for (String glyphId : glyphIdsAsString.split(GLYPH_ID_SEPARATOR))",
                "+        {",
                "+            if (glyphId.trim().length() == 0)",
                "+            {",
                "+                continue;",
                "+            }",
                "+            gsubProcessedGlyphsIds.add(Integer.valueOf(glyphId));",
                "+        }",
                "+",
                "+        return gsubProcessedGlyphsIds;",
                "+    }",
                "+",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java",
                "new file mode 100644",
                "index 000000000..7fb2c0eea",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java",
                "@@ -0,0 +1,235 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.gsub;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.Collections;",
                "+import java.util.LinkedHashMap;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                "+import org.apache.commons.logging.Log;",
                "+import org.apache.commons.logging.LogFactory;",
                "+import org.apache.fontbox.ttf.table.common.CoverageTable;",
                "+import org.apache.fontbox.ttf.table.common.FeatureListTable;",
                "+import org.apache.fontbox.ttf.table.common.FeatureRecord;",
                "+import org.apache.fontbox.ttf.table.common.LangSysTable;",
                "+import org.apache.fontbox.ttf.table.common.LookupListTable;",
                "+import org.apache.fontbox.ttf.table.common.LookupSubTable;",
                "+import org.apache.fontbox.ttf.table.common.LookupTable;",
                "+import org.apache.fontbox.ttf.table.common.ScriptTable;",
                "+import org.apache.fontbox.ttf.table.gsub.LigatureSetTable;",
                "+import org.apache.fontbox.ttf.table.gsub.LigatureTable;",
                "+import org.apache.fontbox.ttf.table.gsub.LookupTypeLigatureSubstitutionSubstFormat1;",
                "+import org.apache.fontbox.ttf.table.gsub.LookupTypeSingleSubstFormat1;",
                "+import org.apache.fontbox.ttf.table.gsub.LookupTypeSingleSubstFormat2;",
                "+",
                "+/**",
                "+ * This class has utility methods to extract meaningful data from the highly obfuscated GSUB Tables. This data is then",
                "+ * used to determine which combination of Glyphs or words have to be replaced.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ * ",
                "+ */",
                "+public class GlyphSubstitutionDataExtractor",
                "+{",
                "+",
                "+    private static final Log LOG = LogFactory.getLog(GlyphSubstitutionDataExtractor.class);",
                "+",
                "+    private static final String[] SUPPORTED_LANGUAGES = { \"bng2\", \"beng\" };",
                "+",
                "+    public Map<String, Map<List<Integer>, Integer>> getGsubData(Map<String, ScriptTable> scriptList,",
                "+            FeatureListTable featureListTable, LookupListTable lookupListTable)",
                "+    {",
                "+",
                "+        ScriptTable scriptTable = getSupportedLanguage(scriptList);",
                "+",
                "+        if (scriptTable == null)",
                "+        {",
                "+            return Collections.emptyMap();",
                "+        }",
                "+",
                "+        Map<String, Map<List<Integer>, Integer>> gsubData = new LinkedHashMap<>();",
                "+        // the starting point is really the scriptTags",
                "+        if (scriptTable.getDefaultLangSysTable() != null)",
                "+        {",
                "+            populateGsubData(gsubData, scriptTable.getDefaultLangSysTable(), featureListTable,",
                "+                    lookupListTable);",
                "+        }",
                "+        for (LangSysTable langSysTable : scriptTable.getLangSysTables().values())",
                "+        {",
                "+            populateGsubData(gsubData, langSysTable, featureListTable, lookupListTable);",
                "+        }",
                "+        return Collections.unmodifiableMap(gsubData);",
                "+    }",
                "+",
                "+    private ScriptTable getSupportedLanguage(Map<String, ScriptTable> scriptList)",
                "+    {",
                "+        for (String supportedLanguage : SUPPORTED_LANGUAGES)",
                "+        {",
                "+            if (scriptList.containsKey(supportedLanguage))",
                "+            {",
                "+                return scriptList.get(supportedLanguage);",
                "+            }",
                "+        }",
                "+        return null;",
                "+    }",
                "+",
                "+    private void populateGsubData(Map<String, Map<List<Integer>, Integer>> gsubData,",
                "+            LangSysTable langSysTable, FeatureListTable featureListTable,",
                "+            LookupListTable lookupListTable)",
                "+    {",
                "+        for (int featureIndex : langSysTable.getFeatureIndices())",
                "+        {",
                "+            FeatureRecord featureRecord = featureListTable.getFeatureRecords()[featureIndex];",
                "+            populateGsubData(gsubData, featureRecord, lookupListTable);",
                "+        }",
                "+    }",
                "+",
                "+    private void populateGsubData(Map<String, Map<List<Integer>, Integer>> gsubData,",
                "+            FeatureRecord featureRecord, LookupListTable lookupListTable)",
                "+    {",
                "+",
                "+        LOG.debug(\"*********** extracting GSUB data for the feature: \"",
                "+                + featureRecord.getFeatureTag());",
                "+",
                "+        Map<List<Integer>, Integer> glyphSubstitutionMap = new LinkedHashMap<>();",
                "+        for (int lookupIndex : featureRecord.getFeatureTable().getLookupListIndices())",
                "+        {",
                "+            LookupTable lookupTable = lookupListTable.getLookups()[lookupIndex];",
                "+            extractData(glyphSubstitutionMap, lookupTable);",
                "+        }",
                "+        gsubData.put(featureRecord.getFeatureTag(),",
                "+                Collections.unmodifiableMap(glyphSubstitutionMap));",
                "+    }",
                "+",
                "+    private void extractData(Map<List<Integer>, Integer> glyphSubstitutionMap,",
                "+            LookupTable lookupTable)",
                "+    {",
                "+",
                "+        for (LookupSubTable lookupSubTable : lookupTable.getSubTables())",
                "+        {",
                "+            if (lookupSubTable instanceof LookupTypeLigatureSubstitutionSubstFormat1)",
                "+            {",
                "+                extractDataFromLigatureSubstitutionSubstFormat1Table(glyphSubstitutionMap,",
                "+                        (LookupTypeLigatureSubstitutionSubstFormat1) lookupSubTable);",
                "+            }",
                "+            else if (lookupSubTable instanceof LookupTypeSingleSubstFormat1)",
                "+            {",
                "+                extractDataFromSingleSubstTableFormat1Table(glyphSubstitutionMap,",
                "+                        (LookupTypeSingleSubstFormat1) lookupSubTable);",
                "+            }",
                "+            else if (lookupSubTable instanceof LookupTypeSingleSubstFormat2)",
                "+            {",
                "+                extractDataFromSingleSubstTableFormat2Table(glyphSubstitutionMap,",
                "+                        (LookupTypeSingleSubstFormat2) lookupSubTable);",
                "+            }",
                "+            else",
                "+            {",
                "+                LOG.warn(\"The type \" + lookupSubTable + \" is not yet supported, will be ignored\");",
                "+            }",
                "+        }",
                "+",
                "+    }",
                "+",
                "+    private void extractDataFromSingleSubstTableFormat1Table(",
                "+            Map<List<Integer>, Integer> glyphSubstitutionMap,",
                "+            LookupTypeSingleSubstFormat1 singleSubstTableFormat1)",
                "+    {",
                "+        CoverageTable coverageTable = singleSubstTableFormat1.getCoverageTable();",
                "+        for (int i = 0; i < coverageTable.getSize(); i++)",
                "+        {",
                "+            int coverageGlyphId = coverageTable.getGlyphId(i);",
                "+            int substituteGlyphId = coverageGlyphId + singleSubstTableFormat1.getDeltaGlyphID();",
                "+            putNewSubstitutionEntry(glyphSubstitutionMap, substituteGlyphId,",
                "+                    Arrays.asList(coverageGlyphId));",
                "+        }",
                "+    }",
                "+",
                "+    private void extractDataFromSingleSubstTableFormat2Table(",
                "+            Map<List<Integer>, Integer> glyphSubstitutionMap,",
                "+            LookupTypeSingleSubstFormat2 singleSubstTableFormat2)",
                "+    {",
                "+",
                "+        CoverageTable coverageTable = singleSubstTableFormat2.getCoverageTable();",
                "+",
                "+        if (coverageTable.getSize() != singleSubstTableFormat2.getSubstituteGlyphIDs().length)",
                "+        {",
                "+            throw new IllegalArgumentException(",
                "+                    \"The no. coverage table entries should be the same as the size of the substituteGlyphIDs\");",
                "+        }",
                "+",
                "+        for (int i = 0; i < coverageTable.getSize(); i++)",
                "+        {",
                "+            int coverageGlyphId = coverageTable.getGlyphId(i);",
                "+            int substituteGlyphId = coverageGlyphId",
                "+                    + singleSubstTableFormat2.getSubstituteGlyphIDs()[i];",
                "+            putNewSubstitutionEntry(glyphSubstitutionMap, substituteGlyphId,",
                "+                    Arrays.asList(coverageGlyphId));",
                "+        }",
                "+    }",
                "+",
                "+    private void extractDataFromLigatureSubstitutionSubstFormat1Table(",
                "+            Map<List<Integer>, Integer> glyphSubstitutionMap,",
                "+            LookupTypeLigatureSubstitutionSubstFormat1 ligatureSubstitutionTable)",
                "+    {",
                "+",
                "+        for (LigatureSetTable ligatureSetTable : ligatureSubstitutionTable.getLigatureSetTables())",
                "+        {",
                "+            for (LigatureTable ligatureTable : ligatureSetTable.getLigatureTables())",
                "+            {",
                "+                extractDataFromLigatureTable(glyphSubstitutionMap, ligatureTable);",
                "+            }",
                "+",
                "+        }",
                "+",
                "+    }",
                "+",
                "+    private void extractDataFromLigatureTable(Map<List<Integer>, Integer> glyphSubstitutionMap,",
                "+            LigatureTable ligatureTable)",
                "+    {",
                "+",
                "+        List<Integer> glyphsToBeSubstituted = new ArrayList<>();",
                "+",
                "+        for (int componentGlyphID : ligatureTable.getComponentGlyphIDs())",
                "+        {",
                "+            glyphsToBeSubstituted.add(componentGlyphID);",
                "+        }",
                "+",
                "+        LOG.debug(\"glyphsToBeSubstituted: \" + glyphsToBeSubstituted);",
                "+",
                "+        putNewSubstitutionEntry(glyphSubstitutionMap, ligatureTable.getLigatureGlyph(),",
                "+                glyphsToBeSubstituted);",
                "+",
                "+    }",
                "+",
                "+    private void putNewSubstitutionEntry(Map<List<Integer>, Integer> glyphSubstitutionMap,",
                "+            int newGlyph, List<Integer> glyphsToBeSubstituted)",
                "+    {",
                "+        Integer oldValue = glyphSubstitutionMap.put(glyphsToBeSubstituted, newGlyph);",
                "+",
                "+        if (oldValue != null)",
                "+        {",
                "+            String message = \"For the newGlyph: \" + newGlyph + \", newValue: \"",
                "+                    + glyphsToBeSubstituted + \" is trying to override the oldValue: \" + oldValue;",
                "+            LOG.warn(message);",
                "+        }",
                "+    }",
                "+",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorker.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorker.java",
                "new file mode 100644",
                "index 000000000..8e3287ed7",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorker.java",
                "@@ -0,0 +1,35 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.gsub;",
                "+",
                "+import java.util.List;",
                "+",
                "+/**",
                "+ * This class is responsible for replacing GlyphIDs with new ones according to the GSUB tables. Each language should",
                "+ * have an implementation of this.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ * ",
                "+ */",
                "+public interface GsubWorker",
                "+{",
                "+    List<Integer> substituteGlyphs(List<Integer> originalGlyphIds);",
                "+",
                "+    List<Integer> repositionGlyphs(List<Integer> originalGlyphIds);",
                "+",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java",
                "new file mode 100644",
                "index 000000000..d44ba3a50",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java",
                "@@ -0,0 +1,148 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.gsub;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.Collections;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+",
                "+import org.apache.commons.logging.Log;",
                "+import org.apache.commons.logging.LogFactory;",
                "+import org.apache.fontbox.ttf.CmapLookup;",
                "+",
                "+/**",
                "+ * ",
                "+ * Bengali-specific implementation of GSUB system",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class GsubWorkerForBengali implements GsubWorker",
                "+{",
                "+",
                "+    private static final Log LOG = LogFactory.getLog(GsubWorkerForBengali.class);",
                "+",
                "+    /**",
                "+     * This sequence is very important. This has been taken from <a href=",
                "+     * \"https://docs.microsoft.com/en-us/typography/script-development/bengali\">https://docs.microsoft.com/en-us/typography/script-development/bengali</a>",
                "+     */",
                "+    private static final List<String> FEATURES_IN_ORDER = Arrays.asList(\"locl\", \"nukt\", \"akhn\",",
                "+            \"rphf\", \"blwf\", \"half\", \"pstf\", \"vatu\", \"cjct\", \"init\", \"pres\", \"abvs\", \"blws\", \"psts\",",
                "+            \"haln\", \"calt\");",
                "+",
                "+    private static final char[] BEFORE_HALF_CHARS = new char[] { '\\u09BF', '\\u09C7', '\\u09C8' };",
                "+",
                "+    private final Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap;",
                "+",
                "+    private final List<Integer> beforeHalfGlyphIds;",
                "+",
                "+    public GsubWorkerForBengali(CmapLookup cmapLookup,",
                "+            Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap)",
                "+    {",
                "+        this.glyphSubstitutionMap = glyphSubstitutionMap;",
                "+        beforeHalfGlyphIds = getBeforeHalfGlyphIds(cmapLookup);",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<Integer> substituteGlyphs(List<Integer> originalGlyphIds)",
                "+    {",
                "+        List<Integer> intermediateGlyphsFromGsub = originalGlyphIds;",
                "+",
                "+        for (String feature : FEATURES_IN_ORDER)",
                "+        {",
                "+            if (!glyphSubstitutionMap.containsKey(feature))",
                "+            {",
                "+                LOG.debug(\"the feature \" + feature + \" was not found\");",
                "+                continue;",
                "+            }",
                "+",
                "+            LOG.debug(\"applying the feature \" + feature);",
                "+",
                "+            Map<List<Integer>, Integer> featureMap = glyphSubstitutionMap.get(feature);",
                "+",
                "+            intermediateGlyphsFromGsub = applyGsubFeature(featureMap, intermediateGlyphsFromGsub);",
                "+        }",
                "+",
                "+        return intermediateGlyphsFromGsub;",
                "+    }",
                "+",
                "+    @Override",
                "+    public List<Integer> repositionGlyphs(List<Integer> originalGlyphIds)",
                "+    {",
                "+        List<Integer> repositionedGlyphIds = new ArrayList<>(originalGlyphIds);",
                "+",
                "+        for (int index = 1; index < originalGlyphIds.size(); index++)",
                "+        {",
                "+            int glyphId = originalGlyphIds.get(index);",
                "+            if (beforeHalfGlyphIds.contains(glyphId))",
                "+            {",
                "+                int previousGlyphId = originalGlyphIds.get(index - 1);",
                "+                repositionedGlyphIds.set(index, previousGlyphId);",
                "+                repositionedGlyphIds.set(index - 1, glyphId);",
                "+            }",
                "+        }",
                "+        return repositionedGlyphIds;",
                "+    }",
                "+",
                "+    private List<Integer> applyGsubFeature(Map<List<Integer>, Integer> featureMap,",
                "+            List<Integer> originalGlyphs)",
                "+    {",
                "+",
                "+        GlyphArraySplitter glyphArraySplitter = new GlyphArraySplitterRegexImpl(",
                "+                featureMap.keySet());",
                "+",
                "+        List<List<Integer>> tokens = glyphArraySplitter.split(originalGlyphs);",
                "+",
                "+        List<Integer> gsubProcessedGlyphs = new ArrayList<>();",
                "+",
                "+        for (List<Integer> chunk : tokens)",
                "+        {",
                "+            if (featureMap.containsKey(chunk))",
                "+            {",
                "+                // gsub system kicks in, you get the glyphId directly",
                "+                int glyphId = featureMap.get(chunk);",
                "+                gsubProcessedGlyphs.add(glyphId);",
                "+            }",
                "+            else",
                "+            {",
                "+                gsubProcessedGlyphs.addAll(chunk);",
                "+            }",
                "+        }",
                "+",
                "+        LOG.debug(\"originalGlyphs: \" + originalGlyphs + \", gsubProcessedGlyphs: \"",
                "+                + gsubProcessedGlyphs);",
                "+",
                "+        return gsubProcessedGlyphs;",
                "+    }",
                "+",
                "+    private static List<Integer> getBeforeHalfGlyphIds(CmapLookup cmapLookup)",
                "+    {",
                "+        List<Integer> beforeHalfGlyphIds = new ArrayList<>();",
                "+",
                "+        for (char beforeHalfChar : BEFORE_HALF_CHARS)",
                "+        {",
                "+            beforeHalfGlyphIds.add(cmapLookup.getGlyphId(beforeHalfChar));",
                "+        }",
                "+",
                "+        return Collections.unmodifiableList(beforeHalfGlyphIds);",
                "+",
                "+    }",
                "+",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/package.html b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/package.html",
                "new file mode 100644",
                "index 000000000..a3349107e",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/package.html",
                "@@ -0,0 +1,25 @@",
                "+<!--",
                "+ ! Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ ! contributor license agreements.  See the NOTICE file distributed with",
                "+ ! this work for additional information regarding copyright ownership.",
                "+ ! The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ ! (the \"License\"); you may not use this file except in compliance with",
                "+ ! the License.  You may obtain a copy of the License at",
                "+ !",
                "+ !      http://www.apache.org/licenses/LICENSE-2.0",
                "+ !",
                "+ ! Unless required by applicable law or agreed to in writing, software",
                "+ ! distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ ! See the License for the specific language governing permissions and",
                "+ ! limitations under the License.",
                "+ !-->",
                "+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">",
                "+<html>",
                "+<head>",
                "+",
                "+</head>",
                "+<body>",
                "+This package contains utility classes which extract meanigful data from the highly obfuscated <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub\">GSUB table structures</a>.",
                "+</body>",
                "+</html>",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/CoverageTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/CoverageTable.java",
                "new file mode 100644",
                "index 000000000..8dcb5a271",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/CoverageTable.java",
                "@@ -0,0 +1,48 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+/**",
                "+ * This class models the",
                "+ * <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table\">Coverage Table</a> in the",
                "+ * Open Type layout common tables.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public abstract class CoverageTable",
                "+{",
                "+    private final int coverageFormat;",
                "+",
                "+    public CoverageTable(int coverageFormat)",
                "+    {",
                "+        this.coverageFormat = coverageFormat;",
                "+    }",
                "+",
                "+    public abstract int getCoverageIndex(int gid);",
                "+",
                "+    public abstract int getGlyphId(int index);",
                "+",
                "+    public abstract int getSize();",
                "+",
                "+    public int getCoverageFormat()",
                "+    {",
                "+        return coverageFormat;",
                "+    }",
                "+",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/CoverageTableFormat1.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/CoverageTableFormat1.java",
                "new file mode 100644",
                "index 000000000..7d3888403",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/CoverageTableFormat1.java",
                "@@ -0,0 +1,72 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+import java.util.Arrays;",
                "+",
                "+/**",
                "+ * This class models the",
                "+ * <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-format-1\">Coverage format 1</a>",
                "+ * in the Open Type layout common tables.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class CoverageTableFormat1 extends CoverageTable",
                "+{",
                "+",
                "+    private final int[] glyphArray;",
                "+",
                "+    public CoverageTableFormat1(int coverageFormat, int[] glyphArray)",
                "+    {",
                "+        super(coverageFormat);",
                "+        this.glyphArray = glyphArray;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int getCoverageIndex(int gid)",
                "+    {",
                "+        return Arrays.binarySearch(glyphArray, gid);",
                "+    }",
                "+",
                "+    @Override",
                "+    public int getGlyphId(int index)",
                "+    {",
                "+        return glyphArray[index];",
                "+    }",
                "+",
                "+    @Override",
                "+    public int getSize()",
                "+    {",
                "+        return glyphArray.length;",
                "+    }",
                "+",
                "+    public int[] getGlyphArray()",
                "+    {",
                "+        return glyphArray;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"CoverageTableFormat1[coverageFormat=%d,glyphArray=%s]\",",
                "+                getCoverageFormat(), Arrays.toString(glyphArray));",
                "+    }",
                "+",
                "+",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/CoverageTableFormat2.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/CoverageTableFormat2.java",
                "new file mode 100644",
                "index 000000000..2f27b75af",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/CoverageTableFormat2.java",
                "@@ -0,0 +1,75 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+",
                "+/**",
                "+ * This class models the",
                "+ * <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-format-2\">Coverage format 2</a>",
                "+ * in the Open Type layout common tables.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class CoverageTableFormat2 extends CoverageTableFormat1",
                "+{",
                "+    private final RangeRecord[] rangeRecords;",
                "+",
                "+    public CoverageTableFormat2(int coverageFormat, RangeRecord[] rangeRecords)",
                "+    {",
                "+        super(coverageFormat, getRangeRecordsAsArray(rangeRecords));",
                "+        this.rangeRecords = rangeRecords;",
                "+    }",
                "+",
                "+    public RangeRecord[] getRangeRecords()",
                "+    {",
                "+        return rangeRecords;",
                "+    }",
                "+",
                "+    private static int[] getRangeRecordsAsArray(RangeRecord[] rangeRecords)",
                "+    {",
                "+",
                "+        List<Integer> glyphIds = new ArrayList<>();",
                "+",
                "+        for (int i = 0; i < rangeRecords.length; i++)",
                "+        {",
                "+            for (int glyphId = rangeRecords[i].getStartGlyphID(); glyphId <= rangeRecords[i]",
                "+                    .getEndGlyphID(); glyphId++)",
                "+            {",
                "+                glyphIds.add(glyphId);",
                "+            }",
                "+        }",
                "+",
                "+        int[] glyphArray = new int[glyphIds.size()];",
                "+",
                "+        for (int i = 0; i < glyphArray.length; i++)",
                "+        {",
                "+            glyphArray[i] = glyphIds.get(i);",
                "+        }",
                "+",
                "+        return glyphArray;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"CoverageTableFormat2[coverageFormat=%d]\", getCoverageFormat());",
                "+    }",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/FeatureListTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/FeatureListTable.java",
                "new file mode 100644",
                "index 000000000..0f05d8eea",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/FeatureListTable.java",
                "@@ -0,0 +1,56 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+/**",
                "+ * This class models the",
                "+ * <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#feature-list-table\">Feature List",
                "+ * table</a> in the Open Type layout common tables.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class FeatureListTable",
                "+{",
                "+    private final int featureCount;",
                "+    private final FeatureRecord[] featureRecords;",
                "+",
                "+    public FeatureListTable(int featureCount, FeatureRecord[] featureRecords)",
                "+    {",
                "+        this.featureCount = featureCount;",
                "+        this.featureRecords = featureRecords;",
                "+    }",
                "+",
                "+    public int getFeatureCount()",
                "+    {",
                "+        return featureCount;",
                "+    }",
                "+",
                "+    public FeatureRecord[] getFeatureRecords()",
                "+    {",
                "+        return featureRecords;",
                "+    }",
                "+",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"%s[featureCount=%d]\", FeatureListTable.class.getSimpleName(),",
                "+                featureCount);",
                "+    }",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/FeatureRecord.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/FeatureRecord.java",
                "new file mode 100644",
                "index 000000000..b6e9c609e",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/FeatureRecord.java",
                "@@ -0,0 +1,54 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+/**",
                "+ * This class models the",
                "+ * <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#features-and-lookups\">Features and",
                "+ * lookups</a> in the Open Type layout common tables.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class FeatureRecord",
                "+{",
                "+    private final String featureTag;",
                "+    private final FeatureTable featureTable;",
                "+",
                "+    public FeatureRecord(String featureTag, FeatureTable featureTable)",
                "+    {",
                "+        this.featureTag = featureTag;",
                "+        this.featureTable = featureTable;",
                "+    }",
                "+",
                "+    public String getFeatureTag()",
                "+    {",
                "+        return featureTag;",
                "+    }",
                "+",
                "+    public FeatureTable getFeatureTable()",
                "+    {",
                "+        return featureTable;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"FeatureRecord[featureTag=%s]\", featureTag);",
                "+    }",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/FeatureTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/FeatureTable.java",
                "new file mode 100644",
                "index 000000000..56101cd48",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/FeatureTable.java",
                "@@ -0,0 +1,61 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+/**",
                "+ * This class models the",
                "+ * <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#feature-table\">Feature table</a> in the",
                "+ * Open Type layout common tables.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class FeatureTable",
                "+{",
                "+    private final int featureParams;",
                "+    private final int lookupIndexCount;",
                "+    private final int[] lookupListIndices;",
                "+",
                "+    public FeatureTable(int featureParams, int lookupIndexCount, int[] lookupListIndices)",
                "+    {",
                "+        this.featureParams = featureParams;",
                "+        this.lookupIndexCount = lookupIndexCount;",
                "+        this.lookupListIndices = lookupListIndices;",
                "+    }",
                "+",
                "+    public int getFeatureParams()",
                "+    {",
                "+        return featureParams;",
                "+    }",
                "+",
                "+    public int getLookupIndexCount()",
                "+    {",
                "+        return lookupIndexCount;",
                "+    }",
                "+",
                "+    public int[] getLookupListIndices()",
                "+    {",
                "+        return lookupListIndices;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"FeatureTable[lookupListIndiciesCount=%d]\", lookupListIndices.length);",
                "+    }",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LangSysRecord.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LangSysRecord.java",
                "new file mode 100644",
                "index 000000000..04a5fdc32",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LangSysRecord.java",
                "@@ -0,0 +1,53 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+/**",
                "+ * This class models the <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/languagetags\">Language",
                "+ * system tags</a> in the Open Type Font specs.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class LangSysRecord",
                "+{",
                "+    private final String langSysTag;",
                "+    private final LangSysTable langSysTable;",
                "+",
                "+    public LangSysRecord(String langSysTag, LangSysTable langSysTable)",
                "+    {",
                "+        this.langSysTag = langSysTag;",
                "+        this.langSysTable = langSysTable;",
                "+    }",
                "+",
                "+    public String getLangSysTag()",
                "+    {",
                "+        return langSysTag;",
                "+    }",
                "+",
                "+    public LangSysTable getLangSysTable()",
                "+    {",
                "+        return langSysTable;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"LangSysRecord[langSysTag=%s]\", langSysTag);",
                "+    }",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LangSysTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LangSysTable.java",
                "new file mode 100644",
                "index 000000000..9cbe24572",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LangSysTable.java",
                "@@ -0,0 +1,68 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+/**",
                "+ * This class models the <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/languagetags\">Language",
                "+ * system tags</a> in the Open Type Font specs.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class LangSysTable",
                "+{",
                "+    private final int lookupOrder;",
                "+    private final int requiredFeatureIndex;",
                "+    private final int featureIndexCount;",
                "+    private final int[] featureIndices;",
                "+",
                "+    public LangSysTable(int lookupOrder, int requiredFeatureIndex, int featureIndexCount,",
                "+            int[] featureIndices)",
                "+    {",
                "+        this.lookupOrder = lookupOrder;",
                "+        this.requiredFeatureIndex = requiredFeatureIndex;",
                "+        this.featureIndexCount = featureIndexCount;",
                "+        this.featureIndices = featureIndices;",
                "+    }",
                "+",
                "+    public int getLookupOrder()",
                "+    {",
                "+        return lookupOrder;",
                "+    }",
                "+",
                "+    public int getRequiredFeatureIndex()",
                "+    {",
                "+        return requiredFeatureIndex;",
                "+    }",
                "+",
                "+    public int getFeatureIndexCount()",
                "+    {",
                "+        return featureIndexCount;",
                "+    }",
                "+",
                "+    public int[] getFeatureIndices()",
                "+    {",
                "+        return featureIndices;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"LangSysTable[requiredFeatureIndex=%d]\", requiredFeatureIndex);",
                "+    }",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LookupListTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LookupListTable.java",
                "new file mode 100644",
                "index 000000000..5a07b4cd4",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LookupListTable.java",
                "@@ -0,0 +1,55 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+/**",
                "+ * This class models the",
                "+ * <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#lookup-list-table\">Lookup List Table</a>",
                "+ * in the Open Type layout common tables.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class LookupListTable",
                "+{",
                "+    private final int lookupCount;",
                "+    private final LookupTable[] lookups;",
                "+",
                "+    public LookupListTable(int lookupCount, LookupTable[] lookups)",
                "+    {",
                "+        this.lookupCount = lookupCount;",
                "+        this.lookups = lookups;",
                "+    }",
                "+",
                "+    public int getLookupCount()",
                "+    {",
                "+        return lookupCount;",
                "+    }",
                "+",
                "+    public LookupTable[] getLookups()",
                "+    {",
                "+        return lookups;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"%s[lookupCount=%d]\", LookupListTable.class.getSimpleName(),",
                "+                lookupCount);",
                "+    }",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LookupSubTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LookupSubTable.java",
                "new file mode 100644",
                "index 000000000..3d090fe04",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LookupSubTable.java",
                "@@ -0,0 +1,50 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+/**",
                "+ * This class models the",
                "+ * <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#lookup-table\">Lookup Sub-Table</a> in the",
                "+ * Open Type layout common tables.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public abstract class LookupSubTable",
                "+{",
                "+    private final int substFormat;",
                "+    private final CoverageTable coverageTable;",
                "+",
                "+    public LookupSubTable(int substFormat, CoverageTable coverageTable)",
                "+    {",
                "+        this.substFormat = substFormat;",
                "+        this.coverageTable = coverageTable;",
                "+    }",
                "+",
                "+    public abstract int doSubstitution(int gid, int coverageIndex);",
                "+",
                "+    public int getSubstFormat()",
                "+    {",
                "+        return substFormat;",
                "+    }",
                "+",
                "+    public CoverageTable getCoverageTable()",
                "+    {",
                "+        return coverageTable;",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LookupTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LookupTable.java",
                "new file mode 100644",
                "index 000000000..1f7dc29ef",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LookupTable.java",
                "@@ -0,0 +1,70 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+/**",
                "+ * This class models the",
                "+ * <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#lookup-table\">Lookup Table</a> in the",
                "+ * Open Type layout common tables.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class LookupTable",
                "+{",
                "+    private final int lookupType;",
                "+    private final int lookupFlag;",
                "+    private final int markFilteringSet;",
                "+    private final LookupSubTable[] subTables;",
                "+",
                "+    public LookupTable(int lookupType, int lookupFlag, int markFilteringSet,",
                "+            LookupSubTable[] subTables)",
                "+    {",
                "+        this.lookupType = lookupType;",
                "+        this.lookupFlag = lookupFlag;",
                "+        this.markFilteringSet = markFilteringSet;",
                "+        this.subTables = subTables;",
                "+    }",
                "+",
                "+    public int getLookupType()",
                "+    {",
                "+        return lookupType;",
                "+    }",
                "+",
                "+    public int getLookupFlag()",
                "+    {",
                "+        return lookupFlag;",
                "+    }",
                "+",
                "+    public int getMarkFilteringSet()",
                "+    {",
                "+        return markFilteringSet;",
                "+    }",
                "+",
                "+    public LookupSubTable[] getSubTables()",
                "+    {",
                "+        return subTables;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"LookupTable[lookupType=%d,lookupFlag=%d,markFilteringSet=%d]\",",
                "+                lookupType, lookupFlag, markFilteringSet);",
                "+    }",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/RangeRecord.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/RangeRecord.java",
                "new file mode 100644",
                "index 000000000..8e3740399",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/RangeRecord.java",
                "@@ -0,0 +1,62 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+/**",
                "+ * This class models the",
                "+ * <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-format-2\">Range Record in the",
                "+ * Coverage format 2</a> in the Open Type layout common tables.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class RangeRecord",
                "+{",
                "+    private final int startGlyphID;",
                "+    private final int endGlyphID;",
                "+    private final int startCoverageIndex;",
                "+",
                "+    public RangeRecord(int startGlyphID, int endGlyphID, int startCoverageIndex)",
                "+    {",
                "+        this.startGlyphID = startGlyphID;",
                "+        this.endGlyphID = endGlyphID;",
                "+        this.startCoverageIndex = startCoverageIndex;",
                "+    }",
                "+",
                "+    public int getStartGlyphID()",
                "+    {",
                "+        return startGlyphID;",
                "+    }",
                "+",
                "+    public int getEndGlyphID()",
                "+    {",
                "+        return endGlyphID;",
                "+    }",
                "+",
                "+    public int getStartCoverageIndex()",
                "+    {",
                "+        return startCoverageIndex;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"RangeRecord[startGlyphID=%d,endGlyphID=%d,startCoverageIndex=%d]\",",
                "+                startGlyphID, endGlyphID, startCoverageIndex);",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/ScriptRecord.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/ScriptRecord.java",
                "new file mode 100644",
                "index 000000000..e8524ef32",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/ScriptRecord.java",
                "@@ -0,0 +1,53 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+/**",
                "+ * This class models the <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/scripttags\">Script tags</a>",
                "+ * in the Open Type Font specs.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class ScriptRecord",
                "+{",
                "+    private final String scriptTag;",
                "+    private final ScriptTable scriptTable;",
                "+",
                "+    public ScriptRecord(String scriptTag, ScriptTable scriptTable)",
                "+    {",
                "+        this.scriptTag = scriptTag;",
                "+        this.scriptTable = scriptTable;",
                "+    }",
                "+",
                "+    public String getScriptTag()",
                "+    {",
                "+        return scriptTag;",
                "+    }",
                "+",
                "+    public ScriptTable getScriptTable()",
                "+    {",
                "+        return scriptTable;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"ScriptRecord[scriptTag=%s]\", scriptTag);",
                "+    }",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/ScriptTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/ScriptTable.java",
                "new file mode 100644",
                "index 000000000..24fe97d9d",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/ScriptTable.java",
                "@@ -0,0 +1,56 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.common;",
                "+",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * This class models the <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/scripttags\">Script tags</a>",
                "+ * in the Open Type Font specs.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class ScriptTable",
                "+{",
                "+    private final LangSysTable defaultLangSysTable;",
                "+    private final Map<String, LangSysTable> langSysTables;",
                "+",
                "+    public ScriptTable(LangSysTable defaultLangSysTable, Map<String, LangSysTable> langSysTables)",
                "+    {",
                "+        this.defaultLangSysTable = defaultLangSysTable;",
                "+        this.langSysTables = langSysTables;",
                "+    }",
                "+",
                "+    public LangSysTable getDefaultLangSysTable()",
                "+    {",
                "+        return defaultLangSysTable;",
                "+    }",
                "+",
                "+    public Map<String, LangSysTable> getLangSysTables()",
                "+    {",
                "+        return langSysTables;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"ScriptTable[hasDefault=%s,langSysRecordsCount=%d]\",",
                "+                defaultLangSysTable != null, langSysTables.size());",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/package.html b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/package.html",
                "new file mode 100644",
                "index 000000000..dce4f43fd",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/common/package.html",
                "@@ -0,0 +1,26 @@",
                "+<!--",
                "+ ! Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ ! contributor license agreements.  See the NOTICE file distributed with",
                "+ ! this work for additional information regarding copyright ownership.",
                "+ ! The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ ! (the \"License\"); you may not use this file except in compliance with",
                "+ ! the License.  You may obtain a copy of the License at",
                "+ !",
                "+ !      http://www.apache.org/licenses/LICENSE-2.0",
                "+ !",
                "+ ! Unless required by applicable law or agreed to in writing, software",
                "+ ! distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ ! See the License for the specific language governing permissions and",
                "+ ! limitations under the License.",
                "+ !-->",
                "+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">",
                "+<html>",
                "+<head>",
                "+",
                "+</head>",
                "+<body>",
                "+This package contains the highly obfuscated <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2\">Layout Common Table Formats</a> system of tables from the Open Type Font specs. ",
                "+This package makes an honest attempt to closely model these highly obfuscated OTF Tables, in their raw glory, as close as possible to their original nonsensical forms, without any spite or bias.",
                "+</body>",
                "+</html>",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LigatureSetTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LigatureSetTable.java",
                "new file mode 100644",
                "index 000000000..a38443870",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LigatureSetTable.java",
                "@@ -0,0 +1,58 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.gsub;",
                "+",
                "+/**",
                "+ * This class is a part of the <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub\">GSUB \u00e2\u0080\u0094 Glyph",
                "+ * Substitution Table</a> system of tables in the Open Type Font specs. This is a part of the <a href=",
                "+ * \"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#lookuptype-4-ligature-substitution-subtable\">LookupType",
                "+ * 4: Ligature Substitution Subtable</a>. It specifically models the <a href=",
                "+ * \"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#41-ligature-substitution-format-1\">LigatureSet table:",
                "+ * All ligatures beginning with the same glyph</a>.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class LigatureSetTable",
                "+{",
                "+    private final int ligatureCount;",
                "+    private final LigatureTable[] ligatureTables;",
                "+",
                "+    public LigatureSetTable(int ligatureCount, LigatureTable[] ligatureTables)",
                "+    {",
                "+        this.ligatureCount = ligatureCount;",
                "+        this.ligatureTables = ligatureTables;",
                "+    }",
                "+",
                "+    public int getLigatureCount()",
                "+    {",
                "+        return ligatureCount;",
                "+    }",
                "+",
                "+    public LigatureTable[] getLigatureTables()",
                "+    {",
                "+        return ligatureTables;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"%s[ligatureCount=%d]\", LigatureSetTable.class.getSimpleName(),",
                "+                ligatureCount);",
                "+    }",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LigatureTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LigatureTable.java",
                "new file mode 100644",
                "index 000000000..34607ca9e",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LigatureTable.java",
                "@@ -0,0 +1,65 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.gsub;",
                "+",
                "+/**",
                "+ * This class is a part of the <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub\">GSUB \u00e2\u0080\u0094 Glyph",
                "+ * Substitution Table</a> system of tables in the Open Type Font specs. This is a part of the <a href=",
                "+ * \"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#lookuptype-4-ligature-substitution-subtable\">LookupType",
                "+ * 4: Ligature Substitution Subtable</a>. It specifically models the",
                "+ * <a href= \"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#41-ligature-substitution-format-1\">Ligature",
                "+ * table: Glyph components for one ligature</a>.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class LigatureTable",
                "+{",
                "+    private final int ligatureGlyph;",
                "+    private final int componentCount;",
                "+    private final int[] componentGlyphIDs;",
                "+",
                "+    public LigatureTable(int ligatureGlyph, int componentCount, int[] componentGlyphIDs)",
                "+    {",
                "+        this.ligatureGlyph = ligatureGlyph;",
                "+        this.componentCount = componentCount;",
                "+        this.componentGlyphIDs = componentGlyphIDs;",
                "+    }",
                "+",
                "+    public int getLigatureGlyph()",
                "+    {",
                "+        return ligatureGlyph;",
                "+    }",
                "+",
                "+    public int getComponentCount()",
                "+    {",
                "+        return componentCount;",
                "+    }",
                "+",
                "+    public int[] getComponentGlyphIDs()",
                "+    {",
                "+        return componentGlyphIDs;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"%s[ligatureGlyph=%d, componentCount=%d]\",",
                "+                LigatureTable.class.getSimpleName(), ligatureGlyph, componentCount);",
                "+    }",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LookupTypeLigatureSubstitutionSubstFormat1.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LookupTypeLigatureSubstitutionSubstFormat1.java",
                "new file mode 100644",
                "index 000000000..8a776b048",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LookupTypeLigatureSubstitutionSubstFormat1.java",
                "@@ -0,0 +1,62 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.gsub;",
                "+",
                "+import org.apache.fontbox.ttf.table.common.CoverageTable;",
                "+import org.apache.fontbox.ttf.table.common.LookupSubTable;",
                "+",
                "+/**",
                "+ * This class is a part of the <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub\">GSUB \u00e2\u0080\u0094 Glyph",
                "+ * Substitution Table</a> system of tables in the Open Type Font specs. This is a part of the <a href=",
                "+ * \"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#lookuptype-4-ligature-substitution-subtable\">LookupType",
                "+ * 4: Ligature Substitution Subtable</a>. It specifically models the",
                "+ * <a href= \"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#41-ligature-substitution-format-1\">Ligature",
                "+ * Substitution Format 1</a>.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class LookupTypeLigatureSubstitutionSubstFormat1 extends LookupSubTable",
                "+{",
                "+    private final LigatureSetTable[] ligatureSetTables;",
                "+",
                "+    public LookupTypeLigatureSubstitutionSubstFormat1(int substFormat, CoverageTable coverageTable,",
                "+            LigatureSetTable[] ligatureSetTables)",
                "+    {",
                "+        super(substFormat, coverageTable);",
                "+        this.ligatureSetTables = ligatureSetTables;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int doSubstitution(int gid, int coverageIndex)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    public LigatureSetTable[] getLigatureSetTables()",
                "+    {",
                "+        return ligatureSetTables;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"%s[substFormat=%d]\",",
                "+                LookupTypeLigatureSubstitutionSubstFormat1.class.getSimpleName(), getSubstFormat());",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LookupTypeSingleSubstFormat1.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LookupTypeSingleSubstFormat1.java",
                "new file mode 100644",
                "index 000000000..b7bfdeec6",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LookupTypeSingleSubstFormat1.java",
                "@@ -0,0 +1,62 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.gsub;",
                "+",
                "+import org.apache.fontbox.ttf.table.common.CoverageTable;",
                "+import org.apache.fontbox.ttf.table.common.LookupSubTable;",
                "+",
                "+/**",
                "+ * This class is a part of the <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub\">GSUB \u00e2\u0080\u0094 Glyph",
                "+ * Substitution Table</a> system of tables in the Open Type Font specs. This is a part of the <a href=",
                "+ * \"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#lookuptype-1-single-substitution-subtable\">LookupType",
                "+ * 1: Single Substitution Subtable</a>. It specifically models the",
                "+ * <a href= \"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#11-single-substitution-format-1\">Single",
                "+ * Substitution Format 1</a>.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class LookupTypeSingleSubstFormat1 extends LookupSubTable",
                "+{",
                "+    private final short deltaGlyphID;",
                "+",
                "+    public LookupTypeSingleSubstFormat1(int substFormat, CoverageTable coverageTable,",
                "+            short deltaGlyphID)",
                "+    {",
                "+        super(substFormat, coverageTable);",
                "+        this.deltaGlyphID = deltaGlyphID;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int doSubstitution(int gid, int coverageIndex)",
                "+    {",
                "+        return coverageIndex < 0 ? gid : gid + deltaGlyphID;",
                "+    }",
                "+",
                "+    public short getDeltaGlyphID()",
                "+    {",
                "+        return deltaGlyphID;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(\"LookupTypeSingleSubstFormat1[substFormat=%d,deltaGlyphID=%d]\",",
                "+                getSubstFormat(), deltaGlyphID);",
                "+    }",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LookupTypeSingleSubstFormat2.java b/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LookupTypeSingleSubstFormat2.java",
                "new file mode 100644",
                "index 000000000..38841ec7f",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LookupTypeSingleSubstFormat2.java",
                "@@ -0,0 +1,65 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.table.gsub;",
                "+",
                "+import java.util.Arrays;",
                "+",
                "+import org.apache.fontbox.ttf.table.common.CoverageTable;",
                "+import org.apache.fontbox.ttf.table.common.LookupSubTable;",
                "+",
                "+/**",
                "+ * This class is a part of the <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub\">GSUB \u00e2\u0080\u0094 Glyph",
                "+ * Substitution Table</a> system of tables in the Open Type Font specs. This is a part of the <a href=",
                "+ * \"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#lookuptype-1-single-substitution-subtable\">LookupType",
                "+ * 1: Single Substitution Subtable</a>. It specifically models the",
                "+ * <a href= \"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub#12-single-substitution-format-2\">Single",
                "+ * Substitution Format 2</a>.",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class LookupTypeSingleSubstFormat2 extends LookupSubTable",
                "+{",
                "+    private final int[] substituteGlyphIDs;",
                "+",
                "+    public LookupTypeSingleSubstFormat2(int substFormat, CoverageTable coverageTable,",
                "+            int[] substituteGlyphIDs)",
                "+    {",
                "+        super(substFormat, coverageTable);",
                "+        this.substituteGlyphIDs = substituteGlyphIDs;",
                "+    }",
                "+",
                "+    @Override",
                "+    public int doSubstitution(int gid, int coverageIndex)",
                "+    {",
                "+        return coverageIndex < 0 ? gid : substituteGlyphIDs[coverageIndex];",
                "+    }",
                "+",
                "+    public int[] getSubstituteGlyphIDs()",
                "+    {",
                "+        return substituteGlyphIDs;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String toString()",
                "+    {",
                "+        return String.format(",
                "+                \"LookupTypeSingleSubstFormat2[substFormat=%d,substituteGlyphIDs=%s]\",",
                "+                getSubstFormat(), Arrays.toString(substituteGlyphIDs));",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/package.html b/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/package.html",
                "new file mode 100644",
                "index 000000000..749617e1d",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/package.html",
                "@@ -0,0 +1,26 @@",
                "+<!--",
                "+ ! Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ ! contributor license agreements.  See the NOTICE file distributed with",
                "+ ! this work for additional information regarding copyright ownership.",
                "+ ! The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ ! (the \"License\"); you may not use this file except in compliance with",
                "+ ! the License.  You may obtain a copy of the License at",
                "+ !",
                "+ !      http://www.apache.org/licenses/LICENSE-2.0",
                "+ !",
                "+ ! Unless required by applicable law or agreed to in writing, software",
                "+ ! distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ ! See the License for the specific language governing permissions and",
                "+ ! limitations under the License.",
                "+ !-->",
                "+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">",
                "+<html>",
                "+<head>",
                "+",
                "+</head>",
                "+<body>",
                "+This package contains the highly obfuscated <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/gsub\">GSUB, aka, Glyph Substitution Table</a> system of tables from the Open Type Font specs. ",
                "+This package makes an honest attempt to closely model these highly obfuscated OTF Tables in the GSUB sub-category, in their raw glory, as close as possible to their original nonsensical forms, without any spite or bias.",
                "+</body>",
                "+</html>",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/table/package.html b/fontbox/src/main/java/org/apache/fontbox/ttf/table/package.html",
                "new file mode 100644",
                "index 000000000..026cc9984",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/table/package.html",
                "@@ -0,0 +1,26 @@",
                "+<!--",
                "+ ! Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ ! contributor license agreements.  See the NOTICE file distributed with",
                "+ ! this work for additional information regarding copyright ownership.",
                "+ ! The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ ! (the \"License\"); you may not use this file except in compliance with",
                "+ ! the License.  You may obtain a copy of the License at",
                "+ !",
                "+ !      http://www.apache.org/licenses/LICENSE-2.0",
                "+ !",
                "+ ! Unless required by applicable law or agreed to in writing, software",
                "+ ! distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ ! See the License for the specific language governing permissions and",
                "+ ! limitations under the License.",
                "+ !-->",
                "+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">",
                "+<html>",
                "+<head>",
                "+",
                "+</head>",
                "+<body>",
                "+This package contains the highly obfuscated <a href=\"https://docs.microsoft.com/en-us/typography/opentype/spec/font-file#font-tables\">Font tables</a> from the Open Type Font specs. ",
                "+This package makes an honest attempt to closely model these highly obfuscated OTF Tables, in their raw glory, as close as possible to their original nonsensical forms, without any spite or bias.",
                "+</body>",
                "+</html>",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "index fb5acaf9a..de27a5f4c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "@@ -20,2 +20,3 @@ import java.awt.geom.AffineTransform;",
                " import java.awt.geom.PathIterator;",
                "+import java.io.ByteArrayOutputStream;",
                " import java.io.Closeable;",
                "@@ -23,3 +24,9 @@ import java.io.IOException;",
                " import java.io.OutputStream;",
                "+import java.util.ArrayList;",
                "+import java.util.HashSet;",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                " import java.util.Stack;",
                "+import java.util.regex.Pattern;",
                "@@ -27,2 +34,6 @@ import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "+import org.apache.fontbox.ttf.CmapLookup;",
                "+import org.apache.fontbox.ttf.gsub.CompoundCharacterTokenizer;",
                "+import org.apache.fontbox.ttf.gsub.GsubWorker;",
                "+import org.apache.fontbox.ttf.gsub.GsubWorkerForBengali;",
                " import org.apache.pdfbox.contentstream.PDAbstractContentStream;",
                "@@ -35,2 +46,3 @@ import org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyLis",
                " import org.apache.pdfbox.pdmodel.font.PDFont;",
                "+import org.apache.pdfbox.pdmodel.font.PDType0Font;",
                " import org.apache.pdfbox.pdmodel.graphics.PDXObject;",
                "@@ -41,2 +53,3 @@ import org.apache.pdfbox.pdmodel.graphics.color.PDPattern;",
                " import org.apache.pdfbox.pdmodel.graphics.color.PDSeparation;",
                "+import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;",
                " import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;",
                "@@ -314,2 +327,25 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "+        byte[] encodedText = null;",
                "+",
                "+        if (font instanceof PDType0Font)",
                "+        {",
                "+            PDType0Font pdType0Font = (PDType0Font) font;",
                "+            Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap = pdType0Font",
                "+                    .getGlyphSubstitutionMap();",
                "+            if (!glyphSubstitutionMap.isEmpty())",
                "+            {",
                "+                Set<Integer> glyphIds = new HashSet<>();",
                "+                encodedText = encodeForGsub(glyphSubstitutionMap, glyphIds, pdType0Font, text);",
                "+                if (pdType0Font.willBeSubset())",
                "+                {",
                "+                    pdType0Font.addGlyphsToSubset(glyphIds);",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        if (encodedText == null)",
                "+        {",
                "+            encodedText = font.encode(text);",
                "+        }",
                "+",
                "         // Unicode code points to keep when subsetting",
                "@@ -1142,2 +1178,64 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     }",
                "+",
                "+    private byte[] encodeForGsub(Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap,",
                "+            Set<Integer> glyphIds, PDType0Font font, String text) throws IOException",
                "+    {",
                "+",
                "+        String spaceRegexPattern = \"\\\\s\";",
                "+        Pattern spaceRegex = Pattern.compile(spaceRegexPattern);",
                "+",
                "+        // break the entire chunk of text into words by splitting it with space",
                "+        List<String> words = new CompoundCharacterTokenizer(\"\\\\s\").tokenize(text);",
                "+",
                "+        ByteArrayOutputStream out = new ByteArrayOutputStream();",
                "+",
                "+        for (String word : words)",
                "+        {",
                "+            if (spaceRegex.matcher(word).matches())",
                "+            {",
                "+                out.write(font.encode(word));",
                "+            }",
                "+            else",
                "+            {",
                "+                glyphIds.addAll(applyGSUBRules(out, font, glyphSubstitutionMap, word));",
                "+            }",
                "+        }",
                "+",
                "+        return out.toByteArray();",
                "+    }",
                "+",
                "+    private List<Integer> applyGSUBRules(ByteArrayOutputStream out, PDType0Font font,",
                "+            Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap, String word)",
                "+            throws IOException",
                "+    {",
                "+        List<Integer> originalGlyphIds = new ArrayList<>();",
                "+        CmapLookup cmapLookup = font.getCmapLookup();",
                "+",
                "+        // convert characters into glyphIds",
                "+        for (char unicodeChar : word.toCharArray())",
                "+        {",
                "+            int glyphId = cmapLookup.getGlyphId(unicodeChar);",
                "+            if (glyphId <= 0)",
                "+            {",
                "+                throw new IllegalStateException(",
                "+                        \"could not find the glyphId for the character: \" + unicodeChar);",
                "+            }",
                "+            originalGlyphIds.add(glyphId);",
                "+        }",
                "+",
                "+        // TODO: figure out how to get this language-specific detail up here",
                "+        GsubWorker gsubWorker = new GsubWorkerForBengali(cmapLookup, glyphSubstitutionMap);",
                "+",
                "+        List<Integer> repositionedGlyphIds = gsubWorker.repositionGlyphs(originalGlyphIds);",
                "+        List<Integer> glyphIdsAfterGsub = gsubWorker.substituteGlyphs(repositionedGlyphIds);",
                "+",
                "+        for (Integer glyphId : glyphIdsAfterGsub)",
                "+        {",
                "+            out.write(font.encodeGlyphId(glyphId));",
                "+        }",
                "+",
                "+        return glyphIdsAfterGsub;",
                "+",
                "+    }",
                "+",
                " }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java",
                "index c6a6346cd..9fab519ff 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java",
                "@@ -371,2 +371,4 @@ public abstract class PDCIDFont implements COSObjectable, PDFontLike, PDVectorFo",
                "+    public abstract byte[] encodeGlyphId(int glyphId);",
                "+",
                "     /**",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType0.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType0.java",
                "index 6600ec8d3..c4e224be3 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType0.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType0.java",
                "@@ -404,2 +404,8 @@ public class PDCIDFontType0 extends PDCIDFont",
                "+    @Override",
                "+    public byte[] encodeGlyphId(int glyphId)",
                "+    {",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "     @Override",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java",
                "index 859f118b8..675736d3e 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java",
                "@@ -363,4 +363,10 @@ public class PDCIDFontType2 extends PDCIDFont",
                "+        return encodeGlyphId(cid);",
                "+    }",
                "+",
                "+    @Override",
                "+    public byte[] encodeGlyphId(int glyphId)",
                "+    {",
                "         // CID is always 2-bytes (16-bit) for TrueType",
                "-        return new byte[] { (byte)(cid >> 8 & 0xff), (byte)(cid & 0xff) };",
                "+        return new byte[] { (byte)(glyphId >> 8 & 0xff), (byte)(glyphId & 0xff) };",
                "     }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "index 9fb8a615d..cd205868e 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "@@ -22,4 +22,8 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import java.util.Collections;",
                " import java.util.HashSet;",
                "+import java.util.List;",
                "+import java.util.Map;",
                " import java.util.Set;",
                "+",
                " import org.apache.commons.logging.Log;",
                "@@ -27,2 +31,3 @@ import org.apache.commons.logging.LogFactory;",
                " import org.apache.fontbox.cmap.CMap;",
                "+import org.apache.fontbox.ttf.CmapLookup;",
                " import org.apache.fontbox.ttf.TTFParser;",
                "@@ -49,2 +54,4 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "     private final Set<Integer> noUnicode = new HashSet<>(); ",
                "+    private final Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap;",
                "+    private final CmapLookup cmapLookup;",
                "     private CMap cMap, cMapUCS2;",
                "@@ -54,3 +61,3 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "     private TrueTypeFont ttf;",
                "-    ",
                "+",
                "     /**",
                "@@ -64,2 +71,6 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "         super(fontDictionary);",
                "+",
                "+        glyphSubstitutionMap = Collections.emptyMap();",
                "+        cmapLookup = null;",
                "+",
                "         COSBase base = dict.getDictionaryObject(COSName.DESCENDANT_FONTS);",
                "@@ -94,2 +105,6 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "         }",
                "+",
                "+        glyphSubstitutionMap = ttf.getGlyphSubstitutionMap();",
                "+        cmapLookup = ttf.getUnicodeCmapLookup();",
                "+",
                "         embedder = new PDCIDFontType2Embedder(document, dict, ttf, embedSubset, this, vertical);",
                "@@ -234,2 +249,11 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "+    public void addGlyphsToSubset(Set<Integer> glyphIds)",
                "+    {",
                "+        if (!willBeSubset())",
                "+        {",
                "+            throw new IllegalStateException(\"This font was created with subsetting disabled\");",
                "+        }",
                "+        embedder.addGlyphIds(glyphIds);",
                "+    }",
                "+",
                "     @Override",
                "@@ -576,2 +600,18 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "     }",
                "+",
                "+    public Map<String, Map<List<Integer>, Integer>> getGlyphSubstitutionMap()",
                "+    {",
                "+        return glyphSubstitutionMap;",
                "+    }",
                "+",
                "+    public byte[] encodeGlyphId(int glyphId)",
                "+    {",
                "+        return descendantFont.encodeGlyphId(glyphId);",
                "+    }",
                "+",
                "+    public CmapLookup getCmapLookup()",
                "+    {",
                "+        return cmapLookup;",
                "+    }",
                "+",
                " }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/TrueTypeEmbedder.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/TrueTypeEmbedder.java",
                "index 00ec05aab..e2cddee28 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/TrueTypeEmbedder.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/TrueTypeEmbedder.java",
                "@@ -72,2 +72,4 @@ abstract class TrueTypeEmbedder implements Subsetter",
                "+    private final Set<Integer> allGlyphIds = new HashSet<>();",
                "+",
                "     /**",
                "@@ -285,2 +287,7 @@ abstract class TrueTypeEmbedder implements Subsetter",
                "+    public void addGlyphIds(Set<Integer> glyphIds)",
                "+    {",
                "+        allGlyphIds.addAll(glyphIds);",
                "+    }",
                "+",
                "     @Override",
                "@@ -316,2 +323,7 @@ abstract class TrueTypeEmbedder implements Subsetter",
                "+        if (!allGlyphIds.isEmpty())",
                "+        {",
                "+            subsetter.addGlyphIds(allGlyphIds);",
                "+        }",
                "+",
                "         // calculate deterministic tag based on the chosen subset"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "examples/src/main/resources/org/apache/pdfbox/resources/ttf/bengali-correct-text.png",
                "fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/CompoundCharacterTokenizer.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphArraySplitter.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphArraySplitterRegexImpl.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorker.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/package.html",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/CoverageTable.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/CoverageTableFormat1.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/CoverageTableFormat2.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/FeatureListTable.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/FeatureRecord.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/FeatureTable.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LangSysRecord.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LangSysTable.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LookupListTable.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LookupSubTable.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/LookupTable.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/RangeRecord.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/ScriptRecord.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/ScriptTable.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/common/package.html",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LigatureSetTable.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LigatureTable.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LookupTypeLigatureSubstitutionSubstFormat1.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LookupTypeSingleSubstFormat1.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/LookupTypeSingleSubstFormat2.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/gsub/package.html",
                "fontbox/src/main/java/org/apache/fontbox/ttf/table/package.html",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFont.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType0.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDCIDFontType2.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/TrueTypeEmbedder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: PDF",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0d8596b921272a506cc656a9d283bf891c4b9f86",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531201468,
            "hunks": 2,
            "message": "PDFBOX-4256: use Off as the default value for a button field in case there is no value set -> see PDF spec git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1835515 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
                "index 1a9fbb675..adcc1bb9b 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
                "@@ -124,4 +124,6 @@ public abstract class PDButton extends PDTerminalField",
                "     /**",
                "-     * Returns the selected value. May be empty if NoToggleToOff is set but there is no value",
                "-     * selected.",
                "+     * Returns the selected value.",
                "+     * ",
                "+     * <p>Off is the default value which will also be returned if the",
                "+     * value hasn't been set at all.",
                "      * ",
                "@@ -138,3 +140,5 @@ public abstract class PDButton extends PDTerminalField",
                "         {",
                "-            return \"\";",
                "+            // Off is the default value if there is nothing else set.",
                "+            // See PDF Spec.",
                "+            return \"Off\";",
                "         }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4256": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d9b25c8f54f2194d52d2d15bfac342136df38d01"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "RELEVANT_WORDS_IN_MESSAGE",
                    "message": "The commit message contains some relevant words: PDF",
                    "relevance": 8
                },
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4256",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "28729eb34537a04e522c604906925e9a8024b34f",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525925984,
            "hunks": 15,
            "message": "PDFBOX-4068: bug fix - remove duplicated fields from PDPageContentStream git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831301 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "index b66e1e0ba..0d3eb8ca2 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "@@ -60,7 +60,7 @@ abstract class PDAbstractContentStream implements Closeable",
                "-    private boolean inTextMode = false;",
                "-    private final Stack<PDFont> fontStack = new Stack<>();",
                "+    protected boolean inTextMode = false;",
                "+    protected final Stack<PDFont> fontStack = new Stack<>();",
                "-    private final Stack<PDColorSpace> nonStrokingColorSpaceStack = new Stack<>();",
                "-    private final Stack<PDColorSpace> strokingColorSpaceStack = new Stack<>();",
                "+    protected final Stack<PDColorSpace> nonStrokingColorSpaceStack = new Stack<>();",
                "+    protected final Stack<PDColorSpace> strokingColorSpaceStack = new Stack<>();",
                "@@ -104,3 +104,3 @@ abstract class PDAbstractContentStream implements Closeable",
                "     }",
                "-    ",
                "+",
                "     public OutputStream getOutputStream()",
                "@@ -114,3 +114,3 @@ abstract class PDAbstractContentStream implements Closeable",
                "     }",
                "-    ",
                "+",
                "     public PDResources getResources()",
                "@@ -124,18 +124,2 @@ abstract class PDAbstractContentStream implements Closeable",
                "     }",
                "-    ",
                "-    public Stack<PDColorSpace> getStrokingColorSpaceStack()",
                "-    {",
                "-        return strokingColorSpaceStack;",
                "-    }",
                "-",
                "-    public Stack<PDColorSpace> getNonStrokingColorSpaceStack()",
                "-    {",
                "-        return nonStrokingColorSpaceStack;",
                "-    }",
                "-",
                "-    ",
                "-    public boolean isInTextMode()",
                "-    {",
                "-        return inTextMode;",
                "-    }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "index 6d4cc2bb4..d9032a819 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "@@ -30,3 +30,2 @@ import java.util.Map;",
                " import java.util.Set;",
                "-import java.util.Stack;",
                " import java.util.regex.Pattern;",
                "@@ -102,7 +101,2 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "-    private final Stack<PDFont> fontStack = new Stack<>();",
                "-",
                "-    private final Stack<PDColorSpace> nonStrokingColorSpaceStack = new Stack<>();",
                "-    private final Stack<PDColorSpace> strokingColorSpaceStack = new Stack<>();",
                "-",
                "     private final Map<PDType0Font, GsubWorker> gsubWorkers = new HashMap<>();",
                "@@ -330,3 +324,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        if (!isInTextMode())",
                "+        if (!inTextMode)",
                "         {",
                "@@ -537,3 +531,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        if (isInTextMode())",
                "+        if (inTextMode)",
                "         {",
                "@@ -790,3 +784,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        if (isInTextMode())",
                "+        if (inTextMode)",
                "         {",
                "@@ -865,3 +859,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        if (isInTextMode())",
                "+        if (inTextMode)",
                "         {",
                "@@ -888,3 +882,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        if (isInTextMode())",
                "+        if (inTextMode)",
                "         {",
                "@@ -909,3 +903,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        if (isInTextMode())",
                "+        if (inTextMode)",
                "         {",
                "@@ -942,3 +936,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        if (isInTextMode())",
                "+        if (inTextMode)",
                "         {",
                "@@ -961,3 +955,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        if (isInTextMode())",
                "+        if (inTextMode)",
                "         {",
                "@@ -1016,3 +1010,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        if (isInTextMode())",
                "+        if (inTextMode)",
                "         {"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4068": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: page",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4068",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3e526fabd47194f9faa0042dfab92ac6cc3b41cb",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530377414,
            "hunks": 19,
            "message": "PDFBOX-3000: support rendering of blend modes in non-isolated transparency groups, by Jani Pehkonen git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834751 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/rendering/GroupGraphics.java b/pdfbox/src/main/java/org/apache/pdfbox/rendering/GroupGraphics.java",
                "new file mode 100644",
                "index 000000000..b21ca1e6f",
                "--- /dev/null",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/rendering/GroupGraphics.java",
                "@@ -0,0 +1,728 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.pdfbox.rendering;",
                "+",
                "+import java.awt.Color;",
                "+import java.awt.Composite;",
                "+import java.awt.Font;",
                "+import java.awt.FontMetrics;",
                "+import java.awt.Graphics;",
                "+import java.awt.Graphics2D;",
                "+import java.awt.GraphicsConfiguration;",
                "+import java.awt.Image;",
                "+import java.awt.Paint;",
                "+import java.awt.Rectangle;",
                "+import java.awt.RenderingHints;",
                "+import java.awt.Shape;",
                "+import java.awt.Stroke;",
                "+import java.awt.font.FontRenderContext;",
                "+import java.awt.font.GlyphVector;",
                "+import java.awt.geom.AffineTransform;",
                "+import java.awt.image.BufferedImage;",
                "+import java.awt.image.BufferedImageOp;",
                "+import java.awt.image.DataBuffer;",
                "+import java.awt.image.DataBufferInt;",
                "+import java.awt.image.ImageObserver;",
                "+import java.awt.image.RenderedImage;",
                "+import java.awt.image.renderable.RenderableImage;",
                "+import java.text.AttributedCharacterIterator;",
                "+import java.util.Map;",
                "+",
                "+/**",
                "+ * Graphics implementation for non-isolated transparency groups.",
                "+ * <p>",
                "+ * Non-isolated groups require that the group backdrop (copied from parent group or",
                "+ * page) is used as the initial contents of the image to which the group is rendered.",
                "+ * This allows blend modes to blend the group contents with the graphics behind",
                "+ * the group. Finally when the group rendering is done, backdrop removal must be",
                "+ * computed (see {@link #removeBackdrop(java.awt.image.BufferedImage, int, int) removeBackdrop}).",
                "+ * It ensures the backdrop is not rendered twice on the parent but it leaves the",
                "+ * effects of blend modes.",
                "+ * <p>",
                "+ * This class renders the group contents to two images. <code>groupImage</code> is",
                "+ * initialized with the backdrop and group contents are drawn over it.",
                "+ * <code>groupAlphaImage</code> is initially fully transparent and it accumulates",
                "+ * the total alpha of the group contents excluding backdrop.",
                "+ * <p>",
                "+ * If a non-isolated group uses only the blend mode Normal, it can be optimized",
                "+ * and rendered like an isolated group; backdrop usage and removal are not needed.",
                "+ */",
                "+",
                "+class GroupGraphics extends Graphics2D",
                "+{",
                "+    private final BufferedImage groupImage;",
                "+    private final BufferedImage groupAlphaImage;",
                "+    private final Graphics2D groupGraphics;",
                "+    private final Graphics2D alphaGraphics;",
                "+",
                "+    GroupGraphics(BufferedImage groupImage, Graphics2D groupGraphics)",
                "+    {",
                "+        this.groupImage = groupImage;",
                "+        this.groupGraphics = groupGraphics;",
                "+        this.groupAlphaImage = new BufferedImage(groupImage.getWidth(), groupImage.getHeight(),",
                "+            BufferedImage.TYPE_INT_ARGB);",
                "+        this.alphaGraphics = groupAlphaImage.createGraphics();",
                "+    }",
                "+",
                "+    private GroupGraphics(BufferedImage groupImage, Graphics2D groupGraphics,",
                "+        BufferedImage groupAlphaImage, Graphics2D alphaGraphics)",
                "+    {",
                "+        this.groupImage = groupImage;",
                "+        this.groupGraphics = groupGraphics;",
                "+        this.groupAlphaImage = groupAlphaImage;",
                "+        this.alphaGraphics = alphaGraphics;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void clearRect(int x, int y, int width, int height)",
                "+    {",
                "+        groupGraphics.clearRect(x, y, width, height);",
                "+        alphaGraphics.clearRect(x, y, width, height);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void clipRect(int x, int y, int width, int height)",
                "+    {",
                "+        groupGraphics.clipRect(x, y, width, height);",
                "+        alphaGraphics.clipRect(x, y, width, height);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void copyArea(int x, int y, int width, int height, int dx, int dy)",
                "+    {",
                "+        groupGraphics.copyArea(x, y, width, height, dx, dy);",
                "+        alphaGraphics.copyArea(x, y, width, height, dx, dy);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Graphics create()",
                "+    {",
                "+        Graphics g = groupGraphics.create();",
                "+        Graphics a = alphaGraphics.create();",
                "+        if (g instanceof Graphics2D && a instanceof Graphics2D)",
                "+        {",
                "+            return new GroupGraphics(groupImage, (Graphics2D)g, groupAlphaImage, (Graphics2D)a);",
                "+        }",
                "+        throw new UnsupportedOperationException();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void dispose()",
                "+    {",
                "+        groupGraphics.dispose();",
                "+        alphaGraphics.dispose();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawArc(int x, int y, int width, int height, int startAngle, int arcAngle)",
                "+    {",
                "+        groupGraphics.drawArc(x, y, width, height, startAngle, arcAngle);",
                "+        alphaGraphics.drawArc(x, y, width, height, startAngle, arcAngle);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean drawImage(Image img, int x, int y, Color bgcolor, ImageObserver observer)",
                "+    {",
                "+        groupGraphics.drawImage(img, x, y, bgcolor, observer);",
                "+        return alphaGraphics.drawImage(img, x, y, bgcolor, observer);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean drawImage(Image img, int x, int y, ImageObserver observer)",
                "+    {",
                "+        groupGraphics.drawImage(img, x, y, observer);",
                "+        return alphaGraphics.drawImage(img, x, y, observer);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean drawImage(Image img, int x, int y, int width, int height,",
                "+        Color bgcolor, ImageObserver observer)",
                "+    {",
                "+        groupGraphics.drawImage(img, x, y, width, height, bgcolor, observer);",
                "+        return alphaGraphics.drawImage(img, x, y, width, height, bgcolor, observer);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean drawImage(Image img, int x, int y, int width, int height, ImageObserver observer)",
                "+    {",
                "+        groupGraphics.drawImage(img, x, y, width, height, observer);",
                "+        return alphaGraphics.drawImage(img, x, y, width, height, observer);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1,",
                "+        int sy1, int sx2, int sy2, Color bgcolor, ImageObserver observer)",
                "+    {",
                "+        groupGraphics.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, bgcolor, observer);",
                "+        return alphaGraphics.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, bgcolor, observer);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1,",
                "+            int sy1, int sx2, int sy2, ImageObserver observer)",
                "+    {",
                "+        groupGraphics.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, observer);",
                "+        return alphaGraphics.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, observer);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawLine(int x1, int y1, int x2, int y2)",
                "+    {",
                "+        groupGraphics.drawLine(x1, y1, x2, y2);",
                "+        alphaGraphics.drawLine(x1, y1, x2, y2);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawOval(int x, int y, int width, int height)",
                "+    {",
                "+        groupGraphics.drawOval(x, y, width, height);",
                "+        alphaGraphics.drawOval(x, y, width, height);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawPolygon(int[] xPoints, int[] yPoints, int nPoints)",
                "+    {",
                "+        groupGraphics.drawPolygon(xPoints, yPoints, nPoints);",
                "+        alphaGraphics.drawPolygon(xPoints, yPoints, nPoints);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawPolyline(int[] xPoints, int[] yPoints, int nPoints)",
                "+    {",
                "+        groupGraphics.drawPolyline(xPoints, yPoints, nPoints);",
                "+        alphaGraphics.drawPolyline(xPoints, yPoints, nPoints);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)",
                "+    {",
                "+        groupGraphics.drawRoundRect(x, y, width, height, arcWidth, arcHeight);",
                "+        alphaGraphics.drawRoundRect(x, y, width, height, arcWidth, arcHeight);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawString(AttributedCharacterIterator iterator, int x, int y)",
                "+    {",
                "+        groupGraphics.drawString(iterator, x, y);",
                "+        alphaGraphics.drawString(iterator, x, y);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawString(String str, int x, int y)",
                "+    {",
                "+        groupGraphics.drawString(str, x, y);",
                "+        alphaGraphics.drawString(str, x, y);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void fillArc(int x, int y, int width, int height, int startAngle, int arcAngle)",
                "+    {",
                "+        groupGraphics.fillArc(x, y, width, height, startAngle, arcAngle);",
                "+        alphaGraphics.fillArc(x, y, width, height, startAngle, arcAngle);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void fillOval(int x, int y, int width, int height)",
                "+    {",
                "+        groupGraphics.fillOval(x, y, width, height);",
                "+        alphaGraphics.fillOval(x, y, width, height);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void fillPolygon(int[] xPoints, int[] yPoints, int nPoints)",
                "+    {",
                "+        groupGraphics.fillPolygon(xPoints, yPoints, nPoints);",
                "+        alphaGraphics.fillPolygon(xPoints, yPoints, nPoints);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void fillRect(int x, int y, int width, int height)",
                "+    {",
                "+        groupGraphics.fillRect(x, y, width, height);",
                "+        alphaGraphics.fillRect(x, y, width, height);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)",
                "+    {",
                "+        groupGraphics.fillRoundRect(x, y, width, height, arcWidth, arcHeight);",
                "+        alphaGraphics.fillRoundRect(x, y, width, height, arcWidth, arcHeight);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Shape getClip()",
                "+    {",
                "+        return groupGraphics.getClip();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Rectangle getClipBounds()",
                "+    {",
                "+        return groupGraphics.getClipBounds();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Color getColor()",
                "+    {",
                "+        return groupGraphics.getColor();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Font getFont()",
                "+    {",
                "+        return groupGraphics.getFont();",
                "+    }",
                "+",
                "+    @Override",
                "+    public FontMetrics getFontMetrics(Font f)",
                "+    {",
                "+        return groupGraphics.getFontMetrics(f);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setClip(int x, int y, int width, int height)",
                "+    {",
                "+        groupGraphics.setClip(x, y, width, height);",
                "+        alphaGraphics.setClip(x, y, width, height);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setClip(Shape clip)",
                "+    {",
                "+        groupGraphics.setClip(clip);",
                "+        alphaGraphics.setClip(clip);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setColor(Color c)",
                "+    {",
                "+        groupGraphics.setColor(c);",
                "+        alphaGraphics.setColor(c);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setFont(Font font)",
                "+    {",
                "+        groupGraphics.setFont(font);",
                "+        alphaGraphics.setFont(font);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setPaintMode()",
                "+    {",
                "+        groupGraphics.setPaintMode();",
                "+        alphaGraphics.setPaintMode();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setXORMode(Color c1)",
                "+    {",
                "+        groupGraphics.setXORMode(c1);",
                "+        alphaGraphics.setXORMode(c1);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void translate(int x, int y)",
                "+    {",
                "+        groupGraphics.translate(x, y);",
                "+        alphaGraphics.translate(x, y);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void addRenderingHints(Map<?,?> hints)",
                "+    {",
                "+        groupGraphics.addRenderingHints(hints);",
                "+        alphaGraphics.addRenderingHints(hints);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void clip(Shape s)",
                "+    {",
                "+        groupGraphics.clip(s);",
                "+        alphaGraphics.clip(s);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void draw(Shape s)",
                "+    {",
                "+        groupGraphics.draw(s);",
                "+        alphaGraphics.draw(s);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawGlyphVector(GlyphVector g, float x, float y)",
                "+    {",
                "+        groupGraphics.drawGlyphVector(g, x, y);",
                "+        alphaGraphics.drawGlyphVector(g, x, y);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawImage(BufferedImage img, BufferedImageOp op, int x, int y)",
                "+    {",
                "+        groupGraphics.drawImage(img, op, x, y);",
                "+        alphaGraphics.drawImage(img, op, x, y);",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean drawImage(Image img, AffineTransform xform, ImageObserver obs)",
                "+    {",
                "+        groupGraphics.drawImage(img, xform, obs);",
                "+        return alphaGraphics.drawImage(img, xform, obs);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawRenderableImage(RenderableImage img, AffineTransform xform)",
                "+    {",
                "+        groupGraphics.drawRenderableImage(img, xform);",
                "+        alphaGraphics.drawRenderableImage(img, xform);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawRenderedImage(RenderedImage img, AffineTransform xform)",
                "+    {",
                "+        groupGraphics.drawRenderedImage(img, xform);",
                "+        alphaGraphics.drawRenderedImage(img, xform);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawString(AttributedCharacterIterator iterator, float x, float y)",
                "+    {",
                "+        groupGraphics.drawString(iterator, x, y);",
                "+        alphaGraphics.drawString(iterator, x, y);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void drawString(String str, float x, float y)",
                "+    {",
                "+        groupGraphics.drawString(str, x, y);",
                "+        alphaGraphics.drawString(str, x, y);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void fill(Shape s)",
                "+    {",
                "+        groupGraphics.fill(s);",
                "+        alphaGraphics.fill(s);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Color getBackground()",
                "+    {",
                "+        return groupGraphics.getBackground();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Composite getComposite()",
                "+    {",
                "+        return groupGraphics.getComposite();",
                "+    }",
                "+",
                "+    @Override",
                "+    public GraphicsConfiguration getDeviceConfiguration()",
                "+    {",
                "+        return groupGraphics.getDeviceConfiguration();",
                "+    }",
                "+",
                "+    @Override",
                "+    public FontRenderContext getFontRenderContext()",
                "+    {",
                "+        return groupGraphics.getFontRenderContext();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Paint getPaint()",
                "+    {",
                "+        return groupGraphics.getPaint();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Object getRenderingHint(RenderingHints.Key hintKey)",
                "+    {",
                "+        return groupGraphics.getRenderingHint(hintKey);",
                "+    }",
                "+",
                "+    @Override",
                "+    public RenderingHints getRenderingHints()",
                "+    {",
                "+        return groupGraphics.getRenderingHints();",
                "+    }",
                "+",
                "+    @Override",
                "+    public Stroke getStroke()",
                "+    {",
                "+        return groupGraphics.getStroke();",
                "+    }",
                "+",
                "+    @Override",
                "+    public AffineTransform getTransform()",
                "+    {",
                "+        return groupGraphics.getTransform();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean hit(Rectangle rect, Shape s, boolean onStroke)",
                "+    {",
                "+        return groupGraphics.hit(rect, s, onStroke);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void rotate(double theta)",
                "+    {",
                "+        groupGraphics.rotate(theta);",
                "+        alphaGraphics.rotate(theta);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void rotate(double theta, double x, double y)",
                "+    {",
                "+        groupGraphics.rotate(theta, x, y);",
                "+        alphaGraphics.rotate(theta, x, y);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void scale(double sx, double sy)",
                "+    {",
                "+        groupGraphics.scale(sx, sy);",
                "+        alphaGraphics.scale(sx, sy);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setBackground(Color color)",
                "+    {",
                "+        groupGraphics.setBackground(color);",
                "+        alphaGraphics.setBackground(color);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setComposite(Composite comp)",
                "+    {",
                "+        groupGraphics.setComposite(comp);",
                "+        alphaGraphics.setComposite(comp);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setPaint(Paint paint)",
                "+    {",
                "+        groupGraphics.setPaint(paint);",
                "+        alphaGraphics.setPaint(paint);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setRenderingHint(RenderingHints.Key hintKey, Object hintValue)",
                "+    {",
                "+        groupGraphics.setRenderingHint(hintKey, hintValue);",
                "+        alphaGraphics.setRenderingHint(hintKey, hintValue);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setRenderingHints(Map<?, ?> hints)",
                "+    {",
                "+        groupGraphics.setRenderingHints(hints);",
                "+        alphaGraphics.setRenderingHints(hints);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setStroke(Stroke s)",
                "+    {",
                "+        groupGraphics.setStroke(s);",
                "+        alphaGraphics.setStroke(s);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void setTransform(AffineTransform tx)",
                "+    {",
                "+        groupGraphics.setTransform(tx);",
                "+        alphaGraphics.setTransform(tx);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void shear(double shx, double shy)",
                "+    {",
                "+        groupGraphics.shear(shx, shy);",
                "+        alphaGraphics.shear(shx, shy);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void transform(AffineTransform tx)",
                "+    {",
                "+        groupGraphics.transform(tx);",
                "+        alphaGraphics.transform(tx);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void translate(double tx, double ty)",
                "+    {",
                "+        groupGraphics.translate(tx, ty);",
                "+        alphaGraphics.translate(tx, ty);",
                "+    }",
                "+",
                "+    /**",
                "+     * Computes backdrop removal.",
                "+     * The backdrop removal equation is given in section 11.4.4 in the PDF 32000-1:2008",
                "+     * standard. It returns the final color <code>C</code> for each pixel in the group:<br>",
                "+     *     <code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code><br>",
                "+     * where<br>",
                "+     *     <code>Cn</code> is the group color including backdrop (read from <code>groupImage</code>),<br>",
                "+     *     <code>C0</code> is the backdrop color,<br>",
                "+     *     <code>alpha0</code> is the backdrop alpha,<br>",
                "+     *     <code>alphagn</code> is the group alpha excluding backdrop (read the",
                "+     *           alpha channel from <code>groupAlphaImage</code>)<br>",
                "+     * <p>",
                "+     * The alpha of the result is equal to <code>alphagn</code>, i.e., the alpha",
                "+     * channel of <code>groupAlphaImage</code>.",
                "+     * <p>",
                "+     * The <code>backdrop</code> image may be much larger than <code>groupImage</code> if,",
                "+     * for example, the current page is used as the backdrop. Only a specific rectangular",
                "+     * region of <code>backdrop</code> is used in the backdrop removal: upper-left corner",
                "+     * is at <code>(offsetX, offsetY)</code>; width and height are equal to those of",
                "+     * <code>groupImage</code>.",
                "+     *",
                "+     * @param backdrop group backdrop",
                "+     * @param offsetX backdrop left X coordinate",
                "+     * @param offsetY backdrop upper Y coordinate",
                "+     */",
                "+    void removeBackdrop(BufferedImage backdrop, int offsetX, int offsetY)",
                "+    {",
                "+        int groupWidth = groupImage.getWidth();",
                "+        int groupHeight = groupImage.getHeight();",
                "+        int backdropWidth = backdrop.getWidth();",
                "+        int backdropHeight = backdrop.getHeight();",
                "+        int groupType = groupImage.getType();",
                "+        int groupAlphaType = groupAlphaImage.getType();",
                "+        int backdropType = backdrop.getType();",
                "+        DataBuffer groupDataBuffer = groupImage.getRaster().getDataBuffer();",
                "+        DataBuffer groupAlphaDataBuffer = groupAlphaImage.getRaster().getDataBuffer();",
                "+        DataBuffer backdropDataBuffer = backdrop.getRaster().getDataBuffer();",
                "+",
                "+        if (groupType == BufferedImage.TYPE_INT_ARGB &&",
                "+            groupAlphaType == BufferedImage.TYPE_INT_ARGB &&",
                "+            (backdropType == BufferedImage.TYPE_INT_ARGB || backdropType == BufferedImage.TYPE_INT_RGB) &&",
                "+            groupDataBuffer instanceof DataBufferInt &&",
                "+            groupAlphaDataBuffer instanceof DataBufferInt &&",
                "+            backdropDataBuffer instanceof DataBufferInt)",
                "+        {",
                "+            // Optimized computation for int[] buffers.",
                "+",
                "+            int[] groupData = ((DataBufferInt)groupDataBuffer).getData();",
                "+            int[] groupAlphaData = ((DataBufferInt)groupAlphaDataBuffer).getData();",
                "+            int[] backdropData = ((DataBufferInt)backdropDataBuffer).getData();",
                "+            boolean backdropHasAlpha = backdropType == BufferedImage.TYPE_INT_ARGB;",
                "+",
                "+            for (int y = 0; y < groupHeight; y++)",
                "+            {",
                "+                for (int x = 0; x < groupWidth; x++)",
                "+                {",
                "+                    int index = x + y * groupWidth;",
                "+",
                "+                    // alphagn is the total alpha of the group contents excluding backdrop.",
                "+                    int alphagn = (groupAlphaData[index] >> 24) & 0xFF;",
                "+                    if (alphagn == 0)",
                "+                    {",
                "+                        // Avoid division by 0 and set the result to fully transparent.",
                "+                        groupData[index] = 0;",
                "+                        continue;",
                "+                    }",
                "+",
                "+                    int backdropX = x + offsetX;",
                "+                    int backdropY = y + offsetY;",
                "+                    int backdropRGB; // color of backdrop pixel",
                "+                    float alpha0; // alpha of backdrop pixel",
                "+",
                "+                    if (backdropX >= 0 && backdropX < backdropWidth &&",
                "+                        backdropY >= 0 && backdropY < backdropHeight)",
                "+                    {",
                "+                        backdropRGB = backdropData[backdropX + backdropY * backdropWidth];",
                "+                        alpha0 = backdropHasAlpha ? ((backdropRGB >> 24) & 0xFF) : 255;",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        // Backdrop pixel is out of bounds. Use a transparent value.",
                "+                        backdropRGB = 0;",
                "+                        alpha0 = 0;",
                "+                    }",
                "+",
                "+                    // Alpha factor alpha0 / alphagn - alpha0 is in range 0.0-1.0.",
                "+                    float alphaFactor = alpha0 / (float)alphagn - alpha0 / 255.0f;",
                "+                    int groupRGB = groupData[index]; // color of group pixel",
                "+",
                "+                    // Compute backdrop removal for RGB components.",
                "+                    int r = backdropRemoval(groupRGB, backdropRGB, 16, alphaFactor);",
                "+                    int g = backdropRemoval(groupRGB, backdropRGB, 8, alphaFactor);",
                "+                    int b = backdropRemoval(groupRGB, backdropRGB, 0, alphaFactor);",
                "+",
                "+                    // Copy the result back to groupImage. The alpha of the result",
                "+                    // is equal to alphagn.",
                "+                    groupData[index] = (alphagn << 24) | (r << 16) | (g << 8) | b;",
                "+                }",
                "+            }",
                "+        }",
                "+        else",
                "+        {",
                "+            // Non-optimized computation for other types of color spaces and pixel buffers.",
                "+",
                "+            for (int y = 0; y < groupHeight; y++)",
                "+            {",
                "+                for (int x = 0; x < groupWidth; x++)",
                "+                {",
                "+                    int alphagn = (groupAlphaImage.getRGB(x, y) >> 24) & 0xFF;",
                "+                    if (alphagn == 0)",
                "+                    {",
                "+                        groupImage.setRGB(x, y, 0);",
                "+                        continue;",
                "+                    }",
                "+",
                "+                    int backdropX = x + offsetX;",
                "+                    int backdropY = y + offsetY;",
                "+                    int backdropRGB;",
                "+                    float alpha0;",
                "+                    if (backdropX >= 0 && backdropX < backdropWidth &&",
                "+                        backdropY >= 0 && backdropY < backdropHeight)",
                "+                    {",
                "+                        backdropRGB = backdrop.getRGB(backdropX, backdropY);",
                "+                        alpha0 = (backdropRGB >> 24) & 0xFF;",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        backdropRGB = 0;",
                "+                        alpha0 = 0;",
                "+                    }",
                "+",
                "+                    int groupRGB = groupImage.getRGB(x, y);",
                "+                    float alphaFactor = alpha0 / alphagn - alpha0 / 255.0f;",
                "+",
                "+                    int r = backdropRemoval(groupRGB, backdropRGB, 16, alphaFactor);",
                "+                    int g = backdropRemoval(groupRGB, backdropRGB, 8, alphaFactor);",
                "+                    int b = backdropRemoval(groupRGB, backdropRGB, 0, alphaFactor);",
                "+",
                "+                    groupImage.setRGB(x, y, (alphagn << 24) | (r << 16) | (g << 8) | b);",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Computes the backdrop removal equation.",
                "+     * <code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code>",
                "+     */",
                "+    private int backdropRemoval(int groupRGB, int backdropRGB, int shift, float alphaFactor)",
                "+    {",
                "+        float cn = (groupRGB >> shift) & 0xFF;",
                "+        float c0 = (backdropRGB >> shift) & 0xFF;",
                "+        int c = Math.round(cn + (cn - c0) * alphaFactor);",
                "+        return (c < 0) ? 0 : (c > 255 ? 255 : c);",
                "+    }",
                "+}",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java",
                "index ee2a988cd..6c50da373 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java",
                "@@ -57,2 +57,4 @@ public class PDFRenderer",
                "+    private BufferedImage pageImage;",
                "+",
                "     /**",
                "@@ -207,2 +209,4 @@ public class PDFRenderer",
                "+        pageImage = image;",
                "+",
                "         // use a transparent background if the image type supports alpha",
                "@@ -362,2 +366,12 @@ public class PDFRenderer",
                "     }",
                "+",
                "+    /**",
                "+     * Returns the image to which the current page is being rendered.",
                "+     * May be null if the page is rendered to a Graphics2D object",
                "+     * instead of a BufferedImage.",
                "+     */",
                "+    BufferedImage getPageImage()",
                "+    {",
                "+        return pageImage;",
                "+    }",
                " }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
                "index 7bb951943..09ebf0a01 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
                "@@ -46,4 +46,7 @@ import java.util.ArrayList;",
                " import java.util.HashMap;",
                "+import java.util.HashSet;",
                " import java.util.List;",
                " import java.util.Map;",
                "+import java.util.Set;",
                "+import java.util.Stack;",
                " import org.apache.commons.logging.Log;",
                "@@ -55,2 +58,3 @@ import org.apache.pdfbox.cos.COSDictionary;",
                " import org.apache.pdfbox.cos.COSName;",
                "+import org.apache.pdfbox.pdmodel.PDResources;",
                " import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                "@@ -60,2 +64,4 @@ import org.apache.pdfbox.pdmodel.font.PDVectorFont;",
                " import org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern;",
                "+import org.apache.pdfbox.pdmodel.graphics.PDXObject;",
                "+import org.apache.pdfbox.pdmodel.graphics.blend.BlendMode;",
                " import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
                "@@ -71,2 +77,3 @@ import org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern;",
                " import org.apache.pdfbox.pdmodel.graphics.shading.PDShading;",
                "+import org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState;",
                " import org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState;",
                "@@ -129,2 +136,4 @@ public class PageDrawer extends PDFGraphicsStreamEngine",
                "+    private final Stack<TransparencyGroup> transparencyGroupStack = new Stack<>();",
                "+",
                "     /**",
                "@@ -1274,2 +1283,4 @@ public class PageDrawer extends PDFGraphicsStreamEngine",
                "         private final int minY;",
                "+        private final int maxX;",
                "+        private final int maxY;",
                "         private final int width;",
                "@@ -1311,2 +1322,4 @@ public class PageDrawer extends PDFGraphicsStreamEngine",
                "                 minY = 0;",
                "+                maxX = 0;",
                "+                maxY = 0;",
                "                 width = 0;",
                "@@ -1325,4 +1338,4 @@ public class PageDrawer extends PDFGraphicsStreamEngine",
                "             minY = (int) Math.floor(bounds.getMinY());",
                "-            int maxX = (int) Math.floor(bounds.getMaxX()) + 1;",
                "-            int maxY = (int) Math.floor(bounds.getMaxY()) + 1;",
                "+            maxX = (int) Math.floor(bounds.getMaxX()) + 1;",
                "+            maxY = (int) Math.floor(bounds.getMaxY()) + 1;",
                "@@ -1340,3 +1353,36 @@ public class PageDrawer extends PDFGraphicsStreamEngine",
                "             }",
                "+",
                "+            boolean needsBackdrop = !isSoftMask && !form.getGroup().isIsolated() &&",
                "+                hasBlendMode(form, new HashSet<COSBase>());",
                "+            BufferedImage backdropImage = null;",
                "+            // Position of this group in parent group's coordinates",
                "+            int backdropX = 0;",
                "+            int backdropY = 0;",
                "+            if (needsBackdrop)",
                "+            {",
                "+                if (transparencyGroupStack.isEmpty())",
                "+                {",
                "+                    // Use the current page as the parent group.",
                "+                    backdropImage = renderer.getPageImage();",
                "+                    needsBackdrop = backdropImage != null;",
                "+                    backdropX = minX;",
                "+                    backdropY = (backdropImage != null) ? (backdropImage.getHeight() - maxY) : 0;",
                "+                }",
                "+                else",
                "+                {",
                "+                    TransparencyGroup parentGroup = transparencyGroupStack.peek();",
                "+                    backdropImage = parentGroup.image;",
                "+                    backdropX = minX - parentGroup.minX;",
                "+                    backdropY = parentGroup.maxY - maxY;",
                "+                }",
                "+            }",
                "+",
                "             Graphics2D g = image.createGraphics();",
                "+            if (needsBackdrop)",
                "+            {",
                "+                // backdropImage must be included in group image but not in group alpha.",
                "+                g.drawImage(backdropImage, 0, 0, width, height,",
                "+                    backdropX, backdropY, backdropX + width, backdropY + height, null);",
                "+                g = new GroupGraphics(image, g);",
                "+            }",
                "             if (isSoftMask && backdropColor != null)",
                "@@ -1388,3 +1434,8 @@ public class PageDrawer extends PDFGraphicsStreamEngine",
                "                 {",
                "+                    transparencyGroupStack.push(this);",
                "                     processTransparencyGroup(form);",
                "+                    if (!transparencyGroupStack.isEmpty())",
                "+                    {",
                "+                        transparencyGroupStack.pop();",
                "+                    }",
                "                 }",
                "@@ -1403,2 +1454,7 @@ public class PageDrawer extends PDFGraphicsStreamEngine",
                "             }",
                "+",
                "+            if (needsBackdrop)",
                "+            {",
                "+                ((GroupGraphics) g).removeBackdrop(backdropImage, backdropX, backdropY);",
                "+            }",
                "         }",
                "@@ -1478,2 +1534,52 @@ public class PageDrawer extends PDFGraphicsStreamEngine",
                "     }",
                "+",
                "+    private boolean hasBlendMode(PDTransparencyGroup group, Set<COSBase> groupsDone)",
                "+    {",
                "+        if (groupsDone.contains(group.getCOSObject()))",
                "+        {",
                "+            // The group was already processed. Avoid endless recursion.",
                "+            return false;",
                "+        }",
                "+        groupsDone.add(group.getCOSObject());",
                "+",
                "+        PDResources resources = group.getResources();",
                "+        if (resources == null)",
                "+        {",
                "+            return false;",
                "+        }",
                "+        for (COSName name : resources.getExtGStateNames())",
                "+        {",
                "+            PDExtendedGraphicsState extGState = resources.getExtGState(name);",
                "+            if (extGState == null)",
                "+            {",
                "+                continue;",
                "+            }",
                "+            BlendMode blendMode = extGState.getBlendMode();",
                "+            if (blendMode != BlendMode.NORMAL)",
                "+            {",
                "+                return true;",
                "+            }",
                "+        }",
                "+",
                "+        // Recursively process nested transparency groups",
                "+        for (COSName name : resources.getXObjectNames())",
                "+        {",
                "+            PDXObject xObject;",
                "+            try",
                "+            {",
                "+                xObject = resources.getXObject(name);",
                "+            }",
                "+            catch (IOException ex)",
                "+            {",
                "+                continue;",
                "+            }",
                "+            if (xObject instanceof PDTransparencyGroup &&",
                "+                hasBlendMode((PDTransparencyGroup)xObject, groupsDone))",
                "+            {",
                "+                return true;",
                "+            }",
                "+        }",
                "+",
                "+        return false;",
                "+    }",
                " }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/rendering/GroupGraphics.java",
                "pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java",
                "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3000": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c5cc36811a34e99722f70426b107ace59a5f7c8e"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3000",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d02495dedb4c5984759662ede249afbb362166cb",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527421505,
            "hunks": 1,
            "message": "PDFBOX-4184: remote loading of test file 032163.jpg / http://www.crh.noaa.gov/Image/gjt/images/ImageGallery/Uncompahgre_small.jpg git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1832328 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/pom.xml b/pdfbox/pom.xml",
                "index fa49e21ea..1d8bd38d8 100644",
                "--- a/pdfbox/pom.xml",
                "+++ b/pdfbox/pom.xml",
                "@@ -408,2 +408,17 @@",
                "                     </execution>",
                "+                    <execution>",
                "+                        <id>PDFBOX-4184</id>",
                "+                        <phase>generate-test-resources</phase>",
                "+                        <goals>",
                "+                            <goal>wget</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <url>http://www.crh.noaa.gov/Image/gjt/images/ImageGallery/Uncompahgre_small.jpg</url>",
                "+                            <!-- file is also 032163.jpg",
                "+                            from http://downloads.digitalcorpora.org/corpora/files/govdocs1/zipfiles/032.zip -->",
                "+                            <outputDirectory>${project.build.directory}/imgs</outputDirectory>",
                "+                            <outputFileName>PDFBOX-4184-032163.jpg</outputFileName>",
                "+                            <sha512>35241c979d3808ca9d2641b5ec5e40637132b313f75070faca8b8f6d00ddce394070414236db3993f1092fe3bc16995750d528b6d803a7851423c14c308ccdde</sha512>",
                "+                        </configuration>",
                "+                    </execution>",
                "                 </executions>"
            ],
            "changed_files": [
                "pdfbox/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4184": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "db5f3c003fe96619591abbd3433b997149b9b97a"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4184",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4c19d42c392e0d536a2a138b93d99d323c596290",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526586017,
            "hunks": 1,
            "message": "PDFBOX-4222: skip bad page label entry git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831804 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "index 27ae233e4..59e07ffa8 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "@@ -611,3 +611,9 @@ public class PDFMergerUtility",
                "                 {",
                "-                    COSNumber labelIndex = (COSNumber) srcNums.getObject(i);",
                "+                    COSBase base = srcNums.getObject(i);",
                "+                    if (!(base instanceof COSNumber))",
                "+                    {",
                "+                        LOG.warn(\"page labels skipped at index \" + i + \", should be a number, but is \" + base);",
                "+                        break;",
                "+                    }",
                "+                    COSNumber labelIndex = (COSNumber) base;",
                "                     long labelIndexValue = labelIndex.intValue();"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4222": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "579a4335f38308336dcb1615d2933871f299a5c3"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: page",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4222",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "80726dc0fafc848ae496a25e37e1f4ad9fe3605b",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530475029,
            "hunks": 1,
            "message": "PDFBOX-4184: add remote loading of 16 bit ARGB test file git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834803 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/pom.xml b/pdfbox/pom.xml",
                "index 9e8b2e034..ba4f2b4a7 100644",
                "--- a/pdfbox/pom.xml",
                "+++ b/pdfbox/pom.xml",
                "@@ -422,2 +422,21 @@",
                "                     </execution>",
                "+                    <execution>",
                "+                        <id>PDFBOX-4184-2</id>",
                "+                        <phase>generate-test-resources</phase>",
                "+                        <goals>",
                "+                            <goal>wget</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <url>https://issues.apache.org/jira/secure/attachment/12929821/16bit.png</url>",
                "+                            <!--",
                "+                            originally from",
                "+                            https://github.com/danfickle/openhtmltopdf/issues/173",
                "+                            see \"blurred\" image link",
                "+                            https://user-images.githubusercontent.com/29379074/36145630-f304cd0e-10d7-11e8-942c-66eb8040be70.png",
                "+                            -->",
                "+                            <outputDirectory>${project.build.directory}/imgs</outputDirectory>",
                "+                            <outputFileName>PDFBOX-4184-16bit.png</outputFileName>",
                "+                            <sha512>45f148913590ea1a94c3ac17080969b74e579fe51967a5bf535caa3f7104ea81ee222b99deb8ee528b0a53640f97d87cf668633a1bdd61a62092246df1807471</sha512>",
                "+                        </configuration>",
                "+                    </execution>",
                "                 </executions>"
            ],
            "changed_files": [
                "pdfbox/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4184": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "3ab0c52abcdabb34e77cb80655a630cc28957096"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4184",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "87fdaa9fc2ac7856b0dffa4634e120c3174733a9",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529524811,
            "hunks": 1,
            "message": "PDFBOX-4248: avoid NPE which can happen with a Batik graphics object git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1833946 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
                "index c35848a66..0c29295fa 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
                "@@ -1245,3 +1245,8 @@ public class PageDrawer extends PDFGraphicsStreamEngine",
                "         // Example for NoZoom can be found in p5 of PDFBOX-2348",
                "-        int deviceType = graphics.getDeviceConfiguration().getDevice().getType();",
                "+        int deviceType = -1;",
                "+        if (graphics.getDeviceConfiguration() != null && ",
                "+            graphics.getDeviceConfiguration().getDevice() != null)",
                "+        {",
                "+            deviceType = graphics.getDeviceConfiguration().getDevice().getType();",
                "+        }",
                "         if (deviceType == GraphicsDevice.TYPE_PRINTER && !annotation.isPrinted())"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4248": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "48bc5e90b987d43eb28536a6956d387f9f9d723b"
                ]
            ],
            "tags": [
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4248",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1cd8c52437689c60b10241675343c5624f8a27f6",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526588954,
            "hunks": 2,
            "message": "PDFBOX-4222: ignore all page labels if there is a bad entry (similar to Adobe Reader) git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1831811 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "index 3634fbeaf..5f613e3a4 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "@@ -621,2 +621,3 @@ public class PDFMergerUtility",
                "             {",
                "+                int startSize = destNums.size();",
                "                 for (int i = 0; i < srcNums.size(); i += 2)",
                "@@ -626,3 +627,8 @@ public class PDFMergerUtility",
                "                     {",
                "-                        LOG.warn(\"page labels skipped at index \" + i + \", should be a number, but is \" + base);",
                "+                        LOG.error(\"page labels ignored, index \" + i + \" should be a number, but is \" + base);",
                "+                        // remove what we added",
                "+                        while (destNums.size() > startSize)",
                "+                        {",
                "+                            destNums.remove(startSize);",
                "+                        }",
                "                         break;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4222": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a0eec9d373afe4d8f52886923ffe15929bdb0e7f"
                ],
                [
                    "no-tag",
                    "e1ab9f22ad27ffd482637d7b0788ac3a9264ddd6"
                ],
                [
                    "no-tag",
                    "9a3b2af822f855ab299dbc6415052ab559fbf40e"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: page",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4222",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bb8d553c042e48c3fba7315f86917bd068d9bef0",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524906205,
            "hunks": 3,
            "message": "PDFBOX-4207: apply default transform to mouse coordinates git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1830415 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java b/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
                "index 80f540d65..4945ec465 100644",
                "--- a/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
                "+++ b/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
                "@@ -71,2 +71,4 @@ public class PagePane implements ActionListener, AncestorListener, MouseMotionLi",
                "     private final Map<PDRectangle, String> rectMap = new HashMap<PDRectangle, String>();",
                "+    private final AffineTransform defaultTransform = GraphicsEnvironment.getLocalGraphicsEnvironment().",
                "+                        getDefaultScreenDevice().getDefaultConfiguration().getDefaultTransform();",
                "@@ -216,4 +218,4 @@ public class PagePane implements ActionListener, AncestorListener, MouseMotionLi",
                "         float zoomScale = zoomMenu.getPageZoomScale();",
                "-        float x = e.getX() / zoomScale;",
                "-        float y = e.getY() / zoomScale;",
                "+        float x = e.getX() / zoomScale * (float) defaultTransform.getScaleX();",
                "+        float y = e.getY() / zoomScale * (float) defaultTransform.getScaleY();",
                "         int x1, y1;",
                "@@ -325,6 +327,4 @@ public class PagePane implements ActionListener, AncestorListener, MouseMotionLi",
                "                 // See PDFBOX-3665 for more sample code and discussion.",
                "-                AffineTransform tx = GraphicsEnvironment.getLocalGraphicsEnvironment().",
                "-                        getDefaultScreenDevice().getDefaultConfiguration().getDefaultTransform();",
                "-                label.setSize((int) Math.ceil(image.getWidth() / tx.getScaleX()), ",
                "-                              (int) Math.ceil(image.getHeight() / tx.getScaleY()));",
                "+                label.setSize((int) Math.ceil(image.getWidth() / defaultTransform.getScaleX()), ",
                "+                              (int) Math.ceil(image.getHeight() / defaultTransform.getScaleY()));",
                "                 label.setIcon(new HighResolutionImageIcon(image, label.getWidth(), label.getHeight()));"
            ],
            "changed_files": [
                "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4207": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "bb0ef8d3c645ffaf9b8bc37f4e44314a3ec42eae"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4207",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "761812d62258990706048dd55d06ded4d2ac5ef5",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524160171,
            "hunks": 1,
            "message": "PDFBOX-4197: load test file into repository git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1829583 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/pom.xml b/pdfbox/pom.xml",
                "index 04e597c5c..fa49e21ea 100644",
                "--- a/pdfbox/pom.xml",
                "+++ b/pdfbox/pom.xml",
                "@@ -395,2 +395,15 @@",
                "                     </execution>",
                "+                    <execution>",
                "+                        <id>PDFBOX-4197</id>",
                "+                        <phase>generate-test-resources</phase>",
                "+                        <goals>",
                "+                            <goal>wget</goal>",
                "+                        </goals>",
                "+                        <configuration>",
                "+                            <url>https://issues.apache.org/jira/secure/attachment/12919726/sample.pdf</url>",
                "+                            <outputDirectory>${project.build.directory}/pdfs</outputDirectory>",
                "+                            <outputFileName>PDFBOX-4197.pdf</outputFileName>",
                "+                            <sha512>6fefc869dff9db8cd539db177d35beeacc62304173245742eaee8882dab330860a31cbbd4c4ec6cc724603cc453afc07ec61361fbc1e80a47f44b04ccfbaf40d</sha512>",
                "+                        </configuration>",
                "+                    </execution>",
                "                 </executions>"
            ],
            "changed_files": [
                "pdfbox/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4197": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4a8dc72196312c2b3cd3989946ab226568f52089"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4197",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d41ed6df8a80be126aeb3a186ec184b97b406502",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523986405,
            "hunks": 3,
            "message": "PDFBOX-2941: trigger another premature initialization for more accurate rendering benchmarks git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1829377 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java b/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "index bc8258239..c59fb8880 100644",
                "--- a/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "+++ b/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "@@ -108,2 +108,3 @@ import org.apache.pdfbox.debugger.ui.Tree;",
                " import org.apache.pdfbox.debugger.ui.ZoomMenu;",
                "+import org.apache.pdfbox.filter.FilterFactory;",
                " import org.apache.pdfbox.io.IOUtils;",
                "@@ -112,3 +113,2 @@ import org.apache.pdfbox.pdmodel.common.PDPageLabels;",
                " import org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException;",
                "-import org.apache.pdfbox.pdmodel.font.PDFont;",
                " import org.apache.pdfbox.pdmodel.font.PDType1Font;",
                "@@ -1206,2 +1206,3 @@ public class PDFDebugger extends JFrame",
                "             IIORegistry.getDefaultInstance();",
                "+            FilterFactory.INSTANCE.getFilter(COSName.FLATE_DECODE);",
                "         }"
            ],
            "changed_files": [
                "debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-2941": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1111b63e45417eda967afb9eec1d56c02ede3178"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: trigger",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-2941",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a6b2cf98e431f0815251d2e41a1e61a5e7d5e110",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529331713,
            "hunks": 1,
            "message": "PDFBOX-4245: revert because of regression git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833726 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
                "index 7b16f95fa..8b0a25235 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
                "@@ -1468,5 +1468,4 @@ public class PageDrawer extends PDFGraphicsStreamEngine",
                "             // Flip y",
                "-            // PDFBOX-4245 also consider translation in xform",
                "-            return new Rectangle2D.Double(minX - pageSize.getLowerLeftX() * m.getScalingFactorX() + xform.getTranslateX(),",
                "-                   size.getY() - minY - height + pageSize.getLowerLeftY() * m.getScalingFactorY() + xform.getTranslateY(),",
                "+            return new Rectangle2D.Double(minX - pageSize.getLowerLeftX() * m.getScalingFactorX(),",
                "+                    size.getY() - minY - height + pageSize.getLowerLeftY() * m.getScalingFactorY(),",
                "                     width, height);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4245": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "929992440df88dcd87bb4b2c605441987f717abd"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4245",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fab9c770b55f000effebf5c94d8a1f3d7025261a",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525957435,
            "hunks": 2,
            "message": "PDFBOX-4071: refactor the code in order to not assign to this loop counter from within the loop body git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1831337 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "index 2fa470561..f9998e197 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "@@ -499,3 +499,4 @@ public final class PDPageContentStream implements Closeable",
                "         {",
                "-            for (int offset = 0; offset < text.length(); )",
                "+            int offset = 0;",
                "+            while (offset < text.length())",
                "             {",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "index 15f3783ed..0159d8be3 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "@@ -317,3 +317,4 @@ public abstract class PDFont implements COSObjectable, PDFontLike",
                "         ByteArrayOutputStream out = new ByteArrayOutputStream();",
                "-        for (int offset = 0; offset < text.length(); )",
                "+        int offset = 0;",
                "+        while (offset < text.length())",
                "         {"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f7f41c72c849944938bb1a72a6d36e1d4dcdb845"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c98daf9cc58c415a888535ae7d837267aa7bc133",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529247973,
            "hunks": 1,
            "message": "PDFBOX-4245: consider translation in xform, as suggested by Jiri Kunhart git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833663 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
                "index 8b0a25235..7b16f95fa 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java",
                "@@ -1468,4 +1468,5 @@ public class PageDrawer extends PDFGraphicsStreamEngine",
                "             // Flip y",
                "-            return new Rectangle2D.Double(minX - pageSize.getLowerLeftX() * m.getScalingFactorX(),",
                "-                    size.getY() - minY - height + pageSize.getLowerLeftY() * m.getScalingFactorY(),",
                "+            // PDFBOX-4245 also consider translation in xform",
                "+            return new Rectangle2D.Double(minX - pageSize.getLowerLeftX() * m.getScalingFactorX() + xform.getTranslateX(),",
                "+                   size.getY() - minY - height + pageSize.getLowerLeftY() * m.getScalingFactorY() + xform.getTranslateY(),",
                "                     width, height);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/rendering/PageDrawer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4245": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "eb0d947c79c412cee8b10fbf7916b4acb8788f5e"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4245",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b7ea160c177fb480c2cc41db1e81a47db82e6e24",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524860047,
            "hunks": 5,
            "message": "PDFBOX-2941: tell field name if we're in a field git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830394 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java b/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
                "index d58d5befc..f169cbeb2 100644",
                "--- a/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
                "+++ b/debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java",
                "@@ -49,2 +49,5 @@ import java.awt.image.BufferedImage;",
                " import java.io.IOException;",
                "+import java.util.HashMap;",
                "+import java.util.Map;",
                "+import java.util.Map.Entry;",
                " import java.util.concurrent.ExecutionException;",
                "@@ -52,2 +55,6 @@ import java.util.concurrent.TimeUnit;",
                " import org.apache.pdfbox.debugger.ui.HighResolutionImageIcon;",
                "+import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;",
                "+import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;",
                "+import org.apache.pdfbox.pdmodel.interactive.form.PDField;",
                "@@ -71,2 +78,3 @@ public class PagePane implements ActionListener, AncestorListener, MouseMotionLi",
                "     private String labelText = \"\";",
                "+    private final Map<PDRectangle,String> rectMap = new HashMap<>();",
                "@@ -79,2 +87,23 @@ public class PagePane implements ActionListener, AncestorListener, MouseMotionLi",
                "         initUI();",
                "+        initRectMap();",
                "+    }",
                "+",
                "+    private void initRectMap()",
                "+    {",
                "+        PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm();",
                "+        if (acroForm == null)",
                "+        {",
                "+            return;",
                "+        }",
                "+        for (PDField field : acroForm.getFieldTree())",
                "+        {",
                "+            String fullyQualifiedName = field.getFullyQualifiedName();",
                "+            for (PDAnnotationWidget widget : field.getWidgets())",
                "+            {",
                "+                if (page.equals(widget.getPage()))",
                "+                {",
                "+                    rectMap.put(widget.getRectangle(), fullyQualifiedName);",
                "+                }",
                "+            }",
                "+        }",
                "     }",
                "@@ -252,3 +281,15 @@ public class PagePane implements ActionListener, AncestorListener, MouseMotionLi",
                "         }",
                "-        statuslabel.setText(\"x: \" + x1 + \", y: \" + y1);",
                "+        String text = \"x: \" + x1 + \", y: \" + y1;",
                "+        ",
                "+        // are we in a field widget?",
                "+        for (Entry<PDRectangle,String> entry : rectMap.entrySet())",
                "+        {",
                "+            if (entry.getKey().contains(x1, y1))",
                "+            {",
                "+                text += \", field: \" + rectMap.get(entry.getKey());",
                "+                break;",
                "+            }",
                "+        }",
                "+",
                "+        statuslabel.setText(text);",
                "     }"
            ],
            "changed_files": [
                "debugger/src/main/java/org/apache/pdfbox/debugger/pagepane/PagePane.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-2941": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "327767c6c319250abc704a8ae2153a2478d90226"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-2941",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9794b68761efe9af95cb046ef4281d1b4705be9c",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524171781,
            "hunks": 1,
            "message": "PDFBOX-4071: improve error msg git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829616 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "index b2ed1ff0b..99c9a6762 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "@@ -278,3 +278,4 @@ public class PDFStreamParser extends BaseParser",
                "                 {",
                "-                    throw new IOException( \"Error: Expected operator 'ID' actual='\" + id + \"'\" );",
                "+                    throw new IOException( \"Error: Expected operator 'ID' actual='\" + id +",
                "+                                           \"' at stream offset \" + seqSource.getPosition());",
                "                 }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5436705adc08fd2e2ec3ce9e6d9f7b892adf25f7"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: parse",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3f18c6f77f042dc74fb407fb740ef9c0cc3453ca",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531171118,
            "hunks": 1,
            "message": "PDFBOX-4071: improve javadoc git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/1.8@1835496 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java",
                "index ea2ed9185..0a212783a 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java",
                "@@ -149,3 +149,3 @@ public class PDFParser extends BaseParser",
                "      *",
                "-     * @param e The exception if vailable. Can be null if there is no exception available",
                "+     * @param e The exception if available. Can be null if there is no exception available",
                "      * @return true if parsing could be continued, otherwise false"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d0443b775ab6016c70705059c3738ccba2e8d237"
                ],
                [
                    "no-tag",
                    "f8969cf7c75dd8828006b80fa125f10826bfc695"
                ],
                [
                    "no-tag",
                    "20591a3f393290bfee28b01192d5ca5b176f57c3"
                ],
                [
                    "no-tag",
                    "c628b70c3c02f2cea1de87c02a873b73bb8b1976"
                ],
                [
                    "no-tag",
                    "2f2a6940cc131b86767f3cffe9052687401419ac"
                ],
                [
                    "no-tag",
                    "5b1b2e07112afc1aac999bc39a282e9049487f26"
                ],
                [
                    "no-tag",
                    "d7514ffc9679ca69d3948f7da62109b3176d6e97"
                ],
                [
                    "no-tag",
                    "2c1c8e167764496c9bbd3d25ec8180abc4298514"
                ],
                [
                    "no-tag",
                    "f394c98fe456aecfa93ca70810dd1f736bb3bbd3"
                ],
                [
                    "no-tag",
                    "cbd8f0561f06456930e212982b2b8b5a2f1c6730"
                ],
                [
                    "no-tag",
                    "b99c47e6365654b2c5fcf0cf80b19b971fec3a22"
                ],
                [
                    "no-tag",
                    "417e6523f71cb4b372e7c2f7d81f04d59b7936f4"
                ],
                [
                    "no-tag",
                    "7334031821c0e933f1e3e486e907b84d61717d02"
                ],
                [
                    "no-tag",
                    "278e0dc0aa394464e22d1e879451f4acf54ad5a1"
                ],
                [
                    "no-tag",
                    "4f031332ed8ffa9c4bf7816340ca6f5f43c94f62"
                ]
            ],
            "tags": [
                "1.8.16",
                "1.8.17"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: parse",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ff1d90e953c5feb60174777459860602548e6865",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528135432,
            "hunks": 9,
            "message": "PDFBOX-4237: use InputStream instead of PDContentStream git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832873 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/util/RemoveAllText.java b/examples/src/main/java/org/apache/pdfbox/examples/util/RemoveAllText.java",
                "index 76dafd5fb..a33bb5b14 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/util/RemoveAllText.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/util/RemoveAllText.java",
                "@@ -126,3 +126,3 @@ public final class RemoveAllText",
                "     {",
                "-        PDFStreamParser parser = new PDFStreamParser(contentStream);",
                "+        PDFStreamParser parser = new PDFStreamParser(contentStream.getContents());",
                "         Object token = parser.parseNextToken();",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java b/pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java",
                "index 499c7d671..42856b771 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java",
                "@@ -487,3 +487,3 @@ public abstract class PDFStreamEngine",
                "         List<COSBase> arguments = new ArrayList<>();",
                "-        PDFStreamParser parser = new PDFStreamParser(contentStream);",
                "+        PDFStreamParser parser = new PDFStreamParser(contentStream.getContents());",
                "         Object token = parser.parseNextToken();",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "index 99c9a6762..7dc5b144e 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "@@ -21,2 +21,3 @@ import java.io.ByteArrayOutputStream;",
                " import java.io.IOException;",
                "+import java.io.InputStream;",
                " import java.util.ArrayList;",
                "@@ -25,3 +26,2 @@ import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "-import org.apache.pdfbox.contentstream.PDContentStream;",
                " import org.apache.pdfbox.contentstream.operator.Operator;",
                "@@ -58,5 +58,5 @@ public class PDFStreamParser extends BaseParser",
                "      */",
                "-    public PDFStreamParser(PDContentStream contentStream) throws IOException",
                "+    public PDFStreamParser(InputStream stream) throws IOException",
                "     {",
                "-        super(new InputStreamSource(contentStream.getContents()));",
                "+        super(new InputStreamSource(stream));",
                "     }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3CharProc.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3CharProc.java",
                "index f4793dd99..40a03ffad 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3CharProc.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3CharProc.java",
                "@@ -96,3 +96,3 @@ public final class PDType3CharProc implements COSObjectable, PDContentStream",
                "         List<COSBase> arguments = new ArrayList<>();",
                "-        PDFStreamParser parser = new PDFStreamParser(this);",
                "+        PDFStreamParser parser = new PDFStreamParser(getContents());",
                "         Object token = parser.parseNextToken();",
                "@@ -151,3 +151,3 @@ public final class PDType3CharProc implements COSObjectable, PDContentStream",
                "         List<COSBase> arguments = new ArrayList<>();",
                "-        PDFStreamParser parser = new PDFStreamParser(this);",
                "+        PDFStreamParser parser = new PDFStreamParser(getContents());",
                "         Object token = parser.parseNextToken();",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
                "index 29b30148b..a8b6ceab7 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
                "@@ -329,3 +329,3 @@ class AppearanceGeneratorHelper",
                "     {",
                "-        PDFStreamParser parser = new PDFStreamParser(appearanceStream);",
                "+        PDFStreamParser parser = new PDFStreamParser(appearanceStream.getContents());",
                "         parser.parse();"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/util/RemoveAllText.java",
                "pdfbox/src/main/java/org/apache/pdfbox/contentstream/PDFStreamEngine.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3CharProc.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4237": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: parse",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4237",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bf1a0637a7f6539cc78b139a66ff48c77fe00c61",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525910461,
            "hunks": 25,
            "message": "PDFBOX-4068: make PDAbstractContentStream  package-private and move its subclasses into the same package git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831291 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "new file mode 100644",
                "index 000000000..b66e1e0ba",
                "--- /dev/null",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "@@ -0,0 +1,1587 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.pdfbox.pdmodel;",
                "+",
                "+import java.awt.Color;",
                "+import java.awt.geom.AffineTransform;",
                "+import java.io.Closeable;",
                "+import java.io.IOException;",
                "+import java.io.OutputStream;",
                "+import java.text.NumberFormat;",
                "+import java.util.Locale;",
                "+import java.util.Stack;",
                "+import org.apache.pdfbox.cos.COSBase;",
                "+import org.apache.pdfbox.cos.COSName;",
                "+import org.apache.pdfbox.cos.COSNumber;",
                "+import org.apache.pdfbox.pdfwriter.COSWriter;",
                "+import org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList;",
                "+import org.apache.pdfbox.pdmodel.font.PDFont;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceN;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDICCBased;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDPattern;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDSeparation;",
                "+import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;",
                "+import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;",
                "+import org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage;",
                "+import org.apache.pdfbox.pdmodel.graphics.shading.PDShading;",
                "+import org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState;",
                "+import org.apache.pdfbox.util.Charsets;",
                "+import org.apache.pdfbox.util.Matrix;",
                "+import org.apache.pdfbox.util.NumberFormatUtil;",
                "+",
                "+/**",
                "+ * Provides the ability to write to a content stream.",
                "+ *",
                "+ * @author Ben Litchfield",
                "+ */",
                "+abstract class PDAbstractContentStream implements Closeable",
                "+{",
                "+    private OutputStream outputStream;",
                "+    private PDResources resources;",
                "+",
                "+    private boolean inTextMode = false;",
                "+    private final Stack<PDFont> fontStack = new Stack<>();",
                "+",
                "+    private final Stack<PDColorSpace> nonStrokingColorSpaceStack = new Stack<>();",
                "+    private final Stack<PDColorSpace> strokingColorSpaceStack = new Stack<>();",
                "+",
                "+    // number format",
                "+    private final NumberFormat formatDecimal = NumberFormat.getNumberInstance(Locale.US);",
                "+    private final byte[] formatBuffer = new byte[32];",
                "+",
                "+    /**",
                "+     * Create a new appearance stream.",
                "+     *",
                "+     */",
                "+    public PDAbstractContentStream()",
                "+    {",
                "+        formatDecimal.setMaximumFractionDigits(4);",
                "+        formatDecimal.setGroupingUsed(false);",
                "+    }",
                "+",
                "+    /**",
                "+     * Create a new appearance stream.",
                "+     * ",
                "+     * @param outputStream The appearances output stream to write to.",
                "+     */",
                "+    public PDAbstractContentStream(OutputStream outputStream)",
                "+    {",
                "+        this.outputStream = outputStream;",
                "+        this.resources = null;",
                "+",
                "+        formatDecimal.setMaximumFractionDigits(4);",
                "+        formatDecimal.setGroupingUsed(false);",
                "+    }",
                "+",
                "+    /**",
                "+     * Sets the maximum number of digits allowed for fractional numbers.",
                "+     * ",
                "+     * @see NumberFormat#setMaximumFractionDigits(int)",
                "+     * @param fractionDigitsNumber",
                "+     */",
                "+    protected void setMaximumFractionDigits(int fractionDigitsNumber)",
                "+    {",
                "+        formatDecimal.setMaximumFractionDigits(fractionDigitsNumber);",
                "+    }",
                "+    ",
                "+    public OutputStream getOutputStream()",
                "+    {",
                "+        return outputStream;",
                "+    }",
                "+",
                "+    public void setOutputStream(OutputStream outputStream)",
                "+    {",
                "+        this.outputStream = outputStream;",
                "+    }",
                "+    ",
                "+    public PDResources getResources()",
                "+    {",
                "+        return resources;",
                "+    }",
                "+    ",
                "+    public final void setResources(PDResources resources)",
                "+    {",
                "+        this.resources = resources;",
                "+    }",
                "+    ",
                "+    public Stack<PDColorSpace> getStrokingColorSpaceStack()",
                "+    {",
                "+        return strokingColorSpaceStack;",
                "+    }",
                "+",
                "+    public Stack<PDColorSpace> getNonStrokingColorSpaceStack()",
                "+    {",
                "+        return nonStrokingColorSpaceStack;",
                "+    }",
                "+",
                "+    ",
                "+    public boolean isInTextMode()",
                "+    {",
                "+        return inTextMode;",
                "+    }",
                "+",
                "+    /**",
                "+     * Begin some text operations.",
                "+     *",
                "+     * @throws IOException If there is an error writing to the stream or if you attempt to",
                "+     *         nest beginText calls.",
                "+     * @throws IllegalStateException If the method was not allowed to be called at this time.",
                "+     */",
                "+    public void beginText() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: Nested beginText() calls are not allowed.\");",
                "+        }",
                "+        writeOperator(\"BT\");",
                "+        inTextMode = true;",
                "+    }",
                "+",
                "+    /**",
                "+     * End some text operations.",
                "+     *",
                "+     * @throws IOException If there is an error writing to the stream or if you attempt to",
                "+     *         nest endText calls.",
                "+     * @throws IllegalStateException If the method was not allowed to be called at this time.",
                "+     */",
                "+    public void endText() throws IOException",
                "+    {",
                "+        if (!inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: You must call beginText() before calling endText.\");",
                "+        }",
                "+        writeOperator(\"ET\");",
                "+        inTextMode = false;",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Set the font and font size to draw text with.",
                "+     *",
                "+     * @param font The font to use.",
                "+     * @param fontSize The font size to draw the text.",
                "+     * @throws IOException If there is an error writing the font information.",
                "+     */",
                "+    public void setFont(PDFont font, float fontSize) throws IOException",
                "+    {",
                "+        if (fontStack.isEmpty())",
                "+        {",
                "+            fontStack.add(font);",
                "+        }",
                "+        else",
                "+        {",
                "+            fontStack.setElementAt(font, fontStack.size() - 1);",
                "+        }",
                "+",
                "+        writeOperand(resources.add(font));",
                "+        writeOperand(fontSize);",
                "+        writeOperator(\"Tf\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Shows the given text at the location specified by the current text matrix with the given",
                "+     * interspersed positioning. This allows the user to efficiently position each glyph or sequence",
                "+     * of glyphs.",
                "+     *",
                "+     * @param textWithPositioningArray An array consisting of String and Float types. Each String is",
                "+     * output to the page using the current text matrix. Using the default coordinate system, each",
                "+     * interspersed number adjusts the current text matrix by translating to the left or down for",
                "+     * horizontal and vertical text respectively. The number is expressed in thousands of a text",
                "+     * space unit, and may be negative.",
                "+     *",
                "+     * @throws IOException if an io exception occurs.",
                "+     */",
                "+    public void showTextWithPositioning(Object[] textWithPositioningArray) throws IOException",
                "+    {",
                "+        write(\"[\");",
                "+        for (Object obj : textWithPositioningArray)",
                "+        {",
                "+            if (obj instanceof String)",
                "+            {",
                "+                showTextInternal((String) obj);",
                "+            }",
                "+            else if (obj instanceof Float)",
                "+            {",
                "+                writeOperand((Float) obj);",
                "+            }",
                "+            else",
                "+            {",
                "+                throw new IllegalArgumentException(\"Argument must consist of array of Float and String types\");",
                "+            }",
                "+        }",
                "+        write(\"] \");",
                "+        writeOperator(\"TJ\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Shows the given text at the location specified by the current text matrix.",
                "+     *",
                "+     * @param text The Unicode text to show.",
                "+     * @throws IOException If an io exception occurs.",
                "+     */",
                "+    public void showText(String text) throws IOException",
                "+    {",
                "+        showTextInternal(text);",
                "+        write(\" \");",
                "+        writeOperator(\"Tj\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Outputs a string using the correct encoding and subsetting as required.",
                "+     *",
                "+     * @param text The Unicode text to show.",
                "+     * ",
                "+     * @throws IOException If an io exception occurs.",
                "+     */",
                "+    protected void showTextInternal(String text) throws IOException",
                "+    {",
                "+        if (!inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Must call beginText() before showText()\");",
                "+        }",
                "+",
                "+        if (fontStack.isEmpty())",
                "+        {",
                "+            throw new IllegalStateException(\"Must call setFont() before showText()\");",
                "+        }",
                "+",
                "+        PDFont font = fontStack.peek();",
                "+",
                "+        // Unicode code points to keep when subsetting",
                "+        if (font.willBeSubset())",
                "+        {",
                "+            for (int offset = 0; offset < text.length(); )",
                "+            {",
                "+                int codePoint = text.codePointAt(offset);",
                "+                font.addToSubset(codePoint);",
                "+                offset += Character.charCount(codePoint);",
                "+            }",
                "+        }",
                "+",
                "+        COSWriter.writeString(font.encode(text), outputStream);",
                "+    }",
                "+",
                "+    /**",
                "+     * Sets the text leading.",
                "+     *",
                "+     * @param leading The leading in unscaled text units.",
                "+     * @throws IOException If there is an error writing to the stream.",
                "+     */",
                "+    public void setLeading(float leading) throws IOException",
                "+    {",
                "+        writeOperand(leading);",
                "+        writeOperator(\"TL\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Move to the start of the next line of text. Requires the leading (see {@link #setLeading})",
                "+     * to have been set.",
                "+     *",
                "+     * @throws IOException If there is an error writing to the stream.",
                "+     */",
                "+    public void newLine() throws IOException",
                "+    {",
                "+        if (!inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Must call beginText() before newLine()\");",
                "+        }",
                "+        writeOperator(\"T*\");",
                "+    }",
                "+",
                "+    /**",
                "+     * The Td operator.",
                "+     * Move to the start of the next line, offset from the start of the current line by (tx, ty).",
                "+     *",
                "+     * @param tx The x translation.",
                "+     * @param ty The y translation.",
                "+     * @throws IOException If there is an error writing to the stream.",
                "+     * @throws IllegalStateException If the method was not allowed to be called at this time.",
                "+     */",
                "+    public void newLineAtOffset(float tx, float ty) throws IOException",
                "+    {",
                "+        if (!inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: must call beginText() before newLineAtOffset()\");",
                "+        }",
                "+        writeOperand(tx);",
                "+        writeOperand(ty);",
                "+        writeOperator(\"Td\");",
                "+    }",
                "+",
                "+    /**",
                "+     * The Tm operator. Sets the text matrix to the given values.",
                "+     * A current text matrix will be replaced with the new one.",
                "+     *",
                "+     * @param matrix the transformation matrix",
                "+     * @throws IOException If there is an error writing to the stream.",
                "+     * @throws IllegalStateException If the method was not allowed to be called at this time.",
                "+     */",
                "+    public void setTextMatrix(Matrix matrix) throws IOException",
                "+    {",
                "+        if (!inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: must call beginText() before setTextMatrix\");",
                "+        }",
                "+        writeAffineTransform(matrix.createAffineTransform());",
                "+        writeOperator(\"Tm\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Draw an image at the x,y coordinates, with the default size of the image.",
                "+     *",
                "+     * @param image The image to draw.",
                "+     * @param x The x-coordinate to draw the image.",
                "+     * @param y The y-coordinate to draw the image.",
                "+     *",
                "+     * @throws IOException If there is an error writing to the stream.",
                "+     */",
                "+    public void drawImage(PDImageXObject image, float x, float y) throws IOException",
                "+    {",
                "+        drawImage(image, x, y, image.getWidth(), image.getHeight());",
                "+    }",
                "+",
                "+    /**",
                "+     * Draw an image at the x,y coordinates, with the given size.",
                "+     *",
                "+     * @param image The image to draw.",
                "+     * @param x The x-coordinate to draw the image.",
                "+     * @param y The y-coordinate to draw the image.",
                "+     * @param width The width to draw the image.",
                "+     * @param height The height to draw the image.",
                "+     *",
                "+     * @throws IOException If there is an error writing to the stream.",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void drawImage(PDImageXObject image, float x, float y, float width, float height) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: drawImage is not allowed within a text block.\");",
                "+        }",
                "+",
                "+        saveGraphicsState();",
                "+",
                "+        AffineTransform transform = new AffineTransform(width, 0, 0, height, x, y);",
                "+        transform(new Matrix(transform));",
                "+",
                "+        writeOperand(resources.add(image));",
                "+        writeOperator(\"Do\");",
                "+",
                "+        restoreGraphicsState();",
                "+    }",
                "+",
                "+    /**",
                "+     * Draw an image at the origin with the given transformation matrix.",
                "+     *",
                "+     * @param image The image to draw.",
                "+     * @param matrix The transformation matrix to apply to the image.",
                "+     *",
                "+     * @throws IOException If there is an error writing to the stream.",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void drawImage(PDImageXObject image, Matrix matrix) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: drawImage is not allowed within a text block.\");",
                "+        }",
                "+",
                "+        saveGraphicsState();",
                "+",
                "+        AffineTransform transform = matrix.createAffineTransform();",
                "+        transform(new Matrix(transform));",
                "+",
                "+        writeOperand(resources.add(image));",
                "+        writeOperator(\"Do\");",
                "+",
                "+        restoreGraphicsState();",
                "+    }",
                "+",
                "+    /**",
                "+     * Draw an inline image at the x,y coordinates, with the default size of the image.",
                "+     *",
                "+     * @param inlineImage The inline image to draw.",
                "+     * @param x The x-coordinate to draw the inline image.",
                "+     * @param y The y-coordinate to draw the inline image.",
                "+     *",
                "+     * @throws IOException If there is an error writing to the stream.",
                "+     */",
                "+    public void drawImage(PDInlineImage inlineImage, float x, float y) throws IOException",
                "+    {",
                "+        drawImage(inlineImage, x, y, inlineImage.getWidth(), inlineImage.getHeight());",
                "+    }",
                "+",
                "+    /**",
                "+     * Draw an inline image at the x,y coordinates and a certain width and height.",
                "+     *",
                "+     * @param inlineImage The inline image to draw.",
                "+     * @param x The x-coordinate to draw the inline image.",
                "+     * @param y The y-coordinate to draw the inline image.",
                "+     * @param width The width of the inline image to draw.",
                "+     * @param height The height of the inline image to draw.",
                "+     *",
                "+     * @throws IOException If there is an error writing to the stream.",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void drawImage(PDInlineImage inlineImage, float x, float y, float width, float height) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: drawImage is not allowed within a text block.\");",
                "+        }",
                "+",
                "+        saveGraphicsState();",
                "+        transform(new Matrix(width, 0, 0, height, x, y));",
                "+",
                "+        // create the image dictionary",
                "+        StringBuilder sb = new StringBuilder();",
                "+        sb.append(\"BI\");",
                "+",
                "+        sb.append(\"\\n /W \");",
                "+        sb.append(inlineImage.getWidth());",
                "+",
                "+        sb.append(\"\\n /H \");",
                "+        sb.append(inlineImage.getHeight());",
                "+",
                "+        sb.append(\"\\n /CS \");",
                "+        sb.append(\"/\");",
                "+        sb.append(inlineImage.getColorSpace().getName());",
                "+",
                "+        if (inlineImage.getDecode() != null && inlineImage.getDecode().size() > 0)",
                "+        {",
                "+            sb.append(\"\\n /D \");",
                "+            sb.append(\"[\");",
                "+            for (COSBase base : inlineImage.getDecode())",
                "+            {",
                "+                sb.append(((COSNumber) base).intValue());",
                "+                sb.append(\" \");",
                "+            }",
                "+            sb.append(\"]\");",
                "+        }",
                "+",
                "+        if (inlineImage.isStencil())",
                "+        {",
                "+            sb.append(\"\\n /IM true\");",
                "+        }",
                "+",
                "+        sb.append(\"\\n /BPC \");",
                "+        sb.append(inlineImage.getBitsPerComponent());",
                "+",
                "+        // image dictionary",
                "+        write(sb.toString());",
                "+        writeLine();",
                "+",
                "+        // binary data",
                "+        writeOperator(\"ID\");",
                "+        writeBytes(inlineImage.getData());",
                "+        writeLine();",
                "+        writeOperator(\"EI\");",
                "+",
                "+        restoreGraphicsState();",
                "+    }",
                "+",
                "+    /**",
                "+     * Draws the given Form XObject at the current location.",
                "+     *",
                "+     * @param form Form XObject",
                "+     * @throws IOException if the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void drawForm(PDFormXObject form) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: drawForm is not allowed within a text block.\");",
                "+        }",
                "+",
                "+        writeOperand(resources.add(form));",
                "+        writeOperator(\"Do\");",
                "+    }",
                "+",
                "+    /**",
                "+     * The cm operator. Concatenates the given matrix with the CTM.",
                "+     *",
                "+     * @param matrix the transformation matrix",
                "+     * @throws IOException If there is an error writing to the stream.",
                "+     */",
                "+    public void transform(Matrix matrix) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: Modifying the current transformation matrix is not allowed within text objects.\");",
                "+        }",
                "+",
                "+        writeAffineTransform(matrix.createAffineTransform());",
                "+        writeOperator(\"cm\");",
                "+    }",
                "+",
                "+    /**",
                "+     * q operator. Saves the current graphics state.",
                "+     * @throws IOException If an error occurs while writing to the stream.",
                "+     */",
                "+    public void saveGraphicsState() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: Saving the graphics state is not allowed within text objects.\");",
                "+        }",
                "+",
                "+        if (!fontStack.isEmpty())",
                "+        {",
                "+            fontStack.push(fontStack.peek());",
                "+        }",
                "+        if (!strokingColorSpaceStack.isEmpty())",
                "+        {",
                "+            strokingColorSpaceStack.push(strokingColorSpaceStack.peek());",
                "+        }",
                "+        if (!nonStrokingColorSpaceStack.isEmpty())",
                "+        {",
                "+            nonStrokingColorSpaceStack.push(nonStrokingColorSpaceStack.peek());",
                "+        }",
                "+        writeOperator(\"q\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Q operator. Restores the current graphics state.",
                "+     * @throws IOException If an error occurs while writing to the stream.",
                "+     */",
                "+    public void restoreGraphicsState() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: Restoring the graphics state is not allowed within text objects.\");",
                "+        }",
                "+",
                "+        if (!fontStack.isEmpty())",
                "+        {",
                "+            fontStack.pop();",
                "+        }",
                "+        if (!strokingColorSpaceStack.isEmpty())",
                "+        {",
                "+            strokingColorSpaceStack.pop();",
                "+        }",
                "+        if (!nonStrokingColorSpaceStack.isEmpty())",
                "+        {",
                "+            nonStrokingColorSpaceStack.pop();",
                "+        }",
                "+        writeOperator(\"Q\");",
                "+    }",
                "+",
                "+    protected COSName getName(PDColorSpace colorSpace)",
                "+    {",
                "+        if (colorSpace instanceof PDDeviceGray ||",
                "+            colorSpace instanceof PDDeviceRGB ||",
                "+            colorSpace instanceof PDDeviceCMYK)",
                "+        {",
                "+            return COSName.getPDFName(colorSpace.getName());",
                "+        }",
                "+        else",
                "+        {",
                "+            return resources.add(colorSpace);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Sets the stroking color and, if necessary, the stroking color space.",
                "+     *",
                "+     * @param color Color in a specific color space.",
                "+     * @throws IOException If an IO error occurs while writing to the stream.",
                "+     */",
                "+    public void setStrokingColor(PDColor color) throws IOException",
                "+    {",
                "+        if (strokingColorSpaceStack.isEmpty() ||",
                "+            strokingColorSpaceStack.peek() != color.getColorSpace())",
                "+        {",
                "+            writeOperand(getName(color.getColorSpace()));",
                "+            writeOperator(\"CS\");",
                "+            setStrokingColorSpaceStack(color.getColorSpace());",
                "+        }",
                "+",
                "+        for (float value : color.getComponents())",
                "+        {",
                "+            writeOperand(value);",
                "+        }",
                "+",
                "+        if (color.getColorSpace() instanceof PDPattern)",
                "+        {",
                "+            writeOperand(color.getPatternName());",
                "+        }",
                "+",
                "+        if (color.getColorSpace() instanceof PDPattern ||",
                "+            color.getColorSpace() instanceof PDSeparation ||",
                "+            color.getColorSpace() instanceof PDDeviceN ||",
                "+            color.getColorSpace() instanceof PDICCBased)",
                "+        {",
                "+            writeOperator(\"SCN\");",
                "+        }",
                "+        else",
                "+        {",
                "+            writeOperator(\"SC\");",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the stroking color using an AWT color. Conversion uses the default sRGB color space.",
                "+     *",
                "+     * @param color The color to set.",
                "+     * @throws IOException If an IO error occurs while writing to the stream.",
                "+     */",
                "+    public void setStrokingColor(Color color) throws IOException",
                "+    {",
                "+        float[] components = new float[] {",
                "+                color.getRed() / 255f, color.getGreen() / 255f, color.getBlue() / 255f };",
                "+        PDColor pdColor = new PDColor(components, PDDeviceRGB.INSTANCE);",
                "+        setStrokingColor(pdColor);",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the stroking color in the DeviceRGB color space. Range is 0..255.",
                "+     *",
                "+     * @param r The red value",
                "+     * @param g The green value.",
                "+     * @param b The blue value.",
                "+     * @throws IOException If an IO error occurs while writing to the stream.",
                "+     * @throws IllegalArgumentException If the parameters are invalid.",
                "+     */",
                "+    public void setStrokingColor(int r, int g, int b) throws IOException",
                "+    {",
                "+        if (isOutside255Interval(r) || isOutside255Interval(g) || isOutside255Interval(b))",
                "+        {",
                "+            throw new IllegalArgumentException(\"Parameters must be within 0..255, but are \"",
                "+                    + String.format(\"(%d,%d,%d)\", r, g, b));",
                "+        }",
                "+        writeOperand(r / 255f);",
                "+        writeOperand(g / 255f);",
                "+        writeOperand(b / 255f);",
                "+        writeOperator(\"RG\");",
                "+        setStrokingColorSpaceStack(PDDeviceRGB.INSTANCE);",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the stroking color in the DeviceCMYK color space. Range is 0..1",
                "+     *",
                "+     * @param c The cyan value.",
                "+     * @param m The magenta value.",
                "+     * @param y The yellow value.",
                "+     * @param k The black value.",
                "+     * @throws IOException If an IO error occurs while writing to the stream.",
                "+     * @throws IllegalArgumentException If the parameters are invalid.",
                "+     */",
                "+    public void setStrokingColor(float c, float m, float y, float k) throws IOException",
                "+    {",
                "+        if (isOutsideOneInterval(c) || isOutsideOneInterval(m) || isOutsideOneInterval(y) || isOutsideOneInterval(k))",
                "+        {",
                "+            throw new IllegalArgumentException(\"Parameters must be within 0..1, but are \"",
                "+                    + String.format(\"(%.2f,%.2f,%.2f,%.2f)\", c, m, y, k));",
                "+        }",
                "+        writeOperand(c);",
                "+        writeOperand(m);",
                "+        writeOperand(y);",
                "+        writeOperand(k);",
                "+        writeOperator(\"K\");",
                "+        setStrokingColorSpaceStack(PDDeviceCMYK.INSTANCE);",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the stroking color in the DeviceGray color space. Range is 0..1.",
                "+     *",
                "+     * @param g The gray value.",
                "+     * @throws IOException If an IO error occurs while writing to the stream.",
                "+     * @throws IllegalArgumentException If the parameter is invalid.",
                "+     */",
                "+    public void setStrokingColor(float g) throws IOException",
                "+    {",
                "+        if (isOutsideOneInterval(g))",
                "+        {",
                "+            throw new IllegalArgumentException(\"Parameter must be within 0..1, but is \" + g);",
                "+        }",
                "+        writeOperand(g);",
                "+        writeOperator(\"G\");",
                "+        setStrokingColorSpaceStack(PDDeviceGray.INSTANCE);",
                "+    }",
                "+",
                "+    /**",
                "+     * Sets the non-stroking color and, if necessary, the non-stroking color space.",
                "+     *",
                "+     * @param color Color in a specific color space.",
                "+     * @throws IOException If an IO error occurs while writing to the stream.",
                "+     */",
                "+    public void setNonStrokingColor(PDColor color) throws IOException",
                "+    {",
                "+        if (nonStrokingColorSpaceStack.isEmpty() ||",
                "+            nonStrokingColorSpaceStack.peek() != color.getColorSpace())",
                "+        {",
                "+            writeOperand(getName(color.getColorSpace()));",
                "+            writeOperator(\"cs\");",
                "+            setNonStrokingColorSpaceStack(color.getColorSpace());",
                "+        }",
                "+",
                "+        for (float value : color.getComponents())",
                "+        {",
                "+            writeOperand(value);",
                "+        }",
                "+",
                "+        if (color.getColorSpace() instanceof PDPattern)",
                "+        {",
                "+            writeOperand(color.getPatternName());",
                "+        }",
                "+",
                "+        if (color.getColorSpace() instanceof PDPattern ||",
                "+            color.getColorSpace() instanceof PDSeparation ||",
                "+            color.getColorSpace() instanceof PDDeviceN ||",
                "+            color.getColorSpace() instanceof PDICCBased)",
                "+        {",
                "+            writeOperator(\"scn\");",
                "+        }",
                "+        else",
                "+        {",
                "+            writeOperator(\"sc\");",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space.",
                "+     *",
                "+     * @param color The color to set.",
                "+     * @throws IOException If an IO error occurs while writing to the stream.",
                "+     */",
                "+    public void setNonStrokingColor(Color color) throws IOException",
                "+    {",
                "+        float[] components = new float[] {",
                "+                color.getRed() / 255f, color.getGreen() / 255f, color.getBlue() / 255f };",
                "+        PDColor pdColor = new PDColor(components, PDDeviceRGB.INSTANCE);",
                "+        setNonStrokingColor(pdColor);",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the non-stroking color in the DeviceRGB color space. Range is 0..255.",
                "+     *",
                "+     * @param r The red value.",
                "+     * @param g The green value.",
                "+     * @param b The blue value.",
                "+     * @throws IOException If an IO error occurs while writing to the stream.",
                "+     * @throws IllegalArgumentException If the parameters are invalid.",
                "+     */",
                "+    public void setNonStrokingColor(int r, int g, int b) throws IOException",
                "+    {",
                "+        if (isOutside255Interval(r) || isOutside255Interval(g) || isOutside255Interval(b))",
                "+        {",
                "+            throw new IllegalArgumentException(\"Parameters must be within 0..255, but are \"",
                "+                    + String.format(\"(%d,%d,%d)\", r, g, b));",
                "+        }",
                "+        writeOperand(r / 255f);",
                "+        writeOperand(g / 255f);",
                "+        writeOperand(b / 255f);",
                "+        writeOperator(\"rg\");",
                "+        setNonStrokingColorSpaceStack(PDDeviceRGB.INSTANCE);",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the non-stroking color in the DeviceCMYK color space. Range is 0..255.",
                "+     *",
                "+     * @param c The cyan value.",
                "+     * @param m The magenta value.",
                "+     * @param y The yellow value.",
                "+     * @param k The black value.",
                "+     * @throws IOException If an IO error occurs while writing to the stream.",
                "+     * @throws IllegalArgumentException If the parameters are invalid.",
                "+     */",
                "+    public void setNonStrokingColor(int c, int m, int y, int k) throws IOException",
                "+    {",
                "+        if (isOutside255Interval(c) || isOutside255Interval(m) || isOutside255Interval(y) || isOutside255Interval(k))",
                "+        {",
                "+            throw new IllegalArgumentException(\"Parameters must be within 0..255, but are \"",
                "+                    + String.format(\"(%d,%d,%d,%d)\", c, m, y, k));",
                "+        }",
                "+        setNonStrokingColor(c / 255f, m / 255f, y / 255f, k / 255f);",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the non-stroking color in the DeviceCMYK color space. Range is 0..1.",
                "+     *",
                "+     * @param c The cyan value.",
                "+     * @param m The magenta value.",
                "+     * @param y The yellow value.",
                "+     * @param k The black value.",
                "+     * @throws IOException If an IO error occurs while writing to the stream.",
                "+     */",
                "+    public void setNonStrokingColor(float c, float m, float y, float k) throws IOException",
                "+    {",
                "+        if (isOutsideOneInterval(c) || isOutsideOneInterval(m) || isOutsideOneInterval(y) || isOutsideOneInterval(k))",
                "+        {",
                "+            throw new IllegalArgumentException(\"Parameters must be within 0..1, but are \"",
                "+                    + String.format(\"(%.2f,%.2f,%.2f,%.2f)\", c, m, y, k));",
                "+        }",
                "+        writeOperand(c);",
                "+        writeOperand(m);",
                "+        writeOperand(y);",
                "+        writeOperand(k);",
                "+        writeOperator(\"k\");",
                "+        setNonStrokingColorSpaceStack(PDDeviceCMYK.INSTANCE);",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the non-stroking color in the DeviceGray color space. Range is 0..255.",
                "+     *",
                "+     * @param g The gray value.",
                "+     * @throws IOException If an IO error occurs while writing to the stream.",
                "+     * @throws IllegalArgumentException If the parameter is invalid.",
                "+     */",
                "+    public void setNonStrokingColor(int g) throws IOException",
                "+    {",
                "+        if (isOutside255Interval(g))",
                "+        {",
                "+            throw new IllegalArgumentException(\"Parameter must be within 0..255, but is \" + g);",
                "+        }",
                "+        setNonStrokingColor(g / 255f);",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the non-stroking color in the DeviceGray color space. Range is 0..1.",
                "+     *",
                "+     * @param g The gray value.",
                "+     * @throws IOException If an IO error occurs while writing to the stream.",
                "+     * @throws IllegalArgumentException If the parameter is invalid.",
                "+     */",
                "+    public void setNonStrokingColor(float g) throws IOException",
                "+    {",
                "+        if (isOutsideOneInterval(g))",
                "+        {",
                "+            throw new IllegalArgumentException(\"Parameter must be within 0..1, but is \" + g);",
                "+        }",
                "+        writeOperand(g);",
                "+        writeOperator(\"g\");",
                "+        setNonStrokingColorSpaceStack(PDDeviceGray.INSTANCE);",
                "+    }",
                "+",
                "+    /**",
                "+     * Add a rectangle to the current path.",
                "+     *",
                "+     * @param x The lower left x coordinate.",
                "+     * @param y The lower left y coordinate.",
                "+     * @param width The width of the rectangle.",
                "+     * @param height The height of the rectangle.",
                "+     * @throws IOException If the content stream could not be written.",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void addRect(float x, float y, float width, float height) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: addRect is not allowed within a text block.\");",
                "+        }",
                "+        writeOperand(x);",
                "+        writeOperand(y);",
                "+        writeOperand(width);",
                "+        writeOperand(height);",
                "+        writeOperator(\"re\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Append a cubic B\u00c3\u00a9zier curve to the current path. The curve extends from the current point to",
                "+     * the point (x3, y3), using (x1, y1) and (x2, y2) as the B\u00c3\u00a9zier control points.",
                "+     *",
                "+     * @param x1 x coordinate of the point 1",
                "+     * @param y1 y coordinate of the point 1",
                "+     * @param x2 x coordinate of the point 2",
                "+     * @param y2 y coordinate of the point 2",
                "+     * @param x3 x coordinate of the point 3",
                "+     * @param y3 y coordinate of the point 3",
                "+     * @throws IOException If the content stream could not be written.",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void curveTo(float x1, float y1, float x2, float y2, float x3, float y3) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: curveTo is not allowed within a text block.\");",
                "+        }",
                "+        writeOperand(x1);",
                "+        writeOperand(y1);",
                "+        writeOperand(x2);",
                "+        writeOperand(y2);",
                "+        writeOperand(x3);",
                "+        writeOperand(y3);",
                "+        writeOperator(\"c\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Append a cubic B\u00c3\u00a9zier curve to the current path. The curve extends from the current point to",
                "+     * the point (x3, y3), using the current point and (x2, y2) as the B\u00c3\u00a9zier control points.",
                "+     *",
                "+     * @param x2 x coordinate of the point 2",
                "+     * @param y2 y coordinate of the point 2",
                "+     * @param x3 x coordinate of the point 3",
                "+     * @param y3 y coordinate of the point 3",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     * @throws IOException If the content stream could not be written.",
                "+     */",
                "+    public void curveTo2(float x2, float y2, float x3, float y3) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: curveTo2 is not allowed within a text block.\");",
                "+        }",
                "+        writeOperand(x2);",
                "+        writeOperand(y2);",
                "+        writeOperand(x3);",
                "+        writeOperand(y3);",
                "+        writeOperator(\"v\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Append a cubic B\u00c3\u00a9zier curve to the current path. The curve extends from the current point to",
                "+     * the point (x3, y3), using (x1, y1) and (x3, y3) as the B\u00c3\u00a9zier control points.",
                "+     *",
                "+     * @param x1 x coordinate of the point 1",
                "+     * @param y1 y coordinate of the point 1",
                "+     * @param x3 x coordinate of the point 3",
                "+     * @param y3 y coordinate of the point 3",
                "+     * @throws IOException If the content stream could not be written.",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void curveTo1(float x1, float y1, float x3, float y3) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: curveTo1 is not allowed within a text block.\");",
                "+        }",
                "+        writeOperand(x1);",
                "+        writeOperand(y1);",
                "+        writeOperand(x3);",
                "+        writeOperand(y3);",
                "+        writeOperator(\"y\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Move the current position to the given coordinates.",
                "+     *",
                "+     * @param x The x coordinate.",
                "+     * @param y The y coordinate.",
                "+     * @throws IOException If the content stream could not be written.",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void moveTo(float x, float y) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: moveTo is not allowed within a text block.\");",
                "+        }",
                "+        writeOperand(x);",
                "+        writeOperand(y);",
                "+        writeOperator(\"m\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Draw a line from the current position to the given coordinates.",
                "+     *",
                "+     * @param x The x coordinate.",
                "+     * @param y The y coordinate.",
                "+     * @throws IOException If the content stream could not be written.",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void lineTo(float x, float y) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: lineTo is not allowed within a text block.\");",
                "+        }",
                "+        writeOperand(x);",
                "+        writeOperand(y);",
                "+        writeOperator(\"l\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Stroke the path.",
                "+     * ",
                "+     * @throws IOException If the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void stroke() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: stroke is not allowed within a text block.\");",
                "+        }",
                "+        writeOperator(\"S\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Close and stroke the path.",
                "+     * ",
                "+     * @throws IOException If the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void closeAndStroke() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: closeAndStroke is not allowed within a text block.\");",
                "+        }",
                "+        writeOperator(\"s\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Fills the path using the nonzero winding number rule.",
                "+     *",
                "+     * @throws IOException If the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void fill() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: fill is not allowed within a text block.\");",
                "+        }",
                "+        writeOperator(\"f\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Fills the path using the even-odd winding rule.",
                "+     *",
                "+     * @throws IOException If the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void fillEvenOdd() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: fillEvenOdd is not allowed within a text block.\");",
                "+        }",
                "+        writeOperator(\"f*\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Fill and then stroke the path, using the nonzero winding number rule to determine the region",
                "+     * to fill. This shall produce the same result as constructing two identical path objects,",
                "+     * painting the first with {@link #fill() } and the second with {@link #stroke() }.",
                "+     *",
                "+     * @throws IOException If the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void fillAndStroke() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: fillAndStroke is not allowed within a text block.\");",
                "+        }",
                "+        writeOperator(\"B\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Fill and then stroke the path, using the even-odd rule to determine the region to",
                "+     * fill. This shall produce the same result as constructing two identical path objects, painting",
                "+     * the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }.",
                "+     *",
                "+     * @throws IOException If the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void fillAndStrokeEvenOdd() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: fillAndStrokeEvenOdd is not allowed within a text block.\");",
                "+        }",
                "+        writeOperator(\"B*\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Close, fill, and then stroke the path, using the nonzero winding number rule to determine the",
                "+     * region to fill. This shall have the same effect as the sequence {@link #closePath() }",
                "+     * and then {@link #fillAndStroke() }.",
                "+     *",
                "+     * @throws IOException If the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void closeAndFillAndStroke() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: closeAndFillAndStroke is not allowed within a text block.\");",
                "+        }",
                "+        writeOperator(\"b\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Close, fill, and then stroke the path, using the even-odd rule to determine the region to",
                "+     * fill. This shall have the same effect as the sequence {@link #closePath() }",
                "+     * and then {@link #fillAndStrokeEvenOdd() }.",
                "+     *",
                "+     * @throws IOException If the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void closeAndFillAndStrokeEvenOdd() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: closeAndFillAndStrokeEvenOdd is not allowed within a text block.\");",
                "+        }",
                "+        writeOperator(\"b*\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Fills the clipping area with the given shading.",
                "+     *",
                "+     * @param shading Shading resource",
                "+     * @throws IOException If the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void shadingFill(PDShading shading) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: shadingFill is not allowed within a text block.\");",
                "+        }",
                "+",
                "+        writeOperand(resources.add(shading));",
                "+        writeOperator(\"sh\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Closes the current subpath.",
                "+     *",
                "+     * @throws IOException If the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void closePath() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: closePath is not allowed within a text block.\");",
                "+        }",
                "+        writeOperator(\"h\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Intersects the current clipping path with the current path, using the nonzero rule.",
                "+     *",
                "+     * @throws IOException If the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void clip() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: clip is not allowed within a text block.\");",
                "+        }",
                "+        writeOperator(\"W\");",
                "+        ",
                "+        // end path without filling or stroking",
                "+        writeOperator(\"n\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Intersects the current clipping path with the current path, using the even-odd rule.",
                "+     *",
                "+     * @throws IOException If the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void clipEvenOdd() throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: clipEvenOdd is not allowed within a text block.\");",
                "+        }",
                "+        writeOperator(\"W*\");",
                "+        ",
                "+        // end path without filling or stroking",
                "+        writeOperator(\"n\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Set line width to the given value.",
                "+     *",
                "+     * @param lineWidth The width which is used for drawing.",
                "+     * @throws IOException If the content stream could not be written",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void setLineWidth(float lineWidth) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: setLineWidth is not allowed within a text block.\");",
                "+        }",
                "+        writeOperand(lineWidth);",
                "+        writeOperator(\"w\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the line join style.",
                "+     *",
                "+     * @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join.",
                "+     * @throws IOException If the content stream could not be written.",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     * @throws IllegalArgumentException If the parameter is not a valid line join style.",
                "+     */",
                "+    public void setLineJoinStyle(int lineJoinStyle) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: setLineJoinStyle is not allowed within a text block.\");",
                "+        }",
                "+        if (lineJoinStyle >= 0 && lineJoinStyle <= 2)",
                "+        {",
                "+            writeOperand(lineJoinStyle);",
                "+            writeOperator(\"j\");",
                "+        }",
                "+        else",
                "+        {",
                "+            throw new IllegalArgumentException(\"Error: unknown value for line join style\");",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the line cap style.",
                "+     *",
                "+     * @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap.",
                "+     * @throws IOException If the content stream could not be written.",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     * @throws IllegalArgumentException If the parameter is not a valid line cap style.",
                "+     */",
                "+    public void setLineCapStyle(int lineCapStyle) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: setLineCapStyle is not allowed within a text block.\");",
                "+        }",
                "+        if (lineCapStyle >= 0 && lineCapStyle <= 2)",
                "+        {",
                "+            writeOperand(lineCapStyle);",
                "+            writeOperator(\"J\");",
                "+        }",
                "+        else",
                "+        {",
                "+            throw new IllegalArgumentException(\"Error: unknown value for line cap style\");",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the line dash pattern.",
                "+     *",
                "+     * @param pattern The pattern array",
                "+     * @param phase The phase of the pattern",
                "+     * @throws IOException If the content stream could not be written.",
                "+     * @throws IllegalStateException If the method was called within a text block.",
                "+     */",
                "+    public void setLineDashPattern(float[] pattern, float phase) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: setLineDashPattern is not allowed within a text block.\");",
                "+        }",
                "+        write(\"[\");",
                "+        for (float value : pattern)",
                "+        {",
                "+            writeOperand(value);",
                "+        }",
                "+        write(\"] \");",
                "+        writeOperand(phase);",
                "+        writeOperator(\"d\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the miter limit.",
                "+     *",
                "+     * @param miterLimit the new miter limit.",
                "+     * @throws IOException If the content stream could not be written.",
                "+     */",
                "+    public void setMiterLimit(float miterLimit) throws IOException",
                "+    {",
                "+        if (inTextMode)",
                "+        {",
                "+            throw new IllegalStateException(\"Error: setMiterLimit is not allowed within a text block.\");",
                "+        }",
                "+        if (miterLimit <= 0.0)",
                "+        {",
                "+            throw new IllegalArgumentException(\"A miter limit <= 0 is invalid and will not render in Acrobat Reader\");",
                "+        }",
                "+        writeOperand(miterLimit);",
                "+        writeOperator(\"M\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Begin a marked content sequence.",
                "+     *",
                "+     * @param tag the tag",
                "+     * @throws IOException If the content stream could not be written",
                "+     */",
                "+    public void beginMarkedContent(COSName tag) throws IOException",
                "+    {",
                "+        writeOperand(tag);",
                "+        writeOperator(\"BMC\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Begin a marked content sequence with a reference to an entry in the page resources'",
                "+     * Properties dictionary.",
                "+     *",
                "+     * @param tag the tag",
                "+     * @param propertyList property list",
                "+     * @throws IOException If the content stream could not be written",
                "+     */",
                "+    public void beginMarkedContent(COSName tag, PDPropertyList propertyList) throws IOException",
                "+    {",
                "+        writeOperand(tag);",
                "+        writeOperand(resources.add(propertyList));",
                "+        writeOperator(\"BDC\");",
                "+    }",
                "+",
                "+    /**",
                "+     * End a marked content sequence.",
                "+     *",
                "+     * @throws IOException If the content stream could not be written",
                "+     */",
                "+    public void endMarkedContent() throws IOException",
                "+    {",
                "+        writeOperator(\"EMC\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Set an extended graphics state.",
                "+     * ",
                "+     * @param state The extended graphics state.",
                "+     * @throws IOException If the content stream could not be written.",
                "+     */",
                "+    public void setGraphicsStateParameters(PDExtendedGraphicsState state) throws IOException",
                "+    {",
                "+        writeOperand(resources.add(state));",
                "+        writeOperator(\"gs\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Write a comment line.",
                "+     *",
                "+     * @param comment",
                "+     * @throws IOException If the content stream could not be written.",
                "+     * @throws IllegalArgumentException If the comment contains a newline. This is not allowed,",
                "+     * because the next line could be ordinary PDF content.",
                "+     */",
                "+    public void addComment(String comment) throws IOException",
                "+    {",
                "+        if (comment.indexOf('\\n') >= 0 || comment.indexOf('\\r') >= 0)",
                "+        {",
                "+            throw new IllegalArgumentException(\"comment should not include a newline\");",
                "+        }",
                "+        outputStream.write('%');",
                "+        outputStream.write(comment.getBytes(Charsets.US_ASCII));",
                "+        outputStream.write('\\n');",
                "+    }",
                "+",
                "+    /**",
                "+     * Writes a real number to the content stream.",
                "+     * @param real",
                "+     * @throws java.io.IOException",
                "+     */",
                "+    protected void writeOperand(float real) throws IOException",
                "+    {",
                "+        int byteCount = NumberFormatUtil.formatFloatFast(real, formatDecimal.getMaximumFractionDigits(), formatBuffer);",
                "+",
                "+        if (byteCount == -1)",
                "+        {",
                "+            //Fast formatting failed",
                "+            write(formatDecimal.format(real));",
                "+        }",
                "+        else",
                "+        {",
                "+            outputStream.write(formatBuffer, 0, byteCount);",
                "+        }",
                "+        outputStream.write(' ');",
                "+    }",
                "+",
                "+    /**",
                "+     * Writes an integer number to the content stream.",
                "+     * @param integer",
                "+     * @throws java.io.IOException",
                "+     */",
                "+    protected void writeOperand(int integer) throws IOException",
                "+    {",
                "+        write(formatDecimal.format(integer));",
                "+        outputStream.write(' ');",
                "+    }",
                "+",
                "+    /**",
                "+     * Writes a COSName to the content stream.",
                "+     * @param name",
                "+     * @throws java.io.IOException",
                "+     */",
                "+    protected void writeOperand(COSName name) throws IOException",
                "+    {",
                "+        name.writePDF(outputStream);",
                "+        outputStream.write(' ');",
                "+    }",
                "+",
                "+    /**",
                "+     * Writes a string to the content stream as ASCII.",
                "+     * @param text",
                "+     * @throws java.io.IOException",
                "+     */",
                "+    protected void writeOperator(String text) throws IOException",
                "+    {",
                "+        outputStream.write(text.getBytes(Charsets.US_ASCII));",
                "+        outputStream.write('\\n');",
                "+    }",
                "+",
                "+    /**",
                "+     * Writes a string to the content stream as ASCII.",
                "+     * @param text",
                "+     * @throws java.io.IOException",
                "+     */",
                "+    protected void write(String text) throws IOException",
                "+    {",
                "+        outputStream.write(text.getBytes(Charsets.US_ASCII));",
                "+    }",
                "+",
                "+    /**",
                "+     * Writes a byte[] to the content stream.",
                "+     * @param data",
                "+     * @throws java.io.IOException",
                "+     */",
                "+    protected void write(byte[] data) throws IOException",
                "+    {",
                "+        outputStream.write(data);",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Writes a newline to the content stream as ASCII.",
                "+     * @throws java.io.IOException",
                "+     */",
                "+    protected void writeLine() throws IOException",
                "+    {",
                "+        outputStream.write('\\n');",
                "+    }",
                "+",
                "+    /**",
                "+     * Writes binary data to the content stream.",
                "+     * @param data",
                "+     * @throws java.io.IOException",
                "+     */",
                "+    protected void writeBytes(byte[] data) throws IOException",
                "+    {",
                "+        outputStream.write(data);",
                "+    }",
                "+",
                "+    /**",
                "+     * Writes an AffineTransform to the content stream as an array.",
                "+     */",
                "+    private void writeAffineTransform(AffineTransform transform) throws IOException",
                "+    {",
                "+        double[] values = new double[6];",
                "+        transform.getMatrix(values);",
                "+        for (double v : values)",
                "+        {",
                "+            writeOperand((float) v);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Close the content stream.  This must be called when you are done with this object.",
                "+     *",
                "+     * @throws IOException If the underlying stream has a problem being written to.",
                "+     */",
                "+    @Override",
                "+    public void close() throws IOException",
                "+    {",
                "+        if (outputStream != null)",
                "+        {",
                "+            outputStream.close();",
                "+            outputStream = null;",
                "+        }",
                "+    }",
                "+",
                "+    protected boolean isOutside255Interval(int val)",
                "+    {",
                "+        return val < 0 || val > 255;",
                "+    }",
                "+",
                "+    private boolean isOutsideOneInterval(double val)",
                "+    {",
                "+        return val < 0 || val > 1;",
                "+    }",
                "+",
                "+    protected void setStrokingColorSpaceStack(PDColorSpace colorSpace)",
                "+    {",
                "+        if (strokingColorSpaceStack.isEmpty())",
                "+        {",
                "+            strokingColorSpaceStack.add(colorSpace);",
                "+        }",
                "+        else",
                "+        {",
                "+            strokingColorSpaceStack.setElementAt(colorSpace, strokingColorSpaceStack.size() - 1);",
                "+        }",
                "+    }",
                "+",
                "+    protected void setNonStrokingColorSpaceStack(PDColorSpace colorSpace)",
                "+    {",
                "+        if (nonStrokingColorSpaceStack.isEmpty())",
                "+        {",
                "+            nonStrokingColorSpaceStack.add(colorSpace);",
                "+        }",
                "+        else",
                "+        {",
                "+            nonStrokingColorSpaceStack.setElementAt(colorSpace, nonStrokingColorSpaceStack.size() - 1);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the character spacing. The value shall be added to the horizontal or vertical component",
                "+     * of the glyph's displacement, depending on the writing mode.",
                "+     *",
                "+     * @param spacing character spacing",
                "+     * @throws IOException If the content stream could not be written.",
                "+     */",
                "+    public void setCharacterSpacing(float spacing) throws IOException",
                "+    {",
                "+        writeOperand(spacing);",
                "+        writeOperator(\"Tc\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the word spacing. The value shall be added to the horizontal or vertical component of the",
                "+     * ASCII SPACE character, depending on the writing mode.",
                "+     * <p>",
                "+     * This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF",
                "+     * specification tells why: \"Word spacing shall be applied to every occurrence of the",
                "+     * single-byte character code 32 in a string when using a simple font or a composite font that",
                "+     * defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32",
                "+     * in multiple-byte codes.\"",
                "+     *",
                "+     * @param spacing word spacing",
                "+     * @throws IOException If the content stream could not be written.",
                "+     */",
                "+    public void setWordSpacing(float spacing) throws IOException",
                "+    {",
                "+        writeOperand(spacing);",
                "+        writeOperator(\"Tw\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the horizontal scaling to scale / 100.",
                "+     *",
                "+     * @param scale number specifying the percentage of the normal width. Default value: 100 (normal",
                "+     * width).",
                "+     * @throws IOException If the content stream could not be written.",
                "+     */",
                "+    public void setHorizontalScaling(float scale) throws IOException",
                "+    {",
                "+        writeOperand(scale);",
                "+        writeOperator(\"Tz\");",
                "+    }",
                "+}",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "new file mode 100644",
                "index 000000000..a67e56735",
                "--- /dev/null",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "@@ -0,0 +1,245 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.pdfbox.pdmodel;",
                "+",
                "+import java.io.Closeable;",
                "+import java.io.IOException;",
                "+import java.io.OutputStream;",
                "+",
                "+import org.apache.pdfbox.cos.COSName;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary;",
                "+",
                "+/**",
                "+ * Provides the ability to write to a page content stream.",
                "+ *",
                "+ * @author Ben Litchfield",
                "+ */",
                "+public final class PDAppearanceContentStream extends PDAbstractContentStream implements Closeable",
                "+{",
                "+    /**",
                "+     * Create a new appearance stream.",
                "+     *",
                "+     * @param appearance",
                "+     *            The appearance stream to write to.",
                "+     * @throws IOException",
                "+     *             If there is an error writing to the page contents.",
                "+     */",
                "+    public PDAppearanceContentStream(PDAppearanceStream appearance) throws IOException",
                "+    {",
                "+        this(appearance, appearance.getStream().createOutputStream());",
                "+    }",
                "+",
                "+    /**",
                "+     * Create a new appearance stream. Note that this is not actually a \"page\"",
                "+     * content stream.",
                "+     *",
                "+     * @param appearance",
                "+     *            The appearance stream to add to.",
                "+     * @param outputStream",
                "+     *            The appearances output stream to write to.",
                "+     */",
                "+    public PDAppearanceContentStream(PDAppearanceStream appearance, OutputStream outputStream)",
                "+    {",
                "+        super(outputStream);",
                "+        setResources(appearance.getResources());",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the stroking color.",
                "+     * ",
                "+     * <p>",
                "+     * The command is only emitted if the color is not null and the number of",
                "+     * components is gt 0.",
                "+     * ",
                "+     * @see PDAbstractContentStream#setStrokingColor(PDColor)",
                "+     */",
                "+    public boolean setStrokingColorOnDemand(PDColor color) throws IOException",
                "+    {",
                "+        if (color != null)",
                "+        {",
                "+            float[] components = color.getComponents();",
                "+            if (components.length > 0)",
                "+            {",
                "+                setStrokingColor(components);",
                "+                return true;",
                "+            }",
                "+        }",
                "+        return false;",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the stroking color.",
                "+     * ",
                "+     * @see PDAbstractContentStream#setStrokingColor(java.awt.Color)",
                "+     * @param components",
                "+     *            the color components dependent on the color space being used.",
                "+     * @throws IOException",
                "+     *             if an IO error occurs while writing to the stream.",
                "+     */",
                "+    public void setStrokingColor(float[] components) throws IOException",
                "+    {",
                "+        for (float value : components)",
                "+        {",
                "+            writeOperand(value);",
                "+        }",
                "+",
                "+        int numComponents = components.length;",
                "+        switch (numComponents)",
                "+        {",
                "+        case 1:",
                "+            writeOperator(\"G\");",
                "+            break;",
                "+        case 3:",
                "+            writeOperator(\"RG\");",
                "+            break;",
                "+        case 4:",
                "+            writeOperator(\"K\");",
                "+            break;",
                "+        default:",
                "+            break;",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the non stroking color.",
                "+     * ",
                "+     * <p>",
                "+     * The command is only emitted if the color is not null and the number of",
                "+     * components is gt 0.",
                "+     * ",
                "+     * @see PDAbstractContentStream#setNonStrokingColor(PDColor)",
                "+     */",
                "+    public boolean setNonStrokingColorOnDemand(PDColor color) throws IOException",
                "+    {",
                "+        if (color != null)",
                "+        {",
                "+            float[] components = color.getComponents();",
                "+            if (components.length > 0)",
                "+            {",
                "+                setNonStrokingColor(components);",
                "+                return true;",
                "+            }",
                "+        }",
                "+        return false;",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the non stroking color.",
                "+     * ",
                "+     * @see PDAbstractContentStream#setNonStrokingColor(java.awt.Color)",
                "+     * @param components",
                "+     *            the color components dependent on the color space being used.",
                "+     * @throws IOException",
                "+     *             if an IO error occurs while writing to the stream.",
                "+     */",
                "+    public void setNonStrokingColor(float[] components) throws IOException",
                "+    {",
                "+        for (float value : components)",
                "+        {",
                "+            writeOperand(value);",
                "+        }",
                "+",
                "+        int numComponents = components.length;",
                "+        switch (numComponents)",
                "+        {",
                "+        case 1:",
                "+            writeOperator(\"g\");",
                "+            break;",
                "+        case 3:",
                "+            writeOperator(\"rg\");",
                "+            break;",
                "+        case 4:",
                "+            writeOperator(\"k\");",
                "+            break;",
                "+        default:",
                "+            break;",
                "+        }",
                "+    }",
                "+",
                "+    public void setBorderLine(float lineWidth, PDBorderStyleDictionary bs) throws IOException",
                "+    {",
                "+        // Can't use PDBorderStyleDictionary.getDashStyle() as",
                "+        // this will return a default dash style if non is existing",
                "+        if (bs != null && bs.getCOSObject().containsKey(COSName.D) && ",
                "+                          bs.getStyle().equals(PDBorderStyleDictionary.STYLE_DASHED))",
                "+        {",
                "+            setLineDashPattern(bs.getDashStyle().getDashArray(), 0);",
                "+        }",
                "+        setLineWidthOnDemand(lineWidth);",
                "+    }",
                "+",
                "+    /**",
                "+     * Sets the line width. The command is only emitted if the lineWidth is",
                "+     * different to 1.",
                "+     * ",
                "+     * @param lineWidth the line width of the path.",
                "+     * @throws java.io.IOException",
                "+     * @see PDAbstractContentStream#setLineWidth(float)",
                "+     */",
                "+    public void setLineWidthOnDemand(float lineWidth) throws IOException",
                "+    {",
                "+        // Acrobat doesn't write a line width command",
                "+        // for a line width of 1 as this is default.",
                "+        // Will do the same.",
                "+        if (!(Math.abs(lineWidth - 1) < 1e-6))",
                "+        {",
                "+            setLineWidth(lineWidth);",
                "+        }",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Draw a shape.",
                "+     *",
                "+     * <p>",
                "+     * Dependent on the lineWidth and whether or not there is a background to be generated there are",
                "+     * different commands to be used for draw a shape.",
                "+     *",
                "+     * @param lineWidth the line width of the path.",
                "+     * @param hasStroke shall there be a stroking color.",
                "+     * @param hasFill shall there be a fill color.",
                "+     * @throws IOException if an IO error occurs while writing to the stream.",
                "+     */",
                "+    public void drawShape(float lineWidth, boolean hasStroke, boolean hasFill) throws IOException",
                "+    {",
                "+        // initial setting if stroking shall be done",
                "+        boolean resolvedHasStroke = hasStroke;",
                "+",
                "+        // no stroking for very small lines",
                "+        if (lineWidth < 1e-6)",
                "+        {",
                "+            resolvedHasStroke = false;",
                "+        }",
                "+        if (hasFill && resolvedHasStroke)",
                "+        {",
                "+            fillAndStroke();",
                "+        }",
                "+        else if (resolvedHasStroke)",
                "+        {",
                "+            stroke();",
                "+        }",
                "+        else if (hasFill)",
                "+        {",
                "+            fill();",
                "+        }",
                "+        else",
                "+        {",
                "+            writeOperator(\"n\");",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java",
                "index 041e583c3..c2516de8a 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java",
                "@@ -18,3 +18,3 @@ package org.apache.pdfbox.pdmodel;",
                " import java.io.IOException;",
                "-import org.apache.pdfbox.contentstream.PDAbstractContentStream;",
                "+",
                " import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;",
                "@@ -25,3 +25,3 @@ import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;",
                "  */",
                "-public class PDFormContentStream extends PDAbstractContentStream",
                "+public final class PDFormContentStream extends PDAbstractContentStream",
                " {",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "index bc0743854..6d4cc2bb4 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "@@ -40,3 +40,2 @@ import org.apache.fontbox.ttf.gsub.GsubWorkerFactory;",
                " import org.apache.fontbox.ttf.model.GsubData;",
                "-import org.apache.pdfbox.contentstream.PDAbstractContentStream;",
                " import org.apache.pdfbox.cos.COSArray;",
                "@@ -70,3 +69,2 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                " {",
                "-    ",
                "     /**",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java",
                "index eb91689b2..bce28f614 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java",
                "@@ -18,3 +18,3 @@ package org.apache.pdfbox.pdmodel;",
                " import java.io.IOException;",
                "-import org.apache.pdfbox.contentstream.PDAbstractContentStream;",
                "+",
                " import org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern;",
                "@@ -25,3 +25,3 @@ import org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern;",
                "  */",
                "-public class PDPatternContentStream extends PDAbstractContentStream",
                "+public final class PDPatternContentStream extends PDAbstractContentStream",
                " {",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java",
                "index 70dd019d2..7eeaf7790 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java",
                "@@ -26,3 +26,3 @@ import java.util.ArrayList;",
                " import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "index c5be7ec98..237894792 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "@@ -29,3 +29,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "index 3422cef96..37ed620c5 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "@@ -23,3 +23,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "index e6258467f..44597db82 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "@@ -28,3 +28,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCircle;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java",
                "index 59aa9f0c9..9dbe3e54d 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java",
                "@@ -33,3 +33,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationHighlight;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java",
                "index 55e9e3b11..eaf4bbb81 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java",
                "@@ -24,3 +24,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationInk;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "index 8ba70da90..cef278c71 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "@@ -23,3 +23,3 @@ import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "-import org.apache.pdfbox.contentstream.PDAbstractContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAbstractContentStream;",
                " import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                "@@ -29,3 +29,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                " import org.apache.pdfbox.util.Matrix;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java",
                "index aca2bc378..95d6bcfeb 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java",
                "@@ -31,3 +31,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "index c7ad9846e..a2823dc5c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "@@ -29,3 +29,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "index 18c59cd6a..9512c613f 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "@@ -29,3 +29,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "index 31c295432..26dc670b5 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "@@ -30,3 +30,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquare;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "index 6cf33d043..e94159df5 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "@@ -25,3 +25,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationStrikeout;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java",
                "index 2da253417..840c1d538 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java",
                "@@ -25,3 +25,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationUnderline;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
                "index b8dcb585e..03218edb2 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
                "@@ -39,3 +39,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceCharacteristicsDictionary;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDDefaultAppearanceString.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDDefaultAppearanceString.java",
                "index 0ad7db323..d3e6e44e6 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDDefaultAppearanceString.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDDefaultAppearanceString.java",
                "@@ -38,3 +38,3 @@ import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray;",
                " import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainTextFormatter.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainTextFormatter.java",
                "index aeca90d60..0fa2d5ee6 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainTextFormatter.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainTextFormatter.java",
                "@@ -21,3 +21,3 @@ import java.util.List;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                " import org.apache.pdfbox.pdmodel.interactive.form.PlainText.Line;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDDefaultAppearanceString.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainTextFormatter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4068": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4068",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2b4f2bd5014d4e064efc7da267aae4717fd2e19a",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528223680,
            "hunks": 1,
            "message": "PDFBOX-4237: fix javadoc git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832960 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "index 7dc5b144e..91edf6246 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "@@ -55,3 +55,3 @@ public class PDFStreamParser extends BaseParser",
                "      *",
                "-     * @param contentStream The content stream to parse.",
                "+     * @param stream The content stream to parse.",
                "      * @throws IOException If there is an error initializing the stream."
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4237": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: parse",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4237",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "72ec17d71c526a8c8053a4262ecf6c56249ceaab",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523433953,
            "hunks": 6,
            "message": "PDFBOX-3809: support flatten for specific fields only; current limitation is that the widget annotation must have a page reference git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1828871 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "index 9735402c4..e715bb9a4 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "@@ -273,2 +273,4 @@ public final class PDAcroForm implements COSObjectable",
                "+        Map<COSDictionary,Map<COSDictionary,PDAnnotationWidget>> pagesWidgetsMap = buildPagesWidgetsMap(fields);",
                "+        ",
                "         // preserve all non widget annotations",
                "@@ -276,2 +278,3 @@ public final class PDAcroForm implements COSObjectable",
                "         {",
                "+            Map<COSDictionary,PDAnnotationWidget> widgetsForPageMap = pagesWidgetsMap.get(page.getCOSObject());",
                "             isContentStreamWrapped = false;",
                "@@ -279,6 +282,6 @@ public final class PDAcroForm implements COSObjectable",
                "             List<PDAnnotation> annotations = new ArrayList<>();",
                "-            ",
                "+                       ",
                "             for (PDAnnotation annotation: page.getAnnotations())",
                "-            {",
                "-                if (!(annotation instanceof PDAnnotationWidget))",
                "+            {   ",
                "+                if (widgetsForPageMap != null && widgetsForPageMap.get(annotation.getCOSObject()) == null)",
                "                 {",
                "@@ -352,3 +355,3 @@ public final class PDAcroForm implements COSObjectable",
                "         // remove the fields",
                "-        setFields(Collections.<PDField>emptyList());",
                "+        removeFields(fields);",
                "@@ -767,2 +770,69 @@ public final class PDAcroForm implements COSObjectable",
                "+    private Map<COSDictionary,Map<COSDictionary,PDAnnotationWidget>> buildPagesWidgetsMap(List<PDField> fields)",
                "+    {",
                "+        Map<COSDictionary,Map<COSDictionary,PDAnnotationWidget>> pagesAnnotationsMap = new HashMap<>();",
                "+        boolean hasMissingPageRef = false;",
                "+        ",
                "+        for (PDField field : fields)",
                "+        {",
                "+            List<PDAnnotationWidget> widgets = field.getWidgets();",
                "+            for (PDAnnotationWidget widget : widgets)",
                "+            {",
                "+                PDPage pageForWidget = widget.getPage();",
                "+                if (pageForWidget != null)",
                "+                {",
                "+                    if (pagesAnnotationsMap.get(pageForWidget.getCOSObject()) == null)",
                "+                    {",
                "+                        Map<COSDictionary,PDAnnotationWidget> widgetsForPage = new HashMap<>();",
                "+                        widgetsForPage.put(widget.getCOSObject(), widget);",
                "+                        pagesAnnotationsMap.put(pageForWidget.getCOSObject(), widgetsForPage);",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        Map<COSDictionary,PDAnnotationWidget> widgetsForPage = pagesAnnotationsMap.get(pageForWidget.getCOSObject());",
                "+                        widgetsForPage.put(widget.getCOSObject(), widget);",
                "+                    }",
                "+                }",
                "+                else",
                "+                {",
                "+                    hasMissingPageRef = true;",
                "+                }",
                "+            }",
                "+        }",
                "+        ",
                "+        // TODO: if there is a widget with a missing page reference ",
                "+        // we'd need to build the map reverse i.e. form the annotations to the ",
                "+        // widget. But this will be much slower so will be omitted for now.",
                "+        LOG.warn(\"There has been a widget with a missing page reference. Please report to the PDFBox project\");",
                "+        ",
                "+        return pagesAnnotationsMap;",
                "+    }",
                "+    ",
                "+    private void removeFields(List<PDField> fields)",
                "+    {",
                "+        for (PDField field : fields) {",
                "+            if (field.getParent() == null)",
                "+            {",
                "+                COSArray cosFields = (COSArray) dictionary.getDictionaryObject(COSName.FIELDS);",
                "+                for (int i=0; i<cosFields.size(); i++)",
                "+                {",
                "+                    COSDictionary element = (COSDictionary) cosFields.getObject(i);",
                "+                    if (field.getCOSObject().equals(element)) {",
                "+                        cosFields.remove(i);",
                "+                    }",
                "+                }",
                "+            }",
                "+            else ",
                "+            {",
                "+                COSArray kids = (COSArray) field.getParent().getCOSObject().getDictionaryObject(COSName.KIDS);",
                "+                for (int i=0; i<kids.size(); i++)",
                "+                {",
                "+                    COSDictionary element = (COSDictionary) kids.getObject(i);",
                "+                    if (field.getCOSObject().equals(element)) {",
                "+                        kids.remove(i);",
                "+                    }",
                "+                }",
                "+            }",
                "+        }        ",
                "+    }",
                " }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3809": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: page",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3809",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d500310351040fef8c0d29ca87f7ffbdb12ffbbb",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525932646,
            "hunks": 37,
            "message": "PDFBOX-4068: refactor: 'resources' is only ever set within constructors, make it a constructor parameter git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831309 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "index 9aa76857b..7dd2030c4 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "@@ -58,3 +58,3 @@ abstract class PDAbstractContentStream implements Closeable",
                "     protected final OutputStream outputStream;",
                "-    private PDResources resources;",
                "+    protected final PDResources resources;",
                "@@ -75,6 +75,6 @@ abstract class PDAbstractContentStream implements Closeable",
                "      */",
                "-    PDAbstractContentStream(OutputStream outputStream)",
                "+    PDAbstractContentStream(OutputStream outputStream, PDResources resources)",
                "     {",
                "         this.outputStream = outputStream;",
                "-        this.resources = null;",
                "+        this.resources = resources;",
                "@@ -95,12 +95,2 @@ abstract class PDAbstractContentStream implements Closeable",
                "-    public PDResources getResources()",
                "-    {",
                "-        return resources;",
                "-    }",
                "-    ",
                "-    public final void setResources(PDResources resources)",
                "-    {",
                "-        this.resources = resources;",
                "-    }",
                "-",
                "     /**",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "index a67e56735..ce4ef3305 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "@@ -58,4 +58,3 @@ public final class PDAppearanceContentStream extends PDAbstractContentStream imp",
                "     {",
                "-        super(outputStream);",
                "-        setResources(appearance.getResources());",
                "+        super(outputStream, appearance.getResources());",
                "     }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java",
                "index c2516de8a..e95a6a0af 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java",
                "@@ -36,4 +36,3 @@ public final class PDFormContentStream extends PDAbstractContentStream",
                "     {",
                "-        super(form.getContentStream().createOutputStream());",
                "-        setResources(form.getResources());",
                "+        super(form.getContentStream().createOutputStream(), form.getResources());",
                "     }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "index 82e4aca6c..bb98b7ff7 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "@@ -152,3 +152,4 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        this(document, sourcePage, appendContent, compress, resetContext, new PDStream(document));",
                "+        this(document, sourcePage, appendContent, compress, resetContext, new PDStream(document),",
                "+                sourcePage.getResources() != null ? sourcePage.getResources() : new PDResources());",
                "     }",
                "@@ -156,5 +157,13 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     private PDPageContentStream(PDDocument document, PDPage sourcePage, AppendMode appendContent,",
                "-                                boolean compress, boolean resetContext, PDStream stream) throws IOException",
                "+                                boolean compress, boolean resetContext,PDStream stream,",
                "+                                PDResources resources) throws IOException",
                "     {",
                "-        super(stream.createOutputStream(compress ? COSName.FLATE_DECODE : null));",
                "+        super(stream.createOutputStream(compress ? COSName.FLATE_DECODE : null), resources);",
                "+",
                "+        // propagate resources to the page",
                "+        if (sourcePage.getResources() == null)",
                "+        {",
                "+            sourcePage.setResources(resources);",
                "+        }",
                "+",
                "         this.document = document;",
                "@@ -222,12 +231,2 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "-        // this has to be done here, as the resources will be set to null when resetting the content",
                "-        // stream",
                "-        PDResources resources = sourcePage.getResources();",
                "-        if (resources == null)",
                "-        {",
                "-            resources = new PDResources();",
                "-            sourcePage.setResources(resources);",
                "-        }",
                "-        setResources(resources);",
                "-",
                "         // configure NumberFormat",
                "@@ -257,6 +256,6 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        super(outputStream);",
                "+        super(outputStream, appearance.getResources());",
                "         this.document = doc;",
                "-        setResources(appearance.getResources());",
                "+        //setResources(appearance.getResources());",
                "     }",
                "@@ -299,3 +298,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "-        writeOperand(getResources().add(font));",
                "+        writeOperand(resources.add(font));",
                "         writeOperand(fontSize);",
                "@@ -548,3 +547,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "         }",
                "-        COSName objMapping = getResources().add(xobject, xObjectPrefix);",
                "+        COSName objMapping = resources.add(xobject, xObjectPrefix);",
                "@@ -1160,3 +1159,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        writeOperand(getResources().add(state));",
                "+        writeOperand(resources.add(state));",
                "         writeOperator(\"gs\");",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java",
                "index bce28f614..64bd45acb 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java",
                "@@ -36,4 +36,3 @@ public final class PDPatternContentStream extends PDAbstractContentStream",
                "     {",
                "-        super(pattern.getContentStream().createOutputStream());",
                "-        setResources(pattern.getResources());",
                "+        super(pattern.getContentStream().createOutputStream(), pattern.getResources());",
                "     }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "index 237894792..d436bc283 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "@@ -44,4 +44,2 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "     private final PDAnnotation annotation;",
                "-    private PDAppearanceEntry appearanceEntry;",
                "-    private PDAppearanceContentStream contentStream;",
                "@@ -108,5 +106,4 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "     {",
                "-        appearanceEntry = getNormalAppearance();",
                "-        contentStream = getAppearanceEntryAsContentStream(appearanceEntry);",
                "-        return contentStream;",
                "+        PDAppearanceEntry appearanceEntry = getNormalAppearance();",
                "+        return getAppearanceEntryAsContentStream(appearanceEntry);",
                "     }",
                "@@ -194,3 +191,3 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "      * @param rectangle the rectangle.",
                "-     * @param diifferences the differences to apply.",
                "+     * @param differences the differences to apply.",
                "      * @return the padded rectangle.",
                "@@ -216,3 +213,3 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "      * @param rectangle the rectangle.",
                "-     * @param diifferences the differences to apply.",
                "+     * @param differences the differences to apply.",
                "      * @return the padded rectangle.",
                "@@ -231,3 +228,3 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "-    void handleOpacity(float opacity) throws IOException",
                "+    void setOpacity(PDAppearanceContentStream contentStream, float opacity) throws IOException",
                "     {",
                "@@ -238,4 +235,2 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "             gs.setNonStrokingAlphaConstant(opacity);",
                "-            ",
                "-            prepareResources();",
                "@@ -244,19 +239,2 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "     }",
                "-",
                "-    /**",
                "-     * Assign the resources dictionary from the appearance entry to the content stream and create",
                "-     * the resources if needed.",
                "-     */",
                "-    void prepareResources()",
                "-    {",
                "-        PDAppearanceStream appearanceStream = appearanceEntry.getAppearanceStream();",
                "-        ",
                "-        PDResources resources = appearanceStream.getResources();",
                "-        if (resources == null)",
                "-        {",
                "-            resources = new PDResources();",
                "-            appearanceStream.setResources(resources);",
                "-            contentStream.setResources(resources);",
                "-        }",
                "-    }",
                "@@ -287,6 +265,15 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "-    private PDAppearanceContentStream getAppearanceEntryAsContentStream(PDAppearanceEntry appearanceEntryToStream) throws IOException",
                "+    private PDAppearanceContentStream getAppearanceEntryAsContentStream(PDAppearanceEntry appearanceEntry) throws IOException",
                "     {",
                "-        PDAppearanceStream appearanceStream = appearanceEntryToStream.getAppearanceStream();",
                "+        PDAppearanceStream appearanceStream = appearanceEntry.getAppearanceStream();",
                "         setTransformationMatrix(appearanceStream);",
                "+",
                "+        // ensure there are resources",
                "+        PDResources resources = appearanceStream.getResources();",
                "+        if (resources == null)",
                "+        {",
                "+            resources = new PDResources();",
                "+            appearanceStream.setResources(resources);",
                "+        }",
                "+",
                "         return new PDAppearanceContentStream(appearanceStream);",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "index 37ed620c5..b6edaf311 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "@@ -65,3 +65,3 @@ public class PDCaretAppearanceHandler extends PDAbstractAppearanceHandler",
                "-                handleOpacity(annotation.getConstantOpacity());",
                "+                setOpacity(contentStream, annotation.getConstantOpacity());",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "index 44597db82..9263be6eb 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "@@ -67,3 +67,3 @@ public class PDCircleAppearanceHandler extends PDAbstractAppearanceHandler",
                "-                handleOpacity(annotation.getConstantOpacity());",
                "+                setOpacity(contentStream, annotation.getConstantOpacity());",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java",
                "index 9dbe3e54d..14cd725bf 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java",
                "@@ -113,3 +113,2 @@ public class PDHighlightAppearanceHandler extends PDAbstractAppearanceHandler",
                "             {",
                "-                prepareResources();",
                "                 PDExtendedGraphicsState r0 = new PDExtendedGraphicsState();",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java",
                "index eaf4bbb81..3b451e5f7 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java",
                "@@ -63,3 +63,3 @@ public class PDInkAppearanceHandler extends PDAbstractAppearanceHandler",
                "             {",
                "-                handleOpacity(ink.getConstantOpacity());",
                "+                setOpacity(cs, ink.getConstantOpacity());",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "index a0146bccf..e46ee907e 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "@@ -137,3 +137,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "             {",
                "-                handleOpacity(annotation.getConstantOpacity());",
                "+                setOpacity(cs, annotation.getConstantOpacity());",
                "@@ -243,3 +243,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     {",
                "-                        prepareResources();",
                "+                        //prepareResources(cs);",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "index a2823dc5c..bd6eec8d1 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "@@ -102,3 +102,3 @@ public class PDPolygonAppearanceHandler extends PDAbstractAppearanceHandler",
                "-                handleOpacity(annotation.getConstantOpacity());",
                "+                setOpacity(contentStream, annotation.getConstantOpacity());",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "index 9512c613f..edaa06b0a 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "@@ -96,3 +96,3 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "             {",
                "-                handleOpacity(annotation.getConstantOpacity());",
                "+                setOpacity(cs, annotation.getConstantOpacity());",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "index 26dc670b5..1577dace5 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "@@ -69,3 +69,3 @@ public class PDSquareAppearanceHandler extends PDAbstractAppearanceHandler",
                "-                handleOpacity(annotation.getConstantOpacity());",
                "+                setOpacity(contentStream, annotation.getConstantOpacity());",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "index e94159df5..f8a5b325f 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "@@ -95,3 +95,3 @@ public class PDStrikeoutAppearanceHandler extends PDAbstractAppearanceHandler",
                "             {",
                "-                handleOpacity(annotation.getConstantOpacity());",
                "+                setOpacity(cs, annotation.getConstantOpacity());",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java",
                "index 840c1d538..93535c514 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java",
                "@@ -96,3 +96,3 @@ public class PDUnderlineAppearanceHandler extends PDAbstractAppearanceHandler",
                "             {",
                "-                handleOpacity(annotation.getConstantOpacity());",
                "+                setOpacity(cs, annotation.getConstantOpacity());"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4068": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4068",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1bf886295f8ee2e9abeebf5dc7f983b2f6e7da7a",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524591641,
            "hunks": 66,
            "message": "PDFBOX-4189: Refined GSUB system to support new languages + feature complete Bengali, by Palash Ray git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830016 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java",
                "index bdb8adc91..bc54f2170 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java",
                "@@ -33,2 +33,3 @@ import org.apache.commons.logging.LogFactory;",
                " import org.apache.fontbox.ttf.gsub.GlyphSubstitutionDataExtractor;",
                "+import org.apache.fontbox.ttf.model.GsubData;",
                " import org.apache.fontbox.ttf.table.common.CoverageTable;",
                "@@ -74,3 +75,3 @@ public class GlyphSubstitutionTable extends TTFTable",
                "-    private Map<String, Map<List<Integer>, Integer>> rawGSubData;",
                "+    private GsubData gsubData;",
                "@@ -105,5 +106,4 @@ public class GlyphSubstitutionTable extends TTFTable",
                "-        rawGSubData = glyphSubstitutionDataExtractor",
                "+        gsubData = glyphSubstitutionDataExtractor",
                "                 .getGsubData(scriptList, featureListTable, lookupListTable);",
                "-        LOG.debug(\"rawGSubData: \" + rawGSubData);",
                "     }",
                "@@ -672,5 +672,5 @@ public class GlyphSubstitutionTable extends TTFTable",
                "-    public Map<String, Map<List<Integer>, Integer>> getRawGSubData()",
                "+    public GsubData getGsubData()",
                "     {",
                "-        return rawGSubData;",
                "+        return gsubData;",
                "     }",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java b/fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java",
                "index 8edcc6188..948c13674 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java",
                "@@ -29,4 +29,2 @@ import java.util.List;",
                " import java.util.Map;",
                "-import org.apache.fontbox.FontBoxFont;",
                "-import org.apache.fontbox.util.BoundingBox;",
                "@@ -34,2 +32,5 @@ import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "+import org.apache.fontbox.FontBoxFont;",
                "+import org.apache.fontbox.ttf.model.GsubData;",
                "+import org.apache.fontbox.util.BoundingBox;",
                "@@ -656,3 +657,3 @@ public class TrueTypeFont implements FontBoxFont, Closeable",
                "-    public Map<String, Map<List<Integer>, Integer>> getGlyphSubstitutionMap() throws IOException",
                "+    public GsubData getGsubData() throws IOException",
                "     {",
                "@@ -661,6 +662,6 @@ public class TrueTypeFont implements FontBoxFont, Closeable",
                "         {",
                "-            return Collections.emptyMap();",
                "+            return GsubData.NO_DATA_FOUND;",
                "         }",
                "-        return table.getRawGSubData();",
                "+        return table.getGsubData();",
                "     }",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java",
                "index 7fb2c0eea..6eaec7b02 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java",
                "@@ -28,2 +28,5 @@ import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "+import org.apache.fontbox.ttf.model.GsubData;",
                "+import org.apache.fontbox.ttf.model.Language;",
                "+import org.apache.fontbox.ttf.model.MapBackedGsubData;",
                " import org.apache.fontbox.ttf.table.common.CoverageTable;",
                "@@ -54,5 +57,3 @@ public class GlyphSubstitutionDataExtractor",
                "-    private static final String[] SUPPORTED_LANGUAGES = { \"bng2\", \"beng\" };",
                "-",
                "-    public Map<String, Map<List<Integer>, Integer>> getGsubData(Map<String, ScriptTable> scriptList,",
                "+    public GsubData getGsubData(Map<String, ScriptTable> scriptList,",
                "             FeatureListTable featureListTable, LookupListTable lookupListTable)",
                "@@ -60,9 +61,11 @@ public class GlyphSubstitutionDataExtractor",
                "-        ScriptTable scriptTable = getSupportedLanguage(scriptList);",
                "+        ScriptTableDetails scriptTableDetails = getSupportedLanguage(scriptList);",
                "-        if (scriptTable == null)",
                "+        if (scriptTableDetails == null)",
                "         {",
                "-            return Collections.emptyMap();",
                "+            return GsubData.NO_DATA_FOUND;",
                "         }",
                "+        ScriptTable scriptTable = scriptTableDetails.getScriptTable();",
                "+",
                "         Map<String, Map<List<Integer>, Integer>> gsubData = new LinkedHashMap<>();",
                "@@ -78,12 +81,17 @@ public class GlyphSubstitutionDataExtractor",
                "         }",
                "-        return Collections.unmodifiableMap(gsubData);",
                "+",
                "+        return new MapBackedGsubData(scriptTableDetails.getLanguage(),",
                "+                scriptTableDetails.getFeatureName(), gsubData);",
                "     }",
                "-    private ScriptTable getSupportedLanguage(Map<String, ScriptTable> scriptList)",
                "+    private ScriptTableDetails getSupportedLanguage(Map<String, ScriptTable> scriptList)",
                "     {",
                "-        for (String supportedLanguage : SUPPORTED_LANGUAGES)",
                "+        for (Language lang : Language.values())",
                "         {",
                "-            if (scriptList.containsKey(supportedLanguage))",
                "+            for (String scriptName : lang.getScriptNames())",
                "             {",
                "-                return scriptList.get(supportedLanguage);",
                "+                if (scriptList.containsKey(scriptName))",
                "+                {",
                "+                    return new ScriptTableDetails(lang, scriptName, scriptList.get(scriptName));",
                "+                }",
                "             }",
                "@@ -234,2 +242,32 @@ public class GlyphSubstitutionDataExtractor",
                "+    private static class ScriptTableDetails",
                "+    {",
                "+        private final Language language;",
                "+        private final String featureName;",
                "+        private final ScriptTable scriptTable;",
                "+",
                "+        private ScriptTableDetails(Language language, String featureName, ScriptTable scriptTable)",
                "+        {",
                "+            this.language = language;",
                "+            this.featureName = featureName;",
                "+            this.scriptTable = scriptTable;",
                "+        }",
                "+",
                "+        public Language getLanguage()",
                "+        {",
                "+            return language;",
                "+        }",
                "+",
                "+        public String getFeatureName()",
                "+        {",
                "+            return featureName;",
                "+        }",
                "+",
                "+        public ScriptTable getScriptTable()",
                "+        {",
                "+            return scriptTable;",
                "+        }",
                "+",
                "+    }",
                "+",
                " }",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorker.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorker.java",
                "index 8e3287ed7..23060ed51 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorker.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorker.java",
                "@@ -30,5 +30,8 @@ public interface GsubWorker",
                " {",
                "-    List<Integer> substituteGlyphs(List<Integer> originalGlyphIds);",
                "-",
                "-    List<Integer> repositionGlyphs(List<Integer> originalGlyphIds);",
                "+    /**",
                "+     * Applies language-specific transforms including GSUB and any other pre or post-processing necessary for displaying",
                "+     * Glyphs correctly.",
                "+     * ",
                "+     */",
                "+    List<Integer> applyTransforms(List<Integer> originalGlyphIds);",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerFactory.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerFactory.java",
                "new file mode 100644",
                "index 000000000..872ccfd9a",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerFactory.java",
                "@@ -0,0 +1,46 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.gsub;",
                "+",
                "+import org.apache.fontbox.ttf.CmapLookup;",
                "+import org.apache.fontbox.ttf.model.GsubData;",
                "+import org.apache.fontbox.ttf.model.Language;",
                "+",
                "+/**",
                "+ * Gets a {@link Language} specific instance of a {@link GsubWorker}",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class GsubWorkerFactory",
                "+{",
                "+",
                "+    public GsubWorker getGsubWorker(CmapLookup cmapLookup, GsubData gsubData)",
                "+    {",
                "+        switch (gsubData.getLanguage())",
                "+        {",
                "+        case BENGALI:",
                "+            return new GsubWorkerForBengali(cmapLookup, gsubData);",
                "+        default:",
                "+            throw new UnsupportedOperationException(",
                "+                    \"The language \" + gsubData.getLanguage() + \" is not yet supported\");",
                "+        }",
                "+",
                "+    }",
                "+",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java",
                "index d44ba3a50..7c9feaefb 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java",
                "@@ -22,2 +22,3 @@ import java.util.Arrays;",
                " import java.util.Collections;",
                "+import java.util.HashMap;",
                " import java.util.List;",
                "@@ -28,2 +29,4 @@ import org.apache.commons.logging.LogFactory;",
                " import org.apache.fontbox.ttf.CmapLookup;",
                "+import org.apache.fontbox.ttf.model.GsubData;",
                "+import org.apache.fontbox.ttf.model.ScriptFeature;",
                "@@ -41,2 +44,4 @@ public class GsubWorkerForBengali implements GsubWorker",
                "+    private static final String INIT_FEATURE = \"init\";",
                "+",
                "     /**",
                "@@ -46,16 +51,23 @@ public class GsubWorkerForBengali implements GsubWorker",
                "     private static final List<String> FEATURES_IN_ORDER = Arrays.asList(\"locl\", \"nukt\", \"akhn\",",
                "-            \"rphf\", \"blwf\", \"half\", \"pstf\", \"vatu\", \"cjct\", \"init\", \"pres\", \"abvs\", \"blws\", \"psts\",",
                "-            \"haln\", \"calt\");",
                "+            \"rphf\", \"blwf\", \"half\", \"pstf\", \"vatu\", \"cjct\", INIT_FEATURE, \"pres\", \"abvs\", \"blws\",",
                "+            \"psts\", \"haln\", \"calt\");",
                "     private static final char[] BEFORE_HALF_CHARS = new char[] { '\\u09BF', '\\u09C7', '\\u09C8' };",
                "+    private static final BeforeAndAfterSpanComponent[] BEFORE_AND_AFTER_SPAN_CHARS = new BeforeAndAfterSpanComponent[] {",
                "+            new BeforeAndAfterSpanComponent('\\u09CB', '\\u09C7', '\\u09BE'),",
                "+            new BeforeAndAfterSpanComponent('\\u09CC', '\\u09C7', '\\u09D7') };",
                "-    private final Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap;",
                "+    private final CmapLookup cmapLookup;",
                "+    private final GsubData gsubData;",
                "     private final List<Integer> beforeHalfGlyphIds;",
                "+    private final Map<Integer, BeforeAndAfterSpanComponent> beforeAndAfterSpanGlyphIds;",
                "+",
                "-    public GsubWorkerForBengali(CmapLookup cmapLookup,",
                "-            Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap)",
                "+    GsubWorkerForBengali(CmapLookup cmapLookup, GsubData gsubData)",
                "     {",
                "-        this.glyphSubstitutionMap = glyphSubstitutionMap;",
                "-        beforeHalfGlyphIds = getBeforeHalfGlyphIds(cmapLookup);",
                "+        this.cmapLookup = cmapLookup;",
                "+        this.gsubData = gsubData;",
                "+        beforeHalfGlyphIds = getBeforeHalfGlyphIds();",
                "+        beforeAndAfterSpanGlyphIds = getBeforeAndAfterSpanGlyphIds();",
                "     }",
                "@@ -63,3 +75,3 @@ public class GsubWorkerForBengali implements GsubWorker",
                "     @Override",
                "-    public List<Integer> substituteGlyphs(List<Integer> originalGlyphIds)",
                "+    public List<Integer> applyTransforms(List<Integer> originalGlyphIds)",
                "     {",
                "@@ -69,3 +81,3 @@ public class GsubWorkerForBengali implements GsubWorker",
                "         {",
                "-            if (!glyphSubstitutionMap.containsKey(feature))",
                "+            if (!gsubData.isFeatureSupported(feature))",
                "             {",
                "@@ -77,12 +89,19 @@ public class GsubWorkerForBengali implements GsubWorker",
                "-            Map<List<Integer>, Integer> featureMap = glyphSubstitutionMap.get(feature);",
                "+            ScriptFeature scriptFeature = gsubData.getFeature(feature);",
                "-            intermediateGlyphsFromGsub = applyGsubFeature(featureMap, intermediateGlyphsFromGsub);",
                "+            intermediateGlyphsFromGsub = applyGsubFeature(scriptFeature,",
                "+                    intermediateGlyphsFromGsub);",
                "         }",
                "-        return intermediateGlyphsFromGsub;",
                "+        return Collections.unmodifiableList(repositionGlyphs(intermediateGlyphsFromGsub));",
                "     }",
                "-    @Override",
                "-    public List<Integer> repositionGlyphs(List<Integer> originalGlyphIds)",
                "+    private List<Integer> repositionGlyphs(List<Integer> originalGlyphIds)",
                "+    {",
                "+        List<Integer> glyphsRepositionedByBeforeHalf = repositionBeforeHalfGlyphIds(",
                "+                originalGlyphIds);",
                "+        return repositionBeforeAndAfterSpanGlyphIds(glyphsRepositionedByBeforeHalf);",
                "+    }",
                "+",
                "+    private List<Integer> repositionBeforeHalfGlyphIds(List<Integer> originalGlyphIds)",
                "     {",
                "@@ -103,3 +122,25 @@ public class GsubWorkerForBengali implements GsubWorker",
                "-    private List<Integer> applyGsubFeature(Map<List<Integer>, Integer> featureMap,",
                "+    private List<Integer> repositionBeforeAndAfterSpanGlyphIds(List<Integer> originalGlyphIds)",
                "+    {",
                "+        List<Integer> repositionedGlyphIds = new ArrayList<>(originalGlyphIds);",
                "+",
                "+        for (int index = 1; index < originalGlyphIds.size(); index++)",
                "+        {",
                "+            int glyphId = originalGlyphIds.get(index);",
                "+            if (beforeAndAfterSpanGlyphIds.containsKey(glyphId))",
                "+            {",
                "+                BeforeAndAfterSpanComponent beforeAndAfterSpanComponent = beforeAndAfterSpanGlyphIds",
                "+                        .get(glyphId);",
                "+                int previousGlyphId = originalGlyphIds.get(index - 1);",
                "+                repositionedGlyphIds.set(index, previousGlyphId);",
                "+                repositionedGlyphIds.set(index - 1,",
                "+                        getGlyphId(beforeAndAfterSpanComponent.beforeComponentCharacter));",
                "+                repositionedGlyphIds.add(index + 1,",
                "+                        getGlyphId(beforeAndAfterSpanComponent.afterComponentCharacter));",
                "+            }",
                "+        }",
                "+        return repositionedGlyphIds;",
                "+    }",
                "+",
                "+    private List<Integer> applyGsubFeature(ScriptFeature scriptFeature,",
                "             List<Integer> originalGlyphs)",
                "@@ -108,3 +149,3 @@ public class GsubWorkerForBengali implements GsubWorker",
                "         GlyphArraySplitter glyphArraySplitter = new GlyphArraySplitterRegexImpl(",
                "-                featureMap.keySet());",
                "+                scriptFeature.getAllGlyphIdsForSubstitution());",
                "@@ -116,6 +157,6 @@ public class GsubWorkerForBengali implements GsubWorker",
                "         {",
                "-            if (featureMap.containsKey(chunk))",
                "+            if (scriptFeature.canReplaceGlyphs(chunk))",
                "             {",
                "                 // gsub system kicks in, you get the glyphId directly",
                "-                int glyphId = featureMap.get(chunk);",
                "+                int glyphId = scriptFeature.getReplacementForGlyphs(chunk);",
                "                 gsubProcessedGlyphs.add(glyphId);",
                "@@ -134,12 +175,63 @@ public class GsubWorkerForBengali implements GsubWorker",
                "-    private static List<Integer> getBeforeHalfGlyphIds(CmapLookup cmapLookup)",
                "+    private List<Integer> getBeforeHalfGlyphIds()",
                "     {",
                "-        List<Integer> beforeHalfGlyphIds = new ArrayList<>();",
                "+        List<Integer> glyphIds = new ArrayList<>();",
                "-        for (char beforeHalfChar : BEFORE_HALF_CHARS)",
                "+        for (char character : BEFORE_HALF_CHARS)",
                "         {",
                "-            beforeHalfGlyphIds.add(cmapLookup.getGlyphId(beforeHalfChar));",
                "+            glyphIds.add(getGlyphId(character));",
                "         }",
                "-        return Collections.unmodifiableList(beforeHalfGlyphIds);",
                "+        if (gsubData.isFeatureSupported(INIT_FEATURE))",
                "+        {",
                "+            ScriptFeature feature = gsubData.getFeature(INIT_FEATURE);",
                "+            for (List<Integer> glyphCluster : feature.getAllGlyphIdsForSubstitution())",
                "+            {",
                "+                glyphIds.add(feature.getReplacementForGlyphs(glyphCluster));",
                "+            }",
                "+        }",
                "+",
                "+        return Collections.unmodifiableList(glyphIds);",
                "+",
                "+    }",
                "+",
                "+    private Integer getGlyphId(char character)",
                "+    {",
                "+        return cmapLookup.getGlyphId(character);",
                "+    }",
                "+",
                "+    private Map<Integer, BeforeAndAfterSpanComponent> getBeforeAndAfterSpanGlyphIds()",
                "+    {",
                "+        Map<Integer, BeforeAndAfterSpanComponent> beforeAndAfterSpanGlyphIds = new HashMap<>();",
                "+",
                "+        for (BeforeAndAfterSpanComponent beforeAndAfterSpanComponent : BEFORE_AND_AFTER_SPAN_CHARS)",
                "+        {",
                "+            beforeAndAfterSpanGlyphIds.put(",
                "+                    getGlyphId(beforeAndAfterSpanComponent.originalCharacter),",
                "+                    beforeAndAfterSpanComponent);",
                "+        }",
                "+",
                "+        return Collections.unmodifiableMap(beforeAndAfterSpanGlyphIds);",
                "+    }",
                "+",
                "+    /**",
                "+     * Models characters like O-kar (\\u09CB) and OU-kar (\\u09CC). Since these 2 characters is",
                "+     * represented by 2 components, one before and one after the Vyanjan Varna on which this is",
                "+     * used, this glyph has to be replaced by these 2 glyphs. For O-kar, it has to be replaced by",
                "+     * E-kar (\\u09C7) and AA-kar (\\u09BE). For OU-kar, it has be replaced by E-kar (\\u09C7) and",
                "+     * \\u09D7.",
                "+     *",
                "+     */",
                "+    private static class BeforeAndAfterSpanComponent {",
                "+        private final char originalCharacter;",
                "+        private final char beforeComponentCharacter;",
                "+        private final char afterComponentCharacter;",
                "+",
                "+        BeforeAndAfterSpanComponent(char originalCharacter, char beforeComponentCharacter,",
                "+                char afterComponentCharacter)",
                "+        {",
                "+            this.originalCharacter = originalCharacter;",
                "+            this.beforeComponentCharacter = beforeComponentCharacter;",
                "+            this.afterComponentCharacter = afterComponentCharacter;",
                "+        }",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/model/GsubData.java b/fontbox/src/main/java/org/apache/fontbox/ttf/model/GsubData.java",
                "new file mode 100644",
                "index 000000000..425d14b80",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/model/GsubData.java",
                "@@ -0,0 +1,83 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.model;",
                "+",
                "+import java.util.Set;",
                "+",
                "+/**",
                "+ * Model for data from the GSUB tables",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public interface GsubData",
                "+{",
                "+    /**",
                "+     * To be used when there is no GSUB data available",
                "+     */",
                "+    GsubData NO_DATA_FOUND = new GsubData()",
                "+    {",
                "+",
                "+        @Override",
                "+        public boolean isFeatureSupported(String featureName)",
                "+        {",
                "+            throw new UnsupportedOperationException();",
                "+        }",
                "+",
                "+        @Override",
                "+        public Language getLanguage()",
                "+        {",
                "+            throw new UnsupportedOperationException();",
                "+        }",
                "+",
                "+        @Override",
                "+        public ScriptFeature getFeature(String featureName)",
                "+        {",
                "+            throw new UnsupportedOperationException();",
                "+        }",
                "+",
                "+        @Override",
                "+        public String getActiveScriptName()",
                "+        {",
                "+            throw new UnsupportedOperationException();",
                "+        }",
                "+",
                "+        @Override",
                "+        public Set<String> getSupportedFeatures()",
                "+        {",
                "+            throw new UnsupportedOperationException();",
                "+        }",
                "+    };",
                "+",
                "+    Language getLanguage();",
                "+",
                "+    /**",
                "+     * A {@link Language} can have more than one script that is supported. However, at any given",
                "+     * point, only one of the many scripts are active.",
                "+     *",
                "+     * @return The name of the script that is active.",
                "+     */",
                "+    String getActiveScriptName();",
                "+",
                "+    boolean isFeatureSupported(String featureName);",
                "+",
                "+    ScriptFeature getFeature(String featureName);",
                "+",
                "+    Set<String> getSupportedFeatures();",
                "+",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/model/Language.java b/fontbox/src/main/java/org/apache/fontbox/ttf/model/Language.java",
                "new file mode 100644",
                "index 000000000..9e360813d",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/model/Language.java",
                "@@ -0,0 +1,55 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.model;",
                "+",
                "+import org.apache.fontbox.ttf.gsub.GsubWorker;",
                "+import org.apache.fontbox.ttf.gsub.GsubWorkerFactory;",
                "+import org.apache.fontbox.ttf.table.common.ScriptRecord;",
                "+",
                "+/**",
                "+ * Enumerates the languages supported for GSUB operation. In order to support a new language, you",
                "+ * need to add it here and then implement the {@link GsubWorker} for the given language and return",
                "+ * the same from the",
                "+ * {@link GsubWorkerFactory#getGsubWorker(org.apache.fontbox.ttf.CmapLookup, GsubData)}",
                "+ *",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public enum Language",
                "+{",
                "+",
                "+    BENGALI(new String[] { \"bng2\", \"beng\" });",
                "+",
                "+    private final String[] scriptNames;",
                "+",
                "+    private Language(String[] scriptNames)",
                "+    {",
                "+        this.scriptNames = scriptNames;",
                "+    }",
                "+",
                "+    /**",
                "+     * ScriptNames form the basis of identification of the language. This method gets the ScriptNames that the given",
                "+     * Language supports, in the order of preference, Index 0 being the most preferred. These names should match the",
                "+     * {@link ScriptRecord} in the GSUB system.",
                "+     */",
                "+    public String[] getScriptNames()",
                "+    {",
                "+        return scriptNames;",
                "+    }",
                "+",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/model/MapBackedGsubData.java b/fontbox/src/main/java/org/apache/fontbox/ttf/model/MapBackedGsubData.java",
                "new file mode 100644",
                "index 000000000..a795588ca",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/model/MapBackedGsubData.java",
                "@@ -0,0 +1,82 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.model;",
                "+",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+",
                "+/**",
                "+ * ",
                "+ * A {@link Map} based simple implementation of the {@link GsubData}",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class MapBackedGsubData implements GsubData",
                "+{",
                "+",
                "+    private final Language language;",
                "+    private final String activeScriptName;",
                "+    private final Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap;",
                "+",
                "+    public MapBackedGsubData(Language language, String activeScriptName,",
                "+            Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap)",
                "+    {",
                "+        this.language = language;",
                "+        this.activeScriptName = activeScriptName;",
                "+        this.glyphSubstitutionMap = glyphSubstitutionMap;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Language getLanguage()",
                "+    {",
                "+        return language;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getActiveScriptName()",
                "+    {",
                "+        return activeScriptName;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean isFeatureSupported(String featureName)",
                "+    {",
                "+        return glyphSubstitutionMap.containsKey(featureName);",
                "+    }",
                "+",
                "+    @Override",
                "+    public ScriptFeature getFeature(String featureName)",
                "+    {",
                "+        if (!isFeatureSupported(featureName))",
                "+        {",
                "+            throw new UnsupportedOperationException(",
                "+                    \"The feature \" + featureName + \" is not supported!\");",
                "+        }",
                "+",
                "+        return new MapBackedScriptFeature(featureName, glyphSubstitutionMap.get(featureName));",
                "+    }",
                "+",
                "+    @Override",
                "+    public Set<String> getSupportedFeatures()",
                "+    {",
                "+        return glyphSubstitutionMap.keySet();",
                "+    }",
                "+",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/model/MapBackedScriptFeature.java b/fontbox/src/main/java/org/apache/fontbox/ttf/model/MapBackedScriptFeature.java",
                "new file mode 100644",
                "index 000000000..ba2791c14",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/model/MapBackedScriptFeature.java",
                "@@ -0,0 +1,122 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.model;",
                "+",
                "+import java.util.List;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                "+",
                "+/**",
                "+ * ",
                "+ * A {@link Map} based simple implementation of the {@link ScriptFeature}",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public class MapBackedScriptFeature implements ScriptFeature",
                "+{",
                "+",
                "+    private final String name;",
                "+    private final Map<List<Integer>, Integer> featureMap;",
                "+",
                "+    public MapBackedScriptFeature(String name, Map<List<Integer>, Integer> featureMap)",
                "+    {",
                "+        this.name = name;",
                "+        this.featureMap = featureMap;",
                "+    }",
                "+",
                "+    @Override",
                "+    public String getName()",
                "+    {",
                "+        return name;",
                "+    }",
                "+",
                "+    @Override",
                "+    public Set<List<Integer>> getAllGlyphIdsForSubstitution()",
                "+    {",
                "+        return featureMap.keySet();",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean canReplaceGlyphs(List<Integer> glyphIds)",
                "+    {",
                "+        return featureMap.containsKey(glyphIds);",
                "+    }",
                "+",
                "+    @Override",
                "+    public Integer getReplacementForGlyphs(List<Integer> glyphIds)",
                "+    {",
                "+        if (!canReplaceGlyphs(glyphIds))",
                "+        {",
                "+            throw new UnsupportedOperationException(",
                "+                    \"The glyphs \" + glyphIds + \" cannot be replaced\");",
                "+        }",
                "+        return featureMap.get(glyphIds);",
                "+    }",
                "+",
                "+    @Override",
                "+    public int hashCode()",
                "+    {",
                "+        final int prime = 31;",
                "+        int result = 1;",
                "+        result = prime * result + ((featureMap == null) ? 0 : featureMap.hashCode());",
                "+        result = prime * result + ((name == null) ? 0 : name.hashCode());",
                "+        return result;",
                "+    }",
                "+",
                "+    @Override",
                "+    public boolean equals(Object obj)",
                "+    {",
                "+        if (this == obj)",
                "+        {",
                "+            return true;",
                "+        }",
                "+        if (obj == null)",
                "+        {",
                "+            return false;",
                "+        }",
                "+        if (getClass() != obj.getClass())",
                "+        {",
                "+            return false;",
                "+        }",
                "+        MapBackedScriptFeature other = (MapBackedScriptFeature) obj;",
                "+        if (featureMap == null)",
                "+        {",
                "+            if (other.featureMap != null)",
                "+            {",
                "+                return false;",
                "+            }",
                "+        }",
                "+        else if (!featureMap.equals(other.featureMap))",
                "+        {",
                "+            return false;",
                "+        }",
                "+        if (name == null)",
                "+        {",
                "+            if (other.name != null)",
                "+            {",
                "+                return false;",
                "+            }",
                "+        }",
                "+        else if (!name.equals(other.name))",
                "+        {",
                "+            return false;",
                "+        }",
                "+        return true;",
                "+    }",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/model/ScriptFeature.java b/fontbox/src/main/java/org/apache/fontbox/ttf/model/ScriptFeature.java",
                "new file mode 100644",
                "index 000000000..1efad551b",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/model/ScriptFeature.java",
                "@@ -0,0 +1,42 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+",
                "+package org.apache.fontbox.ttf.model;",
                "+",
                "+import java.util.List;",
                "+import java.util.Set;",
                "+",
                "+import org.apache.fontbox.ttf.table.common.FeatureRecord;",
                "+",
                "+/**",
                "+ * Models a {@link FeatureRecord}",
                "+ * ",
                "+ * @author Palash Ray",
                "+ *",
                "+ */",
                "+public interface ScriptFeature",
                "+{",
                "+",
                "+    String getName();",
                "+",
                "+    Set<List<Integer>> getAllGlyphIdsForSubstitution();",
                "+",
                "+    boolean canReplaceGlyphs(List<Integer> glyphIds);",
                "+",
                "+    Integer getReplacementForGlyphs(List<Integer> glyphIds);",
                "+",
                "+}",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/model/package.html b/fontbox/src/main/java/org/apache/fontbox/ttf/model/package.html",
                "new file mode 100644",
                "index 000000000..4878a8b2f",
                "--- /dev/null",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/model/package.html",
                "@@ -0,0 +1,25 @@",
                "+<!--",
                "+ ! Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ ! contributor license agreements.  See the NOTICE file distributed with",
                "+ ! this work for additional information regarding copyright ownership.",
                "+ ! The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ ! (the \"License\"); you may not use this file except in compliance with",
                "+ ! the License.  You may obtain a copy of the License at",
                "+ !",
                "+ !      http://www.apache.org/licenses/LICENSE-2.0",
                "+ !",
                "+ ! Unless required by applicable law or agreed to in writing, software",
                "+ ! distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ ! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ ! See the License for the specific language governing permissions and",
                "+ ! limitations under the License.",
                "+ !-->",
                "+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">",
                "+<html>",
                "+<head>",
                "+",
                "+</head>",
                "+<body>",
                "+This package contains a more logical model for the various font tables like GSUB.",
                "+</body>",
                "+</html>",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "index 50be140c1..af71274ee 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "@@ -27,3 +27,2 @@ import java.util.HashSet;",
                " import java.util.List;",
                "-import java.util.Map;",
                " import java.util.Set;",
                "@@ -37,3 +36,4 @@ import org.apache.fontbox.ttf.gsub.CompoundCharacterTokenizer;",
                " import org.apache.fontbox.ttf.gsub.GsubWorker;",
                "-import org.apache.fontbox.ttf.gsub.GsubWorkerForBengali;",
                "+import org.apache.fontbox.ttf.gsub.GsubWorkerFactory;",
                "+import org.apache.fontbox.ttf.model.GsubData;",
                " import org.apache.pdfbox.contentstream.PDAbstractContentStream;",
                "@@ -332,8 +332,7 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "             PDType0Font pdType0Font = (PDType0Font) font;",
                "-            Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap = pdType0Font",
                "-                    .getGlyphSubstitutionMap();",
                "-            if (!glyphSubstitutionMap.isEmpty())",
                "+            GsubData gsubData = pdType0Font.getGsubData();",
                "+            if (gsubData != GsubData.NO_DATA_FOUND)",
                "             {",
                "                 Set<Integer> glyphIds = new HashSet<>();",
                "-                encodedText = encodeForGsub(glyphSubstitutionMap, glyphIds, pdType0Font, text);",
                "+                encodedText = encodeForGsub(gsubData, glyphIds, pdType0Font, text);",
                "                 if (pdType0Font.willBeSubset())",
                "@@ -1179,3 +1178,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "-    private byte[] encodeForGsub(Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap,",
                "+    private byte[] encodeForGsub(GsubData gsubData,",
                "             Set<Integer> glyphIds, PDType0Font font, String text) throws IOException",
                "@@ -1199,3 +1198,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "             {",
                "-                glyphIds.addAll(applyGSUBRules(out, font, glyphSubstitutionMap, word));",
                "+                glyphIds.addAll(applyGSUBRules(out, font, gsubData, word));",
                "             }",
                "@@ -1207,4 +1206,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     private List<Integer> applyGSUBRules(ByteArrayOutputStream out, PDType0Font font,",
                "-            Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap, String word)",
                "-            throws IOException",
                "+            GsubData gsubData, String word) throws IOException",
                "     {",
                "@@ -1225,7 +1223,7 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "-        // TODO: figure out how to get this language-specific detail up here",
                "-        GsubWorker gsubWorker = new GsubWorkerForBengali(cmapLookup, glyphSubstitutionMap);",
                "+        GsubWorkerFactory gsubWorkerFactory = new GsubWorkerFactory();",
                "-        List<Integer> repositionedGlyphIds = gsubWorker.repositionGlyphs(originalGlyphIds);",
                "-        List<Integer> glyphIdsAfterGsub = gsubWorker.substituteGlyphs(repositionedGlyphIds);",
                "+        GsubWorker gsubWorker = gsubWorkerFactory.getGsubWorker(cmapLookup, gsubData);",
                "+",
                "+        List<Integer> glyphIdsAfterGsub = gsubWorker.applyTransforms(originalGlyphIds);",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "index cd205868e..f0e623931 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "@@ -22,6 +22,3 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "-import java.util.Collections;",
                " import java.util.HashSet;",
                "-import java.util.List;",
                "-import java.util.Map;",
                " import java.util.Set;",
                "@@ -34,2 +31,3 @@ import org.apache.fontbox.ttf.TTFParser;",
                " import org.apache.fontbox.ttf.TrueTypeFont;",
                "+import org.apache.fontbox.ttf.model.GsubData;",
                " import org.apache.fontbox.util.BoundingBox;",
                "@@ -54,3 +52,3 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "     private final Set<Integer> noUnicode = new HashSet<>(); ",
                "-    private final Map<String, Map<List<Integer>, Integer>> glyphSubstitutionMap;",
                "+    private final GsubData gsubData;",
                "     private final CmapLookup cmapLookup;",
                "@@ -72,3 +70,3 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "-        glyphSubstitutionMap = Collections.emptyMap();",
                "+        gsubData = GsubData.NO_DATA_FOUND;",
                "         cmapLookup = null;",
                "@@ -106,3 +104,3 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "-        glyphSubstitutionMap = ttf.getGlyphSubstitutionMap();",
                "+        gsubData = ttf.getGsubData();",
                "         cmapLookup = ttf.getUnicodeCmapLookup();",
                "@@ -601,5 +599,5 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "-    public Map<String, Map<List<Integer>, Integer>> getGlyphSubstitutionMap()",
                "+    public GsubData getGsubData()",
                "     {",
                "-        return glyphSubstitutionMap;",
                "+        return gsubData;",
                "     }"
            ],
            "changed_files": [
                "fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/TrueTypeFont.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorker.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerFactory.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/model/GsubData.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/model/Language.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/model/MapBackedGsubData.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/model/MapBackedScriptFeature.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/model/ScriptFeature.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/model/package.html",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "05eea58ba2735a191592c134c942cf46204cc3f6",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525935005,
            "hunks": 32,
            "message": "PDFBOX-4068: don't override \"common\" functionality - abstract content stream must track subsetting git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831310 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "index 7dd2030c4..8140a4496 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "@@ -20,2 +20,3 @@ import java.awt.Color;",
                " import java.awt.geom.AffineTransform;",
                "+import java.io.ByteArrayOutputStream;",
                " import java.io.Closeable;",
                "@@ -24,4 +25,19 @@ import java.io.OutputStream;",
                " import java.text.NumberFormat;",
                "+import java.util.ArrayList;",
                "+import java.util.HashMap;",
                "+import java.util.HashSet;",
                "+import java.util.List;",
                " import java.util.Locale;",
                "+import java.util.Map;",
                "+import java.util.Set;",
                " import java.util.Stack;",
                "+import java.util.regex.Pattern;",
                "+",
                "+import org.apache.commons.logging.Log;",
                "+import org.apache.commons.logging.LogFactory;",
                "+import org.apache.fontbox.ttf.CmapLookup;",
                "+import org.apache.fontbox.ttf.gsub.CompoundCharacterTokenizer;",
                "+import org.apache.fontbox.ttf.gsub.GsubWorker;",
                "+import org.apache.fontbox.ttf.gsub.GsubWorkerFactory;",
                "+import org.apache.fontbox.ttf.model.GsubData;",
                " import org.apache.pdfbox.cos.COSBase;",
                "@@ -32,2 +48,3 @@ import org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyLis",
                " import org.apache.pdfbox.pdmodel.font.PDFont;",
                "+import org.apache.pdfbox.pdmodel.font.PDType0Font;",
                " import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
                "@@ -46,2 +63,3 @@ import org.apache.pdfbox.pdmodel.graphics.shading.PDShading;",
                " import org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState;",
                "+import org.apache.pdfbox.pdmodel.graphics.state.RenderingMode;",
                " import org.apache.pdfbox.util.Charsets;",
                "@@ -57,2 +75,6 @@ abstract class PDAbstractContentStream implements Closeable",
                " {",
                "+    private static final Log LOG = LogFactory.getLog(PDAbstractContentStream.class);",
                "+",
                "+    protected final PDDocument document; // may be null",
                "+",
                "     protected final OutputStream outputStream;",
                "@@ -70,9 +92,15 @@ abstract class PDAbstractContentStream implements Closeable",
                "+    private final Map<PDType0Font, GsubWorker> gsubWorkers = new HashMap<>();",
                "+    private final GsubWorkerFactory gsubWorkerFactory = new GsubWorkerFactory();",
                "+",
                "     /**",
                "      * Create a new appearance stream.",
                "-     * ",
                "+     *",
                "+     * @param document may be null",
                "      * @param outputStream The appearances output stream to write to.",
                "+     * @param resources The resources to use",
                "      */",
                "-    PDAbstractContentStream(OutputStream outputStream, PDResources resources)",
                "+    PDAbstractContentStream(PDDocument document, OutputStream outputStream, PDResources resources)",
                "     {",
                "+        this.document = document;",
                "         this.outputStream = outputStream;",
                "@@ -147,2 +175,28 @@ abstract class PDAbstractContentStream implements Closeable",
                "+        // keep track of fonts which are configured for subsetting",
                "+        if (font.willBeSubset())",
                "+        {",
                "+            if (document != null)",
                "+            {",
                "+                document.getFontsToSubset().add(font);",
                "+            }",
                "+            else",
                "+            {",
                "+                LOG.warn(\"attempting to use subset font \" + font.getName() + \" without proper context\");",
                "+            }",
                "+        }",
                "+",
                "+        // complex text layout",
                "+        if (font instanceof PDType0Font)",
                "+        {",
                "+            PDType0Font pdType0Font = (PDType0Font) font;",
                "+            GsubData gsubData = pdType0Font.getGsubData();",
                "+            if (gsubData != GsubData.NO_DATA_FOUND)",
                "+            {",
                "+                GsubWorker gsubWorker = gsubWorkerFactory.getGsubWorker(pdType0Font.getCmapLookup(),",
                "+                        gsubData);",
                "+                gsubWorkers.put((PDType0Font) font, gsubWorker);",
                "+            }",
                "+        }",
                "+",
                "         writeOperand(resources.add(font));",
                "@@ -221,2 +275,25 @@ abstract class PDAbstractContentStream implements Closeable",
                "+        // complex text layout",
                "+        byte[] encodedText = null;",
                "+        if (font instanceof PDType0Font)",
                "+        {",
                "+",
                "+            GsubWorker gsubWorker = gsubWorkers.get(font);",
                "+            if (gsubWorker != null)",
                "+            {",
                "+                PDType0Font pdType0Font = (PDType0Font) font;",
                "+                Set<Integer> glyphIds = new HashSet<>();",
                "+                encodedText = encodeForGsub(gsubWorker, glyphIds, pdType0Font, text);",
                "+                if (pdType0Font.willBeSubset())",
                "+                {",
                "+                    pdType0Font.addGlyphsToSubset(glyphIds);",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        if (encodedText == null)",
                "+        {",
                "+            encodedText = font.encode(text);",
                "+        }",
                "+",
                "         // Unicode code points to keep when subsetting",
                "@@ -232,3 +309,3 @@ abstract class PDAbstractContentStream implements Closeable",
                "-        COSWriter.writeString(font.encode(text), outputStream);",
                "+        COSWriter.writeString(encodedText, outputStream);",
                "     }",
                "@@ -1536,2 +1613,84 @@ abstract class PDAbstractContentStream implements Closeable",
                "     }",
                "+",
                "+    /**",
                "+     * Set the text rendering mode. This determines whether showing text shall cause glyph outlines",
                "+     * to be stroked, filled, used as a clipping boundary, or some combination of the three.",
                "+     *",
                "+     * @param rm The text rendering mode.",
                "+     * @throws IOException If the content stream could not be written.",
                "+     */",
                "+    public void setRenderingMode(RenderingMode rm) throws IOException",
                "+    {",
                "+        writeOperand(rm.intValue());",
                "+        writeOperator(\"Tr\");",
                "+    }",
                "+",
                "+    /**",
                "+     * Set the text rise value, i.e. move the baseline up or down. This is useful for drawing",
                "+     * superscripts or subscripts.",
                "+     *",
                "+     * @param rise Specifies the distance, in unscaled text space units, to move the baseline up or",
                "+     * down from its default location. 0 restores the default location.",
                "+     * @throws IOException",
                "+     */",
                "+    public void setTextRise(float rise) throws IOException",
                "+    {",
                "+        writeOperand(rise);",
                "+        writeOperator(\"Ts\");",
                "+    }",
                "+",
                "+    private byte[] encodeForGsub(GsubWorker gsubWorker,",
                "+                                 Set<Integer> glyphIds, PDType0Font font, String text) throws IOException",
                "+    {",
                "+",
                "+        String spaceRegexPattern = \"\\\\s\";",
                "+        Pattern spaceRegex = Pattern.compile(spaceRegexPattern);",
                "+",
                "+        // break the entire chunk of text into words by splitting it with space",
                "+        List<String> words = new CompoundCharacterTokenizer(\"\\\\s\").tokenize(text);",
                "+",
                "+        ByteArrayOutputStream out = new ByteArrayOutputStream();",
                "+",
                "+        for (String word : words)",
                "+        {",
                "+            if (spaceRegex.matcher(word).matches())",
                "+            {",
                "+                out.write(font.encode(word));",
                "+            }",
                "+            else",
                "+            {",
                "+                glyphIds.addAll(applyGSUBRules(gsubWorker, out, font, word));",
                "+            }",
                "+        }",
                "+",
                "+        return out.toByteArray();",
                "+    }",
                "+",
                "+    private List<Integer> applyGSUBRules(GsubWorker gsubWorker, ByteArrayOutputStream out, PDType0Font font, String word) throws IOException",
                "+    {",
                "+        List<Integer> originalGlyphIds = new ArrayList<>();",
                "+        CmapLookup cmapLookup = font.getCmapLookup();",
                "+",
                "+        // convert characters into glyphIds",
                "+        for (char unicodeChar : word.toCharArray())",
                "+        {",
                "+            int glyphId = cmapLookup.getGlyphId(unicodeChar);",
                "+            if (glyphId <= 0)",
                "+            {",
                "+                throw new IllegalStateException(",
                "+                        \"could not find the glyphId for the character: \" + unicodeChar);",
                "+            }",
                "+            originalGlyphIds.add(glyphId);",
                "+        }",
                "+",
                "+        List<Integer> glyphIdsAfterGsub = gsubWorker.applyTransforms(originalGlyphIds);",
                "+",
                "+        for (Integer glyphId : glyphIdsAfterGsub)",
                "+        {",
                "+            out.write(font.encodeGlyphId(glyphId));",
                "+        }",
                "+",
                "+        return glyphIdsAfterGsub;",
                "+",
                "+    }",
                " }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "index ce4ef3305..a4dfc0e26 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "@@ -58,3 +58,3 @@ public final class PDAppearanceContentStream extends PDAbstractContentStream imp",
                "     {",
                "-        super(outputStream, appearance.getResources());",
                "+        super(null, outputStream, appearance.getResources());",
                "     }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java",
                "index e95a6a0af..276e63e9c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java",
                "@@ -36,3 +36,3 @@ public final class PDFormContentStream extends PDAbstractContentStream",
                "     {",
                "-        super(form.getContentStream().createOutputStream(), form.getResources());",
                "+        super(null, form.getContentStream().createOutputStream(), form.getResources());",
                "     }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "index bb98b7ff7..f5307183c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "@@ -20,3 +20,2 @@ import java.awt.geom.AffineTransform;",
                " import java.awt.geom.PathIterator;",
                "-import java.io.ByteArrayOutputStream;",
                " import java.io.Closeable;",
                "@@ -24,9 +23,2 @@ import java.io.IOException;",
                " import java.io.OutputStream;",
                "-import java.util.ArrayList;",
                "-import java.util.HashMap;",
                "-import java.util.HashSet;",
                "-import java.util.List;",
                "-import java.util.Map;",
                "-import java.util.Set;",
                "-import java.util.regex.Pattern;",
                "@@ -34,7 +26,2 @@ import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "-import org.apache.fontbox.ttf.CmapLookup;",
                "-import org.apache.fontbox.ttf.gsub.CompoundCharacterTokenizer;",
                "-import org.apache.fontbox.ttf.gsub.GsubWorker;",
                "-import org.apache.fontbox.ttf.gsub.GsubWorkerFactory;",
                "-import org.apache.fontbox.ttf.model.GsubData;",
                " import org.apache.pdfbox.cos.COSArray;",
                "@@ -42,7 +29,4 @@ import org.apache.pdfbox.cos.COSBase;",
                " import org.apache.pdfbox.cos.COSName;",
                "-import org.apache.pdfbox.pdfwriter.COSWriter;",
                " import org.apache.pdfbox.pdmodel.common.PDStream;",
                " import org.apache.pdfbox.pdmodel.documentinterchange.markedcontent.PDPropertyList;",
                "-import org.apache.pdfbox.pdmodel.font.PDFont;",
                "-import org.apache.pdfbox.pdmodel.font.PDType0Font;",
                " import org.apache.pdfbox.pdmodel.graphics.PDXObject;",
                "@@ -56,4 +40,2 @@ import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;",
                " import org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage;",
                "-import org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState;",
                "-import org.apache.pdfbox.pdmodel.graphics.state.RenderingMode;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
                "@@ -100,7 +82,2 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "-    private final PDDocument document;",
                "-",
                "-    private final Map<PDType0Font, GsubWorker> gsubWorkers = new HashMap<>();",
                "-    private final GsubWorkerFactory gsubWorkerFactory = new GsubWorkerFactory();",
                "-",
                "     /**",
                "@@ -160,3 +137,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        super(stream.createOutputStream(compress ? COSName.FLATE_DECODE : null), resources);",
                "+        super(document, stream.createOutputStream(compress ? COSName.FLATE_DECODE : null), resources);",
                "@@ -168,4 +145,2 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "-        this.document = document;",
                "-",
                "         // If request specifies the need to append/prepend to the document",
                "@@ -256,47 +231,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        super(outputStream, appearance.getResources());",
                "-        this.document = doc;",
                "-        ",
                "-        //setResources(appearance.getResources());",
                "-    }",
                "-",
                "-    /**",
                "-     * Set the font and font size to draw text with.",
                "-     *",
                "-     * @param font The font to use.",
                "-     * @param fontSize The font size to draw the text.",
                "-     * @throws IOException If there is an error writing the font information.",
                "-     */",
                "-    @Override",
                "-    public void setFont(PDFont font, float fontSize) throws IOException",
                "-    {",
                "-        if (fontStack.isEmpty())",
                "-        {",
                "-            fontStack.add(font);",
                "-        }",
                "-        else",
                "-        {",
                "-            fontStack.setElementAt(font, fontStack.size() - 1);",
                "-        }",
                "-        ",
                "-        if (font.willBeSubset())",
                "-        {",
                "-            document.getFontsToSubset().add(font);",
                "-        }",
                "-        ",
                "-        if (font instanceof PDType0Font)",
                "-        {",
                "-            PDType0Font pdType0Font = (PDType0Font) font;",
                "-            GsubData gsubData = pdType0Font.getGsubData();",
                "-            if (gsubData != GsubData.NO_DATA_FOUND)",
                "-            {",
                "-                GsubWorker gsubWorker = gsubWorkerFactory.getGsubWorker(pdType0Font.getCmapLookup(),",
                "-                        gsubData);",
                "-                gsubWorkers.put((PDType0Font) font, gsubWorker);",
                "-            }",
                "-        }",
                "-",
                "-        writeOperand(resources.add(font));",
                "-        writeOperand(fontSize);",
                "-        writeOperator(\"Tf\");",
                "+        super(doc, outputStream, appearance.getResources());",
                "     }",
                "@@ -316,61 +247,2 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "-    /**",
                "-     * Outputs a string using the correct encoding and subsetting as required.",
                "-     *",
                "-     * @param text The Unicode text to show.",
                "-     * ",
                "-     * @throws IOException If an io exception occurs.",
                "-     */",
                "-    @Override",
                "-    protected void showTextInternal(String text) throws IOException",
                "-    {",
                "-        if (!inTextMode)",
                "-        {",
                "-            throw new IllegalStateException(\"Must call beginText() before showText()\");",
                "-        }",
                "-",
                "-        if (fontStack.isEmpty())",
                "-        {",
                "-            throw new IllegalStateException(\"Must call setFont() before showText()\");",
                "-        }",
                "-",
                "-        PDFont font = fontStack.peek();",
                "-",
                "-        byte[] encodedText = null;",
                "-",
                "-        if (font instanceof PDType0Font)",
                "-        {",
                "-",
                "-            GsubWorker gsubWorker = gsubWorkers.get(font);",
                "-            if (gsubWorker != null)",
                "-            {",
                "-                PDType0Font pdType0Font = (PDType0Font) font;",
                "-                Set<Integer> glyphIds = new HashSet<>();",
                "-                encodedText = encodeForGsub(gsubWorker, glyphIds, pdType0Font, text);",
                "-                if (pdType0Font.willBeSubset())",
                "-                {",
                "-                    pdType0Font.addGlyphsToSubset(glyphIds);",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        if (encodedText == null)",
                "-        {",
                "-            encodedText = font.encode(text);",
                "-        }",
                "-",
                "-        // Unicode code points to keep when subsetting",
                "-        if (font.willBeSubset())",
                "-        {",
                "-            for (int offset = 0; offset < text.length(); )",
                "-            {",
                "-                int codePoint = text.codePointAt(offset);",
                "-                font.addToSubset(codePoint);",
                "-                offset += Character.charCount(codePoint);",
                "-            }",
                "-        }",
                "-",
                "-        COSWriter.writeString(encodedText, outputStream);",
                "-    }",
                "-",
                "     /**",
                "@@ -588,46 +460,2 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "-    /**",
                "-     * q operator. Saves the current graphics state.",
                "-     * @throws IOException If an error occurs while writing to the stream.",
                "-     */",
                "-    @Override",
                "-    public void saveGraphicsState() throws IOException",
                "-    {",
                "-        if (!fontStack.isEmpty())",
                "-        {",
                "-            fontStack.push(fontStack.peek());",
                "-        }",
                "-        if (!strokingColorSpaceStack.isEmpty())",
                "-        {",
                "-            strokingColorSpaceStack.push(strokingColorSpaceStack.peek());",
                "-        }",
                "-        if (!nonStrokingColorSpaceStack.isEmpty())",
                "-        {",
                "-            nonStrokingColorSpaceStack.push(nonStrokingColorSpaceStack.peek());",
                "-        }",
                "-        writeOperator(\"q\");",
                "-    }",
                "-",
                "-    /**",
                "-     * Q operator. Restores the current graphics state.",
                "-     * @throws IOException If an error occurs while writing to the stream.",
                "-     */",
                "-    @Override",
                "-    public void restoreGraphicsState() throws IOException",
                "-    {",
                "-        if (!fontStack.isEmpty())",
                "-        {",
                "-            fontStack.pop();",
                "-        }",
                "-        if (!strokingColorSpaceStack.isEmpty())",
                "-        {",
                "-            strokingColorSpaceStack.pop();",
                "-        }",
                "-        if (!nonStrokingColorSpaceStack.isEmpty())",
                "-        {",
                "-            nonStrokingColorSpaceStack.pop();",
                "-        }",
                "-        writeOperator(\"Q\");",
                "-    }",
                "-",
                "     /**",
                "@@ -1149,98 +977,2 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     }",
                "-    ",
                "-    /**",
                "-     * Set an extended graphics state.",
                "-     * ",
                "-     * @param state The extended graphics state.",
                "-     * @throws IOException If the content stream could not be written.",
                "-     */",
                "-    @Override",
                "-    public void setGraphicsStateParameters(PDExtendedGraphicsState state) throws IOException",
                "-    {",
                "-        writeOperand(resources.add(state));",
                "-        writeOperator(\"gs\");",
                "-    }",
                "-",
                "-    /**",
                "-     * Set the text rendering mode. This determines whether showing text shall cause glyph outlines",
                "-     * to be stroked, filled, used as a clipping boundary, or some combination of the three.",
                "-     *",
                "-     * @param rm The text rendering mode.",
                "-     * @throws IOException If the content stream could not be written.",
                "-     */",
                "-    public void setRenderingMode(RenderingMode rm) throws IOException",
                "-    {",
                "-        writeOperand(rm.intValue());",
                "-        writeOperator(\"Tr\");",
                "-    }",
                "-",
                "-    /**",
                "-     * Set the text rise value, i.e. move the baseline up or down. This is useful for drawing",
                "-     * superscripts or subscripts.",
                "-     *",
                "-     * @param rise Specifies the distance, in unscaled text space units, to move the baseline up or",
                "-     * down from its default location. 0 restores the default location.",
                "-     * @throws IOException",
                "-     */",
                "-    public void setTextRise(float rise) throws IOException",
                "-    {",
                "-        writeOperand(rise);",
                "-        writeOperator(\"Ts\");",
                "-    }",
                "-",
                "-    private byte[] encodeForGsub(GsubWorker gsubWorker,",
                "-            Set<Integer> glyphIds, PDType0Font font, String text) throws IOException",
                "-    {",
                "-",
                "-        String spaceRegexPattern = \"\\\\s\";",
                "-        Pattern spaceRegex = Pattern.compile(spaceRegexPattern);",
                "-",
                "-        // break the entire chunk of text into words by splitting it with space",
                "-        List<String> words = new CompoundCharacterTokenizer(\"\\\\s\").tokenize(text);",
                "-",
                "-        ByteArrayOutputStream out = new ByteArrayOutputStream();",
                "-",
                "-        for (String word : words)",
                "-        {",
                "-            if (spaceRegex.matcher(word).matches())",
                "-            {",
                "-                out.write(font.encode(word));",
                "-            }",
                "-            else",
                "-            {",
                "-                glyphIds.addAll(applyGSUBRules(gsubWorker, out, font, word));",
                "-            }",
                "-        }",
                "-",
                "-        return out.toByteArray();",
                "-    }",
                "-",
                "-    private List<Integer> applyGSUBRules(GsubWorker gsubWorker, ByteArrayOutputStream out, PDType0Font font, String word) throws IOException",
                "-    {",
                "-        List<Integer> originalGlyphIds = new ArrayList<>();",
                "-        CmapLookup cmapLookup = font.getCmapLookup();",
                "-",
                "-        // convert characters into glyphIds",
                "-        for (char unicodeChar : word.toCharArray())",
                "-        {",
                "-            int glyphId = cmapLookup.getGlyphId(unicodeChar);",
                "-            if (glyphId <= 0)",
                "-            {",
                "-                throw new IllegalStateException(",
                "-                        \"could not find the glyphId for the character: \" + unicodeChar);",
                "-            }",
                "-            originalGlyphIds.add(glyphId);",
                "-        }",
                "-",
                "-        List<Integer> glyphIdsAfterGsub = gsubWorker.applyTransforms(originalGlyphIds);",
                "-",
                "-        for (Integer glyphId : glyphIdsAfterGsub)",
                "-        {",
                "-            out.write(font.encodeGlyphId(glyphId));",
                "-        }",
                "-",
                "-        return glyphIdsAfterGsub;",
                "-",
                "-    }",
                "-",
                " }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java",
                "index 64bd45acb..c4a6bf88e 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java",
                "@@ -36,3 +36,3 @@ public final class PDPatternContentStream extends PDAbstractContentStream",
                "     {",
                "-        super(pattern.getContentStream().createOutputStream(), pattern.getResources());",
                "+        super(null, pattern.getContentStream().createOutputStream(), pattern.getResources());",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDFormContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPatternContentStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4068": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4068",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a5449d6fea0d20302643cd6035e0479ed1b35b60",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531154230,
            "hunks": 1,
            "message": "PDFBOX-4261: copy xref table entries to make sure that object numbers are kept when saving incrementally git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/1.8@1835454 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/NonSequentialPDFParser.java b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/NonSequentialPDFParser.java",
                "index dab6b2f43..364edcfee 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/NonSequentialPDFParser.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/NonSequentialPDFParser.java",
                "@@ -646,2 +646,4 @@ public class NonSequentialPDFParser extends PDFParser",
                "         checkXrefOffsets();",
                "+        // copy xref table",
                "+        document.addXRefTable(xrefTrailerResolver.getXrefTable());",
                "         return trailer;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/NonSequentialPDFParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4261": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.8.16",
                "1.8.17"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: parse",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4261",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "44459e8b94c95211ffb3ada07b31be032ce2c7f8",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523708898,
            "hunks": 1,
            "message": "PDFBOX-3809: add missing test for hasMissingPageRef before LOG statement git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829135 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "index e715bb9a4..5d47308fa 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "@@ -805,3 +805,6 @@ public final class PDAcroForm implements COSObjectable",
                "         // widget. But this will be much slower so will be omitted for now.",
                "-        LOG.warn(\"There has been a widget with a missing page reference. Please report to the PDFBox project\");",
                "+        if (hasMissingPageRef)",
                "+        {",
                "+            LOG.warn(\"There has been a widget with a missing page reference. Please report to the PDFBox project\");",
                "+        }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3809": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: page",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3809",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a5ead97b122eaba8cbcaab15d71b990691b1c21a",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523727830,
            "hunks": 1,
            "message": "PDFBOX-4182, PDFBOX-4188: correct javadoc git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1829159 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "index 0ce2de7b5..ecf046e87 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "@@ -102,5 +102,5 @@ public class PDFMergerUtility",
                "      *      </ul>  ",
                "-     * <li>{@link DocumentMergeMode#PDFBOX_LEGACY_MODE} fields with the same fully qualified name",
                "-     *      will be renamed and treated as independent. This mode was used in versions",
                "-     *      of PDFBox up to 2.x.",
                "+     * <li>{@link DocumentMergeMode#PDFBOX_LEGACY_MODE} Keeps all files open until the",
                "+     *      merge has been completed. This is  currently necessary to merge documents",
                "+     *      containing a Structure Tree. <br>This is the standard mode for PDFBox 2.0.",
                "      * </ul>"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4182": "",
                "PDFBOX-4188": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5c3cf8f2edd00f49ff3a261a42b8633fdaa786dd"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4182, PDFBOX-4188",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6563576aabf4cee1628889b23d7bb9f70a5be844",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532535998,
            "hunks": 8,
            "message": "PDFBOX-4071: avoid ClassCastException git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1836646 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java",
                "index 5fc9bbce1..78faf5a0d 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java",
                "@@ -115,4 +115,4 @@ public class PDType3Font extends PDSimpleFont",
                "     {",
                "-        COSStream stream = (COSStream) getCharProcs().getDictionaryObject(COSName.getPDFName(name));",
                "-        return stream != null;",
                "+        COSBase base = getCharProcs().getDictionaryObject(COSName.getPDFName(name));",
                "+        return base instanceof COSStream;",
                "     }",
                "@@ -226,6 +226,6 @@ public class PDType3Font extends PDSimpleFont",
                "         {",
                "-            COSArray array = (COSArray) dict.getDictionaryObject(COSName.FONT_MATRIX);",
                "-            if (array != null)",
                "+            COSBase base = dict.getDictionaryObject(COSName.FONT_MATRIX);",
                "+            if (base instanceof COSArray)",
                "             {",
                "-                fontMatrix = new Matrix(array);",
                "+                fontMatrix = new Matrix((COSArray) base);",
                "             }",
                "@@ -255,6 +255,6 @@ public class PDType3Font extends PDSimpleFont",
                "         {",
                "-            COSDictionary resourcesDict = (COSDictionary) dict.getDictionaryObject(COSName.RESOURCES);",
                "-            if (resourcesDict != null)",
                "+            COSBase base = dict.getDictionaryObject(COSName.RESOURCES);",
                "+            if (base instanceof COSDictionary)",
                "             {",
                "-                this.resources = new PDResources(resourcesDict);",
                "+                this.resources = new PDResources((COSDictionary) base);",
                "             }",
                "@@ -271,7 +271,7 @@ public class PDType3Font extends PDSimpleFont",
                "     {",
                "-        COSArray rect = (COSArray) dict.getDictionaryObject(COSName.FONT_BBOX);",
                "+         COSBase base = dict.getDictionaryObject(COSName.FONT_BBOX);",
                "         PDRectangle retval = null;",
                "-        if(rect != null)",
                "+        if (base instanceof COSArray)",
                "         {",
                "-            retval = new PDRectangle(rect);",
                "+            retval = new PDRectangle((COSArray) base);",
                "         }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f65839e45cf27ff0c178cdf4398c5b39dd1c4102"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ffb9596746b636b7f85429fd7b9b06df653fa606",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524159762,
            "hunks": 1,
            "message": "PDFBOX-4071: add comment git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1829580 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "index 616d7b845..a431e858a 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "@@ -721,2 +721,4 @@ public class PDFMergerUtility",
                "             {",
                "+                // add the value of the destination ParentTreeNextKey to every source element ",
                "+                // StructParent(s) value so that these don't overlap with the existing values",
                "                 updateStructParentEntries(newPage, destParentTreeNextKey);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "16591de35c096b22bb9cada8509f460ef2c0ce21"
                ],
                [
                    "no-tag",
                    "7a398b4319d294c1ffa7105f50680e98be6604a0"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "679b076473675cd697124c16b1936e42324ae127",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527790046,
            "hunks": 1,
            "message": "PDFBOX-4235: avoid NPE if font is not defined in /DA string git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832635 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
                "index 03218edb2..1c40f70c5 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
                "@@ -413,3 +413,6 @@ class AppearanceGeneratorHelper",
                "             PDFont font = defaultAppearance.getFont();",
                "-            ",
                "+            if (font == null)",
                "+            {",
                "+                throw new IllegalStateException(\"font is null, check whether /DA entry is incomplete or incorrect\");",
                "+            }",
                "             // calculate the fontSize (because 0 = autosize)"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4235": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "86569de9c42a2589927280c7fca684e5c946779b"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4235",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0cd3397d9332026f633e9f859c467270f98e0446",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523727211,
            "hunks": 2,
            "message": "PDFBOX-4182, PDFBOX-4188: add new merge mode which closes the source PDDocument after the individual merge; early implementation git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1829156 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "index e418daa6e..0ce2de7b5 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "@@ -90,2 +90,25 @@ public class PDFMergerUtility",
                "+    private DocumentMergeMode documentMergeMode = DocumentMergeMode.PDFBOX_LEGACY_MODE;",
                "+",
                "+    /**",
                "+     * The mode to use when merging documents.",
                "+     * ",
                "+     * <p><ul>",
                "+     * <li>{@link DocumentMergeMode#OPTIMIZE_RESOURCES_MODE} Optimizes resource handling such as",
                "+     *      closing documents early. <strong>Not all document elements are merged</strong> compared to",
                "+     *      the PDFBOX_LEGACY_MODE. Currently supported are:",
                "+     *      <ul>",
                "+     *          <li>Page content and resources",
                "+     *      </ul>  ",
                "+     * <li>{@link DocumentMergeMode#PDFBOX_LEGACY_MODE} fields with the same fully qualified name",
                "+     *      will be renamed and treated as independent. This mode was used in versions",
                "+     *      of PDFBox up to 2.x.",
                "+     * </ul>",
                "+     */",
                "+    public enum DocumentMergeMode",
                "+    {",
                "+        OPTIMIZE_RESOURCES_MODE,",
                "+        PDFBOX_LEGACY_MODE",
                "+    }",
                "+",
                "     /**",
                "@@ -252,2 +275,80 @@ public class PDFMergerUtility",
                "     public void mergeDocuments(MemoryUsageSetting memUsageSetting) throws IOException",
                "+    {",
                "+        if (documentMergeMode == DocumentMergeMode.PDFBOX_LEGACY_MODE)",
                "+        {",
                "+            legacyMergeDocuments(memUsageSetting);",
                "+        }",
                "+        else if (documentMergeMode == DocumentMergeMode.OPTIMIZE_RESOURCES_MODE)",
                "+        {",
                "+            optimizedMergeDocuments(memUsageSetting, sources);",
                "+        }",
                "+    }",
                "+",
                "+    private void optimizedMergeDocuments(MemoryUsageSetting memUsageSetting, List<InputStream> sourceDocuments) throws IOException",
                "+    {",
                "+        PDDocument destination = null;",
                "+        try",
                "+        {",
                "+            destination = new PDDocument(memUsageSetting);",
                "+            PDFCloneUtility cloner = new PDFCloneUtility(destination);",
                "+",
                "+            for (InputStream sourceInputStream : sources)",
                "+            {",
                "+                PDDocument sourceDoc = null;",
                "+                try",
                "+                {",
                "+                    sourceDoc = PDDocument.load(sourceInputStream, memUsageSetting);",
                "+",
                "+                    for (PDPage page : sourceDoc.getPages())",
                "+                    {",
                "+                        PDPage newPage = new PDPage((COSDictionary) cloner.cloneForNewDocument(page.getCOSObject()));",
                "+                        newPage.setCropBox(page.getCropBox());",
                "+                        newPage.setMediaBox(page.getMediaBox());",
                "+                        newPage.setRotation(page.getRotation());",
                "+                        PDResources resources = page.getResources();",
                "+                        if (resources != null)",
                "+                        {",
                "+                            // this is smart enough to just create references for resources that are used on multiple pages",
                "+                            newPage.setResources(new PDResources((COSDictionary) cloner.cloneForNewDocument(resources)));",
                "+                        }",
                "+                        else",
                "+                        {",
                "+                            newPage.setResources(new PDResources());",
                "+                        }",
                "+                        destination.addPage(newPage);",
                "+                    }",
                "+                    sourceDoc.close();",
                "+                }",
                "+                finally",
                "+                {",
                "+                    IOUtils.closeQuietly(sourceDoc);",
                "+                }",
                "+                sourceInputStream.close();",
                "+            }",
                "+            ",
                "+            if (destinationStream == null)",
                "+            {",
                "+                destination.save(destinationFileName);",
                "+            }",
                "+            else",
                "+            {",
                "+                destination.save(destinationStream);",
                "+            }",
                "+        }",
                "+        finally",
                "+        {",
                "+            IOUtils.closeQuietly(destination);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Merge the list of source documents, saving the result in the destination",
                "+     * file.",
                "+     *",
                "+     * @param memUsageSetting defines how memory is used for buffering PDF streams;",
                "+     *                        in case of <code>null</code> unrestricted main memory is used ",
                "+     * ",
                "+     * @throws IOException If there is an error saving the document.",
                "+     */",
                "+    private void legacyMergeDocuments(MemoryUsageSetting memUsageSetting) throws IOException",
                "     {"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4182": "",
                "PDFBOX-4188": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9045df5f353972cbddca45c0d7cd15f25cc28c19"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4182, PDFBOX-4188",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "18a5850ec8daa7a46b196d462100abcb39425932",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529946072,
            "hunks": 1,
            "message": "PDFBOX-4071: remove command that doesn't exist in 2.* from \"usage\" message  git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834346 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/tools/src/main/java/org/apache/pdfbox/tools/PDFBox.java b/tools/src/main/java/org/apache/pdfbox/tools/PDFBox.java",
                "index 472419e69..1ef727a4f 100644",
                "--- a/tools/src/main/java/org/apache/pdfbox/tools/PDFBox.java",
                "+++ b/tools/src/main/java/org/apache/pdfbox/tools/PDFBox.java",
                "@@ -109,3 +109,2 @@ public final class PDFBox",
                "                 + \"\\nPossible commands are:\\n\"",
                "-                + \"  ConvertColorspace\\n\"",
                "                 + \"  Decrypt\\n\""
            ],
            "changed_files": [
                "tools/src/main/java/org/apache/pdfbox/tools/PDFBox.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4cfd06ef1c1493b9c69239d86e02b1a7e839aec6"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ec2e25303facbc19557decd92ddc225424b6062f",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530812177,
            "hunks": 2,
            "message": "PDFBOX-4242: better method name git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1835162 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "index 6dd79df70..ec21bee87 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "@@ -906,3 +906,3 @@ public class PDDocument implements Closeable",
                "      */",
                "-    public void registerTrueTypeFont(TrueTypeFont ttf)",
                "+    public void registerTrueTypeFontForClosing(TrueTypeFont ttf)",
                "     {",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "index f2e225997..4b8f756ad 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "@@ -224,3 +224,3 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "                 this.ttf = ttf;",
                "-                document.registerTrueTypeFont(ttf);",
                "+                document.registerTrueTypeFontForClosing(ttf);",
                "             }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4242": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "47de78239855498beea5333498481e0dad6f41d7"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4242",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4c77ee8b4e51a4182915b57f0c67d372bf1cb109",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523387368,
            "hunks": 19,
            "message": "PDFBOX-4187: refactor, use the alpha value from getRGB() git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1828848 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "index 9cd871872..06f1e7582 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "@@ -19,4 +19,2 @@ import java.awt.Transparency;",
                " import java.awt.image.BufferedImage;",
                "-import java.awt.image.DataBuffer;",
                "-import java.awt.image.WritableRaster;",
                " import java.io.ByteArrayInputStream;",
                "@@ -63,3 +61,2 @@ public final class LosslessFactory",
                "         int[] rgbLineBuffer = new int[width];",
                "-        byte[] imageData;",
                "@@ -70,7 +67,4 @@ public final class LosslessFactory",
                "             bpc = image.getColorModel().getPixelSize();",
                "-            deviceColorSpace = PDDeviceGray.INSTANCE;",
                "-            ",
                "-            ByteArrayOutputStream bos = new ByteArrayOutputStream((width*bpc/8)+(width*bpc%8 != 0 ? 1:0)*height);",
                "-            MemoryCacheImageOutputStream mcios = new MemoryCacheImageOutputStream(bos);",
                "-            ",
                "+            ByteArrayOutputStream baos = new ByteArrayOutputStream(((width*bpc/8)+(width*bpc%8 != 0 ? 1:0))*height);",
                "+            MemoryCacheImageOutputStream mcios = new MemoryCacheImageOutputStream(baos);",
                "             for (int y = 0; y < height; ++y)",
                "@@ -81,3 +75,3 @@ public final class LosslessFactory",
                "                 }",
                "-                ",
                "+",
                "                 int bitOffset = mcios.getBitOffset();",
                "@@ -85,3 +79,3 @@ public final class LosslessFactory",
                "                 {",
                "-                    mcios.writeBits(0, 8-bitOffset);",
                "+                    mcios.writeBits(0, 8 - bitOffset);",
                "                 }",
                "@@ -90,4 +84,5 @@ public final class LosslessFactory",
                "             mcios.close();",
                "-            ",
                "-            imageData = bos.toByteArray();",
                "+",
                "+            return prepareImageXObject(document, baos.toByteArray(), ",
                "+                image.getWidth(), image.getHeight(), bpc, PDDeviceGray.INSTANCE);",
                "         }",
                "@@ -98,148 +93,69 @@ public final class LosslessFactory",
                "             deviceColorSpace = PDDeviceRGB.INSTANCE;",
                "-            imageData = new byte[width*height*3];",
                "+            byte[] imageData = new byte[width * height * 3];",
                "             int byteIdx = 0;",
                "-            ",
                "-            for (int y = 0; y < height; ++y)",
                "+            int alphaByteIdx = 0;",
                "+            int alphaBitPos = 7;",
                "+            int transparency = image.getTransparency();",
                "+            int apbc = transparency == Transparency.BITMASK ? 1 : 8;",
                "+            byte[] alphaImageData;",
                "+            if (transparency != Transparency.OPAQUE)",
                "             {",
                "-                for (int pixel : image.getRGB(0, y, width, 1, rgbLineBuffer, 0, width))",
                "-                {",
                "-                    imageData[byteIdx++] = (byte)((pixel >> 16) & 0xFF);",
                "-                    imageData[byteIdx++] = (byte)((pixel >> 8) & 0xFF);",
                "-                    imageData[byteIdx++] = (byte)(pixel & 0xFF);",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        PDImageXObject pdImage = prepareImageXObject(document, imageData, ",
                "-                image.getWidth(), image.getHeight(), bpc, deviceColorSpace);",
                "-",
                "-        // alpha -> soft mask",
                "-        PDImage xAlpha = createAlphaFromARGBImage(document, image);",
                "-        if (xAlpha != null)",
                "-        {",
                "-            pdImage.getCOSObject().setItem(COSName.SMASK, xAlpha);",
                "-        }",
                "-",
                "-        return pdImage;",
                "-    }",
                "-",
                "-    /**",
                "-     * Creates a grayscale Flate encoded PDImageXObject from the alpha channel",
                "-     * of an image.",
                "-     *",
                "-     * @param document the document where the image will be created.",
                "-     * @param image an ARGB image.",
                "-     *",
                "-     * @return the alpha channel of an image as a grayscale image.",
                "-     *",
                "-     * @throws IOException if something goes wrong",
                "-     */",
                "-    private static PDImageXObject createAlphaFromARGBImage(PDDocument document, BufferedImage image)",
                "-            throws IOException",
                "-    {",
                "-        // this implementation makes the assumption that the raster values can be used 1:1 for",
                "-        // the stream. ",
                "-        // Sadly the type of the databuffer is usually TYPE_INT and not TYPE_BYTE so we can't just",
                "-        // save it directly",
                "-        if (!image.getColorModel().hasAlpha())",
                "-        {",
                "-            return null;",
                "-        }",
                "-",
                "-        // extract the alpha information",
                "-        WritableRaster alphaRaster = image.getAlphaRaster();",
                "-        if (alphaRaster == null)",
                "-        {",
                "-            // happens sometimes (PDFBOX-2654) despite colormodel claiming to have alpha",
                "-            return createAlphaFromARGBImage2(document, image);",
                "-        }",
                "-",
                "-        int[] pixels = alphaRaster.getPixels(0, 0,",
                "-                alphaRaster.getWidth(),",
                "-                alphaRaster.getHeight(),",
                "-                (int[]) null);",
                "-        ByteArrayOutputStream bos = new ByteArrayOutputStream();",
                "-        int bpc;",
                "-        if (image.getTransparency() == Transparency.BITMASK)",
                "-        {",
                "-            bpc = 1;",
                "-            MemoryCacheImageOutputStream mcios = new MemoryCacheImageOutputStream(bos);",
                "-            int width = alphaRaster.getWidth();",
                "-            int p = 0;",
                "-            for (int pixel : pixels)",
                "-            {",
                "-                mcios.writeBit(pixel);",
                "-                ++p;",
                "-                if (p % width == 0)",
                "-                {",
                "-                    while (mcios.getBitOffset() != 0)",
                "-                    {",
                "-                        mcios.writeBit(0);",
                "-                    }",
                "-                }",
                "+                alphaImageData = new byte[((width * apbc / 8) + (width * apbc % 8 != 0 ? 1 : 0)) * height];",
                "             }",
                "-            mcios.flush();",
                "-            mcios.close();",
                "-        }",
                "-        else",
                "-        {",
                "-            bpc = 8;",
                "-            int dataType = alphaRaster.getDataBuffer().getDataType();",
                "-            // for 16 bit images divide by 256 ",
                "-            int shift = dataType == DataBuffer.TYPE_USHORT ? 8 : 0;",
                "-            for (int pixel : pixels)",
                "+            else",
                "             {",
                "-                bos.write(pixel >>> shift);",
                "+                alphaImageData = new byte[0];",
                "             }",
                "-        }",
                "-        PDImageXObject pdImage = prepareImageXObject(document, bos.toByteArray(), ",
                "-                image.getWidth(), image.getHeight(), bpc, PDDeviceGray.INSTANCE);",
                "-",
                "-        return pdImage;",
                "-    }",
                "-",
                "-    // create alpha image the hard way: get the alpha through getRGB()",
                "-    private static PDImageXObject createAlphaFromARGBImage2(PDDocument document, BufferedImage bi)",
                "-            throws IOException",
                "-    {",
                "-        ByteArrayOutputStream bos = new ByteArrayOutputStream();",
                "-        int bpc;",
                "-        if (bi.getTransparency() == Transparency.BITMASK)",
                "-        {",
                "-            bpc = 1;",
                "-            MemoryCacheImageOutputStream mcios = new MemoryCacheImageOutputStream(bos);",
                "-            for (int y = 0, h = bi.getHeight(); y < h; ++y)",
                "+            for (int y = 0; y < height; ++y)",
                "             {",
                "-                for (int x = 0, w = bi.getWidth(); x < w; ++x)",
                "+                for (int pixel : image.getRGB(0, y, width, 1, rgbLineBuffer, 0, width))",
                "                 {",
                "-                    int alpha = bi.getRGB(x, y) >>> 24;",
                "-                    mcios.writeBit(alpha);",
                "+                    imageData[byteIdx++] = (byte) ((pixel >> 16) & 0xFF);",
                "+                    imageData[byteIdx++] = (byte) ((pixel >> 8) & 0xFF);",
                "+                    imageData[byteIdx++] = (byte) (pixel & 0xFF);",
                "+                    if (transparency != Transparency.OPAQUE)",
                "+                    {",
                "+                        // we have the alpha right here, so no need to do it separately",
                "+                        // as done prior April 2018",
                "+                        if (transparency == Transparency.BITMASK)",
                "+                        {",
                "+                            // write a bit",
                "+                            alphaImageData[alphaByteIdx] |= ((pixel >> 24) & 1) << alphaBitPos;",
                "+                            if (--alphaBitPos < 0)",
                "+                            {",
                "+                                alphaBitPos = 7;",
                "+                                ++alphaByteIdx;",
                "+                            }",
                "+                        }",
                "+                        else",
                "+                        {",
                "+                            // write a byte",
                "+                            alphaImageData[alphaByteIdx++] = (byte) ((pixel >> 24) & 0xFF);",
                "+                        }",
                "+                    }",
                "                 }",
                "-                while (mcios.getBitOffset() != 0)",
                "+                if (transparency == Transparency.BITMASK)",
                "                 {",
                "-                    mcios.writeBit(0);",
                "+                    // skip boundary if needed",
                "+                    if (alphaBitPos != 7)",
                "+                    {",
                "+                        alphaBitPos = 7;",
                "+                        ++alphaByteIdx;",
                "+                    }",
                "                 }",
                "             }",
                "-            mcios.flush();",
                "-            mcios.close();",
                "-        }",
                "-        else",
                "-        {",
                "-            bpc = 8;",
                "-            for (int y = 0, h = bi.getHeight(); y < h; ++y)",
                "+            PDImageXObject pdImage = prepareImageXObject(document, imageData,",
                "+                    image.getWidth(), image.getHeight(), bpc, deviceColorSpace);",
                "+",
                "+            if (transparency != Transparency.OPAQUE)",
                "             {",
                "-                for (int x = 0, w = bi.getWidth(); x < w; ++x)",
                "-                {",
                "-                    int alpha = bi.getRGB(x, y) >>> 24;",
                "-                    bos.write(alpha);",
                "-                }",
                "+                PDImageXObject pdMask = prepareImageXObject(document, alphaImageData,",
                "+                            image.getWidth(), image.getHeight(), apbc, PDDeviceGray.INSTANCE);",
                "+                    pdImage.getCOSObject().setItem(COSName.SMASK, pdMask);",
                "             }",
                "-        }",
                "-        PDImageXObject pdImage = prepareImageXObject(document, bos.toByteArray(), ",
                "-                bi.getWidth(), bi.getHeight(), bpc, PDDeviceGray.INSTANCE);",
                "-",
                "-        return pdImage;",
                "-    }            ",
                "+            return pdImage;",
                "+        }      ",
                "+    }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4187": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0d5139b5efa8fb5d9b857fd6f96866b416f63ce0"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4187",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f7e4dd4de6d78a7a1f57b6df94dff0eba49fd0d3",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532535643,
            "hunks": 2,
            "message": "PDFBOX-4278: .notdef may have a stream git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1836645 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java",
                "index 66a2fbe6d..26d64fe61 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java",
                "@@ -352,11 +352,6 @@ public class PDType3Font extends PDSimpleFont",
                "         String name = getEncoding().getName(code);",
                "-        if (!\".notdef\".equals(name))",
                "+        COSBase base = getCharProcs().getDictionaryObject(COSName.getPDFName(name));",
                "+        if (base instanceof COSStream)",
                "         {",
                "-            COSStream stream;",
                "-            stream = (COSStream)getCharProcs().getDictionaryObject(COSName.getPDFName(name));",
                "-            if (stream == null)",
                "-            {",
                "-                return null;",
                "-            }",
                "-            return new PDType3CharProc(this, stream);",
                "+            return new PDType3CharProc(this, (COSStream) base);",
                "         }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4278": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7bbbe04f3f964a7dd85aa7159ba552633a65d011"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4278",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d7b0cadb912398b60e78290197c11bf5ee4a882f",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530041874,
            "hunks": 1,
            "message": "PDFBOX-4071: added comment on interface segregation principle violation git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1834456 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionTypeIdentity.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionTypeIdentity.java",
                "index 51e104192..4e8774220 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionTypeIdentity.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionTypeIdentity.java",
                "@@ -38,2 +38,3 @@ public class PDFunctionTypeIdentity extends PDFunction",
                "         throw new UnsupportedOperationException();",
                "+        //TODO this is a violation of the interface segregation principle",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionTypeIdentity.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "f489b3a33c482e56b33c5eeaeafba54c30bd1400"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c0a5d3263f4edb4a7cb18e8a6b771cd52b145b91",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528821629,
            "hunks": 2,
            "message": "PDFBOX-4071: fix typo git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833412 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java",
                "index d106951b9..fa0eb98c4 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java",
                "@@ -153,3 +153,3 @@ public class PDTrueTypeFont extends PDSimpleFont implements PDVectorFont",
                "         {",
                "-            // the TTF is fully loaded and it is save to close the underlying data source",
                "+            // the TTF is fully loaded and it is safe to close the underlying data source",
                "             ttf.close();",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "index f0e623931..f21d27aef 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "@@ -119,3 +119,3 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "             {",
                "-                // the TTF is fully loaded and it is save to close the underlying data source",
                "+                // the TTF is fully loaded and it is safe to close the underlying data source",
                "                 ttf.close();"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5bfb4bebbb307fa3f7e53bbd26979f9ef8eff072"
                ],
                [
                    "no-tag",
                    "10eeea43a009f84f25ae2e42273c82f674f1ed8f"
                ],
                [
                    "no-tag",
                    "1361b17b5b6558d023c466621eb0467856cb4cc4"
                ],
                [
                    "no-tag",
                    "51ea7f5696688e4230f6cd527f2305fee743bf31"
                ],
                [
                    "no-tag",
                    "bcb1e5b8e811e0cf2b16b5cf317aec9d979507ca"
                ],
                [
                    "no-tag",
                    "678c2bba31751533b9ab3a224f8948679832d6fd"
                ],
                [
                    "no-tag",
                    "8e61ca064c84348847bef6a2dc725a2621e9f332"
                ],
                [
                    "no-tag",
                    "a189b83b2e50ce2f05b3f0074e8ce9fa89c05ac7"
                ],
                [
                    "no-tag",
                    "21f2388f3f840cc8b142d994825d962d9a6f86b1"
                ],
                [
                    "no-tag",
                    "d39a774a7bec85230fdbbf589ee9cf2719dfc0b6"
                ],
                [
                    "no-tag",
                    "ef4d02fbac17344619e8ed6f6b6edebf48b474f8"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "caa033a27a338d7575fe0d85bf42a8aafbdbbabe",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524155251,
            "hunks": 10,
            "message": "PDFBOX-3999: clone objects not in mapping to prevent them from remaining attached to the source document git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829574 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "index 61bd18924..90c656425 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "@@ -42,2 +42,3 @@ import org.apache.pdfbox.cos.COSName;",
                " import org.apache.pdfbox.cos.COSNumber;",
                "+import org.apache.pdfbox.cos.COSObject;",
                " import org.apache.pdfbox.cos.COSStream;",
                "@@ -740,3 +741,3 @@ public class PDFMergerUtility",
                "         {",
                "-            updatePageReferences(srcNumbersArray, objMapping);",
                "+            updatePageReferences(cloner, srcNumbersArray, objMapping);",
                "             for (int i = 0; i < srcNumbersArray.size() / 2; i++)",
                "@@ -966,3 +967,5 @@ public class PDFMergerUtility",
                "      */",
                "-    private void updatePageReferences(COSDictionary parentTreeEntry, Map<COSDictionary, COSDictionary> objMapping)",
                "+    private void updatePageReferences(PDFCloneUtility cloner,",
                "+            COSDictionary parentTreeEntry, Map<COSDictionary, COSDictionary> objMapping)",
                "+            throws IOException",
                "     {",
                "@@ -974,5 +977,26 @@ public class PDFMergerUtility",
                "         COSBase obj = parentTreeEntry.getDictionaryObject(COSName.OBJ);",
                "-        if (obj instanceof COSDictionary && objMapping.containsKey(obj))",
                "+        if (obj instanceof COSDictionary)",
                "         {",
                "-            parentTreeEntry.setItem(COSName.OBJ, objMapping.get(obj));",
                "+            if (objMapping.containsKey(obj))",
                "+            {",
                "+                parentTreeEntry.setItem(COSName.OBJ, objMapping.get(obj));",
                "+            }",
                "+            else",
                "+            {",
                "+                // PDFBOX-3999: clone objects that are not in mapping to make sure that",
                "+                // these don't remain attached to the source document",
                "+                COSBase item = parentTreeEntry.getItem(COSName.OBJ);",
                "+                if (item instanceof COSObject)",
                "+                {",
                "+                    LOG.debug(\"clone potential orphan object in structure tree: \" + item +",
                "+                            \", type: \" + ((COSDictionary) obj).getNameAsString(COSName.TYPE));",
                "+                }",
                "+                else",
                "+                {",
                "+                    // don't display because of stack overflow",
                "+                    LOG.debug(\"clone potential orphan object in structure tree, type: \" +",
                "+                            ((COSDictionary) obj).getNameAsString(COSName.TYPE));",
                "+                }",
                "+                parentTreeEntry.setItem(COSName.OBJ, cloner.cloneForNewDocument(obj));",
                "+            }",
                "         }",
                "@@ -981,3 +1005,3 @@ public class PDFMergerUtility",
                "         {",
                "-            updatePageReferences((COSArray) kSubEntry, objMapping);",
                "+            updatePageReferences(cloner, (COSArray) kSubEntry, objMapping);",
                "         }",
                "@@ -985,3 +1009,3 @@ public class PDFMergerUtility",
                "         {",
                "-            updatePageReferences((COSDictionary) kSubEntry, objMapping);",
                "+            updatePageReferences(cloner, (COSDictionary) kSubEntry, objMapping);",
                "         }",
                "@@ -989,3 +1013,5 @@ public class PDFMergerUtility",
                "-    private void updatePageReferences(COSArray parentTreeEntry, Map<COSDictionary, COSDictionary> objMapping)",
                "+    private void updatePageReferences(PDFCloneUtility cloner,",
                "+            COSArray parentTreeEntry, Map<COSDictionary, COSDictionary> objMapping)",
                "+            throws IOException",
                "     {",
                "@@ -996,3 +1022,3 @@ public class PDFMergerUtility",
                "             {",
                "-                updatePageReferences((COSArray) subEntry, objMapping);",
                "+                updatePageReferences(cloner, (COSArray) subEntry, objMapping);",
                "             }",
                "@@ -1000,3 +1026,3 @@ public class PDFMergerUtility",
                "             {",
                "-                updatePageReferences((COSDictionary) subEntry, objMapping);",
                "+                updatePageReferences(cloner, (COSDictionary) subEntry, objMapping);",
                "             }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3999": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "39c6d3cb118df719e05d7bbfe9b8dff4fd5c54f1"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3999",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bb2eb267a1c07112b65d09782503be01efa23fb0",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528999765,
            "hunks": 1,
            "message": "PDFBOX-4071: clarify toString() output git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1833538 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "index 666da8dcf..472396a4c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "@@ -552,3 +552,3 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "         }",
                "-        return getClass().getSimpleName() + \"/\" + descendant + \" \" + getBaseFont();",
                "+        return getClass().getSimpleName() + \"/\" + descendant + \", PostScript name: \" + getBaseFont();",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0edd54a6b3d98d89b329e86d45a60505a64305e5"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "36903a94c92b0cae06e0778d32a545afa4fe4f28",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527057676,
            "hunks": 4,
            "message": "PDFBOX-2941: remove unneeded field in new method from previous commit git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832076 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java b/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "index 44d1b49b3..a9017b4c8 100644",
                "--- a/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "+++ b/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "@@ -1401,3 +1401,2 @@ public class PDFDebugger extends JFrame",
                "         {",
                "-            PDDocument document;",
                "             while (true)",
                "@@ -1406,3 +1405,3 @@ public class PDFDebugger extends JFrame",
                "                 {",
                "-                    document = open();",
                "+                    return open();",
                "                 }",
                "@@ -1430,5 +1429,3 @@ public class PDFDebugger extends JFrame",
                "                 }",
                "-                break;",
                "             }",
                "-            return document;",
                "         }"
            ],
            "changed_files": [
                "debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-2941": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1aa2a219a44154b954607c50f4163615f71365bf"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-2941",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f6cd739c536e46b354c3b2607425038798725408",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526593643,
            "hunks": 1,
            "message": "PDFBOX-4223: be lenient when encountering invalid /OpenAction git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831816 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "index 329e6fbe2..7f14ebb8e 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "@@ -511,3 +511,3 @@ public class PDFMergerUtility",
                "-            destCatalog.setOpenAction(srcCatalog.getOpenAction());",
                "+            destCatalog.setOpenAction(openAction);",
                "         }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4223": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a7e92f4381120dafe1174be59f2b1838cbf98c83"
                ],
                [
                    "no-tag",
                    "c3e216b49aedc67af52c32438dde96397cd21625"
                ],
                [
                    "no-tag",
                    "67493d08260328826f0acbb58394395461bb9c9f"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4223",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8916f4dd35b3a0abbe76ba42e3f9a5f4da41249f",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529080933,
            "hunks": 3,
            "message": "PDFBOX-4112: avoid self-closing elements for jdk10 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833610 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/ant/package.html b/examples/src/main/java/org/apache/pdfbox/examples/ant/package.html",
                "index 1d70ed480..f5b00c0a1 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/ant/package.html",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/ant/package.html",
                "@@ -23,11 +23,11 @@",
                " <a href=\"http://jakarta.apache.org/ant/index.html\">ANT</a> tasks that utilize PDFBox features can be found in this package.",
                "-This is an example of using the PDF2Text task:<br/> <br/>",
                "+This is an example of using the PDF2Text task:<br> <br>",
                "-&lt;taskdef name=\"pdf2text\" classname=\"org.apache.pdfbox.ant.PDFToTextTask\" classpathref=\"build.classpath\" /&gt;<br/>",
                "+&lt;taskdef name=\"pdf2text\" classname=\"org.apache.pdfbox.ant.PDFToTextTask\" classpathref=\"build.classpath\" /&gt;<br>",
                "-&lt;pdf2text&gt;<br/>",
                "-    &nbsp;&nbsp;&lt;fileset dir=\"test\"&gt;<br/>",
                "-        &nbsp;&nbsp;&nbsp;&nbsp;&lt;include name=\"**/*.pdf\" /&gt;<br/>",
                "-    &nbsp;&nbsp;&lt;/fileset&gt;<br/>",
                "-&lt;/pdf2text&gt;<br/>",
                "+&lt;pdf2text&gt;<br>",
                "+    &nbsp;&nbsp;&lt;fileset dir=\"test\"&gt;<br>",
                "+        &nbsp;&nbsp;&nbsp;&nbsp;&lt;include name=\"**/*.pdf\" /&gt;<br>",
                "+    &nbsp;&nbsp;&lt;/fileset&gt;<br>",
                "+&lt;/pdf2text&gt;<br>",
                " </body>",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/afm/package.html b/fontbox/src/main/java/org/apache/fontbox/afm/package.html",
                "index 4a97e56ca..d8ae7bd94 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/afm/package.html",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/afm/package.html",
                "@@ -23,3 +23,3 @@",
                " This package holds classes used to parse AFM(Adobe Font Metrics) files.",
                "-<br/>",
                "+<br>",
                " More information about AFM files can be found at",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/cos/package.html b/pdfbox/src/main/java/org/apache/pdfbox/cos/package.html",
                "index 5c4fd8946..67e41187c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/cos/package.html",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/cos/package.html",
                "@@ -23,3 +23,3 @@",
                " These are the low level objects that make up a PDF document.",
                "-<br/><br/>",
                "+<br><br>"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/ant/package.html",
                "fontbox/src/main/java/org/apache/fontbox/afm/package.html",
                "pdfbox/src/main/java/org/apache/pdfbox/cos/package.html"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4112": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ebe874e6d4e86eb4cbd00122d9c6ca87d9baf107"
                ],
                [
                    "no-tag",
                    "35487547ec8778314a3b9802cf734769b03d9292"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4112",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7a146884d4a177f2e3e838237028f2f66401e317",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523125977,
            "hunks": 7,
            "message": "PDFBOX-4186: add quality option to pdfbox-app, as suggested by Martin Hausner git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1828603 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java b/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java",
                "index 9b1adaa6f..ffb24dacc 100644",
                "--- a/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java",
                "+++ b/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java",
                "@@ -51,2 +51,3 @@ public final class PDFToImage",
                "     private static final String DPI = \"-dpi\";",
                "+    private static final String QUALITY = \"-quality\";",
                "     private static final String CROPBOX = \"-cropbox\";",
                "@@ -93,2 +94,3 @@ public final class PDFToImage",
                "         int dpi;",
                "+        float quality = 1.0f;",
                "         float cropBoxLowerLeftX = 0;",
                "@@ -165,2 +167,7 @@ public final class PDFToImage",
                "             }",
                "+            else if( args[i].equals( QUALITY ) )",
                "+            {",
                "+                i++;",
                "+                quality = Float.parseFloat(args[i]);",
                "+            }",
                "             else if( args[i].equals( CROPBOX ) )",
                "@@ -248,3 +255,3 @@ public final class PDFToImage",
                "                     String fileName = outputPrefix + (i + 1) + \".\" + imageFormat;",
                "-                    success &= ImageIOUtil.writeImage(image, fileName, dpi);",
                "+                    success &= ImageIOUtil.writeImage(image, fileName, dpi, quality);",
                "                 }",
                "@@ -291,4 +298,4 @@ public final class PDFToImage",
                "             + \"  -endPage <int>                   : The last page to extract(inclusive)\\n\"",
                "-            + \"  -color <int>                     : The color depth (valid: bilevel, gray, rgb, rgba)\\n\"",
                "-            + \"  -dpi <int>                       : The DPI of the output image\\n\"",
                "+            + \"  -color <int>                     : The color depth (valid: bilevel, gray, rgb (default), rgba)\\n\"",
                "+            + \"  -quality <float>                 : The quality to be used when compressing the image (0 < quality <= 1 (default))\\n\"",
                "             + \"  -cropbox <int> <int> <int> <int> : The page area to export\\n\"",
                "diff --git a/tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java b/tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java",
                "index 115041047..d3fa60cfb 100644",
                "--- a/tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java",
                "+++ b/tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java",
                "@@ -66,2 +66,21 @@ public final class ImageIOUtil",
                "             int dpi) throws IOException",
                "+    {",
                "+        return writeImage(image, filename, dpi, 1.0f);",
                "+    }",
                "+",
                "+    /**",
                "+     * Writes a buffered image to a file using the given image format.",
                "+     * See {@link #writeImage(BufferedImage image, String formatName,",
                "+     * OutputStream output, int dpi, float quality)} for more details.",
                "+     *",
                "+     * @param image the image to be written",
                "+     * @param filename used to construct the filename for the individual image. Its suffix will be",
                "+     * used as the image format.",
                "+     * @param dpi the resolution in dpi (dots per inch) to be used in metadata",
                "+     * @param quality quality to be used when compressing the image (0 &lt; quality &lt; 1.0f)",
                "+     * @return true if the image file was produced, false if there was an error.",
                "+     * @throws IOException if an I/O error occurs",
                "+     */",
                "+    public static boolean writeImage(BufferedImage image, String filename,",
                "+            int dpi, float quality) throws IOException",
                "     {",
                "@@ -72,3 +91,3 @@ public final class ImageIOUtil",
                "             String formatName = filename.substring(filename.lastIndexOf('.') + 1);",
                "-            return writeImage(image, formatName, output, dpi);",
                "+            return writeImage(image, formatName, output, dpi, quality);",
                "         }"
            ],
            "changed_files": [
                "tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java",
                "tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4186": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8bbe2b26a1d95134a77fdbab3860d067b99fca3b"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4186",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9de7202b151168b9502059980fda6cc55aa32d56",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531850440,
            "hunks": 16,
            "message": "PDFBOX-4013: support MacOS features on jdk9, by Emmeran Seehuber git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1836123 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java b/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "index a9017b4c8..66683311f 100644",
                "--- a/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "+++ b/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "@@ -47,3 +47,2 @@ import java.util.Properties;",
                " import java.util.Set;",
                "-import java.util.StringTokenizer;",
                " import javax.imageio.spi.IIORegistry;",
                "@@ -452,6 +451,17 @@ public class PDFDebugger extends JFrame",
                "+        initGlobalEventHandlers();",
                "+",
                "+    }",
                "+",
                "+    /**",
                "+     * Initialise application global event handlers.",
                "+     * Protected to allow subclasses to override this method if they",
                "+     * don't want the global event handler overridden.",
                "+     */",
                "+    @SuppressWarnings(\"WeakerAccess\")",
                "+    protected void initGlobalEventHandlers()",
                "+    {",
                "         // Mac OS X file open/quit handler",
                "-        if (IS_MAC_OS && !isMinJdk9())",
                "+        if (IS_MAC_OS)",
                "         {",
                "-            //TODO this needs to be rewritten for JDK9, see PDFBOX-4013",
                "             try",
                "@@ -567,7 +577,4 @@ public class PDFDebugger extends JFrame",
                "-        if (!IS_MAC_OS)",
                "-        {",
                "-            fileMenu.addSeparator();",
                "-            fileMenu.add(printMenuItem);",
                "-        }",
                "+        fileMenu.addSeparator();",
                "+        fileMenu.add(printMenuItem);",
                "@@ -730,3 +737,3 @@ public class PDFDebugger extends JFrame",
                "                 {",
                "-                    readPDFFile(openDialog.getFile(), \"\");",
                "+                    readPDFFile(new File(openDialog.getDirectory(),openDialog.getFile()), \"\");",
                "                 }",
                "@@ -1175,3 +1182,3 @@ public class PDFDebugger extends JFrame",
                "-    private void exitMenuItemActionPerformed(ActionEvent evt)",
                "+    private void exitMenuItemActionPerformed(ActionEvent ignored)",
                "     {",
                "@@ -1193,2 +1200,12 @@ public class PDFDebugger extends JFrame",
                "         }",
                "+        performApplicationExit();",
                "+    }",
                "+",
                "+    /**",
                "+     * Exit the application after the window is closed. This is protected to",
                "+     * let subclasses override the behavior.",
                "+     */",
                "+    @SuppressWarnings(\"WeakerAccess\")",
                "+    protected void performApplicationExit()",
                "+    {",
                "         System.exit(0);",
                "@@ -1249,19 +1266,3 @@ public class PDFDebugger extends JFrame",
                "     {",
                "-        if( document != null )",
                "-        {",
                "-            try",
                "-            {",
                "-                document.close();",
                "-                if (!currentFilePath.startsWith(\"http\"))",
                "-                {",
                "-                    recentFiles.addFile(currentFilePath);",
                "-                }",
                "-                recentFiles.close();",
                "-            }",
                "-            catch( IOException e )",
                "-            {",
                "-                throw new RuntimeException(e);",
                "-            }",
                "-        }",
                "-        System.exit(0);",
                "+        exitMenuItemActionPerformed(null);",
                "     }",
                "@@ -1496,24 +1497,2 @@ public class PDFDebugger extends JFrame",
                "     }",
                "-    ",
                "-    private static boolean isMinJdk9()",
                "-    {",
                "-        // strategy from lucene-solr/lucene/core/src/java/org/apache/lucene/util/Constants.java",
                "-        String version = System.getProperty(\"java.specification.version\");",
                "-        final StringTokenizer st = new StringTokenizer(version, \".\");",
                "-        try",
                "-        {",
                "-            int major = Integer.parseInt(st.nextToken());",
                "-            int minor = 0;",
                "-            if (st.hasMoreTokens())",
                "-            {",
                "-                minor = Integer.parseInt(st.nextToken());",
                "-            }",
                "-            return major > 1 || (major == 1 && minor >= 9);",
                "-        }",
                "-        catch (NumberFormatException nfe)",
                "-        {",
                "-            // maybe some new numbering scheme in the 22nd century",
                "-            return true;",
                "-        }",
                "-    }",
                " }",
                "diff --git a/debugger/src/main/java/org/apache/pdfbox/debugger/ui/OSXAdapter.java b/debugger/src/main/java/org/apache/pdfbox/debugger/ui/OSXAdapter.java",
                "index 2ed504ef4..5b24bfa82 100644",
                "--- a/debugger/src/main/java/org/apache/pdfbox/debugger/ui/OSXAdapter.java",
                "+++ b/debugger/src/main/java/org/apache/pdfbox/debugger/ui/OSXAdapter.java",
                "@@ -20,3 +20,3 @@",
                "  * This file includes code under the following terms:",
                "- * \t\t\t",
                "+ *",
                "  *  Version: 2.0",
                "@@ -66,2 +66,4 @@ package org.apache.pdfbox.debugger.ui;",
                "+import java.awt.Desktop;",
                "+import java.io.File;",
                " import java.lang.reflect.InvocationHandler;",
                "@@ -70,2 +72,4 @@ import java.lang.reflect.Method;",
                " import java.lang.reflect.Proxy;",
                "+import java.util.StringTokenizer;",
                "+import java.util.List;",
                "@@ -89,2 +93,24 @@ public class OSXAdapter implements InvocationHandler",
                "     static Object macOSXApplication;",
                "+    ",
                "+    private static boolean isMinJdk9()",
                "+    {",
                "+        // strategy from lucene-solr/lucene/core/src/java/org/apache/lucene/util/Constants.java",
                "+        String version = System.getProperty(\"java.specification.version\");",
                "+        final StringTokenizer st = new StringTokenizer(version, \".\");",
                "+        try",
                "+        {",
                "+            int major = Integer.parseInt(st.nextToken());",
                "+            int minor = 0;",
                "+            if (st.hasMoreTokens())",
                "+            {",
                "+                minor = Integer.parseInt(st.nextToken());",
                "+            }",
                "+            return major > 1 || (major == 1 && minor >= 9);",
                "+        }",
                "+        catch (NumberFormatException nfe)",
                "+        {",
                "+            // maybe some new numbering scheme in the 22nd century",
                "+            return true;",
                "+        }",
                "+    }",
                "@@ -92,3 +118,38 @@ public class OSXAdapter implements InvocationHandler",
                "     // The method passed should return a boolean stating whether or not the quit should occur",
                "-    public static void setQuitHandler(Object target, Method quitHandler) {",
                "+    public static void setQuitHandler(final Object target, final Method quitHandler)",
                "+    {",
                "+        if (isMinJdk9())",
                "+        {",
                "+            try",
                "+            {",
                "+                Desktop desktopObject = Desktop.getDesktop();",
                "+                Class<?> filesHandlerClass = Class.forName(\"java.awt.desktop.QuitHandler\");",
                "+                final Method setQuitHandlerMethod = desktopObject.getClass().getMethod(\"setQuitHandler\", filesHandlerClass);",
                "+                Object osxAdapterProxy = Proxy.newProxyInstance(OSXAdapter.class.getClassLoader(),",
                "+                        new Class[]",
                "+                        {",
                "+                            filesHandlerClass",
                "+                        }, new InvocationHandler()",
                "+                {",
                "+                    @Override",
                "+                    public Object invoke(Object proxy, Method method, Object[] args)",
                "+                            throws Throwable",
                "+                    {",
                "+                        if (!method.getName().equals(\"handleQuitRequestWith\"))",
                "+                        {",
                "+                            return null;",
                "+                        }",
                "+                        // We just call our own quit handler",
                "+                        quitHandler.invoke(target);",
                "+                        return null;",
                "+                    }",
                "+                });",
                "+                setQuitHandlerMethod.invoke(desktopObject, osxAdapterProxy);",
                "+            }",
                "+            catch (Exception e)",
                "+            {",
                "+                e.printStackTrace();",
                "+            }",
                "+            return;",
                "+        }",
                "         setHandler(new OSXAdapter(\"handleQuit\", target, quitHandler));",
                "@@ -135,3 +196,49 @@ public class OSXAdapter implements InvocationHandler",
                "     // application bundle's Info.plist",
                "-    public static void setFileHandler(Object target, Method fileHandler) {",
                "+    public static void setFileHandler(Object target, Method fileHandler)",
                "+    {",
                "+        if (isMinJdk9())",
                "+        {",
                "+            try",
                "+            {",
                "+                Desktop desktopObject = Desktop.getDesktop();",
                "+                Class<?> filesHandlerClass = Class.forName(\"java.awt.desktop.OpenFilesHandler\");",
                "+                Method setOpenFileHandlerMethod = desktopObject.getClass().getMethod(\"setOpenFileHandler\", filesHandlerClass);",
                "+                Object osxAdapterProxy = Proxy.newProxyInstance(OSXAdapter.class.getClassLoader(),",
                "+                        new Class[]",
                "+                        {",
                "+                            filesHandlerClass",
                "+                        }, new OSXAdapter(\"openFiles\", target, fileHandler)",
                "+                {",
                "+                    // Override OSXAdapter.callTarget to send information on the",
                "+                    // file to be opened",
                "+                    public boolean callTarget(Object openFilesEvent)",
                "+                    {",
                "+                        if (openFilesEvent != null)",
                "+                        {",
                "+                            try",
                "+                            {",
                "+                                Method getFilesMethod = openFilesEvent.getClass().getDeclaredMethod(\"getFiles\",",
                "+                                        (Class[]) null);",
                "+                                @SuppressWarnings(\"unchecked\")",
                "+                                List<File> files = (List<File>) getFilesMethod.invoke(openFilesEvent,",
                "+                                        (Object[]) null);",
                "+                                this.targetMethod.invoke(this.targetObject, files.get(0).getAbsolutePath());",
                "+                            }",
                "+                            catch (Exception ex)",
                "+                            {",
                "+                                throw new RuntimeException(ex);",
                "+                            }",
                "+                        }",
                "+                        return true;",
                "+                    }",
                "+                });",
                "+                setOpenFileHandlerMethod.invoke(desktopObject, osxAdapterProxy);",
                "+            }",
                "+            catch (Exception e)",
                "+            {",
                "+                e.printStackTrace();",
                "+            }",
                "+            return;",
                "+        }",
                "+        /* JDK <= 1.8, using Apple classes */",
                "         setHandler(new OSXAdapter(\"handleOpenFile\", target, fileHandler) {"
            ],
            "changed_files": [
                "debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "debugger/src/main/java/org/apache/pdfbox/debugger/ui/OSXAdapter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4013": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "63d9c2cbff461d239993a40272938ea45dde6ffd"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4013",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "51580f2fd7982d8a787dffb1242e93d27aa996f1",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532022809,
            "hunks": 2,
            "message": "PDFBOX-4268: ignore barcode font if we aren't searching for one git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1836285 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java",
                "index e12ab49c6..549c3edd2 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java",
                "@@ -562,2 +562,10 @@ final class FontMapperImpl implements FontMapper",
                "                 {",
                "+                    if (panose.getFamilyKind() == 0 && ",
                "+                        (info.getPostScriptName().toLowerCase().contains(\"barcode\") ||",
                "+                         info.getPostScriptName().startsWith(\"Code\")) && ",
                "+                        !probablyBarcodeFont(fontDescriptor))",
                "+                    {",
                "+                        // PDFBOX-4268: ignore barcode font if we aren't searching for one.",
                "+                        continue;",
                "+                    }",
                "                     // serifs",
                "@@ -626,2 +634,18 @@ final class FontMapperImpl implements FontMapper",
                "+    private boolean probablyBarcodeFont(PDFontDescriptor fontDescriptor)",
                "+    {",
                "+        String ff = fontDescriptor.getFontFamily();",
                "+        if (ff == null)",
                "+        {",
                "+            ff = \"\";",
                "+        }",
                "+        String fn = fontDescriptor.getFontName();",
                "+        if (fn == null)",
                "+        {",
                "+            fn = \"\";",
                "+        }",
                "+        return ff.startsWith(\"Code\") || ff.toLowerCase().contains(\"barcode\") ||",
                "+               fn.startsWith(\"Code\") || fn.toLowerCase().contains(\"barcode\");",
                "+    }",
                "+",
                "     /**"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/FontMapperImpl.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4268": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "28915170e0a89d632b5f0a83ddb0162e300dee8e"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4268",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "011f6684cca6b23b90412882ba1bad61135e8720",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523126756,
            "hunks": 1,
            "message": "PDFBOX-4186: restore and improve dpi usage git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1828607 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java b/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java",
                "index ffb24dacc..597958353 100644",
                "--- a/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java",
                "+++ b/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java",
                "@@ -299,2 +299,3 @@ public final class PDFToImage",
                "             + \"  -color <int>                     : The color depth (valid: bilevel, gray, rgb (default), rgba)\\n\"",
                "+            + \"  -dpi <int>                       : The DPI of the output image, default: screen resolution or 96 if unknown\\n\"",
                "             + \"  -quality <float>                 : The quality to be used when compressing the image (0 < quality <= 1 (default))\\n\""
            ],
            "changed_files": [
                "tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4186": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1d7625a5faf0b329a69a15e8fea8b3b8044009eb"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4186",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c203f812d7c0fb471244889eb4e7a7a6851c002d",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525171203,
            "hunks": 5,
            "message": "PDFBOX-4057: allow rendering with different X and Y scale as proposed by Cornelis Hoeflake git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830667 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java",
                "index 3fce14fa1..ee2a988cd 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java",
                "@@ -219,3 +219,3 @@ public class PDFRenderer",
                "-        transform(g, page, scale);",
                "+        transform(g, page, scale, scale);",
                "@@ -264,2 +264,17 @@ public class PDFRenderer",
                "             throws IOException",
                "+    {",
                "+        renderPageToGraphics(pageIndex, graphics, scale, scale);",
                "+    }",
                "+",
                "+    /**",
                "+     * Renders a given page to an AWT Graphics2D instance.",
                "+     * ",
                "+     * @param pageIndex the zero-based index of the page to be converted",
                "+     * @param graphics the Graphics2D on which to draw the page",
                "+     * @param scaleX the scale to draw the page at for the x-axis",
                "+     * @param scaleY the scale to draw the page at for the y-axis",
                "+     * @throws IOException if the PDF cannot be read",
                "+     */",
                "+    public void renderPageToGraphics(int pageIndex, Graphics2D graphics, float scaleX, float scaleY)",
                "+            throws IOException",
                "     {",
                "@@ -268,3 +283,3 @@ public class PDFRenderer",
                "-        transform(graphics, page, scale);",
                "+        transform(graphics, page, scaleX, scaleY);",
                "@@ -280,5 +295,5 @@ public class PDFRenderer",
                "     // scale rotate translate",
                "-    private void transform(Graphics2D graphics, PDPage page, float scale)",
                "+    private void transform(Graphics2D graphics, PDPage page, float scaleX, float scaleY)",
                "     {",
                "-        graphics.scale(scale, scale);",
                "+        graphics.scale(scaleX, scaleY);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/rendering/PDFRenderer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4057": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "855bfb5360d114715e3785a59aa48b5c664b602b"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4057",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "412ae902bd7383e1367d325cf2d18404f747a86c",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529946800,
            "hunks": 8,
            "message": "PDFBOX-4241: clarify in javadoc that output stream will be closed git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1834348 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java b/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "index b785360cd..a90a5e3a2 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "@@ -222,5 +222,6 @@ public class COSWriter implements ICOSVisitor, Closeable",
                "     /**",
                "-     * COSWriter constructor comment.",
                "+     * COSWriter constructor.",
                "      *",
                "-     * @param outputStream The wrapped output stream.",
                "+     * @param outputStream The output stream to write the PDF. It will be closed when this object is",
                "+     * closed.",
                "      */",
                "@@ -233,7 +234,8 @@ public class COSWriter implements ICOSVisitor, Closeable",
                "     /**",
                "-     * COSWriter constructor for incremental updates. ",
                "+     * COSWriter constructor for incremental updates.",
                "      *",
                "-     * @param outputStream output stream where the new PDF data will be written",
                "+     * @param outputStream output stream where the new PDF data will be written. It will be closed",
                "+     * when this object is closed.",
                "      * @param inputData random access read containing source PDF data",
                "-     * ",
                "+     *",
                "      * @throws IOException if something went wrong",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "index c3f0a60e4..956916d94 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "@@ -1254,5 +1254,5 @@ public class PDDocument implements Closeable",
                "      * This will save the document to an output stream.",
                "-     * ",
                "-     * @param output The stream to write to. It is recommended to wrap it in a",
                "-     * {@link java.io.BufferedOutputStream}, unless it is already buffered.",
                "+     *",
                "+     * @param output The stream to write to. It will be closed when done. It is recommended to wrap",
                "+     * it in a {@link java.io.BufferedOutputStream}, unless it is already buffered.",
                "      *",
                "@@ -1290,3 +1290,4 @@ public class PDDocument implements Closeable",
                "      *",
                "-     * @param output stream to write. It should <i><b>not</b></i> point to the source file.",
                "+     * @param output stream to write to. It will be closed when done. It should <i><b>not</b></i>",
                "+     * point to the source file.",
                "      * @throws IOException if the output could not be written",
                "@@ -1346,3 +1347,4 @@ public class PDDocument implements Closeable",
                "      *",
                "-     * @param output stream to write final PDF. It should <i><b>not</b></i> point to the source file.",
                "+     * @param output stream to write the final PDF. It should <i><b>not</b></i> point to the source",
                "+     * file. It will be closed when the document is closed.",
                "      * @return instance to be used for external signing and setting CMS signature"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4241": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e7630469a13b32f919ee919af14ebb78b3d217b5"
                ]
            ],
            "tags": [
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4241",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0d5c9b86a9a2935920170233722c06a3846d65eb",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527098434,
            "hunks": 3,
            "message": "PDFBOX-4095: implement non separable blend modes (hue, saturation, color, luminosity), by Savan Patel and Jani Pehkonen git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1832117 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendComposite.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendComposite.java",
                "index 8907f01f2..c1596f0b1 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendComposite.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendComposite.java",
                "@@ -1,228 +1,274 @@",
                "-/*",
                "- * Licensed to the Apache Software Foundation (ASF) under one or more",
                "- * contributor license agreements.  See the NOTICE file distributed with",
                "- * this work for additional information regarding copyright ownership.",
                "- * The ASF licenses this file to You under the Apache License, Version 2.0",
                "- * (the \"License\"); you may not use this file except in compliance with",
                "- * the License.  You may obtain a copy of the License at",
                "- *",
                "- *      http://www.apache.org/licenses/LICENSE-2.0",
                "- *",
                "- * Unless required by applicable law or agreed to in writing, software",
                "- * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "- * See the License for the specific language governing permissions and",
                "- * limitations under the License.",
                "- */",
                "-package org.apache.pdfbox.pdmodel.graphics.blend;",
                "-",
                "-import java.awt.AlphaComposite;",
                "-import java.awt.Composite;",
                "-import java.awt.CompositeContext;",
                "-import java.awt.RenderingHints;",
                "-import java.awt.color.ColorSpace;",
                "-import java.awt.image.ColorModel;",
                "-import java.awt.image.Raster;",
                "-import java.awt.image.WritableRaster;",
                "-import org.apache.commons.logging.Log;",
                "-import org.apache.commons.logging.LogFactory;",
                "-",
                "-/**",
                "- * AWT composite for blend modes.",
                "- * ",
                "- * @author K\u00c3\u00bchn &amp; Weyh Software GmbH",
                "- */",
                "-public final class BlendComposite implements Composite",
                "-{",
                "-    /**",
                "-     * Log instance.",
                "-     */",
                "-    private static final Log LOG = LogFactory.getLog(BlendComposite.class);",
                "-",
                "-    /**",
                "-     * Creates a blend composite",
                "-     *",
                "-     * @param blendMode Desired blend mode",
                "-     * @param constantAlpha Constant alpha, must be in the inclusive range",
                "-     * [0.0...1.0] or it will be clipped.",
                "-     * @return a blend composite.",
                "-     */",
                "-    public static Composite getInstance(BlendMode blendMode, float constantAlpha)",
                "-    {",
                "-        if (constantAlpha < 0)",
                "-        {",
                "-            LOG.warn(\"using 0 instead of incorrect Alpha \" + constantAlpha);",
                "-            constantAlpha = 0;",
                "-        }",
                "-        else if (constantAlpha > 1)",
                "-        {",
                "-            LOG.warn(\"using 1 instead of incorrect Alpha \" + constantAlpha);",
                "-            constantAlpha = 1;",
                "-        }",
                "-        if (blendMode == BlendMode.NORMAL)",
                "-        {",
                "-            return AlphaComposite.getInstance(AlphaComposite.SRC_OVER, constantAlpha);",
                "-        }",
                "-        else",
                "-        {",
                "-            return new BlendComposite(blendMode, constantAlpha);",
                "-        }",
                "-    }",
                "-",
                "-    // TODO - non-separable blending modes",
                "-",
                "-    private final BlendMode blendMode;",
                "-    private final float constantAlpha;",
                "-",
                "-    private BlendComposite(BlendMode blendMode, float constantAlpha)",
                "-    {",
                "-        super();",
                "-        this.blendMode = blendMode;",
                "-        this.constantAlpha = constantAlpha;",
                "-    }",
                "-",
                "-    @Override",
                "-    public CompositeContext createContext(ColorModel srcColorModel, ColorModel dstColorModel,",
                "-            RenderingHints hints)",
                "-    {",
                "-        return new BlendCompositeContext(srcColorModel, dstColorModel, hints);",
                "-    }",
                "-",
                "-    class BlendCompositeContext implements CompositeContext",
                "-    {",
                "-        private final ColorModel srcColorModel;",
                "-        private final ColorModel dstColorModel;",
                "-        private final RenderingHints hints;",
                "-",
                "-        BlendCompositeContext(ColorModel srcColorModel, ColorModel dstColorModel,",
                "-                RenderingHints hints)",
                "-        {",
                "-            this.srcColorModel = srcColorModel;",
                "-            this.dstColorModel = dstColorModel;",
                "-            this.hints = hints;",
                "-        }",
                "-",
                "-        @Override",
                "-        public void dispose()",
                "-        {",
                "-            // nothing needed",
                "-        }",
                "-",
                "-        @Override",
                "-        public void compose(Raster src, Raster dstIn, WritableRaster dstOut)",
                "-        {",
                "-            int x0 = src.getMinX();",
                "-            int y0 = src.getMinY();",
                "-            int width = Math.min(Math.min(src.getWidth(), dstIn.getWidth()), dstOut.getWidth());",
                "-            int height = Math.min(Math.min(src.getHeight(), dstIn.getHeight()), dstOut.getHeight());",
                "-            int x1 = x0 + width;",
                "-            int y1 = y0 + height;",
                "-            int dstInXShift = dstIn.getMinX() - x0;",
                "-            int dstInYShift = dstIn.getMinY() - y0;",
                "-            int dstOutXShift = dstOut.getMinX() - x0;",
                "-            int dstOutYShift = dstOut.getMinY() - y0;",
                "-",
                "-            ColorSpace srcColorSpace = srcColorModel.getColorSpace();",
                "-            int numSrcColorComponents = srcColorModel.getNumColorComponents();",
                "-            int numSrcComponents = src.getNumBands();",
                "-            boolean srcHasAlpha = (numSrcComponents > numSrcColorComponents);",
                "-            ColorSpace dstColorSpace = dstColorModel.getColorSpace();",
                "-            int numDstColorComponents = dstColorModel.getNumColorComponents();",
                "-            int numDstComponents = dstIn.getNumBands();",
                "-            boolean dstHasAlpha = (numDstComponents > numDstColorComponents);",
                "-",
                "-            int colorSpaceType = dstColorSpace.getType();",
                "-            boolean subtractive = (colorSpaceType != ColorSpace.TYPE_RGB)",
                "-                    && (colorSpaceType != ColorSpace.TYPE_GRAY);",
                "-",
                "-            boolean blendModeIsSeparable = blendMode instanceof SeparableBlendMode;",
                "-            SeparableBlendMode separableBlendMode = blendModeIsSeparable ?",
                "-                    (SeparableBlendMode) blendMode : null;",
                "-",
                "-            boolean needsColorConversion = !srcColorSpace.equals(dstColorSpace);",
                "-",
                "-            Object srcPixel = null;",
                "-            Object dstPixel = null;",
                "-            float[] srcComponents = new float[numSrcComponents];",
                "-            // PDFBOX-3501 let getNormalizedComponents allocate to avoid ",
                "-            // ArrayIndexOutOfBoundsException for bitonal target",
                "-            float[] dstComponents = null;",
                "-",
                "-            float[] srcColor = new float[numSrcColorComponents];",
                "-            float[] srcConverted;",
                "-",
                "-            for (int y = y0; y < y1; y++)",
                "-            {",
                "-                for (int x = x0; x < x1; x++)",
                "-                {",
                "-                    srcPixel = src.getDataElements(x, y, srcPixel);",
                "-                    dstPixel = dstIn.getDataElements(dstInXShift + x, dstInYShift + y, dstPixel);",
                "-",
                "-                    srcComponents = srcColorModel.getNormalizedComponents(srcPixel, srcComponents,",
                "-                            0);",
                "-                    dstComponents = dstColorModel.getNormalizedComponents(dstPixel, dstComponents,",
                "-                            0);",
                "-",
                "-                    float srcAlpha = srcHasAlpha ? srcComponents[numSrcColorComponents] : 1.0f;",
                "-                    float dstAlpha = dstHasAlpha ? dstComponents[numDstColorComponents] : 1.0f;",
                "-",
                "-                    srcAlpha = srcAlpha * constantAlpha;",
                "-",
                "-                    float resultAlpha = dstAlpha + srcAlpha - srcAlpha * dstAlpha;",
                "-                    float srcAlphaRatio = (resultAlpha > 0) ? srcAlpha / resultAlpha : 0;",
                "-",
                "-                    // convert color",
                "-                    System.arraycopy(srcComponents, 0, srcColor, 0, numSrcColorComponents);",
                "-                    if (needsColorConversion)",
                "-                    {",
                "-                        // TODO - very very slow - Hash results???",
                "-                        float[] cieXYZ = srcColorSpace.toCIEXYZ(srcColor);",
                "-                        srcConverted = dstColorSpace.fromCIEXYZ(cieXYZ);",
                "-                    }",
                "-                    else",
                "-                    {",
                "-                        srcConverted = srcColor;",
                "-                    }",
                "-",
                "-                    if (separableBlendMode != null)",
                "-                    {",
                "-                        for (int k = 0; k < numDstColorComponents; k++)",
                "-                        {",
                "-                            float srcValue = srcConverted[k];",
                "-                            float dstValue = dstComponents[k];",
                "-",
                "-                            if (subtractive)",
                "-                            {",
                "-                                srcValue = 1 - srcValue;",
                "-                                dstValue = 1 - dstValue;",
                "-                            }",
                "-",
                "-                            float value = separableBlendMode.blendChannel(srcValue, dstValue);",
                "-                            value = srcValue + dstAlpha * (value - srcValue);",
                "-                            value = dstValue + srcAlphaRatio * (value - dstValue);",
                "-",
                "-                            if (subtractive)",
                "-                            {",
                "-                                value = 1 - value;",
                "-                            }",
                "-",
                "-                            dstComponents[k] = value;",
                "-                        }",
                "-                    }",
                "-                    else",
                "-                    {",
                "-                        // TODO - nonseparable modes",
                "-                    }",
                "-",
                "-                    if (dstHasAlpha)",
                "-                    {",
                "-                        dstComponents[numDstColorComponents] = resultAlpha;",
                "-                    }",
                "-",
                "-                    dstPixel = dstColorModel.getDataElements(dstComponents, 0, dstPixel);",
                "-                    dstOut.setDataElements(dstOutXShift + x, dstOutYShift + y, dstPixel);",
                "-                }",
                "-            }",
                "-        }",
                "-    }",
                "-}",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.pdfbox.pdmodel.graphics.blend;",
                "+",
                "+import java.awt.AlphaComposite;",
                "+import java.awt.Composite;",
                "+import java.awt.CompositeContext;",
                "+import java.awt.RenderingHints;",
                "+import java.awt.color.ColorSpace;",
                "+import java.awt.image.ColorModel;",
                "+import java.awt.image.Raster;",
                "+import java.awt.image.WritableRaster;",
                "+import org.apache.commons.logging.Log;",
                "+import org.apache.commons.logging.LogFactory;",
                "+",
                "+/**",
                "+ * AWT composite for blend modes.",
                "+ * ",
                "+ * @author K\u00c3\u00bchn &amp; Weyh Software GmbH",
                "+ */",
                "+public final class BlendComposite implements Composite",
                "+{",
                "+    /**",
                "+     * Log instance.",
                "+     */",
                "+    private static final Log LOG = LogFactory.getLog(BlendComposite.class);",
                "+",
                "+    /**",
                "+     * Creates a blend composite",
                "+     *",
                "+     * @param blendMode Desired blend mode",
                "+     * @param constantAlpha Constant alpha, must be in the inclusive range",
                "+     * [0.0...1.0] or it will be clipped.",
                "+     * @return a blend composite.",
                "+     */",
                "+    public static Composite getInstance(BlendMode blendMode, float constantAlpha)",
                "+    {",
                "+        if (constantAlpha < 0)",
                "+        {",
                "+            LOG.warn(\"using 0 instead of incorrect Alpha \" + constantAlpha);",
                "+            constantAlpha = 0;",
                "+        }",
                "+        else if (constantAlpha > 1)",
                "+        {",
                "+            LOG.warn(\"using 1 instead of incorrect Alpha \" + constantAlpha);",
                "+            constantAlpha = 1;",
                "+        }",
                "+        if (blendMode == BlendMode.NORMAL)",
                "+        {",
                "+            return AlphaComposite.getInstance(AlphaComposite.SRC_OVER, constantAlpha);",
                "+        }",
                "+        else",
                "+        {",
                "+            return new BlendComposite(blendMode, constantAlpha);",
                "+        }",
                "+    }",
                "+",
                "+    private final BlendMode blendMode;",
                "+    private final float constantAlpha;",
                "+",
                "+    private BlendComposite(BlendMode blendMode, float constantAlpha)",
                "+    {",
                "+        super();",
                "+        this.blendMode = blendMode;",
                "+        this.constantAlpha = constantAlpha;",
                "+    }",
                "+",
                "+    @Override",
                "+    public CompositeContext createContext(ColorModel srcColorModel, ColorModel dstColorModel,",
                "+            RenderingHints hints)",
                "+    {",
                "+        return new BlendCompositeContext(srcColorModel, dstColorModel, hints);",
                "+    }",
                "+",
                "+    class BlendCompositeContext implements CompositeContext",
                "+    {",
                "+        private final ColorModel srcColorModel;",
                "+        private final ColorModel dstColorModel;",
                "+        private final RenderingHints hints;",
                "+",
                "+        BlendCompositeContext(ColorModel srcColorModel, ColorModel dstColorModel,",
                "+                RenderingHints hints)",
                "+        {",
                "+            this.srcColorModel = srcColorModel;",
                "+            this.dstColorModel = dstColorModel;",
                "+            this.hints = hints;",
                "+        }",
                "+",
                "+        @Override",
                "+        public void dispose()",
                "+        {",
                "+            // nothing needed",
                "+        }",
                "+",
                "+        @Override",
                "+        public void compose(Raster src, Raster dstIn, WritableRaster dstOut)",
                "+        {",
                "+            int x0 = src.getMinX();",
                "+            int y0 = src.getMinY();",
                "+            int width = Math.min(Math.min(src.getWidth(), dstIn.getWidth()), dstOut.getWidth());",
                "+            int height = Math.min(Math.min(src.getHeight(), dstIn.getHeight()), dstOut.getHeight());",
                "+            int x1 = x0 + width;",
                "+            int y1 = y0 + height;",
                "+            int dstInXShift = dstIn.getMinX() - x0;",
                "+            int dstInYShift = dstIn.getMinY() - y0;",
                "+            int dstOutXShift = dstOut.getMinX() - x0;",
                "+            int dstOutYShift = dstOut.getMinY() - y0;",
                "+",
                "+            ColorSpace srcColorSpace = srcColorModel.getColorSpace();",
                "+            int numSrcColorComponents = srcColorModel.getNumColorComponents();",
                "+            int numSrcComponents = src.getNumBands();",
                "+            boolean srcHasAlpha = (numSrcComponents > numSrcColorComponents);",
                "+            ColorSpace dstColorSpace = dstColorModel.getColorSpace();",
                "+            int numDstColorComponents = dstColorModel.getNumColorComponents();",
                "+            int numDstComponents = dstIn.getNumBands();",
                "+            boolean dstHasAlpha = (numDstComponents > numDstColorComponents);",
                "+",
                "+            int srcColorSpaceType = srcColorSpace.getType();",
                "+            int dstColorSpaceType = dstColorSpace.getType();",
                "+            boolean subtractive = (dstColorSpaceType != ColorSpace.TYPE_RGB)",
                "+                    && (dstColorSpaceType != ColorSpace.TYPE_GRAY);",
                "+",
                "+            boolean blendModeIsSeparable = blendMode instanceof SeparableBlendMode;",
                "+            SeparableBlendMode separableBlendMode = blendModeIsSeparable ?",
                "+                    (SeparableBlendMode) blendMode : null;",
                "+            NonSeparableBlendMode nonSeparableBlendMode = !blendModeIsSeparable ?",
                "+                    (NonSeparableBlendMode) blendMode : null;",
                "+",
                "+            boolean needsColorConversion = !srcColorSpace.equals(dstColorSpace);",
                "+",
                "+            Object srcPixel = null;",
                "+            Object dstPixel = null;",
                "+            float[] srcComponents = new float[numSrcComponents];",
                "+            // PDFBOX-3501 let getNormalizedComponents allocate to avoid ",
                "+            // ArrayIndexOutOfBoundsException for bitonal target",
                "+            float[] dstComponents = null;",
                "+",
                "+            float[] srcColor = new float[numSrcColorComponents];",
                "+            float[] srcConverted;",
                "+            float[] dstConverted;",
                "+            float[] rgbResult = blendModeIsSeparable ? null : new float[dstHasAlpha ? 4 : 3];",
                "+",
                "+            for (int y = y0; y < y1; y++)",
                "+            {",
                "+                for (int x = x0; x < x1; x++)",
                "+                {",
                "+                    srcPixel = src.getDataElements(x, y, srcPixel);",
                "+                    dstPixel = dstIn.getDataElements(dstInXShift + x, dstInYShift + y, dstPixel);",
                "+",
                "+                    srcComponents = srcColorModel.getNormalizedComponents(srcPixel, srcComponents,",
                "+                            0);",
                "+                    dstComponents = dstColorModel.getNormalizedComponents(dstPixel, dstComponents,",
                "+                            0);",
                "+",
                "+                    float srcAlpha = srcHasAlpha ? srcComponents[numSrcColorComponents] : 1.0f;",
                "+                    float dstAlpha = dstHasAlpha ? dstComponents[numDstColorComponents] : 1.0f;",
                "+",
                "+                    srcAlpha = srcAlpha * constantAlpha;",
                "+",
                "+                    float resultAlpha = dstAlpha + srcAlpha - srcAlpha * dstAlpha;",
                "+                    float srcAlphaRatio = (resultAlpha > 0) ? srcAlpha / resultAlpha : 0;",
                "+",
                "+                    if (separableBlendMode != null)",
                "+                    {",
                "+                        // convert color",
                "+                        System.arraycopy(srcComponents, 0, srcColor, 0, numSrcColorComponents);",
                "+                        if (needsColorConversion)",
                "+                        {",
                "+                            // TODO - very very slow - Hash results???",
                "+                            float[] cieXYZ = srcColorSpace.toCIEXYZ(srcColor);",
                "+                            srcConverted = dstColorSpace.fromCIEXYZ(cieXYZ);",
                "+                        }",
                "+                        else",
                "+                        {",
                "+                            srcConverted = srcColor;",
                "+                        }",
                "+                        ",
                "+                        for (int k = 0; k < numDstColorComponents; k++)",
                "+                        {",
                "+                            float srcValue = srcConverted[k];",
                "+                            float dstValue = dstComponents[k];",
                "+",
                "+                            if (subtractive)",
                "+                            {",
                "+                                srcValue = 1 - srcValue;",
                "+                                dstValue = 1 - dstValue;",
                "+                            }",
                "+",
                "+                            float value = separableBlendMode.blendChannel(srcValue, dstValue);",
                "+                            value = srcValue + dstAlpha * (value - srcValue);",
                "+                            value = dstValue + srcAlphaRatio * (value - dstValue);",
                "+",
                "+                            if (subtractive)",
                "+                            {",
                "+                                value = 1 - value;",
                "+                            }",
                "+",
                "+                            dstComponents[k] = value;",
                "+                        }",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        // Nonseparable blend modes are computed in RGB color space.",
                "+                        // TODO - CMYK color spaces need special treatment.",
                "+",
                "+                        if (srcColorSpaceType == ColorSpace.TYPE_RGB)",
                "+                        {",
                "+                            srcConverted = srcComponents;",
                "+                        }",
                "+                        else",
                "+                        {",
                "+                            srcConverted = srcColorSpace.toRGB(srcComponents);",
                "+                        }",
                "+",
                "+                        if (dstColorSpaceType == ColorSpace.TYPE_RGB)",
                "+                        {",
                "+                            dstConverted = dstComponents;",
                "+                        }",
                "+                        else",
                "+                        {",
                "+                            dstConverted = dstColorSpace.toRGB(dstComponents);",
                "+                        }",
                "+                        ",
                "+                        nonSeparableBlendMode.blend(srcConverted, dstConverted, rgbResult);",
                "+",
                "+                        for (int k = 0; k < 3; k++)",
                "+                        {",
                "+                            float srcValue = srcConverted[k];",
                "+                            float dstValue = dstConverted[k];",
                "+                            float value = rgbResult[k];",
                "+                            value = Math.max(Math.min(value, 1.0f), 0.0f);",
                "+                            value = srcValue + dstAlpha * (value - srcValue);",
                "+                            value = dstValue + srcAlphaRatio * (value - dstValue);",
                "+                            rgbResult[k] = value;",
                "+                        }",
                "+",
                "+                        if (dstColorSpaceType == ColorSpace.TYPE_RGB)",
                "+                        {",
                "+                            System.arraycopy(rgbResult, 0, dstComponents, 0, dstComponents.length);",
                "+                        }",
                "+                        else",
                "+                        {",
                "+                            float[] temp = dstColorSpace.fromRGB(rgbResult);",
                "+                            System.arraycopy(temp, 0, dstComponents, 0,",
                "+                                Math.min(dstComponents.length, temp.length));",
                "+                        }",
                "+                    }",
                "+",
                "+                    if (dstHasAlpha)",
                "+                    {",
                "+                        dstComponents[numDstColorComponents] = resultAlpha;",
                "+                    }",
                "+",
                "+                    dstPixel = dstColorModel.getDataElements(dstComponents, 0, dstPixel);",
                "+                    dstOut.setDataElements(dstOutXShift + x, dstOutYShift + y, dstPixel);",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "index 00b8dd1d2..cc6624e89 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "@@ -204,2 +204,165 @@ public abstract class BlendMode",
                "+    public static final NonSeparableBlendMode HUE = new NonSeparableBlendMode()",
                "+    {",
                "+        @Override",
                "+        public void blend(float[] srcValues, float[] dstValues, float[] result)",
                "+        {",
                "+            float[] temp = new float[3];",
                "+            getSaturationRGB(dstValues, srcValues, temp);",
                "+            getLuminosityRGB(dstValues, temp, result);",
                "+        }",
                "+    };",
                "+",
                "+    public static final NonSeparableBlendMode SATURATION = new NonSeparableBlendMode()",
                "+    {",
                "+        @Override",
                "+        public void blend(float[] srcValues, float[] dstValues, float[] result)",
                "+        {",
                "+            getSaturationRGB(srcValues, dstValues, result);",
                "+        }",
                "+    };",
                "+",
                "+    public static final NonSeparableBlendMode COLOR = new NonSeparableBlendMode()",
                "+    {",
                "+        @Override",
                "+        public void blend(float[] srcValues, float[] dstValues, float[] result)",
                "+        {",
                "+            getLuminosityRGB(dstValues, srcValues, result);",
                "+        }",
                "+    };",
                "+",
                "+    public static final NonSeparableBlendMode LUMINOSITY = new NonSeparableBlendMode()",
                "+    {",
                "+        @Override",
                "+        public void blend(float[] srcValues, float[] dstValues, float[] result)",
                "+        {",
                "+            getLuminosityRGB(srcValues, dstValues, result);",
                "+        }",
                "+    };",
                "+",
                "+    private static int get255Value(float val)",
                "+    {",
                "+        return (int) Math.floor(val >= 1.0 ? 255 : val * 255.0);",
                "+    }",
                "+",
                "+    private static void getSaturationRGB(float[] srcValues, float[] dstValues, float[] result)",
                "+    {",
                "+        int minb;",
                "+        int maxb;",
                "+        int mins;",
                "+        int maxs;",
                "+        int y;",
                "+        int scale;",
                "+        int r;",
                "+        int g;",
                "+        int b;",
                "+",
                "+        int rd = get255Value(dstValues[0]);",
                "+        int gd = get255Value(dstValues[1]);",
                "+        int bd = get255Value(dstValues[2]);",
                "+        int rs = get255Value(srcValues[0]);",
                "+        int gs = get255Value(srcValues[1]);",
                "+        int bs = get255Value(srcValues[2]);",
                "+",
                "+        minb = Math.min(rd, Math.min(gd, bd));",
                "+        maxb = Math.max(rd, Math.max(gd, bd));",
                "+        if (minb == maxb)",
                "+        {",
                "+            /* backdrop has zero saturation, avoid divide by 0 */",
                "+            result[0] = gd / 255.0f;",
                "+            result[1] = gd / 255.0f;",
                "+            result[2] = gd / 255.0f;",
                "+            return;",
                "+        }",
                "+",
                "+        mins = Math.min(rs, Math.min(gs, bs));",
                "+        maxs = Math.max(rs, Math.max(gs, bs));",
                "+",
                "+        scale = ((maxs - mins) << 16) / (maxb - minb);",
                "+        y = (rd * 77 + gd * 151 + bd * 28 + 0x80) >> 8;",
                "+        r = y + ((((rd - y) * scale) + 0x8000) >> 16);",
                "+        g = y + ((((gd - y) * scale) + 0x8000) >> 16);",
                "+        b = y + ((((bd - y) * scale) + 0x8000) >> 16);",
                "+",
                "+        if (((r | g | b) & 0x100) == 0x100)",
                "+        {",
                "+            int scalemin;",
                "+            int scalemax;",
                "+            int min;",
                "+            int max;",
                "+",
                "+            min = Math.min(r, Math.min(g, b));",
                "+            max = Math.max(r, Math.max(g, b));",
                "+",
                "+            if (min < 0)",
                "+            {",
                "+                scalemin = (y << 16) / (y - min);",
                "+            }",
                "+            else",
                "+            {",
                "+                scalemin = 0x10000;",
                "+            }",
                "+",
                "+            if (max > 255)",
                "+            {",
                "+                scalemax = ((255 - y) << 16) / (max - y);",
                "+            }",
                "+            else",
                "+            {",
                "+                scalemax = 0x10000;",
                "+            }",
                "+",
                "+            scale = Math.min(scalemin, scalemax);",
                "+            r = y + (((r - y) * scale + 0x8000) >> 16);",
                "+            g = y + (((g - y) * scale + 0x8000) >> 16);",
                "+            b = y + (((b - y) * scale + 0x8000) >> 16);",
                "+        }",
                "+        result[0] = r / 255.0f;",
                "+        result[1] = g / 255.0f;",
                "+        result[2] = b / 255.0f;",
                "+    }",
                "+",
                "+    private static void getLuminosityRGB(float[] srcValues, float[] dstValues, float[] result)",
                "+    {",
                "+        int delta;",
                "+        int scale;",
                "+        int r;",
                "+        int g;",
                "+        int b;",
                "+        int y;",
                "+        int rd = get255Value(dstValues[0]);",
                "+        int gd = get255Value(dstValues[1]);",
                "+        int bd = get255Value(dstValues[2]);",
                "+        int rs = get255Value(srcValues[0]);",
                "+        int gs = get255Value(srcValues[1]);",
                "+        int bs = get255Value(srcValues[2]);",
                "+        delta = ((rs - rd) * 77 + (gs - gd) * 151 + (bs - bd) * 28 + 0x80) >> 8;",
                "+        r = (rd + delta);",
                "+        g = (gd + delta);",
                "+        b = (bd + delta);",
                "+",
                "+        if (((r | g | b) & 0x100) == 0x100)",
                "+        {",
                "+            y = (rs * 77 + gs * 151 + bs * 28 + 0x80) >> 8;",
                "+            if (delta > 0)",
                "+            {",
                "+                int max;",
                "+                max = Math.max(r, Math.max(g, b));",
                "+                scale = (max == y ? 0 : ((255 - y) << 16) / (max - y));",
                "+            }",
                "+            else",
                "+            {",
                "+                int min;",
                "+                min = Math.min(r, Math.min(g, b));",
                "+                scale = (y == min ? 0 : (y << 16) / (y - min));",
                "+            }",
                "+            r = y + (((r - y) * scale + 0x8000) >> 16);",
                "+            g = y + (((g - y) * scale + 0x8000) >> 16);",
                "+            b = y + (((b - y) * scale + 0x8000) >> 16);",
                "+        }",
                "+        result[0] = r / 255.0f;",
                "+        result[1] = g / 255.0f;",
                "+        result[2] = b / 255.0f;",
                "+    }",
                "+",
                "     // this map *must* come after the declarations above, otherwise its values will be null",
                "@@ -223,3 +386,6 @@ public abstract class BlendMode",
                "         map.put(COSName.EXCLUSION, BlendMode.EXCLUSION);",
                "-        // TODO - non-separable blending modes",
                "+        map.put(COSName.HUE, BlendMode.HUE);",
                "+        map.put(COSName.SATURATION, BlendMode.SATURATION);",
                "+        map.put(COSName.LUMINOSITY, BlendMode.LUMINOSITY);",
                "+        map.put(COSName.COLOR, BlendMode.COLOR);",
                "         return map;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendComposite.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4095": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "5a2463f8299d8fb93ae7bfd06890c3386ca7462a"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4095",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "df3d48ee137520ce3827bbfde5c22e02f8a84895",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524072275,
            "hunks": 2,
            "message": "PDFBOX-2941: show wait cursor when printing git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1829459 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java b/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "index c59fb8880..e7a5656d5 100644",
                "--- a/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "+++ b/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "@@ -20,2 +20,3 @@ import java.awt.BorderLayout;",
                " import java.awt.Component;",
                "+import java.awt.Cursor;",
                " import java.awt.Dimension;",
                "@@ -1130,3 +1131,11 @@ public class PDFDebugger extends JFrame",
                "             {",
                "-                job.print(pras);",
                "+                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));",
                "+                try",
                "+                {",
                "+                    job.print(pras);",
                "+                }",
                "+                finally",
                "+                {",
                "+                    setCursor(Cursor.getDefaultCursor());",
                "+                }",
                "             }"
            ],
            "changed_files": [
                "debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-2941": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e2924fb97f723b7ae6f55e255a90badb68cee0fc"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-2941",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "956ef712ca62c13350db3a74495c1e5cfdd271aa",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530368478,
            "hunks": 2,
            "message": "PDFBOX-4184: make flate compression level public to allow access in future image compression code, as suggested by Emmeran Seehuber git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834740 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java b/pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java",
                "index 1f63e8454..bb4aec338 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java",
                "@@ -167,2 +167,18 @@ public abstract class Filter",
                "+    /**",
                "+     * @return the ZIP compression level configured for PDFBox",
                "+     */",
                "+    public static int getCompressionLevel()",
                "+    {",
                "+        int compressionLevel = Deflater.DEFAULT_COMPRESSION;",
                "+        try",
                "+        {",
                "+            compressionLevel = Integer.parseInt(System.getProperty(Filter.SYSPROP_DEFLATELEVEL, \"-1\"));",
                "+        }",
                "+        catch (NumberFormatException ex)",
                "+        {",
                "+            LOG.warn(ex.getMessage(), ex);",
                "+        }",
                "+        return Math.max(-1, Math.min(Deflater.BEST_COMPRESSION, compressionLevel));",
                "+    }",
                " }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java b/pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java",
                "index 3cc8a65ed..7c43a7dab 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java",
                "@@ -120,12 +120,3 @@ final class FlateFilter extends Filter",
                "     {",
                "-        int compressionLevel = Deflater.DEFAULT_COMPRESSION;",
                "-        try",
                "-        {",
                "-            compressionLevel = Integer.parseInt(System.getProperty(Filter.SYSPROP_DEFLATELEVEL, \"-1\"));",
                "-        }",
                "-        catch (NumberFormatException ex)",
                "-        {",
                "-            LOG.warn(ex.getMessage(), ex);",
                "-        }",
                "-        compressionLevel = Math.max(-1, Math.min(Deflater.BEST_COMPRESSION, compressionLevel));",
                "+        int compressionLevel = getCompressionLevel();",
                "         Deflater deflater = new Deflater(compressionLevel);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java",
                "pdfbox/src/main/java/org/apache/pdfbox/filter/FlateFilter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4184": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7d06d7a609d32e52a0f19d4bc8cbd7438f472d9c"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4184",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e74d4b2ce7cbaff9195c79d4332a428b4647f19f",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526762576,
            "hunks": 29,
            "message": "PDFBOX-3353: sonar fix git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831922 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationLine.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationLine.java",
                "index a389cee91..6846ca430 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationLine.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationLine.java",
                "@@ -193,6 +193,3 @@ public class FDFAnnotationLine extends FDFAnnotation",
                "     {",
                "-        if (style == null)",
                "-        {",
                "-            style = PDAnnotationLine.LE_NONE;",
                "-        }",
                "+        String actualStyle = style == null ? PDAnnotationLine.LE_NONE : style;",
                "         COSArray array = (COSArray) annot.getDictionaryObject(COSName.LE);",
                "@@ -201,3 +198,3 @@ public class FDFAnnotationLine extends FDFAnnotation",
                "             array = new COSArray();",
                "-            array.add(COSName.getPDFName(style));",
                "+            array.add(COSName.getPDFName(actualStyle));",
                "             array.add(COSName.getPDFName(PDAnnotationLine.LE_NONE));",
                "@@ -207,3 +204,3 @@ public class FDFAnnotationLine extends FDFAnnotation",
                "         {",
                "-            array.setName(0, style);",
                "+            array.setName(0, actualStyle);",
                "         }",
                "@@ -235,6 +232,3 @@ public class FDFAnnotationLine extends FDFAnnotation",
                "     {",
                "-        if (style == null)",
                "-        {",
                "-            style = PDAnnotationLine.LE_NONE;",
                "-        }",
                "+        String actualStyle = style == null ? PDAnnotationLine.LE_NONE : style;",
                "         COSArray array = (COSArray) annot.getDictionaryObject(COSName.LE);",
                "@@ -244,3 +238,3 @@ public class FDFAnnotationLine extends FDFAnnotation",
                "             array.add(COSName.getPDFName(PDAnnotationLine.LE_NONE));",
                "-            array.add(COSName.getPDFName(style));",
                "+            array.add(COSName.getPDFName(actualStyle));",
                "             annot.setItem(COSName.LE, array);",
                "@@ -249,3 +243,3 @@ public class FDFAnnotationLine extends FDFAnnotation",
                "         {",
                "-            array.setName(1, style);",
                "+            array.setName(1, actualStyle);",
                "         }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationPolyline.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationPolyline.java",
                "index c7302ca1a..9b0c1fc57 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationPolyline.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationPolyline.java",
                "@@ -164,6 +164,3 @@ public class FDFAnnotationPolyline extends FDFAnnotation",
                "     {",
                "-        if (style == null)",
                "-        {",
                "-            style = PDAnnotationLine.LE_NONE;",
                "-        }",
                "+        String actualStyle = style == null ? PDAnnotationLine.LE_NONE : style;",
                "         COSArray array = (COSArray) annot.getDictionaryObject(COSName.LE);",
                "@@ -172,3 +169,3 @@ public class FDFAnnotationPolyline extends FDFAnnotation",
                "             array = new COSArray();",
                "-            array.add(COSName.getPDFName(style));",
                "+            array.add(COSName.getPDFName(actualStyle));",
                "             array.add(COSName.getPDFName(PDAnnotationLine.LE_NONE));",
                "@@ -178,3 +175,3 @@ public class FDFAnnotationPolyline extends FDFAnnotation",
                "         {",
                "-            array.setName(0, style);",
                "+            array.setName(0, actualStyle);",
                "         }",
                "@@ -206,6 +203,3 @@ public class FDFAnnotationPolyline extends FDFAnnotation",
                "     {",
                "-        if (style == null)",
                "-        {",
                "-            style = PDAnnotationLine.LE_NONE;",
                "-        }",
                "+        String actualStyle = style == null ? PDAnnotationLine.LE_NONE : style;",
                "         COSArray array = (COSArray) annot.getDictionaryObject(COSName.LE);",
                "@@ -215,3 +209,3 @@ public class FDFAnnotationPolyline extends FDFAnnotation",
                "             array.add(COSName.getPDFName(PDAnnotationLine.LE_NONE));",
                "-            array.add(COSName.getPDFName(style));",
                "+            array.add(COSName.getPDFName(actualStyle));",
                "             annot.setItem(COSName.LE, array);",
                "@@ -220,3 +214,3 @@ public class FDFAnnotationPolyline extends FDFAnnotation",
                "         {",
                "-            array.setName(1, style);",
                "+            array.setName(1, actualStyle);",
                "         }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationLine.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationLine.java",
                "index 191fde680..c188fcf12 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationLine.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationLine.java",
                "@@ -159,6 +159,3 @@ public class PDAnnotationLine extends PDAnnotationMarkup",
                "     {",
                "-        if (style == null)",
                "-        {",
                "-            style = LE_NONE;",
                "-        }",
                "+        String actualStyle = style == null ? PDAnnotationLine.LE_NONE : style;",
                "         COSBase base = getCOSObject().getDictionaryObject(COSName.LE);",
                "@@ -168,4 +165,4 @@ public class PDAnnotationLine extends PDAnnotationMarkup",
                "             array = new COSArray();",
                "-            array.add(COSName.getPDFName(style));",
                "-            array.add(COSName.getPDFName(LE_NONE));",
                "+            array.add(COSName.getPDFName(actualStyle));",
                "+            array.add(COSName.getPDFName(PDAnnotationLine.LE_NONE));",
                "             getCOSObject().setItem(COSName.LE, array);",
                "@@ -175,3 +172,3 @@ public class PDAnnotationLine extends PDAnnotationMarkup",
                "             array = (COSArray) base;",
                "-            array.setName(0, style);",
                "+            array.setName(0, actualStyle);",
                "         }",
                "@@ -201,6 +198,3 @@ public class PDAnnotationLine extends PDAnnotationMarkup",
                "     {",
                "-        if (style == null)",
                "-        {",
                "-            style = LE_NONE;",
                "-        }",
                "+        String actualStyle = style == null ? PDAnnotationLine.LE_NONE : style;",
                "         COSBase base = getCOSObject().getDictionaryObject(COSName.LE);",
                "@@ -210,4 +204,4 @@ public class PDAnnotationLine extends PDAnnotationMarkup",
                "             array = new COSArray();",
                "-            array.add(COSName.getPDFName(LE_NONE));",
                "-            array.add(COSName.getPDFName(style));",
                "+            array.add(COSName.getPDFName(PDAnnotationLine.LE_NONE));",
                "+            array.add(COSName.getPDFName(actualStyle));",
                "             getCOSObject().setItem(COSName.LE, array);",
                "@@ -217,3 +211,3 @@ public class PDAnnotationLine extends PDAnnotationMarkup",
                "             array = (COSArray) base;",
                "-            array.setName(1, style);",
                "+            array.setName(1, actualStyle);",
                "         }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolyline.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolyline.java",
                "index b5833f84a..327d1fdca 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolyline.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolyline.java",
                "@@ -22,3 +22,2 @@ import org.apache.pdfbox.cos.COSName;",
                " import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
                "-import static org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine.LE_NONE;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAppearanceHandler;",
                "@@ -64,6 +63,3 @@ public class PDAnnotationPolyline extends PDAnnotationMarkup",
                "     {",
                "-        if (style == null)",
                "-        {",
                "-            style = LE_NONE;",
                "-        }",
                "+        String actualStyle = style == null ? PDAnnotationLine.LE_NONE : style;",
                "         COSBase base = getCOSObject().getDictionaryObject(COSName.LE);",
                "@@ -73,4 +69,4 @@ public class PDAnnotationPolyline extends PDAnnotationMarkup",
                "             array = new COSArray();",
                "-            array.add(COSName.getPDFName(style));",
                "-            array.add(COSName.getPDFName(LE_NONE));",
                "+            array.add(COSName.getPDFName(actualStyle));",
                "+            array.add(COSName.getPDFName(PDAnnotationLine.LE_NONE));",
                "             getCOSObject().setItem(COSName.LE, array);",
                "@@ -80,3 +76,3 @@ public class PDAnnotationPolyline extends PDAnnotationMarkup",
                "             array = (COSArray) base;",
                "-            array.setName(0, style);",
                "+            array.setName(0, actualStyle);",
                "         }",
                "@@ -94,5 +90,5 @@ public class PDAnnotationPolyline extends PDAnnotationMarkup",
                "         {",
                "-            return ((COSArray) base).getName(0, LE_NONE);",
                "+            return ((COSArray) base).getName(0, PDAnnotationLine.LE_NONE);",
                "         }",
                "-        return LE_NONE;",
                "+        return PDAnnotationLine.LE_NONE;",
                "     }",
                "@@ -106,6 +102,3 @@ public class PDAnnotationPolyline extends PDAnnotationMarkup",
                "     {",
                "-        if (style == null)",
                "-        {",
                "-            style = LE_NONE;",
                "-        }",
                "+        String actualStyle = style == null ? PDAnnotationLine.LE_NONE : style;",
                "         COSBase base = getCOSObject().getDictionaryObject(COSName.LE);",
                "@@ -115,4 +108,4 @@ public class PDAnnotationPolyline extends PDAnnotationMarkup",
                "             array = new COSArray();",
                "-            array.add(COSName.getPDFName(LE_NONE));",
                "-            array.add(COSName.getPDFName(style));",
                "+            array.add(COSName.getPDFName(PDAnnotationLine.LE_NONE));",
                "+            array.add(COSName.getPDFName(actualStyle));",
                "             getCOSObject().setItem(COSName.LE, array);",
                "@@ -122,3 +115,3 @@ public class PDAnnotationPolyline extends PDAnnotationMarkup",
                "             array = (COSArray) base;",
                "-            array.setName(1, style);",
                "+            array.setName(1, actualStyle);",
                "         }",
                "@@ -136,5 +129,5 @@ public class PDAnnotationPolyline extends PDAnnotationMarkup",
                "         {",
                "-            return ((COSArray) base).getName(1, LE_NONE);",
                "+            return ((COSArray) base).getName(1, PDAnnotationLine.LE_NONE);",
                "         }",
                "-        return LE_NONE;",
                "+        return PDAnnotationLine.LE_NONE;",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationLine.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/fdf/FDFAnnotationPolyline.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationLine.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolyline.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "dbc072811f7bdbe50e38a0ae8199c674d74f43f0"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "17d72c0e1d21522e7defa4e711a0c475d71c9aa4",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532270555,
            "hunks": 5,
            "message": "PDFBOX-4271: set versions in the parent, as suggested by Karl Heinz Marbaise git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1836443 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/fontbox/pom.xml b/fontbox/pom.xml",
                "index 3da486720..dbb81390a 100644",
                "--- a/fontbox/pom.xml",
                "+++ b/fontbox/pom.xml",
                "@@ -72,3 +72,2 @@",
                "           <artifactId>download-maven-plugin</artifactId>",
                "-          <version>1.3.0</version>",
                "           <executions>",
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 07a60c503..46e14e21e 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -257,3 +257,14 @@",
                " \t            </executions>",
                "-\t        </plugin>",
                "+                </plugin>",
                "+                <plugin>",
                "+                    <groupId>com.googlecode.maven-download-plugin</groupId>",
                "+                    <artifactId>download-maven-plugin</artifactId>",
                "+                    <version>1.3.0</version>",
                "+                </plugin>",
                "+                <plugin>",
                "+                    <groupId>com.googlecode.maven-download-plugin</groupId>",
                "+                    <!-- can't use download-maven-plugin for JDK6, see PDFBOX-3532 -->",
                "+                    <artifactId>maven-download-plugin</artifactId>",
                "+                    <version>1.1.0</version>",
                "+                </plugin>",
                "         </plugins>",
                "diff --git a/pdfbox/pom.xml b/pdfbox/pom.xml",
                "index 6d21fa37b..eebe9402f 100644",
                "--- a/pdfbox/pom.xml",
                "+++ b/pdfbox/pom.xml",
                "@@ -186,3 +186,2 @@",
                "                 <artifactId>download-maven-plugin</artifactId>",
                "-                <version>1.3.0</version>",
                "                 <executions>",
                "diff --git a/preflight/pom.xml b/preflight/pom.xml",
                "index c8f3d5402..f62a84d9e 100644",
                "--- a/preflight/pom.xml",
                "+++ b/preflight/pom.xml",
                "@@ -111,3 +111,2 @@",
                "                 <artifactId>maven-download-plugin</artifactId>",
                "-                <version>1.1.0</version>",
                "                 <configuration>",
                "@@ -160,3 +159,2 @@",
                " \t\t\t\t\t\t\t\t\t\t<artifactId>download-maven-plugin</artifactId>",
                "-\t\t\t\t\t\t\t\t\t\t<versionRange>[1.3.0,)</versionRange>",
                " \t\t\t\t\t\t\t\t\t\t<goals>"
            ],
            "changed_files": [
                "fontbox/pom.xml",
                "parent/pom.xml",
                "pdfbox/pom.xml",
                "preflight/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4271": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "496f0946198ff9dce2dbb3aabb58724e885fb540"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4271",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ac08d027fbe45be455b955e0977ba324926e6e71",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527271355,
            "hunks": 1,
            "message": "PDFBOX-4227: be resilent if XMP metadata can't be read git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1832260 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "index ccc1fe5d1..da0ca4cd7 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "@@ -656,6 +656,14 @@ public class PDFMergerUtility",
                "         {",
                "-            PDStream newStream = new PDStream(destination, srcMetadata.createInputStream(), (COSName) null);           ",
                "-            mergeInto(srcMetadata, newStream.getCOSObject(), ",
                "-                    new HashSet<COSName>(Arrays.asList(COSName.FILTER, COSName.LENGTH)));           ",
                "-            destCatalog.getCOSObject().setItem(COSName.METADATA, newStream);",
                "+            try",
                "+            {",
                "+                PDStream newStream = new PDStream(destination, srcMetadata.createInputStream(), (COSName) null);           ",
                "+                mergeInto(srcMetadata, newStream.getCOSObject(), ",
                "+                        new HashSet<COSName>(Arrays.asList(COSName.FILTER, COSName.LENGTH)));           ",
                "+                destCatalog.getCOSObject().setItem(COSName.METADATA, newStream);",
                "+            }",
                "+            catch (IOException ex)",
                "+            {",
                "+                // PDFBOX-4227 cleartext XMP stream with /Flate ",
                "+                LOG.error(\"Metadata skipped because it could not be read\", ex);",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4227": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1cfd4aaa7c4967b693d34d7e38c06e188b0cae4f"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4227",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0e0252e99cbc84d2d9e3cc3e02fe76e292b4cf11",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530728532,
            "hunks": 8,
            "message": "PDFBOX-4242: register fonts and close them when closing the document to avoid memory leaks git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835076 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "index 95408142c..b60323fcf 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "@@ -37,2 +37,3 @@ import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "+import org.apache.fontbox.ttf.TrueTypeFont;",
                " import org.apache.pdfbox.cos.COSArray;",
                "@@ -136,3 +137,6 @@ public class PDDocument implements Closeable",
                "     private final Set<PDFont> fontsToSubset = new HashSet<>();",
                "-    ",
                "+",
                "+    // fonts to close when closing document",
                "+    private final Set<TrueTypeFont> fontsToClose = new HashSet<>();",
                "+",
                "     // Signature interface",
                "@@ -875,2 +879,14 @@ public class PDDocument implements Closeable",
                "+    /**",
                "+     * For internal PDFBox use when creating PDF documents: register a TrueTypeFont to make sure it",
                "+     * is closed when the PDDocument is closed to avoid memory leaks. Users don't have to call this",
                "+     * method, it is done by the appropriate PDFont classes.",
                "+     *",
                "+     * @param ttf",
                "+     */",
                "+    public void registerTrueTypeFont(TrueTypeFont ttf)",
                "+    {",
                "+        fontsToClose.add(ttf);",
                "+    }",
                "+",
                "     /**",
                "@@ -1415,2 +1431,8 @@ public class PDDocument implements Closeable",
                "+            // close fonts",
                "+            for (TrueTypeFont ttf : fontsToClose)",
                "+            {",
                "+                firstException = IOUtils.closeAndLogException(ttf, LOG, \"TrueTypeFont\", firstException);",
                "+            }",
                "+",
                "             // rethrow first exception to keep method contract",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "index 843a8eb0c..164a4930f 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "@@ -94,6 +94,15 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "     /**",
                "-    * Private. Creates a new TrueType font for embedding.",
                "-    */",
                "+     * Private. Creates a new PDType0Font font for embedding.",
                "+     *",
                "+     * @param document",
                "+     * @param ttf",
                "+     * @param embedSubset",
                "+     * @param closeTTF whether to close the ttf parameter after embedding. Must be true when the ttf",
                "+     * parameter was created in the load() method, false when the ttf parameter was passed to the",
                "+     * load() method.",
                "+     * @param vertical",
                "+     * @throws IOException",
                "+     */",
                "     private PDType0Font(PDDocument document, TrueTypeFont ttf, boolean embedSubset,",
                "-            boolean closeOnSubset, boolean vertical) throws IOException",
                "+            boolean closeTTF, boolean vertical) throws IOException",
                "     {",
                "@@ -111,3 +120,3 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "         fetchCMapUCS2();",
                "-        if (closeOnSubset)",
                "+        if (closeTTF)",
                "         {",
                "@@ -116,2 +125,3 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "                 this.ttf = ttf;",
                "+                document.registerTrueTypeFont(ttf);",
                "             }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4242": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d837e66f3517abb4309dece5ce499c2118203a27"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4242",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fb480219b01736337995b191258442e0d94743a6",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530035135,
            "hunks": 2,
            "message": "PDFBOX-4253: cache bounds values git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834453 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionType3.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionType3.java",
                "index 594cd8d1c..f5c128718 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionType3.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionType3.java",
                "@@ -36,3 +36,4 @@ public class PDFunctionType3 extends PDFunction",
                "     private PDFunction[] functionsArray = null;",
                "-    ",
                "+    private float[] boundsValues = null;",
                "+",
                "     /**",
                "@@ -90,3 +91,6 @@ public class PDFunctionType3 extends PDFunction",
                "         {",
                "-            float[] boundsValues = getBounds().toFloatArray();",
                "+            if (boundsValues == null)",
                "+            {",
                "+                boundsValues = getBounds().toFloatArray();",
                "+            }",
                "             int boundsSize = boundsValues.length;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/function/PDFunctionType3.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4253": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a7b91102c78d3e88873a9f8d57f33e062331aba4"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4253",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5753aa286c4124bf1ec8c20a7e46b75b91eb4ec7",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532632202,
            "hunks": 2,
            "message": "PDFBOX-4279: avoid NPE with empty annotation color that have no colorspace git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1836753 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java",
                "index 38af5c8f7..18da9a0b0 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java",
                "@@ -115,5 +115,7 @@ public final class PDColor",
                "     {",
                "-        if (colorSpace instanceof PDPattern)",
                "+        if (colorSpace instanceof PDPattern || colorSpace == null)",
                "         {",
                "             // colorspace of the pattern color isn't known, so just clone",
                "+            // null colorspace can happen with empty annotation color",
                "+            // see PDFBOX-3351-538928-p4.pdf",
                "             return components.clone();"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4279": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e62a364cf83e55e5bcb0f5f9e5bc2ea384b95951"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4279",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "68952e75f85d03f2dfa536d60b1cce7dfe842353",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523986011,
            "hunks": 5,
            "message": "PDFBOX-4192: support subsampling git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1829375 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java b/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java",
                "index 4e5a881d7..311e3213a 100644",
                "--- a/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java",
                "+++ b/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java",
                "@@ -54,2 +54,3 @@ public final class PDFToImage",
                "     private static final String TIME = \"-time\";",
                "+    private static final String SUBSAMPLING = \"-subsampling\";",
                "@@ -100,2 +101,3 @@ public final class PDFToImage",
                "         boolean showTime = false;",
                "+        boolean subsampling = false;",
                "         try",
                "@@ -187,2 +189,6 @@ public final class PDFToImage",
                "             }",
                "+            else if( args[i].equals( SUBSAMPLING ) )",
                "+            {",
                "+                subsampling = true;",
                "+            }",
                "             else",
                "@@ -251,2 +257,3 @@ public final class PDFToImage",
                "                 PDFRenderer renderer = new PDFRenderer(document);",
                "+                renderer.setSubsamplingAllowed(subsampling);",
                "                 for (int i = startPage - 1; i < endPage; i++)",
                "@@ -303,2 +310,3 @@ public final class PDFToImage",
                "             + \"  -time                            : Prints timing information to stdout\\n\"",
                "+            + \"  -subsampling                     : Activate subsampling (for PDFs with huge images)\\n\"",
                "             + \"  <inputfile>                      : The PDF document to use\\n\";"
            ],
            "changed_files": [
                "tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4192": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "540cc8ff9fc28f02a11b177c5fc036bebbbbf9ca"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4192",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1e43aab90bde9264843e1271c49c1810f243b228",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529610318,
            "hunks": 4,
            "message": "PDFBOX-4071, PDFBOX-4251: fix DoS (OOM) Vulnerability (CVE-2018-8036) + test git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834048 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/afm/AFMParser.java b/fontbox/src/main/java/org/apache/fontbox/afm/AFMParser.java",
                "index aaeb70954..5d89b4658 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/afm/AFMParser.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/afm/AFMParser.java",
                "@@ -910,5 +910,7 @@ public class AFMParser",
                "         //now read the data",
                "-        while( !isEOL(nextByte = input.read()) )",
                "+        nextByte = input.read();",
                "+        while (nextByte != -1 && !isEOL(nextByte))",
                "         {",
                "-            buf.append( (char)nextByte );",
                "+            buf.append((char) nextByte);",
                "+            nextByte = input.read();",
                "         }",
                "@@ -937,5 +939,7 @@ public class AFMParser",
                "         //now read the data",
                "-        while( !isWhitespace(nextByte = input.read()) )",
                "+        nextByte = input.read();",
                "+        while (nextByte != -1 && !isWhitespace(nextByte))",
                "         {",
                "-            buf.append( (char)nextByte );",
                "+            buf.append((char) nextByte);",
                "+            nextByte = input.read();",
                "         }"
            ],
            "changed_files": [
                "fontbox/src/main/java/org/apache/fontbox/afm/AFMParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": "",
                "PDFBOX-4251": ""
            },
            "ghissue_refs": {},
            "cve_refs": [
                "CVE-2018-8036"
            ],
            "twins": [
                [
                    "no-tag",
                    "a994cabc705ea0366de7edab1271248cf71e1221"
                ],
                [
                    "no-tag",
                    "0ee190856c3b67f5d09d6e32d00951930a0dea21"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "SEC_KEYWORDS_IN_MESSAGE",
                    "message": "The commit message contains some security-related keywords: vulnerability, dos",
                    "relevance": 4
                },
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: parse",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071, PDFBOX-4251",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9409814b833b98a1e0990b961517bf369787640d",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532621990,
            "hunks": 1,
            "message": "PDFBOX-4279: copyOf instead of clone in case array is too small, avoids ArrayIndexOutOfBoundsException later git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1836742 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java",
                "index c966f4dd9..38af5c8f7 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java",
                "@@ -115,3 +115,9 @@ public final class PDColor",
                "     {",
                "-        return components.clone();",
                "+        if (colorSpace instanceof PDPattern)",
                "+        {",
                "+            // colorspace of the pattern color isn't known, so just clone",
                "+            return components.clone();",
                "+        }",
                "+        // PDFBOX-4279: copyOf instead of clone in case array is too small",
                "+        return Arrays.copyOf(components, colorSpace.getNumberOfComponents());",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDColor.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4279": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8fa5c0d5ae2480c47a362529f3c3c0a3dd09e370"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4279",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fdc7132221c6f21922d4e83ccf93d7fa935d4fe8",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527004459,
            "hunks": 13,
            "message": "PDFBOX-2941: new internal class to also support password entry loop for URLs but avoid double code git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1832038 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java b/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "index e7a5656d5..10733952e 100644",
                "--- a/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "+++ b/debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java",
                "@@ -1263,3 +1263,3 @@ public class PDFDebugger extends JFrame",
                "-    private void readPDFFile(File file, String password) throws IOException",
                "+    private void readPDFFile(final File file, String password) throws IOException",
                "     {",
                "@@ -1275,3 +1275,13 @@ public class PDFDebugger extends JFrame",
                "         recentFiles.removeFile(file.getPath());",
                "-        parseDocument( file, password );",
                "+        DocumentOpener documentOpener = new DocumentOpener(password)",
                "+        {",
                "+            @Override",
                "+            PDDocument open() throws IOException",
                "+            {",
                "+                return PDDocument.load(file, password);",
                "+            }",
                "+        };",
                "+        document = documentOpener.parse();",
                "+        printMenuItem.setEnabled(true);",
                "+        reopenMenuItem.setEnabled(true);",
                "@@ -1291,3 +1301,3 @@ public class PDFDebugger extends JFrame",
                "-    private void readPDFurl(String urlString, String password) throws IOException",
                "+    private void readPDFurl(final String urlString, String password) throws IOException",
                "     {",
                "@@ -1302,4 +1312,11 @@ public class PDFDebugger extends JFrame",
                "         currentFilePath = urlString;",
                "-        URL url = new URL(urlString);",
                "-        document = PDDocument.load(url.openStream(), password);",
                "+        DocumentOpener documentOpener = new DocumentOpener(password)",
                "+        {",
                "+            @Override",
                "+            PDDocument open() throws IOException",
                "+            {",
                "+                return PDDocument.load(new URL(urlString).openStream(), password);",
                "+            }",
                "+        };",
                "+        document = documentOpener.parse();",
                "         printMenuItem.setEnabled(true);",
                "@@ -1341,41 +1358,64 @@ public class PDFDebugger extends JFrame",
                "     }",
                "-    ",
                "+",
                "     /**",
                "-     * This will parse a document.",
                "-     *",
                "-     * @param file The file addressing the document.",
                "-     *",
                "-     * @throws IOException If there is an error parsing the document.",
                "+     * Internal class to avoid double code in password entry loop.",
                "      */",
                "-    private void parseDocument( File file, String password )throws IOException",
                "+    abstract class DocumentOpener",
                "     {",
                "-        while (true)",
                "+        String password;",
                "+",
                "+        DocumentOpener(String password)",
                "         {",
                "-            try",
                "-            {",
                "-                document = PDDocument.load(file, password);",
                "-            }",
                "-            catch (InvalidPasswordException ipe)",
                "+            this.password = password;",
                "+        }",
                "+",
                "+        /**",
                "+         * Override to load the actual input type (File, URL, stream), don't call it directly!",
                "+         * ",
                "+         * @return",
                "+         * @throws IOException ",
                "+         */",
                "+        abstract PDDocument open() throws IOException;",
                "+",
                "+        /**",
                "+         * Call this!",
                "+         * ",
                "+         * @return",
                "+         * @throws IOException ",
                "+         */",
                "+        final PDDocument parse() throws IOException ",
                "+        {",
                "+            PDDocument document;",
                "+            while (true)",
                "             {",
                "-                // https://stackoverflow.com/questions/8881213/joptionpane-to-get-password",
                "-                JPanel panel = new JPanel();",
                "-                JLabel label = new JLabel(\"Password:\");",
                "-                JPasswordField pass = new JPasswordField(10);",
                "-                panel.add(label);",
                "-                panel.add(pass);",
                "-                String[] options = new String[] {\"OK\", \"Cancel\"};",
                "-                int option = JOptionPane.showOptionDialog(null, panel, \"Enter password\",",
                "-                         JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,",
                "-                         null, options, \"\");",
                "-                if (option == 0)",
                "+                try",
                "                 {",
                "-                    password = new String(pass.getPassword());",
                "-                    continue;",
                "+                    document = open();",
                "                 }",
                "-                throw ipe;",
                "+                catch (InvalidPasswordException ipe)",
                "+                {",
                "+                    // https://stackoverflow.com/questions/8881213/joptionpane-to-get-password",
                "+                    JPanel panel = new JPanel();",
                "+                    JLabel label = new JLabel(\"Password:\");",
                "+                    JPasswordField pass = new JPasswordField(10);",
                "+                    panel.add(label);",
                "+                    panel.add(pass);",
                "+                    String[] options = new String[]",
                "+                    {",
                "+                        \"OK\", \"Cancel\"",
                "+                    };",
                "+                    int option = JOptionPane.showOptionDialog(null, panel, \"Enter password\",",
                "+                            JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,",
                "+                            null, options, \"\");",
                "+                    if (option == 0)",
                "+                    {",
                "+                        password = new String(pass.getPassword());",
                "+                        continue;",
                "+                    }",
                "+                    throw ipe;",
                "+                }",
                "+                break;",
                "             }",
                "-            break;",
                "-        }        ",
                "-        printMenuItem.setEnabled(true);",
                "-        reopenMenuItem.setEnabled(true);",
                "+            return document;",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "debugger/src/main/java/org/apache/pdfbox/debugger/PDFDebugger.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-2941": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fb81da13f20333adcd5b1143dc0382ace12815ae"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-2941",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9930acc88c3330fac1ba6a314c4003e0ec56fea1",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523126880,
            "hunks": 1,
            "message": "PDFBOX-4071: fix formatting git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1828609 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java b/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java",
                "index 597958353..4e5a881d7 100644",
                "--- a/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java",
                "+++ b/tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java",
                "@@ -338,3 +338,2 @@ public final class PDFToImage",
                "             page.setCropBox(rectangle);",
                "-",
                "         }"
            ],
            "changed_files": [
                "tools/src/main/java/org/apache/pdfbox/tools/PDFToImage.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a369d43367a244580c6dd910e834d559eac4c380"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1ba9b8838cc7943fa512319fab5e1a86e924d398",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530635351,
            "hunks": 3,
            "message": "PDFBOX-4259: add a polygon annotation git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835005 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/AddAnnotations.java b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/AddAnnotations.java",
                "index cfe20eb30..56db227ef 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/AddAnnotations.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/AddAnnotations.java",
                "@@ -79,2 +79,3 @@ public final class AddAnnotations",
                "             PDColor blue = new PDColor(new float[] { 0, 0, 1 }, PDDeviceRGB.INSTANCE);",
                "+            PDColor green = new PDColor(new float[] { 0, 1, 0 }, PDDeviceRGB.INSTANCE);",
                "             PDColor black = new PDColor(new float[] { 0, 0, 0 }, PDDeviceRGB.INSTANCE);",
                "@@ -271,2 +272,20 @@ public final class AddAnnotations",
                "+            PDAnnotationPolygon polygon = new PDAnnotationPolygon();",
                "+            position = new PDRectangle();",
                "+            position.setLowerLeftX(pw - INCH);",
                "+            position.setLowerLeftY(ph - INCH);",
                "+            position.setUpperRightX(pw - 2 * INCH);",
                "+            position.setUpperRightY(ph - 2 * INCH);",
                "+            polygon.setRectangle(position);",
                "+            polygon.setColor(blue);",
                "+            polygon.setInteriorColor(green);",
                "+            float[] vertices = { pw - INCH,        ph - 2 * INCH, ",
                "+                                 pw - 1.5f * INCH, ph - INCH, ",
                "+                                 pw - 2 * INCH,    ph - 2 * INCH };            ",
                "+            polygon.setVertices(vertices);",
                "+            polygon.setBorderStyle(borderThick);",
                "+            polygon.setContents(\"Polygon annotation\");",
                "+            annotations.add(polygon);",
                "+",
                "+",
                "             // add the \"Helv\" font to the default resources",
                "@@ -285,3 +304,3 @@ public final class AddAnnotations",
                "             dr.put(COSName.getPDFName(\"Helv\"), PDType1Font.HELVETICA);",
                "-            ",
                "+",
                "             // Create the appearance streams."
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/AddAnnotations.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4259": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "80f293a66998f2d154e664235ecd5506849b1d0d"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4259",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6da59cd67d243eaed2ca2fc0ac0d73953ebbac27",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528139986,
            "hunks": 5,
            "message": "PDFBOX-3353: don't rotate non angled styles git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832887 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "index 96c3f4c6a..bf6d65593 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "@@ -126,7 +126,5 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-            // do a transform so that first \"arm\" is imagined flat, like in line handler",
                "-            // the alternative would be to apply the transform to the LE shapes directly,",
                "-            // which would be more work and produce code difficult to understand",
                "-            // paint the styles here and after line(s) draw, to avoid line crossing a filled shape",
                "+            // paint the styles here and after line(s) draw, to avoid line crossing a filled shape       ",
                "             if (\"FreeTextCallout\".equals(annotation.getIntent())",
                "+                    // check only needed to avoid q cm Q if LE_NONE",
                "                     && !LE_NONE.equals(annotation.getLineEndingStyle())",
                "@@ -134,3 +132,2 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             {",
                "-                // check only needed to avoid q cm Q if LE_NONE",
                "                 float x2 = pathsArray[2];",
                "@@ -139,5 +136,17 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 float y1 = pathsArray[1];",
                "-                double angle = Math.atan2(y2 - y1, x2 - x1);",
                "                 cs.saveGraphicsState();",
                "-                cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "+                if (ANGLED_STYLES.contains(annotation.getLineEndingStyle()))",
                "+                {",
                "+                    // do a transform so that first \"arm\" is imagined flat,",
                "+                    // like in line handler.",
                "+                    // The alternative would be to apply the transform to the ",
                "+                    // LE shape coordinates directly, which would be more work ",
                "+                    // and produce code difficult to understand",
                "+                    double angle = Math.atan2(y2 - y1, x2 - x1);",
                "+                    cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "+                }",
                "+                else",
                "+                {",
                "+                    cs.transform(Matrix.getTranslateInstance(x1, y1));",
                "+                }",
                "                 drawStyle(annotation.getLineEndingStyle(), cs, 0, 0, ab.width, hasStroke, hasBackground);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "fcfb4c8f116f3b720471490472b740d6e085f544"
                ],
                [
                    "no-tag",
                    "5f68cb39b2d541ab7e76aff63bb0f5bf9e818de2"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "23b99ef8938f828abc66bb1bf297124da981edbe",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528477650,
            "hunks": 17,
            "message": "PDFBOX-3353: support /Circle and /Insert; use the Adobe width for /Note; draw circle counterclockwise git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833197 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "index 83a00d9cb..7f80bdcdf 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "@@ -367,3 +367,3 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "     /**",
                "-     * Add a circle shape to the path.",
                "+     * Add a circle shape to the path in clockwise direction.",
                "      *",
                "@@ -374,3 +374,3 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "      * ",
                "-     * @throws IOException If the content stream could not be written",
                "+     * @throws IOException If the content stream could not be written.",
                "      */",
                "@@ -388,2 +388,25 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "+    /**",
                "+     * Add a circle shape to the path in counterclockwise direction. You'll need this e.g. when",
                "+     * drawing a doughnut shape. See \"Nonzero Winding Number Rule\" for more information.",
                "+     *",
                "+     * @param cs Content stream",
                "+     * @param x",
                "+     * @param y",
                "+     * @param r Radius",
                "+     *",
                "+     * @throws IOException If the content stream could not be written.",
                "+     */",
                "+    void addCircle2(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "+    {",
                "+        // http://stackoverflow.com/a/2007782/535646",
                "+        float magic = r * 0.551784f;",
                "+        cs.moveTo(x, y + r);",
                "+        cs.curveTo(x - magic, y + r, x - r, y + magic, x - r, y);",
                "+        cs.curveTo(x - r, y - magic, x - magic, y - r, x, y - r);",
                "+        cs.curveTo(x + magic, y - r, x + r, y - magic, x + r, y);",
                "+        cs.curveTo(x + r, y + magic, x + magic, y + r, x, y + r);",
                "+        cs.closePath();",
                "+    }",
                "+",
                "     private static Set<String> createShortStyles()",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index b76e2e372..a4d003c6c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -22,5 +22,7 @@ import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                " import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                "+import org.apache.pdfbox.pdmodel.graphics.blend.BlendMode;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
                "+import org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
                "@@ -51,5 +53,7 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         PDAnnotationText annotation = (PDAnnotationText) getAnnotation();",
                "-        if (!PDAnnotationText.NAME_NOTE.equals(annotation.getName()))",
                "+        if (!PDAnnotationText.NAME_NOTE.equals(annotation.getName()) &&",
                "+                !PDAnnotationText.NAME_INSERT.equals(annotation.getName()) &&",
                "+                !\"Circle\".equals(annotation.getName()))",
                "         {",
                "-            //TODO Comment, Key, Help, NewParagraph, Paragraph, Insert",
                "+            //TODO Comment, Key, Help, NewParagraph, Paragraph",
                "             return;",
                "@@ -59,11 +63,19 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         {",
                "-            boolean hasBackground = contentStream.setNonStrokingColorOnDemand(getColor());",
                "+            PDColor bgColor = getColor();",
                "+            if (bgColor == null)",
                "+            {",
                "+                // White is used by Adobe when /C entry is missing",
                "+                contentStream.setNonStrokingColor(1f);",
                "+            }",
                "+            else",
                "+            {",
                "+                contentStream.setNonStrokingColor(bgColor);",
                "+            }",
                "+            // stroking color is always black which is the PDF default",
                "+",
                "             setOpacity(contentStream, annotation.getConstantOpacity());",
                "-            //TODO find out what Adobe chooses if color is missing",
                "-",
                "             PDRectangle rect = getRectangle();",
                "-            PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "             PDRectangle bbox = rect.createRetranslatedRectangle();",
                "-            appearanceStream.setBBox(bbox);",
                "+            annotation.getNormalAppearanceStream().setBBox(bbox);",
                "@@ -72,3 +84,9 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 case PDAnnotationText.NAME_NOTE:",
                "-                    drawNote(contentStream, bbox, hasBackground);",
                "+                    drawNote(contentStream, bbox);",
                "+                    break;",
                "+                case \"Circle\": //TODO constant",
                "+                    drawCircles(contentStream, bbox);",
                "+                    break;",
                "+                case PDAnnotationText.NAME_INSERT:",
                "+                    drawInsert(contentStream, bbox);",
                "                     break;",
                "@@ -78,3 +96,2 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             }",
                "-",
                "         }",
                "@@ -84,10 +101,10 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         }",
                "-",
                "     }",
                "-    private void drawNote(final PDAppearanceContentStream contentStream, PDRectangle bbox, boolean hasBackground)",
                "+    private void drawNote(final PDAppearanceContentStream contentStream, PDRectangle bbox)",
                "             throws IOException",
                "     {",
                "-        contentStream.setLineJoinStyle(1); // round edge",
                "-        contentStream.addRect(1, 1, bbox.getWidth() - 2,  bbox.getHeight() - 2);",
                "+        contentStream.setLineJoinStyle(1); // get round edge the easy way",
                "+        contentStream.setLineWidth(0.61f); // value from Adobe",
                "+        contentStream.addRect(1, 1, bbox.getWidth() - 2, bbox.getHeight() - 2);",
                "         contentStream.moveTo(bbox.getWidth() / 4,         bbox.getHeight() / 7 * 2);",
                "@@ -100,3 +117,54 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         contentStream.lineTo(bbox.getWidth() * 3 / 4 - 1, bbox.getHeight() / 7 * 5);",
                "-        contentStream.drawShape(1, true, hasBackground);",
                "+        contentStream.fillAndStroke();",
                "+    }",
                "+",
                "+    private void drawCircles(final PDAppearanceContentStream contentStream, PDRectangle bbox)",
                "+            throws IOException",
                "+    {",
                "+        // strategy used by Adobe:",
                "+        // 1) add small circle in white using /ca /CA 0.6 and width 1",
                "+        // 2) fill",
                "+        // 3) add small circle in one direction",
                "+        // 4) add large circle in other direction",
                "+        // 5) stroke + fill",
                "+        // with square width 20 small r = 6.36, large r = 9.756",
                "+",
                "+        // should be a square, but who knows...",
                "+        float min = Math.min(bbox.getWidth(), bbox.getHeight());",
                "+        float smallR = min / 20 * 6.36f;",
                "+        float largeR = min / 20 * 9.756f;",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(1);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.saveGraphicsState();",
                "+        contentStream.setLineWidth(1);",
                "+        PDExtendedGraphicsState gs = new PDExtendedGraphicsState();",
                "+        gs.setAlphaSourceFlag(false);",
                "+        gs.setStrokingAlphaConstant(0.6f);",
                "+        gs.setNonStrokingAlphaConstant(0.6f);",
                "+        gs.setBlendMode(BlendMode.NORMAL);",
                "+        contentStream.setGraphicsStateParameters(gs);",
                "+        contentStream.setNonStrokingColor(1f);",
                "+        addCircle(contentStream, bbox.getWidth() / 2, bbox.getHeight() / 2, smallR);",
                "+        contentStream.fill();",
                "+        contentStream.restoreGraphicsState();",
                "+",
                "+        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+        addCircle(contentStream, bbox.getWidth() / 2, bbox.getHeight() / 2, smallR);",
                "+        addCircle2(contentStream, bbox.getWidth() / 2, bbox.getHeight() / 2, largeR);",
                "+        contentStream.fillAndStroke();",
                "+    }",
                "+",
                "+    private void drawInsert(final PDAppearanceContentStream contentStream, PDRectangle bbox)",
                "+            throws IOException",
                "+    {",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(0);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+        contentStream.moveTo(bbox.getWidth() / 2 - 1, bbox.getHeight() - 2);",
                "+        contentStream.lineTo(1, 1);",
                "+        contentStream.lineTo(bbox.getWidth() - 2, 1);",
                "+        contentStream.closeAndFillAndStroke();",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b5ba2d8b9b57d4627dcdd7e28318584be4c44921",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527269612,
            "hunks": 86,
            "message": "PDFBOX-3353: remove unneeded \"try\" level git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832257 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "index b6edaf311..b9968a4ac 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "@@ -57,30 +57,27 @@ public class PDCaretAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        try",
                "+        PDAnnotationCaret annotation = (PDAnnotationCaret) getAnnotation();",
                "+        try (PDAppearanceContentStream contentStream = getNormalAppearanceAsContentStream())",
                "         {",
                "-            PDAnnotationCaret annotation = (PDAnnotationCaret) getAnnotation();",
                "-            try (PDAppearanceContentStream contentStream = getNormalAppearanceAsContentStream())",
                "-            {",
                "-                contentStream.setStrokingColor(getColor());",
                "-                contentStream.setNonStrokingColor(getColor());",
                "-                ",
                "-                setOpacity(contentStream, annotation.getConstantOpacity());",
                "+            contentStream.setStrokingColor(getColor());",
                "+            contentStream.setNonStrokingColor(getColor());",
                "-                PDRectangle rect = getRectangle();",
                "-                PDRectangle bbox = new PDRectangle(rect.getWidth(), rect.getHeight());",
                "-                annotation.getNormalAppearanceStream().setBBox(bbox);",
                "+            setOpacity(contentStream, annotation.getConstantOpacity());",
                "-                float halfX = rect.getWidth() / 2;",
                "-                float halfY = rect.getHeight() / 2;",
                "-                contentStream.moveTo(0, 0);",
                "-                contentStream.curveTo(halfX, 0,",
                "-                                      halfX, halfY, ",
                "-                                      halfX, rect.getHeight());",
                "-                contentStream.curveTo(halfX, halfY, ",
                "-                                      halfX, 0,",
                "-                                      rect.getWidth(), 0);",
                "-                contentStream.closePath();",
                "-                contentStream.fill();",
                "-                // Adobe has an additional stroke, but it has no effect",
                "-                // because fill \"consumes\" the path.",
                "-            }",
                "+            PDRectangle rect = getRectangle();",
                "+            PDRectangle bbox = new PDRectangle(rect.getWidth(), rect.getHeight());",
                "+            annotation.getNormalAppearanceStream().setBBox(bbox);",
                "+",
                "+            float halfX = rect.getWidth() / 2;",
                "+            float halfY = rect.getHeight() / 2;",
                "+            contentStream.moveTo(0, 0);",
                "+            contentStream.curveTo(halfX, 0,",
                "+                                  halfX, halfY, ",
                "+                                  halfX, rect.getHeight());",
                "+            contentStream.curveTo(halfX, halfY, ",
                "+                                  halfX, 0,",
                "+                                  rect.getWidth(), 0);",
                "+            contentStream.closePath();",
                "+            contentStream.fill();",
                "+            // Adobe has an additional stroke, but it has no effect",
                "+            // because fill \"consumes\" the path.",
                "         }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "index 9263be6eb..42e73cd6c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "@@ -58,66 +58,63 @@ public class PDCircleAppearanceHandler extends PDAbstractAppearanceHandler",
                "         float lineWidth = getLineWidth();",
                "-        try",
                "+        PDAnnotationCircle annotation = (PDAnnotationCircle) getAnnotation();",
                "+        try (PDAppearanceContentStream contentStream = getNormalAppearanceAsContentStream())",
                "         {",
                "-            PDAnnotationCircle annotation = (PDAnnotationCircle) getAnnotation();",
                "-            try (PDAppearanceContentStream contentStream = getNormalAppearanceAsContentStream())",
                "+            boolean hasStroke = contentStream.setStrokingColorOnDemand(getColor());",
                "+            boolean hasBackground = contentStream",
                "+                    .setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "+",
                "+            setOpacity(contentStream, annotation.getConstantOpacity());",
                "+",
                "+            contentStream.setBorderLine(lineWidth, annotation.getBorderStyle());",
                "+            PDBorderEffectDictionary borderEffect = annotation.getBorderEffect();",
                "+",
                "+            // Acrobat applies a padding to each side of the bbox so the line is completely within",
                "+            // the bbox.",
                "+            // TODO: Needs validation for Circles as Adobe Reader seems to extend the bbox bei the rect differenve",
                "+            // for circle annotations.",
                "+            PDRectangle bbox = getRectangle();",
                "+            PDRectangle borderEdge = getPaddedRectangle(bbox,lineWidth/2);",
                "+",
                "+            if (borderEffect != null && borderEffect.getStyle().equals(PDBorderEffectDictionary.STYLE_CLOUDY))",
                "             {",
                "-                boolean hasStroke = contentStream.setStrokingColorOnDemand(getColor());",
                "-                boolean hasBackground = contentStream",
                "-                        .setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "-                ",
                "-                setOpacity(contentStream, annotation.getConstantOpacity());",
                "-                ",
                "-                contentStream.setBorderLine(lineWidth, annotation.getBorderStyle());",
                "-                PDBorderEffectDictionary borderEffect = annotation.getBorderEffect();",
                "-                ",
                "-                // Acrobat applies a padding to each side of the bbox so the line is completely within",
                "-                // the bbox.",
                "-                // TODO: Needs validation for Circles as Adobe Reader seems to extend the bbox bei the rect differenve",
                "-                // for circle annotations.",
                "-                PDRectangle bbox = getRectangle();",
                "-                PDRectangle borderEdge = getPaddedRectangle(bbox,lineWidth/2);",
                "-                ",
                "-                if (borderEffect != null && borderEffect.getStyle().equals(PDBorderEffectDictionary.STYLE_CLOUDY))",
                "-                {",
                "-                    CloudyBorder cloudyBorder = new CloudyBorder(contentStream,",
                "-                        borderEffect.getIntensity(), lineWidth, getRectangle());",
                "-                    cloudyBorder.createCloudyEllipse(annotation.getRectDifference());",
                "-                    annotation.setRectangle(cloudyBorder.getRectangle());",
                "-                    annotation.setRectDifference(cloudyBorder.getRectDifference());",
                "-                    PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "-                    appearanceStream.setBBox(cloudyBorder.getBBox());",
                "-                    appearanceStream.setMatrix(cloudyBorder.getMatrix());",
                "-                }",
                "-                else",
                "-                {",
                "-                    // the differences rectangle",
                "-                    setRectDifference(lineWidth);",
                "-                    ",
                "-                    // lower left corner",
                "-                    float x0 = borderEdge.getLowerLeftX();",
                "-                    float y0 = borderEdge.getLowerLeftY();",
                "-                    // upper right corner",
                "-                    float x1 = borderEdge.getUpperRightX();",
                "-                    float y1 = borderEdge.getUpperRightY();",
                "-                    // mid points",
                "-                    float xm = x0 + borderEdge.getWidth() / 2;",
                "-                    float ym = y0 + borderEdge.getHeight() / 2;",
                "-                    // see http://spencermortensen.com/articles/bezier-circle/",
                "-                    // the below number was calculated from sampling content streams",
                "-                    // generated using Adobe Reader",
                "-                    float magic = 0.55555417f;",
                "-                    // control point offsets",
                "-                    float vOffset = borderEdge.getHeight() / 2 * magic;",
                "-                    float hOffset = borderEdge.getWidth() / 2 * magic;",
                "-                    ",
                "-                    contentStream.moveTo(xm, y1);",
                "-                    contentStream.curveTo((xm + hOffset), y1, x1, (ym + vOffset), x1, ym);",
                "-                    contentStream.curveTo(x1, (ym - vOffset), (xm + hOffset), y0, xm, y0);",
                "-                    contentStream.curveTo((xm - hOffset), y0, x0, (ym - vOffset), x0, ym);",
                "-                    contentStream.curveTo(x0, (ym + vOffset), (xm - hOffset), y1, xm, y1);",
                "-                    contentStream.closePath();",
                "-                }",
                "-                ",
                "-                contentStream.drawShape(lineWidth, hasStroke, hasBackground);",
                "+                CloudyBorder cloudyBorder = new CloudyBorder(contentStream,",
                "+                    borderEffect.getIntensity(), lineWidth, getRectangle());",
                "+                cloudyBorder.createCloudyEllipse(annotation.getRectDifference());",
                "+                annotation.setRectangle(cloudyBorder.getRectangle());",
                "+                annotation.setRectDifference(cloudyBorder.getRectDifference());",
                "+                PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "+                appearanceStream.setBBox(cloudyBorder.getBBox());",
                "+                appearanceStream.setMatrix(cloudyBorder.getMatrix());",
                "             }",
                "+            else",
                "+            {",
                "+                // the differences rectangle",
                "+                setRectDifference(lineWidth);",
                "+",
                "+                // lower left corner",
                "+                float x0 = borderEdge.getLowerLeftX();",
                "+                float y0 = borderEdge.getLowerLeftY();",
                "+                // upper right corner",
                "+                float x1 = borderEdge.getUpperRightX();",
                "+                float y1 = borderEdge.getUpperRightY();",
                "+                // mid points",
                "+                float xm = x0 + borderEdge.getWidth() / 2;",
                "+                float ym = y0 + borderEdge.getHeight() / 2;",
                "+                // see http://spencermortensen.com/articles/bezier-circle/",
                "+                // the below number was calculated from sampling content streams",
                "+                // generated using Adobe Reader",
                "+                float magic = 0.55555417f;",
                "+                // control point offsets",
                "+                float vOffset = borderEdge.getHeight() / 2 * magic;",
                "+                float hOffset = borderEdge.getWidth() / 2 * magic;",
                "+",
                "+                contentStream.moveTo(xm, y1);",
                "+                contentStream.curveTo((xm + hOffset), y1, x1, (ym + vOffset), x1, ym);",
                "+                contentStream.curveTo(x1, (ym - vOffset), (xm + hOffset), y0, xm, y0);",
                "+                contentStream.curveTo((xm - hOffset), y0, x0, (ym - vOffset), x0, ym);",
                "+                contentStream.curveTo(x0, (ym + vOffset), (xm - hOffset), y1, xm, y1);",
                "+                contentStream.closePath();",
                "+            }",
                "+",
                "+            contentStream.drawShape(lineWidth, hasStroke, hasBackground);",
                "         }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java",
                "index 14cd725bf..095a38ad6 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java",
                "@@ -109,104 +109,101 @@ public class PDHighlightAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        try",
                "+        try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "         {",
                "-            try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "+            PDExtendedGraphicsState r0 = new PDExtendedGraphicsState();",
                "+            PDExtendedGraphicsState r1 = new PDExtendedGraphicsState();",
                "+            r0.setAlphaSourceFlag(false);",
                "+            r0.setStrokingAlphaConstant(annotation.getConstantOpacity());",
                "+            r0.setNonStrokingAlphaConstant(annotation.getConstantOpacity());",
                "+            r1.setAlphaSourceFlag(false);",
                "+            r1.setBlendMode(BlendMode.MULTIPLY);",
                "+            cs.setGraphicsStateParameters(r0);",
                "+            cs.setGraphicsStateParameters(r1);",
                "+            //TODO replace with document.getDocument().createCOSStream()",
                "+            //     or call new PDFormXObject(document)",
                "+            PDFormXObject frm1 = new PDFormXObject(new COSStream());",
                "+            PDFormXObject frm2 = new PDFormXObject(new COSStream());",
                "+            frm1.setResources(new PDResources());",
                "+            try (PDFormContentStream mwfofrmCS = new PDFormContentStream(frm1))",
                "             {",
                "-                PDExtendedGraphicsState r0 = new PDExtendedGraphicsState();",
                "-                PDExtendedGraphicsState r1 = new PDExtendedGraphicsState();",
                "-                r0.setAlphaSourceFlag(false);",
                "-                r0.setStrokingAlphaConstant(annotation.getConstantOpacity());",
                "-                r0.setNonStrokingAlphaConstant(annotation.getConstantOpacity());",
                "-                r1.setAlphaSourceFlag(false);",
                "-                r1.setBlendMode(BlendMode.MULTIPLY);",
                "-                cs.setGraphicsStateParameters(r0);",
                "-                cs.setGraphicsStateParameters(r1);",
                "-                //TODO replace with document.getDocument().createCOSStream()",
                "-                //     or call new PDFormXObject(document)",
                "-                PDFormXObject frm1 = new PDFormXObject(new COSStream());",
                "-                PDFormXObject frm2 = new PDFormXObject(new COSStream());",
                "-                frm1.setResources(new PDResources());",
                "-                try (PDFormContentStream mwfofrmCS = new PDFormContentStream(frm1))",
                "-                {",
                "-                    mwfofrmCS.drawForm(frm2);",
                "-                }",
                "-                frm1.setBBox(annotation.getRectangle());",
                "-                COSDictionary groupDict = new COSDictionary();",
                "-                groupDict.setItem(COSName.S, COSName.TRANSPARENCY);",
                "-                //TODO PDFormXObject.setGroup() is missing",
                "-                frm1.getCOSObject().setItem(COSName.GROUP, groupDict);",
                "-                cs.drawForm(frm1);",
                "-                frm2.setBBox(annotation.getRectangle());",
                "-                try (PDFormContentStream frm2CS = new PDFormContentStream(frm2))",
                "+                mwfofrmCS.drawForm(frm2);",
                "+            }",
                "+            frm1.setBBox(annotation.getRectangle());",
                "+            COSDictionary groupDict = new COSDictionary();",
                "+            groupDict.setItem(COSName.S, COSName.TRANSPARENCY);",
                "+            //TODO PDFormXObject.setGroup() is missing",
                "+            frm1.getCOSObject().setItem(COSName.GROUP, groupDict);",
                "+            cs.drawForm(frm1);",
                "+            frm2.setBBox(annotation.getRectangle());",
                "+            try (PDFormContentStream frm2CS = new PDFormContentStream(frm2))",
                "+            {",
                "+                frm2CS.setNonStrokingColor(color);",
                "+                int of = 0;",
                "+                while (of + 7 < pathsArray.length)",
                "                 {",
                "-                    frm2CS.setNonStrokingColor(color);",
                "-                    int of = 0;",
                "-                    while (of + 7 < pathsArray.length)",
                "+                    // quadpoints spec sequence is incorrect, correct one is (4,5 0,1 2,3 6,7)",
                "+                    // https://stackoverflow.com/questions/9855814/pdf-spec-vs-acrobat-creation-quadpoints",
                "+",
                "+                    // for \"curvy\" highlighting, two B\u00c3\u00a9zier control points are used that seem to have a",
                "+                    // distance of about 1/4 of the height.",
                "+                    // note that curves won't appear if outside of the rectangle",
                "+                    float delta = 0;",
                "+                    if (Float.compare(pathsArray[of + 0], pathsArray[of + 4]) == 0 &&",
                "+                        Float.compare(pathsArray[of + 1], pathsArray[of + 3]) == 0 &&",
                "+                        Float.compare(pathsArray[of + 2], pathsArray[of + 6]) == 0 &&",
                "+                        Float.compare(pathsArray[of + 5], pathsArray[of + 7]) == 0)",
                "+                    {",
                "+                        // horizontal highlight",
                "+                        delta = (pathsArray[of + 1] - pathsArray[of + 5]) / 4;",
                "+                    }",
                "+                    else if (Float.compare(pathsArray[of + 1], pathsArray[of + 5]) == 0 &&",
                "+                             Float.compare(pathsArray[of + 0], pathsArray[of + 2]) == 0 &&",
                "+                             Float.compare(pathsArray[of + 3], pathsArray[of + 7]) == 0 &&",
                "+                             Float.compare(pathsArray[of + 4], pathsArray[of + 6]) == 0)",
                "                     {",
                "-                        // quadpoints spec sequence is incorrect, correct one is (4,5 0,1 2,3 6,7)",
                "-                        // https://stackoverflow.com/questions/9855814/pdf-spec-vs-acrobat-creation-quadpoints",
                "-",
                "-                        // for \"curvy\" highlighting, two B\u00c3\u00a9zier control points are used that seem to have a",
                "-                        // distance of about 1/4 of the height.",
                "-                        // note that curves won't appear if outside of the rectangle",
                "-                        float delta = 0;",
                "-                        if (Float.compare(pathsArray[of + 0], pathsArray[of + 4]) == 0 &&",
                "-                            Float.compare(pathsArray[of + 1], pathsArray[of + 3]) == 0 &&",
                "-                            Float.compare(pathsArray[of + 2], pathsArray[of + 6]) == 0 &&",
                "-                            Float.compare(pathsArray[of + 5], pathsArray[of + 7]) == 0)",
                "-                        {",
                "-                            // horizontal highlight",
                "-                            delta = (pathsArray[of + 1] - pathsArray[of + 5]) / 4;",
                "-                        }",
                "-                        else if (Float.compare(pathsArray[of + 1], pathsArray[of + 5]) == 0 &&",
                "-                                 Float.compare(pathsArray[of + 0], pathsArray[of + 2]) == 0 &&",
                "-                                 Float.compare(pathsArray[of + 3], pathsArray[of + 7]) == 0 &&",
                "-                                 Float.compare(pathsArray[of + 4], pathsArray[of + 6]) == 0)",
                "-                        {",
                "-                            // vertical highlight",
                "-                            delta = (pathsArray[of + 0] - pathsArray[of + 4]) / 4;",
                "-                        }",
                "-",
                "-                        frm2CS.moveTo(pathsArray[of + 4], pathsArray[of + 5]);",
                "-",
                "-                        if (Float.compare(pathsArray[of + 0], pathsArray[of + 4]) == 0)",
                "-                        {",
                "-                            // horizontal highlight",
                "-                            frm2CS.curveTo(pathsArray[of + 4] - delta, pathsArray[of + 5] + delta,",
                "-                                           pathsArray[of + 0] - delta, pathsArray[of + 1] - delta,",
                "-                                           pathsArray[of + 0], pathsArray[of + 1]);",
                "-                        }",
                "-                        else if (Float.compare(pathsArray[of + 5], pathsArray[of + 1]) == 0)",
                "-                        {",
                "-                            // vertical highlight",
                "-                            frm2CS.curveTo(pathsArray[of + 4] + delta, pathsArray[of + 5] + delta,",
                "-                                           pathsArray[of + 0] - delta, pathsArray[of + 1] + delta,",
                "-                                           pathsArray[of + 0], pathsArray[of + 1]);",
                "-                        }",
                "-                        else",
                "-                        {",
                "-                            frm2CS.lineTo(pathsArray[of + 0], pathsArray[of + 1]);",
                "-                        }",
                "-                        frm2CS.lineTo(pathsArray[of + 2], pathsArray[of + 3]);",
                "-                        if (Float.compare(pathsArray[of + 2], pathsArray[of + 6]) == 0)",
                "-                        {",
                "-                            // horizontal highlight",
                "-                            frm2CS.curveTo(pathsArray[of + 2] + delta, pathsArray[of + 3] - delta,",
                "-                                           pathsArray[of + 6] + delta, pathsArray[of + 7] + delta,",
                "-                                           pathsArray[of + 6], pathsArray[of + 7]);",
                "-                        }",
                "-                        else if (Float.compare(pathsArray[of + 3], pathsArray[of + 7]) == 0)",
                "-                        {",
                "-                            // vertical highlight",
                "-                            frm2CS.curveTo(pathsArray[of + 2] - delta, pathsArray[of + 3] - delta,",
                "-                                           pathsArray[of + 6] + delta, pathsArray[of + 7] - delta,",
                "-                                           pathsArray[of + 6], pathsArray[of + 7]);",
                "-                        }",
                "-                        else",
                "-                        {",
                "-                            frm2CS.lineTo(pathsArray[of + 6], pathsArray[of + 7]);",
                "-                        }",
                "-",
                "-                        frm2CS.fill();",
                "-                        of += 8;",
                "+                        // vertical highlight",
                "+                        delta = (pathsArray[of + 0] - pathsArray[of + 4]) / 4;",
                "                     }",
                "+",
                "+                    frm2CS.moveTo(pathsArray[of + 4], pathsArray[of + 5]);",
                "+",
                "+                    if (Float.compare(pathsArray[of + 0], pathsArray[of + 4]) == 0)",
                "+                    {",
                "+                        // horizontal highlight",
                "+                        frm2CS.curveTo(pathsArray[of + 4] - delta, pathsArray[of + 5] + delta,",
                "+                                       pathsArray[of + 0] - delta, pathsArray[of + 1] - delta,",
                "+                                       pathsArray[of + 0], pathsArray[of + 1]);",
                "+                    }",
                "+                    else if (Float.compare(pathsArray[of + 5], pathsArray[of + 1]) == 0)",
                "+                    {",
                "+                        // vertical highlight",
                "+                        frm2CS.curveTo(pathsArray[of + 4] + delta, pathsArray[of + 5] + delta,",
                "+                                       pathsArray[of + 0] - delta, pathsArray[of + 1] + delta,",
                "+                                       pathsArray[of + 0], pathsArray[of + 1]);",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        frm2CS.lineTo(pathsArray[of + 0], pathsArray[of + 1]);",
                "+                    }",
                "+                    frm2CS.lineTo(pathsArray[of + 2], pathsArray[of + 3]);",
                "+                    if (Float.compare(pathsArray[of + 2], pathsArray[of + 6]) == 0)",
                "+                    {",
                "+                        // horizontal highlight",
                "+                        frm2CS.curveTo(pathsArray[of + 2] + delta, pathsArray[of + 3] - delta,",
                "+                                       pathsArray[of + 6] + delta, pathsArray[of + 7] + delta,",
                "+                                       pathsArray[of + 6], pathsArray[of + 7]);",
                "+                    }",
                "+                    else if (Float.compare(pathsArray[of + 3], pathsArray[of + 7]) == 0)",
                "+                    {",
                "+                        // vertical highlight",
                "+                        frm2CS.curveTo(pathsArray[of + 2] - delta, pathsArray[of + 3] - delta,",
                "+                                       pathsArray[of + 6] + delta, pathsArray[of + 7] - delta,",
                "+                                       pathsArray[of + 6], pathsArray[of + 7]);",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        frm2CS.lineTo(pathsArray[of + 6], pathsArray[of + 7]);",
                "+                    }",
                "+",
                "+                    frm2CS.fill();",
                "+                    of += 8;",
                "                 }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java",
                "index 3b451e5f7..d5c179254 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java",
                "@@ -59,37 +59,34 @@ public class PDInkAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        try",
                "+        try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "         {",
                "-            try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "+            setOpacity(cs, ink.getConstantOpacity());",
                "+",
                "+            cs.setStrokingColor(color);",
                "+            if (ab.dashArray != null)",
                "             {",
                "-                setOpacity(cs, ink.getConstantOpacity());",
                "+                cs.setLineDashPattern(ab.dashArray, 0);",
                "+            }",
                "+            cs.setLineWidth(ab.width);",
                "-                cs.setStrokingColor(color);",
                "-                if (ab.dashArray != null)",
                "-                {",
                "-                    cs.setLineDashPattern(ab.dashArray, 0);",
                "-                }",
                "-                cs.setLineWidth(ab.width);",
                "+            for (float[] pathArray : ink.getInkList())",
                "+            {",
                "+                int nPoints = pathArray.length / 2;",
                "-                for (float[] pathArray : ink.getInkList())",
                "+                // \"When drawn, the points shall be connected by straight lines or curves ",
                "+                // in an implementation-dependent way\" - we do lines.",
                "+                for (int i = 0; i < nPoints; ++i)",
                "                 {",
                "-                    int nPoints = pathArray.length / 2;",
                "+                    float x = pathArray[i * 2];",
                "+                    float y = pathArray[i * 2 + 1];",
                "-                    // \"When drawn, the points shall be connected by straight lines or curves ",
                "-                    // in an implementation-dependent way\" - we do lines.",
                "-                    for (int i = 0; i < nPoints; ++i)",
                "+                    if (i == 0)",
                "                     {",
                "-                        float x = pathArray[i * 2];",
                "-                        float y = pathArray[i * 2 + 1];",
                "-",
                "-                        if (i == 0)",
                "-                        {",
                "-                            cs.moveTo(x, y);",
                "-                        }",
                "-                        else",
                "-                        {",
                "-                            cs.lineTo(x, y);",
                "-                        }",
                "+                        cs.moveTo(x, y);",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        cs.lineTo(x, y);",
                "                     }",
                "-                    cs.stroke();",
                "                 }",
                "+                cs.stroke();",
                "             }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "index ac6ef2215..00ba5c394 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "@@ -105,127 +105,131 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        try",
                "+        try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "         {",
                "-            try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "+            setOpacity(cs, annotation.getConstantOpacity());",
                "+",
                "+            // Tested with Adobe Reader:",
                "+            // text is written first (TODO)",
                "+            // width 0 is used by Adobe as such (but results in a visible line in rendering)",
                "+            // empty color array results in an invisible line (\"n\" operator) but the rest is visible",
                "+            // empty content is like no caption",
                "+",
                "+            boolean hasStroke = cs.setStrokingColorOnDemand(color);",
                "+",
                "+            if (ab.dashArray != null)",
                "             {",
                "-                setOpacity(cs, annotation.getConstantOpacity());",
                "+                cs.setLineDashPattern(ab.dashArray, 0);",
                "+            }",
                "+            cs.setLineWidth(ab.width);",
                "-                // Tested with Adobe Reader:",
                "-                // text is written first (TODO)",
                "-                // width 0 is used by Adobe as such (but results in a visible line in rendering)",
                "-                // empty color array results in an invisible line (\"n\" operator) but the rest is visible",
                "-                // empty content is like no caption",
                "+            float x1 = pathsArray[0];",
                "+            float y1 = pathsArray[1];",
                "+            float x2 = pathsArray[2];",
                "+            float y2 = pathsArray[3];",
                "-                boolean hasStroke = cs.setStrokingColorOnDemand(color);",
                "+            // if there are leader lines, then the /L coordinates represent",
                "+            // the endpoints of the leader lines rather than the endpoints of the line itself.",
                "+            // so for us, llo + ll is the vertical offset for the line.",
                "+            float y = llo + ll;",
                "-                if (ab.dashArray != null)",
                "+            String contents = annotation.getContents();",
                "+            if (contents == null)",
                "+            {",
                "+                contents = \"\";",
                "+            }",
                "+",
                "+            double angle = Math.atan2(y2 - y1, x2 - x1);",
                "+            cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "+            float lineLength = (float) Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));",
                "+            if (annotation.hasCaption() && !contents.isEmpty())",
                "+            {",
                "+                PDType1Font font = PDType1Font.HELVETICA;",
                "+                // TODO: support newlines!!!!!",
                "+                // see https://www.pdfill.com/example/pdf_commenting_new.pdf",
                "+                float contentLength = 0;",
                "+                try",
                "+                {",
                "+                    contentLength = font.getStringWidth(annotation.getContents()) / 1000 * FONT_SIZE;",
                "+",
                "+                    //TODO How to decide the size of the font?",
                "+                    // 9 seems to be standard, but if the text doesn't fit, a scaling is done",
                "+                    // see AnnotationSample.Standard.pdf, diagonal line",
                "+                }",
                "+                catch (IllegalArgumentException ex)",
                "                 {",
                "-                    cs.setLineDashPattern(ab.dashArray, 0);",
                "+                    // Adobe Reader displays placeholders instead",
                "+                    LOG.error(\"line text '\" + annotation.getContents() + \"' can't be shown\", ex);",
                "                 }",
                "-                cs.setLineWidth(ab.width);",
                "+                float xOffset = (lineLength - contentLength) / 2;",
                "+                float yOffset;",
                "-                float x1 = pathsArray[0];",
                "-                float y1 = pathsArray[1];",
                "-                float x2 = pathsArray[2];",
                "-                float y2 = pathsArray[3];",
                "+                // Leader lines",
                "+                cs.moveTo(0, llo);",
                "+                cs.lineTo(0, llo + ll + lle);",
                "+                cs.moveTo(lineLength, llo);",
                "+                cs.lineTo(lineLength, llo + ll + lle);",
                "-                // if there are leader lines, then the /L coordinates represent",
                "-                // the endpoints of the leader lines rather than the endpoints of the line itself.",
                "-                // so for us, llo + ll is the vertical offset for the line.",
                "-                float y = llo + ll;",
                "+                String captionPositioning = annotation.getCaptionPositioning();",
                "-                String contents = annotation.getContents();",
                "-                if (contents == null)",
                "+                // draw the line horizontally, using the rotation CTM to get to correct final position",
                "+                // that's the easiest way to calculate the positions for the line before and after inline caption",
                "+                if (SHORT_STYLES.contains(annotation.getStartPointEndingStyle()))",
                "                 {",
                "-                    contents = \"\";",
                "+                    cs.moveTo(ab.width, y);",
                "                 }",
                "-",
                "-                double angle = Math.atan2(y2 - y1, x2 - x1);",
                "-                cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "-                float lineLength = (float) Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));",
                "-                if (annotation.hasCaption() && !contents.isEmpty())",
                "+                else",
                "+                {",
                "+                    cs.moveTo(0, y);",
                "+                }",
                "+                if (\"Top\".equals(captionPositioning))",
                "+                {",
                "+                    // this arbitrary number is from Adobe",
                "+                    yOffset = 1.908f;",
                "+                }",
                "+                else",
                "                 {",
                "-                    PDType1Font font = PDType1Font.HELVETICA;",
                "-                    // TODO: support newlines!!!!!",
                "-                    // see https://www.pdfill.com/example/pdf_commenting_new.pdf",
                "-                    float contentLength = 0;",
                "-                    try",
                "-                    {",
                "-                        contentLength = font.getStringWidth(annotation.getContents()) / 1000 * FONT_SIZE;",
                "+                    // Inline",
                "+                    // this arbitrary number is from Adobe",
                "+                    yOffset = -2.6f;",
                "-                        //TODO How to decide the size of the font?",
                "-                        // 9 seems to be standard, but if the text doesn't fit, a scaling is done",
                "-                        // see AnnotationSample.Standard.pdf, diagonal line",
                "-                    }",
                "-                    catch (IllegalArgumentException ex)",
                "-                    {",
                "-                        // Adobe Reader displays placeholders instead",
                "-                        LOG.error(\"line text '\" + annotation.getContents() + \"' can't be shown\", ex);",
                "-                    }",
                "-                    float xOffset = (lineLength - contentLength) / 2;",
                "-                    float yOffset;",
                "-                    ",
                "-                    // Leader lines",
                "-                    cs.moveTo(0, llo);",
                "-                    cs.lineTo(0, llo + ll + lle);",
                "-                    cs.moveTo(lineLength, llo);",
                "-                    cs.lineTo(lineLength, llo + ll + lle);",
                "+                    cs.lineTo(xOffset - ab.width, y);",
                "+                    cs.moveTo(lineLength - xOffset + ab.width, y);",
                "+                }",
                "+                if (SHORT_STYLES.contains(annotation.getEndPointEndingStyle()))",
                "+                {",
                "+                    cs.lineTo(lineLength - ab.width, y);",
                "+                }",
                "+                else",
                "+                {",
                "+                    cs.lineTo(lineLength, y);",
                "+                }",
                "+                cs.drawShape(ab.width, hasStroke, false);",
                "-                    String captionPositioning = annotation.getCaptionPositioning();",
                "+                // /CO entry (caption offset)",
                "+                float captionHorizontalOffset = annotation.getCaptionHorizontalOffset();",
                "+                float captionVerticalOffset = annotation.getCaptionVerticalOffset();",
                "-                    // draw the line horizontally, using the rotation CTM to get to correct final position",
                "-                    // that's the easiest way to calculate the positions for the line before and after inline caption",
                "-                    if (SHORT_STYLES.contains(annotation.getStartPointEndingStyle()))",
                "-                    {",
                "-                        cs.moveTo(ab.width, y);",
                "-                    }",
                "-                    else",
                "-                    {",
                "-                        cs.moveTo(0, y);",
                "-                    }",
                "-                    if (\"Top\".equals(captionPositioning))",
                "-                    {",
                "-                        // this arbitrary number is from Adobe",
                "-                        yOffset = 1.908f;",
                "-                    }",
                "-                    else",
                "-                    {",
                "-                        // Inline",
                "-                        // this arbitrary number is from Adobe",
                "-                        yOffset = -2.6f;",
                "+                // check contentLength so we don't show if there was trouble before",
                "+                if (contentLength > 0)",
                "+                {",
                "+                    cs.beginText();",
                "+                    cs.setFont(font, FONT_SIZE);",
                "+                    cs.newLineAtOffset(xOffset + captionHorizontalOffset, ",
                "+                                       y + yOffset + captionVerticalOffset);",
                "+                    cs.showText(annotation.getContents());",
                "+                    cs.endText();",
                "+                }",
                "-                        cs.lineTo(xOffset - ab.width, y);",
                "-                        cs.moveTo(lineLength - xOffset + ab.width, y);",
                "-                    }",
                "-                    if (SHORT_STYLES.contains(annotation.getEndPointEndingStyle()))",
                "-                    {",
                "-                        cs.lineTo(lineLength - ab.width, y);",
                "-                    }",
                "-                    else",
                "-                    {",
                "-                        cs.lineTo(lineLength, y);",
                "-                    }",
                "+                if (Float.compare(captionVerticalOffset, 0) != 0)",
                "+                {",
                "+                    // Adobe paints vertical bar to the caption",
                "+                    cs.moveTo(0 + lineLength / 2, y);",
                "+                    cs.lineTo(0 + lineLength / 2, y + captionVerticalOffset);",
                "                     cs.drawShape(ab.width, hasStroke, false);",
                "-",
                "-                    // /CO entry (caption offset)",
                "-                    float captionHorizontalOffset = annotation.getCaptionHorizontalOffset();",
                "-                    float captionVerticalOffset = annotation.getCaptionVerticalOffset();",
                "-",
                "-                    // check contentLength so we don't show if there was trouble before",
                "-                    if (contentLength > 0)",
                "-                    {",
                "-                        cs.beginText();",
                "-                        cs.setFont(font, FONT_SIZE);",
                "-                        cs.newLineAtOffset(xOffset + captionHorizontalOffset, ",
                "-                                           y + yOffset + captionVerticalOffset);",
                "-                        cs.showText(annotation.getContents());",
                "-                        cs.endText();",
                "-                    }",
                "-",
                "-                    if (Float.compare(captionVerticalOffset, 0) != 0)",
                "-                    {",
                "-                        // Adobe paints vertical bar to the caption",
                "-                        cs.moveTo(0 + lineLength / 2, y);",
                "-                        cs.lineTo(0 + lineLength / 2, y + captionVerticalOffset);",
                "-                        cs.drawShape(ab.width, hasStroke, false);",
                "-                    }",
                "+                }",
                "+            }",
                "+            else",
                "+            {",
                "+                if (SHORT_STYLES.contains(annotation.getStartPointEndingStyle()))",
                "+                {",
                "+                    cs.moveTo(ab.width, y);",
                "                 }",
                "@@ -233,27 +237,20 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 {",
                "-                    if (SHORT_STYLES.contains(annotation.getStartPointEndingStyle()))",
                "-                    {",
                "-                        cs.moveTo(ab.width, y);",
                "-                    }",
                "-                    else",
                "-                    {",
                "-                        cs.moveTo(0, y);",
                "-                    }",
                "-                    if (SHORT_STYLES.contains(annotation.getEndPointEndingStyle()))",
                "-                    {",
                "-                        cs.lineTo(lineLength - ab.width, y);",
                "-                    }",
                "-                    else",
                "-                    {",
                "-                        cs.lineTo(lineLength, y);",
                "-                    }",
                "-                    cs.drawShape(ab.width, hasStroke, false);",
                "+                    cs.moveTo(0, y);",
                "                 }",
                "-",
                "-                // paint the styles here and not before showing the text, or the text would appear",
                "-                // with the interior color",
                "-                boolean hasBackground = cs.setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "-                drawStyle(annotation.getStartPointEndingStyle(), cs, 0, y, ab.width, hasStroke, hasBackground);",
                "-                drawStyle(annotation.getEndPointEndingStyle(), cs, lineLength, y, ab.width, hasStroke, hasBackground);",
                "+                if (SHORT_STYLES.contains(annotation.getEndPointEndingStyle()))",
                "+                {",
                "+                    cs.lineTo(lineLength - ab.width, y);",
                "+                }",
                "+                else",
                "+                {",
                "+                    cs.lineTo(lineLength, y);",
                "+                }",
                "+                cs.drawShape(ab.width, hasStroke, false);",
                "             }",
                "+",
                "+            // paint the styles here and not before showing the text, or the text would appear",
                "+            // with the interior color",
                "+            boolean hasBackground = cs.setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "+            drawStyle(annotation.getStartPointEndingStyle(), cs, 0, y, ab.width, hasStroke, hasBackground);",
                "+            drawStyle(annotation.getEndPointEndingStyle(), cs, lineLength, y, ab.width, hasStroke, hasBackground);",
                "         }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java",
                "index 95d6bcfeb..37fe5eb52 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java",
                "@@ -67,91 +67,88 @@ public class PDLinkAppearanceHandler extends PDAbstractAppearanceHandler",
                "         float lineWidth = getLineWidth();",
                "-        try",
                "+        try (PDAppearanceContentStream contentStream = getNormalAppearanceAsContentStream())",
                "         {",
                "-            try (PDAppearanceContentStream contentStream = getNormalAppearanceAsContentStream())",
                "+            PDColor color = annotation.getColor();",
                "+            if (color == null)",
                "             {",
                "-                PDColor color = annotation.getColor();",
                "-                if (color == null)",
                "-                {",
                "-                    // spec is unclear, but black is what Adobe does",
                "-                    color = new PDColor(new float[] { 0 }, PDDeviceGray.INSTANCE);",
                "-                }",
                "-                boolean hasStroke = contentStream.setStrokingColorOnDemand(color);",
                "+                // spec is unclear, but black is what Adobe does",
                "+                color = new PDColor(new float[] { 0 }, PDDeviceGray.INSTANCE);",
                "+            }",
                "+            boolean hasStroke = contentStream.setStrokingColorOnDemand(color);",
                "-                contentStream.setBorderLine(lineWidth, annotation.getBorderStyle());",
                "-                //TODO find better way to do this. Either pass border array to",
                "-                // setBorderLine(), or use AnnotationBorder class",
                "-                if (annotation.getBorderStyle() == null)",
                "+            contentStream.setBorderLine(lineWidth, annotation.getBorderStyle());",
                "+            //TODO find better way to do this. Either pass border array to",
                "+            // setBorderLine(), or use AnnotationBorder class",
                "+            if (annotation.getBorderStyle() == null)",
                "+            {",
                "+                COSArray border = annotation.getBorder();",
                "+                if (border.size() > 3 && border.getObject(3) instanceof COSArray)",
                "                 {",
                "-                    COSArray border = annotation.getBorder();",
                "-                    if (border.size() > 3 && border.getObject(3) instanceof COSArray)",
                "-                    {",
                "-                        contentStream.setLineDashPattern(((COSArray) border.getObject(3)).toFloatArray(), 0);",
                "-                    }",
                "+                    contentStream.setLineDashPattern(((COSArray) border.getObject(3)).toFloatArray(), 0);",
                "                 }",
                "+            }",
                "+",
                "+            // the differences rectangle",
                "+            // TODO: this only works for border effect solid. Cloudy needs a different approach.",
                "+            setRectDifference(lineWidth);",
                "-                // the differences rectangle",
                "-                // TODO: this only works for border effect solid. Cloudy needs a different approach.",
                "-                setRectDifference(lineWidth);",
                "-                ",
                "-                // Acrobat applies a padding to each side of the bbox so the line is completely within",
                "-                // the bbox.",
                "-                PDRectangle borderEdge = getPaddedRectangle(getRectangle(),lineWidth/2);",
                "+            // Acrobat applies a padding to each side of the bbox so the line is completely within",
                "+            // the bbox.",
                "+            PDRectangle borderEdge = getPaddedRectangle(getRectangle(),lineWidth/2);",
                "-                float[] pathsArray = annotation.getQuadPoints();",
                "+            float[] pathsArray = annotation.getQuadPoints();",
                "-                if (pathsArray != null)",
                "+            if (pathsArray != null)",
                "+            {",
                "+                // QuadPoints shall be ignored if any coordinate in the array lies outside",
                "+                // the region specified by Rect.",
                "+                PDRectangle rect = annotation.getRectangle();",
                "+                for (int i = 0; i < pathsArray.length / 2; ++i)",
                "                 {",
                "-                    // QuadPoints shall be ignored if any coordinate in the array lies outside",
                "-                    // the region specified by Rect.",
                "-                    PDRectangle rect = annotation.getRectangle();",
                "-                    for (int i = 0; i < pathsArray.length / 2; ++i)",
                "+                    if (!rect.contains(pathsArray[i * 2], pathsArray[i * 2 + 1]))",
                "                     {",
                "-                        if (!rect.contains(pathsArray[i * 2], pathsArray[i * 2 + 1]))",
                "-                        {",
                "-                            LOG.warn(\"At least one /QuadPoints entry (\" + ",
                "-                                    pathsArray[i * 2] + \";\" + pathsArray[i * 2 + 1] + ",
                "-                                    \") is outside of rectangle, \" + rect + ",
                "-                                    \", /QuadPoints are ignored and /Rect is used instead\");",
                "-                            pathsArray = null;",
                "-                            break;",
                "-                        }",
                "+                        LOG.warn(\"At least one /QuadPoints entry (\" + ",
                "+                                pathsArray[i * 2] + \";\" + pathsArray[i * 2 + 1] + ",
                "+                                \") is outside of rectangle, \" + rect + ",
                "+                                \", /QuadPoints are ignored and /Rect is used instead\");",
                "+                        pathsArray = null;",
                "+                        break;",
                "                     }",
                "                 }",
                "+            }",
                "-                if (pathsArray == null)",
                "+            if (pathsArray == null)",
                "+            {",
                "+                // Convert rectangle coordinates as if it was a /QuadPoints entry",
                "+                pathsArray = new float[8];",
                "+                pathsArray[0] = borderEdge.getLowerLeftX();",
                "+                pathsArray[1] = borderEdge.getLowerLeftY();",
                "+                pathsArray[2] = borderEdge.getUpperRightX();",
                "+                pathsArray[3] = borderEdge.getLowerLeftY();",
                "+                pathsArray[4] = borderEdge.getUpperRightX();",
                "+                pathsArray[5] = borderEdge.getUpperRightY();",
                "+                pathsArray[6] = borderEdge.getLowerLeftX();",
                "+                pathsArray[7] = borderEdge.getUpperRightY();",
                "+            }",
                "+",
                "+            int of = 0;",
                "+            while (of + 7 < pathsArray.length)",
                "+            {",
                "+                if (annotation.getBorderStyle() != null &&",
                "+                    annotation.getBorderStyle().getStyle().equals(PDBorderStyleDictionary.STYLE_UNDERLINE))",
                "                 {",
                "-                    // Convert rectangle coordinates as if it was a /QuadPoints entry",
                "-                    pathsArray = new float[8];",
                "-                    pathsArray[0] = borderEdge.getLowerLeftX();",
                "-                    pathsArray[1] = borderEdge.getLowerLeftY();",
                "-                    pathsArray[2] = borderEdge.getUpperRightX();",
                "-                    pathsArray[3] = borderEdge.getLowerLeftY();",
                "-                    pathsArray[4] = borderEdge.getUpperRightX();",
                "-                    pathsArray[5] = borderEdge.getUpperRightY();",
                "-                    pathsArray[6] = borderEdge.getLowerLeftX();",
                "-                    pathsArray[7] = borderEdge.getUpperRightY();",
                "+                    contentStream.moveTo(pathsArray[of], pathsArray[of + 1]);",
                "+                    contentStream.lineTo(pathsArray[of + 2], pathsArray[of + 3]);",
                "                 }",
                "-",
                "-                int of = 0;",
                "-                while (of + 7 < pathsArray.length)",
                "+                else",
                "                 {",
                "-                    if (annotation.getBorderStyle() != null &&",
                "-                        annotation.getBorderStyle().getStyle().equals(PDBorderStyleDictionary.STYLE_UNDERLINE))",
                "-                    {",
                "-                        contentStream.moveTo(pathsArray[of], pathsArray[of + 1]);",
                "-                        contentStream.lineTo(pathsArray[of + 2], pathsArray[of + 3]);",
                "-                    }",
                "-                    else",
                "-                    {",
                "-                        contentStream.moveTo(pathsArray[of], pathsArray[of + 1]);",
                "-                        contentStream.lineTo(pathsArray[of + 2], pathsArray[of + 3]);",
                "-                        contentStream.lineTo(pathsArray[of + 4], pathsArray[of + 5]);",
                "-                        contentStream.lineTo(pathsArray[of + 6], pathsArray[of + 7]);",
                "-                        contentStream.closePath();",
                "-                    }",
                "-                    of += 8;",
                "+                    contentStream.moveTo(pathsArray[of], pathsArray[of + 1]);",
                "+                    contentStream.lineTo(pathsArray[of + 2], pathsArray[of + 3]);",
                "+                    contentStream.lineTo(pathsArray[of + 4], pathsArray[of + 5]);",
                "+                    contentStream.lineTo(pathsArray[of + 6], pathsArray[of + 7]);",
                "+                    contentStream.closePath();",
                "                 }",
                "-",
                "-                contentStream.drawShape(lineWidth, hasStroke, false);",
                "+                of += 8;",
                "             }",
                "+",
                "+            contentStream.drawShape(lineWidth, hasStroke, false);",
                "         }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "index 87fe22d72..29730a10b 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "@@ -93,65 +93,62 @@ public class PDPolygonAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        try",
                "+        try (PDAppearanceContentStream contentStream = getNormalAppearanceAsContentStream())",
                "         {",
                "-            try (PDAppearanceContentStream contentStream = getNormalAppearanceAsContentStream())",
                "+            boolean hasStroke = contentStream.setStrokingColorOnDemand(getColor());",
                "+",
                "+            boolean hasBackground = contentStream",
                "+                    .setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "+",
                "+            setOpacity(contentStream, annotation.getConstantOpacity());",
                "+",
                "+            contentStream.setBorderLine(lineWidth, annotation.getBorderStyle());",
                "+            //TODO find better way to do this. Either pass border array to",
                "+            // setBorderLine(), or use AnnotationBorder class",
                "+            if (annotation.getBorderStyle() == null)",
                "             {",
                "-                boolean hasStroke = contentStream.setStrokingColorOnDemand(getColor());",
                "+                COSArray border = annotation.getBorder();",
                "+                if (border.size() > 3 && border.getObject(3) instanceof COSArray)",
                "+                {",
                "+                    contentStream.setLineDashPattern(((COSArray) border.getObject(3)).toFloatArray(), 0);",
                "+                }",
                "+            }",
                "-                boolean hasBackground = contentStream",
                "-                        .setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "+            PDBorderEffectDictionary borderEffect = annotation.getBorderEffect();",
                "+            if (borderEffect != null && borderEffect.getStyle().equals(PDBorderEffectDictionary.STYLE_CLOUDY))",
                "+            {",
                "+                CloudyBorder cloudyBorder = new CloudyBorder(contentStream,",
                "+                    borderEffect.getIntensity(), lineWidth, getRectangle());",
                "+                cloudyBorder.createCloudyPolygon(pathArray);",
                "+                annotation.setRectangle(cloudyBorder.getRectangle());",
                "+                PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "+                appearanceStream.setBBox(cloudyBorder.getBBox());",
                "+                appearanceStream.setMatrix(cloudyBorder.getMatrix());",
                "+            }",
                "+            else",
                "+            {",
                "+                // the differences rectangle",
                "+                setRectDifference(lineWidth);",
                "-                setOpacity(contentStream, annotation.getConstantOpacity());",
                "+                // Acrobat applies a padding to each side of the bbox so the line is",
                "+                // completely within the bbox.",
                "-                contentStream.setBorderLine(lineWidth, annotation.getBorderStyle());",
                "-                //TODO find better way to do this. Either pass border array to",
                "-                // setBorderLine(), or use AnnotationBorder class",
                "-                if (annotation.getBorderStyle() == null)",
                "+                for (int i = 0; i < pathArray.length; i++)",
                "                 {",
                "-                    COSArray border = annotation.getBorder();",
                "-                    if (border.size() > 3 && border.getObject(3) instanceof COSArray)",
                "+                    float[] pointsArray = pathArray[i];",
                "+                    // first array shall be of size 2 and specify the moveto operator",
                "+                    if (i == 0 && pointsArray.length == 2)",
                "                     {",
                "-                        contentStream.setLineDashPattern(((COSArray) border.getObject(3)).toFloatArray(), 0);",
                "+                        contentStream.moveTo(pointsArray[0], pointsArray[1]);",
                "                     }",
                "-                }",
                "-                ",
                "-                PDBorderEffectDictionary borderEffect = annotation.getBorderEffect();",
                "-                if (borderEffect != null && borderEffect.getStyle().equals(PDBorderEffectDictionary.STYLE_CLOUDY))",
                "-                {",
                "-                    CloudyBorder cloudyBorder = new CloudyBorder(contentStream,",
                "-                        borderEffect.getIntensity(), lineWidth, getRectangle());",
                "-                    cloudyBorder.createCloudyPolygon(pathArray);",
                "-                    annotation.setRectangle(cloudyBorder.getRectangle());",
                "-                    PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "-                    appearanceStream.setBBox(cloudyBorder.getBBox());",
                "-                    appearanceStream.setMatrix(cloudyBorder.getMatrix());",
                "-                }",
                "-                else",
                "-                {",
                "-                    // the differences rectangle",
                "-                    setRectDifference(lineWidth);",
                "-    ",
                "-                    // Acrobat applies a padding to each side of the bbox so the line is",
                "-                    // completely within the bbox.",
                "-    ",
                "-                    for (int i = 0; i < pathArray.length; i++)",
                "+                    else",
                "                     {",
                "-                        float[] pointsArray = pathArray[i];",
                "-                        // first array shall be of size 2 and specify the moveto operator",
                "-                        if (i == 0 && pointsArray.length == 2)",
                "+                        // entries of length 2 shall be treated as lineto operator",
                "+                        if (pointsArray.length == 2)",
                "                         {",
                "-                            contentStream.moveTo(pointsArray[0], pointsArray[1]);",
                "+                            contentStream.lineTo(pointsArray[0], pointsArray[1]);",
                "                         }",
                "-                        else",
                "+                        else if (pointsArray.length == 6)",
                "                         {",
                "-                            // entries of length 2 shall be treated as lineto operator",
                "-                            if (pointsArray.length == 2)",
                "-                            {",
                "-                                contentStream.lineTo(pointsArray[0], pointsArray[1]);",
                "-                            }",
                "-                            else if (pointsArray.length == 6)",
                "-                            {",
                "-                                contentStream.curveTo(pointsArray[0], pointsArray[1],",
                "-                                        pointsArray[2], pointsArray[3],",
                "-                                        pointsArray[4], pointsArray[5]);",
                "-                            }",
                "+                            contentStream.curveTo(pointsArray[0], pointsArray[1],",
                "+                                    pointsArray[2], pointsArray[3],",
                "+                                    pointsArray[4], pointsArray[5]);",
                "                         }",
                "@@ -159,4 +156,4 @@ public class PDPolygonAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 }",
                "-                contentStream.drawShape(lineWidth, hasStroke, hasBackground);",
                "             }",
                "+            contentStream.drawShape(lineWidth, hasStroke, hasBackground);",
                "         }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "index d9ae0fbe8..cba698cd4 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "@@ -95,90 +95,87 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        try",
                "+        try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "         {",
                "-            try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "-            {",
                "-                boolean hasBackground = cs.setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "-                setOpacity(cs, annotation.getConstantOpacity());",
                "-                boolean hasStroke = cs.setStrokingColorOnDemand(color);",
                "+            boolean hasBackground = cs.setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "+            setOpacity(cs, annotation.getConstantOpacity());",
                "+            boolean hasStroke = cs.setStrokingColorOnDemand(color);",
                "-                if (ab.dashArray != null)",
                "-                {",
                "-                    cs.setLineDashPattern(ab.dashArray, 0);",
                "-                }",
                "-                cs.setLineWidth(ab.width);",
                "+            if (ab.dashArray != null)",
                "+            {",
                "+                cs.setLineDashPattern(ab.dashArray, 0);",
                "+            }",
                "+            cs.setLineWidth(ab.width);",
                "-                for (int i = 0; i < pathsArray.length / 2; ++i)",
                "+            for (int i = 0; i < pathsArray.length / 2; ++i)",
                "+            {",
                "+                float x = pathsArray[i * 2];",
                "+                float y = pathsArray[i * 2 + 1];",
                "+                if (i == 0)",
                "                 {",
                "-                    float x = pathsArray[i * 2];",
                "-                    float y = pathsArray[i * 2 + 1];",
                "-                    if (i == 0)",
                "+                    if (SHORT_STYLES.contains(annotation.getStartPointEndingStyle()))",
                "                     {",
                "-                        if (SHORT_STYLES.contains(annotation.getStartPointEndingStyle()))",
                "+                        // modify coordinate to shorten the segment",
                "+                        // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "+                        float x1 = pathsArray[2];",
                "+                        float y1 = pathsArray[3];",
                "+                        float len = (float) (Math.sqrt(Math.pow(x - x1, 2) + Math.pow(y - y1, 2)));",
                "+                        if (Float.compare(len, 0) != 0)",
                "                         {",
                "-                            // modify coordinate to shorten the segment",
                "-                            // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "-                            float x1 = pathsArray[2];",
                "-                            float y1 = pathsArray[3];",
                "-                            float len = (float) (Math.sqrt(Math.pow(x - x1, 2) + Math.pow(y - y1, 2)));",
                "-                            if (Float.compare(len, 0) != 0)",
                "-                            {",
                "-                                x += (x1 - x) / len * ab.width;",
                "-                                y += (y1 - y) / len * ab.width;",
                "-                            }",
                "+                            x += (x1 - x) / len * ab.width;",
                "+                            y += (y1 - y) / len * ab.width;",
                "                         }",
                "-                        cs.moveTo(x, y);",
                "                     }",
                "-                    else",
                "+                    cs.moveTo(x, y);",
                "+                }",
                "+                else",
                "+                {",
                "+                    if (i == pathsArray.length / 2 - 1 &&",
                "+                        SHORT_STYLES.contains(annotation.getEndPointEndingStyle()))",
                "                     {",
                "-                        if (i == pathsArray.length / 2 - 1 &&",
                "-                            SHORT_STYLES.contains(annotation.getEndPointEndingStyle()))",
                "+                        // modify coordinate to shorten the segment",
                "+                        // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "+                        float x0 = pathsArray[pathsArray.length - 4];",
                "+                        float y0 = pathsArray[pathsArray.length - 3];",
                "+                        float len = (float) (Math.sqrt(Math.pow(x0 - x, 2) + Math.pow(y0 - y, 2)));",
                "+                        if (Float.compare(len, 0) != 0)",
                "                         {",
                "-                            // modify coordinate to shorten the segment",
                "-                            // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "-                            float x0 = pathsArray[pathsArray.length - 4];",
                "-                            float y0 = pathsArray[pathsArray.length - 3];",
                "-                            float len = (float) (Math.sqrt(Math.pow(x0 - x, 2) + Math.pow(y0 - y, 2)));",
                "-                            if (Float.compare(len, 0) != 0)",
                "-                            {",
                "-                                x -= (x - x0) / len * ab.width;",
                "-                                y -= (y - y0) / len * ab.width;",
                "-                            }",
                "+                            x -= (x - x0) / len * ab.width;",
                "+                            y -= (y - y0) / len * ab.width;",
                "                         }",
                "-                        cs.lineTo(x, y);",
                "                     }",
                "+                    cs.lineTo(x, y);",
                "                 }",
                "-                cs.stroke();",
                "+            }",
                "+            cs.stroke();",
                "-                // do a transform so that first and last \"arms\" are imagined flat, like in line handler",
                "-                // the alternative would be to apply the transform to the LE shapes directly,",
                "-                // which would be more work and produce code difficult to understand",
                "+            // do a transform so that first and last \"arms\" are imagined flat, like in line handler",
                "+            // the alternative would be to apply the transform to the LE shapes directly,",
                "+            // which would be more work and produce code difficult to understand",
                "-                // paint the styles here and after polyline draw, to avoid line crossing a filled shape",
                "-                if (!LE_NONE.equals(annotation.getStartPointEndingStyle()))",
                "-                {",
                "-                    // check only needed to avoid q cm Q if LE_NONE",
                "-                    float x2 = pathsArray[2];",
                "-                    float y2 = pathsArray[3];",
                "-                    float x1 = pathsArray[0];",
                "-                    float y1 = pathsArray[1];",
                "-                    cs.saveGraphicsState();",
                "-                    double angle = Math.atan2(y2 - y1, x2 - x1);",
                "-                    cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "-                    drawStyle(annotation.getStartPointEndingStyle(), cs, 0, 0, ab.width, hasStroke, hasBackground);",
                "-                    cs.restoreGraphicsState();",
                "-                }",
                "+            // paint the styles here and after polyline draw, to avoid line crossing a filled shape",
                "+            if (!LE_NONE.equals(annotation.getStartPointEndingStyle()))",
                "+            {",
                "+                // check only needed to avoid q cm Q if LE_NONE",
                "+                float x2 = pathsArray[2];",
                "+                float y2 = pathsArray[3];",
                "+                float x1 = pathsArray[0];",
                "+                float y1 = pathsArray[1];",
                "+                cs.saveGraphicsState();",
                "+                double angle = Math.atan2(y2 - y1, x2 - x1);",
                "+                cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "+                drawStyle(annotation.getStartPointEndingStyle(), cs, 0, 0, ab.width, hasStroke, hasBackground);",
                "+                cs.restoreGraphicsState();",
                "+            }",
                "-                if (!LE_NONE.equals(annotation.getEndPointEndingStyle()))",
                "-                {",
                "-                    // check only needed to avoid q cm Q if LE_NONE",
                "-                    float x1 = pathsArray[pathsArray.length - 4];",
                "-                    float y1 = pathsArray[pathsArray.length - 3];",
                "-                    float x2 = pathsArray[pathsArray.length - 2];",
                "-                    float y2 = pathsArray[pathsArray.length - 1];",
                "-                    // save / restore not needed because it's the last one",
                "-                    double angle = Math.atan2(y2 - y1, x2 - x1);",
                "-                    cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "-                    float lineLength = (float) Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));",
                "-                    drawStyle(annotation.getEndPointEndingStyle(), cs, lineLength, 0, ab.width, hasStroke, hasBackground);",
                "-                }",
                "+            if (!LE_NONE.equals(annotation.getEndPointEndingStyle()))",
                "+            {",
                "+                // check only needed to avoid q cm Q if LE_NONE",
                "+                float x1 = pathsArray[pathsArray.length - 4];",
                "+                float y1 = pathsArray[pathsArray.length - 3];",
                "+                float x2 = pathsArray[pathsArray.length - 2];",
                "+                float y2 = pathsArray[pathsArray.length - 1];",
                "+                // save / restore not needed because it's the last one",
                "+                double angle = Math.atan2(y2 - y1, x2 - x1);",
                "+                cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "+                float lineLength = (float) Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));",
                "+                drawStyle(annotation.getEndPointEndingStyle(), cs, lineLength, 0, ab.width, hasStroke, hasBackground);",
                "             }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "index 1577dace5..75fd04e72 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "@@ -60,26 +60,52 @@ public class PDSquareAppearanceHandler extends PDAbstractAppearanceHandler",
                "         float lineWidth = getLineWidth();",
                "-        try",
                "+        PDAnnotationSquare annotation = (PDAnnotationSquare) getAnnotation();",
                "+        try (PDAppearanceContentStream contentStream = getNormalAppearanceAsContentStream())",
                "         {",
                "-            PDAnnotationSquare annotation = (PDAnnotationSquare) getAnnotation();",
                "-            try (PDAppearanceContentStream contentStream = getNormalAppearanceAsContentStream())",
                "+            boolean hasStroke = contentStream.setStrokingColorOnDemand(getColor());",
                "+            boolean hasBackground = contentStream",
                "+                    .setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "+",
                "+            setOpacity(contentStream, annotation.getConstantOpacity());",
                "+",
                "+            contentStream.setBorderLine(lineWidth, annotation.getBorderStyle());                ",
                "+            PDBorderEffectDictionary borderEffect = annotation.getBorderEffect();",
                "+",
                "+            if (borderEffect != null && borderEffect.getStyle().equals(PDBorderEffectDictionary.STYLE_CLOUDY))",
                "+            {",
                "+                CloudyBorder cloudyBorder = new CloudyBorder(contentStream,",
                "+                    borderEffect.getIntensity(), lineWidth, getRectangle());",
                "+                cloudyBorder.createCloudyRectangle(annotation.getRectDifference());",
                "+                annotation.setRectangle(cloudyBorder.getRectangle());",
                "+                annotation.setRectDifference(cloudyBorder.getRectDifference());",
                "+                PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "+                appearanceStream.setBBox(cloudyBorder.getBBox());",
                "+                appearanceStream.setMatrix(cloudyBorder.getMatrix());",
                "+            }",
                "+            else",
                "             {",
                "-                boolean hasStroke = contentStream.setStrokingColorOnDemand(getColor());",
                "-                boolean hasBackground = contentStream",
                "-                        .setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "-                ",
                "-                setOpacity(contentStream, annotation.getConstantOpacity());",
                "-                ",
                "-                contentStream.setBorderLine(lineWidth, annotation.getBorderStyle());                ",
                "-                PDBorderEffectDictionary borderEffect = annotation.getBorderEffect();",
                "-                ",
                "-                if (borderEffect != null && borderEffect.getStyle().equals(PDBorderEffectDictionary.STYLE_CLOUDY))",
                "+                // handle the border box",
                "+                //",
                "+                // There are two options. The handling is not part of the PDF specification but",
                "+                // implementation specific to Adobe Reader",
                "+                // - if /RD is set the border box is the /Rect entry inset by the respective",
                "+                //   border difference.",
                "+                // - if /RD is not set the border box is defined by the /Rect entry. The /RD entry will",
                "+                //   be set to be the line width and the /Rect is enlarged by the /RD amount",
                "+",
                "+                PDRectangle borderBox = null;",
                "+                float[] rectDifferences = annotation.getRectDifferences();",
                "+",
                "+                if (rectDifferences.length == 0)",
                "                 {",
                "-                    CloudyBorder cloudyBorder = new CloudyBorder(contentStream,",
                "-                        borderEffect.getIntensity(), lineWidth, getRectangle());",
                "-                    cloudyBorder.createCloudyRectangle(annotation.getRectDifference());",
                "-                    annotation.setRectangle(cloudyBorder.getRectangle());",
                "-                    annotation.setRectDifference(cloudyBorder.getRectDifference());",
                "-                    PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "-                    appearanceStream.setBBox(cloudyBorder.getBBox());",
                "-                    appearanceStream.setMatrix(cloudyBorder.getMatrix());",
                "+                    borderBox = getPaddedRectangle(getRectangle(), lineWidth/2);",
                "+                    // the differences rectangle",
                "+                    annotation.setRectDifferences(lineWidth/2);",
                "+                    annotation.setRectangle(addRectDifferences(getRectangle(), annotation.getRectDifferences()));",
                "+",
                "+                    // when the normal appearance stream was generated BBox and Matrix have been set to the",
                "+                    // values of the original /Rect. As the /Rect was changed that needs to be adjusted too.",
                "+                    annotation.getNormalAppearanceStream().setBBox(getRectangle());",
                "+                    AffineTransform transform = AffineTransform.getTranslateInstance(-getRectangle().getLowerLeftX(),",
                "+                            -getRectangle().getLowerLeftY());",
                "+                    annotation.getNormalAppearanceStream().setMatrix(transform);",
                "                 }",
                "@@ -87,40 +113,11 @@ public class PDSquareAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 {",
                "-                    // handle the border box",
                "-                    //",
                "-                    // There are two options. The handling is not part of the PDF specification but",
                "-                    // implementation specific to Adobe Reader",
                "-                    // - if /RD is set the border box is the /Rect entry inset by the respective",
                "-                    //   border difference.",
                "-                    // - if /RD is not set the border box is defined by the /Rect entry. The /RD entry will",
                "-                    //   be set to be the line width and the /Rect is enlarged by the /RD amount",
                "-                ",
                "-                    PDRectangle borderBox = null;",
                "-                    float[] rectDifferences = annotation.getRectDifferences();",
                "-                ",
                "-                    if (rectDifferences.length == 0)",
                "-                    {",
                "-                        borderBox = getPaddedRectangle(getRectangle(), lineWidth/2);",
                "-                        // the differences rectangle",
                "-                        annotation.setRectDifferences(lineWidth/2);",
                "-                        annotation.setRectangle(addRectDifferences(getRectangle(), annotation.getRectDifferences()));",
                "-",
                "-                        // when the normal appearance stream was generated BBox and Matrix have been set to the",
                "-                        // values of the original /Rect. As the /Rect was changed that needs to be adjusted too.",
                "-                        annotation.getNormalAppearanceStream().setBBox(getRectangle());",
                "-                        AffineTransform transform = AffineTransform.getTranslateInstance(-getRectangle().getLowerLeftX(),",
                "-                                -getRectangle().getLowerLeftY());",
                "-                        annotation.getNormalAppearanceStream().setMatrix(transform);",
                "-                    }",
                "-                    else",
                "-                    {",
                "-                        borderBox = applyRectDifferences(getRectangle(), rectDifferences);",
                "-                        borderBox = getPaddedRectangle(borderBox, lineWidth/2);",
                "-                    }",
                "-",
                "-                    contentStream.addRect(borderBox.getLowerLeftX(), borderBox.getLowerLeftY(),",
                "-                            borderBox.getWidth(), borderBox.getHeight());",
                "+                    borderBox = applyRectDifferences(getRectangle(), rectDifferences);",
                "+                    borderBox = getPaddedRectangle(borderBox, lineWidth/2);",
                "                 }",
                "-                contentStream.drawShape(lineWidth, hasStroke, hasBackground);",
                "+                contentStream.addRect(borderBox.getLowerLeftX(), borderBox.getLowerLeftY(),",
                "+                        borderBox.getWidth(), borderBox.getHeight());",
                "             }",
                "+",
                "+            contentStream.drawShape(lineWidth, hasStroke, hasBackground);",
                "         }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "index f8a5b325f..052f98b61 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "@@ -91,49 +91,46 @@ public class PDStrikeoutAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        try",
                "+        try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "         {",
                "-            try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "+            setOpacity(cs, annotation.getConstantOpacity());",
                "+",
                "+            cs.setStrokingColor(color);",
                "+            if (ab.dashArray != null)",
                "             {",
                "-                setOpacity(cs, annotation.getConstantOpacity());",
                "+                cs.setLineDashPattern(ab.dashArray, 0);",
                "+            }",
                "+            cs.setLineWidth(ab.width);",
                "-                cs.setStrokingColor(color);",
                "-                if (ab.dashArray != null)",
                "+            // spec is incorrect",
                "+            // https://stackoverflow.com/questions/9855814/pdf-spec-vs-acrobat-creation-quadpoints",
                "+            for (int i = 0; i < pathsArray.length / 8; ++i)",
                "+            {",
                "+                // get mid point between bounds, substract the line width to approximate what Adobe is doing",
                "+                // See e.g. CTAN-example-Annotations.pdf and PLPDF.com-MarkupAnnotations.pdf",
                "+                // and https://bugs.ghostscript.com/show_bug.cgi?id=693664",
                "+                // do the math for diagonal annotations with this weird old trick:",
                "+                // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "+                float len0 = (float) (Math.sqrt(Math.pow(pathsArray[i * 8] - pathsArray[i * 8 + 4], 2) + ",
                "+                                      Math.pow(pathsArray[i * 8 + 1] - pathsArray[i * 8 + 5], 2)));",
                "+                float x0 = pathsArray[i * 8 + 4];",
                "+                float y0 = pathsArray[i * 8 + 5];",
                "+                if (Float.compare(len0, 0) != 0)",
                "                 {",
                "-                    cs.setLineDashPattern(ab.dashArray, 0);",
                "+                    // only if both coordinates are not identical to avoid divide by zero",
                "+                    x0 += (pathsArray[i * 8] - pathsArray[i * 8 + 4]) / len0 * (len0 / 2 - ab.width);",
                "+                    y0 += (pathsArray[i * 8 + 1] - pathsArray[i * 8 + 5]) / len0 * (len0 / 2 - ab.width);",
                "                 }",
                "-                cs.setLineWidth(ab.width);",
                "-",
                "-                // spec is incorrect",
                "-                // https://stackoverflow.com/questions/9855814/pdf-spec-vs-acrobat-creation-quadpoints",
                "-                for (int i = 0; i < pathsArray.length / 8; ++i)",
                "+                float len1 = (float) (Math.sqrt(Math.pow(pathsArray[i * 8 + 2] - pathsArray[i * 8 + 6], 2) + ",
                "+                                      Math.pow(pathsArray[i * 8 + 3] - pathsArray[i * 8 + 7], 2)));",
                "+                float x1 = pathsArray[i * 8 + 6];",
                "+                float y1 = pathsArray[i * 8 + 7];",
                "+                if (Float.compare(len1, 0) != 0)",
                "                 {",
                "-                    // get mid point between bounds, substract the line width to approximate what Adobe is doing",
                "-                    // See e.g. CTAN-example-Annotations.pdf and PLPDF.com-MarkupAnnotations.pdf",
                "-                    // and https://bugs.ghostscript.com/show_bug.cgi?id=693664",
                "-                    // do the math for diagonal annotations with this weird old trick:",
                "-                    // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "-                    float len0 = (float) (Math.sqrt(Math.pow(pathsArray[i * 8] - pathsArray[i * 8 + 4], 2) + ",
                "-                                          Math.pow(pathsArray[i * 8 + 1] - pathsArray[i * 8 + 5], 2)));",
                "-                    float x0 = pathsArray[i * 8 + 4];",
                "-                    float y0 = pathsArray[i * 8 + 5];",
                "-                    if (Float.compare(len0, 0) != 0)",
                "-                    {",
                "-                        // only if both coordinates are not identical to avoid divide by zero",
                "-                        x0 += (pathsArray[i * 8] - pathsArray[i * 8 + 4]) / len0 * (len0 / 2 - ab.width);",
                "-                        y0 += (pathsArray[i * 8 + 1] - pathsArray[i * 8 + 5]) / len0 * (len0 / 2 - ab.width);",
                "-                    }",
                "-                    float len1 = (float) (Math.sqrt(Math.pow(pathsArray[i * 8 + 2] - pathsArray[i * 8 + 6], 2) + ",
                "-                                          Math.pow(pathsArray[i * 8 + 3] - pathsArray[i * 8 + 7], 2)));",
                "-                    float x1 = pathsArray[i * 8 + 6];",
                "-                    float y1 = pathsArray[i * 8 + 7];",
                "-                    if (Float.compare(len1, 0) != 0)",
                "-                    {",
                "-                        // only if both coordinates are not identical to avoid divide by zero",
                "-                        x1 += (pathsArray[i * 8 + 2] - pathsArray[i * 8 + 6]) / len1 * (len1 / 2 - ab.width);",
                "-                        y1 += (pathsArray[i * 8 + 3] - pathsArray[i * 8 + 7]) / len1 * (len1 / 2 - ab.width);",
                "-                    }",
                "-                    cs.moveTo(x0, y0);",
                "-                    cs.lineTo(x1, y1);",
                "+                    // only if both coordinates are not identical to avoid divide by zero",
                "+                    x1 += (pathsArray[i * 8 + 2] - pathsArray[i * 8 + 6]) / len1 * (len1 / 2 - ab.width);",
                "+                    y1 += (pathsArray[i * 8 + 3] - pathsArray[i * 8 + 7]) / len1 * (len1 / 2 - ab.width);",
                "                 }",
                "-                cs.stroke();",
                "+                cs.moveTo(x0, y0);",
                "+                cs.lineTo(x1, y1);",
                "             }",
                "+            cs.stroke();",
                "         }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java",
                "index 93535c514..48363df3b 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java",
                "@@ -92,25 +92,22 @@ public class PDUnderlineAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        try",
                "+        try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "         {",
                "-            try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "-            {",
                "-                setOpacity(cs, annotation.getConstantOpacity());",
                "+            setOpacity(cs, annotation.getConstantOpacity());",
                "-                cs.setStrokingColor(color);",
                "-                if (ab.dashArray != null)",
                "-                {",
                "-                    cs.setLineDashPattern(ab.dashArray, 0);",
                "-                }",
                "-                cs.setLineWidth(ab.width);",
                "+            cs.setStrokingColor(color);",
                "+            if (ab.dashArray != null)",
                "+            {",
                "+                cs.setLineDashPattern(ab.dashArray, 0);",
                "+            }",
                "+            cs.setLineWidth(ab.width);",
                "-                // spec is incorrect",
                "-                // https://stackoverflow.com/questions/9855814/pdf-spec-vs-acrobat-creation-quadpoints",
                "-                for (int i = 0; i < pathsArray.length / 8; ++i)",
                "-                {",
                "-                    // only lower coords are used",
                "-                    cs.moveTo(pathsArray[i * 8 + 4], pathsArray[i * 8 + 5]);",
                "-                    cs.lineTo(pathsArray[i * 8 + 6], pathsArray[i * 8 + 7]);",
                "-                }",
                "-                cs.stroke();",
                "+            // spec is incorrect",
                "+            // https://stackoverflow.com/questions/9855814/pdf-spec-vs-acrobat-creation-quadpoints",
                "+            for (int i = 0; i < pathsArray.length / 8; ++i)",
                "+            {",
                "+                // only lower coords are used",
                "+                cs.moveTo(pathsArray[i * 8 + 4], pathsArray[i * 8 + 5]);",
                "+                cs.lineTo(pathsArray[i * 8 + 6], pathsArray[i * 8 + 7]);",
                "             }",
                "+            cs.stroke();",
                "         }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDHighlightAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDInkAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLinkAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fc473f26660e41f841b1630e60266d885b1ed220",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527704572,
            "hunks": 2,
            "message": "PDFBOX-3280: make class package local again, see https://stackoverflow.com/questions/50593597/pdfbox-clone-font git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832561 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFCloneUtility.java b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFCloneUtility.java",
                "index 773ecd0cb..f91b25608 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFCloneUtility.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFCloneUtility.java",
                "@@ -38,5 +38,4 @@ import org.apache.pdfbox.pdmodel.common.COSObjectable;",
                "  */",
                "-public class PDFCloneUtility",
                "+class PDFCloneUtility",
                " {",
                "-",
                "     private final PDDocument destination;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFCloneUtility.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3280": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3280",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0870eabaaaf88efa52c8fffed44cd12032b201ef",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528298846,
            "hunks": 5,
            "message": "PDFBOX-3353: support undocumented /Rotate setting; make width smaller git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833043 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "index bf6d65593..071d9ce67 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "@@ -25,2 +25,3 @@ import org.apache.pdfbox.cos.COSArray;",
                " import org.apache.pdfbox.cos.COSBase;",
                "+import org.apache.pdfbox.cos.COSName;",
                " import org.apache.pdfbox.cos.COSNumber;",
                "@@ -207,3 +208,9 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-",
                "+            // rotation is an undocumented feature, but Adobe uses it. Examples can be found",
                "+            // in pdf_commenting_new.pdf file.",
                "+            int rotation = annotation.getCOSObject().getInt(COSName.ROTATE, 0);",
                "+            cs.transform(Matrix.getRotateInstance(Math.toRadians(rotation), 0, 0));",
                "+            float xOffset;",
                "+            float yOffset;",
                "+            float width = rotation == 90 || rotation == 270 ? getRectangle().getHeight(): getRectangle().getWidth();",
                "             // somewhat inspired by AppearanceGeneratorHelper.insertGeneratedAppearance()",
                "@@ -217,2 +224,22 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             float fontSize = extractFontSize(annotation);",
                "+            switch (rotation)",
                "+            {",
                "+                case 180:",
                "+                    xOffset = - getRectangle().getUpperRightX() + fontSize / 2 * factor; ",
                "+                    yOffset = - getRectangle().getLowerLeftY() - font.getBoundingBox().getHeight() * fontSize / 1000 * factor;",
                "+                    break;",
                "+                case 90:",
                "+                    xOffset = getRectangle().getLowerLeftY() + fontSize / 2 * factor;",
                "+                    yOffset = - getRectangle().getLowerLeftX() - font.getBoundingBox().getHeight() * fontSize / 1000 * factor;",
                "+                    break;",
                "+                case 270:",
                "+                    xOffset = - getRectangle().getUpperRightY() + fontSize / 2 * factor;",
                "+                    yOffset = getRectangle().getUpperRightX() - font.getBoundingBox().getHeight() * fontSize / 1000 * factor;",
                "+                    break;",
                "+                case 0:",
                "+                default:",
                "+                    xOffset = getRectangle().getLowerLeftX() + fontSize / 2 * factor;",
                "+                    yOffset = getRectangle().getUpperRightY() - font.getBoundingBox().getHeight() * fontSize / 1000 * factor;",
                "+                    break;",
                "+            }",
                "             cs.setFont(font, fontSize);",
                "@@ -225,8 +252,6 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     .text(new PlainText(annotation.getContents()))",
                "-                    .width(getRectangle().getWidth())",
                "+                    .width(width - fontSize / factor)",
                "                     .wrapLines(true)",
                "                     //TODO some reverse engineering needed to find out padding",
                "-                    //TODO fat cloudy rectangle in CTAN file has \"the\" incomplete",
                "-                    .initialOffset(getRectangle().getLowerLeftX() + fontSize / 2 * factor, ",
                "-                                   getRectangle().getUpperRightY() - font.getBoundingBox().getHeight() * fontSize / 1000 * factor)",
                "+                    .initialOffset(xOffset, yOffset)",
                "                     // Adobe ignores the /Q"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a3d012bc6eef223ba21b26ba57f377b49d599a89",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526743174,
            "hunks": 2,
            "message": "PDFBOX-3353: support /LE array (line start / ending styles) git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831899 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolyline.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolyline.java",
                "index 30968ce10..b5833f84a 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolyline.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolyline.java",
                "@@ -22,2 +22,3 @@ import org.apache.pdfbox.cos.COSName;",
                " import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
                "+import static org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine.LE_NONE;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAppearanceHandler;",
                "@@ -56,2 +57,86 @@ public class PDAnnotationPolyline extends PDAnnotationMarkup",
                "+    /**",
                "+     * This will set the line ending style for the start point, see the LE_ constants for the possible values.",
                "+     *",
                "+     * @param style The new style.",
                "+     */",
                "+    public void setStartPointEndingStyle(String style)",
                "+    {",
                "+        if (style == null)",
                "+        {",
                "+            style = LE_NONE;",
                "+        }",
                "+        COSBase base = getCOSObject().getDictionaryObject(COSName.LE);",
                "+        COSArray array;",
                "+        if (!(base instanceof COSArray) || ((COSArray) base).size() == 0)",
                "+        {",
                "+            array = new COSArray();",
                "+            array.add(COSName.getPDFName(style));",
                "+            array.add(COSName.getPDFName(LE_NONE));",
                "+            getCOSObject().setItem(COSName.LE, array);",
                "+        }",
                "+        else",
                "+        {",
                "+            array = (COSArray) base;",
                "+            array.setName(0, style);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section.",
                "+     *",
                "+     * @return The ending style for the start point, LE_NONE if missing, never null.",
                "+     */",
                "+    public String getStartPointEndingStyle()",
                "+    {",
                "+        COSBase base = getCOSObject().getDictionaryObject(COSName.LE);",
                "+        if (base instanceof COSArray && ((COSArray) base).size() >= 2)",
                "+        {",
                "+            return ((COSArray) base).getName(0, LE_NONE);",
                "+        }",
                "+        return LE_NONE;",
                "+    }",
                "+",
                "+    /**",
                "+     * This will set the line ending style for the end point, see the LE_ constants for the possible values.",
                "+     *",
                "+     * @param style The new style.",
                "+     */",
                "+    public void setEndPointEndingStyle(String style)",
                "+    {",
                "+        if (style == null)",
                "+        {",
                "+            style = LE_NONE;",
                "+        }",
                "+        COSBase base = getCOSObject().getDictionaryObject(COSName.LE);",
                "+        COSArray array;",
                "+        if (!(base instanceof COSArray) || ((COSArray) base).size() < 2)",
                "+        {",
                "+            array = new COSArray();",
                "+            array.add(COSName.getPDFName(LE_NONE));",
                "+            array.add(COSName.getPDFName(style));",
                "+            getCOSObject().setItem(COSName.LE, array);",
                "+        }",
                "+        else",
                "+        {",
                "+            array = (COSArray) base;",
                "+            array.setName(1, style);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section.",
                "+     *",
                "+     * @return The ending style for the end point, LE_NONE if missing, never null.",
                "+     */",
                "+    public String getEndPointEndingStyle()",
                "+    {",
                "+        COSBase base = getCOSObject().getDictionaryObject(COSName.LE);",
                "+        if (base instanceof COSArray && ((COSArray) base).size() >= 2)",
                "+        {",
                "+            return ((COSArray) base).getName(1, LE_NONE);",
                "+        }",
                "+        return LE_NONE;",
                "+    }",
                "+",
                "     /**"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolyline.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1c324b02db8d2f1f53256965d4c5b4f3cb5bb2cc",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530200372,
            "hunks": 4,
            "message": "PDFBOX-3353: support /Comment and /Key git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834620 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index 2a9eeabf6..5c49ce015 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -62,2 +62,4 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         SUPPORTED_NAMES.add(PDAnnotationText.NAME_UP_LEFT_ARROW);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_COMMENT);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_KEY);",
                "     }",
                "@@ -83,6 +85,2 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         {",
                "-            //TODO Comment, Key",
                "-            // BBox values:",
                "-            // Key 13 18",
                "-            // Comment 18 18",
                "             return;",
                "@@ -150,2 +148,8 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     break;",
                "+                case PDAnnotationText.NAME_COMMENT:",
                "+                    drawComment(annotation, contentStream);",
                "+                    break;",
                "+                case PDAnnotationText.NAME_KEY:",
                "+                    drawKey(annotation, contentStream);",
                "+                    break;",
                "                 default:",
                "@@ -585,2 +589,88 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "+    private void drawComment(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "+                 throws IOException",
                "+    {",
                "+        adjustRectAndBBox(annotation, 18, 18);",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(1);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+",
                "+        contentStream.addRect(0.3f, 0.3f, 18-0.6f, 18-0.6f);",
                "+        contentStream.stroke();",
                "+",
                "+        contentStream.setNonStrokingColor(0);",
                "+        contentStream.transform(Matrix.getScaleInstance(0.003f, 0.003f));",
                "+        contentStream.transform(Matrix.getTranslateInstance(500, -300));",
                "+        ",
                "+        // shape from Font Awesome by \"printing\" comment.svg into a PDF",
                "+        contentStream.moveTo(2549, 5269);",
                "+        contentStream.curveTo(1307, 5269, 300, 4451, 300, 3441);",
                "+        contentStream.curveTo(300, 3023, 474, 2640, 764, 2331);",
                "+        contentStream.curveTo(633, 1985, 361, 1691, 357, 1688);",
                "+        contentStream.curveTo(299, 1626, 283, 1537, 316, 1459);",
                "+        contentStream.curveTo(350, 1382, 426, 1332, 510, 1332);",
                "+        contentStream.curveTo(1051, 1332, 1477, 1558, 1733, 1739);",
                "+        contentStream.curveTo(1987, 1659, 2261, 1613, 2549, 1613);",
                "+        contentStream.curveTo(3792, 1613, 4799, 2431, 4799, 3441);",
                "+        contentStream.curveTo(4799, 4451, 3792, 5269, 2549, 5269);",
                "+        contentStream.closePath();",
                "+        contentStream.moveTo(2549, 2035);",
                "+        contentStream.curveTo(2315, 2035, 2083, 2071, 1860, 2141);",
                "+        contentStream.lineTo(1661, 2204);",
                "+        contentStream.lineTo(1490, 2083);",
                "+        contentStream.curveTo(1364, 1994, 1192, 1895, 984, 1828);",
                "+        contentStream.curveTo(1048, 1935, 1111, 2054, 1159, 2182);",
                "+        contentStream.lineTo(1252, 2429);",
                "+        contentStream.lineTo(1071, 2620);",
                "+        contentStream.curveTo(912, 2790, 721, 3070, 721, 3441);",
                "+        contentStream.curveTo(721, 4216, 1541, 4847, 2549, 4847);",
                "+        contentStream.curveTo(3558, 4847, 4378, 4216, 4378, 3441);",
                "+        contentStream.curveTo(4378, 2666, 3558, 2035, 2549, 2035);",
                "+        contentStream.fill();",
                "+    }",
                "+    ",
                "+    private void drawKey(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "+                 throws IOException",
                "+    {",
                "+        adjustRectAndBBox(annotation, 13, 18);",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(1);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(200);",
                "+",
                "+        contentStream.transform(Matrix.getScaleInstance(0.003f, 0.003f));",
                "+        contentStream.transform(Matrix.getRotateInstance(Math.toRadians(45), 2500, -800));",
                "+",
                "+        // shape from Font Awesome by \"printing\" key.svg into a PDF",
                "+        contentStream.moveTo(4799, 4004);",
                "+        contentStream.curveTo(4799, 3149, 4107, 2457, 3253, 2457);",
                "+        contentStream.curveTo(3154, 2457, 3058, 2466, 2964, 2484);",
                "+        contentStream.lineTo(2753, 2246);",
                "+        contentStream.curveTo(2713, 2201, 2656, 2175, 2595, 2175);",
                "+        contentStream.lineTo(2268, 2175);",
                "+        contentStream.lineTo(2268, 1824);",
                "+        contentStream.curveTo(2268, 1707, 2174, 1613, 2057, 1613);",
                "+        contentStream.lineTo(1706, 1613);",
                "+        contentStream.lineTo(1706, 1261);",
                "+        contentStream.curveTo(1706, 1145, 1611, 1050, 1495, 1050);",
                "+        contentStream.lineTo(510, 1050);",
                "+        contentStream.curveTo(394, 1050, 300, 1145, 300, 1261);",
                "+        contentStream.lineTo(300, 1947);",
                "+        contentStream.curveTo(300, 2003, 322, 2057, 361, 2097);",
                "+        contentStream.lineTo(1783, 3519);",
                "+        contentStream.curveTo(1733, 3671, 1706, 3834, 1706, 4004);",
                "+        contentStream.curveTo(1706, 4858, 2398, 5550, 3253, 5550);",
                "+        contentStream.curveTo(4109, 5550, 4799, 4860, 4799, 4004);",
                "+        contentStream.closePath();",
                "+        contentStream.moveTo(3253, 4425);",
                "+        contentStream.curveTo(3253, 4192, 3441, 4004, 3674, 4004);",
                "+        contentStream.curveTo(3907, 4004, 4096, 4192, 4096, 4425);",
                "+        contentStream.curveTo(4096, 4658, 3907, 4847, 3674, 4847);",
                "+        contentStream.curveTo(3441, 4847, 3253, 4658, 3253, 4425);",
                "+        contentStream.fillAndStroke();",
                "+    }",
                "+    ",
                "     private void addPath(final PDAppearanceContentStream contentStream, GeneralPath path) throws IOException"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "23dfd579cfcd8f5775fbc0336dea63d5b7619176",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528040184,
            "hunks": 3,
            "message": "PDFBOX-4212: add text formatter classes to new ..annotation.layout package git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832775 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java",
                "new file mode 100644",
                "index 000000000..5688ec385",
                "--- /dev/null",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java",
                "@@ -0,0 +1,102 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.pdfbox.pdmodel.interactive.annotation.text;",
                "+",
                "+import org.apache.pdfbox.pdmodel.font.PDFont;",
                "+",
                "+/**",
                "+ * Define styling attributes to be used for text formatting.",
                "+ * ",
                "+ */",
                "+class AppearanceStyle",
                "+{",
                "+    private PDFont font;",
                "+    /**",
                "+     * The font size to be used for text formatting.",
                "+     *",
                "+     * Defaulting to 12 to match Acrobats default.",
                "+     */",
                "+    private float fontSize = 12.0f;",
                "+    ",
                "+    /**",
                "+     * The leading (distance between lines) to be used for text formatting.",
                "+     *",
                "+     * Defaulting to 1.2*fontSize to match Acrobats default.",
                "+     */",
                "+    private float leading = 14.4f;",
                "+    ",
                "+    /**",
                "+     * Get the font used for text formatting.",
                "+     * ",
                "+     * @return the font used for text formatting.",
                "+     */",
                "+    PDFont getFont()",
                "+    {",
                "+        return font;",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Set the font to be used for text formatting.",
                "+     * ",
                "+     * @param font the font to be used.",
                "+     */",
                "+    void setFont(PDFont font)",
                "+    {",
                "+        this.font = font;",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Get the fontSize used for text formatting.",
                "+     * ",
                "+     * @return the fontSize used for text formatting.",
                "+     */",
                "+    float getFontSize()",
                "+    {",
                "+        return fontSize;",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Set the font size to be used for formatting.",
                "+     * ",
                "+     * @param fontSize the font size.",
                "+     */",
                "+    void setFontSize(float fontSize)",
                "+    {",
                "+        this.fontSize = fontSize;",
                "+        leading = fontSize * 1.2f;",
                "+    }",
                "+",
                "+    /**",
                "+     * Get the leading used for text formatting.",
                "+     * ",
                "+     * @return the leading used for text formatting.",
                "+     */",
                "+    float getLeading()",
                "+    {",
                "+        return leading;",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Set the leading used for text formatting.",
                "+     * ",
                "+     * @param leading the leading to be used.",
                "+     */",
                "+    void setLeading(float leading)",
                "+    {",
                "+        this.leading = leading;",
                "+    }",
                "+}",
                "\\ No newline at end of file",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java",
                "new file mode 100644",
                "index 000000000..c61c8824c",
                "--- /dev/null",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java",
                "@@ -0,0 +1,290 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.pdfbox.pdmodel.interactive.annotation.text;",
                "+",
                "+import java.io.IOException;",
                "+import java.text.AttributedString;",
                "+import java.text.BreakIterator;",
                "+import java.text.AttributedCharacterIterator.Attribute;",
                "+import java.util.ArrayList;",
                "+import java.util.Arrays;",
                "+import java.util.List;",
                "+",
                "+import org.apache.pdfbox.pdmodel.font.PDFont;",
                "+",
                "+/**",
                "+ * A block of text.",
                "+ * <p>",
                "+ * A block of text can contain multiple paragraphs which will",
                "+ * be treated individually within the block placement.",
                "+ * </p>",
                "+ * ",
                "+ */",
                "+class PlainText",
                "+{",
                "+    private static final float FONTSCALE = 1000f;",
                "+    ",
                "+    private final List<Paragraph> paragraphs;",
                "+    ",
                "+    /**",
                "+     * Construct the text block from a single value.",
                "+     * ",
                "+     * Constructs the text block from a single value splitting",
                "+     * into individual {@link Paragraph} when a new line character is ",
                "+     * encountered.",
                "+     * ",
                "+     * @param textValue the text block string.",
                "+     */",
                "+    PlainText(String textValue)",
                "+    {",
                "+        List<String> parts = Arrays.asList(textValue.replaceAll(\"\\t\", \" \").split(\"\\\\r\\\\n|\\\\n|\\\\r|\\\\u2028|\\\\u2029\"));",
                "+        paragraphs = new ArrayList<>();",
                "+        for (String part : parts)",
                "+        {",
                "+        \t// Acrobat prints a space for an empty paragraph",
                "+        \tif (part.length() == 0)",
                "+        \t{",
                "+        \t\tpart = \" \";",
                "+        \t}",
                "+            paragraphs.add(new Paragraph(part));",
                "+        }",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Construct the text block from a list of values.",
                "+     * ",
                "+     * Constructs the text block from a list of values treating each",
                "+     * entry as an individual {@link Paragraph}.",
                "+     * ",
                "+     * @param listValue the text block string.",
                "+     */",
                "+    PlainText(List<String> listValue)",
                "+    {",
                "+        paragraphs = new ArrayList<>();",
                "+        for (String part : listValue)",
                "+        {",
                "+            paragraphs.add(new Paragraph(part));",
                "+        }",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Get the list of paragraphs.",
                "+     * ",
                "+     * @return the paragraphs.",
                "+     */",
                "+    List<Paragraph> getParagraphs()",
                "+    {",
                "+        return paragraphs;",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Attribute keys and attribute values used for text handling.",
                "+     * ",
                "+     * This is similar to {@link java.awt.font.TextAttribute} but",
                "+     * handled individually as to avoid a dependency on awt.",
                "+     * ",
                "+     */",
                "+    static class TextAttribute extends Attribute",
                "+    {",
                "+        /**",
                "+         * UID for serializing.",
                "+         */",
                "+        private static final long serialVersionUID = -3138885145941283005L;",
                "+",
                "+        /**",
                "+         * Attribute width of the text.",
                "+         */",
                "+        public static final Attribute WIDTH = new TextAttribute(\"width\");",
                "+        ",
                "+        protected TextAttribute(String name)",
                "+        {",
                "+            super(name);",
                "+        }",
                "+        ",
                "+",
                "+    }",
                "+",
                "+    /**",
                "+     * A block of text to be formatted as a whole.",
                "+     * <p>",
                "+     * A block of text can contain multiple paragraphs which will",
                "+     * be treated individually within the block placement.",
                "+     * </p>",
                "+     * ",
                "+     */",
                "+    static class Paragraph",
                "+    {",
                "+        private final String textContent;",
                "+        ",
                "+        Paragraph(String text)",
                "+        {",
                "+            textContent = text;",
                "+        }",
                "+        ",
                "+        /**",
                "+         * Get the paragraph text.",
                "+         * ",
                "+         * @return the text.",
                "+         */",
                "+        String getText()",
                "+        {",
                "+            return textContent;",
                "+        }",
                "+        ",
                "+        /**",
                "+         * Break the paragraph into individual lines.",
                "+         * ",
                "+         * @param font the font used for rendering the text.",
                "+         * @param fontSize the fontSize used for rendering the text.",
                "+         * @param width the width of the box holding the content.",
                "+         * @return the individual lines.",
                "+         * @throws IOException",
                "+         */",
                "+        List<Line> getLines(PDFont font, float fontSize, float width) throws IOException",
                "+        {",
                "+            BreakIterator iterator = BreakIterator.getLineInstance();",
                "+            iterator.setText(textContent);",
                "+            ",
                "+            final float scale = fontSize/FONTSCALE;",
                "+            ",
                "+            int start = iterator.first();",
                "+            int end = iterator.next();",
                "+            float lineWidth = 0;",
                "+            ",
                "+            List<Line> textLines = new ArrayList<>();",
                "+            Line textLine = new Line();",
                "+",
                "+            while (end != BreakIterator.DONE)",
                "+            {",
                "+                String word = textContent.substring(start,end);",
                "+                float wordWidth = font.getStringWidth(word) * scale;",
                "+                ",
                "+                lineWidth = lineWidth + wordWidth;",
                "+",
                "+                // check if the last word would fit without the whitespace ending it",
                "+                if (lineWidth >= width && Character.isWhitespace(word.charAt(word.length()-1)))",
                "+                {",
                "+                    float whitespaceWidth = font.getStringWidth(word.substring(word.length()-1)) * scale;",
                "+                    lineWidth = lineWidth - whitespaceWidth;",
                "+                }",
                "+                ",
                "+                if (lineWidth >= width)",
                "+                {",
                "+                    textLine.setWidth(textLine.calculateWidth(font, fontSize));",
                "+                    textLines.add(textLine);",
                "+                    textLine = new Line();",
                "+                    lineWidth = font.getStringWidth(word) * scale;",
                "+                }",
                "+                ",
                "+                AttributedString as = new AttributedString(word);",
                "+                as.addAttribute(TextAttribute.WIDTH, wordWidth);",
                "+                Word wordInstance = new Word(word);",
                "+                wordInstance.setAttributes(as);",
                "+                textLine.addWord(wordInstance);",
                "+                start = end;",
                "+                end = iterator.next();",
                "+            }",
                "+            textLine.setWidth(textLine.calculateWidth(font, fontSize));",
                "+            textLines.add(textLine);",
                "+            return textLines;",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * An individual line of text.",
                "+     */",
                "+    static class Line",
                "+    {",
                "+        private final List<Word> words = new ArrayList<>();",
                "+        private float lineWidth;",
                "+",
                "+        float getWidth()",
                "+        {",
                "+            return lineWidth;",
                "+        }",
                "+        ",
                "+        void setWidth(float width)",
                "+        {",
                "+            lineWidth = width;",
                "+        }",
                "+        ",
                "+        float calculateWidth(PDFont font, float fontSize) throws IOException",
                "+        {",
                "+            final float scale = fontSize/FONTSCALE;",
                "+            float calculatedWidth = 0f;",
                "+            for (Word word : words)",
                "+            {",
                "+                calculatedWidth = calculatedWidth + ",
                "+                        (Float) word.getAttributes().getIterator().getAttribute(TextAttribute.WIDTH);",
                "+                String text = word.getText();",
                "+                if (words.indexOf(word) == words.size() -1 && Character.isWhitespace(text.charAt(text.length()-1)))",
                "+                {",
                "+                    float whitespaceWidth = font.getStringWidth(text.substring(text.length()-1)) * scale;",
                "+                    calculatedWidth = calculatedWidth - whitespaceWidth;",
                "+                }",
                "+            }",
                "+            return calculatedWidth;",
                "+        }",
                "+",
                "+        List<Word> getWords()",
                "+        {",
                "+            return words;",
                "+        }",
                "+        ",
                "+        float getInterWordSpacing(float width)",
                "+        {",
                "+            return (width - lineWidth)/(words.size()-1);",
                "+        }",
                "+",
                "+        void addWord(Word word)",
                "+        {",
                "+            words.add(word);",
                "+        }",
                "+    }",
                "+    ",
                "+    /**",
                "+     * An individual word.",
                "+     * ",
                "+     * A word is defined as a string which must be kept",
                "+     * on the same line.",
                "+     */",
                "+    static class Word",
                "+    {",
                "+        private AttributedString attributedString;",
                "+        private final String textContent;",
                "+        ",
                "+        Word(String text)",
                "+        {",
                "+            textContent = text;",
                "+        }",
                "+        ",
                "+        String getText()",
                "+        {",
                "+            return textContent;",
                "+        }",
                "+        ",
                "+        AttributedString getAttributes()",
                "+        {",
                "+            return attributedString;",
                "+        }",
                "+        ",
                "+        void setAttributes(AttributedString as)",
                "+        {",
                "+            this.attributedString = as;",
                "+        }",
                "+    }",
                "+}",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java",
                "new file mode 100644",
                "index 000000000..6458d8404",
                "--- /dev/null",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java",
                "@@ -0,0 +1,287 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.pdfbox.pdmodel.interactive.annotation.layout;",
                "+",
                "+import java.io.IOException;",
                "+import java.util.List;",
                "+",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.layout.PlainText.Line;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.layout.PlainText.Paragraph;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.layout.PlainText.TextAttribute;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.layout.PlainText.Word;",
                "+",
                "+/**",
                "+ * TextFormatter to handle plain text formatting.",
                "+ * ",
                "+ * The text formatter will take a single value or an array of values which",
                "+ * are treated as paragraphs.",
                "+ */",
                "+",
                "+class PlainTextFormatter",
                "+{",
                "+    ",
                "+    enum TextAlign",
                "+    {",
                "+        LEFT(0), CENTER(1), RIGHT(2), JUSTIFY(4);",
                "+        ",
                "+        private final int alignment;",
                "+        ",
                "+        private TextAlign(int alignment)",
                "+        {",
                "+            this.alignment = alignment;",
                "+        }",
                "+        ",
                "+        int getTextAlign()",
                "+        {",
                "+            return alignment;",
                "+        }",
                "+        ",
                "+        public static TextAlign valueOf(int alignment)",
                "+        {",
                "+            for (TextAlign textAlignment : TextAlign.values())",
                "+            {",
                "+                if (textAlignment.getTextAlign() == alignment)",
                "+                {",
                "+                    return textAlignment;",
                "+                }",
                "+            }",
                "+            return TextAlign.LEFT;",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * The scaling factor for font units to PDF units",
                "+     */",
                "+    private static final int FONTSCALE = 1000;",
                "+    ",
                "+    private final AppearanceStyle appearanceStyle;",
                "+    private final boolean wrapLines;",
                "+    private final float width;",
                "+    ",
                "+    private final PDAppearanceContentStream contents;",
                "+    private final PlainText textContent;",
                "+    private final TextAlign textAlignment;",
                "+    ",
                "+    private float horizontalOffset;",
                "+    private float verticalOffset;",
                "+    ",
                "+    static class Builder",
                "+    {",
                "+",
                "+        // required parameters",
                "+        private PDAppearanceContentStream contents;",
                "+",
                "+        // optional parameters",
                "+        private AppearanceStyle appearanceStyle;",
                "+        private boolean wrapLines = false;",
                "+        private float width = 0f;",
                "+        private PlainText textContent;",
                "+        private TextAlign textAlignment = TextAlign.LEFT;",
                "+        ",
                "+       ",
                "+        // initial offset from where to start the position of the first line",
                "+        private float horizontalOffset = 0f;",
                "+        private float verticalOffset = 0f;",
                "+        ",
                "+        Builder(PDAppearanceContentStream contents)",
                "+        {",
                "+            this.contents = contents;",
                "+        }",
                "+",
                "+        Builder style(AppearanceStyle appearanceStyle)",
                "+        {",
                "+            this.appearanceStyle = appearanceStyle;",
                "+            return this;",
                "+        }",
                "+        ",
                "+        Builder wrapLines(boolean wrapLines)",
                "+        {",
                "+            this.wrapLines = wrapLines;",
                "+            return this;",
                "+        }",
                "+",
                "+        Builder width(float width)",
                "+        {",
                "+            this.width = width;",
                "+            return this;",
                "+        }",
                "+",
                "+        Builder textAlign(int alignment)",
                "+        {",
                "+            this.textAlignment  = TextAlign.valueOf(alignment);",
                "+            return this;",
                "+        }",
                "+        ",
                "+        Builder textAlign(TextAlign alignment)",
                "+        {",
                "+            this.textAlignment  = alignment;",
                "+            return this;",
                "+        }",
                "+        ",
                "+        ",
                "+        Builder text(PlainText textContent)",
                "+        {",
                "+            this.textContent  = textContent;",
                "+            return this;",
                "+        }",
                "+        ",
                "+        Builder initialOffset(float horizontalOffset, float verticalOffset)",
                "+        {",
                "+            this.horizontalOffset = horizontalOffset;",
                "+            this.verticalOffset = verticalOffset;",
                "+            return this;",
                "+        }",
                "+        ",
                "+        PlainTextFormatter build()",
                "+        {",
                "+            return new PlainTextFormatter(this);",
                "+        }",
                "+    }",
                "+    ",
                "+    private PlainTextFormatter(Builder builder)",
                "+    {",
                "+        appearanceStyle = builder.appearanceStyle;",
                "+        wrapLines = builder.wrapLines;",
                "+        width = builder.width;",
                "+        contents = builder.contents;",
                "+        textContent = builder.textContent;",
                "+        textAlignment = builder.textAlignment;",
                "+        horizontalOffset = builder.horizontalOffset;",
                "+        verticalOffset = builder.verticalOffset;",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Format the text block.",
                "+     * ",
                "+     * @throws IOException if there is an error writing to the stream.",
                "+     */",
                "+    public void format() throws IOException",
                "+    {",
                "+        if (textContent != null && !textContent.getParagraphs().isEmpty())",
                "+        {",
                "+            boolean isFirstParagraph = true;",
                "+        \tfor (Paragraph paragraph : textContent.getParagraphs())",
                "+            {",
                "+                if (wrapLines)",
                "+                {",
                "+                    List<Line> lines = paragraph.getLines(",
                "+                                appearanceStyle.getFont(), ",
                "+                                appearanceStyle.getFontSize(), ",
                "+                                width",
                "+                            );",
                "+                    processLines(lines, isFirstParagraph);",
                "+                    isFirstParagraph = false;",
                "+                }",
                "+                else",
                "+                {",
                "+                    float startOffset = 0f;",
                "+                    ",
                "+                    ",
                "+                    float lineWidth = appearanceStyle.getFont().getStringWidth(paragraph.getText()) *",
                "+                            appearanceStyle.getFontSize() / FONTSCALE;",
                "+                    ",
                "+                    if (lineWidth < width) ",
                "+                    {",
                "+                        switch (textAlignment)",
                "+                        {",
                "+                        case CENTER:",
                "+                            startOffset = (width - lineWidth)/2;",
                "+                            break;",
                "+                        case RIGHT:",
                "+                            startOffset = width - lineWidth;",
                "+                            break;",
                "+                        case JUSTIFY:",
                "+                        default:",
                "+                            startOffset = 0f;",
                "+                        }",
                "+                    }",
                "+                    ",
                "+                    contents.newLineAtOffset(horizontalOffset + startOffset, verticalOffset);",
                "+                    contents.showText(paragraph.getText());",
                "+                }",
                "+            }",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Process lines for output. ",
                "+     *",
                "+     * Process lines for an individual paragraph and generate the ",
                "+     * commands for the content stream to show the text.",
                "+     * ",
                "+     * @param lines the lines to process.",
                "+     * @throws IOException if there is an error writing to the stream.",
                "+     */",
                "+    private void processLines(List<Line> lines, boolean isFirstParagraph) throws IOException",
                "+    {",
                "+        float wordWidth = 0f;",
                "+",
                "+        float lastPos = 0f;",
                "+        float startOffset = 0f;",
                "+        float interWordSpacing = 0f;",
                "+        ",
                "+        for (Line line : lines)",
                "+        {",
                "+            switch (textAlignment)",
                "+            {",
                "+            case CENTER:",
                "+                startOffset = (width - line.getWidth())/2;",
                "+                break;",
                "+            case RIGHT:",
                "+                startOffset = width - line.getWidth();",
                "+                break;",
                "+            case JUSTIFY:",
                "+                if (lines.indexOf(line) != lines.size() -1)",
                "+                {",
                "+                    interWordSpacing = line.getInterWordSpacing(width);",
                "+                }",
                "+                break;",
                "+            default:",
                "+                startOffset = 0f;",
                "+            }",
                "+            ",
                "+            float offset = -lastPos + startOffset + horizontalOffset;",
                "+            ",
                "+            if (lines.indexOf(line) == 0 && isFirstParagraph)",
                "+            {",
                "+                contents.newLineAtOffset(offset, verticalOffset);",
                "+            }",
                "+            else",
                "+            {",
                "+                // keep the last position",
                "+                verticalOffset = verticalOffset - appearanceStyle.getLeading();",
                "+                contents.newLineAtOffset(offset, - appearanceStyle.getLeading());",
                "+            }",
                "+",
                "+            lastPos += offset; ",
                "+",
                "+            List<Word> words = line.getWords();",
                "+            for (Word word : words)",
                "+            {",
                "+                contents.showText(word.getText());",
                "+                wordWidth = (Float) word.getAttributes().getIterator().getAttribute(TextAttribute.WIDTH);",
                "+                if (words.indexOf(word) != words.size() -1)",
                "+                {",
                "+                    contents.newLineAtOffset(wordWidth + interWordSpacing, 0f);",
                "+                    lastPos = lastPos + wordWidth + interWordSpacing;",
                "+                }",
                "+            }",
                "+        }",
                "+        horizontalOffset = horizontalOffset - lastPos;",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4212": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4212",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8a83632171863ba52fda21eeec4ceb2232cbc721",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530732425,
            "hunks": 1,
            "message": "PDFBOX-4242: fix javadoc git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1835081 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "index dd5c7255c..f2e225997 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java",
                "@@ -203,4 +203,4 @@ public class PDType0Font extends PDFont implements PDVectorFont",
                "      * @param closeTTF whether to close the ttf parameter after embedding. Must be true when the ttf",
                "-     * parameter was created in the load(), false when the ttf parameter was passed to the load()",
                "-     * method.",
                "+     * parameter was created in the load() method, false when the ttf parameter was passed to the",
                "+     * load() method.",
                "      * @param vertical"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType0Font.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4242": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4242",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f2db0f33b3566b98418065bbe238fcd5e05ce11c",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530207055,
            "hunks": 4,
            "message": "PDFBOX-3353: correct drawing of /Comment, use outer shape only, prepaint area with CA ca 0.6, draw rectangle in reverse order to get donut effect, make width thicker git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834631 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index 5c49ce015..42a52117e 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -597,8 +597,18 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         contentStream.setLineCapStyle(0);",
                "-        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+        contentStream.setLineWidth(200);",
                "+        // Adobe first fills a white rectangle with CA ca 0.6, so do we",
                "+        contentStream.saveGraphicsState();",
                "+        contentStream.setLineWidth(1);",
                "+        PDExtendedGraphicsState gs = new PDExtendedGraphicsState();",
                "+        gs.setAlphaSourceFlag(false);",
                "+        gs.setStrokingAlphaConstant(0.6f);",
                "+        gs.setNonStrokingAlphaConstant(0.6f);",
                "+        gs.setBlendMode(BlendMode.NORMAL);",
                "+        contentStream.setGraphicsStateParameters(gs);",
                "+        contentStream.setNonStrokingColor(1f);",
                "         contentStream.addRect(0.3f, 0.3f, 18-0.6f, 18-0.6f);",
                "-        contentStream.stroke();",
                "+        contentStream.fill();",
                "+        contentStream.restoreGraphicsState();",
                "-        contentStream.setNonStrokingColor(0);",
                "         contentStream.transform(Matrix.getScaleInstance(0.003f, 0.003f));",
                "@@ -606,3 +616,3 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        // shape from Font Awesome by \"printing\" comment.svg into a PDF",
                "+        // outer shape from Font Awesome by \"printing\" comment.svg into a PDF",
                "         contentStream.moveTo(2549, 5269);",
                "@@ -618,15 +628,10 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         contentStream.closePath();",
                "-        contentStream.moveTo(2549, 2035);",
                "-        contentStream.curveTo(2315, 2035, 2083, 2071, 1860, 2141);",
                "-        contentStream.lineTo(1661, 2204);",
                "-        contentStream.lineTo(1490, 2083);",
                "-        contentStream.curveTo(1364, 1994, 1192, 1895, 984, 1828);",
                "-        contentStream.curveTo(1048, 1935, 1111, 2054, 1159, 2182);",
                "-        contentStream.lineTo(1252, 2429);",
                "-        contentStream.lineTo(1071, 2620);",
                "-        contentStream.curveTo(912, 2790, 721, 3070, 721, 3441);",
                "-        contentStream.curveTo(721, 4216, 1541, 4847, 2549, 4847);",
                "-        contentStream.curveTo(3558, 4847, 4378, 4216, 4378, 3441);",
                "-        contentStream.curveTo(4378, 2666, 3558, 2035, 2549, 2035);",
                "-        contentStream.fill();",
                "+",
                "+        // can't use addRect: if we did that, we wouldn't get the donut effect",
                "+        contentStream.moveTo(0.3f / 0.003f - 500, 0.3f / 0.003f + 300);",
                "+        contentStream.lineTo(0.3f / 0.003f - 500, 0.3f / 0.003f + 300 + 17.4f / 0.003f);",
                "+        contentStream.lineTo(0.3f / 0.003f - 500 + 17.4f / 0.003f, 0.3f / 0.003f + 300 + 17.4f / 0.003f);",
                "+        contentStream.lineTo(0.3f / 0.003f - 500 + 17.4f / 0.003f, 0.3f / 0.003f + 300);",
                "+",
                "+        contentStream.closeAndFillAndStroke();",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "49254d2d8bafa7ea4f95ae5dd1dcffdaae557492",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527529586,
            "hunks": 18,
            "message": "PDFBOX-3353: move drawing of callout line before rectangle drawing; extract non stroking color from /DA which Adobe uses as stroking color git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832412 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "index 6cd839ea9..08631c951 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "@@ -21,2 +21,9 @@ import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "+import org.apache.fontbox.util.Charsets;",
                "+import org.apache.pdfbox.contentstream.PDFStreamEngine;",
                "+import org.apache.pdfbox.contentstream.operator.Operator;",
                "+import org.apache.pdfbox.cos.COSArray;",
                "+import org.apache.pdfbox.cos.COSBase;",
                "+import org.apache.pdfbox.cos.COSObject;",
                "+import org.apache.pdfbox.pdfparser.PDFStreamParser;",
                " import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "@@ -24,3 +31,5 @@ import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                " import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK;",
                " import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                "@@ -64,3 +73,2 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         AnnotationBorder ab = AnnotationBorder.getAnnotationBorder(annotation, annotation.getBorderStyle());",
                "-        PDColor color = annotation.getColor();",
                "@@ -76,7 +84,2 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         }",
                "-        if (color == null || color.getComponents().length == 0)",
                "-        {",
                "-            //TODO remove this when we've managed to parse /DA",
                "-            color = new PDColor(new float[]{0}, PDDeviceGray.INSTANCE);",
                "-        }",
                "@@ -84,3 +87,2 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-",
                "         try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "@@ -91,4 +93,6 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-            //TODO Adobe uses the last non stroking color from /DA as stroking color. WTF????",
                "-            boolean hasStroke = cs.setStrokingColorOnDemand(color);",
                "+            // Adobe uses the last non stroking color from /DA as stroking color!",
                "+            PDColor strokingColor = extractNonStrokingColor(annotation);",
                "+            boolean hasStroke = cs.setStrokingColorOnDemand(strokingColor);",
                "+",
                "             if (ab.dashArray != null)",
                "@@ -99,2 +103,53 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "+            // draw callout line(s)",
                "+            // must be done before retangle paint to avoid a line cutting through cloud",
                "+            // see CTAN-example-Annotations.pdf",
                "+            for (int i = 0; i < pathsArray.length / 2; ++i)",
                "+            {",
                "+                float x = pathsArray[i * 2];",
                "+                float y = pathsArray[i * 2 + 1];",
                "+                if (i == 0)",
                "+                {",
                "+                    if (SHORT_STYLES.contains(annotation.getLineEndingStyle()))",
                "+                    {",
                "+                        // modify coordinate to shorten the segment",
                "+                        // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "+                        float x1 = pathsArray[2];",
                "+                        float y1 = pathsArray[3];",
                "+                        float len = (float) (Math.sqrt(Math.pow(x - x1, 2) + Math.pow(y - y1, 2)));",
                "+                        if (Float.compare(len, 0) != 0)",
                "+                        {",
                "+                            x += (x1 - x) / len * ab.width;",
                "+                            y += (y1 - y) / len * ab.width;",
                "+                        }",
                "+                    }",
                "+                    cs.moveTo(x, y);",
                "+                }",
                "+                else",
                "+                {",
                "+                    cs.lineTo(x, y);",
                "+                }",
                "+            }",
                "+            cs.stroke();",
                "+",
                "+            // do a transform so that first \"arm\" is imagined flat, like in line handler",
                "+            // the alternative would be to apply the transform to the LE shapes directly,",
                "+            // which would be more work and produce code difficult to understand",
                "+            // paint the styles here and after line(s) draw, to avoid line crossing a filled shape",
                "+            if (\"FreeTextCallout\".equals(annotation.getIntent())",
                "+                    && !LE_NONE.equals(annotation.getLineEndingStyle())",
                "+                    && pathsArray.length >= 4)",
                "+            {",
                "+                // check only needed to avoid q cm Q if LE_NONE",
                "+                float x2 = pathsArray[2];",
                "+                float y2 = pathsArray[3];",
                "+                float x1 = pathsArray[0];",
                "+                float y1 = pathsArray[1];",
                "+                double angle = Math.atan2(y2 - y1, x2 - x1);",
                "+                cs.saveGraphicsState();",
                "+                cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "+                drawStyle(annotation.getLineEndingStyle(), cs, 0, 0, ab.width, hasStroke, hasBackground);",
                "+                cs.restoreGraphicsState();",
                "+            }",
                "+",
                "@@ -185,24 +240,47 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             }",
                "+        }",
                "+        catch (IOException ex)",
                "+        {",
                "+            LOG.error(ex);",
                "+        }",
                "+    }",
                "-            // draw callout line(s)",
                "-            for (int i = 0; i < pathsArray.length / 2; ++i)",
                "+    // get the last non stroking color from the /DA entry",
                "+    private PDColor extractNonStrokingColor(PDAnnotationFreeText annotation)",
                "+    {",
                "+        // It could also work with a regular expression, but that should be written so that",
                "+        // \"/LucidaConsole 13.94766 Tf .392 .585 .93 rg\" does not produce \"2 .585 .93 rg\" as result",
                "+        // Another alternative might be to create a PDDocument and a PDPage with /DA content as /Content,",
                "+        // process the whole thing and then get the non stroking color.",
                "+",
                "+        PDColor strokingColor = new PDColor(new float[]{0}, PDDeviceGray.INSTANCE);",
                "+        String defaultAppearance = annotation.getDefaultAppearance();",
                "+        if (defaultAppearance == null)",
                "+        {",
                "+            return strokingColor;",
                "+        }",
                "+",
                "+        try",
                "+        {",
                "+            // not sure if charset is correct, but we only need numbers and simple characters",
                "+            PDFStreamParser parser = new PDFStreamParser(defaultAppearance.getBytes(Charsets.US_ASCII));",
                "+            COSArray arguments = new COSArray();",
                "+            COSArray colors = null;",
                "+            Operator graphicOp = null;",
                "+            for (Object token = parser.parseNextToken(); token != null; token = parser.parseNextToken())",
                "             {",
                "-                float x = pathsArray[i * 2];",
                "-                float y = pathsArray[i * 2 + 1];",
                "-                if (i == 0)",
                "+                if (token instanceof COSObject)",
                "                 {",
                "-                    if (SHORT_STYLES.contains(annotation.getLineEndingStyle()))",
                "+                    arguments.add(((COSObject) token).getObject());",
                "+                }",
                "+                else if (token instanceof Operator)",
                "+                {",
                "+                    Operator op = (Operator) token;",
                "+                    String name = op.getName();",
                "+                    if (\"g\".equals(name) || \"rg\".equals(name) || \"k\".equals(name))",
                "                     {",
                "-                        // modify coordinate to shorten the segment",
                "-                        // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "-                        float x1 = pathsArray[2];",
                "-                        float y1 = pathsArray[3];",
                "-                        float len = (float) (Math.sqrt(Math.pow(x - x1, 2) + Math.pow(y - y1, 2)));",
                "-                        if (Float.compare(len, 0) != 0)",
                "-                        {",
                "-                            x += (x1 - x) / len * ab.width;",
                "-                            y += (y1 - y) / len * ab.width;",
                "-                        }",
                "+                        graphicOp = op;",
                "+                        colors = arguments;",
                "                     }",
                "-                    cs.moveTo(x, y);",
                "+                    arguments = new COSArray();",
                "                 }",
                "@@ -210,23 +288,21 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 {",
                "-                    cs.lineTo(x, y);",
                "+                    arguments.add((COSBase) token);",
                "                 }",
                "             }",
                "-            cs.stroke();",
                "-",
                "-            // do a transform so that first \"arm\" is imagined flat, like in line handler",
                "-            // the alternative would be to apply the transform to the LE shapes directly,",
                "-            // which would be more work and produce code difficult to understand",
                "-            // paint the styles here and after line(s) draw, to avoid line crossing a filled shape",
                "-            if (\"FreeTextCallout\".equals(annotation.getIntent())",
                "-                    && !LE_NONE.equals(annotation.getLineEndingStyle())",
                "-                    && pathsArray.length >= 4)",
                "+            if (graphicOp != null)",
                "             {",
                "-                // check only needed to avoid q cm Q if LE_NONE",
                "-                float x2 = pathsArray[2];",
                "-                float y2 = pathsArray[3];",
                "-                float x1 = pathsArray[0];",
                "-                float y1 = pathsArray[1];",
                "-                double angle = Math.atan2(y2 - y1, x2 - x1);",
                "-                cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "-                drawStyle(annotation.getLineEndingStyle(), cs, 0, 0, ab.width, hasStroke, hasBackground);",
                "+                switch (graphicOp.getName())",
                "+                {",
                "+                    case \"g\":",
                "+                        strokingColor = new PDColor(colors, PDDeviceGray.INSTANCE);",
                "+                        break;",
                "+                    case \"rg\":",
                "+                        strokingColor = new PDColor(colors, PDDeviceRGB.INSTANCE);",
                "+                        break;",
                "+                    case \"k\":",
                "+                        strokingColor = new PDColor(colors, PDDeviceCMYK.INSTANCE);",
                "+                        break;",
                "+                    default:",
                "+                        break;",
                "+                }",
                "             }",
                "@@ -235,4 +311,5 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         {",
                "-            LOG.error(ex);",
                "+            LOG.warn(\"Problem parsing /DA, will use default black\", ex);",
                "         }",
                "+        return strokingColor;",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "be5a1b3bf20a54814acd7812b6c820029a275507",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524674477,
            "hunks": 16,
            "message": "PDFBOX-3353: add creation of cloudy borders, by Jani Pehkonen git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830098 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java",
                "new file mode 100644",
                "index 000000000..19ad102f5",
                "--- /dev/null",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java",
                "@@ -0,0 +1,1087 @@",
                "+/*",
                "+ * Licensed to the Apache Software Foundation (ASF) under one or more",
                "+ * contributor license agreements.  See the NOTICE file distributed with",
                "+ * this work for additional information regarding copyright ownership.",
                "+ * The ASF licenses this file to You under the Apache License, Version 2.0",
                "+ * (the \"License\"); you may not use this file except in compliance with",
                "+ * the License.  You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.pdfbox.pdmodel.interactive.annotation.handlers;",
                "+",
                "+import java.awt.geom.AffineTransform;",
                "+import java.awt.geom.Ellipse2D;",
                "+import java.awt.geom.PathIterator;",
                "+import java.awt.geom.Point2D;",
                "+import java.io.IOException;",
                "+import java.util.ArrayList;",
                "+",
                "+import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+",
                "+/**",
                "+ * Generates annotation appearances with a cloudy border.",
                "+ * <p>",
                "+ * Dashed stroke styles are not recommended with cloudy borders. The result would",
                "+ * not look good because some parts of the arcs are traced twice by the stroked",
                "+ * path. Actually Acrobat Reader's line style dialog does not allow to choose a",
                "+ * dashed and a cloudy style at the same time.",
                "+ */",
                "+",
                "+class CloudyBorder",
                "+{",
                "+    private static final double ANGLE_180_DEG = Math.PI;",
                "+    private static final double ANGLE_90_DEG = Math.PI / 2;",
                "+    private static final double ANGLE_34_DEG = Math.toRadians(34);",
                "+    private static final double ANGLE_12_DEG = Math.toRadians(12);",
                "+",
                "+    private final PDAppearanceContentStream output;",
                "+    private final PDRectangle annotRect;",
                "+    private final double intensity;",
                "+    private final double lineWidth;",
                "+    private PDRectangle rectWithDiff;",
                "+    private boolean outputStarted = false;",
                "+    private double bboxMinX;",
                "+    private double bboxMinY;",
                "+    private double bboxMaxX;",
                "+    private double bboxMaxY;",
                "+",
                "+    /**",
                "+     * Creates a new <code>CloudyBorder</code> that writes to the specified",
                "+     * content stream.",
                "+     *",
                "+     * @param stream content stream",
                "+     * @param intensity intensity of cloudy effect (entry <code>I</code>); typically 1.0 or 2.0",
                "+     * @param lineWidth line width for annotation border (entry <code>W</code>)",
                "+     * @param rect annotation rectangle (entry <code>Rect</code>)",
                "+     */",
                "+    CloudyBorder(PDAppearanceContentStream stream, double intensity,",
                "+    double lineWidth, PDRectangle rect)",
                "+    {",
                "+        this.output = stream;",
                "+        this.intensity = intensity;",
                "+        this.lineWidth = lineWidth;",
                "+        this.annotRect = rect;",
                "+    }",
                "+",
                "+    /**",
                "+     * Creates a cloudy border for a rectangular annotation.",
                "+     * The rectangle is specified by the <code>RD</code> entry and the",
                "+     * <code>Rect</code> entry that was passed in to the constructor.",
                "+     * <p>",
                "+     * This can be used for Square and FreeText annotations. However, this does",
                "+     * not produce the text and the callout line for FreeTexts.",
                "+     *",
                "+     * @param rd entry <code>RD</code>, or null if the entry does not exist",
                "+     * @throws IOException If there is an error writing to the stream.",
                "+     */",
                "+    void createCloudyRectangle(PDRectangle rd) throws IOException",
                "+    {",
                "+        rectWithDiff = applyRectDiff(rd, lineWidth / 2);",
                "+        double left = rectWithDiff.getLowerLeftX();",
                "+        double bottom = rectWithDiff.getLowerLeftY();",
                "+        double right = rectWithDiff.getUpperRightX();",
                "+        double top = rectWithDiff.getUpperRightY();",
                "+",
                "+        cloudyRectangleImpl(left, bottom, right, top, false);",
                "+        finish();",
                "+    }",
                "+",
                "+    /**",
                "+     * Creates a cloudy border for a Polygon annotation.",
                "+     *",
                "+     * @param path polygon path",
                "+     * @throws IOException If there is an error writing to the stream.",
                "+     */",
                "+    void createCloudyPolygon(float[][] path) throws IOException",
                "+    {",
                "+        int n = path.length;",
                "+        Point2D.Double[] polygon = new Point2D.Double[n];",
                "+",
                "+        for (int i = 0; i < n; i++)",
                "+        {",
                "+            float[] array = path[i];",
                "+            if (array.length == 2)",
                "+            {",
                "+                polygon[i] = new Point2D.Double(array[0], array[1]);",
                "+            }",
                "+            else if (array.length == 6)",
                "+            {",
                "+                // TODO Curve segments are not yet supported in cloudy border.",
                "+                polygon[i] = new Point2D.Double(array[4], array[5]);",
                "+            }",
                "+        }",
                "+",
                "+        cloudyPolygonImpl(polygon, false);",
                "+        finish();",
                "+    }",
                "+",
                "+    /**",
                "+     * Creates a cloudy border for a Circle annotation.",
                "+     * The ellipse is specified by the <code>RD</code> entry and the",
                "+     * <code>Rect</code> entry that was passed in to the constructor.",
                "+     *",
                "+     * @param rd entry <code>RD</code>, or null if the entry does not exist",
                "+     * @throws IOException If there is an error writing to the stream.",
                "+     */",
                "+    void createCloudyEllipse(PDRectangle rd) throws IOException",
                "+    {",
                "+        rectWithDiff = applyRectDiff(rd, 0);",
                "+        double left = rectWithDiff.getLowerLeftX();",
                "+        double bottom = rectWithDiff.getLowerLeftY();",
                "+        double right = rectWithDiff.getUpperRightX();",
                "+        double top = rectWithDiff.getUpperRightY();",
                "+",
                "+        cloudyEllipseImpl(left, bottom, right, top);",
                "+        finish();",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the <code>BBox</code> entry (bounding box) for the",
                "+     * appearance stream form XObject.",
                "+     *",
                "+     * @return Bounding box for appearance stream form XObject.",
                "+     */",
                "+    PDRectangle getBBox()",
                "+    {",
                "+        return getRectangle();",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the updated <code>Rect</code> entry for the annotation.",
                "+     * The rectangle completely contains the cloudy border.",
                "+     *",
                "+     * @return Annotation <code>Rect</code>.",
                "+     */",
                "+    PDRectangle getRectangle()",
                "+    {",
                "+        return new PDRectangle((float)bboxMinX, (float)bboxMinY,",
                "+            (float)(bboxMaxX - bboxMinX), (float)(bboxMaxY - bboxMinY));",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the <code>Matrix</code> entry for the appearance stream form XObject.",
                "+     *",
                "+     * @return Matrix for appearance stream form XObject.",
                "+     */",
                "+    AffineTransform getMatrix()",
                "+    {",
                "+        return AffineTransform.getTranslateInstance(-bboxMinX, -bboxMinY);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the updated <code>RD</code> entry for Square and Circle annotations.",
                "+     *",
                "+     * @return Annotation <code>RD</code> value.",
                "+     */",
                "+    PDRectangle getRectDifference()",
                "+    {",
                "+        if (annotRect == null)",
                "+        {",
                "+            float d = (float)lineWidth / 2;",
                "+            return new PDRectangle(d, d, (float)lineWidth, (float)lineWidth);",
                "+        }",
                "+",
                "+        PDRectangle re = (rectWithDiff != null) ? rectWithDiff : annotRect;",
                "+",
                "+        float left = re.getLowerLeftX() - (float)bboxMinX;",
                "+        float bottom = re.getLowerLeftY() - (float)bboxMinY;",
                "+        float right = (float)bboxMaxX - re.getUpperRightX();",
                "+        float top = (float)bboxMaxY - re.getUpperRightY();",
                "+",
                "+        return new PDRectangle(left, bottom, right - left, top - bottom);",
                "+    }",
                "+",
                "+    private static double cosine(double dx, double hypot)",
                "+    {",
                "+        if (Double.compare(hypot, 0.0) == 0)",
                "+        {",
                "+            return 0;",
                "+        }",
                "+        return dx / hypot;",
                "+    }",
                "+",
                "+    private static double sine(double dy, double hypot)",
                "+    {",
                "+        if (Double.compare(hypot, 0.0) == 0)",
                "+        {",
                "+            return 0;",
                "+        }",
                "+        return dy / hypot;",
                "+    }",
                "+",
                "+    /**",
                "+     * Cloudy rectangle implementation is based on converting the rectangle",
                "+     * to a polygon.",
                "+     */",
                "+    private void cloudyRectangleImpl(double left, double bottom,",
                "+    double right, double top, boolean isEllipse) throws IOException",
                "+    {",
                "+        double w = right - left, h = top - bottom;",
                "+",
                "+        if (intensity <= 0.0)",
                "+        {",
                "+            output.addRect((float)left, (float)bottom, (float)w, (float)h);",
                "+            bboxMinX = left;",
                "+            bboxMinY = bottom;",
                "+            bboxMaxX = right;",
                "+            bboxMaxY = top;",
                "+            return;",
                "+        }",
                "+",
                "+        // Make a polygon with direction equal to the positive angle direction.",
                "+        Point2D.Double[] polygon;",
                "+",
                "+        if (w < 1.0)",
                "+        {",
                "+            polygon = new Point2D.Double[]",
                "+            {",
                "+                new Point2D.Double(left, bottom), new Point2D.Double(left, top),",
                "+                new Point2D.Double(left, bottom)",
                "+            };",
                "+        }",
                "+        else if (h < 1.0)",
                "+        {",
                "+            polygon = new Point2D.Double[]",
                "+            {",
                "+                new Point2D.Double(left, bottom), new Point2D.Double(right, bottom),",
                "+                new Point2D.Double(left, bottom)",
                "+            };",
                "+        }",
                "+        else",
                "+        {",
                "+            polygon = new Point2D.Double[]",
                "+            {",
                "+                new Point2D.Double(left, bottom), new Point2D.Double(right, bottom),",
                "+                new Point2D.Double(right, top), new Point2D.Double(left, top),",
                "+                new Point2D.Double(left, bottom)",
                "+            };",
                "+        }",
                "+",
                "+        cloudyPolygonImpl(polygon, isEllipse);",
                "+    }",
                "+",
                "+    /**",
                "+     * Cloudy polygon implementation.",
                "+     *",
                "+     * @param vertices polygon vertices; first and last point must be equal",
                "+     * @param isEllipse specifies if the polygon represents an ellipse",
                "+     */",
                "+    private void cloudyPolygonImpl(Point2D.Double[] vertices, boolean isEllipse)",
                "+    throws IOException",
                "+    {",
                "+        Point2D.Double[] polygon = removeZeroLengthSegments(vertices);",
                "+        getPositivePolygon(polygon);",
                "+        int numPoints = polygon.length;",
                "+",
                "+        if (numPoints < 2)",
                "+        {",
                "+            return;",
                "+        }",
                "+        if (intensity <= 0.0)",
                "+        {",
                "+            moveTo(polygon[0]);",
                "+            for (int i = 1; i < numPoints; i++)",
                "+            {",
                "+                lineTo(polygon[i]);",
                "+            }",
                "+            return;",
                "+        }",
                "+",
                "+        double cloudRadius = isEllipse ? getEllipseCloudRadius() : getPolygonCloudRadius();",
                "+",
                "+        if (cloudRadius < 0.5)",
                "+        {",
                "+            cloudRadius = 0.5;",
                "+        }",
                "+",
                "+        final double k = Math.cos(ANGLE_34_DEG);",
                "+        final double advIntermDefault = 2 * k * cloudRadius;",
                "+        final double advCornerDefault = k * cloudRadius;",
                "+        double[] array = new double[2];",
                "+        double anglePrev = 0;",
                "+",
                "+        // The number of curls per polygon segment is hardly ever an integer,",
                "+        // so the length of some curls must be adjustable. We adjust the angle",
                "+        // of the trailing arc of corner curls and the leading arc of the first",
                "+        // intermediate curl.",
                "+        // In each polygon segment, we have n intermediate curls plus one half of a",
                "+        // corner curl at each end. One of the n intermediate curls is adjustable.",
                "+        // Thus the number of fixed (or unadjusted) intermediate curls is n - 1.",
                "+",
                "+        // Find the adjusted angle `alpha` for the first corner curl.",
                "+        int n0 = computeParamsPolygon(advIntermDefault, advCornerDefault, k, cloudRadius,",
                "+            polygon[numPoints - 2].distance(polygon[0]), array);",
                "+        double alphaPrev = (n0 == 0) ? array[0] : ANGLE_34_DEG;",
                "+",
                "+        for (int j = 0; j + 1 < numPoints; j++)",
                "+        {",
                "+            Point2D.Double pt = polygon[j];",
                "+            Point2D.Double ptNext = polygon[j + 1];",
                "+            double length = pt.distance(ptNext);",
                "+            if (Double.compare(length, 0.0) == 0)",
                "+            {",
                "+                alphaPrev = ANGLE_34_DEG;",
                "+                continue;",
                "+            }",
                "+",
                "+            // n is the number of intermediate curls in the current polygon segment.",
                "+            int n = computeParamsPolygon(advIntermDefault, advCornerDefault, k,",
                "+                cloudRadius, length, array);",
                "+            if (n < 0)",
                "+            {",
                "+                if (!outputStarted)",
                "+                {",
                "+                    moveTo(pt);",
                "+                }",
                "+                continue;",
                "+            }",
                "+",
                "+            double alpha = array[0], dx = array[1];",
                "+            double angleCur = Math.atan2(ptNext.y - pt.y, ptNext.x - pt.x);",
                "+            if (j == 0)",
                "+            {",
                "+                Point2D.Double ptPrev = polygon[numPoints - 2];",
                "+                anglePrev = Math.atan2(pt.y - ptPrev.y, pt.x - ptPrev.x);",
                "+            }",
                "+",
                "+            double cos = cosine(ptNext.x - pt.x, length);",
                "+            double sin = sine(ptNext.y - pt.y, length);",
                "+            double x = pt.x;",
                "+            double y = pt.y;",
                "+",
                "+            addCornerCurl(anglePrev, angleCur, cloudRadius, pt.x, pt.y, alpha,",
                "+                alphaPrev, !outputStarted);",
                "+            // Proceed to the center point of the first intermediate curl.",
                "+            double adv = 2 * k * cloudRadius + 2 * dx;",
                "+            x += adv * cos;",
                "+            y += adv * sin;",
                "+",
                "+            // Create the first intermediate curl.",
                "+            int numInterm = n;",
                "+            if (n >= 1)",
                "+            {",
                "+                addFirstIntermediateCurl(angleCur, cloudRadius, alpha, x, y);",
                "+                x += advIntermDefault * cos;",
                "+                y += advIntermDefault * sin;",
                "+                numInterm = n - 1;",
                "+            }",
                "+",
                "+            // Create one intermediate curl and replicate it along the polygon segment.",
                "+            Point2D.Double[] template = getIntermediateCurlTemplate(angleCur, cloudRadius);",
                "+            for (int i = 0; i < numInterm; i++)",
                "+            {",
                "+                outputCurlTemplate(template, x, y);",
                "+                x += advIntermDefault * cos;",
                "+                y += advIntermDefault * sin;",
                "+            }",
                "+",
                "+            anglePrev = angleCur;",
                "+            alphaPrev = (n == 0) ? alpha : ANGLE_34_DEG;",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Computes parameters for a cloudy polygon: n, alpha, and dx.",
                "+     */",
                "+    private int computeParamsPolygon(double advInterm, double advCorner, double k,",
                "+    double r, double length, double[] array)",
                "+    {",
                "+        if (Double.compare(length, 0.0) == 0)",
                "+        {",
                "+            array[0] = ANGLE_34_DEG;",
                "+            array[1] = 0;",
                "+            return -1;",
                "+        }",
                "+",
                "+        // n is the number of intermediate curls in the current polygon segment",
                "+        int n = (int) Math.ceil((length - 2 * advCorner) / advInterm);",
                "+",
                "+        // Fitting error along polygon segment",
                "+        double e = length - (2 * advCorner + n * advInterm);",
                "+        // Fitting error per each adjustable half curl",
                "+        double dx = e / 2;",
                "+",
                "+        // Convert fitting error to an angle that can be used to control arcs.",
                "+        double arg = (k * r + dx) / r;",
                "+        double alpha = (arg < -1.0 || arg > 1.0) ? 0.0 : Math.acos(arg);",
                "+",
                "+        array[0] = alpha;",
                "+        array[1] = dx;",
                "+        return n;",
                "+    }",
                "+",
                "+    /**",
                "+     * Creates a corner curl for polygons and ellipses.",
                "+     */",
                "+    private void addCornerCurl(double anglePrev, double angleCur, double radius,",
                "+    double cx, double cy, double alpha, double alphaPrev, boolean addMoveTo)",
                "+    throws IOException",
                "+    {",
                "+        double a = anglePrev + ANGLE_180_DEG + alphaPrev;",
                "+        double b = anglePrev + ANGLE_180_DEG + alphaPrev - Math.toRadians(22);",
                "+        getArcSegment(a, b, cx, cy, radius, radius, null, addMoveTo);",
                "+",
                "+        a = b;",
                "+        b = angleCur - alpha;",
                "+        getArc(a, b, radius, radius, cx, cy, null, false);",
                "+    }",
                "+",
                "+    /**",
                "+     * Generates the first intermediate curl for a cloudy polygon.",
                "+     */",
                "+    private void addFirstIntermediateCurl(double angleCur, double r, double alpha,",
                "+    double cx, double cy) throws IOException",
                "+    {",
                "+        final double D = Math.toRadians(30);",
                "+        double a = angleCur + ANGLE_180_DEG;",
                "+",
                "+        getArcSegment(a + alpha, a + alpha - D, cx, cy, r, r, null, false);",
                "+        getArcSegment(a + alpha - D, a + ANGLE_90_DEG, cx, cy, r, r, null, false);",
                "+        getArcSegment(a + ANGLE_90_DEG, a + ANGLE_180_DEG - ANGLE_34_DEG,",
                "+            cx, cy, r, r, null, false);",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns a template for intermediate curls in a cloudy polygon.",
                "+     */",
                "+    private Point2D.Double[] getIntermediateCurlTemplate(double angleCur, double r)",
                "+    throws IOException",
                "+    {",
                "+        ArrayList<Point2D.Double> points = new ArrayList<>();",
                "+        double a = angleCur + ANGLE_180_DEG;",
                "+",
                "+        getArcSegment(a + ANGLE_34_DEG, a + ANGLE_12_DEG, 0, 0, r, r, points, false);",
                "+        getArcSegment(a + ANGLE_12_DEG, a + ANGLE_90_DEG,  0, 0, r, r, points, false);",
                "+        getArcSegment(a + ANGLE_90_DEG, a + ANGLE_180_DEG - ANGLE_34_DEG,",
                "+            0, 0, r, r, points, false);",
                "+",
                "+        return points.toArray(new Point2D.Double[points.size()]);",
                "+    }",
                "+",
                "+    /**",
                "+     * Writes the curl template points to the output and applies translation (x, y).",
                "+     */",
                "+    private void outputCurlTemplate(Point2D.Double[] template, double x, double y)",
                "+    throws IOException",
                "+    {",
                "+        int n = template.length, i = 0;",
                "+        if ((n % 3) == 1)",
                "+        {",
                "+            Point2D.Double a = template[0];",
                "+            moveTo(a.x + x, a.y + y);",
                "+            i++;",
                "+        }",
                "+        for (; i + 2 < n; i += 3)",
                "+        {",
                "+            Point2D.Double a = template[i];",
                "+            Point2D.Double b = template[i + 1];",
                "+            Point2D.Double c = template[i + 2];",
                "+            curveTo(a.x + x, a.y + y, b.x + x, b.y + y, c.x + x, c.y + y);",
                "+        }",
                "+    }",
                "+",
                "+    private PDRectangle applyRectDiff(PDRectangle rd, double min)",
                "+    {",
                "+        float rectLeft = annotRect.getLowerLeftX();",
                "+        float rectBottom = annotRect.getLowerLeftY();",
                "+        float rectRight = annotRect.getUpperRightX();",
                "+        float rectTop = annotRect.getUpperRightY();",
                "+",
                "+        // Normalize",
                "+        rectLeft = Math.min(rectLeft, rectRight);",
                "+        rectBottom = Math.min(rectBottom, rectTop);",
                "+        rectRight = Math.max(rectLeft, rectRight);",
                "+        rectTop = Math.max(rectBottom, rectTop);",
                "+",
                "+        double rdLeft, rdBottom, rdRight, rdTop;",
                "+",
                "+        if (rd != null)",
                "+        {",
                "+            rdLeft = Math.max(rd.getLowerLeftX(), min);",
                "+            rdBottom = Math.max(rd.getLowerLeftY(), min);",
                "+            rdRight = Math.max(rd.getUpperRightX(), min);",
                "+            rdTop = Math.max(rd.getUpperRightY(), min);",
                "+        }",
                "+        else",
                "+        {",
                "+            rdLeft = min;",
                "+            rdBottom = min;",
                "+            rdRight = min;",
                "+            rdTop = min;",
                "+        }",
                "+",
                "+        rectLeft += rdLeft;",
                "+        rectBottom += rdBottom;",
                "+        rectRight -= rdRight;",
                "+        rectTop -= rdTop;",
                "+",
                "+        return new PDRectangle(rectLeft, rectBottom, rectRight - rectLeft, rectTop - rectBottom);",
                "+    }",
                "+",
                "+    private void reversePolygon(Point2D.Double[] points)",
                "+    {",
                "+        int len = points.length;",
                "+        int n = len / 2;",
                "+        for (int i = 0; i < n; i++)",
                "+        {",
                "+            int j = len - i - 1;",
                "+            Point2D.Double pi = points[i];",
                "+            Point2D.Double pj = points[j];",
                "+            points[i] = pj;",
                "+            points[j] = pi;",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Makes a polygon whose direction is the same as the positive angle",
                "+     * direction in the coordinate system.",
                "+     * The polygon must not intersect itself.",
                "+     */",
                "+    private void getPositivePolygon(Point2D.Double[] points)",
                "+    {",
                "+        if (getPolygonDirection(points) < 0)",
                "+        {",
                "+            reversePolygon(points);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Returns the direction of the specified polygon.",
                "+     * A positive value indicates that the polygon's direction is the same as the",
                "+     * direction of positive angles in the coordinate system.",
                "+     * A negative value indicates the opposite direction.",
                "+     *",
                "+     * The polygon must not intersect itself. A 2-point polygon is not acceptable.",
                "+     * This is based on the \"shoelace formula\".",
                "+     */",
                "+    private double getPolygonDirection(Point2D.Double[] points)",
                "+    {",
                "+        double a = 0;",
                "+        int len = points.length;",
                "+        for (int i = 0; i < len; i++)",
                "+        {",
                "+            int j = (i + 1) % len;",
                "+            a += points[i].x * points[j].y - points[i].y * points[j].x;",
                "+        }",
                "+        return a;",
                "+    }",
                "+",
                "+    /**",
                "+     * Creates one or more Bezier curves that represent an elliptical arc.",
                "+     * Angles are in radians.",
                "+     * The arc will always proceed in the positive angle direction.",
                "+     * If the argument `out` is null, this writes the results to the instance",
                "+     * variable `output`.",
                "+     */",
                "+    private void getArc(double startAng, double endAng, double rx, double ry,",
                "+    double cx, double cy, ArrayList<Point2D.Double> out, boolean addMoveTo) throws IOException",
                "+    {",
                "+        final double angleIncr = Math.PI / 2;",
                "+        double startx = rx * Math.cos(startAng) + cx;",
                "+        double starty = ry * Math.sin(startAng) + cy;",
                "+",
                "+        double angleTodo = endAng - startAng;",
                "+        while (angleTodo < 0)",
                "+        {",
                "+            angleTodo += 2 * Math.PI;",
                "+        }",
                "+        double sweep = angleTodo, angleDone = 0;",
                "+",
                "+        if (addMoveTo)",
                "+        {",
                "+            if (out != null)",
                "+            {",
                "+                out.add(new Point2D.Double(startx, starty));",
                "+            }",
                "+            else",
                "+            {",
                "+                moveTo(startx, starty);",
                "+            }",
                "+        }",
                "+",
                "+        while (angleTodo > angleIncr)",
                "+        {",
                "+            getArcSegment(startAng + angleDone,",
                "+                startAng + angleDone + angleIncr, cx, cy, rx, ry, out, false);",
                "+            angleDone += angleIncr;",
                "+            angleTodo -= angleIncr;",
                "+        }",
                "+",
                "+        if (angleTodo > 0)",
                "+        {",
                "+            getArcSegment(startAng + angleDone, startAng + sweep, cx, cy, rx, ry, out, false);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Creates a single Bezier curve that represents a section of an elliptical",
                "+     * arc. The sweep angle of the section must not be larger than 90 degrees.",
                "+     * If argument `out` is null, this writes the results to the instance",
                "+     * variable `output`.",
                "+     */",
                "+    private void getArcSegment(double startAng, double endAng, double cx, double cy,",
                "+    double rx, double ry, ArrayList<Point2D.Double> out, boolean addMoveTo) throws IOException",
                "+    {",
                "+        // Algorithm is from the FAQ of the news group comp.text.pdf",
                "+",
                "+        double cos_a = Math.cos(startAng);",
                "+        double sin_a = Math.sin(startAng);",
                "+        double cos_b = Math.cos(endAng);",
                "+        double sin_b = Math.sin(endAng);",
                "+        double denom = Math.sin((endAng - startAng) / 2.0);",
                "+        if (Double.compare(denom, 0.0) == 0)",
                "+        {",
                "+            // This can happen only if endAng == startAng.",
                "+            // The arc sweep angle is zero, so we create no arc at all.",
                "+            if (addMoveTo)",
                "+            {",
                "+                double xs = cx + rx * cos_a;",
                "+                double ys = cy + ry * sin_a;",
                "+                if (out != null)",
                "+                {",
                "+                    out.add(new Point2D.Double(xs, ys));",
                "+                }",
                "+                else",
                "+                {",
                "+                    moveTo(xs, ys);",
                "+                }",
                "+            }",
                "+            return;",
                "+        }",
                "+        double bcp = 1.333333333 * (1 - Math.cos((endAng - startAng) / 2.0)) / denom;",
                "+        double p1x = cx + rx * (cos_a - bcp * sin_a);",
                "+        double p1y = cy + ry * (sin_a + bcp * cos_a);",
                "+        double p2x = cx + rx * (cos_b + bcp * sin_b);",
                "+        double p2y = cy + ry * (sin_b - bcp * cos_b);",
                "+        double p3x = cx + rx * cos_b;",
                "+        double p3y = cy + ry * sin_b;",
                "+",
                "+        if (addMoveTo)",
                "+        {",
                "+            double xs = cx + rx * cos_a;",
                "+            double ys = cy + ry * sin_a;",
                "+            if (out != null)",
                "+            {",
                "+                out.add(new Point2D.Double(xs, ys));",
                "+            }",
                "+            else",
                "+            {",
                "+                moveTo(xs, ys);",
                "+            }",
                "+        }",
                "+",
                "+        if (out != null)",
                "+        {",
                "+            out.add(new Point2D.Double(p1x, p1y));",
                "+            out.add(new Point2D.Double(p2x, p2y));",
                "+            out.add(new Point2D.Double(p3x, p3y));",
                "+        }",
                "+        else",
                "+        {",
                "+            curveTo(p1x, p1y, p2x, p2y, p3x, p3y);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Flattens an ellipse into a polygon.",
                "+     */",
                "+    private static Point2D.Double[] flattenEllipse(double left, double bottom,",
                "+    double right, double top)",
                "+    {",
                "+        Ellipse2D.Double ellipse = new Ellipse2D.Double(left, bottom, right - left, top - bottom);",
                "+        final double flatness = 0.50;",
                "+        PathIterator iterator = ellipse.getPathIterator(null, flatness);",
                "+        double[] coords = new double[6];",
                "+        ArrayList<Point2D.Double> points = new ArrayList<>();",
                "+",
                "+        while (!iterator.isDone())",
                "+        {",
                "+            switch (iterator.currentSegment(coords))",
                "+            {",
                "+                case PathIterator.SEG_MOVETO:",
                "+                case PathIterator.SEG_LINETO:",
                "+                    points.add(new Point2D.Double(coords[0], coords[1]));",
                "+                    break;",
                "+                // Curve segments are not expected because the path iterator is",
                "+                // flattened. SEG_CLOSE can be ignored.",
                "+            }",
                "+            iterator.next();",
                "+        }",
                "+",
                "+        int size = points.size();",
                "+        final double closeTestLimit = 0.05;",
                "+",
                "+        if (size >= 2 && points.get(size - 1).distance(points.get(0)) > closeTestLimit)",
                "+        {",
                "+            points.add(points.get(points.size() - 1));",
                "+        }",
                "+        return points.toArray(new Point2D.Double[points.size()]);",
                "+    }",
                "+",
                "+    /**",
                "+     * Cloudy ellipse implementation.",
                "+     */",
                "+    private void cloudyEllipseImpl(final double leftOrig, final double bottomOrig,",
                "+    final double rightOrig, final double topOrig) throws IOException",
                "+    {",
                "+        if (intensity <= 0.0)",
                "+        {",
                "+            drawBasicEllipse(leftOrig, bottomOrig, rightOrig, topOrig);",
                "+            return;",
                "+        }",
                "+",
                "+        double left = leftOrig, bottom = bottomOrig, right = rightOrig, top = topOrig;",
                "+        double width = right - left, height = top - bottom;",
                "+        double cloudRadius = getEllipseCloudRadius();",
                "+",
                "+        // Omit cloudy border if the ellipse is very small.",
                "+        final double threshold1 = 0.50 * cloudRadius;",
                "+        if (width < threshold1 && height < threshold1)",
                "+        {",
                "+            drawBasicEllipse(left, bottom, right, top);",
                "+            return;",
                "+        }",
                "+",
                "+        // Draw a cloudy rectangle instead of an ellipse when the",
                "+        // width or height is very small.",
                "+        final double threshold2 = 5;",
                "+        if ((width < threshold2 && height > 20) || (width > 20 && height < threshold2))",
                "+        {",
                "+            cloudyRectangleImpl(left, bottom, right, top, true);",
                "+            return;",
                "+        }",
                "+",
                "+        // Decrease radii (while center point does not move). This makes the",
                "+        // \"tails\" of the curls almost touch the ellipse outline.",
                "+        double radiusAdj = Math.sin(ANGLE_12_DEG) * cloudRadius - 1.50;",
                "+        if (width > 2 * radiusAdj)",
                "+        {",
                "+            left += radiusAdj;",
                "+            right -= radiusAdj;",
                "+        }",
                "+        else",
                "+        {",
                "+            double mid = (left + right) / 2;",
                "+            left = mid - 0.10;",
                "+            right = mid + 0.10;",
                "+        }",
                "+        if (height > 2 * radiusAdj)",
                "+        {",
                "+            top -= radiusAdj;",
                "+            bottom += radiusAdj;",
                "+        }",
                "+        else",
                "+        {",
                "+            double mid = (top + bottom) / 2;",
                "+            top = mid + 0.10;",
                "+            bottom = mid - 0.10;",
                "+        }",
                "+",
                "+        // Flatten the ellipse into a polygon. The segment lengths of the flattened",
                "+        // result don't need to be extremely short because the loop below is able to",
                "+        // interpolate between polygon points when it computes the center points",
                "+        // at which each curl is placed.",
                "+",
                "+        Point2D.Double[] flatPolygon = flattenEllipse(left, bottom, right, top);",
                "+        int numPoints = flatPolygon.length;",
                "+        if (numPoints < 2)",
                "+        {",
                "+            return;",
                "+        }",
                "+",
                "+        double totLen = 0;",
                "+        for(int i = 1; i < numPoints; i++){",
                "+            totLen += flatPolygon[i - 1].distance(flatPolygon[i]);",
                "+        }",
                "+",
                "+        final double k = Math.cos(ANGLE_34_DEG);",
                "+        double curlAdvance = 2 * k * cloudRadius;",
                "+        int n = (int) Math.ceil(totLen / curlAdvance);",
                "+        if (n < 2)",
                "+        {",
                "+            drawBasicEllipse(leftOrig, bottomOrig, rightOrig, topOrig);",
                "+            return;",
                "+        }",
                "+",
                "+        curlAdvance = totLen / n;",
                "+        cloudRadius = curlAdvance / (2 * k);",
                "+",
                "+        if (cloudRadius < 0.5)",
                "+        {",
                "+            cloudRadius = 0.5;",
                "+            curlAdvance = 2 * k * cloudRadius;",
                "+        }",
                "+        else if (cloudRadius < 3.0)",
                "+        {",
                "+            // Draw a small circle when the scaled radius becomes very small.",
                "+            // This happens also if intensity is much smaller than 1.",
                "+            drawBasicEllipse(leftOrig, bottomOrig, rightOrig, topOrig);",
                "+            return;",
                "+        }",
                "+",
                "+        // Construct centerPoints array, in which each point is the center point of a curl.",
                "+        // The length of each centerPoints segment ideally equals curlAdv but that",
                "+        // is not true in regions where the ellipse curvature is high.",
                "+",
                "+        int centerPointsLength = n;",
                "+        Point2D.Double[] centerPoints = new Point2D.Double[centerPointsLength];",
                "+        int centerPointsIndex = 0;",
                "+        double lengthRemain = 0;",
                "+        final double comparisonToler = lineWidth * 0.10;",
                "+",
                "+        for (int i = 0; i + 1 < numPoints; i++)",
                "+        {",
                "+            Point2D.Double p1 = flatPolygon[i];",
                "+            Point2D.Double p2 = flatPolygon[i + 1];",
                "+            double dx = p2.x - p1.x, dy = p2.y - p1.y;",
                "+            double length = p1.distance(p2);",
                "+            if (Double.compare(length, 0.0) == 0)",
                "+            {",
                "+                continue;",
                "+            }",
                "+            double lengthTodo = length + lengthRemain;",
                "+            if (lengthTodo >= curlAdvance - comparisonToler || i == numPoints - 2)",
                "+            {",
                "+                double cos = cosine(dx, length), sin = sine(dy, length);",
                "+                double d = curlAdvance - lengthRemain;",
                "+                do",
                "+                {",
                "+                    double x = p1.x + d * cos;",
                "+                    double y = p1.y + d * sin;",
                "+                    if (centerPointsIndex < centerPointsLength)",
                "+                    {",
                "+                        centerPoints[centerPointsIndex++] = new Point2D.Double(x, y);",
                "+                    }",
                "+                    lengthTodo -= curlAdvance;",
                "+                    d += curlAdvance;",
                "+                }",
                "+                while (lengthTodo >= curlAdvance - comparisonToler);",
                "+",
                "+                lengthRemain = lengthTodo;",
                "+                if (lengthRemain < 0)",
                "+                {",
                "+                    lengthRemain = 0;",
                "+                }",
                "+            }",
                "+            else",
                "+            {",
                "+                lengthRemain += length;",
                "+            }",
                "+        }",
                "+",
                "+        // Note: centerPoints does not repeat the first point as the last point",
                "+        // to create a \"closing\" segment.",
                "+",
                "+        // Place a curl at each point of the centerPoints array.",
                "+        // In regions where the ellipse curvature is high, the centerPoints segments",
                "+        // are shorter than the actual distance along the ellipse. Thus we must",
                "+        // again compute arc adjustments like in cloudy polygons.",
                "+",
                "+        numPoints = centerPointsIndex;",
                "+        double anglePrev = 0, alphaPrev = 0;",
                "+",
                "+        for (int i = 0; i < numPoints; i++)",
                "+        {",
                "+            int idxNext = i + 1;",
                "+            if (i + 1 >= numPoints)",
                "+            {",
                "+                idxNext = 0;",
                "+            }",
                "+            Point2D.Double pt = centerPoints[i];",
                "+            Point2D.Double ptNext = centerPoints[idxNext];",
                "+",
                "+            if (i == 0)",
                "+            {",
                "+                Point2D.Double ptPrev = centerPoints[numPoints - 1];",
                "+                anglePrev = Math.atan2(pt.y - ptPrev.y, pt.x - ptPrev.x);",
                "+                alphaPrev = computeParamsEllipse(ptPrev, pt, cloudRadius, curlAdvance);",
                "+            }",
                "+",
                "+            double angleCur = Math.atan2(ptNext.y - pt.y, ptNext.x - pt.x);",
                "+            double alpha = computeParamsEllipse(pt, ptNext, cloudRadius, curlAdvance);",
                "+",
                "+            addCornerCurl(anglePrev, angleCur, cloudRadius, pt.x, pt.y, alpha,",
                "+                alphaPrev, !outputStarted);",
                "+",
                "+            anglePrev = angleCur;",
                "+            alphaPrev = alpha;",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Computes the alpha parameter for an ellipse curl.",
                "+     */",
                "+    private double computeParamsEllipse(Point2D.Double pt, Point2D.Double ptNext,",
                "+    double r, double curlAdv)",
                "+    {",
                "+        double length = pt.distance(ptNext);",
                "+        if (Double.compare(length, 0.0) == 0)",
                "+        {",
                "+            return ANGLE_34_DEG;",
                "+        }",
                "+",
                "+        double e = length - curlAdv;",
                "+        double arg = (curlAdv / 2 + e / 2) / r;",
                "+        return (arg < -1.0 || arg > 1.0) ? 0.0 : Math.acos(arg);",
                "+    }",
                "+",
                "+    private Point2D.Double[] removeZeroLengthSegments(Point2D.Double[] polygon)",
                "+    {",
                "+        int np = polygon.length;",
                "+        if (np <= 2)",
                "+        {",
                "+            return polygon;",
                "+        }",
                "+",
                "+        final double toler = 0.50;",
                "+        int npNew = np;",
                "+        Point2D.Double ptPrev = polygon[0];",
                "+",
                "+        // Don't remove the last point if it equals the first point.",
                "+        for (int i = 1; i < np; i++)",
                "+        {",
                "+            Point2D.Double pt = polygon[i];",
                "+            if (Math.abs(pt.x - ptPrev.x) < toler && Math.abs(pt.y - ptPrev.y) < toler)",
                "+            {",
                "+                polygon[i] = null;",
                "+                npNew--;",
                "+            }",
                "+            ptPrev = pt;",
                "+        }",
                "+",
                "+        if (npNew == np)",
                "+        {",
                "+            return polygon;",
                "+        }",
                "+",
                "+        Point2D.Double[] polygonNew = new Point2D.Double[npNew];",
                "+        int j = 0;",
                "+        for (int i = 0; i < np; i++)",
                "+        {",
                "+            Point2D.Double pt = polygon[i];",
                "+            if (pt != null)",
                "+            {",
                "+                polygonNew[j++] = pt;",
                "+            }",
                "+        }",
                "+",
                "+        return polygonNew;",
                "+    }",
                "+",
                "+    /**",
                "+     * Draws an ellipse without a cloudy border effect.",
                "+     */",
                "+    private void drawBasicEllipse(double left, double bottom, double right, double top)",
                "+    throws IOException",
                "+    {",
                "+        double rx = Math.abs(right - left) / 2;",
                "+        double ry = Math.abs(top - bottom) / 2;",
                "+        double cx = (left + right) / 2;",
                "+        double cy = (bottom + top) / 2;",
                "+        getArc(0, 2 * Math.PI, rx, ry, cx, cy, null, true);",
                "+    }",
                "+",
                "+    private void beginOutput(double x, double y) throws IOException",
                "+    {",
                "+        bboxMinX = x;",
                "+        bboxMinY = y;",
                "+        bboxMaxX = x;",
                "+        bboxMaxY = y;",
                "+        outputStarted = true;",
                "+        // Set line join to bevel to avoid spikes",
                "+        output.setLineJoinStyle(2);",
                "+    }",
                "+",
                "+    private void updateBBox(double x, double y)",
                "+    {",
                "+        bboxMinX = Math.min(bboxMinX, x);",
                "+        bboxMinY = Math.min(bboxMinY, y);",
                "+        bboxMaxX = Math.max(bboxMaxX, x);",
                "+        bboxMaxY = Math.max(bboxMaxY, y);",
                "+    }",
                "+",
                "+    private void moveTo(Point2D.Double p) throws IOException",
                "+    {",
                "+        moveTo(p.x, p.y);",
                "+    }",
                "+",
                "+    private void moveTo(double x, double y) throws IOException",
                "+    {",
                "+        if (outputStarted)",
                "+        {",
                "+            updateBBox(x, y);",
                "+        }",
                "+        else",
                "+        {",
                "+            beginOutput(x, y);",
                "+        }",
                "+",
                "+        output.moveTo((float)x, (float)y);",
                "+    }",
                "+",
                "+    private void lineTo(Point2D.Double p) throws IOException",
                "+    {",
                "+        lineTo(p.x, p.y);",
                "+    }",
                "+",
                "+    private void lineTo(double x, double y) throws IOException",
                "+    {",
                "+        if (outputStarted)",
                "+        {",
                "+            updateBBox(x, y);",
                "+        }",
                "+        else",
                "+        {",
                "+            beginOutput(x, y);",
                "+        }",
                "+",
                "+        output.lineTo((float)x, (float)y);",
                "+    }",
                "+",
                "+    private void curveTo(double ax, double ay, double bx, double by, double cx, double cy)",
                "+    throws IOException",
                "+    {",
                "+        updateBBox(ax, ay);",
                "+        updateBBox(bx, by);",
                "+        updateBBox(cx, cy);",
                "+        output.curveTo((float)ax, (float)ay, (float)bx, (float)by, (float)cx, (float)cy);",
                "+    }",
                "+",
                "+    private void finish() throws IOException",
                "+    {",
                "+        if (outputStarted)",
                "+        {",
                "+            output.closePath();",
                "+        }",
                "+",
                "+        if (lineWidth > 0)",
                "+        {",
                "+            double d = lineWidth / 2;",
                "+            bboxMinX -= d;",
                "+            bboxMinY -= d;",
                "+            bboxMaxX += d;",
                "+            bboxMaxY += d;",
                "+        }",
                "+    }",
                "+",
                "+    private double getEllipseCloudRadius()",
                "+    {",
                "+        // Equation deduced from Acrobat Reader's appearance streams. Circle",
                "+        // annotations have a slightly larger radius than Polygons and Squares.",
                "+        return 4.75 * intensity + 0.5 * lineWidth;",
                "+    }",
                "+",
                "+    private double getPolygonCloudRadius()",
                "+    {",
                "+        // Equation deduced from Acrobat Reader's appearance streams.",
                "+        return 4 * intensity + 0.5 * lineWidth;",
                "+    }",
                "+}",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "index 4cd34e8dd..e6258467f 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "@@ -29,3 +29,5 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCircle;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary;",
                "@@ -68,6 +70,3 @@ public class PDCircleAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 contentStream.setBorderLine(lineWidth, annotation.getBorderStyle());",
                "-                ",
                "-                // the differences rectangle",
                "-                // TODO: this only works for border effect solid. Cloudy needs a different approach.",
                "-                setRectDifference(lineWidth);",
                "+                PDBorderEffectDictionary borderEffect = annotation.getBorderEffect();",
                "@@ -80,25 +79,43 @@ public class PDCircleAppearanceHandler extends PDAbstractAppearanceHandler",
                "-                // lower left corner",
                "-                float x0 = borderEdge.getLowerLeftX();",
                "-                float y0 = borderEdge.getLowerLeftY();",
                "-                // upper right corner",
                "-                float x1 = borderEdge.getUpperRightX();",
                "-                float y1 = borderEdge.getUpperRightY();",
                "-                // mid points",
                "-                float xm = x0 + borderEdge.getWidth() / 2;",
                "-                float ym = y0 + borderEdge.getHeight() / 2;",
                "-                // see http://spencermortensen.com/articles/bezier-circle/",
                "-                // the below number was calculated from sampling content streams",
                "-                // generated using Adobe Reader",
                "-                float magic = 0.55555417f;",
                "-                // control point offsets",
                "-                float vOffset = borderEdge.getHeight() / 2 * magic;",
                "-                float hOffset = borderEdge.getWidth() / 2 * magic;",
                "+                if (borderEffect != null && borderEffect.getStyle().equals(PDBorderEffectDictionary.STYLE_CLOUDY))",
                "+                {",
                "+                    CloudyBorder cloudyBorder = new CloudyBorder(contentStream,",
                "+                        borderEffect.getIntensity(), lineWidth, getRectangle());",
                "+                    cloudyBorder.createCloudyEllipse(annotation.getRectDifference());",
                "+                    annotation.setRectangle(cloudyBorder.getRectangle());",
                "+                    annotation.setRectDifference(cloudyBorder.getRectDifference());",
                "+                    PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "+                    appearanceStream.setBBox(cloudyBorder.getBBox());",
                "+                    appearanceStream.setMatrix(cloudyBorder.getMatrix());",
                "+                }",
                "+                else",
                "+                {",
                "+                    // the differences rectangle",
                "+                    setRectDifference(lineWidth);",
                "+                    ",
                "+                    // lower left corner",
                "+                    float x0 = borderEdge.getLowerLeftX();",
                "+                    float y0 = borderEdge.getLowerLeftY();",
                "+                    // upper right corner",
                "+                    float x1 = borderEdge.getUpperRightX();",
                "+                    float y1 = borderEdge.getUpperRightY();",
                "+                    // mid points",
                "+                    float xm = x0 + borderEdge.getWidth() / 2;",
                "+                    float ym = y0 + borderEdge.getHeight() / 2;",
                "+                    // see http://spencermortensen.com/articles/bezier-circle/",
                "+                    // the below number was calculated from sampling content streams",
                "+                    // generated using Adobe Reader",
                "+                    float magic = 0.55555417f;",
                "+                    // control point offsets",
                "+                    float vOffset = borderEdge.getHeight() / 2 * magic;",
                "+                    float hOffset = borderEdge.getWidth() / 2 * magic;",
                "+                    ",
                "+                    contentStream.moveTo(xm, y1);",
                "+                    contentStream.curveTo((xm + hOffset), y1, x1, (ym + vOffset), x1, ym);",
                "+                    contentStream.curveTo(x1, (ym - vOffset), (xm + hOffset), y0, xm, y0);",
                "+                    contentStream.curveTo((xm - hOffset), y0, x0, (ym - vOffset), x0, ym);",
                "+                    contentStream.curveTo(x0, (ym + vOffset), (xm - hOffset), y1, xm, y1);",
                "+                    contentStream.closePath();",
                "+                }",
                "-                contentStream.moveTo(xm, y1);",
                "-                contentStream.curveTo((xm + hOffset), y1, x1, (ym + vOffset), x1, ym);",
                "-                contentStream.curveTo(x1, (ym - vOffset), (xm + hOffset), y0, xm, y0);",
                "-                contentStream.curveTo((xm - hOffset), y0, x0, (ym - vOffset), x0, ym);",
                "-                contentStream.curveTo(x0, (ym + vOffset), (xm - hOffset), y1, xm, y1);",
                "-                contentStream.closePath();",
                "                 contentStream.drawShape(lineWidth, hasStroke, hasBackground);",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "index d2ef93cdb..b07d3823c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "@@ -30,2 +30,4 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary;",
                "@@ -113,31 +115,43 @@ public class PDPolygonAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 }",
                "-",
                "-                // the differences rectangle",
                "-                // TODO: this only works for border effect solid. Cloudy needs a",
                "-                // different approach.",
                "-                setRectDifference(lineWidth);",
                "-",
                "-                // Acrobat applies a padding to each side of the bbox so the line is",
                "-                // completely within the bbox.",
                "-",
                "-                for (int i = 0; i < pathArray.length; i++)",
                "+                ",
                "+                PDBorderEffectDictionary borderEffect = annotation.getBorderEffect();",
                "+                if (borderEffect != null && borderEffect.getStyle().equals(PDBorderEffectDictionary.STYLE_CLOUDY))",
                "                 {",
                "-                    float[] pointsArray = pathArray[i];",
                "-                    // first array shall be of size 2 and specify the moveto operator",
                "-                    if (i == 0 && pointsArray.length == 2)",
                "-                    {",
                "-                        contentStream.moveTo(pointsArray[0], pointsArray[1]);",
                "-                    }",
                "-                    else",
                "+                    CloudyBorder cloudyBorder = new CloudyBorder(contentStream,",
                "+                        borderEffect.getIntensity(), lineWidth, getRectangle());",
                "+                    cloudyBorder.createCloudyPolygon(pathArray);",
                "+                    annotation.setRectangle(cloudyBorder.getRectangle());",
                "+                    PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "+                    appearanceStream.setBBox(cloudyBorder.getBBox());",
                "+                    appearanceStream.setMatrix(cloudyBorder.getMatrix());",
                "+                }",
                "+                else",
                "+                {",
                "+                    // the differences rectangle",
                "+                    setRectDifference(lineWidth);",
                "+    ",
                "+                    // Acrobat applies a padding to each side of the bbox so the line is",
                "+                    // completely within the bbox.",
                "+    ",
                "+                    for (int i = 0; i < pathArray.length; i++)",
                "                     {",
                "-                        // entries of length 2 shall be treated as lineto operator",
                "-                        if (pointsArray.length == 2)",
                "+                        float[] pointsArray = pathArray[i];",
                "+                        // first array shall be of size 2 and specify the moveto operator",
                "+                        if (i == 0 && pointsArray.length == 2)",
                "                         {",
                "-                            contentStream.lineTo(pointsArray[0], pointsArray[1]);",
                "+                            contentStream.moveTo(pointsArray[0], pointsArray[1]);",
                "                         }",
                "-                        else if (pointsArray.length == 6)",
                "+                        else",
                "                         {",
                "-                            contentStream.curveTo(pointsArray[0], pointsArray[1],",
                "-                                    pointsArray[2], pointsArray[3],",
                "-                                    pointsArray[4], pointsArray[5]);",
                "+                            // entries of length 2 shall be treated as lineto operator",
                "+                            if (pointsArray.length == 2)",
                "+                            {",
                "+                                contentStream.lineTo(pointsArray[0], pointsArray[1]);",
                "+                            }",
                "+                            else if (pointsArray.length == 6)",
                "+                            {",
                "+                                contentStream.curveTo(pointsArray[0], pointsArray[1],",
                "+                                        pointsArray[2], pointsArray[3],",
                "+                                        pointsArray[4], pointsArray[5]);",
                "+                            }",
                "                         }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "index aeb9edf60..31c295432 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "@@ -31,2 +31,4 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquare;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary;",
                "@@ -70,29 +72,14 @@ public class PDSquareAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 contentStream.setBorderLine(lineWidth, annotation.getBorderStyle());                ",
                "+                PDBorderEffectDictionary borderEffect = annotation.getBorderEffect();",
                "-                // handle the border box",
                "-                // ",
                "-                // There are two options. The handling is not part of the PDF specification but",
                "-                // implementation specific to Adobe Reader",
                "-                // - if /RD is set the border box is the /Rect entry inset by the respective",
                "-                //   border difference.",
                "-                // - if /RD is not set the border box is defined by the /Rect entry. The /RD entry will",
                "-                //   be set to be the line width and the /Rect is enlarged by the /RD amount",
                "-",
                "-                PDRectangle borderBox = null;",
                "-                float[] rectDifferences = annotation.getRectDifferences();",
                "-                ",
                "-                if (rectDifferences.length == 0)",
                "+                if (borderEffect != null && borderEffect.getStyle().equals(PDBorderEffectDictionary.STYLE_CLOUDY))",
                "                 {",
                "-                    borderBox = getPaddedRectangle(getRectangle(), lineWidth/2);",
                "-                    // the differences rectangle",
                "-                    // TODO: this only works for border effect solid. Cloudy needs a different approach.",
                "-                    annotation.setRectDifferences(lineWidth/2);",
                "-                    annotation.setRectangle(addRectDifferences(getRectangle(), annotation.getRectDifferences()));",
                "-                    ",
                "-                    // when the normal appearance stream was generated BBox and Matrix have been set to the",
                "-                    // values of the original /Rect. As the /Rect was changed that needs to be adjusted too.",
                "-                    annotation.getNormalAppearanceStream().setBBox(getRectangle());",
                "-                    AffineTransform transform = AffineTransform.getTranslateInstance(-getRectangle().getLowerLeftX(),",
                "-                            -getRectangle().getLowerLeftY());",
                "-                    annotation.getNormalAppearanceStream().setMatrix(transform);",
                "+                    CloudyBorder cloudyBorder = new CloudyBorder(contentStream,",
                "+                        borderEffect.getIntensity(), lineWidth, getRectangle());",
                "+                    cloudyBorder.createCloudyRectangle(annotation.getRectDifference());",
                "+                    annotation.setRectangle(cloudyBorder.getRectangle());",
                "+                    annotation.setRectDifference(cloudyBorder.getRectDifference());",
                "+                    PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "+                    appearanceStream.setBBox(cloudyBorder.getBBox());",
                "+                    appearanceStream.setMatrix(cloudyBorder.getMatrix());",
                "                 }",
                "@@ -100,9 +87,38 @@ public class PDSquareAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 {",
                "-                    borderBox = applyRectDifferences(getRectangle(), rectDifferences);",
                "-                    borderBox = getPaddedRectangle(borderBox, lineWidth/2);",
                "-                }",
                "+                    // handle the border box",
                "+                    //",
                "+                    // There are two options. The handling is not part of the PDF specification but",
                "+                    // implementation specific to Adobe Reader",
                "+                    // - if /RD is set the border box is the /Rect entry inset by the respective",
                "+                    //   border difference.",
                "+                    // - if /RD is not set the border box is defined by the /Rect entry. The /RD entry will",
                "+                    //   be set to be the line width and the /Rect is enlarged by the /RD amount",
                "-                contentStream.addRect(borderBox.getLowerLeftX(), borderBox.getLowerLeftY(),",
                "-                        borderBox.getWidth(), borderBox.getHeight());",
                "+                    PDRectangle borderBox = null;",
                "+                    float[] rectDifferences = annotation.getRectDifferences();",
                "+                    if (rectDifferences.length == 0)",
                "+                    {",
                "+                        borderBox = getPaddedRectangle(getRectangle(), lineWidth/2);",
                "+                        // the differences rectangle",
                "+                        annotation.setRectDifferences(lineWidth/2);",
                "+                        annotation.setRectangle(addRectDifferences(getRectangle(), annotation.getRectDifferences()));",
                "+",
                "+                        // when the normal appearance stream was generated BBox and Matrix have been set to the",
                "+                        // values of the original /Rect. As the /Rect was changed that needs to be adjusted too.",
                "+                        annotation.getNormalAppearanceStream().setBBox(getRectangle());",
                "+                        AffineTransform transform = AffineTransform.getTranslateInstance(-getRectangle().getLowerLeftX(),",
                "+                                -getRectangle().getLowerLeftY());",
                "+                        annotation.getNormalAppearanceStream().setMatrix(transform);",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        borderBox = applyRectDifferences(getRectangle(), rectDifferences);",
                "+                        borderBox = getPaddedRectangle(borderBox, lineWidth/2);",
                "+                    }",
                "+",
                "+                    contentStream.addRect(borderBox.getLowerLeftX(), borderBox.getLowerLeftY(),",
                "+                            borderBox.getWidth(), borderBox.getHeight());",
                "+                }",
                "+",
                "                 contentStream.drawShape(lineWidth, hasStroke, hasBackground);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCircleAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f568c13db0a43a9b48e79be7a4cc1546a8cff6b2",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524161446,
            "hunks": 2,
            "message": "PDFBOX-3999: revert two accidentally committed segments git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829597 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "index 4da4e6f61..27ae233e4 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "@@ -531,20 +531,2 @@ public class PDFMergerUtility",
                "             {",
                "-//                System.out.println(srcNames);",
                "-//                System.out.println(srcNames.getDests());",
                "-//                System.out.println(srcNames.getDests().getNames());",
                "-//                Map<String, PDPageDestination> names1 = srcNames.getDests().getNames();",
                "-//                Map<String, PDPageDestination> names2 = destNames.getDests().getNames();",
                "-//                if (names1 != null)",
                "-//                    System.out.println(names1.keySet());",
                "-//                else",
                "-//                {",
                "-//                    List<PDNameTreeNode<PDPageDestination>> kids = srcNames.getDests().getKids();",
                "-//                    for (PDNameTreeNode<PDPageDestination> kid : kids)",
                "-//                    {",
                "-//                       ",
                "-//                    System.out.println(kid.getNames().keySet());",
                "-//                    }",
                "-//                    ",
                "-//                }",
                "-//                System.out.println(names2.keySet());",
                "                 cloner.cloneMerge(srcNames, destNames);",
                "@@ -1003,20 +985,20 @@ public class PDFMergerUtility",
                "             }",
                "-//            else",
                "-//            {",
                "-//                // PDFBOX-3999: clone objects that are not in mapping to make sure that",
                "-//                // these don't remain attached to the source document",
                "-//                COSBase item = parentTreeEntry.getItem(COSName.OBJ);",
                "-//                if (item instanceof COSObject)",
                "-//                {",
                "-//                    LOG.warn(\"clone potential orphan object in structure tree: \" + item +",
                "-//                            \", type: \" + ((COSDictionary) obj).getNameAsString(COSName.TYPE));",
                "-//                }",
                "-//                else",
                "-//                {",
                "-//                    // don't display because of stack overflow",
                "-//                    LOG.warn(\"clone potential orphan object in structure tree, type: \" +",
                "-//                            ((COSDictionary) obj).getNameAsString(COSName.TYPE));",
                "-//                }",
                "-//                parentTreeEntry.setItem(COSName.OBJ, cloner.cloneForNewDocument(obj));",
                "-//            }",
                "+            else",
                "+            {",
                "+                // PDFBOX-3999: clone objects that are not in mapping to make sure that",
                "+                // these don't remain attached to the source document",
                "+                COSBase item = parentTreeEntry.getItem(COSName.OBJ);",
                "+                if (item instanceof COSObject)",
                "+                {",
                "+                    LOG.debug(\"clone potential orphan object in structure tree: \" + item +",
                "+                            \", type: \" + ((COSDictionary) obj).getNameAsString(COSName.TYPE));",
                "+                }",
                "+                else",
                "+                {",
                "+                    // don't display because of stack overflow",
                "+                    LOG.debug(\"clone potential orphan object in structure tree, type: \" +",
                "+                            ((COSDictionary) obj).getNameAsString(COSName.TYPE));",
                "+                }",
                "+                parentTreeEntry.setItem(COSName.OBJ, cloner.cloneForNewDocument(obj));",
                "+            }",
                "         }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3999": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3999",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4c74fff371dd8017322cd68b9aa50d73f7a70d00",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530810951,
            "hunks": 14,
            "message": "PDFBOX-3353: Add clipping rect; remove \"factor\" which was just a guess; draw text in cloudy annotation as if the rectangle hadn't changed for the clouds; fix bug with /RD and non cloudy git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835157 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "index 9904364b6..b9e0c9771 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "@@ -162,2 +162,7 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             {",
                "+                // Adobe draws the text with the original rectangle in mind.",
                "+                // but if there is an /RD, then writing area get smaller.",
                "+                // do this here because /RD is overwritten in a few lines",
                "+                borderBox = applyRectDifferences(getRectangle(), annotation.getRectDifferences());",
                "+",
                "                 //TODO this segment was copied from square handler. Refactor?",
                "@@ -169,4 +174,3 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "-                borderBox = cloudyBorder.getBBox();",
                "-                appearanceStream.setBBox(borderBox);",
                "+                appearanceStream.setBBox(cloudyBorder.getBBox());",
                "                 appearanceStream.setMatrix(cloudyBorder.getMatrix());",
                "@@ -182,15 +186,9 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 // - if /RD is not set then we don't touch /RD etc because Adobe doesn't either.",
                "-                float[] rectDifferences = annotation.getRectDifferences();",
                "-                if (rectDifferences.length == 0)",
                "-                {",
                "-                    borderBox = getRectangle();",
                "-                }",
                "-                else",
                "-                {",
                "-                    borderBox = applyRectDifferences(getRectangle(), rectDifferences);",
                "-                    annotation.getNormalAppearanceStream().setBBox(borderBox);",
                "-                }",
                "-                borderBox = getPaddedRectangle(borderBox, ab.width / 2);",
                "-                cs.addRect(borderBox.getLowerLeftX(), borderBox.getLowerLeftY(),",
                "-                        borderBox.getWidth(), borderBox.getHeight());",
                "+                borderBox = applyRectDifferences(getRectangle(), annotation.getRectDifferences());",
                "+                annotation.getNormalAppearanceStream().setBBox(borderBox);",
                "+",
                "+                // note that borderBox is not modified",
                "+                PDRectangle paddedRectangle = getPaddedRectangle(borderBox, ab.width / 2);",
                "+                cs.addRect(paddedRectangle.getLowerLeftX(), paddedRectangle.getLowerLeftY(),",
                "+                           paddedRectangle.getWidth(), paddedRectangle.getHeight());",
                "             }",
                "@@ -199,3 +197,3 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             // rotation is an undocumented feature, but Adobe uses it. Examples can be found",
                "-            // in pdf_commenting_new.pdf file.",
                "+            // in pdf_commenting_new.pdf file, page 3.",
                "             int rotation = annotation.getCOSObject().getInt(COSName.ROTATE, 0);",
                "@@ -204,14 +202,13 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             float yOffset;",
                "-            float width = rotation == 90 || rotation == 270 ? borderBox.getHeight(): borderBox.getWidth();",
                "-            // somewhat inspired by AppearanceGeneratorHelper.insertGeneratedAppearance()",
                "-            cs.beginText();",
                "+            float width = rotation == 90 || rotation == 270 ? borderBox.getHeight() : borderBox.getWidth();",
                "+            // strategy to write formatted text is somewhat inspired by ",
                "+            // AppearanceGeneratorHelper.insertGeneratedAppearance()",
                "             PDFont font = PDType1Font.HELVETICA;",
                "-            int factor = 1;",
                "-            if (borderEffect != null && borderEffect.getStyle().equals(PDBorderEffectDictionary.STYLE_CLOUDY))",
                "-            {",
                "-                //TODO cloudy needs to be reviewed too.",
                "-                factor = 2;",
                "-            }",
                "+            float clipY;",
                "+            float clipWidth = width - ab.width * 4;",
                "+            float clipHeight = rotation == 90 || rotation == 270 ? ",
                "+                                borderBox.getWidth() - ab.width * 4 : borderBox.getHeight() - ab.width * 4;",
                "             float fontSize = extractFontSize(annotation);",
                "-            // used by Adobe, no idea where it comes from, actual font bbox max y is 0.931",
                "+",
                "+            // value used by Adobe, no idea where it comes from, actual font bbox max y is 0.931",
                "             // gathered by creating an annotation with width 0.",
                "@@ -221,12 +218,15 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 case 180:",
                "-                    xOffset = - borderBox.getUpperRightX() + ab.width * 2 * factor; ",
                "-                    yOffset = - borderBox.getLowerLeftY() - ab.width * 2 * factor - yDelta * fontSize * factor;",
                "+                    xOffset = - borderBox.getUpperRightX() + ab.width * 2;",
                "+                    yOffset = - borderBox.getLowerLeftY() - ab.width * 2 - yDelta * fontSize;",
                "+                    clipY = - borderBox.getUpperRightY() + ab.width * 2;",
                "                     break;",
                "                 case 90:",
                "-                    xOffset = borderBox.getLowerLeftY() + ab.width * 2 * factor;",
                "-                    yOffset = - borderBox.getLowerLeftX() - ab.width * 2 * factor - yDelta * fontSize * factor;",
                "+                    xOffset = borderBox.getLowerLeftY() + ab.width * 2;",
                "+                    yOffset = - borderBox.getLowerLeftX() - ab.width * 2 - yDelta * fontSize;",
                "+                    clipY = - borderBox.getUpperRightX() + ab.width * 2;",
                "                     break;",
                "                 case 270:",
                "-                    xOffset = - borderBox.getUpperRightY() + ab.width * 2 * factor;",
                "-                    yOffset = borderBox.getUpperRightX() - ab.width * 2 * factor - yDelta * fontSize * factor;",
                "+                    xOffset = - borderBox.getUpperRightY() + ab.width * 2;",
                "+                    yOffset = borderBox.getUpperRightX() - ab.width * 2 - yDelta * fontSize;",
                "+                    clipY = borderBox.getLowerLeftX() + ab.width * 2;",
                "                     break;",
                "@@ -234,6 +234,13 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 default:",
                "-                    xOffset = borderBox.getLowerLeftX() + ab.width * 2 * factor;",
                "-                    yOffset = borderBox.getUpperRightY() - ab.width * 2 * factor - yDelta * fontSize * factor;",
                "+                    xOffset = borderBox.getLowerLeftX() + ab.width * 2;",
                "+                    yOffset = borderBox.getUpperRightY() - ab.width * 2 - yDelta * fontSize;",
                "+                    clipY = borderBox.getLowerLeftY() + ab.width * 2;",
                "                     break;",
                "             }",
                "+",
                "+            // clip writing area",
                "+            cs.addRect(xOffset, clipY, clipWidth, clipHeight);",
                "+            cs.clip();",
                "+",
                "+            cs.beginText();",
                "             cs.setFont(font, fontSize);",
                "@@ -246,5 +253,4 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     .text(new PlainText(annotation.getContents()))",
                "-                    .width(width - ab.width * factor * 4)",
                "+                    .width(width - ab.width * 4)",
                "                     .wrapLines(true)",
                "-                    //TODO some reverse engineering needed to find out padding",
                "                     .initialOffset(xOffset, yOffset)"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e5a005d1e4fd4ab91af784ecb778f708ec0dd954",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525957062,
            "hunks": 7,
            "message": "PDFBOX-4071: replace the synchronized class \"Stack\" by the unsynchronized \"Deque\" git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831334 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "index 8140a4496..d85a36bce 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "@@ -25,3 +25,5 @@ import java.io.OutputStream;",
                " import java.text.NumberFormat;",
                "+import java.util.ArrayDeque;",
                " import java.util.ArrayList;",
                "+import java.util.Deque;",
                " import java.util.HashMap;",
                "@@ -32,3 +34,2 @@ import java.util.Map;",
                " import java.util.Set;",
                "-import java.util.Stack;",
                " import java.util.regex.Pattern;",
                "@@ -83,6 +84,6 @@ abstract class PDAbstractContentStream implements Closeable",
                "     protected boolean inTextMode = false;",
                "-    protected final Stack<PDFont> fontStack = new Stack<>();",
                "+    protected final Deque<PDFont> fontStack = new ArrayDeque<>();",
                "-    protected final Stack<PDColorSpace> nonStrokingColorSpaceStack = new Stack<>();",
                "-    protected final Stack<PDColorSpace> strokingColorSpaceStack = new Stack<>();",
                "+    protected final Deque<PDColorSpace> nonStrokingColorSpaceStack = new ArrayDeque<>();",
                "+    protected final Deque<PDColorSpace> strokingColorSpaceStack = new ArrayDeque<>();",
                "@@ -172,3 +173,4 @@ abstract class PDAbstractContentStream implements Closeable",
                "         {",
                "-            fontStack.setElementAt(font, fontStack.size() - 1);",
                "+            fontStack.pop();",
                "+            fontStack.push(font);",
                "         }",
                "@@ -1553,3 +1555,4 @@ abstract class PDAbstractContentStream implements Closeable",
                "         {",
                "-            strokingColorSpaceStack.setElementAt(colorSpace, strokingColorSpaceStack.size() - 1);",
                "+            strokingColorSpaceStack.pop();",
                "+            strokingColorSpaceStack.push(colorSpace);",
                "         }",
                "@@ -1565,3 +1568,4 @@ abstract class PDAbstractContentStream implements Closeable",
                "         {",
                "-            nonStrokingColorSpaceStack.setElementAt(colorSpace, nonStrokingColorSpaceStack.size() - 1);",
                "+            nonStrokingColorSpaceStack.pop();",
                "+            nonStrokingColorSpaceStack.push(colorSpace);",
                "         }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f7969b5b3de6acc8f34454aaed73a1dfb1776076",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524995452,
            "hunks": 15,
            "message": "PDFBOX-4189: Bengali fix for GSUB: ja phala not rendering properly, by Palash Ray git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830499 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "index e1246f380..a44d464df 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "@@ -19,4 +19,9 @@ package org.apache.pdfbox.examples.pdmodel;",
                "+import java.io.BufferedReader;",
                " import java.io.IOException;",
                "+import java.io.InputStreamReader;",
                " import java.net.URISyntaxException;",
                "+import java.util.ArrayList;",
                "+import java.util.List;",
                "+import java.util.StringTokenizer;",
                "@@ -25,5 +30,5 @@ import org.apache.pdfbox.pdmodel.PDPage;",
                " import org.apache.pdfbox.pdmodel.PDPageContentStream;",
                "+import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                " import org.apache.pdfbox.pdmodel.font.PDFont;",
                " import org.apache.pdfbox.pdmodel.font.PDType0Font;",
                "-import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;",
                "@@ -32,5 +37,4 @@ import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;",
                "  * \"https://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/HelloWorldTTF.java?view=markup\">PdfBox",
                "- * Example</a>. This attempts to correctly demonstrate to what extent Bengali text rendering is",
                "- * supported. First, we render some text, and then embed an image with the correct text displayed on",
                "- * the next page.",
                "+ * Example</a>. This attempts to correctly demonstrate to what extent Bengali text rendering is supported. First, we",
                "+ * render some text, and then embed an image with the correct text displayed on the next page.",
                "  *",
                "@@ -41,13 +45,7 @@ public class BengaliPdfGenerationHelloWorld",
                " {",
                "-    /**",
                "-     * The unicode of this is given below:",
                "-     * ",
                "-     * <pre>",
                "-     * \\u0986\\u09ae\\u09bf  \\u0995\\u09cb\\u09a8 \\u09aa\\u09a5\\u09c7  \\u0995\\u09cd\\u09b7\\u09c0\\u09b0\\u09c7\\u09b0 \\u09b7\\u09a8\\u09cd\\u09a1  \\u09aa\\u09c1\\u09a4\\u09c1\\u09b2 \\u09b0\\u09c1\\u09aa\\u09cb  \\u0997\\u0999\\u09cd\\u0997\\u09be \\u098b\\u09b7\\u09bf",
                "-     * </pre>",
                "-     * ",
                "-     */",
                "-    private static final String BANGLA_TEXT_1 = \"\u00e0\u00a6\u0086\u00e0\u00a6\u00ae\u00e0\u00a6\u00bf \u00e0\u00a6\u0095\u00e0\u00a7\u008b\u00e0\u00a6\u00a8 \u00e0\u00a6\u00aa\u00e0\u00a6\u00a5\u00e0\u00a7\u0087 \u00e0\u00a6\u0095\u00e0\u00a7\u008d\u00e0\u00a6\u00b7\u00e0\u00a7\u0080\u00e0\u00a6\u00b0\u00e0\u00a7\u0087\u00e0\u00a6\u00b0 \u00e0\u00a6\u00b2\u00e0\u00a6\u0095\u00e0\u00a7\u008d\u00e0\u00a6\u00b7\u00e0\u00a7\u008d\u00e0\u00a6\u00ae\u00e0\u00a7\u0080 \u00e0\u00a6\u00b7\u00e0\u00a6\u00a8\u00e0\u00a7\u008d\u00e0\u00a6\u00a1 \u00e0\u00a6\u00aa\u00e0\u00a7\u0081\u00e0\u00a6\u00a4\u00e0\u00a7\u0081\u00e0\u00a6\u00b2 \u00e0\u00a6\u00b0\u00e0\u00a7\u0081\u00e0\u00a6\u00aa\u00e0\u00a7\u008b \u00e0\u00a6\u0097\u00e0\u00a6\u0099\u00e0\u00a7\u008d\u00e0\u00a6\u0097\u00e0\u00a6\u00be \u00e0\u00a6\u008b\u00e0\u00a6\u00b7\u00e0\u00a6\u00bf\";",
                "-    private static final String BANGLA_TEXT_2 = \"\u00e0\u00a6\u00a6\u00e0\u00a7\u008d\u00e0\u00a6\u00b0\u00e0\u00a7\u0081\u00e0\u00a6\u00a4 \u00e0\u00a6\u0097\u00e0\u00a6\u00be\u00e0\u00a6\u00a2\u00e0\u00a6\u00bc \u00e0\u00a6\u00b6\u00e0\u00a7\u0087\u00e0\u00a6\u00af\u00e0\u00a6\u00bc\u00e0\u00a6\u00be\u00e0\u00a6\u00b2 \u00e0\u00a6\u0085\u00e0\u00a6\u00b2\u00e0\u00a6\u00b8 \u00e0\u00a6\u0095\u00e0\u00a7\u0081\u00e0\u00a6\u0095\u00e0\u00a7\u0081\u00e0\u00a6\u00b0 \u00e0\u00a6\u009c\u00e0\u00a7\u0081\u00e0\u00a6\u00a1\u00e0\u00a6\u00bc\u00e0\u00a7\u0087 \u00e0\u00a6\u009c\u00e0\u00a6\u00be\u00e0\u00a6\u00ae\u00e0\u00a7\u008d\u00e0\u00a6\u00aa \u00e0\u00a6\u00a7\u00e0\u00a7\u0081\u00e0\u00a6\u00b0\u00e0\u00a7\u008d\u00e0\u00a6\u00a4  \u00e0\u00a6\u00b9\u00e0\u00a6\u00a0\u00e0\u00a6\u00be\u00e0\u00a7\u008e \u00e0\u00a6\u00ad\u00e0\u00a6\u00be\u00e0\u00a6\u0099\u00e0\u00a7\u0087\u00e0\u00a6\u00a8\u00e0\u00a6\u00bf \u00e0\u00a6\u00ae\u00e0\u00a7\u008c\u00e0\u00a6\u00b2\u00e0\u00a6\u00bf\u00e0\u00a6\u0095 \u00e0\u00a6\u0090\u00e0\u00a6\u00b6\u00e0\u00a6\u00bf \u00e0\u00a6\u00a6\u00e0\u00a7\u0088\";",
                "-    private static final String BANGLA_TEXT_3 = \"\u00e0\u00a6\u008b\u00e0\u00a6\u00b7\u00e0\u00a6\u00bf \u00e0\u00a6\u0095\u00e0\u00a6\u00b2\u00e0\u00a7\u008d\u00e0\u00a6\u00b2\u00e0\u00a7\u008b\u00e0\u00a6\u00b2 \u00e0\u00a6\u00ac\u00e0\u00a7\u008d\u00e0\u00a6\u00af\u00e0\u00a6\u00be\u00e0\u00a6\u00b8 \u00e0\u00a6\u00a8\u00e0\u00a6\u00bf\u00e0\u00a6\u00b0\u00e0\u00a7\u008d\u00e0\u00a6\u00ad\u00e0\u00a7\u009f \";",
                "+    private static final int LINE_GAP = 5;",
                "+    private static final String LOHIT_BENGALI_TTF = \"/org/apache/pdfbox/resources/ttf/Lohit-Bengali.ttf\";",
                "+    private static final String TEXT_SOURCE_FILE = \"/org/apache/pdfbox/resources/ttf/bengali-samples.txt\";",
                "+    private static final int FONT_SIZE = 20;",
                "+    private static final int MARGIN = 20;",
                "@@ -68,3 +66,3 @@ public class BengaliPdfGenerationHelloWorld",
                "     private BengaliPdfGenerationHelloWorld()",
                "-    {        ",
                "+    {",
                "     }",
                "@@ -86,28 +84,35 @@ public class BengaliPdfGenerationHelloWorld",
                "         {",
                "-            PDPage page1 = new PDPage();",
                "-            doc.addPage(page1);",
                "-",
                "-            PDFont font = PDType0Font.load(doc, BengaliPdfGenerationHelloWorld.class",
                "-                    .getResourceAsStream(\"/org/apache/pdfbox/resources/ttf/Lohit-Bengali.ttf\"),",
                "+            PDFont font = PDType0Font.load(doc,",
                "+                    BengaliPdfGenerationHelloWorld.class.getResourceAsStream(LOHIT_BENGALI_TTF),",
                "                     true);",
                "+            PDRectangle rectangle = getPageSize();",
                "+            float workablePageWidth = rectangle.getWidth() - 2 * MARGIN;",
                "+            float workablePageHeight = rectangle.getHeight() - 2 * MARGIN;",
                "+",
                "+            List<List<String>> pagedTexts = getReAlignedTextBasedOnPageHeight(",
                "+                    getReAlignedTextBasedOnPageWidth(getBengaliTextFromFile(), font,",
                "+                            workablePageWidth),",
                "+                    font, workablePageHeight);",
                "-            try (PDPageContentStream contents = new PDPageContentStream(doc, page1))",
                "+            for (List<String> linesForPage : pagedTexts)",
                "             {",
                "-                contents.beginText();",
                "-                contents.setFont(font, 12);",
                "-                contents.newLineAtOffset(10, 750);",
                "-                contents.showText(BANGLA_TEXT_1);",
                "-                contents.newLineAtOffset(0, -50);",
                "-                contents.showText(BANGLA_TEXT_2);",
                "-                contents.newLineAtOffset(0, -30);",
                "-                contents.showText(BANGLA_TEXT_3);",
                "-                contents.endText();",
                "-                ",
                "-                PDImageXObject pdImage = PDImageXObject",
                "-                        .createFromFile(BengaliPdfGenerationHelloWorld.class",
                "-                                .getResource(",
                "-                                        \"/org/apache/pdfbox/resources/ttf/bengali-correct-text.png\")",
                "-                                // getFile() doesn't work if there is a space in the path",
                "-                                .toURI().getPath(), doc);",
                "-                contents.drawImage(pdImage, 0, 300, pdImage.getWidth(), pdImage.getHeight());",
                "+                PDPage page = new PDPage(getPageSize());",
                "+                doc.addPage(page);",
                "+",
                "+                try (PDPageContentStream contents = new PDPageContentStream(doc, page))",
                "+                {",
                "+                    contents.beginText();",
                "+                    contents.setFont(font, FONT_SIZE);",
                "+                    contents.newLineAtOffset(rectangle.getLowerLeftX() + MARGIN,",
                "+                            rectangle.getUpperRightY() - MARGIN);",
                "+",
                "+                    for (String line : linesForPage)",
                "+                    {",
                "+                        contents.showText(line);",
                "+                        contents.newLineAtOffset(0, -(FONT_SIZE + LINE_GAP));",
                "+                    }",
                "+",
                "+                    contents.endText();",
                "+",
                "+                }",
                "             }",
                "@@ -118,2 +123,98 @@ public class BengaliPdfGenerationHelloWorld",
                "+    private static List<List<String>> getReAlignedTextBasedOnPageHeight(List<String> originalLines,",
                "+            PDFont font, float workablePageHeight)",
                "+    {",
                "+        final float newLineHeight = font.getFontDescriptor().getFontBoundingBox().getHeight() / 1000",
                "+                * FONT_SIZE + LINE_GAP;",
                "+        List<List<String>> realignedTexts = new ArrayList<>();",
                "+        float consumedHeight = 0;",
                "+        List<String> linesInAPage = new ArrayList<>();",
                "+        for (String line : originalLines)",
                "+        {",
                "+            if (newLineHeight + consumedHeight < workablePageHeight)",
                "+            {",
                "+                consumedHeight += newLineHeight;",
                "+            }",
                "+            else",
                "+            {",
                "+                consumedHeight = newLineHeight;",
                "+                realignedTexts.add(linesInAPage);",
                "+                linesInAPage = new ArrayList<>();",
                "+            }",
                "+",
                "+            linesInAPage.add(line);",
                "+        }",
                "+        return realignedTexts;",
                "+    }",
                "+",
                "+    private static List<String> getReAlignedTextBasedOnPageWidth(List<String> originalLines,",
                "+            PDFont font, float workablePageWidth) throws IOException",
                "+    {",
                "+        List<String> uniformlyWideTexts = new ArrayList<>();",
                "+        float consumedWidth = 0;",
                "+        StringBuilder sb = new StringBuilder();",
                "+        for (String line : originalLines)",
                "+        {",
                "+            float newTokenWidth = 0;",
                "+            StringTokenizer st = new StringTokenizer(line, \" \", true);",
                "+            while (st.hasMoreElements())",
                "+            {",
                "+                String token = st.nextToken();",
                "+                newTokenWidth = font.getStringWidth(token) / 1000 * FONT_SIZE;",
                "+                if (newTokenWidth + consumedWidth < workablePageWidth)",
                "+                {",
                "+                    consumedWidth += newTokenWidth;",
                "+                }",
                "+                else",
                "+                {",
                "+                    // add a new text chunk",
                "+                    uniformlyWideTexts.add(sb.toString());",
                "+                    consumedWidth = newTokenWidth;",
                "+                    sb = new StringBuilder();",
                "+                }",
                "+",
                "+                sb.append(token);",
                "+            }",
                "+",
                "+            // add a new text chunk",
                "+            uniformlyWideTexts.add(sb.toString());",
                "+            consumedWidth = newTokenWidth;",
                "+            sb = new StringBuilder();",
                "+        }",
                "+",
                "+        return uniformlyWideTexts;",
                "+    }",
                "+",
                "+    private static PDRectangle getPageSize()",
                "+    {",
                "+        return PDRectangle.A4;",
                "+    }",
                "+",
                "+    private static List<String> getBengaliTextFromFile() throws IOException",
                "+    {",
                "+        List<String> lines = new ArrayList<>();",
                "+",
                "+        try (BufferedReader br = new BufferedReader(new InputStreamReader(",
                "+                BengaliPdfGenerationHelloWorld.class.getResourceAsStream(TEXT_SOURCE_FILE)));)",
                "+        {",
                "+            while (true)",
                "+            {",
                "+                String line = br.readLine();",
                "+",
                "+                if (line == null)",
                "+                {",
                "+                    break;",
                "+                }",
                "+",
                "+                if (line.startsWith(\"#\"))",
                "+                {",
                "+                    continue;",
                "+                }",
                "+                lines.add(line);",
                "+            }",
                "+        }",
                "+",
                "+        return lines;",
                "+    }",
                "+",
                " }",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java",
                "index 6eaec7b02..dd6db9410 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java",
                "@@ -116,5 +116,2 @@ public class GlyphSubstitutionDataExtractor",
                "-        LOG.debug(\"*********** extracting GSUB data for the feature: \"",
                "-                + featureRecord.getFeatureTag());",
                "-",
                "         Map<List<Integer>, Integer> glyphSubstitutionMap = new LinkedHashMap<>();",
                "@@ -125,2 +122,7 @@ public class GlyphSubstitutionDataExtractor",
                "         }",
                "+",
                "+        LOG.debug(\"*********** extracting GSUB data for the feature: \"",
                "+                + featureRecord.getFeatureTag() + \", glyphSubstitutionMap: \"",
                "+                + glyphSubstitutionMap);",
                "+",
                "         gsubData.put(featureRecord.getFeatureTag(),",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java",
                "index 396a9b549..eefaed591 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java",
                "@@ -51,3 +51,3 @@ public class GsubWorkerForBengali implements GsubWorker",
                "     private static final List<String> FEATURES_IN_ORDER = Arrays.asList(\"locl\", \"nukt\", \"akhn\",",
                "-            \"rphf\", \"blwf\", \"half\", \"pstf\", \"vatu\", \"cjct\", INIT_FEATURE, \"pres\", \"abvs\", \"blws\",",
                "+            \"rphf\", \"blwf\", \"pstf\", \"half\", \"vatu\", \"cjct\", INIT_FEATURE, \"pres\", \"abvs\", \"blws\",",
                "             \"psts\", \"haln\", \"calt\");"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GlyphSubstitutionDataExtractor.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "81931fe65d66b2dc3b43f0fcaef6c7de40ca95c1",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528034291,
            "hunks": 1,
            "message": "PDFBOX-3353: remove wrong comment; don't skip for width = 0, this is done by drawShape that outputs an \"n\" git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832770 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "index 68a59bee0..ebd7eb35c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "@@ -73,15 +73,2 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        // width 0 = no border",
                "-        // pdf_commenting_new.pdf page 3",
                "-        // Root/Pages/Kids/[2]/Kids/[0]/Annots/[5]/BS/W",
                "-        if (Float.compare(ab.width, 0) == 0)",
                "-        {",
                "-            //TODO what happens if there is a callout?",
                "-            //TODO skip, don't return when we know how to make text",
                "-            // (maybe refactor the rectangle drawing segment)",
                "-            return;",
                "-        }",
                "-",
                "-        //TODO how to set the text color? Apparently red is the default????",
                "-",
                "         try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "add729b9226dd34d02ab3f48bffdddcacf1aa61a",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525006413,
            "hunks": 2,
            "message": "PDFBOX-4189: force utf8 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830510 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "index d98b9b3c9..8fa6c9337 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "@@ -33,2 +33,3 @@ import org.apache.pdfbox.pdmodel.font.PDFont;",
                " import org.apache.pdfbox.pdmodel.font.PDType0Font;",
                "+import org.apache.pdfbox.util.Charsets;",
                "@@ -198,3 +199,3 @@ public class BengaliPdfGenerationHelloWorld",
                "         try (BufferedReader br = new BufferedReader(new InputStreamReader(",
                "-                BengaliPdfGenerationHelloWorld.class.getResourceAsStream(TEXT_SOURCE_FILE)));)",
                "+                BengaliPdfGenerationHelloWorld.class.getResourceAsStream(TEXT_SOURCE_FILE), Charsets.UTF_8));)",
                "         {"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cb82a7afef1616e3671ae8c35b0d5b14a677491b",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528821312,
            "hunks": 23,
            "message": "PDFBOX-3353: support /Paragraph and /NewParagraph; use fixed sizes for BBox, adjust rectangle only if NoZoom isn't set, set flags if missing git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833411 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index 41e9a55b1..c4776034d 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -25,2 +25,3 @@ import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "+import org.apache.pdfbox.cos.COSName;",
                " import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "@@ -52,2 +53,4 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         SUPPORTED_NAMES.add(PDAnnotationText.NAME_CIRCLE);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_PARAGRAPH);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_NEW_PARAGRAPH);",
                "     }",
                "@@ -73,3 +76,6 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         {",
                "-            //TODO Comment, Key, NewParagraph, Paragraph",
                "+            //TODO Comment, Key",
                "+            // BBox values:",
                "+            // key 18 18",
                "+            // Comment 18 18",
                "             return;",
                "@@ -93,6 +99,2 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-            PDRectangle rect = getRectangle();",
                "-            PDRectangle bbox = rect.createRetranslatedRectangle();",
                "-            annotation.getNormalAppearanceStream().setBBox(bbox);",
                "-",
                "             switch (annotation.getName())",
                "@@ -100,15 +102,21 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 case PDAnnotationText.NAME_NOTE:",
                "-                    drawNote(contentStream, bbox);",
                "+                    drawNote(annotation, contentStream);",
                "                     break;",
                "                 case PDAnnotationText.NAME_CROSS:",
                "-                    drawCross(contentStream, bbox);",
                "+                    drawCross(annotation, contentStream);",
                "                     break;",
                "                 case PDAnnotationText.NAME_CIRCLE:",
                "-                    drawCircles(contentStream, bbox);",
                "+                    drawCircles(annotation, contentStream);",
                "                     break;",
                "                 case PDAnnotationText.NAME_INSERT:",
                "-                    drawInsert(contentStream, bbox);",
                "+                    drawInsert(annotation, contentStream);",
                "                     break;",
                "                 case PDAnnotationText.NAME_HELP:",
                "-                    drawHelp(contentStream, bbox);",
                "+                    drawHelp(annotation, contentStream);",
                "+                    break;",
                "+                case PDAnnotationText.NAME_PARAGRAPH:",
                "+                    drawParagraph(annotation, contentStream);",
                "+                    break;",
                "+                case PDAnnotationText.NAME_NEW_PARAGRAPH:",
                "+                    drawNewParagraph(annotation, contentStream);",
                "                     break;",
                "@@ -124,6 +132,40 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-    private void drawNote(final PDAppearanceContentStream contentStream, PDRectangle bbox)",
                "+    private PDRectangle adjustRectAndBBox(PDAnnotationText annotation, float width, float height)",
                "+    {",
                "+        // For /Note (other types have different values):",
                "+        // Adobe takes the left upper bound as anchor, and adjusts the rectangle to 18 x 20.",
                "+        // Observed with files 007071.pdf, 038785.pdf, 038787.pdf,",
                "+        // but not with 047745.pdf p133 and 084374.pdf p48, both have the NoZoom flag.",
                "+        // there the BBox is also set to fixed values, but the rectangle is left untouched.",
                "+        // When no flags are there, Adobe sets /F 24 = NoZoom NoRotate.",
                "+            ",
                "+        PDRectangle rect = getRectangle();",
                "+        PDRectangle bbox;",
                "+        if (!annotation.isNoZoom())",
                "+        {",
                "+            rect.setUpperRightX(rect.getLowerLeftX() + width);",
                "+            rect.setLowerLeftY(rect.getUpperRightY() - height);",
                "+            annotation.setRectangle(rect);",
                "+        }",
                "+        if (!annotation.getCOSObject().containsKey(COSName.F))",
                "+        {",
                "+            // We set these flags because Adobe does so, but PDFBox doesn't support them when rendering.",
                "+            annotation.setNoRotate(true);",
                "+            annotation.setNoZoom(true);",
                "+        }",
                "+        bbox = new PDRectangle(width, height);",
                "+        annotation.getNormalAppearanceStream().setBBox(bbox);",
                "+        return bbox;",
                "+    }",
                "+",
                "+    private void drawNote(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "             throws IOException",
                "     {",
                "-        contentStream.setLineJoinStyle(1); // get round edge the easy way",
                "+        PDRectangle bbox = adjustRectAndBBox(annotation, 18, 20);",
                "+        contentStream.setMiterLimit(4);",
                "+",
                "+        // get round edge the easy way. Adobe uses 4 lines with 4 arcs of radius 0.785 which is bigger.",
                "+        contentStream.setLineJoinStyle(1);",
                "+",
                "+        contentStream.setLineCapStyle(0);",
                "         contentStream.setLineWidth(0.61f); // value from Adobe",
                "@@ -141,5 +183,7 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-    private void drawCircles(final PDAppearanceContentStream contentStream, PDRectangle bbox)",
                "+    private void drawCircles(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "             throws IOException",
                "     {",
                "+        PDRectangle bbox = adjustRectAndBBox(annotation, 20, 20);",
                "+",
                "         // strategy used by Adobe:",
                "@@ -152,6 +196,4 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        // should be a square, but who knows...",
                "-        float min = Math.min(bbox.getWidth(), bbox.getHeight());",
                "-        float smallR = min / 20 * 6.36f;",
                "-        float largeR = min / 20 * 9.756f;",
                "+        float smallR = 6.36f;",
                "+        float largeR = 9.756f;",
                "@@ -179,5 +221,7 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-    private void drawInsert(final PDAppearanceContentStream contentStream, PDRectangle bbox)",
                "+    private void drawInsert(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "             throws IOException",
                "     {",
                "+        PDRectangle bbox = adjustRectAndBBox(annotation, 17, 20);",
                "+",
                "         contentStream.setMiterLimit(4);",
                "@@ -192,5 +236,7 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-    private void drawCross(final PDAppearanceContentStream contentStream, PDRectangle bbox)",
                "+    private void drawCross(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "             throws IOException",
                "     {",
                "+        PDRectangle bbox = adjustRectAndBBox(annotation, 19, 19);",
                "+",
                "         // should be a square, but who knows...",
                "@@ -223,5 +269,7 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-    private void drawHelp(final PDAppearanceContentStream contentStream, PDRectangle bbox)",
                "+    private void drawHelp(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "             throws IOException",
                "     {",
                "+        PDRectangle bbox = adjustRectAndBBox(annotation, 20, 20);",
                "+",
                "         float min = Math.min(bbox.getWidth(), bbox.getHeight());",
                "@@ -251,3 +299,3 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         contentStream.transform(Matrix.getScaleInstance(0.001f * min / 2.25f, 0.001f * min / 2.25f));",
                "-        contentStream.transform(Matrix.getTranslateInstance(540, 375));",
                "+        contentStream.transform(Matrix.getTranslateInstance(555, 375));",
                "@@ -256,2 +304,80 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         GeneralPath path = PDType1Font.HELVETICA.getPath(\"question\");",
                "+        addPath(contentStream, path);",
                "+        contentStream.restoreGraphicsState();",
                "+        // draw the outer circle counterclockwise to fill area between circle and \"?\"",
                "+        drawCircle2(contentStream, min / 2, min / 2, min / 2 - 1);",
                "+        contentStream.fillAndStroke();",
                "+    }",
                "+",
                "+    //TODO this is mostly identical to drawHelp, except for scale, translation and symbol",
                "+     private void drawParagraph(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "+            throws IOException",
                "+    {",
                "+        PDRectangle bbox = adjustRectAndBBox(annotation, 20, 20);",
                "+",
                "+        float min = Math.min(bbox.getWidth(), bbox.getHeight());",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(1);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+",
                "+        // Adobe first fills a white circle with CA ca 0.6, so do we",
                "+        contentStream.saveGraphicsState();",
                "+        contentStream.setLineWidth(1);",
                "+        PDExtendedGraphicsState gs = new PDExtendedGraphicsState();",
                "+        gs.setAlphaSourceFlag(false);",
                "+        gs.setStrokingAlphaConstant(0.6f);",
                "+        gs.setNonStrokingAlphaConstant(0.6f);",
                "+        gs.setBlendMode(BlendMode.NORMAL);",
                "+        contentStream.setGraphicsStateParameters(gs);",
                "+        contentStream.setNonStrokingColor(1f);",
                "+        drawCircle2(contentStream, min / 2, min / 2, min / 2 - 1);",
                "+        contentStream.fill();",
                "+        contentStream.restoreGraphicsState();",
                "+",
                "+        contentStream.saveGraphicsState();",
                "+        // rescale so that \"?\" fits into circle and move \"?\" to circle center",
                "+        // values gathered by trial and error",
                "+        contentStream.transform(Matrix.getScaleInstance(0.001f * min / 3, 0.001f * min / 3));",
                "+        contentStream.transform(Matrix.getTranslateInstance(850, 900));",
                "+",
                "+        // we get the shape of an Helvetica \"?\" and use that one.",
                "+        // Adobe uses a different font (which one?), or created the shape from scratch.",
                "+        GeneralPath path = PDType1Font.HELVETICA.getPath(\"paragraph\");",
                "+        addPath(contentStream, path);",
                "+        contentStream.restoreGraphicsState();",
                "+        // draw the outer circle counterclockwise to fill area between circle and \"?\"",
                "+        drawCircle2(contentStream, min / 2, min / 2, min / 2 - 1);",
                "+        contentStream.fillAndStroke();",
                "+    }",
                "+",
                "+    private void drawNewParagraph(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "+            throws IOException",
                "+    {",
                "+        adjustRectAndBBox(annotation, 13, 20);",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(0);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+",
                "+        // small triangle (values from Adobe)",
                "+        contentStream.moveTo(6.4995f, 20);",
                "+        contentStream.lineTo(0.295f, 7.287f);",
                "+        contentStream.lineTo(12.705f, 7.287f);",
                "+        contentStream.closeAndFillAndStroke();",
                "+",
                "+        // rescale and translate so that \"NP\" fits below the triangle",
                "+        // values gathered by trial and error",
                "+        contentStream.transform(Matrix.getScaleInstance(0.001f * 4, 0.001f * 4));",
                "+        contentStream.transform(Matrix.getTranslateInstance(200, 0));",
                "+        addPath(contentStream, PDType1Font.HELVETICA_BOLD.getPath(\"N\"));",
                "+        contentStream.transform(Matrix.getTranslateInstance(1300, 0));",
                "+        addPath(contentStream, PDType1Font.HELVETICA_BOLD.getPath(\"P\"));",
                "+        contentStream.fill();",
                "+    }",
                "+",
                "+    private void addPath(final PDAppearanceContentStream contentStream, GeneralPath path) throws IOException",
                "+    {",
                "         PathIterator it = path.getPathIterator(new AffineTransform());",
                "@@ -285,6 +411,2 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         }",
                "-        contentStream.restoreGraphicsState();",
                "-        // draw the outer circle counterclockwise to fill area between circle and \"?\"",
                "-        drawCircle2(contentStream, min / 2, min / 2, min / 2 - 1);",
                "-        contentStream.fillAndStroke();",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0be6ddd5256be813dcfeb66c9528f19c19fd9e4c",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527300913,
            "hunks": 16,
            "message": "PDFBOX-3353: avoid ClassCastException, fix javadoc git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832288 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationSquareCircle.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationSquareCircle.java",
                "index 8198bd4fb..077c576d9 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationSquareCircle.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationSquareCircle.java",
                "@@ -27,3 +27,4 @@ import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
                " /**",
                "- * This is the class that represents a rectangular or elliptical annotation introduced in PDF 1.3 specification .",
                "+ * This is the class that represents a rectangular or elliptical annotation introduced in PDF 1.3",
                "+ * specification .",
                "  *",
                "@@ -78,3 +79,4 @@ public abstract class PDAnnotationSquareCircle extends PDAnnotationMarkup",
                "     /**",
                "-     * This will set the border effect dictionary, specifying effects to be applied when drawing the line.",
                "+     * This will set the border effect dictionary, specifying effects to be applied when drawing the",
                "+     * line.",
                "      *",
                "@@ -89,3 +91,4 @@ public abstract class PDAnnotationSquareCircle extends PDAnnotationMarkup",
                "     /**",
                "-     * This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line.",
                "+     * This will retrieve the border effect dictionary, specifying effects to be applied used in",
                "+     * drawing the line.",
                "      *",
                "@@ -95,11 +98,8 @@ public abstract class PDAnnotationSquareCircle extends PDAnnotationMarkup",
                "     {",
                "-        COSDictionary be = (COSDictionary) getCOSObject().getDictionaryObject(COSName.BE);",
                "-        if (be != null)",
                "+        COSBase base = getCOSObject().getDictionaryObject(COSName.BE);",
                "+        if (base instanceof COSDictionary)",
                "         {",
                "-            return new PDBorderEffectDictionary(be);",
                "-        }",
                "-        else",
                "-        {",
                "-            return null;",
                "+            return new PDBorderEffectDictionary((COSDictionary) base);",
                "         }",
                "+        return null;",
                "     }",
                "@@ -107,4 +107,5 @@ public abstract class PDAnnotationSquareCircle extends PDAnnotationMarkup",
                "     /**",
                "-     * This will set the rectangle difference rectangle. Giving the difference between the annotations rectangle and",
                "-     * where the drawing occurs. (To take account of any effects applied through the BE entry forexample)",
                "+     * This will set the rectangle difference rectangle. Giving the difference between the",
                "+     * annotations rectangle and where the drawing occurs. (To take account of any effects applied",
                "+     * through the BE entry for example)",
                "      *",
                "@@ -119,4 +120,5 @@ public abstract class PDAnnotationSquareCircle extends PDAnnotationMarkup",
                "     /**",
                "-     * This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and",
                "-     * where the drawing occurs. (To take account of any effects applied through the BE entry forexample)",
                "+     * This will get the rectangle difference rectangle. Giving the difference between the",
                "+     * annotations rectangle and where the drawing occurs. (To take account of any effects applied",
                "+     * through the BE entry for example)",
                "      *",
                "@@ -126,11 +128,8 @@ public abstract class PDAnnotationSquareCircle extends PDAnnotationMarkup",
                "     {",
                "-        COSArray rd = (COSArray) getCOSObject().getDictionaryObject(COSName.RD);",
                "-        if (rd != null)",
                "-        {",
                "-            return new PDRectangle(rd);",
                "-        }",
                "-        else",
                "+        COSBase base = getCOSObject().getDictionaryObject(COSName.RD);",
                "+        if (base instanceof COSArray)",
                "         {",
                "-            return null;",
                "+            return new PDRectangle((COSArray) base);",
                "         }",
                "+        return null;",
                "     }",
                "@@ -138,3 +137,4 @@ public abstract class PDAnnotationSquareCircle extends PDAnnotationMarkup",
                "     /**",
                "-     * This will set the border style dictionary, specifying the width and dash pattern used in drawing the line.",
                "+     * This will set the border style dictionary, specifying the width and dash pattern used in",
                "+     * drawing the line.",
                "      *",
                "@@ -150,3 +150,4 @@ public abstract class PDAnnotationSquareCircle extends PDAnnotationMarkup",
                "     /**",
                "-     * This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line.",
                "+     * This will retrieve the border style dictionary, specifying the width and dash pattern used in",
                "+     * drawing the line.",
                "      *",
                "@@ -164,12 +165,14 @@ public abstract class PDAnnotationSquareCircle extends PDAnnotationMarkup",
                "     }",
                "-    ",
                "+",
                "     /**",
                "-     * This will set the difference between the annotations \"outer\" rectangle defined by",
                "-     * /Rect and the border.",
                "-     * ",
                "-     * <p>This will set an equal difference for all sides</p>",
                "-     * ",
                "+     * This will set the difference between the annotations \"outer\" rectangle defined by /Rect and",
                "+     * the border.",
                "+     *",
                "+     * <p>",
                "+     * This will set an equal difference for all sides</p>",
                "+     *",
                "      * @param difference from the annotations /Rect entry",
                "      */",
                "-    public void setRectDifferences(float difference) {",
                "+    public void setRectDifferences(float difference)",
                "+    {",
                "         setRectDifferences(difference, difference, difference, difference);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationSquareCircle.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "63e6857b4a18d72b2effcc4096c41b550d60c3a0",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528050958,
            "hunks": 18,
            "message": "PDFBOX-3353: make public git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832781 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java",
                "index 377adb6ed..b2b981817 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java",
                "@@ -24,3 +24,3 @@ import org.apache.pdfbox.pdmodel.font.PDFont;",
                "  */",
                "-class AppearanceStyle",
                "+public class AppearanceStyle",
                " {",
                "@@ -56,3 +56,3 @@ class AppearanceStyle",
                "      */",
                "-    void setFont(PDFont font)",
                "+    public void setFont(PDFont font)",
                "     {",
                "@@ -76,3 +76,3 @@ class AppearanceStyle",
                "      */",
                "-    void setFontSize(float fontSize)",
                "+    public void setFontSize(float fontSize)",
                "     {",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java",
                "index 165c8e455..16261b3e2 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java",
                "@@ -36,3 +36,3 @@ import org.apache.pdfbox.pdmodel.font.PDFont;",
                "  */",
                "-class PlainText",
                "+public class PlainText",
                " {",
                "@@ -51,3 +51,3 @@ class PlainText",
                "      */",
                "-    PlainText(String textValue)",
                "+    public PlainText(String textValue)",
                "     {",
                "@@ -74,3 +74,3 @@ class PlainText",
                "      */",
                "-    PlainText(List<String> listValue)",
                "+    public PlainText(List<String> listValue)",
                "     {",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java",
                "index 6458d8404..df9dd603b 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java",
                "@@ -28,3 +28,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.layout.PlainText.Word;",
                " /**",
                "- * TextFormatter to handle plain text formatting.",
                "+ * TextFormatter to handle plain text formatting for annotation rectangles.",
                "  * ",
                "@@ -34,3 +34,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.layout.PlainText.Word;",
                "-class PlainTextFormatter",
                "+public class PlainTextFormatter",
                " {",
                "@@ -82,3 +82,3 @@ class PlainTextFormatter",
                "-    static class Builder",
                "+    public static class Builder",
                "     {",
                "@@ -100,3 +100,3 @@ class PlainTextFormatter",
                "-        Builder(PDAppearanceContentStream contents)",
                "+        public Builder(PDAppearanceContentStream contents)",
                "         {",
                "@@ -105,3 +105,3 @@ class PlainTextFormatter",
                "-        Builder style(AppearanceStyle appearanceStyle)",
                "+        public Builder style(AppearanceStyle appearanceStyle)",
                "         {",
                "@@ -111,3 +111,3 @@ class PlainTextFormatter",
                "-        Builder wrapLines(boolean wrapLines)",
                "+        public Builder wrapLines(boolean wrapLines)",
                "         {",
                "@@ -117,3 +117,3 @@ class PlainTextFormatter",
                "-        Builder width(float width)",
                "+        public Builder width(float width)",
                "         {",
                "@@ -123,3 +123,3 @@ class PlainTextFormatter",
                "-        Builder textAlign(int alignment)",
                "+        public Builder textAlign(int alignment)",
                "         {",
                "@@ -129,3 +129,3 @@ class PlainTextFormatter",
                "-        Builder textAlign(TextAlign alignment)",
                "+        public Builder textAlign(TextAlign alignment)",
                "         {",
                "@@ -136,3 +136,3 @@ class PlainTextFormatter",
                "-        Builder text(PlainText textContent)",
                "+        public Builder text(PlainText textContent)",
                "         {",
                "@@ -142,3 +142,3 @@ class PlainTextFormatter",
                "-        Builder initialOffset(float horizontalOffset, float verticalOffset)",
                "+        public Builder initialOffset(float horizontalOffset, float verticalOffset)",
                "         {",
                "@@ -149,3 +149,3 @@ class PlainTextFormatter",
                "-        PlainTextFormatter build()",
                "+        public PlainTextFormatter build()",
                "         {"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "399d7ef280239f47f5ee689b4d073b0d0bbccce5",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532463659,
            "hunks": 3,
            "message": "PDFBOX-4271: use sha512 instead of md5, use newer plugin git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1836584 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/preflight/pom.xml b/preflight/pom.xml",
                "index fcbebd90d..f38e659e8 100644",
                "--- a/preflight/pom.xml",
                "+++ b/preflight/pom.xml",
                "@@ -109,4 +109,3 @@",
                "                 <groupId>com.googlecode.maven-download-plugin</groupId>",
                "-                <!-- can't use download-maven-plugin for JDK6, see PDFBOX-3532 -->",
                "-                <artifactId>maven-download-plugin</artifactId>",
                "+                <artifactId>download-maven-plugin</artifactId>",
                "                 <configuration>",
                "@@ -125,3 +124,3 @@",
                "                             <outputDirectory>${project.build.directory}/pdfs</outputDirectory>",
                "-                            <md5>9f129c834bc6f9f8dabad4491c4c10ec</md5>",
                "+                            <sha512>66bf4ad470b36079c1e0ceca4438053f32649f964fb1de5cd88babce36c5afc0ba6fa7880bc1c9aac791df872cdfc8dc9851bfd3c75ae96786edd8fac61193ae</sha512>",
                "                         </configuration>",
                "@@ -139,3 +138,3 @@",
                "                             <outputDirectory>${project.build.directory}/pdfs</outputDirectory>",
                "-                            <md5>d8fccb2fea540ab49bef237f3579546b</md5>",
                "+                            <sha512>a6efe70574dcde3628271fc1d7aa32cc00095334aa9415e5ebfb96cc20e0f79edd040c0290d5a76b4ced4c6a4343ba4af9567bf12eb7cfe3ec70f1a43202c231</sha512>",
                "                         </configuration>"
            ],
            "changed_files": [
                "preflight/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4271": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4271",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1f7d51fe972e9cab88cdc052048d613300db2159",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527613647,
            "hunks": 1,
            "message": "PDFBOX-3353: remove unused import git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832461 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "index 08631c951..68a59bee0 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "@@ -22,3 +22,2 @@ import org.apache.commons.logging.LogFactory;",
                " import org.apache.fontbox.util.Charsets;",
                "-import org.apache.pdfbox.contentstream.PDFStreamEngine;",
                " import org.apache.pdfbox.contentstream.operator.Operator;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "65a3e829469c2433c26f9e272d2eba3897f334e1",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530634529,
            "hunks": 4,
            "message": "PDFBOX-3353: add handler for squiggly annotation git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835002 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquigglyAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquigglyAppearanceHandler.java",
                "index ccabb40b6..7a54d95d2 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquigglyAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquigglyAppearanceHandler.java",
                "@@ -18,5 +18,22 @@ package org.apache.pdfbox.pdmodel.interactive.annotation.handlers;",
                "+import java.awt.geom.AffineTransform;",
                "+import java.io.IOException;",
                " import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "+import org.apache.pdfbox.cos.COSName;",
                "+import org.apache.pdfbox.cos.COSStream;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDFormContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDPatternContentStream;",
                "+import org.apache.pdfbox.pdmodel.PDResources;",
                "+import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDPattern;",
                "+import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;",
                "+import org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquiggly;",
                "+import org.apache.pdfbox.util.Matrix;",
                "@@ -45,3 +62,107 @@ public class PDSquigglyAppearanceHandler extends PDAbstractAppearanceHandler",
                "     {",
                "-        //TODO",
                "+        PDAnnotationSquiggly annotation = (PDAnnotationSquiggly) getAnnotation();",
                "+        PDRectangle rect = annotation.getRectangle();",
                "+        float[] pathsArray = annotation.getQuadPoints();",
                "+        if (pathsArray == null)",
                "+        {",
                "+            return;",
                "+        }",
                "+        AnnotationBorder ab = AnnotationBorder.getAnnotationBorder(annotation, annotation.getBorderStyle());",
                "+        PDColor color = annotation.getColor();",
                "+        if (color == null || color.getComponents().length == 0)",
                "+        {",
                "+            return;",
                "+        }",
                "+        if (Float.compare(ab.width, 0) == 0)",
                "+        {",
                "+            // value found in adobe reader",
                "+            ab.width = 1.5f;",
                "+        }",
                "+",
                "+        // Adjust rectangle even if not empty, see PLPDF.com-MarkupAnnotations.pdf",
                "+        //TODO in a class structure this should be overridable",
                "+        // this is similar to polyline but different data type",
                "+        // all coordinates (unlike painting) are used because I'm lazy",
                "+        float minX = Float.MAX_VALUE;",
                "+        float minY = Float.MAX_VALUE;",
                "+        float maxX = Float.MIN_VALUE;",
                "+        float maxY = Float.MIN_VALUE;",
                "+        for (int i = 0; i < pathsArray.length / 2; ++i)",
                "+        {",
                "+            float x = pathsArray[i * 2];",
                "+            float y = pathsArray[i * 2 + 1];",
                "+            minX = Math.min(minX, x);",
                "+            minY = Math.min(minY, y);",
                "+            maxX = Math.max(maxX, x);",
                "+            maxY = Math.max(maxY, y);",
                "+        }",
                "+        rect.setLowerLeftX(Math.min(minX - ab.width / 2, rect.getLowerLeftX()));",
                "+        rect.setLowerLeftY(Math.min(minY - ab.width / 2, rect.getLowerLeftY()));",
                "+        rect.setUpperRightX(Math.max(maxX + ab.width / 2, rect.getUpperRightX()));",
                "+        rect.setUpperRightY(Math.max(maxY + ab.width / 2, rect.getUpperRightY()));",
                "+        annotation.setRectangle(rect);",
                "+",
                "+        try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "+        {",
                "+            setOpacity(cs, annotation.getConstantOpacity());",
                "+",
                "+            cs.setStrokingColor(color);",
                "+",
                "+            //TODO we ignore dash pattern and line width for now. Do they have any effect?",
                "+",
                "+",
                "+            // quadpoints spec is incorrect",
                "+            // https://stackoverflow.com/questions/9855814/pdf-spec-vs-acrobat-creation-quadpoints",
                "+            for (int i = 0; i < pathsArray.length / 8; ++i)",
                "+            {",
                "+                // Adobe uses a fixed pattern that assumes a height of 40, and it transforms to that height",
                "+                // horizontally and the same / 1.8 vertically.",
                "+                // translation apparently based on bottom left, but slightly different in Adobe",
                "+                //TODO what if the annotation is not horizontal?",
                "+                float height = pathsArray[i * 8 + 1] - pathsArray[i * 8 + 5];",
                "+                cs.transform(new Matrix(height / 40f, 0, 0, height / 40f / 1.8f, pathsArray[i * 8 + 4], pathsArray[i * 8 + 5]));",
                "+",
                "+                // Create form, BBox is mostly fixed, except for the horizontal size which is",
                "+                // horizontal size divided by the horizontal transform factor from above",
                "+                // (almost)",
                "+                PDFormXObject form = new PDFormXObject(new COSStream());",
                "+                form.setBBox(new PDRectangle(-0.5f, -0.5f, (pathsArray[i * 8 + 2] - pathsArray[i * 8]) / height * 40f + 0.5f, 13));",
                "+                form.setResources(new PDResources());",
                "+                form.setMatrix(AffineTransform.getTranslateInstance(0.5f, 0.5f));",
                "+                cs.drawForm(form);",
                "+                try (PDFormContentStream formCS = new PDFormContentStream(form))",
                "+                {",
                "+                    PDTilingPattern pattern = new PDTilingPattern();",
                "+                    pattern.setBBox(new PDRectangle(0, 0, 10, 12));",
                "+                    pattern.setXStep(10);",
                "+                    pattern.setYStep(13);",
                "+                    pattern.setTilingType(PDTilingPattern.TILING_CONSTANT_SPACING_FASTER_TILING);",
                "+                    pattern.setPaintType(PDTilingPattern.PAINT_UNCOLORED);",
                "+                    try (PDPatternContentStream patternCS = new PDPatternContentStream(pattern))",
                "+                    {",
                "+                        // from Adobe",
                "+                        patternCS.setLineCapStyle(1);",
                "+                        patternCS.setLineJoinStyle(1);",
                "+                        patternCS.setLineWidth(1);",
                "+                        patternCS.setMiterLimit(10);",
                "+                        patternCS.moveTo(0, 1);",
                "+                        patternCS.lineTo(5, 11);",
                "+                        patternCS.lineTo(10, 1);",
                "+                        patternCS.stroke();",
                "+                    }",
                "+                    COSName patternName = form.getResources().add(pattern);",
                "+                    PDColorSpace patternColorSpace = new PDPattern(null, PDDeviceRGB.INSTANCE);",
                "+                    PDColor patternColor = new PDColor(color.getComponents(), patternName, patternColorSpace);",
                "+                    formCS.setNonStrokingColor(patternColor);",
                "+",
                "+                    // With Adobe, the horizontal size is slightly different, don't know why",
                "+                    formCS.addRect(0, 0, (pathsArray[i * 8 + 2] - pathsArray[i * 8]) / height * 40f, 12);",
                "+                    formCS.fill();",
                "+                }",
                "+            }",
                "+        }",
                "+        catch (IOException ex)",
                "+        {",
                "+            LOG.error(ex);",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquigglyAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1d2fd3df5264ea7bc367dacc0c5b8b1435bdb5da",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523724888,
            "hunks": 7,
            "message": "PDFBOX-3809: flatten only specified fields git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1829151 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "index 5af88cba3..de3ba969b 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "@@ -253,2 +253,7 @@ public final class PDAcroForm implements COSObjectable",
                "     {",
                "+        // Nothing to flatten if there are no fields provided",
                "+        if (fields.isEmpty()) {",
                "+            return;",
                "+        }",
                "+",
                "         // for dynamic XFA forms there is no flatten as this would mean to do a rendering",
                "@@ -273,2 +278,5 @@ public final class PDAcroForm implements COSObjectable",
                "         PDPageContentStream contentStream;",
                "+",
                "+        // get the widgets per page",
                "+        Map<COSDictionary,Map<COSDictionary,PDAnnotationWidget>> pagesWidgetsMap = buildPagesWidgetsMap(fields);",
                "@@ -277,2 +285,3 @@ public final class PDAcroForm implements COSObjectable",
                "         {",
                "+            Map<COSDictionary,PDAnnotationWidget> widgetsForPageMap = pagesWidgetsMap.get(page.getCOSObject());",
                "             isContentStreamWrapped = false;",
                "@@ -283,3 +292,3 @@ public final class PDAcroForm implements COSObjectable",
                "             {",
                "-                if (!(annotation instanceof PDAnnotationWidget))",
                "+                if (widgetsForPageMap != null && widgetsForPageMap.get(annotation.getCOSObject()) == null)",
                "                 {",
                "@@ -352,3 +361,3 @@ public final class PDAcroForm implements COSObjectable",
                "         // remove the fields",
                "-        setFields(Collections.<PDField>emptyList());",
                "+        removeFields(fields);",
                "@@ -705,21 +714,2 @@ public final class PDAcroForm implements COSObjectable",
                "-    private Map<COSDictionary, Integer> buildAnnotationToPageRef() {",
                "-        Map<COSDictionary, Integer> annotationToPageRef = new HashMap<COSDictionary, Integer>();",
                "-        ",
                "-        int idx = 0;",
                "-        for (PDPage page : document.getPages()) {",
                "-            try {",
                "-                for (PDAnnotation annotation : page.getAnnotations()) {",
                "-                    if (annotation instanceof PDAnnotationWidget) {",
                "-                        annotationToPageRef.put(annotation.getCOSObject(), idx);",
                "-                    }",
                "-                }",
                "-            } catch (IOException e) {",
                "-                LOG.warn(\"Can't retriev annotations for page \" + idx);",
                "-            }",
                "-            idx++;",
                "-        }        ",
                "-        return annotationToPageRef;",
                "-    }",
                "-    ",
                "     /**",
                "@@ -782,2 +772,73 @@ public final class PDAcroForm implements COSObjectable",
                "     }",
                "+",
                "+    private Map<COSDictionary,Map<COSDictionary,PDAnnotationWidget>> buildPagesWidgetsMap(List<PDField> fields)",
                "+    {",
                "+        Map<COSDictionary,Map<COSDictionary,PDAnnotationWidget>> pagesAnnotationsMap = new HashMap<COSDictionary,Map<COSDictionary,PDAnnotationWidget>>();",
                "+        boolean hasMissingPageRef = false;",
                "+        ",
                "+        for (PDField field : fields)",
                "+        {",
                "+            List<PDAnnotationWidget> widgets = field.getWidgets();",
                "+            for (PDAnnotationWidget widget : widgets)",
                "+            {",
                "+                PDPage pageForWidget = widget.getPage();",
                "+                if (pageForWidget != null)",
                "+                {",
                "+                    if (pagesAnnotationsMap.get(pageForWidget.getCOSObject()) == null)",
                "+                    {",
                "+                        Map<COSDictionary,PDAnnotationWidget> widgetsForPage = new HashMap<COSDictionary,PDAnnotationWidget>();",
                "+                        widgetsForPage.put(widget.getCOSObject(), widget);",
                "+                        pagesAnnotationsMap.put(pageForWidget.getCOSObject(), widgetsForPage);",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        Map<COSDictionary,PDAnnotationWidget> widgetsForPage = pagesAnnotationsMap.get(pageForWidget.getCOSObject());",
                "+                        widgetsForPage.put(widget.getCOSObject(), widget);",
                "+                    }",
                "+                }",
                "+                else",
                "+                {",
                "+                    hasMissingPageRef = true;",
                "+                }",
                "+            }",
                "+        }",
                "+        ",
                "+        // TODO: if there is a widget with a missing page reference ",
                "+        // we'd need to build the map reverse i.e. form the annotations to the ",
                "+        // widget. But this will be much slower so will be omitted for now.",
                "+        if (hasMissingPageRef)",
                "+        {",
                "+            LOG.warn(\"There has been a widget with a missing page reference. Please report to the PDFBox project\");",
                "+        }",
                "+        ",
                "+        return pagesAnnotationsMap;",
                "+    }",
                "+    ",
                "+    private void removeFields(List<PDField> fields)",
                "+    {",
                "+        for (PDField field : fields) {",
                "+            if (field.getParent() == null)",
                "+            {",
                "+                COSArray cosFields = (COSArray) dictionary.getDictionaryObject(COSName.FIELDS);",
                "+                for (int i=0; i<cosFields.size(); i++)",
                "+                {",
                "+                    COSDictionary element = (COSDictionary) cosFields.getObject(i);",
                "+                    if (field.getCOSObject().equals(element)) {",
                "+                        cosFields.remove(i);",
                "+                    }",
                "+                }",
                "+            }",
                "+            else ",
                "+            {",
                "+                COSArray kids = (COSArray) field.getParent().getCOSObject().getDictionaryObject(COSName.KIDS);",
                "+                for (int i=0; i<kids.size(); i++)",
                "+                {",
                "+                    COSDictionary element = (COSDictionary) kids.getObject(i);",
                "+                    if (field.getCOSObject().equals(element)) {",
                "+                        kids.remove(i);",
                "+                    }",
                "+                }",
                "+            }",
                "+        }        ",
                "+    }",
                " }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3809": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3809",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7332a6328dd8943adbc90f854ce2e6022883167a",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530360003,
            "hunks": 2,
            "message": "PDFBOX-3353: clarify comments git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834730 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index 42a52117e..eb5ac2f3a 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -615,4 +615,5 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         contentStream.transform(Matrix.getTranslateInstance(500, -300));",
                "-        ",
                "-        // outer shape from Font Awesome by \"printing\" comment.svg into a PDF",
                "+",
                "+        // outer shape was gathered from Font Awesome by \"printing\" comment.svg",
                "+        // into a PDF and looking at the content stream",
                "         contentStream.moveTo(2549, 5269);",
                "@@ -651,3 +652,4 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        // shape from Font Awesome by \"printing\" key.svg into a PDF",
                "+        // shape was gathered from Font Awesome by \"printing\" key.svg into a PDF",
                "+        // and looking at the content stream",
                "         contentStream.moveTo(4799, 4004);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "735c69f20365744ce7cfd9d7df82ee6dca8c2561",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527274418,
            "hunks": 4,
            "message": "PDFBOX-3353: attempt at drawing the callout line git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832267 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "index ac626ed10..3e1b2edf7 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "@@ -17,5 +17,13 @@ package org.apache.pdfbox.pdmodel.interactive.annotation.handlers;",
                "+import java.io.IOException;",
                " import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText;",
                "+import static org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine.LE_NONE;",
                "+import static org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler.SHORT_STYLES;",
                "+import org.apache.pdfbox.util.Matrix;",
                "@@ -41,3 +49,113 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "     {",
                "-        // TODO to be implemented",
                "+        PDAnnotationFreeText annotation = (PDAnnotationFreeText) getAnnotation();",
                "+        PDRectangle rect = annotation.getRectangle();",
                "+        float[] pathsArray = new float[0];",
                "+        if (\"FreeTextCallout\".equals(annotation.getIntent()))",
                "+        {",
                "+            pathsArray = annotation.getCallout();",
                "+            if (pathsArray == null || pathsArray.length != 4 && pathsArray.length != 6)",
                "+            {",
                "+                pathsArray = new float[0];",
                "+            }",
                "+        }",
                "+        AnnotationBorder ab = AnnotationBorder.getAnnotationBorder(annotation, annotation.getBorderStyle());",
                "+        PDColor color = annotation.getColor();",
                "+        if (color == null || color.getComponents().length == 0 || Float.compare(ab.width, 0) == 0)",
                "+        {",
                "+            return;",
                "+        }",
                "+",
                "+        if (pathsArray.length > 0)",
                "+        {",
                "+            // Adjust rectangle even if not empty",
                "+            // CTAN-example-Annotations.pdf p1",
                "+            //TODO in a class structure this should be overridable",
                "+            float minX = Float.MAX_VALUE;",
                "+            float minY = Float.MAX_VALUE;",
                "+            float maxX = Float.MIN_VALUE;",
                "+            float maxY = Float.MIN_VALUE;",
                "+            for (int i = 0; i < pathsArray.length / 2; ++i)",
                "+            {",
                "+                float x = pathsArray[i * 2];",
                "+                float y = pathsArray[i * 2 + 1];",
                "+                minX = Math.min(minX, x);",
                "+                minY = Math.min(minY, y);",
                "+                maxX = Math.max(maxX, x);",
                "+                maxY = Math.max(maxY, y);",
                "+            }",
                "+            // arrow length is 9 * width at about 30\u00c3\u0082\u00c2\u00b0 => 10 * width seems to be enough",
                "+            rect.setLowerLeftX(Math.min(minX - ab.width * 10, rect.getLowerLeftX()));",
                "+            rect.setLowerLeftY(Math.min(minY - ab.width * 10, rect.getLowerLeftY()));",
                "+            rect.setUpperRightX(Math.max(maxX + ab.width * 10, rect.getUpperRightX()));",
                "+            rect.setUpperRightY(Math.max(maxY + ab.width * 10, rect.getUpperRightY()));",
                "+            annotation.setRectangle(rect);",
                "+        }",
                "+",
                "+        try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "+        {",
                "+            // The fill color is the /C entry, there is no /IC entry defined",
                "+            boolean hasBackground = cs.setNonStrokingColorOnDemand(annotation.getColor());",
                "+            setOpacity(cs, annotation.getConstantOpacity());",
                "+",
                "+            // in reality, Adobe uses the non stroking color from /DA as stroking color. WTF?",
                "+            boolean hasStroke = cs.setStrokingColorOnDemand(color);",
                "+            if (ab.dashArray != null)",
                "+            {",
                "+                cs.setLineDashPattern(ab.dashArray, 0);",
                "+            }",
                "+            cs.setLineWidth(ab.width);",
                "+",
                "+            for (int i = 0; i < pathsArray.length / 2; ++i)",
                "+            {",
                "+                float x = pathsArray[i * 2];",
                "+                float y = pathsArray[i * 2 + 1];",
                "+                if (i == 0)",
                "+                {",
                "+                    if (SHORT_STYLES.contains(annotation.getLineEndingStyle()))",
                "+                    {",
                "+                        // modify coordinate to shorten the segment",
                "+                        // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "+                        float x1 = pathsArray[2];",
                "+                        float y1 = pathsArray[3];",
                "+                        float len = (float) (Math.sqrt(Math.pow(x - x1, 2) + Math.pow(y - y1, 2)));",
                "+                        if (Float.compare(len, 0) != 0)",
                "+                        {",
                "+                            x += (x1 - x) / len * ab.width;",
                "+                            y += (y1 - y) / len * ab.width;",
                "+                        }",
                "+                    }",
                "+                    cs.moveTo(x, y);",
                "+                }",
                "+                else",
                "+                {",
                "+                    cs.lineTo(x, y);",
                "+                }",
                "+            }",
                "+            cs.stroke();",
                "+",
                "+            // do a transform so that first \"arm\" is imagined flat, like in line handler",
                "+            // the alternative would be to apply the transform to the LE shapes directly,",
                "+            // which would be more work and produce code difficult to understand",
                "+            // paint the styles here and after line(s) draw, to avoid line crossing a filled shape",
                "+            if (\"FreeTextCallout\".equals(annotation.getIntent())",
                "+                    && !LE_NONE.equals(annotation.getLineEndingStyle())",
                "+                    && pathsArray.length >= 4)",
                "+            {",
                "+                // check only needed to avoid q cm Q if LE_NONE",
                "+                float x2 = pathsArray[2];",
                "+                float y2 = pathsArray[3];",
                "+                float x1 = pathsArray[0];",
                "+                float y1 = pathsArray[1];",
                "+                double angle = Math.atan2(y2 - y1, x2 - x1);",
                "+                cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "+                drawStyle(annotation.getLineEndingStyle(), cs, 0, 0, ab.width, hasStroke, hasBackground);",
                "+            }",
                "+            ",
                "+            //TODO display border and text",
                "+            // how to set the text color? Apparently red is the default.",
                "+        }",
                "+        catch (IOException ex)",
                "+        {",
                "+            LOG.error(ex);",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a032a8f29dbb69b762b9fbf46e9c2d22fc142a42",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528392302,
            "hunks": 4,
            "message": "PDFBOX-4071: simplify code git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833129 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/tools/src/main/java/org/apache/pdfbox/tools/PDFSplit.java b/tools/src/main/java/org/apache/pdfbox/tools/PDFSplit.java",
                "index fa01e52cd..310285817 100644",
                "--- a/tools/src/main/java/org/apache/pdfbox/tools/PDFSplit.java",
                "+++ b/tools/src/main/java/org/apache/pdfbox/tools/PDFSplit.java",
                "@@ -20,3 +20,2 @@ import java.io.File;",
                " import java.io.IOException;",
                "-import java.io.FileOutputStream;",
                "@@ -25,3 +24,2 @@ import java.util.List;",
                " import org.apache.pdfbox.pdmodel.PDDocument;",
                "-import org.apache.pdfbox.pdfwriter.COSWriter;",
                " import org.apache.pdfbox.multipdf.Splitter;",
                "@@ -172,4 +170,3 @@ public final class PDFSplit",
                "                     {",
                "-                        String fileName = outputPrefix + \"-\" + (i + 1) + \".pdf\";",
                "-                        writeDocument(doc, fileName);",
                "+                        doc.save(outputPrefix + \"-\" + (i + 1) + \".pdf\");",
                "                     }",
                "@@ -193,11 +190,2 @@ public final class PDFSplit",
                "-    private static void writeDocument( PDDocument doc, String fileName ) throws IOException",
                "-    {",
                "-        try (FileOutputStream output = new FileOutputStream(fileName);",
                "-             COSWriter writer = new COSWriter(output))",
                "-        {",
                "-            writer.write(doc);",
                "-        }",
                "-    }",
                "-",
                "     /**"
            ],
            "changed_files": [
                "tools/src/main/java/org/apache/pdfbox/tools/PDFSplit.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f8092d633c14e26b6f9015623a07de6524fd1880",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532264250,
            "hunks": 2,
            "message": "PDFBOX-4271: no longer use the old plugin, as suggested by Karl Heinz Marbaise git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1836436 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index b664c95c8..2858e38ae 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -243,8 +243,2 @@",
                "                 </plugin>",
                "-            <plugin>",
                "-                <groupId>com.googlecode.maven-download-plugin</groupId>",
                "-                <!-- can't use download-maven-plugin for JDK6, see PDFBOX-3532 -->",
                "-                <artifactId>maven-download-plugin</artifactId>",
                "-                <version>1.1.0</version>",
                "-            </plugin>",
                "             <plugin>",
                "diff --git a/preflight/pom.xml b/preflight/pom.xml",
                "index e1d566889..3e1318602 100644",
                "--- a/preflight/pom.xml",
                "+++ b/preflight/pom.xml",
                "@@ -109,4 +109,3 @@",
                "                 <groupId>com.googlecode.maven-download-plugin</groupId>",
                "-                <!-- can't use download-maven-plugin for JDK6, see PDFBOX-3532 -->",
                "-                <artifactId>maven-download-plugin</artifactId>",
                "+                <artifactId>download-maven-plugin</artifactId>",
                "                 <configuration>"
            ],
            "changed_files": [
                "parent/pom.xml",
                "preflight/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4271": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4271",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1935ded739bd338450cddf24bb003b35d4d0228e",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530725558,
            "hunks": 19,
            "message": "PDFBOX-3353: remove unneeded stroke(), unneeded rotation, unneeded /RD handling, use Adobe offsets for non-cloudy, adjust BBox and offsets and width when /RD is set git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835073 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "index 071d9ce67..9904364b6 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "@@ -17,3 +17,2 @@ package org.apache.pdfbox.pdmodel.interactive.annotation.handlers;",
                "-import java.awt.geom.AffineTransform;",
                " import java.io.IOException;",
                "@@ -125,3 +124,6 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             }",
                "-            cs.stroke();",
                "+            if (pathsArray.length > 0)",
                "+            {",
                "+                cs.stroke();",
                "+            }",
                "@@ -156,5 +158,3 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-",
                "-",
                "-            //TODO this segment was copied from square handler. Refactor?",
                "+            PDRectangle borderBox;",
                "             PDBorderEffectDictionary borderEffect = annotation.getBorderEffect();",
                "@@ -162,2 +162,3 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             {",
                "+                //TODO this segment was copied from square handler. Refactor?",
                "                 CloudyBorder cloudyBorder = new CloudyBorder(cs,",
                "@@ -168,3 +169,4 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "-                appearanceStream.setBBox(cloudyBorder.getBBox());",
                "+                borderBox = cloudyBorder.getBBox();",
                "+                appearanceStream.setBBox(borderBox);",
                "                 appearanceStream.setMatrix(cloudyBorder.getMatrix());",
                "@@ -179,6 +181,3 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 //   border difference.",
                "-                // - if /RD is not set the border box is defined by the /Rect entry. The /RD entry will",
                "-                //   be set to be the line width and the /Rect is enlarged by the /RD amount",
                "-",
                "-                PDRectangle borderBox;",
                "+                // - if /RD is not set then we don't touch /RD etc because Adobe doesn't either.",
                "                 float[] rectDifferences = annotation.getRectDifferences();",
                "@@ -186,13 +185,3 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 {",
                "-                    borderBox = getPaddedRectangle(getRectangle(), ab.width/2);",
                "-                    // the differences rectangle",
                "-                    annotation.setRectDifferences(ab.width/2);",
                "-                    annotation.setRectangle(addRectDifferences(getRectangle(), annotation.getRectDifferences()));",
                "-",
                "-                    // when the normal appearance stream was generated BBox and Matrix have been set to the",
                "-                    // values of the original /Rect. As the /Rect was changed that needs to be adjusted too.",
                "-                    annotation.getNormalAppearanceStream().setBBox(getRectangle());",
                "-                    AffineTransform transform = AffineTransform.getTranslateInstance(-getRectangle().getLowerLeftX(),",
                "-                            -getRectangle().getLowerLeftY());",
                "-                    annotation.getNormalAppearanceStream().setMatrix(transform);",
                "+                    borderBox = getRectangle();",
                "                 }",
                "@@ -201,4 +190,5 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     borderBox = applyRectDifferences(getRectangle(), rectDifferences);",
                "-                    borderBox = getPaddedRectangle(borderBox, ab.width/2);",
                "+                    annotation.getNormalAppearanceStream().setBBox(borderBox);",
                "                 }",
                "+                borderBox = getPaddedRectangle(borderBox, ab.width / 2);",
                "                 cs.addRect(borderBox.getLowerLeftX(), borderBox.getLowerLeftY(),",
                "@@ -214,3 +204,3 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             float yOffset;",
                "-            float width = rotation == 90 || rotation == 270 ? getRectangle().getHeight(): getRectangle().getWidth();",
                "+            float width = rotation == 90 || rotation == 270 ? borderBox.getHeight(): borderBox.getWidth();",
                "             // somewhat inspired by AppearanceGeneratorHelper.insertGeneratedAppearance()",
                "@@ -221,2 +211,3 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             {",
                "+                //TODO cloudy needs to be reviewed too.",
                "                 factor = 2;",
                "@@ -224,2 +215,5 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             float fontSize = extractFontSize(annotation);",
                "+            // used by Adobe, no idea where it comes from, actual font bbox max y is 0.931",
                "+            // gathered by creating an annotation with width 0.",
                "+            float yDelta = 0.7896f;",
                "             switch (rotation)",
                "@@ -227,12 +221,12 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 case 180:",
                "-                    xOffset = - getRectangle().getUpperRightX() + fontSize / 2 * factor; ",
                "-                    yOffset = - getRectangle().getLowerLeftY() - font.getBoundingBox().getHeight() * fontSize / 1000 * factor;",
                "+                    xOffset = - borderBox.getUpperRightX() + ab.width * 2 * factor; ",
                "+                    yOffset = - borderBox.getLowerLeftY() - ab.width * 2 * factor - yDelta * fontSize * factor;",
                "                     break;",
                "                 case 90:",
                "-                    xOffset = getRectangle().getLowerLeftY() + fontSize / 2 * factor;",
                "-                    yOffset = - getRectangle().getLowerLeftX() - font.getBoundingBox().getHeight() * fontSize / 1000 * factor;",
                "+                    xOffset = borderBox.getLowerLeftY() + ab.width * 2 * factor;",
                "+                    yOffset = - borderBox.getLowerLeftX() - ab.width * 2 * factor - yDelta * fontSize * factor;",
                "                     break;",
                "                 case 270:",
                "-                    xOffset = - getRectangle().getUpperRightY() + fontSize / 2 * factor;",
                "-                    yOffset = getRectangle().getUpperRightX() - font.getBoundingBox().getHeight() * fontSize / 1000 * factor;",
                "+                    xOffset = - borderBox.getUpperRightY() + ab.width * 2 * factor;",
                "+                    yOffset = borderBox.getUpperRightX() - ab.width * 2 * factor - yDelta * fontSize * factor;",
                "                     break;",
                "@@ -240,4 +234,4 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 default:",
                "-                    xOffset = getRectangle().getLowerLeftX() + fontSize / 2 * factor;",
                "-                    yOffset = getRectangle().getUpperRightY() - font.getBoundingBox().getHeight() * fontSize / 1000 * factor;",
                "+                    xOffset = borderBox.getLowerLeftX() + ab.width * 2 * factor;",
                "+                    yOffset = borderBox.getUpperRightY() - ab.width * 2 * factor - yDelta * fontSize * factor;",
                "                     break;",
                "@@ -245,3 +239,3 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             cs.setFont(font, fontSize);",
                "-            cs.setNonStrokingColor(strokingColor);",
                "+            cs.setNonStrokingColor(strokingColor.getComponents());",
                "             AppearanceStyle appearanceStyle = new AppearanceStyle();",
                "@@ -252,3 +246,3 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     .text(new PlainText(annotation.getContents()))",
                "-                    .width(width - fontSize / factor)",
                "+                    .width(width - ab.width * factor * 4)",
                "                     .wrapLines(true)",
                "@@ -285,3 +279,3 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 }",
                "-                // arrow length is 9 * width at about 30\u00c3\u0082\u00c2\u00b0 => 10 * width seems to be enough",
                "+                // arrow length is 9 * width at about 30\u00c2\u00b0 => 10 * width seems to be enough",
                "                 rect.setLowerLeftX(Math.min(minX - ab.width * 10, rect.getLowerLeftX()));"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2b0381aa841d6094ade83ac1e73a175a8bb7bda4",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530813788,
            "hunks": 7,
            "message": "PDFBOX-3353: support and use compression for long content streams git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835166 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "index ca1a87077..f16140efa 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "@@ -46,2 +46,15 @@ public final class PDAppearanceContentStream extends PDAbstractContentStream imp",
                "+    /**",
                "+     * Create a new appearance stream.",
                "+     *",
                "+     * @param appearance The appearance stream to write to.",
                "+     * @param compress whether the content stream is to be compressed. Set this to true when",
                "+     * creating long content streams.",
                "+     * @throws IOException If there is an error writing to the content stream.",
                "+     */",
                "+    public PDAppearanceContentStream(PDAppearanceStream appearance, boolean compress) throws IOException",
                "+    {",
                "+        this(appearance, appearance.getStream().createOutputStream(compress ? COSName.FLATE_DECODE : null));",
                "+    }",
                "+",
                "     /**",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "index 1300770d9..8ac1250f8 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "@@ -128,3 +128,21 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "         PDAppearanceEntry appearanceEntry = getNormalAppearance();",
                "-        return getAppearanceEntryAsContentStream(appearanceEntry);",
                "+        return getAppearanceEntryAsContentStream(appearanceEntry, false);",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Get the annotations normal appearance content stream.",
                "+     * ",
                "+     * <p>",
                "+     * This will get the annotations normal appearance content stream,",
                "+     * to 'draw' to.",
                "+     * ",
                "+     * @param compress whether the content stream is to be compressed. Set this to true when",
                "+     * creating long content streams.",
                "+     * @return the appearance entry representing the normal appearance.",
                "+     * @throws IOException",
                "+     */",
                "+    PDAppearanceContentStream getNormalAppearanceAsContentStream(boolean compress) throws IOException",
                "+    {",
                "+        PDAppearanceEntry appearanceEntry = getNormalAppearance();",
                "+        return getAppearanceEntryAsContentStream(appearanceEntry, compress);",
                "     }",
                "@@ -208,5 +226,7 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "      * Get a rectangle enlarged by the differences.",
                "-     * ",
                "-     * <p>Creates a new rectangle with differences added to each side.",
                "-     * .",
                "+     *",
                "+     * <p>",
                "+     * Creates a new rectangle with differences added to each side. If there are no valid",
                "+     * differences, then the original rectangle is returned.",
                "+     *",
                "      * @param rectangle the rectangle.",
                "@@ -230,5 +250,7 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "      * Get a rectangle with the differences applied to each side.",
                "-     * ",
                "-     * <p>Creates a new rectangle with differences added to each side.",
                "-     * .",
                "+     *",
                "+     * <p>",
                "+     * Creates a new rectangle with differences added to each side. If there are no valid",
                "+     * differences, then the original rectangle is returned.",
                "+     *",
                "      * @param rectangle the rectangle.",
                "@@ -470,3 +492,4 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "-    private PDAppearanceContentStream getAppearanceEntryAsContentStream(PDAppearanceEntry appearanceEntry) throws IOException",
                "+    private PDAppearanceContentStream getAppearanceEntryAsContentStream(",
                "+              PDAppearanceEntry appearanceEntry, boolean compress) throws IOException",
                "     {",
                "@@ -483,3 +506,3 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "-        return new PDAppearanceContentStream(appearanceStream);",
                "+        return new PDAppearanceContentStream(appearanceStream, compress);",
                "     }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "index b9e0c9771..e18d76100 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "@@ -79,3 +79,3 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "+        try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream(true))",
                "         {"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "54c2a7af40a6247588a80712b704f657c61825a1",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527335890,
            "hunks": 12,
            "message": "PDFBOX-3353: draw the box git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832305 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "index 3e1b2edf7..6cd839ea9 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "@@ -17,2 +17,3 @@ package org.apache.pdfbox.pdmodel.interactive.annotation.handlers;",
                "+import java.awt.geom.AffineTransform;",
                " import java.io.IOException;",
                "@@ -23,2 +24,3 @@ import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                " import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                "@@ -26,2 +28,4 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText;",
                " import static org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine.LE_NONE;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary;",
                " import static org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler.SHORT_STYLES;",
                "@@ -50,3 +54,2 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         PDAnnotationFreeText annotation = (PDAnnotationFreeText) getAnnotation();",
                "-        PDRectangle rect = annotation.getRectangle();",
                "         float[] pathsArray = new float[0];",
                "@@ -62,33 +65,22 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         PDColor color = annotation.getColor();",
                "-        if (color == null || color.getComponents().length == 0 || Float.compare(ab.width, 0) == 0)",
                "+",
                "+        // width 0 = no border",
                "+        // pdf_commenting_new.pdf page 3",
                "+        // Root/Pages/Kids/[2]/Kids/[0]/Annots/[5]/BS/W",
                "+        if (Float.compare(ab.width, 0) == 0)",
                "         {",
                "+            //TODO what happens if there is a callout?",
                "+            //TODO skip, don't return when we know how to make text",
                "+            // (maybe refactor the rectangle drawing segment)",
                "             return;",
                "         }",
                "-",
                "-        if (pathsArray.length > 0)",
                "+        if (color == null || color.getComponents().length == 0)",
                "         {",
                "-            // Adjust rectangle even if not empty",
                "-            // CTAN-example-Annotations.pdf p1",
                "-            //TODO in a class structure this should be overridable",
                "-            float minX = Float.MAX_VALUE;",
                "-            float minY = Float.MAX_VALUE;",
                "-            float maxX = Float.MIN_VALUE;",
                "-            float maxY = Float.MIN_VALUE;",
                "-            for (int i = 0; i < pathsArray.length / 2; ++i)",
                "-            {",
                "-                float x = pathsArray[i * 2];",
                "-                float y = pathsArray[i * 2 + 1];",
                "-                minX = Math.min(minX, x);",
                "-                minY = Math.min(minY, y);",
                "-                maxX = Math.max(maxX, x);",
                "-                maxY = Math.max(maxY, y);",
                "-            }",
                "-            // arrow length is 9 * width at about 30\u00c3\u0082\u00c2\u00b0 => 10 * width seems to be enough",
                "-            rect.setLowerLeftX(Math.min(minX - ab.width * 10, rect.getLowerLeftX()));",
                "-            rect.setLowerLeftY(Math.min(minY - ab.width * 10, rect.getLowerLeftY()));",
                "-            rect.setUpperRightX(Math.max(maxX + ab.width * 10, rect.getUpperRightX()));",
                "-            rect.setUpperRightY(Math.max(maxY + ab.width * 10, rect.getUpperRightY()));",
                "-            annotation.setRectangle(rect);",
                "+            //TODO remove this when we've managed to parse /DA",
                "+            color = new PDColor(new float[]{0}, PDDeviceGray.INSTANCE);",
                "         }",
                "+        //TODO how to set the text color? Apparently red is the default????",
                "+",
                "+",
                "         try (PDAppearanceContentStream cs = getNormalAppearanceAsContentStream())",
                "@@ -99,3 +91,3 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-            // in reality, Adobe uses the non stroking color from /DA as stroking color. WTF?",
                "+            //TODO Adobe uses the last non stroking color from /DA as stroking color. WTF????",
                "             boolean hasStroke = cs.setStrokingColorOnDemand(color);",
                "@@ -107,2 +99,90 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "+",
                "+",
                "+            //TODO this segment was copied from square handler. Refactor?",
                "+            PDBorderEffectDictionary borderEffect = annotation.getBorderEffect();",
                "+            if (borderEffect != null && borderEffect.getStyle().equals(PDBorderEffectDictionary.STYLE_CLOUDY))",
                "+            {",
                "+                CloudyBorder cloudyBorder = new CloudyBorder(cs,",
                "+                    borderEffect.getIntensity(), ab.width, getRectangle());",
                "+                cloudyBorder.createCloudyRectangle(annotation.getRectDifference());",
                "+                annotation.setRectangle(cloudyBorder.getRectangle());",
                "+                annotation.setRectDifference(cloudyBorder.getRectDifference());",
                "+                PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "+                appearanceStream.setBBox(cloudyBorder.getBBox());",
                "+                appearanceStream.setMatrix(cloudyBorder.getMatrix());",
                "+            }",
                "+            else",
                "+            {",
                "+                // handle the border box",
                "+                //",
                "+                // There are two options. The handling is not part of the PDF specification but",
                "+                // implementation specific to Adobe Reader",
                "+                // - if /RD is set the border box is the /Rect entry inset by the respective",
                "+                //   border difference.",
                "+                // - if /RD is not set the border box is defined by the /Rect entry. The /RD entry will",
                "+                //   be set to be the line width and the /Rect is enlarged by the /RD amount",
                "+",
                "+                PDRectangle borderBox;",
                "+                float[] rectDifferences = annotation.getRectDifferences();",
                "+                if (rectDifferences.length == 0)",
                "+                {",
                "+                    borderBox = getPaddedRectangle(getRectangle(), ab.width/2);",
                "+                    // the differences rectangle",
                "+                    annotation.setRectDifferences(ab.width/2);",
                "+                    annotation.setRectangle(addRectDifferences(getRectangle(), annotation.getRectDifferences()));",
                "+",
                "+                    // when the normal appearance stream was generated BBox and Matrix have been set to the",
                "+                    // values of the original /Rect. As the /Rect was changed that needs to be adjusted too.",
                "+                    annotation.getNormalAppearanceStream().setBBox(getRectangle());",
                "+                    AffineTransform transform = AffineTransform.getTranslateInstance(-getRectangle().getLowerLeftX(),",
                "+                            -getRectangle().getLowerLeftY());",
                "+                    annotation.getNormalAppearanceStream().setMatrix(transform);",
                "+                }",
                "+                else",
                "+                {",
                "+                    borderBox = applyRectDifferences(getRectangle(), rectDifferences);",
                "+                    borderBox = getPaddedRectangle(borderBox, ab.width/2);",
                "+                }",
                "+                cs.addRect(borderBox.getLowerLeftX(), borderBox.getLowerLeftY(),",
                "+                        borderBox.getWidth(), borderBox.getHeight());",
                "+            }",
                "+            cs.drawShape(ab.width, hasStroke, hasBackground);",
                "+",
                "+",
                "+",
                "+            if (pathsArray.length > 0)",
                "+            {",
                "+                PDRectangle rect = getRectangle();",
                "+",
                "+                // Adjust rectangle",
                "+                // important to do this after the rectangle has been painted, because the",
                "+                // final rectangle will be bigger due to callout",
                "+                // CTAN-example-Annotations.pdf p1",
                "+                //TODO in a class structure this should be overridable",
                "+                float minX = Float.MAX_VALUE;",
                "+                float minY = Float.MAX_VALUE;",
                "+                float maxX = Float.MIN_VALUE;",
                "+                float maxY = Float.MIN_VALUE;",
                "+                for (int i = 0; i < pathsArray.length / 2; ++i)",
                "+                {",
                "+                    float x = pathsArray[i * 2];",
                "+                    float y = pathsArray[i * 2 + 1];",
                "+                    minX = Math.min(minX, x);",
                "+                    minY = Math.min(minY, y);",
                "+                    maxX = Math.max(maxX, x);",
                "+                    maxY = Math.max(maxY, y);",
                "+                }",
                "+                // arrow length is 9 * width at about 30\u00c3\u0082\u00c2\u00b0 => 10 * width seems to be enough",
                "+                rect.setLowerLeftX(Math.min(minX - ab.width * 10, rect.getLowerLeftX()));",
                "+                rect.setLowerLeftY(Math.min(minY - ab.width * 10, rect.getLowerLeftY()));",
                "+                rect.setUpperRightX(Math.max(maxX + ab.width * 10, rect.getUpperRightX()));",
                "+                rect.setUpperRightY(Math.max(maxY + ab.width * 10, rect.getUpperRightY()));",
                "+                annotation.setRectangle(rect);",
                "+                ",
                "+                // need to set the BBox too, because rectangle modification came later",
                "+                annotation.getNormalAppearanceStream().setBBox(getRectangle());",
                "+            }",
                "+",
                "+            // draw callout line(s)",
                "             for (int i = 0; i < pathsArray.length / 2; ++i)",
                "@@ -152,5 +232,2 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             }",
                "-            ",
                "-            //TODO display border and text",
                "-            // how to set the text color? Apparently red is the default.",
                "         }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "fedc93c03356383d9b57ae0c39244aa6d2c11bab",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528051147,
            "hunks": 5,
            "message": "PDFBOX-3353: draw text box git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832782 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "index ebd7eb35c..96c3f4c6a 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java",
                "@@ -25,2 +25,3 @@ import org.apache.pdfbox.cos.COSArray;",
                " import org.apache.pdfbox.cos.COSBase;",
                "+import org.apache.pdfbox.cos.COSNumber;",
                " import org.apache.pdfbox.cos.COSObject;",
                "@@ -29,2 +30,4 @@ import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                " import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                "+import org.apache.pdfbox.pdmodel.font.PDFont;",
                "+import org.apache.pdfbox.pdmodel.font.PDType1Font;",
                " import org.apache.pdfbox.pdmodel.graphics.color.PDColor;",
                "@@ -39,2 +42,5 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderEffectDictionary",
                " import static org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler.SHORT_STYLES;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.layout.AppearanceStyle;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.layout.PlainText;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.layout.PlainTextFormatter;",
                " import org.apache.pdfbox.util.Matrix;",
                "@@ -193,2 +199,31 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "+            // somewhat inspired by AppearanceGeneratorHelper.insertGeneratedAppearance()",
                "+            cs.beginText();",
                "+            PDFont font = PDType1Font.HELVETICA;",
                "+            int factor = 1;",
                "+            if (borderEffect != null && borderEffect.getStyle().equals(PDBorderEffectDictionary.STYLE_CLOUDY))",
                "+            {",
                "+                factor = 2;",
                "+            }",
                "+            float fontSize = extractFontSize(annotation);",
                "+            cs.setFont(font, fontSize);",
                "+            cs.setNonStrokingColor(strokingColor);",
                "+            AppearanceStyle appearanceStyle = new AppearanceStyle();",
                "+            appearanceStyle.setFont(font);",
                "+            appearanceStyle.setFontSize(fontSize);",
                "+            PlainTextFormatter formatter = new PlainTextFormatter.Builder(cs)",
                "+                    .style(appearanceStyle)",
                "+                    .text(new PlainText(annotation.getContents()))",
                "+                    .width(getRectangle().getWidth())",
                "+                    .wrapLines(true)",
                "+                    //TODO some reverse engineering needed to find out padding",
                "+                    //TODO fat cloudy rectangle in CTAN file has \"the\" incomplete",
                "+                    .initialOffset(getRectangle().getLowerLeftX() + fontSize / 2 * factor, ",
                "+                                   getRectangle().getUpperRightY() - font.getBoundingBox().getHeight() * fontSize / 1000 * factor)",
                "+                    // Adobe ignores the /Q",
                "+                    //.textAlign(annotation.getQ())",
                "+                    .build();",
                "+            formatter.format();",
                "+            cs.endText();",
                "+",
                "@@ -302,2 +337,56 @@ public class PDFreeTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "+    //TODO extractNonStrokingColor and extractFontSize",
                "+    // might somehow be replaced with PDDefaultAppearanceString,",
                "+    // which is quite similar.",
                "+    private float extractFontSize(PDAnnotationFreeText annotation)",
                "+    {",
                "+        String defaultAppearance = annotation.getDefaultAppearance();",
                "+        if (defaultAppearance == null)",
                "+        {",
                "+            return 10;",
                "+        }",
                "+",
                "+        try",
                "+        {",
                "+            // not sure if charset is correct, but we only need numbers and simple characters",
                "+            PDFStreamParser parser = new PDFStreamParser(defaultAppearance.getBytes(Charsets.US_ASCII));",
                "+            COSArray arguments = new COSArray();",
                "+            COSArray fontArguments = new COSArray();",
                "+            for (Object token = parser.parseNextToken(); token != null; token = parser.parseNextToken())",
                "+            {",
                "+                if (token instanceof COSObject)",
                "+                {",
                "+                    arguments.add(((COSObject) token).getObject());",
                "+                }",
                "+                else if (token instanceof Operator)",
                "+                {",
                "+                    Operator op = (Operator) token;",
                "+                    String name = op.getName();",
                "+                    if (\"Tf\".equals(name))",
                "+                    {",
                "+                        fontArguments = arguments;",
                "+                    }",
                "+                    arguments = new COSArray();",
                "+                }",
                "+                else",
                "+                {",
                "+                    arguments.add((COSBase) token);",
                "+                }",
                "+            }",
                "+            if (fontArguments.size() >= 2)",
                "+            {",
                "+                COSBase base = fontArguments.get(1);",
                "+                if (base instanceof COSNumber)",
                "+                {",
                "+                    return ((COSNumber) base).floatValue();",
                "+                }",
                "+            }",
                "+        }",
                "+        catch (IOException ex)",
                "+        {",
                "+            LOG.warn(\"Problem parsing /DA, will use default 10\", ex);",
                "+        }",
                "+        return 10;",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDFreeTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "24c8bd833ccec0a4feb5c4645d2ad5ee2e784998",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527704530,
            "hunks": 2,
            "message": "PDFBOX-3280: improve javadoc, ordinary users should not use this class, see https://stackoverflow.com/questions/50593597/pdfbox-clone-font git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1832560 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFCloneUtility.java b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFCloneUtility.java",
                "index 0b5cb7c67..45a928daa 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFCloneUtility.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFCloneUtility.java",
                "@@ -36,3 +36,6 @@ import org.apache.pdfbox.pdmodel.common.COSObjectable;",
                "  * Utility class used to clone PDF objects. It keeps track of objects it has already cloned.",
                "- *",
                "+ * Although this class is public, it is for PDFBox internal use and should not be used outside,",
                "+ * except by very experienced users. The \"public\" modifier will be removed in 3.0. The class should",
                "+ * not be used on documents that are being generated because these can contain unfinished parts,",
                "+ * e.g. font subsetting information.",
                "  */",
                "@@ -40,3 +43,2 @@ public class PDFCloneUtility",
                " {",
                "-",
                "     private final PDDocument destination;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFCloneUtility.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3280": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "CHANGES_RELEVANT_CODE",
                    "message": "The commit modifies code containing relevant filename or methods: PDF",
                    "relevance": 8
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3280",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ad61615fd336723169a940ea1eec5955f3d43cde",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524864115,
            "hunks": 1,
            "message": "PDFBOX-4189: One GsubWorker per font, by Palash Ray git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830399 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "index 0d47e73bd..bc0743854 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "@@ -349,3 +349,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "-            GsubWorker gsubWorker = gsubWorkers.get(font.getName());",
                "+            GsubWorker gsubWorker = gsubWorkers.get(font);",
                "             if (gsubWorker != null)"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "4de57b625d7261be418132e9cde3ec5c9a5949c3"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8917378c09e741d1876e61362470acd095296eb3",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524505169,
            "hunks": 3,
            "message": "PDFBOX-4200: catch IOException if ICC profile cannot be read and use alternate colorspace git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829910 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "index f769135a6..cadae346d 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "@@ -159,25 +159,20 @@ public final class PDICCBased extends PDCIEBasedColorSpace",
                "         }",
                "-        catch (RuntimeException e)",
                "+        catch (ProfileDataException | CMMException | IllegalArgumentException |",
                "+               ArrayIndexOutOfBoundsException | IOException e)",
                "         {",
                "-            if (e instanceof ProfileDataException ||",
                "-                e instanceof CMMException ||",
                "-                e instanceof IllegalArgumentException ||",
                "-                e instanceof ArrayIndexOutOfBoundsException)",
                "-            {",
                "-                // fall back to alternateColorSpace color space",
                "-                awtColorSpace = null;",
                "-                alternateColorSpace = getAlternateColorSpace();",
                "-                if (alternateColorSpace.equals(PDDeviceRGB.INSTANCE))",
                "-                {",
                "-                    isRGB = true;",
                "-                }",
                "-                LOG.warn(\"Can't read embedded ICC profile (\" + e.getLocalizedMessage() + ",
                "-                         \"), using alternate color space: \" + alternateColorSpace.getName());",
                "-                initialColor = alternateColorSpace.getInitialColor();",
                "-            }",
                "-            else",
                "-            {",
                "-                throw e;",
                "-            }",
                "+            fallbackToAlternateColorSpace(e);",
                "+        }",
                "+    }",
                "+",
                "+    private void fallbackToAlternateColorSpace(Exception e) throws IOException",
                "+    {",
                "+        awtColorSpace = null;",
                "+        alternateColorSpace = getAlternateColorSpace();",
                "+        if (alternateColorSpace.equals(PDDeviceRGB.INSTANCE))",
                "+        {",
                "+            isRGB = true;",
                "         }",
                "+        LOG.warn(\"Can't read embedded ICC profile (\" + e.getLocalizedMessage() +",
                "+                \"), using alternate color space: \" + alternateColorSpace.getName());",
                "+        initialColor = alternateColorSpace.getInitialColor();",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4200": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7aef2dcd4b421210c2e6d8fab901e036eb59c229"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4200",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "68a685b8bae74779d096c3f25395f987f6053806",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531638679,
            "hunks": 1,
            "message": "PDFBOX-4071: use correct type git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835946 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java",
                "index 81dd09725..cd228e9ff 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java",
                "@@ -250,3 +250,3 @@ public class PDPageLabels implements COSObjectable",
                "     {",
                "-        return new TreeSet(labels.keySet());",
                "+        return new TreeSet<>(labels.keySet());",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "87992da00da8be052b3547678202d1bed8b94d08"
                ],
                [
                    "no-tag",
                    "95f78fd8cea488ec1ce24c0e5ff0778c4c7f5e2f"
                ],
                [
                    "no-tag",
                    "9f7901252289e3c4b8c20a23d6c14a9fd90f4cb0"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7994005652433cf5139ec1827b62ce8686fd0f58",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530977713,
            "hunks": 6,
            "message": "PDFBOX-4068: change deprecation message because we're currently not intending to remove these methods, as suggested by Michael Klink git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1835316 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "index f9998e197..97e9d6448 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "@@ -2304,3 +2304,3 @@ public final class PDPageContentStream implements Closeable",
                "      * @throws IOException If an error occurs while writing to the stream.",
                "-     * @deprecated This method will be removed in a future release.",
                "+     * @deprecated Usage of this method is discouraged.",
                "      */",
                "@@ -2317,3 +2317,3 @@ public final class PDPageContentStream implements Closeable",
                "      * @throws IOException If an error occurs while writing to the stream.",
                "-     * @deprecated This method will be removed in a future release.",
                "+     * @deprecated Usage of this method is discouraged.",
                "      */",
                "@@ -2330,3 +2330,3 @@ public final class PDPageContentStream implements Closeable",
                "      * @throws IOException If an error occurs while writing to the stream.",
                "-     * @deprecated This method will be removed in a future release.",
                "+     * @deprecated Usage of this method is discouraged.",
                "      */",
                "@@ -2343,3 +2343,3 @@ public final class PDPageContentStream implements Closeable",
                "      * @throws IOException If an error occurs while writing to the stream.",
                "-     * @deprecated This method will be removed in a future release.",
                "+     * @deprecated Usage of this method is discouraged.",
                "      */",
                "@@ -2356,3 +2356,3 @@ public final class PDPageContentStream implements Closeable",
                "      * @throws IOException If an error occurs while writing to the stream.",
                "-     * @deprecated This method will be removed in a future release.",
                "+     * @deprecated Usage of this method is discouraged.",
                "      */",
                "@@ -2369,3 +2369,3 @@ public final class PDPageContentStream implements Closeable",
                "      * @throws IOException If an error occurs while writing to the stream.",
                "-     * @deprecated This method will be removed in a future release.",
                "+     * @deprecated Usage of this method is discouraged.",
                "      */"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4068": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "0814ebc28b001fca71fc3b76fd67a407383e28f8"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4068",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "43057ddae3110246ac6356cda22d74599fffe9a6",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525003919,
            "hunks": 1,
            "message": "PDFBOX-4193: avoid NPE git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1830508 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/debugger/src/main/java/org/apache/pdfbox/debugger/ui/PageEntry.java b/debugger/src/main/java/org/apache/pdfbox/debugger/ui/PageEntry.java",
                "index ba8e5234a..ff505eab4 100644",
                "--- a/debugger/src/main/java/org/apache/pdfbox/debugger/ui/PageEntry.java",
                "+++ b/debugger/src/main/java/org/apache/pdfbox/debugger/ui/PageEntry.java",
                "@@ -67,2 +67,6 @@ public class PageEntry",
                "             COSArray kids = (COSArray)parent.getDictionaryObject(COSName.KIDS);",
                "+            if (kids == null)",
                "+            {",
                "+                return \"\";",
                "+            }",
                "             int idx = kids.indexOfObject(node);"
            ],
            "changed_files": [
                "debugger/src/main/java/org/apache/pdfbox/debugger/ui/PageEntry.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4193": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "63b2a4d30a6d22a023399a21dd49b129086bb14f"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4193",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0a5646fd667580075958fc7cfb9a1f62c6023583",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531337138,
            "hunks": 16,
            "message": "PDFBOX-4260: support scratch file buffer instead of byte array output stream, by Jesse Long git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835665 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java b/pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java",
                "index 14b18ba97..ff72d1c1c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java",
                "@@ -19,6 +19,5 @@ package org.apache.pdfbox.cos;",
                "-import java.io.ByteArrayInputStream;",
                "-import java.io.ByteArrayOutputStream;",
                " import java.io.FilterOutputStream;",
                " import java.io.IOException;",
                "+import java.io.InputStream;",
                " import java.io.OutputStream;",
                "@@ -26,2 +25,5 @@ import java.util.List;",
                " import org.apache.pdfbox.filter.Filter;",
                "+import org.apache.pdfbox.io.RandomAccess;",
                "+import org.apache.pdfbox.io.RandomAccessInputStream;",
                "+import org.apache.pdfbox.io.RandomAccessOutputStream;",
                " import org.apache.pdfbox.io.ScratchFile;",
                "@@ -37,5 +39,5 @@ public final class COSOutputStream extends FilterOutputStream",
                "     private final COSDictionary parameters;",
                "-    // todo: this is an in-memory buffer, should use scratch file (if any) instead",
                "-    private ByteArrayOutputStream buffer = new ByteArrayOutputStream();",
                "-    ",
                "+    private final ScratchFile scratchFile;",
                "+    private RandomAccess buffer;",
                "+",
                "     /**",
                "@@ -46,6 +48,8 @@ public final class COSOutputStream extends FilterOutputStream",
                "      * @param output Encoded stream.",
                "-     * @param scratchFile Scratch file to use, or null.",
                "+     * @param scratchFile Scratch file to use.",
                "+     * ",
                "+     * @throws IOException If there was an error creating a temporary buffer",
                "      */",
                "     COSOutputStream(List<Filter> filters, COSDictionary parameters, OutputStream output,",
                "-                    ScratchFile scratchFile)",
                "+                    ScratchFile scratchFile) throws IOException",
                "     {",
                "@@ -54,2 +58,12 @@ public final class COSOutputStream extends FilterOutputStream",
                "         this.parameters = parameters;",
                "+        this.scratchFile = scratchFile;",
                "+",
                "+        if (filters.isEmpty())",
                "+        {",
                "+            this.buffer = null;",
                "+        }",
                "+        else",
                "+        {",
                "+            this.buffer = scratchFile.createBuffer();",
                "+        }",
                "     }",
                "@@ -59,3 +73,10 @@ public final class COSOutputStream extends FilterOutputStream",
                "     {",
                "-        buffer.write(b);",
                "+        if (buffer != null)",
                "+        {",
                "+            buffer.write(b);",
                "+        }",
                "+        else",
                "+        {",
                "+            super.write(b);",
                "+        }",
                "     }",
                "@@ -65,3 +86,10 @@ public final class COSOutputStream extends FilterOutputStream",
                "     {",
                "-        buffer.write(b, off, len);",
                "+        if (buffer != null)",
                "+        {",
                "+            buffer.write(b, off, len);",
                "+        }",
                "+        else",
                "+        {",
                "+            super.write(b, off, len);",
                "+        }",
                "     }",
                "@@ -71,3 +99,10 @@ public final class COSOutputStream extends FilterOutputStream",
                "     {",
                "-        buffer.write(b);",
                "+        if (buffer != null)",
                "+        {",
                "+            buffer.write(b);",
                "+        }",
                "+        else",
                "+        {",
                "+            super.write(b);",
                "+        }",
                "     }",
                "@@ -78,3 +113,3 @@ public final class COSOutputStream extends FilterOutputStream",
                "     }",
                "-    ",
                "+",
                "     @Override",
                "@@ -82,18 +117,54 @@ public final class COSOutputStream extends FilterOutputStream",
                "     {",
                "-        if (buffer == null)",
                "+        try",
                "         {",
                "-            return;",
                "+            if (buffer != null)",
                "+            {",
                "+                try",
                "+                {",
                "+                    // apply filters in reverse order",
                "+                    for (int i = filters.size() - 1; i >= 0; i--)",
                "+                    {",
                "+                        try (InputStream unfilteredIn = new RandomAccessInputStream(buffer))",
                "+                        {",
                "+                            if (i == 0)",
                "+                            {",
                "+                                /*",
                "+                                 * The last filter to run can encode directly to the enclosed output",
                "+                                 * stream.",
                "+                                 */",
                "+                                filters.get(i).encode(unfilteredIn, out, parameters, i);",
                "+                            }",
                "+                            else",
                "+                            {",
                "+                                RandomAccess filteredBuffer = scratchFile.createBuffer();",
                "+                                try",
                "+                                {",
                "+                                    try (OutputStream filteredOut = new RandomAccessOutputStream(filteredBuffer))",
                "+                                    {",
                "+                                        filters.get(i).encode(unfilteredIn, filteredOut, parameters, i);",
                "+                                    }",
                "+",
                "+                                    RandomAccess tmpSwap = filteredBuffer;",
                "+                                    filteredBuffer = buffer;",
                "+                                    buffer = tmpSwap;",
                "+                                }",
                "+                                finally",
                "+                                {",
                "+                                    filteredBuffer.close();",
                "+                                }",
                "+                            }",
                "+                        }",
                "+                    }",
                "+                }",
                "+                finally",
                "+                {",
                "+                    buffer.close();",
                "+                    buffer = null;",
                "+                }",
                "+            }",
                "         }",
                "-        // apply filters in reverse order",
                "-        for (int i = filters.size() - 1; i >= 0; i--)",
                "+        finally",
                "         {",
                "-            // todo: this is an in-memory buffer, should use scratch file (if any) instead",
                "-            ByteArrayInputStream input = new ByteArrayInputStream(buffer.toByteArray());",
                "-            buffer = new ByteArrayOutputStream();",
                "-            filters.get(i).encode(input, buffer, parameters, i);",
                "+            super.close();",
                "         }",
                "-        // flush the entire stream",
                "-        buffer.writeTo(out);",
                "-        super.close();",
                "-        buffer = null;",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4260": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1d69f40375c8dfef4bd3e0de4f7d39df15d18845"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_MSG",
                    "message": "The commit message and the advisory description contain the following keywords: file",
                    "relevance": 4
                },
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4260",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a2dba1ca3490d764a20d98e3dda2d78ca275e32f",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532979884,
            "hunks": 2,
            "message": "PDFBOX-4071: final modifier not needed for private method git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1837085 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java",
                "index 4571b5e8d..5b501d10f 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java",
                "@@ -457,3 +457,3 @@ public class COSParser extends BaseParser",
                "      */",
                "-    private final long getStartxrefOffset() throws IOException",
                "+    private long getStartxrefOffset() throws IOException",
                "     {",
                "@@ -2152,3 +2152,3 @@ public class COSParser extends BaseParser",
                "      */",
                "-    private final COSDictionary rebuildTrailer() throws IOException",
                "+    private COSDictionary rebuildTrailer() throws IOException",
                "     {"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/COSParser.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: parse",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "edfb9dd8e1e653ca124324c9c9e5473fba121d05",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524335690,
            "hunks": 1,
            "message": "PDFBOX-4189: pass change missed in last commit git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829738 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "index de27a5f4c..50be140c1 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "@@ -361,3 +361,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "-        COSWriter.writeString(font.encode(text), getOutputStream());",
                "+        COSWriter.writeString(encodedText, getOutputStream());",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ac862727d9b2da1e9ee5a64cbd66768ccaf9b1d2",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525930039,
            "hunks": 19,
            "message": "PDFBOX-4068: refactor: outputStream is only ever set within constructors, make it a constructor parameter git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831304 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "index 0d3eb8ca2..9aa76857b 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "@@ -57,3 +57,3 @@ abstract class PDAbstractContentStream implements Closeable",
                " {",
                "-    private OutputStream outputStream;",
                "+    protected final OutputStream outputStream;",
                "     private PDResources resources;",
                "@@ -70,12 +70,2 @@ abstract class PDAbstractContentStream implements Closeable",
                "-    /**",
                "-     * Create a new appearance stream.",
                "-     *",
                "-     */",
                "-    public PDAbstractContentStream()",
                "-    {",
                "-        formatDecimal.setMaximumFractionDigits(4);",
                "-        formatDecimal.setGroupingUsed(false);",
                "-    }",
                "-",
                "     /**",
                "@@ -85,3 +75,3 @@ abstract class PDAbstractContentStream implements Closeable",
                "      */",
                "-    public PDAbstractContentStream(OutputStream outputStream)",
                "+    PDAbstractContentStream(OutputStream outputStream)",
                "     {",
                "@@ -105,12 +95,2 @@ abstract class PDAbstractContentStream implements Closeable",
                "-    public OutputStream getOutputStream()",
                "-    {",
                "-        return outputStream;",
                "-    }",
                "-",
                "-    public void setOutputStream(OutputStream outputStream)",
                "-    {",
                "-        this.outputStream = outputStream;",
                "-    }",
                "-",
                "     public PDResources getResources()",
                "@@ -1485,7 +1465,3 @@ abstract class PDAbstractContentStream implements Closeable",
                "     {",
                "-        if (outputStream != null)",
                "-        {",
                "-            outputStream.close();",
                "-            outputStream = null;",
                "-        }",
                "+        outputStream.close();",
                "     }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "index d9032a819..82e4aca6c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java",
                "@@ -59,2 +59,3 @@ import org.apache.pdfbox.pdmodel.graphics.state.RenderingMode;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
                "+import org.apache.pdfbox.util.Charsets;",
                " import org.apache.pdfbox.util.Matrix;",
                "@@ -151,6 +152,11 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "     {",
                "-        super();",
                "+        this(document, sourcePage, appendContent, compress, resetContext, new PDStream(document));",
                "+    }",
                "+",
                "+    private PDPageContentStream(PDDocument document, PDPage sourcePage, AppendMode appendContent,",
                "+                                boolean compress, boolean resetContext, PDStream stream) throws IOException",
                "+    {",
                "+        super(stream.createOutputStream(compress ? COSName.FLATE_DECODE : null));",
                "         this.document = document;",
                "-        COSName filter = compress ? COSName.FLATE_DECODE : null;",
                "-        ",
                "+",
                "         // If request specifies the need to append/prepend to the document",
                "@@ -158,5 +164,2 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "         {",
                "-            // Create a stream to append new content",
                "-            PDStream contentsToAppend = new PDStream(document);",
                "-            ",
                "             // Add new stream to contents array",
                "@@ -175,5 +178,6 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "             }",
                "+",
                "             if (appendContent.isPrepend())",
                "             {",
                "-                array.add(0, contentsToAppend.getCOSObject());",
                "+                array.add(0, stream.getCOSObject());",
                "             }",
                "@@ -181,3 +185,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "             {",
                "-                array.add(contentsToAppend);",
                "+                array.add(stream);",
                "             }",
                "@@ -187,12 +191,13 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "             {",
                "-                // create a new stream to encapsulate the existing stream",
                "-                PDStream saveGraphics = new PDStream(document);",
                "-                setOutputStream(saveGraphics.createOutputStream(filter));",
                "-                ",
                "-                // save the initial/unmodified graphics context",
                "-                saveGraphicsState();",
                "-                close();",
                "-                ",
                "+                // create a new stream to prefix existing stream",
                "+                PDStream prefixStream = new PDStream(document);",
                "+",
                "+                // save the pre-append graphics state",
                "+                OutputStream prefixOut = prefixStream.createOutputStream();",
                "+                prefixOut.write(\"q\".getBytes(Charsets.US_ASCII));",
                "+                prefixOut.write('\\n');",
                "+                prefixOut.close();",
                "+",
                "                 // insert the new stream at the beginning",
                "-                array.add(0, saveGraphics.getCOSObject());",
                "+                array.add(0, prefixStream.getCOSObject());",
                "             }",
                "@@ -201,5 +206,4 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "             sourcePage.getCOSObject().setItem(COSName.CONTENTS, array);",
                "-            setOutputStream(contentsToAppend.createOutputStream(filter));",
                "-            // restore the initial/unmodified graphics context",
                "+            // restore the pre-append graphics state",
                "             if (resetContext)",
                "@@ -215,7 +219,5 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "             }",
                "-            PDStream contents = new PDStream(document);",
                "-            sourcePage.setContents(contents);",
                "-            setOutputStream(contents.createOutputStream(filter));",
                "+            sourcePage.setContents(stream);",
                "         }",
                "-        ",
                "+",
                "         // this has to be done here, as the resources will be set to null when resetting the content",
                "@@ -229,2 +231,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "         setResources(resources);",
                "+",
                "         // configure NumberFormat",
                "@@ -370,3 +373,3 @@ public final class PDPageContentStream extends PDAbstractContentStream implement",
                "-        COSWriter.writeString(encodedText, getOutputStream());",
                "+        COSWriter.writeString(encodedText, outputStream);",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAbstractContentStream.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageContentStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4068": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "ADV_KEYWORDS_IN_FILES",
                    "message": "An advisory keyword is contained in the changed files: page",
                    "relevance": 4
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4068",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0663506b3042af7f40019f350b97b211a7d41804",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530181710,
            "hunks": 1,
            "message": "PDFBOX-4254: return initialException as final return path git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834593 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/io/IOUtils.java b/pdfbox/src/main/java/org/apache/pdfbox/io/IOUtils.java",
                "index fc7ff6482..f11f219f3 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/io/IOUtils.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/io/IOUtils.java",
                "@@ -152,3 +152,3 @@ public final class IOUtils",
                "         }",
                "-        return null;",
                "+        return initialException;",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/io/IOUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4254": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "627d9dc783cb3a117ab1b052eddf33129d29e1b6"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4254",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c24110a4e11eef8a3f1e0c7092431faab2344ae3",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523281094,
            "hunks": 3,
            "message": "PDFBOX-4184: divide 16 bit alpha values by 256 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1828715 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "index 92f30feda..475437112 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "@@ -19,2 +19,3 @@ import java.awt.Transparency;",
                " import java.awt.image.BufferedImage;",
                "+import java.awt.image.DataBuffer;",
                " import java.awt.image.WritableRaster;",
                "@@ -186,5 +187,8 @@ public final class LosslessFactory",
                "             bpc = 8;",
                "+            int dataType = alphaRaster.getDataBuffer().getDataType();",
                "+            // for 16 it images we need to ",
                "+            int shift = dataType == DataBuffer.TYPE_USHORT ? 8 : 0;",
                "             for (int pixel : pixels)",
                "             {",
                "-                bos.write(pixel);",
                "+                bos.write(pixel >>> shift);",
                "             }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4184": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8804e0042cbd029a22ca8fd00d73ad740f125a21"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4184",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b38e7c56d9aa045f87eb3fe75f8900990993f231",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1533234468,
            "hunks": 1,
            "message": "PDFBOX-4071: update owasp plugin git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1837331 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 9541dd891..107814dfb 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -146,3 +146,3 @@",
                "                         <artifactId>dependency-check-maven</artifactId>",
                "-                        <version>3.2.1</version>",
                "+                        <version>3.3.0</version>",
                "                         <configuration>"
            ],
            "changed_files": [
                "parent/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e4694aa08ac836171e3bc2b56e81d65863a3d2b9"
                ],
                [
                    "no-tag",
                    "a492fe5f9b6bf8f7f7b327e7f5080dec5eed9f53"
                ],
                [
                    "no-tag",
                    "594506cb92e03767e4941473a88fc72c617340d5"
                ],
                [
                    "no-tag",
                    "fc68ed0c5974540d104f27a4aff0183e8c821b67"
                ],
                [
                    "no-tag",
                    "6429c1ff0571e2c3bb4c54b314999cd0c8fa4ecf"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "b6257c465930e845684d5dc67e9ecaed15fb6f82",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527182982,
            "hunks": 3,
            "message": "PDFBOX-4095: Sonar fix git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832191 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "index 48b397c73..db1a0ac4a 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "@@ -350,5 +350,5 @@ public abstract class BlendMode",
                "         delta = ((rs - rd) * 77 + (gs - gd) * 151 + (bs - bd) * 28 + 0x80) >> 8;",
                "-        r = (rd + delta);",
                "-        g = (gd + delta);",
                "-        b = (bd + delta);",
                "+        r = rd + delta;",
                "+        g = gd + delta;",
                "+        b = bd + delta;",
                "@@ -361,3 +361,3 @@ public abstract class BlendMode",
                "                 max = Math.max(r, Math.max(g, b));",
                "-                scale = (max == y ? 0 : ((255 - y) << 16) / (max - y));",
                "+                scale = max == y ? 0 : ((255 - y) << 16) / (max - y);",
                "             }",
                "@@ -367,3 +367,3 @@ public abstract class BlendMode",
                "                 min = Math.min(r, Math.min(g, b));",
                "-                scale = (y == min ? 0 : (y << 16) / (y - min));",
                "+                scale = y == min ? 0 : (y << 16) / (y - min);",
                "             }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4095": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "64a4a44e6be1b3e7fc87f5928090cd4fc61989f5"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4095",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bc90a1c99c5527f4bf67c86a0552c31070f924d4",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527273375,
            "hunks": 6,
            "message": "PDFBOX-4071: add test to protect initialization sequence; move constructor to top for Sonar; avoid COMPATIBLE returning blend mode that specification says \"shouldn't be used\" git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832264 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "index db1a0ac4a..338ff8fcf 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "@@ -62,3 +62,3 @@ public abstract class BlendMode",
                "         }",
                "-        return BlendMode.COMPATIBLE;",
                "+        return BlendMode.NORMAL;",
                "     }",
                "@@ -253,2 +253,6 @@ public abstract class BlendMode",
                "+    BlendMode()",
                "+    {",
                "+    }",
                "+",
                "     private static int get255Value(float val)",
                "@@ -378,3 +382,3 @@ public abstract class BlendMode",
                "-    // these maps *must* come after the declarations above, otherwise its values will be null",
                "+    // these maps *must* come after the BlendMode.* constant declarations, otherwise their values would be null",
                "     private static final Map<COSName, BlendMode> BLEND_MODES = createBlendModeMap();",
                "@@ -386,3 +390,4 @@ public abstract class BlendMode",
                "         map.put(COSName.NORMAL, BlendMode.NORMAL);",
                "-        map.put(COSName.COMPATIBLE, BlendMode.COMPATIBLE);",
                "+        // BlendMode.COMPATIBLE should not be used",
                "+        map.put(COSName.COMPATIBLE, BlendMode.NORMAL);",
                "         map.put(COSName.MULTIPLY, BlendMode.MULTIPLY);",
                "@@ -409,3 +414,4 @@ public abstract class BlendMode",
                "         map.put(BlendMode.NORMAL, COSName.NORMAL);",
                "-        map.put(BlendMode.COMPATIBLE, COSName.COMPATIBLE);",
                "+        // BlendMode.COMPATIBLE should not be used",
                "+        map.put(BlendMode.COMPATIBLE, COSName.NORMAL);",
                "         map.put(BlendMode.MULTIPLY, COSName.MULTIPLY);",
                "@@ -427,6 +433,2 @@ public abstract class BlendMode",
                "     }",
                "-",
                "-    BlendMode()",
                "-    {",
                "-    }",
                " }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7d5534b4ba75a1c4c610f6adb637d00e780daa08"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "29492ed1d27e4b31d30fc71b6deaa84cf1813c5f",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527095770,
            "hunks": 3,
            "message": "PDFBOX-4228: fix ClassCastException and bug that prevented the use of a name for encoding in type3 fonts, by Daniel Persson git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1832111 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java",
                "index bd043e68a..752e2e19f 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java",
                "@@ -21,2 +21,4 @@ import java.io.IOException;",
                " import java.io.InputStream;",
                "+import org.apache.commons.logging.Log;",
                "+import org.apache.commons.logging.LogFactory;",
                " import org.apache.fontbox.FontBoxFont;",
                "@@ -43,2 +45,7 @@ public class PDType3Font extends PDSimpleFont",
                " {",
                "+    /**",
                "+     * Log instance.",
                "+     */",
                "+    private static final Log LOG = LogFactory.getLog(PDType3Font.class);",
                "+",
                "     private PDResources resources;",
                "@@ -68,4 +75,16 @@ public class PDType3Font extends PDSimpleFont",
                "     {",
                "-        COSDictionary encodingDict = (COSDictionary)dict.getDictionaryObject(COSName.ENCODING);",
                "-        encoding = new DictionaryEncoding(encodingDict);",
                "+        COSBase encodingBase = dict.getDictionaryObject(COSName.ENCODING);",
                "+        if (encodingBase instanceof COSName)",
                "+        {",
                "+            COSName encodingName = (COSName) encodingBase;",
                "+            encoding = Encoding.getInstance(encodingName);",
                "+            if (encoding == null)",
                "+            {",
                "+                LOG.warn(\"Unknown encoding: \" + encodingName.getName());",
                "+            }",
                "+        }",
                "+        else if (encodingBase instanceof COSDictionary)",
                "+        {",
                "+            encoding = new DictionaryEncoding((COSDictionary) encodingBase);",
                "+        }",
                "         glyphList = GlyphList.getAdobeGlyphList();"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDType3Font.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4228": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "113313a81a82377a8a07a2c55ce0ba6ce3ed20a5"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4228",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a8d0e0cbfcb7fffaca48e0568a3bafabb3f7f76a",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530368232,
            "hunks": 1,
            "message": "PDFBOX-4184, PDFBOX-4071: exclude idea, as suggested by Emmeran Seehuber git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1834738 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/.gitignore b/.gitignore",
                "index 748b8ba93..1bb6e9aa6 100644",
                "--- a/.gitignore",
                "+++ b/.gitignore",
                "@@ -5 +5,2 @@ bin/",
                " .project",
                "+.idea/"
            ],
            "changed_files": [
                ".gitignore"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4184": "",
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "28fc7175c436a1d3b3a18a26a363fa62a0e217c2"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4184, PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "50d1e2e8adf131119a5bceb418d460496bf62681",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524072720,
            "hunks": 2,
            "message": "PDFBOX-4197: consider object references git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1829462 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java",
                "index 1584f42aa..abe1e8a61 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java",
                "@@ -176,2 +176,6 @@ public class PDStructureElement extends PDStructureNode",
                "                 COSBase item = it.next();",
                "+                if (item instanceof COSObject)",
                "+                {",
                "+                    item = ((COSObject) item).getObject();",
                "+                }",
                "                 if (item instanceof COSDictionary)",
                "@@ -346,2 +350,6 @@ public class PDStructureElement extends PDStructureNode",
                "                 COSBase item = it.next();",
                "+                if (item instanceof COSObject)",
                "+                {",
                "+                    item = ((COSObject) item).getObject();",
                "+                }",
                "                 if (item instanceof COSName)"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4197": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "aec7d1e3b765ea9763803d9229c02ae6f082c188"
                ],
                [
                    "no-tag",
                    "716ecbe82f1113cc50d76733e5b2045aeda959ef"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4197",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "829c81b296ab9d4df8604e18ad8b9ade26fbab1b",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531936045,
            "hunks": 4,
            "message": "PDFBOX-4013: sonar fix git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1836209 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/debugger/src/main/java/org/apache/pdfbox/debugger/ui/OSXAdapter.java b/debugger/src/main/java/org/apache/pdfbox/debugger/ui/OSXAdapter.java",
                "index 4f5af00c3..b2e4c3d22 100644",
                "--- a/debugger/src/main/java/org/apache/pdfbox/debugger/ui/OSXAdapter.java",
                "+++ b/debugger/src/main/java/org/apache/pdfbox/debugger/ui/OSXAdapter.java",
                "@@ -134,8 +134,7 @@ public class OSXAdapter implements InvocationHandler",
                "                             {",
                "-                                if (!method.getName().equals(\"handleQuitRequestWith\"))",
                "+                                if (\"handleQuitRequestWith\".equals(method.getName()))",
                "                                 {",
                "-                                    return null;",
                "+                                    // We just call our own quit handler",
                "+                                    quitHandler.invoke(target);",
                "                                 }",
                "-                                // We just call our own quit handler",
                "-                                quitHandler.invoke(target);",
                "                                 return null;",
                "@@ -245,2 +244,3 @@ public class OSXAdapter implements InvocationHandler",
                "             // file to be opened",
                "+            @Override",
                "             public boolean callTarget(Object appleEvent) {"
            ],
            "changed_files": [
                "debugger/src/main/java/org/apache/pdfbox/debugger/ui/OSXAdapter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4013": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c713d75fe62eb3f25b59b9fd84779d6b19de8dab"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4013",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e8f631de7e74afb76848f914d14a796e276c3a17",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531583773,
            "hunks": 1,
            "message": "PDFBOX-4071: avoid \"unchecked\" warnings git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835916 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationCollector.java b/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationCollector.java",
                "index 57beb6b3f..464668a6d 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationCollector.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationCollector.java",
                "@@ -232,2 +232,3 @@ public class CertInformationCollector",
                "+        @SuppressWarnings(\"unchecked\")",
                "         Collection<X509CertificateHolder> matches = certificatesStore"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationCollector.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "207e0f308824c676e792f10c77fbf5b26b880d63"
                ],
                [
                    "no-tag",
                    "dad63a8e49babcfa3075f4050a17097d44c75830"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ece4c5f0da288c6f82125191fcd4e023679cc71f",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532326549,
            "hunks": 1,
            "message": "PDFBOX-4071: replace broken link with archive git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1836463 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/preflight/pom.xml b/preflight/pom.xml",
                "index f62a84d9e..fcbebd90d 100644",
                "--- a/preflight/pom.xml",
                "+++ b/preflight/pom.xml",
                "@@ -136,3 +136,3 @@",
                "                             <skip>${skip-bavaria}</skip>",
                "-                            <url>http://www.pdflib.com/fileadmin/pdflib/Bavaria/2009-04-03-Bavaria-pdfa.zip</url>",
                "+                            <url>https://web.archive.org/web/20160305185745if_/http://www.pdflib.com/fileadmin/pdflib/Bavaria/2009-04-03-Bavaria-pdfa.zip</url>",
                "                             <unpack>true</unpack>"
            ],
            "changed_files": [
                "preflight/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6af0a0d1b3f126e21cc80347cc2b0eb7ec1b410c"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1e6bf35df4b91fdd0eec5c32c3f05ab92d27a4c9",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524671488,
            "hunks": 1,
            "message": "PDFBOX-4071: correct javadoc git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1830092 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDBorderEffectDictionary.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDBorderEffectDictionary.java",
                "index 7f5c40ea7..7cdbc6d53 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDBorderEffectDictionary.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDBorderEffectDictionary.java",
                "@@ -108,3 +108,3 @@ public class PDBorderEffectDictionary implements COSObjectable",
                "      *",
                "-     * @return the effect of the border",
                "+     * @return the effect of the border or {@link #STYLE_SOLID} if none is found.",
                "      */"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDBorderEffectDictionary.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "ca68c6ac525451e647505e062feb65aab8121d7f"
                ],
                [
                    "no-tag",
                    "b830a0536914b55325fa4c1bf7801625723d1d6c"
                ],
                [
                    "no-tag",
                    "31094dda08aa280adf42f05c1da2bca068391d30"
                ],
                [
                    "no-tag",
                    "5a89ad7859341b2a1d89b6f290871c6035a35f2d"
                ],
                [
                    "no-tag",
                    "d5bbe5637dd0ba704065d6202854ce40667fe9be"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6156337e979401441d9f7eb4ef92b1be8d0a84e9",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531248757,
            "hunks": 1,
            "message": "PDFBOX-4184: fix heuristics git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835595 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "index ddbef8dc5..561558f70 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "@@ -667,3 +667,4 @@ public final class LosslessFactory",
                "             {",
                "-                sum += aDataRawRowSub & 0xFF;",
                "+                // https://www.w3.org/TR/PNG-Encoders.html#E.Filter-selection",
                "+                sum += Math.abs(aDataRawRowSub);",
                "             }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4184": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "acb4cd5ea75f9dc3d2a3aba7c139de5034198daf"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4184",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "11061a829adc5975527d2f58dd296aa0ff33f55d",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532451776,
            "hunks": 3,
            "message": "PDFBOX-4276: handle all ExtGState names, not just those with gs and number git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1836571 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/preflight/src/main/java/org/apache/pdfbox/preflight/process/reflect/ExtGStateValidationProcess.java b/preflight/src/main/java/org/apache/pdfbox/preflight/process/reflect/ExtGStateValidationProcess.java",
                "index d5f549861..11986a755 100644",
                "--- a/preflight/src/main/java/org/apache/pdfbox/preflight/process/reflect/ExtGStateValidationProcess.java",
                "+++ b/preflight/src/main/java/org/apache/pdfbox/preflight/process/reflect/ExtGStateValidationProcess.java",
                "@@ -115,12 +115,9 @@ public class ExtGStateValidationProcess extends AbstractProcess",
                "                 COSName key = (COSName) object;",
                "-                if (key.getName().matches(TRANSPARENCY_DICTIONARY_KEY_EXTGSTATE_ENTRY_REGEX))",
                "+                COSBase gsBase = extGStates.getItem(key);",
                "+                COSDictionary gsDict = COSUtils.getAsDictionary(gsBase, cosDocument);",
                "+                if (gsDict == null)",
                "                 {",
                "-                    COSBase gsBase = extGStates.getItem(key);",
                "-                    COSDictionary gsDict = COSUtils.getAsDictionary(gsBase, cosDocument);",
                "-                    if (gsDict == null)",
                "-                    {",
                "-                        throw new ValidationException(\"The Extended Graphics State dictionary is invalid\");",
                "-                    }",
                "-                    listOfExtGState.add(gsDict);",
                "+                    throw new ValidationException(\"The Extended Graphics State dictionary is invalid\");",
                "                 }",
                "+                listOfExtGState.add(gsDict);",
                "             }"
            ],
            "changed_files": [
                "preflight/src/main/java/org/apache/pdfbox/preflight/process/reflect/ExtGStateValidationProcess.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4276": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "184df397dc2c1b887aa505a613efd4eb9460a181"
                ],
                [
                    "no-tag",
                    "077d049d0bebb70fd2f27f09b191c4517520a7bc"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4276",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9193e379827b2414a3db850ac6215d289493fa25",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532251756,
            "hunks": 1,
            "message": "PDFBOX-4184: size comparison only for DeviceRGB images git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1836431 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "index 3b81dbe43..bebda6ce2 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "@@ -85,3 +85,4 @@ public final class LosslessFactory",
                "                 {",
                "-                    if (pdImageXObject.getBitsPerComponent() < 16 &&",
                "+                    if (pdImageXObject.getColorSpace() == PDDeviceRGB.INSTANCE &&",
                "+                        pdImageXObject.getBitsPerComponent() < 16 &&",
                "                         image.getWidth() * image.getHeight() <= 50 * 50)"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4184": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "27381387a031eac6c3f872eb331df45edf93d6ea"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4184",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1ba37ac4b778f6e0728ef92924c3775cc16caabf",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527004780,
            "hunks": 1,
            "message": "PDFBOX-4071: update owasp check to current version git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832040 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 7d1ef8d71..5e35db3a0 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -148,3 +148,3 @@",
                "                         <artifactId>dependency-check-maven</artifactId>",
                "-                        <version>3.1.2</version>",
                "+                        <version>3.2.0</version>",
                "                         <configuration>"
            ],
            "changed_files": [
                "parent/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a831d2c0b474902675235c6e35e720caaf1321a1"
                ],
                [
                    "no-tag",
                    "5a4c4ccd0a36db2855c67af600ac6b9485ac6308"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "901cfc3a03e8e6c72f923f523f551a22a9fc6b62",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531421953,
            "hunks": 1,
            "message": "PDFBOX-4071: update javadoc link git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835766 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 86b47b965..bff4a6054 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -183,3 +183,3 @@",
                "                     <links>",
                "-                        <link>http://download.oracle.com/javase/1.7.0/docs/api/</link>",
                "+                        <link>https://docs.oracle.com/javase/7/docs/api/</link>",
                "                     </links>"
            ],
            "changed_files": [
                "parent/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "460bb9d95e1a850f5112a90a290dff0d4d445f31"
                ],
                [
                    "no-tag",
                    "0243118c3f122e13612e145948ce512da20686b9"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e4600eef2f3b5e2b82e95a66c16eeb276f1c6997",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528393137,
            "hunks": 1,
            "message": "PDFBOX-4241: don't close the stream twice, as suggested by Harald Kuhr git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833132 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java b/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "index f906717e0..235ce1eab 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "@@ -300,6 +300,2 @@ public class COSWriter implements ICOSVisitor, Closeable",
                "         }",
                "-        if (getOutput() != null)",
                "-        {",
                "-            getOutput().close();",
                "-        }",
                "         if (incrementalOutput != null)"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4241": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "63a794e583e2d6e2ab2504255cb5477d011d7300"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4241",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "960d51d027c468f09ae011d48a018ba39efc1b8e",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531331744,
            "hunks": 3,
            "message": "PDFBOX-4071: replace deprecated method git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835654 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationHelper.java b/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationHelper.java",
                "index e344f61fb..cc1642cd6 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationHelper.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationHelper.java",
                "@@ -40,3 +40,3 @@ import org.bouncycastle.asn1.x509.GeneralName;",
                " import org.bouncycastle.asn1.x509.X509ObjectIdentifiers;",
                "-import org.bouncycastle.x509.extension.X509ExtensionUtil;",
                "+import org.bouncycastle.cert.jcajce.JcaX509ExtensionUtils;",
                "@@ -138,3 +138,3 @@ public class CertInformationHelper",
                "     {",
                "-        ASN1Sequence asn1Seq = (ASN1Sequence) X509ExtensionUtil.fromExtensionValue(extensionValue);",
                "+        ASN1Sequence asn1Seq = (ASN1Sequence) JcaX509ExtensionUtils.parseExtensionValue(extensionValue);",
                "         Enumeration<?> objects = asn1Seq.getObjects();",
                "@@ -172,3 +172,3 @@ public class CertInformationHelper",
                "     {",
                "-        ASN1Sequence asn1Seq = (ASN1Sequence) X509ExtensionUtil.fromExtensionValue(extensionValue);",
                "+        ASN1Sequence asn1Seq = (ASN1Sequence) JcaX509ExtensionUtils.parseExtensionValue(extensionValue);",
                "         Enumeration<?> objects = asn1Seq.getObjects();"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "25b289c050018c4855809c721e7d7127b79f24c4"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "831ca3562c73296a35ffc410a0f08d4558bf0676",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530384240,
            "hunks": 75,
            "message": "PDFBOX-3000: sonar fix: don't have a class member with the same name as its enclosing class; rename other member as well git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1834758 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/rendering/GroupGraphics.java b/pdfbox/src/main/java/org/apache/pdfbox/rendering/GroupGraphics.java",
                "index b21ca1e6f..d85d7db92 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/rendering/GroupGraphics.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/rendering/GroupGraphics.java",
                "@@ -68,4 +68,4 @@ class GroupGraphics extends Graphics2D",
                "     private final BufferedImage groupAlphaImage;",
                "-    private final Graphics2D groupGraphics;",
                "-    private final Graphics2D alphaGraphics;",
                "+    private final Graphics2D groupG2D;",
                "+    private final Graphics2D alphaG2D;",
                "@@ -74,6 +74,6 @@ class GroupGraphics extends Graphics2D",
                "         this.groupImage = groupImage;",
                "-        this.groupGraphics = groupGraphics;",
                "+        this.groupG2D = groupGraphics;",
                "         this.groupAlphaImage = new BufferedImage(groupImage.getWidth(), groupImage.getHeight(),",
                "             BufferedImage.TYPE_INT_ARGB);",
                "-        this.alphaGraphics = groupAlphaImage.createGraphics();",
                "+        this.alphaG2D = groupAlphaImage.createGraphics();",
                "     }",
                "@@ -84,5 +84,5 @@ class GroupGraphics extends Graphics2D",
                "         this.groupImage = groupImage;",
                "-        this.groupGraphics = groupGraphics;",
                "+        this.groupG2D = groupGraphics;",
                "         this.groupAlphaImage = groupAlphaImage;",
                "-        this.alphaGraphics = alphaGraphics;",
                "+        this.alphaG2D = alphaGraphics;",
                "     }",
                "@@ -92,4 +92,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.clearRect(x, y, width, height);",
                "-        alphaGraphics.clearRect(x, y, width, height);",
                "+        groupG2D.clearRect(x, y, width, height);",
                "+        alphaG2D.clearRect(x, y, width, height);",
                "     }",
                "@@ -99,4 +99,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.clipRect(x, y, width, height);",
                "-        alphaGraphics.clipRect(x, y, width, height);",
                "+        groupG2D.clipRect(x, y, width, height);",
                "+        alphaG2D.clipRect(x, y, width, height);",
                "     }",
                "@@ -106,4 +106,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.copyArea(x, y, width, height, dx, dy);",
                "-        alphaGraphics.copyArea(x, y, width, height, dx, dy);",
                "+        groupG2D.copyArea(x, y, width, height, dx, dy);",
                "+        alphaG2D.copyArea(x, y, width, height, dx, dy);",
                "     }",
                "@@ -113,4 +113,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        Graphics g = groupGraphics.create();",
                "-        Graphics a = alphaGraphics.create();",
                "+        Graphics g = groupG2D.create();",
                "+        Graphics a = alphaG2D.create();",
                "         if (g instanceof Graphics2D && a instanceof Graphics2D)",
                "@@ -125,4 +125,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.dispose();",
                "-        alphaGraphics.dispose();",
                "+        groupG2D.dispose();",
                "+        alphaG2D.dispose();",
                "     }",
                "@@ -132,4 +132,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawArc(x, y, width, height, startAngle, arcAngle);",
                "-        alphaGraphics.drawArc(x, y, width, height, startAngle, arcAngle);",
                "+        groupG2D.drawArc(x, y, width, height, startAngle, arcAngle);",
                "+        alphaG2D.drawArc(x, y, width, height, startAngle, arcAngle);",
                "     }",
                "@@ -139,4 +139,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawImage(img, x, y, bgcolor, observer);",
                "-        return alphaGraphics.drawImage(img, x, y, bgcolor, observer);",
                "+        groupG2D.drawImage(img, x, y, bgcolor, observer);",
                "+        return alphaG2D.drawImage(img, x, y, bgcolor, observer);",
                "     }",
                "@@ -146,4 +146,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawImage(img, x, y, observer);",
                "-        return alphaGraphics.drawImage(img, x, y, observer);",
                "+        groupG2D.drawImage(img, x, y, observer);",
                "+        return alphaG2D.drawImage(img, x, y, observer);",
                "     }",
                "@@ -154,4 +154,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawImage(img, x, y, width, height, bgcolor, observer);",
                "-        return alphaGraphics.drawImage(img, x, y, width, height, bgcolor, observer);",
                "+        groupG2D.drawImage(img, x, y, width, height, bgcolor, observer);",
                "+        return alphaG2D.drawImage(img, x, y, width, height, bgcolor, observer);",
                "     }",
                "@@ -161,4 +161,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawImage(img, x, y, width, height, observer);",
                "-        return alphaGraphics.drawImage(img, x, y, width, height, observer);",
                "+        groupG2D.drawImage(img, x, y, width, height, observer);",
                "+        return alphaG2D.drawImage(img, x, y, width, height, observer);",
                "     }",
                "@@ -169,4 +169,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, bgcolor, observer);",
                "-        return alphaGraphics.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, bgcolor, observer);",
                "+        groupG2D.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, bgcolor, observer);",
                "+        return alphaG2D.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, bgcolor, observer);",
                "     }",
                "@@ -177,4 +177,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, observer);",
                "-        return alphaGraphics.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, observer);",
                "+        groupG2D.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, observer);",
                "+        return alphaG2D.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, observer);",
                "     }",
                "@@ -184,4 +184,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawLine(x1, y1, x2, y2);",
                "-        alphaGraphics.drawLine(x1, y1, x2, y2);",
                "+        groupG2D.drawLine(x1, y1, x2, y2);",
                "+        alphaG2D.drawLine(x1, y1, x2, y2);",
                "     }",
                "@@ -191,4 +191,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawOval(x, y, width, height);",
                "-        alphaGraphics.drawOval(x, y, width, height);",
                "+        groupG2D.drawOval(x, y, width, height);",
                "+        alphaG2D.drawOval(x, y, width, height);",
                "     }",
                "@@ -198,4 +198,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawPolygon(xPoints, yPoints, nPoints);",
                "-        alphaGraphics.drawPolygon(xPoints, yPoints, nPoints);",
                "+        groupG2D.drawPolygon(xPoints, yPoints, nPoints);",
                "+        alphaG2D.drawPolygon(xPoints, yPoints, nPoints);",
                "     }",
                "@@ -205,4 +205,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawPolyline(xPoints, yPoints, nPoints);",
                "-        alphaGraphics.drawPolyline(xPoints, yPoints, nPoints);",
                "+        groupG2D.drawPolyline(xPoints, yPoints, nPoints);",
                "+        alphaG2D.drawPolyline(xPoints, yPoints, nPoints);",
                "     }",
                "@@ -212,4 +212,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawRoundRect(x, y, width, height, arcWidth, arcHeight);",
                "-        alphaGraphics.drawRoundRect(x, y, width, height, arcWidth, arcHeight);",
                "+        groupG2D.drawRoundRect(x, y, width, height, arcWidth, arcHeight);",
                "+        alphaG2D.drawRoundRect(x, y, width, height, arcWidth, arcHeight);",
                "     }",
                "@@ -219,4 +219,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawString(iterator, x, y);",
                "-        alphaGraphics.drawString(iterator, x, y);",
                "+        groupG2D.drawString(iterator, x, y);",
                "+        alphaG2D.drawString(iterator, x, y);",
                "     }",
                "@@ -226,4 +226,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawString(str, x, y);",
                "-        alphaGraphics.drawString(str, x, y);",
                "+        groupG2D.drawString(str, x, y);",
                "+        alphaG2D.drawString(str, x, y);",
                "     }",
                "@@ -233,4 +233,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.fillArc(x, y, width, height, startAngle, arcAngle);",
                "-        alphaGraphics.fillArc(x, y, width, height, startAngle, arcAngle);",
                "+        groupG2D.fillArc(x, y, width, height, startAngle, arcAngle);",
                "+        alphaG2D.fillArc(x, y, width, height, startAngle, arcAngle);",
                "     }",
                "@@ -240,4 +240,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.fillOval(x, y, width, height);",
                "-        alphaGraphics.fillOval(x, y, width, height);",
                "+        groupG2D.fillOval(x, y, width, height);",
                "+        alphaG2D.fillOval(x, y, width, height);",
                "     }",
                "@@ -247,4 +247,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.fillPolygon(xPoints, yPoints, nPoints);",
                "-        alphaGraphics.fillPolygon(xPoints, yPoints, nPoints);",
                "+        groupG2D.fillPolygon(xPoints, yPoints, nPoints);",
                "+        alphaG2D.fillPolygon(xPoints, yPoints, nPoints);",
                "     }",
                "@@ -254,4 +254,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.fillRect(x, y, width, height);",
                "-        alphaGraphics.fillRect(x, y, width, height);",
                "+        groupG2D.fillRect(x, y, width, height);",
                "+        alphaG2D.fillRect(x, y, width, height);",
                "     }",
                "@@ -261,4 +261,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.fillRoundRect(x, y, width, height, arcWidth, arcHeight);",
                "-        alphaGraphics.fillRoundRect(x, y, width, height, arcWidth, arcHeight);",
                "+        groupG2D.fillRoundRect(x, y, width, height, arcWidth, arcHeight);",
                "+        alphaG2D.fillRoundRect(x, y, width, height, arcWidth, arcHeight);",
                "     }",
                "@@ -268,3 +268,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getClip();",
                "+        return groupG2D.getClip();",
                "     }",
                "@@ -274,3 +274,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getClipBounds();",
                "+        return groupG2D.getClipBounds();",
                "     }",
                "@@ -280,3 +280,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getColor();",
                "+        return groupG2D.getColor();",
                "     }",
                "@@ -286,3 +286,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getFont();",
                "+        return groupG2D.getFont();",
                "     }",
                "@@ -292,3 +292,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getFontMetrics(f);",
                "+        return groupG2D.getFontMetrics(f);",
                "     }",
                "@@ -298,4 +298,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.setClip(x, y, width, height);",
                "-        alphaGraphics.setClip(x, y, width, height);",
                "+        groupG2D.setClip(x, y, width, height);",
                "+        alphaG2D.setClip(x, y, width, height);",
                "     }",
                "@@ -305,4 +305,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.setClip(clip);",
                "-        alphaGraphics.setClip(clip);",
                "+        groupG2D.setClip(clip);",
                "+        alphaG2D.setClip(clip);",
                "     }",
                "@@ -312,4 +312,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.setColor(c);",
                "-        alphaGraphics.setColor(c);",
                "+        groupG2D.setColor(c);",
                "+        alphaG2D.setColor(c);",
                "     }",
                "@@ -319,4 +319,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.setFont(font);",
                "-        alphaGraphics.setFont(font);",
                "+        groupG2D.setFont(font);",
                "+        alphaG2D.setFont(font);",
                "     }",
                "@@ -326,4 +326,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.setPaintMode();",
                "-        alphaGraphics.setPaintMode();",
                "+        groupG2D.setPaintMode();",
                "+        alphaG2D.setPaintMode();",
                "     }",
                "@@ -333,4 +333,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.setXORMode(c1);",
                "-        alphaGraphics.setXORMode(c1);",
                "+        groupG2D.setXORMode(c1);",
                "+        alphaG2D.setXORMode(c1);",
                "     }",
                "@@ -340,4 +340,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.translate(x, y);",
                "-        alphaGraphics.translate(x, y);",
                "+        groupG2D.translate(x, y);",
                "+        alphaG2D.translate(x, y);",
                "     }",
                "@@ -347,4 +347,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.addRenderingHints(hints);",
                "-        alphaGraphics.addRenderingHints(hints);",
                "+        groupG2D.addRenderingHints(hints);",
                "+        alphaG2D.addRenderingHints(hints);",
                "     }",
                "@@ -354,4 +354,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.clip(s);",
                "-        alphaGraphics.clip(s);",
                "+        groupG2D.clip(s);",
                "+        alphaG2D.clip(s);",
                "     }",
                "@@ -361,4 +361,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.draw(s);",
                "-        alphaGraphics.draw(s);",
                "+        groupG2D.draw(s);",
                "+        alphaG2D.draw(s);",
                "     }",
                "@@ -368,4 +368,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawGlyphVector(g, x, y);",
                "-        alphaGraphics.drawGlyphVector(g, x, y);",
                "+        groupG2D.drawGlyphVector(g, x, y);",
                "+        alphaG2D.drawGlyphVector(g, x, y);",
                "     }",
                "@@ -375,4 +375,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawImage(img, op, x, y);",
                "-        alphaGraphics.drawImage(img, op, x, y);",
                "+        groupG2D.drawImage(img, op, x, y);",
                "+        alphaG2D.drawImage(img, op, x, y);",
                "     }",
                "@@ -382,4 +382,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawImage(img, xform, obs);",
                "-        return alphaGraphics.drawImage(img, xform, obs);",
                "+        groupG2D.drawImage(img, xform, obs);",
                "+        return alphaG2D.drawImage(img, xform, obs);",
                "     }",
                "@@ -389,4 +389,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawRenderableImage(img, xform);",
                "-        alphaGraphics.drawRenderableImage(img, xform);",
                "+        groupG2D.drawRenderableImage(img, xform);",
                "+        alphaG2D.drawRenderableImage(img, xform);",
                "     }",
                "@@ -396,4 +396,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawRenderedImage(img, xform);",
                "-        alphaGraphics.drawRenderedImage(img, xform);",
                "+        groupG2D.drawRenderedImage(img, xform);",
                "+        alphaG2D.drawRenderedImage(img, xform);",
                "     }",
                "@@ -403,4 +403,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawString(iterator, x, y);",
                "-        alphaGraphics.drawString(iterator, x, y);",
                "+        groupG2D.drawString(iterator, x, y);",
                "+        alphaG2D.drawString(iterator, x, y);",
                "     }",
                "@@ -410,4 +410,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.drawString(str, x, y);",
                "-        alphaGraphics.drawString(str, x, y);",
                "+        groupG2D.drawString(str, x, y);",
                "+        alphaG2D.drawString(str, x, y);",
                "     }",
                "@@ -417,4 +417,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.fill(s);",
                "-        alphaGraphics.fill(s);",
                "+        groupG2D.fill(s);",
                "+        alphaG2D.fill(s);",
                "     }",
                "@@ -424,3 +424,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getBackground();",
                "+        return groupG2D.getBackground();",
                "     }",
                "@@ -430,3 +430,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getComposite();",
                "+        return groupG2D.getComposite();",
                "     }",
                "@@ -436,3 +436,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getDeviceConfiguration();",
                "+        return groupG2D.getDeviceConfiguration();",
                "     }",
                "@@ -442,3 +442,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getFontRenderContext();",
                "+        return groupG2D.getFontRenderContext();",
                "     }",
                "@@ -448,3 +448,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getPaint();",
                "+        return groupG2D.getPaint();",
                "     }",
                "@@ -454,3 +454,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getRenderingHint(hintKey);",
                "+        return groupG2D.getRenderingHint(hintKey);",
                "     }",
                "@@ -460,3 +460,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getRenderingHints();",
                "+        return groupG2D.getRenderingHints();",
                "     }",
                "@@ -466,3 +466,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getStroke();",
                "+        return groupG2D.getStroke();",
                "     }",
                "@@ -472,3 +472,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.getTransform();",
                "+        return groupG2D.getTransform();",
                "     }",
                "@@ -478,3 +478,3 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        return groupGraphics.hit(rect, s, onStroke);",
                "+        return groupG2D.hit(rect, s, onStroke);",
                "     }",
                "@@ -484,4 +484,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.rotate(theta);",
                "-        alphaGraphics.rotate(theta);",
                "+        groupG2D.rotate(theta);",
                "+        alphaG2D.rotate(theta);",
                "     }",
                "@@ -491,4 +491,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.rotate(theta, x, y);",
                "-        alphaGraphics.rotate(theta, x, y);",
                "+        groupG2D.rotate(theta, x, y);",
                "+        alphaG2D.rotate(theta, x, y);",
                "     }",
                "@@ -498,4 +498,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.scale(sx, sy);",
                "-        alphaGraphics.scale(sx, sy);",
                "+        groupG2D.scale(sx, sy);",
                "+        alphaG2D.scale(sx, sy);",
                "     }",
                "@@ -505,4 +505,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.setBackground(color);",
                "-        alphaGraphics.setBackground(color);",
                "+        groupG2D.setBackground(color);",
                "+        alphaG2D.setBackground(color);",
                "     }",
                "@@ -512,4 +512,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.setComposite(comp);",
                "-        alphaGraphics.setComposite(comp);",
                "+        groupG2D.setComposite(comp);",
                "+        alphaG2D.setComposite(comp);",
                "     }",
                "@@ -519,4 +519,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.setPaint(paint);",
                "-        alphaGraphics.setPaint(paint);",
                "+        groupG2D.setPaint(paint);",
                "+        alphaG2D.setPaint(paint);",
                "     }",
                "@@ -526,4 +526,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.setRenderingHint(hintKey, hintValue);",
                "-        alphaGraphics.setRenderingHint(hintKey, hintValue);",
                "+        groupG2D.setRenderingHint(hintKey, hintValue);",
                "+        alphaG2D.setRenderingHint(hintKey, hintValue);",
                "     }",
                "@@ -533,4 +533,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.setRenderingHints(hints);",
                "-        alphaGraphics.setRenderingHints(hints);",
                "+        groupG2D.setRenderingHints(hints);",
                "+        alphaG2D.setRenderingHints(hints);",
                "     }",
                "@@ -540,4 +540,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.setStroke(s);",
                "-        alphaGraphics.setStroke(s);",
                "+        groupG2D.setStroke(s);",
                "+        alphaG2D.setStroke(s);",
                "     }",
                "@@ -547,4 +547,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.setTransform(tx);",
                "-        alphaGraphics.setTransform(tx);",
                "+        groupG2D.setTransform(tx);",
                "+        alphaG2D.setTransform(tx);",
                "     }",
                "@@ -554,4 +554,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.shear(shx, shy);",
                "-        alphaGraphics.shear(shx, shy);",
                "+        groupG2D.shear(shx, shy);",
                "+        alphaG2D.shear(shx, shy);",
                "     }",
                "@@ -561,4 +561,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.transform(tx);",
                "-        alphaGraphics.transform(tx);",
                "+        groupG2D.transform(tx);",
                "+        alphaG2D.transform(tx);",
                "     }",
                "@@ -568,4 +568,4 @@ class GroupGraphics extends Graphics2D",
                "     {",
                "-        groupGraphics.translate(tx, ty);",
                "-        alphaGraphics.translate(tx, ty);",
                "+        groupG2D.translate(tx, ty);",
                "+        alphaG2D.translate(tx, ty);",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/rendering/GroupGraphics.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3000": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "626b0cc71a70f865abfc47c38610dd0f78e5a6cb"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3000",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4731163226d8ddeccef9f19fdb297b68eb820f66",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526656290,
            "hunks": 1,
            "message": "PDFBOX-4224: update jbig2 plugin git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1831862 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 8ac30fd28..c1269ac44 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -99,3 +99,3 @@",
                "                 <artifactId>jbig2-imageio</artifactId>",
                "-                <version>3.0.0</version>",
                "+                <version>3.0.1</version>",
                "                 <scope>test</scope>"
            ],
            "changed_files": [
                "parent/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4224": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "988ff3612de14c204b758f4ddf7f6c1da626b922"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4224",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7a304fee6a8c5da93dfa7ceffebe79fd00dc53e6",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527791092,
            "hunks": 1,
            "message": "PDFBOX-4235: IllegalArgumentException instead of IllegalStateException git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1832637 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
                "index f2973e802..07aa8a326 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java",
                "@@ -415,3 +415,3 @@ class AppearanceGeneratorHelper",
                "         {",
                "-            throw new IllegalStateException(\"font is null, check whether /DA entry is incomplete or incorrect\");",
                "+            throw new IllegalArgumentException(\"font is null, check whether /DA entry is incomplete or incorrect\");",
                "         }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/AppearanceGeneratorHelper.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4235": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9eff016f57f7782f91f63d35ea11aee33303b3ba"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4235",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dc8430f73db794ee6528ea4551911c83154cc6f0",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524301933,
            "hunks": 0,
            "message": "PDFBOX-4189: add lohit-bengali font for upcoming tests and example git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829698 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/resources/org/apache/pdfbox/resources/ttf/Lohit-Bengali.ttf b/examples/src/main/resources/org/apache/pdfbox/resources/ttf/Lohit-Bengali.ttf",
                "new file mode 100644",
                "index 000000000..fa0f51627",
                "Binary files /dev/null and b/examples/src/main/resources/org/apache/pdfbox/resources/ttf/Lohit-Bengali.ttf differ"
            ],
            "changed_files": [
                "examples/src/main/resources/org/apache/pdfbox/resources/ttf/Lohit-Bengali.ttf"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "632222236b420218a89d8442719a57fb84224e35"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "92986822c54f759dd990deb27cc8933c1e363d4d",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524466427,
            "hunks": 1,
            "message": "PDFBOX-4195: force early class loading to check if people forgot to use --add-modules javax.xml.bind git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829822 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/preflight/src/main/java/org/apache/pdfbox/preflight/PreflightDocument.java b/preflight/src/main/java/org/apache/pdfbox/preflight/PreflightDocument.java",
                "index 237fac50f..457ac26bb 100644",
                "--- a/preflight/src/main/java/org/apache/pdfbox/preflight/PreflightDocument.java",
                "+++ b/preflight/src/main/java/org/apache/pdfbox/preflight/PreflightDocument.java",
                "@@ -158,2 +158,5 @@ public class PreflightDocument extends PDDocument",
                "     {",
                "+        // force early class loading to check if people forgot to use --add-modules javax.xml.bind",
                "+        // on java 9 or later",
                "+        javax.xml.bind.DatatypeConverter.parseInt(\"0\");",
                "         context.setConfig(config);"
            ],
            "changed_files": [
                "preflight/src/main/java/org/apache/pdfbox/preflight/PreflightDocument.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4195": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "1e292ec2c98edfa9048356174963256bb555b126"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4195",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c6e95c0a6ab830e604740607e23916dfb6417943",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523388482,
            "hunks": 16,
            "message": "PDFBOX-4187: split large method git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1828853 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "index 06f1e7582..7450953a8 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "@@ -55,5 +55,16 @@ public final class LosslessFactory",
                "     {",
                "-        int bpc;",
                "-        PDDeviceColorSpace deviceColorSpace;",
                "+        if ((image.getType() == BufferedImage.TYPE_BYTE_GRAY && image.getColorModel().getPixelSize() <= 8)",
                "+                || (image.getType() == BufferedImage.TYPE_BYTE_BINARY && image.getColorModel().getPixelSize() == 1))",
                "+        {",
                "+            return createFromGrayImage(image, document);",
                "+        }",
                "+        else",
                "+        {",
                "+            return createFromRGBImage(image, document);",
                "+        }      ",
                "+    }",
                "+    private static PDImageXObject createFromGrayImage(BufferedImage image, PDDocument document)",
                "+            throws IOException",
                "+    {",
                "         int height = image.getHeight();",
                "@@ -61,28 +72,43 @@ public final class LosslessFactory",
                "         int[] rgbLineBuffer = new int[width];",
                "-",
                "-        if ((image.getType() == BufferedImage.TYPE_BYTE_GRAY && image.getColorModel().getPixelSize() <= 8)",
                "-                || (image.getType() == BufferedImage.TYPE_BYTE_BINARY && image.getColorModel().getPixelSize() == 1))",
                "+        int bpc;",
                "+        // grayscale images need one color per sample",
                "+        bpc = image.getColorModel().getPixelSize();",
                "+        ByteArrayOutputStream baos = new ByteArrayOutputStream(((width*bpc/8)+(width*bpc%8 != 0 ? 1:0))*height);",
                "+        MemoryCacheImageOutputStream mcios = new MemoryCacheImageOutputStream(baos);",
                "+        for (int y = 0; y < height; ++y)",
                "         {",
                "-            // grayscale images need one color per sample",
                "-            bpc = image.getColorModel().getPixelSize();",
                "-            ByteArrayOutputStream baos = new ByteArrayOutputStream(((width*bpc/8)+(width*bpc%8 != 0 ? 1:0))*height);",
                "-            MemoryCacheImageOutputStream mcios = new MemoryCacheImageOutputStream(baos);",
                "-            for (int y = 0; y < height; ++y)",
                "+            for (int pixel : image.getRGB(0, y, width, 1, rgbLineBuffer, 0, width))",
                "             {",
                "-                for (int pixel : image.getRGB(0, y, width, 1, rgbLineBuffer, 0, width))",
                "-                {",
                "-                    mcios.writeBits(pixel & 0xFF, bpc);",
                "-                }",
                "-",
                "-                int bitOffset = mcios.getBitOffset();",
                "-                if (bitOffset != 0)",
                "-                {",
                "-                    mcios.writeBits(0, 8 - bitOffset);",
                "-                }",
                "+                mcios.writeBits(pixel & 0xFF, bpc);",
                "             }",
                "-            mcios.flush();",
                "-            mcios.close();",
                "-            return prepareImageXObject(document, baos.toByteArray(), ",
                "+            int bitOffset = mcios.getBitOffset();",
                "+            if (bitOffset != 0)",
                "+            {",
                "+                mcios.writeBits(0, 8 - bitOffset);",
                "+            }",
                "+        }",
                "+        mcios.flush();",
                "+        mcios.close();",
                "+        return prepareImageXObject(document, baos.toByteArray(),",
                "                 image.getWidth(), image.getHeight(), bpc, PDDeviceGray.INSTANCE);",
                "+    }",
                "+",
                "+    private static PDImageXObject createFromRGBImage(BufferedImage image, PDDocument document) throws IOException",
                "+    {",
                "+        int height = image.getHeight();",
                "+        int width = image.getWidth();",
                "+        int[] rgbLineBuffer = new int[width];",
                "+        int bpc = 8;",
                "+        PDDeviceColorSpace deviceColorSpace = PDDeviceRGB.INSTANCE;",
                "+        byte[] imageData = new byte[width * height * 3];",
                "+        int byteIdx = 0;",
                "+        int alphaByteIdx = 0;",
                "+        int alphaBitPos = 7;",
                "+        int transparency = image.getTransparency();",
                "+        int apbc = transparency == Transparency.BITMASK ? 1 : 8;",
                "+        byte[] alphaImageData;",
                "+        if (transparency != Transparency.OPAQUE)",
                "+        {",
                "+            alphaImageData = new byte[((width * apbc / 8) + (width * apbc % 8 != 0 ? 1 : 0)) * height];",
                "         }",
                "@@ -90,56 +116,29 @@ public final class LosslessFactory",
                "         {",
                "-            // RGB",
                "-            bpc = 8;",
                "-            deviceColorSpace = PDDeviceRGB.INSTANCE;",
                "-            byte[] imageData = new byte[width * height * 3];",
                "-            int byteIdx = 0;",
                "-            int alphaByteIdx = 0;",
                "-            int alphaBitPos = 7;",
                "-            int transparency = image.getTransparency();",
                "-            int apbc = transparency == Transparency.BITMASK ? 1 : 8;",
                "-            byte[] alphaImageData;",
                "-            if (transparency != Transparency.OPAQUE)",
                "-            {",
                "-                alphaImageData = new byte[((width * apbc / 8) + (width * apbc % 8 != 0 ? 1 : 0)) * height];",
                "-            }",
                "-            else",
                "-            {",
                "-                alphaImageData = new byte[0];",
                "-            }",
                "-",
                "-            for (int y = 0; y < height; ++y)",
                "+            alphaImageData = new byte[0];",
                "+        }",
                "+        for (int y = 0; y < height; ++y)",
                "+        {",
                "+            for (int pixel : image.getRGB(0, y, width, 1, rgbLineBuffer, 0, width))",
                "             {",
                "-                for (int pixel : image.getRGB(0, y, width, 1, rgbLineBuffer, 0, width))",
                "+                imageData[byteIdx++] = (byte) ((pixel >> 16) & 0xFF);",
                "+                imageData[byteIdx++] = (byte) ((pixel >> 8) & 0xFF);",
                "+                imageData[byteIdx++] = (byte) (pixel & 0xFF);",
                "+                if (transparency != Transparency.OPAQUE)",
                "                 {",
                "-                    imageData[byteIdx++] = (byte) ((pixel >> 16) & 0xFF);",
                "-                    imageData[byteIdx++] = (byte) ((pixel >> 8) & 0xFF);",
                "-                    imageData[byteIdx++] = (byte) (pixel & 0xFF);",
                "-                    if (transparency != Transparency.OPAQUE)",
                "+                    // we have the alpha right here, so no need to do it separately",
                "+                    // as done prior April 2018",
                "+                    if (transparency == Transparency.BITMASK)",
                "                     {",
                "-                        // we have the alpha right here, so no need to do it separately",
                "-                        // as done prior April 2018",
                "-                        if (transparency == Transparency.BITMASK)",
                "+                        // write a bit",
                "+                        alphaImageData[alphaByteIdx] |= ((pixel >> 24) & 1) << alphaBitPos;",
                "+                        if (--alphaBitPos < 0)",
                "                         {",
                "-                            // write a bit",
                "-                            alphaImageData[alphaByteIdx] |= ((pixel >> 24) & 1) << alphaBitPos;",
                "-                            if (--alphaBitPos < 0)",
                "-                            {",
                "-                                alphaBitPos = 7;",
                "-                                ++alphaByteIdx;",
                "-                            }",
                "-                        }",
                "-                        else",
                "-                        {",
                "-                            // write a byte",
                "-                            alphaImageData[alphaByteIdx++] = (byte) ((pixel >> 24) & 0xFF);",
                "+                            alphaBitPos = 7;",
                "+                            ++alphaByteIdx;",
                "                         }",
                "                     }",
                "-                }",
                "-                if (transparency == Transparency.BITMASK)",
                "-                {",
                "-                    // skip boundary if needed",
                "-                    if (alphaBitPos != 7)",
                "+                    else",
                "                     {",
                "-                        alphaBitPos = 7;",
                "-                        ++alphaByteIdx;",
                "+                        // write a byte",
                "+                        alphaImageData[alphaByteIdx++] = (byte) ((pixel >> 24) & 0xFF);",
                "                     }",
                "@@ -147,14 +146,21 @@ public final class LosslessFactory",
                "             }",
                "-            PDImageXObject pdImage = prepareImageXObject(document, imageData,",
                "-                    image.getWidth(), image.getHeight(), bpc, deviceColorSpace);",
                "-",
                "-            if (transparency != Transparency.OPAQUE)",
                "+            if (transparency == Transparency.BITMASK)",
                "             {",
                "-                PDImageXObject pdMask = prepareImageXObject(document, alphaImageData,",
                "-                            image.getWidth(), image.getHeight(), apbc, PDDeviceGray.INSTANCE);",
                "-                    pdImage.getCOSObject().setItem(COSName.SMASK, pdMask);",
                "+                // skip boundary if needed",
                "+                if (alphaBitPos != 7)",
                "+                {",
                "+                    alphaBitPos = 7;",
                "+                    ++alphaByteIdx;",
                "+                }",
                "             }",
                "-",
                "-            return pdImage;",
                "-        }      ",
                "+        }",
                "+        PDImageXObject pdImage = prepareImageXObject(document, imageData,",
                "+                image.getWidth(), image.getHeight(), bpc, deviceColorSpace);      ",
                "+        if (transparency != Transparency.OPAQUE)",
                "+        {",
                "+            PDImageXObject pdMask = prepareImageXObject(document, alphaImageData,",
                "+                    image.getWidth(), image.getHeight(), apbc, PDDeviceGray.INSTANCE);",
                "+            pdImage.getCOSObject().setItem(COSName.SMASK, pdMask);",
                "+        }",
                "+        return pdImage;",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4187": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "af2c0cab8a6c7552ab78bafcdf2c0592b72d863d"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4187",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ec0d0434e02a59e2640a0295c833b81da2f2e05a",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524334039,
            "hunks": 1,
            "message": "PDFBOX-4071: KCMS no longer available in JDK9 + clarify msg git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829734 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java",
                "index 298bf1525..88665ee03 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java",
                "@@ -137,3 +137,3 @@ public final class PDDeviceRGB extends PDDeviceColorSpace",
                "-                LOG.info(\"To get higher rendering speed on JDK8 or later,\");",
                "+                LOG.info(\"To get higher rendering speed on java 8 oder 9,\");",
                "                 LOG.info(\"  use the option -Dsun.java2d.cmm=sun.java2d.cmm.kcms.KcmsServiceProvider\");"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDDeviceRGB.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c2e4537bff72f6ce86beadab23fa84e50f64254e"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "81bc2f5bf72edd0bc059af77c9a3d7215e456833",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532268229,
            "hunks": 2,
            "message": "PDFBOX-4274: use the maven enforcer plugin, as suggested by Karl Heinz Marbaise git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1836441 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 2858e38ae..134f56ba2 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -52,7 +52,3 @@",
                "         <bouncycastle.version>1.60</bouncycastle.version>",
                "-    </properties>",
                "-    ",
                "-    <prerequisites>",
                "-    \t<maven>3.3.1</maven>",
                "-  \t</prerequisites>",
                "+      </properties>",
                "@@ -169,2 +165,19 @@",
                "         <plugins>",
                "+            <plugin>",
                "+              <artifactId>maven-enforcer-plugin</artifactId>",
                "+              <executions>",
                "+                <execution>",
                "+                  <goals>",
                "+                    <goal>enforce</goal>",
                "+                  </goals>",
                "+                  <configuration>",
                "+                    <rules combine.children=\"append\">",
                "+                      <requireMavenVersion>",
                "+                        <version>3.3.9</version>",
                "+                      </requireMavenVersion>",
                "+                    </rules>    ",
                "+                  </configuration>",
                "+                </execution>",
                "+              </executions>",
                "+            </plugin>",
                "             <plugin>"
            ],
            "changed_files": [
                "parent/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4274": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "e5990a7daadf9988f01595313e9fb5319a04a3d7"
                ],
                [
                    "no-tag",
                    "97dc6271f0cdc15ac649a677387a73ca28886d00"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4274",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e215ef8108023d24a1de8d61ccee07af40ed19a3",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523894086,
            "hunks": 2,
            "message": "PDFBOX-4071: update to current versions git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1829292 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 0f75edc71..8ac30fd28 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -109,3 +109,3 @@",
                "                 <artifactId>jai-imageio-core</artifactId>",
                "-                <version>1.3.1</version>",
                "+                <version>1.4.0</version>",
                "                 <scope>test</scope>",
                "@@ -223,3 +223,3 @@",
                " \t            <artifactId>animal-sniffer-maven-plugin</artifactId>",
                "-\t            <version>1.14</version>",
                "+\t            <version>1.16</version>",
                " \t            <executions>"
            ],
            "changed_files": [
                "parent/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9381b16a96c2a254292d4526aed8a652d2fe868c"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "563f4c4870e30e813ed89e9abdd59356d80bef34",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530363166,
            "hunks": 1,
            "message": "PDFBOX-4071: lessen memory footprint (no array copying) git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1834734 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java b/pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java",
                "index 857550cdd..14b18ba97 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java",
                "@@ -95,3 +95,3 @@ public final class COSOutputStream extends FilterOutputStream",
                "         // flush the entire stream",
                "-        out.write(buffer.toByteArray());",
                "+        buffer.writeTo(out);",
                "         super.close();"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/cos/COSOutputStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "97b5d7d696099d866a5f4a6ae888f0b247d19c88"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e1fbc360fc9955b88cdb09b7ae329e9bebc6ddeb",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523467843,
            "hunks": 4,
            "message": "PDFBOX-4187: simplify code git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1828915 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "index 0dde8b54f..cf914f2ad 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "@@ -66,2 +66,3 @@ public final class LosslessFactory",
                "+    // grayscale images need one color per sample",
                "     private static PDImageXObject createFromGrayImage(BufferedImage image, PDDocument document)",
                "@@ -72,5 +73,3 @@ public final class LosslessFactory",
                "         int[] rgbLineBuffer = new int[width];",
                "-        int bpc;",
                "-        // grayscale images need one color per sample",
                "-        bpc = image.getColorModel().getPixelSize();",
                "+        int bpc = image.getColorModel().getPixelSize();",
                "         ByteArrayOutputStream baos = new ByteArrayOutputStream(((width*bpc/8)+(width*bpc%8 != 0 ? 1:0))*height);",
                "@@ -146,10 +145,8 @@ public final class LosslessFactory",
                "             }",
                "-            if (transparency == Transparency.BITMASK)",
                "+",
                "+            // skip boundary if needed",
                "+            if (transparency == Transparency.BITMASK && alphaBitPos != 7)",
                "             {",
                "-                // skip boundary if needed",
                "-                if (alphaBitPos != 7)",
                "-                {",
                "-                    alphaBitPos = 7;",
                "-                    ++alphaByteIdx;",
                "-                }",
                "+                alphaBitPos = 7;",
                "+                ++alphaByteIdx;",
                "             }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4187": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6644ddc8a7333011e3e7e6721aa53caebd87356e"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4187",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2e885fa63a34a17c0cfef271128417463adea361",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530476887,
            "hunks": 11,
            "message": "PDFBOX-4184: support predictor compression and 16 bit RGB images, by Emmeran Seehuber git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1834805 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "index 70d71fd9e..457d9825b 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "@@ -18,3 +18,8 @@ package org.apache.pdfbox.pdmodel.graphics.image;",
                " import java.awt.Transparency;",
                "+import java.awt.color.ColorSpace;",
                "+import java.awt.color.ICC_ColorSpace;",
                "+import java.awt.color.ICC_Profile;",
                " import java.awt.image.BufferedImage;",
                "+import java.awt.image.DataBuffer;",
                "+import java.awt.image.Raster;",
                " import java.io.ByteArrayInputStream;",
                "@@ -22,4 +27,9 @@ import java.io.ByteArrayOutputStream;",
                " import java.io.IOException;",
                "+import java.io.OutputStream;",
                "+import java.util.Arrays;",
                "+import java.util.zip.Deflater;",
                "+import java.util.zip.DeflaterOutputStream;",
                " import javax.imageio.stream.MemoryCacheImageOutputStream;",
                " import org.apache.pdfbox.cos.COSDictionary;",
                "+import org.apache.pdfbox.cos.COSInteger;",
                " import org.apache.pdfbox.cos.COSName;",
                "@@ -29,2 +39,3 @@ import org.apache.pdfbox.pdmodel.PDDocument;",
                " import org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceCMYK;",
                " import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace;",
                "@@ -32,2 +43,3 @@ import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray;",
                " import org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB;",
                "+import org.apache.pdfbox.pdmodel.graphics.color.PDICCBased;",
                "@@ -40,2 +52,7 @@ public final class LosslessFactory",
                " {",
                "+    /** ",
                "+     * Internal, only for benchmark purpose",
                "+     */",
                "+    static boolean usePredictorEncoder = true;",
                "+",
                "     private LosslessFactory()",
                "@@ -43,3 +60,3 @@ public final class LosslessFactory",
                "     }",
                "-    ",
                "+",
                "     /**",
                "@@ -62,4 +79,15 @@ public final class LosslessFactory",
                "         {",
                "+            // We try to encode the image with predictor",
                "+            if (usePredictorEncoder)",
                "+            {",
                "+                PDImageXObject pdImageXObject = new PredictorEncoder(document, image).encode();",
                "+                if (pdImageXObject != null)",
                "+                {",
                "+                    return pdImageXObject;",
                "+                }",
                "+            }",
                "+",
                "+            // Fallback: We export the image as 8-bit sRGB and might loose color information",
                "             return createFromRGBImage(image, document);",
                "-        }      ",
                "+        }",
                "     }",
                "@@ -192,2 +220,457 @@ public final class LosslessFactory",
                "+    private static class PredictorEncoder",
                "+    {",
                "+        private final PDDocument document;",
                "+        private final BufferedImage image;",
                "+        private final int componentsPerPixel;",
                "+        private final int transferType;",
                "+        private final int bytesPerComponent;",
                "+        private final int bytesPerPixel;",
                "+",
                "+        private final int height;",
                "+        private final int width;",
                "+",
                "+        private final byte[] dataRawRowNone;",
                "+        private final byte[] dataRawRowSub;",
                "+        private final byte[] dataRawRowUp;",
                "+        private final byte[] dataRawRowAverage;",
                "+        private final byte[] dataRawRowPaeth;",
                "+",
                "+        final int imageType;",
                "+        final boolean hasAlpha;",
                "+        final byte[] alphaImageData;",
                "+",
                "+        final byte[] aValues;",
                "+        final byte[] cValues;",
                "+        final byte[] bValues;",
                "+        final byte[] xValues;",
                "+        final byte[] tmpResultValues;",
                "+",
                "+        /**",
                "+         * Initialize the encoder and set all final fields",
                "+         */",
                "+        PredictorEncoder(PDDocument document, BufferedImage image)",
                "+        {",
                "+            this.document = document;",
                "+            this.image = image;",
                "+",
                "+            // The raw count of components per pixel including optional alpha",
                "+            this.componentsPerPixel = image.getColorModel().getNumComponents();",
                "+            this.transferType = image.getRaster().getTransferType();",
                "+            this.bytesPerComponent = (transferType == DataBuffer.TYPE_SHORT",
                "+                    || transferType == DataBuffer.TYPE_USHORT) ? 2 : 1;",
                "+",
                "+            // Only the bytes we need in the output (excluding alpha)",
                "+            this.bytesPerPixel = image.getColorModel().getNumColorComponents() * bytesPerComponent;",
                "+",
                "+            this.height = image.getHeight();",
                "+            this.width = image.getWidth();",
                "+            this.imageType = image.getType();",
                "+            this.hasAlpha = image.getColorModel().getNumComponents() != image.getColorModel()",
                "+                    .getNumColorComponents();",
                "+            this.alphaImageData = hasAlpha ? new byte[width * height * bytesPerComponent] : null;",
                "+",
                "+            // The rows have 1-byte encoding marker and width * BYTES_PER_PIXEL pixel-bytes",
                "+            int dataRowByteCount = width * bytesPerPixel + 1;",
                "+            this.dataRawRowNone = new byte[dataRowByteCount];",
                "+            this.dataRawRowSub = new byte[dataRowByteCount];",
                "+            this.dataRawRowUp = new byte[dataRowByteCount];",
                "+            this.dataRawRowAverage = new byte[dataRowByteCount];",
                "+            this.dataRawRowPaeth = new byte[dataRowByteCount];",
                "+",
                "+            // Write the encoding markers",
                "+            dataRawRowNone[0] = 0;",
                "+            dataRawRowSub[0] = 1;",
                "+            dataRawRowUp[0] = 2;",
                "+            dataRawRowAverage[0] = 3;",
                "+            dataRawRowPaeth[0] = 4;",
                "+",
                "+            // c | b",
                "+            // -----",
                "+            // a | x",
                "+            //",
                "+            // x => current pixel",
                "+            this.aValues = new byte[bytesPerPixel];",
                "+            this.cValues = new byte[bytesPerPixel];",
                "+            this.bValues = new byte[bytesPerPixel];",
                "+            this.xValues = new byte[bytesPerPixel];",
                "+            this.tmpResultValues = new byte[bytesPerPixel];",
                "+        }",
                "+",
                "+        /**",
                "+         * Tries to compress the image using a predictor.",
                "+         *",
                "+         * @return the image or null if it is not possible to encoded the image (e.g. not supported",
                "+         * raster format etc.)",
                "+         */",
                "+        PDImageXObject encode() throws IOException",
                "+        {",
                "+            Raster imageRaster = image.getRaster();",
                "+            final int elementsInRowPerPixel;",
                "+",
                "+            // This variable store a row of the image each, the exact type depends",
                "+            // on the image encoding. Can be a int[], short[] or byte[]",
                "+            Object prevRow, transferRow;",
                "+",
                "+            switch (imageType)",
                "+            {",
                "+                case BufferedImage.TYPE_CUSTOM:",
                "+                {",
                "+                    switch (imageRaster.getTransferType())",
                "+                    {",
                "+                        case DataBuffer.TYPE_USHORT:",
                "+                            elementsInRowPerPixel = componentsPerPixel;",
                "+                            prevRow = new short[width * elementsInRowPerPixel];",
                "+                            transferRow = new short[width * elementsInRowPerPixel];",
                "+                            break;",
                "+                        case DataBuffer.TYPE_BYTE:",
                "+                            elementsInRowPerPixel = componentsPerPixel;",
                "+                            prevRow = new byte[width * elementsInRowPerPixel];",
                "+                            transferRow = new byte[width * elementsInRowPerPixel];",
                "+                            break;",
                "+                        default:",
                "+                            return null;",
                "+                    }",
                "+                    break;",
                "+                }",
                "+",
                "+                case BufferedImage.TYPE_3BYTE_BGR:",
                "+                case BufferedImage.TYPE_4BYTE_ABGR:",
                "+                {",
                "+                    elementsInRowPerPixel = componentsPerPixel;",
                "+                    prevRow = new byte[width * elementsInRowPerPixel];",
                "+                    transferRow = new byte[width * elementsInRowPerPixel];",
                "+                    break;",
                "+                }",
                "+",
                "+                case BufferedImage.TYPE_INT_BGR:",
                "+                case BufferedImage.TYPE_INT_ARGB:",
                "+                case BufferedImage.TYPE_INT_RGB:",
                "+                {",
                "+                    elementsInRowPerPixel = 1;",
                "+                    prevRow = new int[width * elementsInRowPerPixel];",
                "+                    transferRow = new int[width * elementsInRowPerPixel];",
                "+                    break;",
                "+                }",
                "+",
                "+                default:",
                "+                    // We can not handle this unknown format",
                "+                    return null;",
                "+            }",
                "+",
                "+            final int elementsInTransferRow = width * elementsInRowPerPixel;",
                "+",
                "+            // pre-size the output stream to half of the maximum size",
                "+            ByteArrayOutputStream stream = new ByteArrayOutputStream(",
                "+                    height * width * bytesPerPixel / 2);",
                "+            Deflater deflater = new Deflater(Filter.getCompressionLevel());",
                "+            DeflaterOutputStream zip = new DeflaterOutputStream(stream, deflater);",
                "+",
                "+            int alphaPtr = 0;",
                "+",
                "+            for (int rowNum = 0; rowNum < height; rowNum++)",
                "+            {",
                "+                imageRaster.getDataElements(0, rowNum, width, 1, transferRow);",
                "+",
                "+                // We start to write at index one, as the predictor marker is in index zero",
                "+                int writerPtr = 1;",
                "+                Arrays.fill(aValues, (byte) 0);",
                "+                Arrays.fill(cValues, (byte) 0);",
                "+",
                "+                final byte[] transferRowByte;",
                "+                final byte[] prevRowByte;",
                "+                final int[] transferRowInt;",
                "+                final int[] prevRowInt;",
                "+                final short[] transferRowShort;",
                "+                final short[] prevRowShort;",
                "+",
                "+                if (transferRow instanceof byte[])",
                "+                {",
                "+                    transferRowByte = (byte[]) transferRow;",
                "+                    prevRowByte = (byte[]) prevRow;",
                "+                    transferRowInt = prevRowInt = null;",
                "+                    transferRowShort = prevRowShort = null;",
                "+                }",
                "+                else if (transferRow instanceof int[])",
                "+                {",
                "+                    transferRowInt = (int[]) transferRow;",
                "+                    prevRowInt = (int[]) prevRow;",
                "+                    transferRowShort = prevRowShort = null;",
                "+                    transferRowByte = prevRowByte = null;",
                "+                }",
                "+                else",
                "+                {",
                "+                    // This must be short[]",
                "+                    transferRowShort = (short[]) transferRow;",
                "+                    prevRowShort = (short[]) prevRow;",
                "+                    transferRowInt = prevRowInt = null;",
                "+                    transferRowByte = prevRowByte = null;",
                "+                }",
                "+",
                "+                for (int indexInTransferRow = 0; indexInTransferRow < elementsInTransferRow;",
                "+                        indexInTransferRow += elementsInRowPerPixel, alphaPtr += bytesPerComponent)",
                "+                {",
                "+                    // Copy the pixel values into the byte array",
                "+                    if (transferRowByte != null)",
                "+                    {",
                "+                        copyImageBytes(transferRowByte, indexInTransferRow, xValues, alphaImageData,",
                "+                                alphaPtr);",
                "+                        copyImageBytes(prevRowByte, indexInTransferRow, bValues, null, 0);",
                "+                    }",
                "+                    else if (transferRowInt != null)",
                "+                    {",
                "+                        copyIntToBytes(transferRowInt, indexInTransferRow, xValues, alphaImageData,",
                "+                                alphaPtr);",
                "+                        copyIntToBytes(prevRowInt, indexInTransferRow, bValues, null, 0);",
                "+                    }",
                "+                    else",
                "+                    {",
                "+                        // This must be short[]",
                "+                        copyShortsToBytes(transferRowShort, indexInTransferRow, xValues, alphaImageData, alphaPtr);",
                "+                        copyShortsToBytes(prevRowShort, indexInTransferRow, bValues, null, 0);",
                "+                    }",
                "+",
                "+                    // Encode the pixel values in the different encodings",
                "+                    int length = xValues.length;",
                "+                    for (int bytePtr = 0; bytePtr < length; bytePtr++)",
                "+                    {",
                "+                        int x = xValues[bytePtr] & 0xFF;",
                "+                        int a = aValues[bytePtr] & 0xFF;",
                "+                        int b = bValues[bytePtr] & 0xFF;",
                "+                        int c = cValues[bytePtr] & 0xFF;",
                "+                        dataRawRowNone[writerPtr] = (byte) x;",
                "+                        dataRawRowSub[writerPtr] = pngFilterSub(x, a);",
                "+                        dataRawRowUp[writerPtr] = pngFilterUp(x, b);",
                "+                        dataRawRowAverage[writerPtr] = pngFilterAverage(x, a, b);",
                "+                        dataRawRowPaeth[writerPtr] = pngFilterPaeth(x, a, b, c);",
                "+                        writerPtr++;",
                "+                    }",
                "+",
                "+                    //  We shift the values into the prev / upper left values for the next pixel",
                "+                    System.arraycopy(xValues, 0, aValues, 0, bytesPerPixel);",
                "+                    System.arraycopy(bValues, 0, cValues, 0, bytesPerPixel);",
                "+                }",
                "+",
                "+                byte[] rowToWrite = chooseDataRowToWrite();",
                "+",
                "+                // Write and compress the row as long it is hot (CPU cache wise)",
                "+                zip.write(rowToWrite, 0, rowToWrite.length);",
                "+",
                "+                {",
                "+                    // We swap prev and transfer row, so that we have the prev row for the next row.",
                "+                    Object temp = prevRow;",
                "+                    prevRow = transferRow;",
                "+                    transferRow = temp;",
                "+                }",
                "+            }",
                "+            zip.close();",
                "+            deflater.end();",
                "+",
                "+            return preparePredictorPDImage(stream, bytesPerComponent * 8);",
                "+        }",
                "+",
                "+        private void copyIntToBytes(int[] transferRow, int indexInTranferRow, byte[] targetValues,",
                "+                byte[] alphaImageData, int alphaPtr)",
                "+        {",
                "+            int val = transferRow[indexInTranferRow];",
                "+            byte b0 = (byte) ((val & 0xFF));",
                "+            byte b1 = (byte) ((val >> 8) & 0xFF);",
                "+            byte b2 = (byte) ((val >> 16) & 0xFF);",
                "+",
                "+            switch (imageType)",
                "+            {",
                "+                case BufferedImage.TYPE_INT_BGR:",
                "+                {",
                "+                    targetValues[0] = b0;",
                "+                    targetValues[1] = b1;",
                "+                    targetValues[2] = b2;",
                "+                    break;",
                "+                }",
                "+                case BufferedImage.TYPE_INT_ARGB:",
                "+                {",
                "+                    targetValues[0] = b2;",
                "+                    targetValues[1] = b1;",
                "+                    targetValues[2] = b0;",
                "+                    if (alphaImageData != null)",
                "+                    {",
                "+                        byte b3 = (byte) ((val >> 24) & 0xFF);",
                "+                        alphaImageData[alphaPtr] = b3;",
                "+                    }",
                "+                    break;",
                "+                }",
                "+                case BufferedImage.TYPE_INT_RGB:",
                "+                    targetValues[0] = b2;",
                "+                    targetValues[1] = b1;",
                "+                    targetValues[2] = b0;",
                "+                    break;",
                "+            }",
                "+        }",
                "+",
                "+        private void copyImageBytes(byte[] transferRow, int indexInTranferRow, byte[] targetValues,",
                "+                byte[] alphaImageData, int alphaPtr)",
                "+        {",
                "+            System.arraycopy(transferRow, indexInTranferRow, targetValues, 0, targetValues.length);",
                "+            if (alphaImageData != null)",
                "+            {",
                "+                alphaImageData[alphaPtr] = transferRow[indexInTranferRow + targetValues.length];",
                "+            }",
                "+        }",
                "+",
                "+        private static void copyShortsToBytes(short[] transferRow, int indexInTranferRow,",
                "+                byte[] targetValues, byte[] alphaImageData, int alphaPtr)",
                "+        {",
                "+            for (int i = 0; i < targetValues.length;)",
                "+            {",
                "+                short val = transferRow[indexInTranferRow++];",
                "+                targetValues[i++] = (byte) ((val >> 8) & 0xFF);",
                "+                targetValues[i++] = (byte) (val & 0xFF);",
                "+            }",
                "+            if (alphaImageData != null)",
                "+            {",
                "+                short alpha = transferRow[indexInTranferRow];",
                "+                alphaImageData[alphaPtr] = (byte) ((alpha >> 8) & 0xFF);",
                "+                alphaImageData[alphaPtr + 1] = (byte) (alpha & 0xFF);",
                "+            }",
                "+        }",
                "+",
                "+        private PDImageXObject preparePredictorPDImage(ByteArrayOutputStream stream,",
                "+                int bitsPerComponent) throws IOException",
                "+        {",
                "+            int h = image.getHeight();",
                "+            int w = image.getWidth();",
                "+",
                "+            ColorSpace srcCspace = image.getColorModel().getColorSpace();",
                "+            PDColorSpace pdColorSpace = srcCspace.getType() != ColorSpace.TYPE_CMYK",
                "+                                        ? PDDeviceRGB.INSTANCE : PDDeviceCMYK.INSTANCE;",
                "+",
                "+            // Encode the image profile if the image has one",
                "+            if (srcCspace instanceof ICC_ColorSpace)",
                "+            {",
                "+                ICC_ColorSpace icc_colorSpace = (ICC_ColorSpace) srcCspace;",
                "+                ICC_Profile profile = icc_colorSpace.getProfile();",
                "+                // We only encode a color profile if it is not sRGB",
                "+                if (profile != ICC_Profile.getInstance(ColorSpace.CS_sRGB))",
                "+                {",
                "+                    PDICCBased pdProfile = new PDICCBased(document);",
                "+                    OutputStream outputStream = pdProfile.getPDStream()",
                "+                            .createOutputStream(COSName.FLATE_DECODE);",
                "+                    outputStream.write(profile.getData());",
                "+                    outputStream.close();",
                "+                    pdProfile.getPDStream().getCOSObject().setInt(COSName.N,",
                "+                            srcCspace.getNumComponents());",
                "+                }",
                "+            }",
                "+",
                "+            PDImageXObject imageXObject = new PDImageXObject(document,",
                "+                    new ByteArrayInputStream(stream.toByteArray()), COSName.FLATE_DECODE, w,",
                "+                    h, bitsPerComponent, pdColorSpace);",
                "+",
                "+            COSDictionary decodeParms = new COSDictionary();",
                "+            decodeParms.setItem(COSName.BITS_PER_COMPONENT, COSInteger.get(bitsPerComponent));",
                "+            decodeParms.setItem(COSName.PREDICTOR, COSInteger.get(15));",
                "+            decodeParms.setItem(COSName.COLUMNS, COSInteger.get(w));",
                "+            decodeParms.setItem(COSName.COLORS, COSInteger.get(srcCspace.getNumComponents()));",
                "+            imageXObject.getCOSObject().setItem(COSName.DECODE_PARMS, decodeParms);",
                "+",
                "+            if (image.getTransparency() != Transparency.OPAQUE)",
                "+            {",
                "+                PDImageXObject pdMask = prepareImageXObject(document, alphaImageData,",
                "+                        image.getWidth(), image.getHeight(), 8 * bytesPerComponent, PDDeviceGray.INSTANCE);",
                "+                imageXObject.getCOSObject().setItem(COSName.SMASK, pdMask);",
                "+            }",
                "+            return imageXObject;",
                "+        }",
                "+",
                "+        /**",
                "+         * We look which row encoding is the \"best\" one, ie. has the lowest sum. We don't implement",
                "+         * anything fancier to choose the right row encoding. This is just the recommend algorithm",
                "+         * in the spec. The get the perfect encoding you would need to do a brute force check how",
                "+         * all the different encoded rows compress in the zip stream together. You have would have",
                "+         * to check 5*image-height permutations...",
                "+         *",
                "+         * @return the \"best\" row encoding of the row encodings",
                "+         */",
                "+        private byte[] chooseDataRowToWrite()",
                "+        {",
                "+            byte[] rowToWrite = dataRawRowNone;",
                "+            long estCompressSum = estCompressSum(dataRawRowNone);",
                "+            long estCompressSumSub = estCompressSum(dataRawRowSub);",
                "+            long estCompressSumUp = estCompressSum(dataRawRowUp);",
                "+            long estCompressSumAvg = estCompressSum(dataRawRowAverage);",
                "+            long estCompressSumPaeth = estCompressSum(dataRawRowPaeth);",
                "+            if (estCompressSum > estCompressSumSub)",
                "+            {",
                "+                rowToWrite = dataRawRowSub;",
                "+                estCompressSum = estCompressSumSub;",
                "+            }",
                "+            if (estCompressSum > estCompressSumUp)",
                "+            {",
                "+                rowToWrite = dataRawRowUp;",
                "+                estCompressSum = estCompressSumUp;",
                "+            }",
                "+            if (estCompressSum > estCompressSumAvg)",
                "+            {",
                "+                rowToWrite = dataRawRowAverage;",
                "+                estCompressSum = estCompressSumAvg;",
                "+            }",
                "+            if (estCompressSum > estCompressSumPaeth)",
                "+            {",
                "+                rowToWrite = dataRawRowPaeth;",
                "+            }",
                "+            return rowToWrite;",
                "+        }",
                "+",
                "+        /*",
                "+         * PNG Filters, see https://www.w3.org/TR/PNG-Filters.html",
                "+         */",
                "+        private static byte pngFilterSub(int x, int a)",
                "+        {",
                "+            return (byte) ((x & 0xFF) - (a & 0xFF));",
                "+        }",
                "+",
                "+        private static byte pngFilterUp(int x, int b)",
                "+        {",
                "+            // Same as pngFilterSub, just called with the prior row",
                "+            return pngFilterSub(x, b);",
                "+        }",
                "+",
                "+        private static byte pngFilterAverage(int x, int a, int b)",
                "+        {",
                "+            return (byte) (x - ((b + a) / 2));",
                "+        }",
                "+",
                "+        private static byte pngFilterPaeth(int x, int a, int b, int c)",
                "+        {",
                "+            int p = a + b - c;",
                "+            int pa = Math.abs(p - a);",
                "+            int pb = Math.abs(p - b);",
                "+            int pc = Math.abs(p - c);",
                "+            final int Pr;",
                "+            if (pa <= pb && pa <= pc)",
                "+            {",
                "+                Pr = a;",
                "+            }",
                "+            else if (pb <= pc)",
                "+            {",
                "+                Pr = b;",
                "+            }",
                "+            else",
                "+            {",
                "+                Pr = c;",
                "+            }",
                "+",
                "+            int r = x - Pr;",
                "+            return (byte) (r);",
                "+        }",
                "+",
                "+        private static long estCompressSum(byte[] dataRawRowSub)",
                "+        {",
                "+            long sum = 0;",
                "+            for (byte aDataRawRowSub : dataRawRowSub)",
                "+            {",
                "+                sum += aDataRawRowSub & 0xFF;",
                "+            }",
                "+            return sum;",
                "+        }",
                "+    }",
                " }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4184": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "faeb110e8ded732ba776cd27bb95a7c38c0c2202"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4184",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6285b5369cfdcc4ec876a53e93b3f6d98061ebe8",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532244884,
            "hunks": 1,
            "message": "PDFBOX-4071: use current version git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1836423 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/pom.xml b/examples/pom.xml",
                "index f20dc274c..6201cf029 100644",
                "--- a/examples/pom.xml",
                "+++ b/examples/pom.xml",
                "@@ -79,3 +79,3 @@",
                "       <artifactId>ant</artifactId>",
                "-      <version>1.9.9</version>",
                "+      <version>1.10.5</version>",
                "     </dependency>"
            ],
            "changed_files": [
                "examples/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "7671e388a8f7989664f3dfceaac20d3e47455052"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9fb0e579405d5780eee4a7f31ba7c5459cc59e37",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523114251,
            "hunks": 4,
            "message": "PDFBOX-4185: support COSString, COSArray mixed options entries git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1828595 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/FieldUtils.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/FieldUtils.java",
                "index 1872e3a20..58816b3e0 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/FieldUtils.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/FieldUtils.java",
                "@@ -27,3 +27,2 @@ import org.apache.pdfbox.cos.COSBase;",
                " import org.apache.pdfbox.cos.COSString;",
                "-import org.apache.pdfbox.pdmodel.common.COSArrayList;",
                "@@ -177,34 +176,21 @@ public final class FieldUtils",
                "         {",
                "-            // test if there is a single text or a two-element array ",
                "-            COSBase entry = ((COSArray) items).get(0);",
                "-            if (entry instanceof COSString)",
                "+            List<String> entryList = new ArrayList<String>(); ",
                "+            for (COSBase entry : (COSArray) items)",
                "             {",
                "-                return COSArrayList.convertCOSStringCOSArrayToList((COSArray)items);",
                "-            } ",
                "-            else",
                "-            {",
                "-                return getItemsFromPair(items, pairIdx);",
                "-            }            ",
                "+                if (entry instanceof COSString)",
                "+                {",
                "+                    entryList.add(((COSString) entry).getString());",
                "+                }",
                "+                else if (entry instanceof COSArray)",
                "+                {",
                "+                    COSArray cosArray = (COSArray) entry;",
                "+                    if (cosArray.size() >= pairIdx +1 && cosArray.get(pairIdx) instanceof COSString)",
                "+                    {",
                "+                        entryList.add(((COSString) cosArray.get(pairIdx)).getString());",
                "+                    }",
                "+                }",
                "+            }",
                "+            return entryList;     ",
                "         }",
                "         return Collections.emptyList();",
                "-    }    ",
                "-",
                "-    /**",
                "-     * Return either one of a list of two-element arrays entries.",
                "-     *",
                "-     * @param items the array of elements or two-element arrays",
                "-     * @param pairIdx the index into the two-element array",
                "-     * @return a List of single elements",
                "-     */",
                "-    private static List<String> getItemsFromPair(COSBase items, int pairIdx)",
                "-    {",
                "-        List<String> exportValues = new ArrayList<String>();",
                "-        int numItems = ((COSArray) items).size();",
                "-        for (int i=0;i<numItems;i++)",
                "-        {",
                "-            COSArray pair = (COSArray) ((COSArray) items).get(i);",
                "-            COSString displayValue = (COSString) pair.get(pairIdx);",
                "-            exportValues.add(displayValue.getString());",
                "-        }",
                "-        return exportValues;        ",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/FieldUtils.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4185": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "42da53f5c846a9e64b2b1f91216a7b47723e4405"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4185",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d184edd2e8bb774a4e3f75ca442e29eeabbf9fa6",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527181979,
            "hunks": 1,
            "message": "PDFBOX-4230: avoid NPE, as suggested by Edi Weissmann git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832189 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java",
                "index 0a906c627..da4b3c5f2 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java",
                "@@ -47,3 +47,3 @@ public class CmapSubtable implements CmapLookup",
                "     private final Map<Integer, List<Integer>> glyphIdToCharacterCodeMultiple = new HashMap<>();",
                "-    private Map<Integer, Integer> characterCodeToGlyphId;",
                "+    private Map<Integer, Integer> characterCodeToGlyphId = new HashMap<>();"
            ],
            "changed_files": [
                "fontbox/src/main/java/org/apache/fontbox/ttf/CmapSubtable.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4230": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "72948ab4a0b57ad2a99900abaab54391cdaa6b16"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4230",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "06a515b3ab42530c2238970b56b9bcd01e368528",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526594362,
            "hunks": 3,
            "message": "PDFBOX-4204: ignore all illegal OpenAction types git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831819 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
                "index e3b1e6f84..2f841fc15 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java",
                "@@ -27,3 +27,2 @@ import org.apache.pdfbox.cos.COSArray;",
                " import org.apache.pdfbox.cos.COSBase;",
                "-import org.apache.pdfbox.cos.COSBoolean;",
                " import org.apache.pdfbox.cos.COSDictionary;",
                "@@ -254,18 +253,3 @@ public class PDDocumentCatalog implements COSObjectable",
                "         COSBase openAction = root.getDictionaryObject(COSName.OPEN_ACTION);",
                "-        if (openAction == null)",
                "-        {",
                "-            return null;",
                "-        }",
                "-        else if (openAction instanceof COSBoolean)",
                "-        {",
                "-            if (((COSBoolean) openAction).getValue() == false)",
                "-            {",
                "-                return null;",
                "-            }",
                "-            else",
                "-            {",
                "-                throw new IOException(\"Can't create OpenAction from COSBoolean\");",
                "-            }",
                "-        }",
                "-        else if (openAction instanceof COSDictionary)",
                "+        if (openAction instanceof COSDictionary)",
                "         {",
                "@@ -279,3 +263,3 @@ public class PDDocumentCatalog implements COSObjectable",
                "         {",
                "-            throw new IOException(\"Unknown OpenAction \" + openAction);",
                "+            return null;",
                "         }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocumentCatalog.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4204": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "59d19e8d97b8a84dfa6c06723fdc89814be99fb2"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4204",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4dad057da959ff794c4f89111336c7f2b519c2e7",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524334371,
            "hunks": 1,
            "message": "PDFBOX-4071: use KCMS when available git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1829737 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/preflight/src/main/java/org/apache/pdfbox/preflight/Validator_A1b.java b/preflight/src/main/java/org/apache/pdfbox/preflight/Validator_A1b.java",
                "index 29ea7159c..946ecd7ea 100644",
                "--- a/preflight/src/main/java/org/apache/pdfbox/preflight/Validator_A1b.java",
                "+++ b/preflight/src/main/java/org/apache/pdfbox/preflight/Validator_A1b.java",
                "@@ -70,2 +70,13 @@ public class Validator_A1b",
                "+        try",
                "+        {",
                "+            // force KCMS (faster than LCMS) if available",
                "+            Class.forName(\"sun.java2d.cmm.kcms.KcmsServiceProvider\");",
                "+            System.setProperty(\"sun.java2d.cmm\", \"sun.java2d.cmm.kcms.KcmsServiceProvider\");",
                "+        }",
                "+        catch (ClassNotFoundException e)",
                "+        {",
                "+            // ignore",
                "+        }",
                "+",
                "         // is output xml ?"
            ],
            "changed_files": [
                "preflight/src/main/java/org/apache/pdfbox/preflight/Validator_A1b.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "db088fa2a060b6cc900204488f27ea184e24d3e2"
                ]
            ],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "40b34e561c78b3b1dea86062376b69d0754fc14b",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529424072,
            "hunks": 1,
            "message": "PDFBOX-4242: fulfill the close() contract, as suggested by Emmeran Seehuber git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833857 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/RAFDataStream.java b/fontbox/src/main/java/org/apache/fontbox/ttf/RAFDataStream.java",
                "index 7a199d9b1..0e54827cc 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/RAFDataStream.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/RAFDataStream.java",
                "@@ -98,4 +98,7 @@ class RAFDataStream extends TTFDataStream",
                "     {",
                "-        raf.close();",
                "-        raf = null;",
                "+        if (raf != null)",
                "+        {",
                "+            raf.close();",
                "+            raf = null;",
                "+        }",
                "     }"
            ],
            "changed_files": [
                "fontbox/src/main/java/org/apache/fontbox/ttf/RAFDataStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4242": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "8db47637a885e9538bdf7a94b4686b0146ac0c20"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4242",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d06b05943f91cd56aa3e62641791dc5e1dda4ed9",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532246612,
            "hunks": 1,
            "message": "PDFBOX-4184: compare sizes of different strategies for small non 16 bit images git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1836425 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "index a90175811..3b81dbe43 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "@@ -85,2 +85,18 @@ public final class LosslessFactory",
                "                 {",
                "+                    if (pdImageXObject.getBitsPerComponent() < 16 &&",
                "+                        image.getWidth() * image.getHeight() <= 50 * 50)",
                "+                    {",
                "+                        // also create classic compressed image, compare sizes",
                "+                        PDImageXObject pdImageXObjectClassic = createFromRGBImage(image, document);",
                "+                        if (pdImageXObjectClassic.getCOSObject().getLength() < ",
                "+                            pdImageXObject.getCOSObject().getLength())",
                "+                        {",
                "+                            pdImageXObject.getCOSObject().close();",
                "+                            return pdImageXObjectClassic;",
                "+                        }",
                "+                        else",
                "+                        {",
                "+                            pdImageXObjectClassic.getCOSObject().close();",
                "+                        }",
                "+                    }",
                "                     return pdImageXObject;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4184": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "c8204dea26835ab4476c9f12513eccb759d071ea"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4184",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5bd0880f4bd783d56ee132cd964f87f97ac1df84",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531330799,
            "hunks": 2,
            "message": "PDFBOX-4071: update apache parent number git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835650 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 9a1c4816d..86b47b965 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -25,3 +25,3 @@",
                "         <artifactId>apache</artifactId>",
                "-        <version>19</version>",
                "+        <version>20</version>",
                "         <relativePath />",
                "@@ -51,7 +51,2 @@",
                "-        <!-- for jdk10. Can be removed when Apache parent pom has been updated",
                "-        See https://maven.apache.org/pom/asf/ , ",
                "-        https://issues.apache.org/jira/browse/MPOM-185",
                "-        current version is 19. -->",
                "-        <surefire.version>2.21.0</surefire.version>",
                "         <bouncycastle.version>1.60</bouncycastle.version>"
            ],
            "changed_files": [
                "parent/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "b970999bdf4e8129bfad4c33f0d6c77312d24be9"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "05a82f7c1fa951344576921fd25fb52ae25c9c0f",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526745806,
            "hunks": 10,
            "message": "PDFBOX-3353: simplify code git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831906 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "index 340de6643..7bff8b71b 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "@@ -256,3 +256,4 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 boolean hasBackground = cs.setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "-                switch (annotation.getStartPointEndingStyle())",
                "+                String startPointEndingStyle = annotation.getStartPointEndingStyle();",
                "+                switch (startPointEndingStyle)",
                "                 {",
                "@@ -261,3 +262,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                         drawArrow(cs, ab.width, y, ab.width * 9);",
                "-                        if (PDAnnotationLine.LE_CLOSED_ARROW.equals(annotation.getStartPointEndingStyle()))",
                "+                        if (PDAnnotationLine.LE_CLOSED_ARROW.equals(startPointEndingStyle))",
                "                         {",
                "@@ -282,3 +283,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                         drawArrow(cs, -ab.width, y, -ab.width * 9);",
                "-                        if (PDAnnotationLine.LE_R_CLOSED_ARROW.equals(annotation.getStartPointEndingStyle()))",
                "+                        if (PDAnnotationLine.LE_R_CLOSED_ARROW.equals(startPointEndingStyle))",
                "                         {",
                "@@ -297,3 +298,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 }",
                "-                if (INTERIOR_COLOR_STYLES.contains(annotation.getStartPointEndingStyle()))",
                "+                if (INTERIOR_COLOR_STYLES.contains(startPointEndingStyle))",
                "                 {",
                "@@ -301,3 +302,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 }",
                "-                else if (!PDAnnotationLine.LE_NONE.equals(annotation.getStartPointEndingStyle()))",
                "+                else if (!PDAnnotationLine.LE_NONE.equals(startPointEndingStyle))",
                "                 {",
                "@@ -307,3 +308,4 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "-                switch (annotation.getEndPointEndingStyle())",
                "+                String endPointEndingStyle = annotation.getEndPointEndingStyle();",
                "+                switch (endPointEndingStyle)",
                "                 {",
                "@@ -312,3 +314,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                         drawArrow(cs, lineLength - ab.width, y, -ab.width * 9);",
                "-                        if (PDAnnotationLine.LE_CLOSED_ARROW.equals(annotation.getEndPointEndingStyle()))",
                "+                        if (PDAnnotationLine.LE_CLOSED_ARROW.equals(endPointEndingStyle))",
                "                         {",
                "@@ -333,3 +335,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                         drawArrow(cs, lineLength + ab.width, y, ab.width * 9);",
                "-                        if (PDAnnotationLine.LE_R_CLOSED_ARROW.equals(annotation.getEndPointEndingStyle()))",
                "+                        if (PDAnnotationLine.LE_R_CLOSED_ARROW.equals(endPointEndingStyle))",
                "                         {",
                "@@ -348,3 +350,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 }",
                "-                if (INTERIOR_COLOR_STYLES.contains(annotation.getEndPointEndingStyle()))",
                "+                if (INTERIOR_COLOR_STYLES.contains(endPointEndingStyle))",
                "                 {",
                "@@ -352,3 +354,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 }",
                "-                else if (!PDAnnotationLine.LE_NONE.equals(annotation.getEndPointEndingStyle()))",
                "+                else if (!PDAnnotationLine.LE_NONE.equals(endPointEndingStyle))",
                "                 {"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d0d84f7a226ba7deefd6171aab6059986ec242b8"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bfede6dd7e05614a83ab1595b35511babbbd7b23",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531643421,
            "hunks": 1,
            "message": "PDFBOX-4071: use correct type cast git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835950 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSDictionaryMap.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSDictionaryMap.java",
                "index 7bc457830..bb149ce9a 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSDictionaryMap.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSDictionaryMap.java",
                "@@ -178,3 +178,3 @@ public class COSDictionaryMap<K,V> implements Map<K,V>",
                "         {",
                "-            COSDictionaryMap<K,V> other = (COSDictionaryMap)o;",
                "+            COSDictionaryMap<K, V> other = (COSDictionaryMap<K, V>) o;",
                "             retval = other.map.equals( this.map );"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSDictionaryMap.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "6435f5e24458f174924f75f70e77e710749dd5b0"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4cf00eb5406739565561ccf28aa74b521f7ca19a",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530513744,
            "hunks": 17,
            "message": "PDFBOX-4184: sonar fix; remove println from test git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1834822 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "index 457d9825b..926fc578f 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "@@ -310,5 +310,6 @@ public final class LosslessFactory",
                "-            // This variable store a row of the image each, the exact type depends",
                "+            // These variables store a row of the image each, the exact type depends",
                "             // on the image encoding. Can be a int[], short[] or byte[]",
                "-            Object prevRow, transferRow;",
                "+            Object prevRow;",
                "+            Object transferRow;",
                "@@ -458,8 +459,6 @@ public final class LosslessFactory",
                "-                {",
                "-                    // We swap prev and transfer row, so that we have the prev row for the next row.",
                "-                    Object temp = prevRow;",
                "-                    prevRow = transferRow;",
                "-                    transferRow = temp;",
                "-                }",
                "+                // We swap prev and transfer row, so that we have the prev row for the next row.",
                "+                Object temp = prevRow;",
                "+                prevRow = transferRow;",
                "+                transferRow = temp;",
                "             }",
                "@@ -475,3 +474,3 @@ public final class LosslessFactory",
                "             int val = transferRow[indexInTranferRow];",
                "-            byte b0 = (byte) ((val & 0xFF));",
                "+            byte b0 = (byte) (val & 0xFF);",
                "             byte b1 = (byte) ((val >> 8) & 0xFF);",
                "@@ -482,3 +481,2 @@ public final class LosslessFactory",
                "                 case BufferedImage.TYPE_INT_BGR:",
                "-                {",
                "                     targetValues[0] = b0;",
                "@@ -487,5 +485,3 @@ public final class LosslessFactory",
                "                     break;",
                "-                }",
                "                 case BufferedImage.TYPE_INT_ARGB:",
                "-                {",
                "                     targetValues[0] = b2;",
                "@@ -499,3 +495,2 @@ public final class LosslessFactory",
                "                     break;",
                "-                }",
                "                 case BufferedImage.TYPE_INT_RGB:",
                "@@ -521,7 +516,8 @@ public final class LosslessFactory",
                "         {",
                "-            for (int i = 0; i < targetValues.length;)",
                "+            int itr = indexInTranferRow;",
                "+            for (int i = 0; i < targetValues.length; i += 2)",
                "             {",
                "-                short val = transferRow[indexInTranferRow++];",
                "-                targetValues[i++] = (byte) ((val >> 8) & 0xFF);",
                "-                targetValues[i++] = (byte) (val & 0xFF);",
                "+                short val = transferRow[itr++];",
                "+                targetValues[i] = (byte) ((val >> 8) & 0xFF);",
                "+                targetValues[i + 1] = (byte) (val & 0xFF);",
                "             }",
                "@@ -529,3 +525,3 @@ public final class LosslessFactory",
                "             {",
                "-                short alpha = transferRow[indexInTranferRow];",
                "+                short alpha = transferRow[itr];",
                "                 alphaImageData[alphaPtr] = (byte) ((alpha >> 8) & 0xFF);",
                "@@ -548,4 +544,3 @@ public final class LosslessFactory",
                "             {",
                "-                ICC_ColorSpace icc_colorSpace = (ICC_ColorSpace) srcCspace;",
                "-                ICC_Profile profile = icc_colorSpace.getProfile();",
                "+                ICC_Profile profile = ((ICC_ColorSpace) srcCspace).getProfile();",
                "                 // We only encode a color profile if it is not sRGB",
                "@@ -647,6 +642,6 @@ public final class LosslessFactory",
                "             int pc = Math.abs(p - c);",
                "-            final int Pr;",
                "+            final int pr;",
                "             if (pa <= pb && pa <= pc)",
                "             {",
                "-                Pr = a;",
                "+                pr = a;",
                "             }",
                "@@ -654,3 +649,3 @@ public final class LosslessFactory",
                "             {",
                "-                Pr = b;",
                "+                pr = b;",
                "             }",
                "@@ -658,6 +653,6 @@ public final class LosslessFactory",
                "             {",
                "-                Pr = c;",
                "+                pr = c;",
                "             }",
                "-            int r = x - Pr;",
                "+            int r = x - pr;",
                "             return (byte) (r);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4184": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "9fbeca0253b32ca8194ed5b5f58cdb6b54429544"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4184",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "48baf0dd4571268c69253133aa5e45ce2b55be5e",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531332197,
            "hunks": 4,
            "message": "PDFBOX-4071: add cast / type git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835657 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java b/examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java",
                "index 2c6bde09b..e9abf76af 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java",
                "@@ -61,2 +61,3 @@ import org.bouncycastle.tsp.TSPException;",
                " import org.bouncycastle.tsp.TimeStampToken;",
                "+import org.bouncycastle.util.Selector;",
                " import org.bouncycastle.util.Store;",
                "@@ -259,3 +260,4 @@ public final class ShowSignature",
                "         SignerInformation signerInformation = signers.iterator().next();",
                "-        Collection<X509CertificateHolder> matches = certificatesStore.getMatches(signerInformation.getSID());",
                "+        Collection<X509CertificateHolder> matches =",
                "+                certificatesStore.getMatches((Selector<X509CertificateHolder>) signerInformation.getSID());",
                "         X509CertificateHolder certificateHolder = matches.iterator().next();",
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationCollector.java b/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationCollector.java",
                "index 9cf8c06c2..57beb6b3f 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationCollector.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationCollector.java",
                "@@ -52,2 +52,3 @@ import org.bouncycastle.tsp.TSPException;",
                " import org.bouncycastle.tsp.TimeStampToken;",
                "+import org.bouncycastle.util.Selector;",
                " import org.bouncycastle.util.Store;",
                "@@ -232,3 +233,3 @@ public class CertInformationCollector",
                "         Collection<X509CertificateHolder> matches = certificatesStore",
                "-                .getMatches(signerInformation.getSID());",
                "+                .getMatches((Selector<X509CertificateHolder>) signerInformation.getSID());"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/signature/ShowSignature.java",
                "examples/src/main/java/org/apache/pdfbox/examples/signature/validation/CertInformationCollector.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "70ddc21473c07f041579dcf02c94ac8f6cdbd6e6"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "16b31cd9b3a670636b1f0ca808ab0bbf6323c760",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525938700,
            "hunks": 1,
            "message": "PDFBOX-4218: respect the interpolation setting when scaling masked image git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831313 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java",
                "index d26365e4f..8eb76de28 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java",
                "@@ -539,6 +539,9 @@ public final class PDImageXObject extends PDXObject implements PDImage",
                "         Graphics2D g = image2.createGraphics();",
                "-        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,",
                "-                           RenderingHints.VALUE_INTERPOLATION_BICUBIC);",
                "-        g.setRenderingHint(RenderingHints.KEY_RENDERING,",
                "-                           RenderingHints.VALUE_RENDER_QUALITY);",
                "+        if (getInterpolate())",
                "+        {",
                "+            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,",
                "+                    RenderingHints.VALUE_INTERPOLATION_BICUBIC);",
                "+            g.setRenderingHint(RenderingHints.KEY_RENDERING,",
                "+                    RenderingHints.VALUE_RENDER_QUALITY);",
                "+        }",
                "         g.drawImage(image, 0, 0, width, height, 0, 0, image.getWidth(), image.getHeight(), null);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDImageXObject.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4218": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "2331d0b2bfeb24aa187cd1c005528ae5eeef961e"
                ]
            ],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                },
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4218",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "97570b0ac9a3d03f6354ba487405c610f4b244a4",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525958777,
            "hunks": 1,
            "message": "PDFBOX-4071: remove commented out line git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831340 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "index e46ee907e..51aaca1b4 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "@@ -243,4 +243,2 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     {",
                "-                        //prepareResources(cs);",
                "-",
                "                         cs.beginText();"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2c36d4fc667c75c06b136a97cb5c55bdeb7eb2ca",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531499355,
            "hunks": 1,
            "message": "PDFBOX-4071, PDFBOX-4266: revert 1835649 with comment due to failure to build on jdk6 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1835848 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 85737d43b..584864b57 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -25,3 +25,7 @@",
                "         <artifactId>apache</artifactId>",
                "-        <version>20</version>",
                "+",
                "+        <!-- don't increase number without investigation of the diffs",
                "+             https://maven.apache.org/pom/asf/ due to failure to build on jdk6 -->",
                "+        <version>19</version>",
                "+",
                "         <relativePath />"
            ],
            "changed_files": [
                "parent/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": "",
                "PDFBOX-4266": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071, PDFBOX-4266",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4beb923433249dbd70e6823f9483edfbd9a18559",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528552750,
            "hunks": 4,
            "message": "PDFBOX-4071: move according to java coding convention git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1833238 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "index 0ff1d214d..4b7fbe837 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "@@ -32,35 +32,2 @@ public abstract class BlendMode",
                " {",
                "-    /**",
                "-     * Determines the blend mode from the BM entry in the COS ExtGState.",
                "-     *",
                "-     * @param cosBlendMode name or array",
                "-     * @return blending mode",
                "-     */",
                "-    public static BlendMode getInstance(COSBase cosBlendMode)",
                "-    {",
                "-        BlendMode result = null;",
                "-        if (cosBlendMode instanceof COSName)",
                "-        {",
                "-            result = BLEND_MODES.get(cosBlendMode);",
                "-        }",
                "-        else if (cosBlendMode instanceof COSArray)",
                "-        {",
                "-            COSArray cosBlendModeArray = (COSArray) cosBlendMode;",
                "-            for (int i = 0; i < cosBlendModeArray.size(); i++)",
                "-            {",
                "-                result = BLEND_MODES.get(cosBlendModeArray.getObject(i));",
                "-                if (result != null)",
                "-                {",
                "-                    break;",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        if (result != null)",
                "-        {",
                "-            return result;",
                "-        }",
                "-        return BlendMode.NORMAL;",
                "-    }",
                "-",
                "     public static final SeparableBlendMode NORMAL = new SeparableBlendMode()",
                "@@ -242,2 +209,5 @@ public abstract class BlendMode",
                "+    // these maps *must* come after the BlendMode.* constant declarations, otherwise their values would be null",
                "+    private static final Map<COSName, BlendMode> BLEND_MODES = createBlendModeMap();",
                "+",
                "     BlendMode()",
                "@@ -246,2 +216,35 @@ public abstract class BlendMode",
                "+     /**",
                "+     * Determines the blend mode from the BM entry in the COS ExtGState.",
                "+     *",
                "+     * @param cosBlendMode name or array",
                "+     * @return blending mode",
                "+     */",
                "+    public static BlendMode getInstance(COSBase cosBlendMode)",
                "+    {",
                "+        BlendMode result = null;",
                "+        if (cosBlendMode instanceof COSName)",
                "+        {",
                "+            result = BLEND_MODES.get(cosBlendMode);",
                "+        }",
                "+        else if (cosBlendMode instanceof COSArray)",
                "+        {",
                "+            COSArray cosBlendModeArray = (COSArray) cosBlendMode;",
                "+            for (int i = 0; i < cosBlendModeArray.size(); i++)",
                "+            {",
                "+                result = BLEND_MODES.get(cosBlendModeArray.getObject(i));",
                "+                if (result != null)",
                "+                {",
                "+                    break;",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        if (result != null)",
                "+        {",
                "+            return result;",
                "+        }",
                "+        return BlendMode.NORMAL;",
                "+    }",
                "+",
                "     private static int get255Value(float val)",
                "@@ -371,5 +374,2 @@ public abstract class BlendMode",
                "-    // these maps *must* come after the BlendMode.* constant declarations, otherwise their values would be null",
                "-    private static final Map<COSName, BlendMode> BLEND_MODES = createBlendModeMap();",
                "-",
                "     private static Map<COSName, BlendMode> createBlendModeMap()"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "00f7a9acb9c28aafbc68d05e610ac64233ef50d8",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530032450,
            "hunks": 0,
            "message": "readded accidentically deleted tags git-svn-id: https://svn.apache.org/repos/asf/pdfbox/tags/1.2.1@1834451 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a8c51acf4ca61b58473f4cad1b5b15426d97daf1"
                ],
                [
                    "no-tag",
                    "556ae1aaec681dd883c09079af304d7e30db1f97"
                ],
                [
                    "no-tag",
                    "618f05e1f4650b4a856cb2341b3c8dc99c363eb9"
                ],
                [
                    "no-tag",
                    "2d374c65b206469c725b790a9783d389e57d2b7e"
                ],
                [
                    "no-tag",
                    "df408e9a28d668ea3cbb9f9656cdfc541c437bb4"
                ],
                [
                    "no-tag",
                    "313e29d56baa1d074519629c9bbcab98bece2fd6"
                ],
                [
                    "no-tag",
                    "52e12df5c51b0eef320ff731028facf531cf52d2"
                ],
                [
                    "no-tag",
                    "402d15ba73a4b394efebe3b8703893e0c2f5b409"
                ],
                [
                    "no-tag",
                    "ba299e77314967a5e5c806bac6b918d95c2147f0"
                ],
                [
                    "no-tag",
                    "6e177c78b9557ce15f22cc7ba48906c86d30b2e4"
                ],
                [
                    "no-tag",
                    "a6cb7b07997b0e324708cb73d1b224f8ebe60c0b"
                ],
                [
                    "no-tag",
                    "1400def5c88140cc9be1245b9b4774a9d558d73c"
                ],
                [
                    "no-tag",
                    "da541a2ea6c839cddd3ed43ae29110adc60d19d0"
                ],
                [
                    "no-tag",
                    "1d6c1941f5c2e4097f63b37bcfd906ced5509d12"
                ],
                [
                    "no-tag",
                    "f98cccc1322157ba704de80aa794290df43abf49"
                ],
                [
                    "no-tag",
                    "ac9c5c440af820b372f56f53835316ec2b943963"
                ],
                [
                    "no-tag",
                    "48ba8b28ba8b7743c8608b368b521c1f97abc118"
                ],
                [
                    "no-tag",
                    "2b8d37ebb43750a82575f0fb3f137739db2ade73"
                ],
                [
                    "no-tag",
                    "98aa3f2e33aae00b15c6ca6ab56382960cf05a79"
                ],
                [
                    "no-tag",
                    "2f97caed0dd80b670e6741cec23b903f9ad2223e"
                ],
                [
                    "no-tag",
                    "a34bb3e5a9ddb35f2cf9003065dbeb38cec7fe85"
                ],
                [
                    "no-tag",
                    "bc2f3322eaf7ea462f8678939ee60e31c656161e"
                ],
                [
                    "no-tag",
                    "10252a40fd96a41087e4095f15f2de1bcd81da26"
                ],
                [
                    "no-tag",
                    "8890ccbf0b3a233578b952748ce090f54c53fea7"
                ],
                [
                    "no-tag",
                    "be4df58d7197e386fe2ac74c96bcf6a75dbcae03"
                ],
                [
                    "no-tag",
                    "4983455ee89c1378aa83ff5b49057960f965f5b8"
                ],
                [
                    "no-tag",
                    "cc7eeb2147fa787468542bc8a577fe35c19c0473"
                ],
                [
                    "no-tag",
                    "2a29f8e55653f54dc46ea9eddacbb5a52f523964"
                ],
                [
                    "no-tag",
                    "c7ff0971ae53162d39b85f1ef8d35b3c31a056bb"
                ],
                [
                    "no-tag",
                    "58c362bee6662e251bde0da9b8a33e8f247ba0f4"
                ],
                [
                    "no-tag",
                    "6d478f0e228563ad5a713b035767a59e0e8f85ff"
                ],
                [
                    "no-tag",
                    "9b2e8e73b853d38490de98041627a3f9b075eb96"
                ],
                [
                    "no-tag",
                    "dd6292ed5dbe50457885a0fbf657777f9ca5ec88"
                ],
                [
                    "no-tag",
                    "7a997954b5f67d30aa00371bc6465d33744fa3eb"
                ],
                [
                    "no-tag",
                    "0d5e1235f7eaf70afa55eda1cec6a9db381c94ea"
                ],
                [
                    "no-tag",
                    "0cedd70a1bfc07e0e2bfbcdccf53f01cef27b0de"
                ],
                [
                    "no-tag",
                    "62e41dde57c9caf5598ba365a2816080383757ce"
                ],
                [
                    "no-tag",
                    "32e458545c32312ee4d73912de159694a012e933"
                ]
            ],
            "tags": [
                "1.2.1"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3ff19bad2c8422f206014e9263f88e0d3136a125",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530726194,
            "hunks": 2,
            "message": "PDFBOX-3353: add a //TODO git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835074 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "index 0e0985250..ca1a87077 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java",
                "@@ -114,2 +114,4 @@ public final class PDAppearanceContentStream extends PDAbstractContentStream imp",
                "         }",
                "+        //TODO shouldn't we set the stack?",
                "+        //Or call the appropriate setStrokingColor() method from the base class?",
                "     }",
                "@@ -171,2 +173,4 @@ public final class PDAppearanceContentStream extends PDAbstractContentStream imp",
                "         }",
                "+        //TODO shouldn't we set the stack?",
                "+        //Or call the appropriate setNonStrokingColor() method from the base class?",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDAppearanceContentStream.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "03938d041c6c6997baf26db65d7bfec5cc2322f4",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529950973,
            "hunks": 16,
            "message": "[maven-release-plugin] prepare for next development iteration git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1834359 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/app/pom.xml b/app/pom.xml",
                "index be401960c..8aaf3a7ac 100644",
                "--- a/app/pom.xml",
                "+++ b/app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11</version>",
                "+    <version>2.0.12-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/debugger-app/pom.xml b/debugger-app/pom.xml",
                "index fb0ad541f..387223ebd 100644",
                "--- a/debugger-app/pom.xml",
                "+++ b/debugger-app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11</version>",
                "+    <version>2.0.12-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/debugger/pom.xml b/debugger/pom.xml",
                "index 626d3c719..838ef1541 100644",
                "--- a/debugger/pom.xml",
                "+++ b/debugger/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11</version>",
                "+    <version>2.0.12-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/examples/pom.xml b/examples/pom.xml",
                "index aac6580d2..b0e5ea08d 100644",
                "--- a/examples/pom.xml",
                "+++ b/examples/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11</version>",
                "+    <version>2.0.12-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/fontbox/pom.xml b/fontbox/pom.xml",
                "index 027b01f9f..3da486720 100644",
                "--- a/fontbox/pom.xml",
                "+++ b/fontbox/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11</version>",
                "+    <version>2.0.12-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 745f2286b..c6e94597b 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -31,3 +31,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11</version>",
                "+    <version>2.0.12-SNAPSHOT</version>",
                "     <packaging>pom</packaging>",
                "@@ -429,5 +429,5 @@",
                "   <scm>",
                "-    <connection>scm:svn:http://svn.apache.org/repos/asf/maven/pom/tags/2.0.11/pdfbox-parent</connection>",
                "-    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/maven/pom/tags/2.0.11/pdfbox-parent</developerConnection>",
                "-    <url>http://svn.apache.org/viewvc/maven/pom/tags/2.0.11/pdfbox-parent</url>",
                "+    <connection>scm:svn:http://svn.apache.org/repos/asf/maven/pom/branches/2.0/pdfbox-parent</connection>",
                "+    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/maven/pom/branches/2.0/pdfbox-parent</developerConnection>",
                "+    <url>http://svn.apache.org/viewvc/maven/pom/branches/2.0/pdfbox-parent</url>",
                "   </scm>",
                "diff --git a/pdfbox/pom.xml b/pdfbox/pom.xml",
                "index 5788f62ea..2a7b9ea45 100644",
                "--- a/pdfbox/pom.xml",
                "+++ b/pdfbox/pom.xml",
                "@@ -25,3 +25,3 @@",
                "         <artifactId>pdfbox-parent</artifactId>",
                "-        <version>2.0.11</version>",
                "+        <version>2.0.12-SNAPSHOT</version>",
                "         <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index bb5300b5d..9e3654654 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11</version>",
                "+    <version>2.0.12-SNAPSHOT</version>",
                "     <relativePath>parent/pom.xml</relativePath>",
                "@@ -36,8 +36,8 @@",
                "     <connection>",
                "-      scm:svn:http://svn.apache.org/repos/asf/pdfbox/tags/2.0.11",
                "+      scm:svn:http://svn.apache.org/repos/asf/pdfbox/branches/2.0",
                "     </connection>",
                "     <developerConnection>",
                "-      scm:svn:https://svn.apache.org/repos/asf/pdfbox/tags/2.0.11",
                "+      scm:svn:https://svn.apache.org/repos/asf/pdfbox/branches/2.0",
                "     </developerConnection>",
                "-    <url>http://svn.apache.org/viewvc/pdfbox/tags/2.0.11</url>",
                "+    <url>http://svn.apache.org/viewvc/pdfbox/branches/2.0</url>",
                "   </scm>",
                "diff --git a/preflight-app/pom.xml b/preflight-app/pom.xml",
                "index a8733a59b..3d21e4e67 100644",
                "--- a/preflight-app/pom.xml",
                "+++ b/preflight-app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11</version>",
                "+    <version>2.0.12-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/preflight/pom.xml b/preflight/pom.xml",
                "index f7eb5a9af..c8f3d5402 100644",
                "--- a/preflight/pom.xml",
                "+++ b/preflight/pom.xml",
                "@@ -28,3 +28,3 @@",
                " \t\t<artifactId>pdfbox-parent</artifactId>",
                "-\t\t<version>2.0.11</version>",
                "+\t\t<version>2.0.12-SNAPSHOT</version>",
                " \t\t<relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/tools/pom.xml b/tools/pom.xml",
                "index 821dff855..b88d6c45a 100644",
                "--- a/tools/pom.xml",
                "+++ b/tools/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11</version>",
                "+    <version>2.0.12-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/xmpbox/pom.xml b/xmpbox/pom.xml",
                "index 5f8b41f63..88f1ebf75 100644",
                "--- a/xmpbox/pom.xml",
                "+++ b/xmpbox/pom.xml",
                "@@ -29,3 +29,3 @@",
                " \t\t<artifactId>pdfbox-parent</artifactId>",
                "-\t\t<version>2.0.11</version>",
                "+\t\t<version>2.0.12-SNAPSHOT</version>",
                " \t\t<relativePath>../parent/pom.xml</relativePath>"
            ],
            "changed_files": [
                "app/pom.xml",
                "debugger-app/pom.xml",
                "debugger/pom.xml",
                "examples/pom.xml",
                "fontbox/pom.xml",
                "parent/pom.xml",
                "pdfbox/pom.xml",
                "pom.xml",
                "preflight-app/pom.xml",
                "preflight/pom.xml",
                "tools/pom.xml",
                "xmpbox/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "72ebf37cce470d9b62fdab083a57c5c8dbcf1179"
                ],
                [
                    "no-tag",
                    "3bcd28abd082a19f4a0fca62c513cae791e8fe0c"
                ],
                [
                    "no-tag",
                    "91ed49cd0fa199e655d68b8b1e6727f636117322"
                ],
                [
                    "no-tag",
                    "0cc393ca3393c674cbf4fd3813c68b654404d426"
                ]
            ],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9a882e931950fa9552009cba50fdd30190421518",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528885104,
            "hunks": 1,
            "message": "PDFBOX-2602: correct password option as suggested by Michael Klink git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833453 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/tools/src/main/java/org/apache/pdfbox/tools/Decrypt.java b/tools/src/main/java/org/apache/pdfbox/tools/Decrypt.java",
                "index e1e6a9288..600ace61d 100644",
                "--- a/tools/src/main/java/org/apache/pdfbox/tools/Decrypt.java",
                "+++ b/tools/src/main/java/org/apache/pdfbox/tools/Decrypt.java",
                "@@ -80,3 +80,3 @@ public final class Decrypt",
                "         this.alias = commandLine.getOptionValue(ALIAS);",
                "-        this.password = commandLine.getOptionValue(ALIAS, \"\");",
                "+        this.password = commandLine.getOptionValue(PASSWORD, \"\");",
                "         this.keyStore = commandLine.getOptionValue(KEYSTORE);"
            ],
            "changed_files": [
                "tools/src/main/java/org/apache/pdfbox/tools/Decrypt.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-2602": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-2602",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ec491e841642225089afb694d906104d1fe1e91a",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529692801,
            "hunks": 4,
            "message": "PDFBOX-3353: support /CrossHairs git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834152 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index 5424c61b5..a510d19b1 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -59,2 +59,3 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         SUPPORTED_NAMES.add(PDAnnotationText.NAME_RIGHT_POINTER);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_CROSS_HAIRS);",
                "     }",
                "@@ -138,2 +139,5 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     break;",
                "+                case PDAnnotationText.NAME_CROSS_HAIRS:",
                "+                    drawCrossHairs(annotation, contentStream);",
                "+                    break;",
                "                 default:",
                "@@ -283,2 +287,5 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         contentStream.closeAndFillAndStroke();",
                "+        ",
                "+        // alternatively, this could also be drawn with Zapf Dingbats \"a21\"",
                "+        // see DrawStar()",
                "     }",
                "@@ -463,2 +470,24 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "+    private void drawCrossHairs(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "+            throws IOException",
                "+    {",
                "+        PDRectangle bbox = adjustRectAndBBox(annotation, 20, 20);",
                "+",
                "+        float min = Math.min(bbox.getWidth(), bbox.getHeight());",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(0);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(0.61f); // value from Adobe",
                "+",
                "+        contentStream.transform(Matrix.getScaleInstance(0.001f * min / 1.5f, 0.001f * min / 1.5f));",
                "+        contentStream.transform(Matrix.getTranslateInstance(0, 50));",
                "+",
                "+        // we get the shape of a Zapf Dingbats right pointer (0x27A4) and use that one.",
                "+        // Adobe uses a different font (which one?), or created the shape from scratch.",
                "+        GeneralPath path = PDType1Font.SYMBOL.getPath(\"circleplus\");",
                "+        addPath(contentStream, path);",
                "+        contentStream.fillAndStroke();",
                "+    }",
                "+",
                "     private void drawRightArrow(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cae649aa1663f68e059881a80a03f5c29e7f205f",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526732793,
            "hunks": 2,
            "message": "PDFBOX-3353: move comment to correct class git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831885 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "index bd6eec8d1..87fe22d72 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "@@ -159,15 +159,2 @@ public class PDPolygonAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 }",
                "-",
                "-                //TODO line endings (LE) are missing",
                "-                // How it could be done by reusing some of the code from ",
                "-                // the Line and StrikeOut handlers",
                "-                // 1) if the LE is contained in SHORT_STYLES, ",
                "-                // shorten the first + last arms with \"this weird old trick\"",
                "-                // used in the StrikeOut handler",
                "-                // and paint",
                "-                // 2) do a transform so that first and last arms are imagined flat",
                "-                // (like in Line handler)",
                "-                // 3) refactor + reuse the line handler code that draws the ending shapes",
                "-                // the alternative would be to apply the transform to the LE shapes directly,",
                "-                // which would be more work and produce code difficult to understand",
                "                 contentStream.drawShape(lineWidth, hasStroke, hasBackground);",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "index edaa06b0a..160f39289 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "@@ -118,2 +118,14 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 }",
                "+                //TODO line endings (LE) are missing",
                "+                // How it could be done by reusing some of the code from ",
                "+                // the Line and StrikeOut handlers",
                "+                // 1) if the LE is contained in SHORT_STYLES, ",
                "+                // shorten the first + last arms with \"this weird old trick\"",
                "+                // used in the StrikeOut handler",
                "+                // and paint",
                "+                // 2) do a transform so that first and last arms are imagined flat",
                "+                // (like in Line handler)",
                "+                // 3) refactor + reuse the line handler code that draws the ending shapes",
                "+                // the alternative would be to apply the transform to the LE shapes directly,",
                "+                // which would be more work and produce code difficult to understand",
                "                 cs.stroke();"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "9104a894337130031436ede5a0e4ca237a8c079a",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1522993912,
            "hunks": 1,
            "message": "PDFBOX-4172: add source code comment for default setting; closes #45 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1828491 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "index 6756eaa08..9735402c4 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "@@ -713,2 +713,4 @@ public final class PDAcroForm implements COSObjectable",
                "     {",
                "+        // a field without specific settings typically needs to be translated",
                "+        // to the correct position",
                "         boolean needsTranslation = true;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4172": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4172",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "82f357af52829105e16ff1131bbe967d9f026aa0",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526743526,
            "hunks": 1,
            "message": "PDFBOX-3353: update //TODO comment because a part was done in previous commit git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831902 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "index fe8ab0b7e..7be318260 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "@@ -151,11 +151,6 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 //TODO line endings (LE) are missing",
                "-                // How it could be done by reusing some of the code from ",
                "-                // the Line and StrikeOut handlers",
                "-                // 1) if the LE is contained in SHORT_STYLES, ",
                "-                // shorten the first + last arms with \"this weird old trick\"",
                "-                // used in the StrikeOut handler",
                "-                // and paint",
                "-                // 2) do a transform so that first and last arms are imagined flat",
                "-                // (like in Line handler)",
                "-                // 3) refactor + reuse the line handler code that draws the ending shapes",
                "+                // How it could be done by reusing some of the code from the line handler",
                "+                // 1) do a transform so that first and last \"arms\" are imagined flat",
                "+                // (like in line handler)",
                "+                // 2) refactor + reuse the line handler code that draws the ending shapes",
                "                 // the alternative would be to apply the transform to the LE shapes directly,"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6c39d1ee5da76b7d73084ed740514edcd4d6f9b1",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528548809,
            "hunks": 2,
            "message": "PDFBOX-4071: java coding convention, move private static field before constructor git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833234 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "index 620bb669a..892ea071f 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "@@ -209,2 +209,6 @@ public abstract class BlendMode",
                "+    // these maps *must* come after the BlendMode.* constant declarations, otherwise their values would be null",
                "+    private static final Map<COSName, BlendMode> BLEND_MODES = createBlendModeMap();",
                "+    private static final Map<BlendMode, COSName> BLEND_MODE_NAMES = createBlendModeNamesMap();",
                "+",
                "     BlendMode()",
                "@@ -382,6 +386,2 @@ public abstract class BlendMode",
                "-    // these maps *must* come after the BlendMode.* constant declarations, otherwise their values would be null",
                "-    private static final Map<COSName, BlendMode> BLEND_MODES = createBlendModeMap();",
                "-    private static final Map<BlendMode, COSName> BLEND_MODE_NAMES = createBlendModeNamesMap();",
                "-",
                "     private static Map<COSName, BlendMode> createBlendModeMap()"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "2a3af0e226242c73ea751c3b5a29b13d2a57909e",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525001894,
            "hunks": 2,
            "message": "PDFBOX-4189: Missed the last para of the text, by Palash Ray git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830505 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "index a44d464df..d98b9b3c9 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "@@ -37,4 +37,4 @@ import org.apache.pdfbox.pdmodel.font.PDType0Font;",
                "  * \"https://svn.apache.org/viewvc/pdfbox/trunk/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/HelloWorldTTF.java?view=markup\">PdfBox",
                "- * Example</a>. This attempts to correctly demonstrate to what extent Bengali text rendering is supported. First, we",
                "- * render some text, and then embed an image with the correct text displayed on the next page.",
                "+ * Example</a>. This attempts to correctly demonstrate to what extent Bengali text rendering is",
                "+ * supported. We read large amount of text from a file and try to render it properly.",
                "  *",
                "@@ -146,2 +146,3 @@ public class BengaliPdfGenerationHelloWorld",
                "         }",
                "+        realignedTexts.add(linesInAPage);",
                "         return realignedTexts;"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "984bd528295d4ca79f91abca9b52deacd3bee950",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524835347,
            "hunks": 19,
            "message": "PDFBOX-3353: fix SonarQube pet peeves, and one of mine too git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830352 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java",
                "index 19ad102f5..70dd019d2 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java",
                "@@ -42,2 +42,3 @@ class CloudyBorder",
                "     private static final double ANGLE_34_DEG = Math.toRadians(34);",
                "+    private static final double ANGLE_30_DEG = Math.toRadians(30);",
                "     private static final double ANGLE_12_DEG = Math.toRadians(12);",
                "@@ -226,3 +227,4 @@ class CloudyBorder",
                "     {",
                "-        double w = right - left, h = top - bottom;",
                "+        double w = right - left;",
                "+        double h = top - bottom;",
                "@@ -346,3 +348,5 @@ class CloudyBorder",
                "-            double alpha = array[0], dx = array[1];",
                "+            double alpha = array[0];",
                "+            double dx = array[1];",
                "+",
                "             double angleCur = Math.atan2(ptNext.y - pt.y, ptNext.x - pt.x);",
                "@@ -442,7 +446,6 @@ class CloudyBorder",
                "     {",
                "-        final double D = Math.toRadians(30);",
                "         double a = angleCur + ANGLE_180_DEG;",
                "-        getArcSegment(a + alpha, a + alpha - D, cx, cy, r, r, null, false);",
                "-        getArcSegment(a + alpha - D, a + ANGLE_90_DEG, cx, cy, r, r, null, false);",
                "+        getArcSegment(a + alpha, a + alpha - ANGLE_30_DEG, cx, cy, r, r, null, false);",
                "+        getArcSegment(a + alpha - ANGLE_30_DEG, a + ANGLE_90_DEG, cx, cy, r, r, null, false);",
                "         getArcSegment(a + ANGLE_90_DEG, a + ANGLE_180_DEG - ANGLE_34_DEG,",
                "@@ -474,3 +477,5 @@ class CloudyBorder",
                "     {",
                "-        int n = template.length, i = 0;",
                "+        int n = template.length;",
                "+        int i = 0;",
                "+",
                "         if ((n % 3) == 1)",
                "@@ -503,3 +508,6 @@ class CloudyBorder",
                "-        double rdLeft, rdBottom, rdRight, rdTop;",
                "+        double rdLeft;",
                "+        double rdBottom;",
                "+        double rdRight;",
                "+        double rdTop;",
                "@@ -577,3 +585,3 @@ class CloudyBorder",
                "     /**",
                "-     * Creates one or more Bezier curves that represent an elliptical arc.",
                "+     * Creates one or more B\u00c3\u00a9zier curves that represent an elliptical arc.",
                "      * Angles are in radians.",
                "@@ -595,3 +603,4 @@ class CloudyBorder",
                "         }",
                "-        double sweep = angleTodo, angleDone = 0;",
                "+        double sweep = angleTodo;",
                "+        double angleDone = 0;",
                "@@ -624,3 +633,3 @@ class CloudyBorder",
                "     /**",
                "-     * Creates a single Bezier curve that represents a section of an elliptical",
                "+     * Creates a single B\u00c3\u00a9zier curve that represents a section of an elliptical",
                "      * arc. The sweep angle of the section must not be larger than 90 degrees.",
                "@@ -634,6 +643,6 @@ class CloudyBorder",
                "-        double cos_a = Math.cos(startAng);",
                "-        double sin_a = Math.sin(startAng);",
                "-        double cos_b = Math.cos(endAng);",
                "-        double sin_b = Math.sin(endAng);",
                "+        double cosA = Math.cos(startAng);",
                "+        double sinA = Math.sin(startAng);",
                "+        double cosB = Math.cos(endAng);",
                "+        double sinB = Math.sin(endAng);",
                "         double denom = Math.sin((endAng - startAng) / 2.0);",
                "@@ -645,4 +654,4 @@ class CloudyBorder",
                "             {",
                "-                double xs = cx + rx * cos_a;",
                "-                double ys = cy + ry * sin_a;",
                "+                double xs = cx + rx * cosA;",
                "+                double ys = cy + ry * sinA;",
                "                 if (out != null)",
                "@@ -659,8 +668,8 @@ class CloudyBorder",
                "         double bcp = 1.333333333 * (1 - Math.cos((endAng - startAng) / 2.0)) / denom;",
                "-        double p1x = cx + rx * (cos_a - bcp * sin_a);",
                "-        double p1y = cy + ry * (sin_a + bcp * cos_a);",
                "-        double p2x = cx + rx * (cos_b + bcp * sin_b);",
                "-        double p2y = cy + ry * (sin_b - bcp * cos_b);",
                "-        double p3x = cx + rx * cos_b;",
                "-        double p3y = cy + ry * sin_b;",
                "+        double p1x = cx + rx * (cosA - bcp * sinA);",
                "+        double p1y = cy + ry * (sinA + bcp * cosA);",
                "+        double p2x = cx + rx * (cosB + bcp * sinB);",
                "+        double p2y = cy + ry * (sinB - bcp * cosB);",
                "+        double p3x = cx + rx * cosB;",
                "+        double p3y = cy + ry * sinB;",
                "@@ -668,4 +677,4 @@ class CloudyBorder",
                "         {",
                "-            double xs = cx + rx * cos_a;",
                "-            double ys = cy + ry * sin_a;",
                "+            double xs = cx + rx * cosA;",
                "+            double ys = cy + ry * sinA;",
                "             if (out != null)",
                "@@ -714,2 +723,4 @@ class CloudyBorder",
                "                 // flattened. SEG_CLOSE can be ignored.",
                "+                default:",
                "+                    break;",
                "             }",
                "@@ -740,4 +751,8 @@ class CloudyBorder",
                "-        double left = leftOrig, bottom = bottomOrig, right = rightOrig, top = topOrig;",
                "-        double width = right - left, height = top - bottom;",
                "+        double left = leftOrig;",
                "+        double bottom = bottomOrig;",
                "+        double right = rightOrig;",
                "+        double top = topOrig;",
                "+        double width = right - left;",
                "+        double height = top - bottom;",
                "         double cloudRadius = getEllipseCloudRadius();",
                "@@ -843,3 +858,4 @@ class CloudyBorder",
                "             Point2D.Double p2 = flatPolygon[i + 1];",
                "-            double dx = p2.x - p1.x, dy = p2.y - p1.y;",
                "+            double dx = p2.x - p1.x;",
                "+            double dy = p2.y - p1.y;",
                "             double length = p1.distance(p2);",
                "@@ -852,3 +868,4 @@ class CloudyBorder",
                "             {",
                "-                double cos = cosine(dx, length), sin = sine(dy, length);",
                "+                double cos = cosine(dx, length);",
                "+                double sin = sine(dy, length);",
                "                 double d = curlAdvance - lengthRemain;",
                "@@ -888,3 +905,4 @@ class CloudyBorder",
                "         numPoints = centerPointsIndex;",
                "-        double anglePrev = 0, alphaPrev = 0;",
                "+        double anglePrev = 0;",
                "+        double alphaPrev = 0;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/CloudyBorder.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e4b704f7bd8eba6c6fcd90ac261844b920cc135e",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525924129,
            "hunks": 4,
            "message": "PDFBOX-4068: fix - use PDAppearanceContentStream class git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831299 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "index cef278c71..a0146bccf 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "@@ -23,3 +23,2 @@ import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "-import org.apache.pdfbox.pdmodel.PDAbstractContentStream;",
                " import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                "@@ -405,3 +404,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "      */",
                "-    private void drawArrow(PDAbstractContentStream cs, float x, float y, float len) throws IOException",
                "+    private void drawArrow(PDAppearanceContentStream cs, float x, float y, float len) throws IOException",
                "     {",
                "@@ -426,3 +425,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "      */",
                "-    private void drawDiamond(PDAbstractContentStream cs, float x, float y, float r) throws IOException",
                "+    private void drawDiamond(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "     {",
                "@@ -445,3 +444,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "      */",
                "-    private void addCircle(PDAbstractContentStream cs, float x, float y, float r) throws IOException",
                "+    private void addCircle(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "     {"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4068": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4068",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "56eb8ac27d9a8319fefa6c13c8786f125c3f807b",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523283779,
            "hunks": 1,
            "message": "PDFBOX-4184: complete comment git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1828724 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "index 475437112..28210f3db 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "@@ -188,3 +188,3 @@ public final class LosslessFactory",
                "             int dataType = alphaRaster.getDataBuffer().getDataType();",
                "-            // for 16 it images we need to ",
                "+            // for 16 bit images divide by 256 ",
                "             int shift = dataType == DataBuffer.TYPE_USHORT ? 8 : 0;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4184": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4184",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "7f81b4fbf2512cd572e7e2df82b6e414f79fa470",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531201507,
            "hunks": 1,
            "message": "PDFBOX-4256: enhance javadoc comment git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835516 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
                "index 8840fec86..5f31c0667 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
                "@@ -124,4 +124,6 @@ public abstract class PDButton extends PDTerminalField",
                "     /**",
                "-     * Returns the selected value. May be empty if NoToggleToOff is set but there is no value",
                "-     * selected.",
                "+     * Returns the selected value.",
                "+     * ",
                "+     * <p>Off is the default value which will also be returned if the",
                "+     * value hasn't been set at all.",
                "      * "
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4256": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4256",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "09a99a03f198edcac089ffd66ca72fa71e64dc7b",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532463535,
            "hunks": 2,
            "message": "PDFBOX-4271: use sha512 instead of md5 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1836583 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/preflight/pom.xml b/preflight/pom.xml",
                "index 51087ebef..17de17e1c 100644",
                "--- a/preflight/pom.xml",
                "+++ b/preflight/pom.xml",
                "@@ -124,3 +124,3 @@",
                "                             <outputDirectory>${project.build.directory}/pdfs</outputDirectory>",
                "-                            <md5>9f129c834bc6f9f8dabad4491c4c10ec</md5>",
                "+                            <sha512>66bf4ad470b36079c1e0ceca4438053f32649f964fb1de5cd88babce36c5afc0ba6fa7880bc1c9aac791df872cdfc8dc9851bfd3c75ae96786edd8fac61193ae</sha512>",
                "                         </configuration>",
                "@@ -138,3 +138,3 @@",
                "                             <outputDirectory>${project.build.directory}/pdfs</outputDirectory>",
                "-                            <md5>d8fccb2fea540ab49bef237f3579546b</md5>",
                "+                            <sha512>a6efe70574dcde3628271fc1d7aa32cc00095334aa9415e5ebfb96cc20e0f79edd040c0290d5a76b4ced4c6a4343ba4af9567bf12eb7cfe3ec70f1a43202c231</sha512>",
                "                         </configuration>"
            ],
            "changed_files": [
                "preflight/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4271": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4271",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d88e2be7880de920022f63a8b03078d9c1612d60",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530813924,
            "hunks": 3,
            "message": "PDFBOX-3353: improve javadoc, remove double code git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835167 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "index 8ac1250f8..2be86de09 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "@@ -119,5 +119,5 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "      * <p>",
                "-     * This will get the annotations normal appearance content stream,",
                "-     * to 'draw' to.",
                "-     * ",
                "+     * This will get the annotations normal appearance content stream, to 'draw' to. It will be",
                "+     * uncompressed.",
                "+     *",
                "      * @return the appearance entry representing the normal appearance.",
                "@@ -127,4 +127,3 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "     {",
                "-        PDAppearanceEntry appearanceEntry = getNormalAppearance();",
                "-        return getAppearanceEntryAsContentStream(appearanceEntry, false);",
                "+        return getNormalAppearanceAsContentStream(false);",
                "     }",
                "@@ -135,4 +134,3 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "      * <p>",
                "-     * This will get the annotations normal appearance content stream,",
                "-     * to 'draw' to.",
                "+     * This will get the annotations normal appearance content stream, to 'draw' to.",
                "      * "
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e228c77b43cfac041d65218f47987ec323efc4b4",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523713689,
            "hunks": 2,
            "message": "PDFBOX-3809: return early for empty field list; remove rendering test for flatten of specific fields git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829139 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "index 5d47308fa..cb5e01c7c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "@@ -252,2 +252,7 @@ public final class PDAcroForm implements COSObjectable",
                "     {",
                "+        // Nothing to flatten if there are no fields provided",
                "+        if (fields.isEmpty()) {",
                "+            return;",
                "+        }",
                "+        ",
                "         // for dynamic XFA forms there is no flatten as this would mean to do a rendering",
                "@@ -284,3 +289,3 @@ public final class PDAcroForm implements COSObjectable",
                "             for (PDAnnotation annotation: page.getAnnotations())",
                "-            {   ",
                "+            {                ",
                "                 if (widgetsForPageMap != null && widgetsForPageMap.get(annotation.getCOSObject()) == null)"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3809": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3809",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f4be122ce9b5b0b2fe41a8b01dcddf06eab48684",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524771375,
            "hunks": 1,
            "message": "PDFBOX-3353: add //TODO with concept for line endings git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830259 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "index b07d3823c..c7ad9846e 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "@@ -160,2 +160,14 @@ public class PDPolygonAppearanceHandler extends PDAbstractAppearanceHandler",
                "+                //TODO line endings (LE) are missing",
                "+                // How it could be done by reusing some of the code from ",
                "+                // the Line and StrikeOut handlers",
                "+                // 1) if the LE is contained in SHORT_STYLES, ",
                "+                // shorten the first + last arms with \"this weird old trick\"",
                "+                // used in the StrikeOut handler",
                "+                // and paint",
                "+                // 2) do a transform so that first and last arms are imagined flat",
                "+                // (like in Line handler)",
                "+                // 3) refactor + reuse the line handler code that draws the ending shapes",
                "+                // the alternative would be to apply the transform to the LE shapes directly,",
                "+                // which would be more work and produce code difficult to understand",
                "                 contentStream.drawShape(lineWidth, hasStroke, hasBackground);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "01f4fa07020498b4cecfdfbe4642d339a5a26152",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530641778,
            "hunks": 2,
            "message": "PDFBOX-3353: correct padding git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835009 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "index 052f98b61..a22d3def9 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "@@ -87,4 +87,4 @@ public class PDStrikeoutAppearanceHandler extends PDAbstractAppearanceHandler",
                "         rect.setLowerLeftY(Math.min(minY - ab.width / 2, rect.getLowerLeftY()));",
                "-        rect.setUpperRightX(Math.max(maxX + ab.width, rect.getUpperRightX()));",
                "-        rect.setUpperRightY(Math.max(maxY + ab.width, rect.getUpperRightY()));",
                "+        rect.setUpperRightX(Math.max(maxX + ab.width / 2, rect.getUpperRightX()));",
                "+        rect.setUpperRightY(Math.max(maxY + ab.width / 2, rect.getUpperRightY()));",
                "         annotation.setRectangle(rect);",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java",
                "index 48363df3b..6556ee589 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java",
                "@@ -88,4 +88,4 @@ public class PDUnderlineAppearanceHandler extends PDAbstractAppearanceHandler",
                "         rect.setLowerLeftY(Math.min(minY - ab.width / 2, rect.getLowerLeftY()));",
                "-        rect.setUpperRightX(Math.max(maxX + ab.width, rect.getUpperRightX()));",
                "-        rect.setUpperRightY(Math.max(maxY + ab.width, rect.getUpperRightY()));",
                "+        rect.setUpperRightX(Math.max(maxX + ab.width / 2, rect.getUpperRightX()));",
                "+        rect.setUpperRightY(Math.max(maxY + ab.width / 2, rect.getUpperRightY()));",
                "         annotation.setRectangle(rect);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDUnderlineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "26cf2ec688c32cb9cf005fcae612bdba0873bfa1",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524387071,
            "hunks": 4,
            "message": "PDFBOX-4189: reorder constructor and fields, use better way to turn off KCMS git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829764 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "index 915cd09a4..e1246f380 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "@@ -41,6 +41,2 @@ public class BengaliPdfGenerationHelloWorld",
                " {",
                "-    private BengaliPdfGenerationHelloWorld()",
                "-    {        ",
                "-    }",
                "-",
                "     /**",
                "@@ -59,6 +55,16 @@ public class BengaliPdfGenerationHelloWorld",
                "     {",
                "-        if (System.getProperty(\"java.version\").startsWith(\"1.8\"))",
                "+        try",
                "         {",
                "+            // turns off log info about using KCMS (faster than LCMS) if available",
                "+            Class.forName(\"sun.java2d.cmm.kcms.KcmsServiceProvider\");",
                "             System.setProperty(\"sun.java2d.cmm\", \"sun.java2d.cmm.kcms.KcmsServiceProvider\");",
                "         }",
                "+        catch (ClassNotFoundException e)",
                "+        {",
                "+            // ignore",
                "+        }",
                "+    }",
                "+",
                "+    private BengaliPdfGenerationHelloWorld()",
                "+    {        ",
                "     }"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f4abb495db9b850ca0db27984e26d7974cb7ef23",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523898449,
            "hunks": 0,
            "message": "[maven-release-plugin] copy for tag 1.8.14 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/tags/1.8.14@1829299 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "a48b3adb3386a3e9d9c93f7341aeed113cc95333"
                ]
            ],
            "tags": [
                "1.8.14"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "489ad16fcd0de7d959140cbbd8e52337468e0210",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524593000,
            "hunks": 4,
            "message": "PDFBOX-3353: improve //TODO comment, remove content stream parts that have no effect git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830017 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "index a1610fb33..3422cef96 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "@@ -50,6 +50,8 @@ public class PDCaretAppearanceHandler extends PDAbstractAppearanceHandler",
                "     {",
                "-        float lineWidth = 1f;",
                "-        //TODO Adobe creates the /RD entry, but it is unclear how it",
                "-        // gets the (identical) numbers. The numbers from there are then substracted/added from /BBox",
                "-        // and used in the translation in the matrix and also for the line width.",
                "+        //TODO Adobe creates the /RD entry with a number that is decided by dividing the height by 10,",
                "+        // with a maximum result of 5. That number is then substracted from the /BBox",
                "+        // values and used in the translation values in the matrix and also for the line width",
                "+        // (not used here because it has no effect).",
                "+        // Currently, the rendering difference between our content stream and the one from Adobe",
                "+        // is minimal, about one pixel line at the bottom.",
                "@@ -61,3 +63,2 @@ public class PDCaretAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 contentStream.setStrokingColor(getColor());",
                "-                contentStream.setLineWidth(lineWidth);",
                "                 contentStream.setNonStrokingColor(getColor());",
                "@@ -79,7 +80,6 @@ public class PDCaretAppearanceHandler extends PDAbstractAppearanceHandler",
                "                                       rect.getWidth(), 0);",
                "-                // closeAndFillAndStroke() would bring a thicker \"thin top\" shape.",
                "                 contentStream.closePath();",
                "                 contentStream.fill();",
                "-                contentStream.stroke();",
                "-                //TODO test whether the stroke() and setLineWidth() calls have any effect at all.",
                "+                // Adobe has an additional stroke, but it has no effect",
                "+                // because fill \"consumes\" the path.",
                "             }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bb6863f60089ea5587c182854bf8cf23611e80f5",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524503622,
            "hunks": 5,
            "message": "PDFBOX-3353: add caret annotation handler git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829909 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "index ef62e1301..a1610fb33 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java",
                "@@ -17,6 +17,15 @@ package org.apache.pdfbox.pdmodel.interactive.annotation.handlers;",
                "+import java.io.IOException;",
                " import org.apache.commons.logging.Log;",
                " import org.apache.commons.logging.LogFactory;",
                "+import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationCaret;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceContentStream;",
                "+/**",
                "+ * Handler to generate the caret annotations appearance.",
                "+ *",
                "+ * @author Tilman Hausherr",
                "+ */",
                " public class PDCaretAppearanceHandler extends PDAbstractAppearanceHandler",
                "@@ -41,3 +50,42 @@ public class PDCaretAppearanceHandler extends PDAbstractAppearanceHandler",
                "     {",
                "-        // TODO to be implemented",
                "+        float lineWidth = 1f;",
                "+        //TODO Adobe creates the /RD entry, but it is unclear how it",
                "+        // gets the (identical) numbers. The numbers from there are then substracted/added from /BBox",
                "+        // and used in the translation in the matrix and also for the line width.",
                "+",
                "+        try",
                "+        {",
                "+            PDAnnotationCaret annotation = (PDAnnotationCaret) getAnnotation();",
                "+            try (PDAppearanceContentStream contentStream = getNormalAppearanceAsContentStream())",
                "+            {",
                "+                contentStream.setStrokingColor(getColor());",
                "+                contentStream.setLineWidth(lineWidth);",
                "+                contentStream.setNonStrokingColor(getColor());",
                "+                ",
                "+                handleOpacity(annotation.getConstantOpacity());",
                "+",
                "+                PDRectangle rect = getRectangle();",
                "+                PDRectangle bbox = new PDRectangle(rect.getWidth(), rect.getHeight());",
                "+                annotation.getNormalAppearanceStream().setBBox(bbox);",
                "+",
                "+                float halfX = rect.getWidth() / 2;",
                "+                float halfY = rect.getHeight() / 2;",
                "+                contentStream.moveTo(0, 0);",
                "+                contentStream.curveTo(halfX, 0,",
                "+                                      halfX, halfY, ",
                "+                                      halfX, rect.getHeight());",
                "+                contentStream.curveTo(halfX, halfY, ",
                "+                                      halfX, 0,",
                "+                                      rect.getWidth(), 0);",
                "+                // closeAndFillAndStroke() would bring a thicker \"thin top\" shape.",
                "+                contentStream.closePath();",
                "+                contentStream.fill();",
                "+                contentStream.stroke();",
                "+                //TODO test whether the stroke() and setLineWidth() calls have any effect at all.",
                "+            }",
                "+        }",
                "+        catch (IOException e)",
                "+        {",
                "+            LOG.error(e);",
                "+        }",
                "     }",
                "@@ -55,2 +103,2 @@ public class PDCaretAppearanceHandler extends PDAbstractAppearanceHandler",
                "     }",
                "-}",
                "+}",
                "\\ No newline at end of file"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDCaretAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6cdd00dbf73466f1b2d8fae6f06df16da59911e1",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528042161,
            "hunks": 2,
            "message": "PDFBOX-4212: changes to package names were not persisted - fix package name git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832776 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java",
                "index 5688ec385..377adb6ed 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java",
                "@@ -16,3 +16,3 @@",
                "  */",
                "-package org.apache.pdfbox.pdmodel.interactive.annotation.text;",
                "+package org.apache.pdfbox.pdmodel.interactive.annotation.layout;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java",
                "index c61c8824c..165c8e455 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java",
                "@@ -16,3 +16,3 @@",
                "  */",
                "-package org.apache.pdfbox.pdmodel.interactive.annotation.text;",
                "+package org.apache.pdfbox.pdmodel.interactive.annotation.layout;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4212": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4212",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3452fc1e8d71796579366d55b6c40ea91810d5be",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527300943,
            "hunks": 2,
            "message": "PDFBOX-3353: support /RD and /BE git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832289 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationFreeText.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationFreeText.java",
                "index 75f97dd83..496b81101 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationFreeText.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationFreeText.java",
                "@@ -22,2 +22,3 @@ import org.apache.pdfbox.cos.COSFloat;",
                " import org.apache.pdfbox.cos.COSName;",
                "+import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAppearanceHandler;",
                "@@ -226,2 +227,60 @@ public class PDAnnotationFreeText extends PDAnnotationMarkup",
                "+    /**",
                "+     * This will set the border effect dictionary, specifying effects to be applied when drawing the",
                "+     * line.",
                "+     *",
                "+     * @param be The border effect dictionary to set.",
                "+     *",
                "+     */",
                "+    public void setBorderEffect(PDBorderEffectDictionary be)",
                "+    {",
                "+        getCOSObject().setItem(COSName.BE, be);",
                "+    }",
                "+",
                "+    /**",
                "+     * This will retrieve the border effect dictionary, specifying effects to be applied used in",
                "+     * drawing the line.",
                "+     *",
                "+     * @return The border effect dictionary",
                "+     */",
                "+    public PDBorderEffectDictionary getBorderEffect()",
                "+    {",
                "+        COSBase base = getCOSObject().getDictionaryObject(COSName.BE);",
                "+        if (base instanceof COSDictionary)",
                "+        {",
                "+            return new PDBorderEffectDictionary((COSDictionary) base);",
                "+        }",
                "+        return null;",
                "+    }",
                "+",
                "+    /**",
                "+     * This will set the rectangle difference rectangle. Giving the difference between the",
                "+     * annotations rectangle and where the drawing occurs. (To take account of any effects applied",
                "+     * through the BE entry for example)",
                "+     *",
                "+     * @param rd the rectangle difference",
                "+     *",
                "+     */",
                "+    public void setRectDifference(PDRectangle rd)",
                "+    {",
                "+        getCOSObject().setItem(COSName.RD, rd);",
                "+    }",
                "+",
                "+    /**",
                "+     * This will get the rectangle difference rectangle. Giving the difference between the",
                "+     * annotations rectangle and where the drawing occurs. (To take account of any effects applied",
                "+     * through the BE entry for example)",
                "+     *",
                "+     * @return the rectangle difference",
                "+     */",
                "+    public PDRectangle getRectDifference()",
                "+    {",
                "+        COSBase base = getCOSObject().getDictionaryObject(COSName.RD);",
                "+        if (base instanceof COSArray)",
                "+        {",
                "+            return new PDRectangle((COSArray) base);",
                "+        }",
                "+        return null;",
                "+    }",
                "+",
                "     /**"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationFreeText.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "4b032ac9eb84cc1c4cde0d129b9d33ef9feb4120",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529078824,
            "hunks": 1,
            "message": "PDFBOX-4112: update surefire plugin version to current for jdk10 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833606 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 5e35db3a0..3dd8dae3c 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -50,2 +50,8 @@",
                "         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>",
                "+",
                "+        <!-- for jdk10. Can be removed when Apache parent pom has been updated",
                "+        See https://maven.apache.org/pom/asf/ , ",
                "+        https://issues.apache.org/jira/browse/MPOM-185",
                "+        current version is 19. -->",
                "+        <surefire.version>2.21.0</surefire.version>",
                "     </properties>"
            ],
            "changed_files": [
                "parent/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4112": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4112",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "474f73167054ecab8a03e04c161838a0d4a1d2df",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527274097,
            "hunks": 1,
            "message": "PDFBOX-3353: add methods for callout and line ending style git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832266 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationFreeText.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationFreeText.java",
                "index 5d1a39feb..75f97dd83 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationFreeText.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationFreeText.java",
                "@@ -171,3 +171,57 @@ public class PDAnnotationFreeText extends PDAnnotationMarkup",
                "     }",
                "-    ",
                "+",
                "+    /**",
                "+     * This will set the coordinates of the callout line.",
                "+     *",
                "+     * @param callout An array of four or six numbers specifying a callout line attached to the free",
                "+     * text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and",
                "+     * ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent",
                "+     * the starting and ending coordinates of the line.",
                "+     */",
                "+    public final void setCallout(float[] callout)",
                "+    {",
                "+        COSArray newCallout = new COSArray();",
                "+        newCallout.setFloatArray(callout);",
                "+        getCOSObject().setItem(COSName.CL, newCallout);",
                "+    }",
                "+",
                "+    /**",
                "+     * This will get the coordinates of the callout line.",
                "+     *",
                "+     * @return An array of four or six numbers specifying a callout line attached to the free text",
                "+     * annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending",
                "+     * coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the",
                "+     * starting and ending coordinates of the line.",
                "+     */",
                "+    public float[] getCallout()",
                "+    {",
                "+        COSBase base = getCOSObject().getDictionaryObject(COSName.CL);",
                "+        if (base instanceof COSArray)",
                "+        {",
                "+            return ((COSArray) base).toFloatArray();",
                "+        }",
                "+        return null;",
                "+    }",
                "+",
                "+    /**",
                "+     * This will set the line ending style.",
                "+     *",
                "+     * @param style The new style.",
                "+     */",
                "+    public final void setLineEndingStyle(String style)",
                "+    {",
                "+        getCOSObject().setName(COSName.LE, style);",
                "+    }",
                "+",
                "+    /**",
                "+     * This will retrieve the line ending style.",
                "+     *",
                "+     * @return The line ending style, possible values shown in the LE_ constants section, LE_NONE if",
                "+     * missing, never null.",
                "+     */",
                "+    public String getLineEndingStyle()",
                "+    {",
                "+        return getCOSObject().getNameAsString(COSName.LE, PDAnnotationLine.LE_NONE);",
                "+    }    ",
                "+",
                "     /**"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationFreeText.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "efeae65834ddfda272d8ef06168d79a90c7c515b",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524995515,
            "hunks": 0,
            "message": "PDFBOX-4189: remove image that is no used git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830501 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/resources/org/apache/pdfbox/resources/ttf/bengali-correct-text.png b/examples/src/main/resources/org/apache/pdfbox/resources/ttf/bengali-correct-text.png",
                "deleted file mode 100644",
                "index b5aadd116..000000000",
                "Binary files a/examples/src/main/resources/org/apache/pdfbox/resources/ttf/bengali-correct-text.png and /dev/null differ"
            ],
            "changed_files": [
                "examples/src/main/resources/org/apache/pdfbox/resources/ttf/bengali-correct-text.png"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3d971d66ca0c9c9d8d7ffa729eaea9838040c19e",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524671724,
            "hunks": 1,
            "message": "PDFBOX-3353: add BorderEffect getter/setter git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830095 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolygon.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolygon.java",
                "index 1f4217edb..310251d44 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolygon.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolygon.java",
                "@@ -79,2 +79,33 @@ public class PDAnnotationPolygon extends PDAnnotationMarkup",
                "+    /**",
                "+     * This will set the border effect dictionary, specifying effects to be applied when drawing the",
                "+     * line.",
                "+     *",
                "+     * @param be The border effect dictionary to set.",
                "+     *",
                "+     */",
                "+    public void setBorderEffect(PDBorderEffectDictionary be)",
                "+    {",
                "+        getCOSObject().setItem(COSName.BE, be);",
                "+    }",
                "+",
                "+    /**",
                "+     * This will retrieve the border effect dictionary, specifying effects to be applied used in",
                "+     * drawing the line.",
                "+     *",
                "+     * @return The border effect dictionary",
                "+     */",
                "+    public PDBorderEffectDictionary getBorderEffect()",
                "+    {",
                "+        COSDictionary be = (COSDictionary) getCOSObject().getDictionaryObject(COSName.BE);",
                "+        if (be != null)",
                "+        {",
                "+            return new PDBorderEffectDictionary(be);",
                "+        }",
                "+        else",
                "+        {",
                "+            return null;",
                "+        }",
                "+    }",
                "+",
                "     /**"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationPolygon.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5316af04abb8afff9d40ed26a47940b3f470058e",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530635820,
            "hunks": 1,
            "message": "PDFBOX-4259: fix imports git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835006 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/AddAnnotations.java b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/AddAnnotations.java",
                "index 56db227ef..6b744e1f9 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/AddAnnotations.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/AddAnnotations.java",
                "@@ -39,2 +39,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLink;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquare;"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/AddAnnotations.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4259": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4259",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "aa2ed82a31d4951fbf77bd1c61bf36b9e9f91eb6",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524671346,
            "hunks": 7,
            "message": "PDFBOX-4071: correct javadoc, fix typo git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/1.8@1830091 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationMarkup.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationMarkup.java",
                "index 8e914f33c..6d886eb08 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationMarkup.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationMarkup.java",
                "@@ -28,3 +28,3 @@ import java.util.Calendar;",
                " /**",
                "- * This class represents the additonal fields of a Markup type Annotation.  See",
                "+ * This class represents the additional fields of a Markup type Annotation.  See",
                "  * section 12.5.6 of ISO32000-1:2008 (starting with page 390) for details on",
                "diff --git a/preflight/src/main/java/org/apache/pdfbox/preflight/action/AbstractActionManager.java b/preflight/src/main/java/org/apache/pdfbox/preflight/action/AbstractActionManager.java",
                "index 421fe2966..a0f04232b 100644",
                "--- a/preflight/src/main/java/org/apache/pdfbox/preflight/action/AbstractActionManager.java",
                "+++ b/preflight/src/main/java/org/apache/pdfbox/preflight/action/AbstractActionManager.java",
                "@@ -115,6 +115,4 @@ public abstract class AbstractActionManager",
                "     /**",
                "-     * Call the valid(boolean, List) method with the additonalActionAuth set to false.",
                "+     * Call the valid(boolean, List) method with the additionalActionAuth set to false.",
                "      * ",
                "-     * @param error",
                "-     *            the validation error list to updated if the validation fails.",
                "      * @return",
                "@@ -131,3 +129,3 @@ public abstract class AbstractActionManager",
                "      * Return false if the dictionary is invalid (ex : missing key). If the ActionManager represents an",
                "-     * AdditionalAction, this method returns false and updates the error list when the additonalActionAuth parameter is",
                "+     * AdditionalAction, this method returns false and updates the error list when the additionalActionAuth parameter is",
                "      * set to false.",
                "@@ -138,3 +136,3 @@ public abstract class AbstractActionManager",
                "      * ",
                "-     * @param additonalActionAuth",
                "+     * @param additionalActionAuth",
                "      *            boolean to know if an additional action is authorized.",
                "@@ -143,5 +141,5 @@ public abstract class AbstractActionManager",
                "      */",
                "-    public boolean valid(boolean additonalActionAuth) throws ValidationException",
                "+    public boolean valid(boolean additionalActionAuth) throws ValidationException",
                "     {",
                "-        if (isAdditionalAction() && !additonalActionAuth)",
                "+        if (isAdditionalAction() && !additionalActionAuth)",
                "         {"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationMarkup.java",
                "preflight/src/main/java/org/apache/pdfbox/preflight/action/AbstractActionManager.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.8.15",
                "1.8.16",
                "1.8.17"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8bee174efa54f392c06ec615f47f3c166e21b1e7",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530975489,
            "hunks": 4,
            "message": "PDFBOX-4071: update bouncycastle version git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835315 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 364005320..9a1c4816d 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -56,2 +56,3 @@",
                "         <surefire.version>2.21.0</surefire.version>",
                "+        <bouncycastle.version>1.60</bouncycastle.version>",
                "     </properties>",
                "@@ -84,3 +85,3 @@",
                "                 <artifactId>bcprov-jdk15on</artifactId>",
                "-                <version>1.59</version>",
                "+                <version>${bouncycastle.version}</version>",
                "             </dependency>",
                "@@ -89,3 +90,3 @@",
                "                 <artifactId>bcmail-jdk15on</artifactId>",
                "-                <version>1.59</version>",
                "+                <version>${bouncycastle.version}</version>",
                "             </dependency>",
                "@@ -94,3 +95,3 @@",
                "                 <artifactId>bcpkix-jdk15on</artifactId>",
                "-                <version>1.59</version>",
                "+                <version>${bouncycastle.version}</version>",
                "             </dependency>"
            ],
            "changed_files": [
                "parent/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "e3d94d5da9d7f1bd496ff57ecc13461d28205154",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524760473,
            "hunks": 2,
            "message": "PDFBOX-3353: handle special case where quadpoints surface is empty git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830241 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "index 15724195e..6cf33d043 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java",
                "@@ -115,12 +115,20 @@ public class PDStrikeoutAppearanceHandler extends PDAbstractAppearanceHandler",
                "                                           Math.pow(pathsArray[i * 8 + 1] - pathsArray[i * 8 + 5], 2)));",
                "-                    float x0 = pathsArray[i * 8 + 4] + (pathsArray[i * 8] - ",
                "-                               pathsArray[i * 8 + 4]) / len0 * (len0 / 2 - ab.width);",
                "-                    float y0 = pathsArray[i * 8 + 5] + (pathsArray[i * 8 + 1] - ",
                "-                               pathsArray[i * 8 + 5]) / len0 * (len0 / 2 - ab.width);",
                "+                    float x0 = pathsArray[i * 8 + 4];",
                "+                    float y0 = pathsArray[i * 8 + 5];",
                "+                    if (Float.compare(len0, 0) != 0)",
                "+                    {",
                "+                        // only if both coordinates are not identical to avoid divide by zero",
                "+                        x0 += (pathsArray[i * 8] - pathsArray[i * 8 + 4]) / len0 * (len0 / 2 - ab.width);",
                "+                        y0 += (pathsArray[i * 8 + 1] - pathsArray[i * 8 + 5]) / len0 * (len0 / 2 - ab.width);",
                "+                    }",
                "                     float len1 = (float) (Math.sqrt(Math.pow(pathsArray[i * 8 + 2] - pathsArray[i * 8 + 6], 2) + ",
                "                                           Math.pow(pathsArray[i * 8 + 3] - pathsArray[i * 8 + 7], 2)));",
                "-                    float x1 = pathsArray[i * 8 + 6] + (pathsArray[i * 8 + 2] - ",
                "-                               pathsArray[i * 8 + 6]) / len1 * (len1 / 2 - ab.width);",
                "-                    float y1 = pathsArray[i * 8 + 7] + (pathsArray[i * 8 + 3] - ",
                "-                               pathsArray[i * 8 + 7]) / len1 * (len1 / 2 - ab.width);",
                "+                    float x1 = pathsArray[i * 8 + 6];",
                "+                    float y1 = pathsArray[i * 8 + 7];",
                "+                    if (Float.compare(len1, 0) != 0)",
                "+                    {",
                "+                        // only if both coordinates are not identical to avoid divide by zero",
                "+                        x1 += (pathsArray[i * 8 + 2] - pathsArray[i * 8 + 6]) / len1 * (len1 / 2 - ab.width);",
                "+                        y1 += (pathsArray[i * 8 + 3] - pathsArray[i * 8 + 7]) / len1 * (len1 / 2 - ab.width);",
                "+                    }",
                "                     cs.moveTo(x0, y0);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDStrikeoutAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "bec69941e3e12d924cbeb7e99c0a1ebb6c836fd5",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532780442,
            "hunks": 2,
            "message": "PDFBOX-4281: remove Apache Wink dependency, add dependencies for class copied from Apache Wink git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1836892 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/pom.xml b/examples/pom.xml",
                "index 6201cf029..02dc795ac 100644",
                "--- a/examples/pom.xml",
                "+++ b/examples/pom.xml",
                "@@ -87,7 +87,13 @@",
                "     <dependency>",
                "-      <groupId>org.apache.wink</groupId>",
                "-      <artifactId>wink-component-test-support</artifactId>",
                "-      <version>1.4</version>",
                "+      <groupId>javax.servlet</groupId>",
                "+      <artifactId>javax.servlet-api</artifactId>",
                "+      <version>4.0.1</version>",
                "       <scope>test</scope>",
                "     </dependency>",
                "+    <dependency>",
                "+        <groupId>org.apache.geronimo.specs</groupId>",
                "+        <artifactId>geronimo-jaxrs_1.1_spec</artifactId>",
                "+        <version>1.0</version>",
                "+        <scope>test</scope>",
                "+    </dependency>",
                "   </dependencies>"
            ],
            "changed_files": [
                "examples/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4281": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4281",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "0bf49ccaa2c834a9b86d35f3500eb3825499ba93",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530116371,
            "hunks": 6,
            "message": "PDFBOX-3353: convert quadratic B\u00c3\u00a9zier curve to cubic git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834517 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index 2e5708ed6..8d58eff54 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -536,5 +536,6 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-",
                "     private void addPath(final PDAppearanceContentStream contentStream, GeneralPath path) throws IOException",
                "     {",
                "+        double curX = 0;",
                "+        double curY = 0;",
                "         PathIterator it = path.getPathIterator(new AffineTransform());",
                "@@ -552,6 +553,19 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                                           (float) coords[3], (float) coords[4], (float) coords[5]);",
                "+                    curX = coords[4];",
                "+                    curY = coords[5];",
                "                     break;",
                "                 case PathIterator.SEG_QUADTO:",
                "-                    contentStream.curveTo1((float) coords[0], (float) coords[1], (float) coords[2], (float) coords[3]);",
                "-                    // not sure whether curveTo1 or curveTo2 is to be used here",
                "+                    // Convert quadratic B\u00c3\u00a9zier curve to cubic",
                "+                    // https://fontforge.github.io/bezier.html",
                "+                    // CP1 = QP0 + 2/3 *(QP1-QP0)",
                "+                    // CP2 = QP2 + 2/3 *(QP1-QP2)",
                "+                    double cp1x = curX + 2d / 3d * (coords[0] - curX);",
                "+                    double cp1y = curY + 2d / 3d * (coords[1] - curY);",
                "+                    double cp2x = coords[2] + 2d / 3d * (coords[0] - coords[2]);",
                "+                    double cp2y = coords[3] + 2d / 3d * (coords[1] - coords[3]);",
                "+                    contentStream.curveTo((float) cp1x, (float) cp1y,",
                "+                                          (float) cp2x, (float) cp2y,",
                "+                                          (float) coords[2], (float) coords[3]);",
                "+                    curX = coords[2];",
                "+                    curY = coords[3];",
                "                     break;",
                "@@ -559,2 +573,4 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     contentStream.lineTo((float) coords[0], (float) coords[1]);",
                "+                    curX = coords[0];",
                "+                    curY = coords[1];",
                "                     break;",
                "@@ -562,2 +578,4 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     contentStream.moveTo((float) coords[0], (float) coords[1]);",
                "+                    curX = coords[0];",
                "+                    curY = coords[1];",
                "                     break;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "569989ea8dff1c6f134b737b25e25fdf37d4ce00",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526759268,
            "hunks": 10,
            "message": "PDFBOX-3353: refactor double code, move it to abstract class git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831918 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "index 72626ee53..955b6510e 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "@@ -54,2 +54,4 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "+    static final double ARROW_ANGLE = Math.toRadians(30);",
                "+",
                "     /**",
                "@@ -275,3 +277,138 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "     }",
                "-    ",
                "+",
                "+    void drawStyle(String style, final PDAppearanceContentStream cs, float x, float y,",
                "+                           float width, boolean hasStroke, boolean hasBackground) throws IOException",
                "+    {",
                "+        switch (style)",
                "+        {",
                "+            case PDAnnotationLine.LE_OPEN_ARROW:",
                "+            case PDAnnotationLine.LE_CLOSED_ARROW:",
                "+                if (Float.compare(x, 0) != 0)",
                "+                {",
                "+                    // ending",
                "+                    drawArrow(cs, x - width, y, -width * 9);",
                "+                }",
                "+                else",
                "+                {",
                "+                    // start",
                "+                    drawArrow(cs, width, y, width * 9);",
                "+                }",
                "+                if (PDAnnotationLine.LE_CLOSED_ARROW.equals(style))",
                "+                {",
                "+                    cs.closePath();",
                "+                }",
                "+                break;",
                "+            case PDAnnotationLine.LE_BUTT:",
                "+                cs.moveTo(x, y - width * 3);",
                "+                cs.lineTo(x, y + width * 3);",
                "+                break;",
                "+            case PDAnnotationLine.LE_DIAMOND:",
                "+                drawDiamond(cs, x, y, width * 3);",
                "+                break;",
                "+            case PDAnnotationLine.LE_SQUARE:",
                "+                cs.addRect(x - width * 3, y - width * 3, width * 6, width * 6);",
                "+                break;",
                "+            case PDAnnotationLine.LE_CIRCLE:",
                "+                addCircle(cs, x, y, width * 3);",
                "+                break;",
                "+            case PDAnnotationLine.LE_R_OPEN_ARROW:",
                "+            case PDAnnotationLine.LE_R_CLOSED_ARROW:",
                "+                if (Float.compare(x, 0) != 0)",
                "+                {",
                "+                    // ending",
                "+                    drawArrow(cs, x + width, y, width * 9);",
                "+                }",
                "+                else",
                "+                {",
                "+                    // start",
                "+                    drawArrow(cs, -width, y, -width * 9);",
                "+                }",
                "+                if (PDAnnotationLine.LE_R_CLOSED_ARROW.equals(style))",
                "+                {",
                "+                    cs.closePath();",
                "+                }",
                "+                break;",
                "+            case PDAnnotationLine.LE_SLASH:",
                "+                // the line is 18 x linewidth at an angle of 60\u00c2\u00b0",
                "+                cs.moveTo(x + (float) (Math.cos(Math.toRadians(60)) * width * 9),",
                "+                          y + (float) (Math.sin(Math.toRadians(60)) * width * 9));",
                "+                cs.lineTo(x + (float) (Math.cos(Math.toRadians(240)) * width * 9),",
                "+                          y + (float) (Math.sin(Math.toRadians(240)) * width * 9));",
                "+                break;",
                "+            default:",
                "+                break;",
                "+        }",
                "+        if (INTERIOR_COLOR_STYLES.contains(style))",
                "+        {",
                "+            cs.drawShape(width, hasStroke, hasBackground);",
                "+        }",
                "+        else if (!PDAnnotationLine.LE_NONE.equals(style))",
                "+        {",
                "+            // need to do this separately, because sometimes /IC is set anyway",
                "+            cs.drawShape(width, hasStroke, false);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Add the two arms of a horizontal arrow.",
                "+     * ",
                "+     * @param cs Content stream",
                "+     * @param x",
                "+     * @param y",
                "+     * @param len The arm length. Positive goes to the right, negative goes to the left.",
                "+     * ",
                "+     * @throws IOException If the content stream could not be written",
                "+     */",
                "+    void drawArrow(PDAppearanceContentStream cs, float x, float y, float len) throws IOException",
                "+    {",
                "+        // strategy for arrows: angle 30\u00c2\u00b0, arrow arm length = 9 * line width",
                "+        // cos(angle) = x position",
                "+        // sin(angle) = y position",
                "+        // this comes very close to what Adobe is doing",
                "+        cs.moveTo(x + (float) (Math.cos(ARROW_ANGLE) * len), y + (float) (Math.sin(ARROW_ANGLE) * len));",
                "+        cs.lineTo(x, y);",
                "+        cs.lineTo(x + (float) (Math.cos(ARROW_ANGLE) * len), y - (float) (Math.sin(ARROW_ANGLE) * len));",
                "+    }",
                "+",
                "+    /**",
                "+     * Add a square diamond shape (corner on top) to the path.",
                "+     *",
                "+     * @param cs Content stream",
                "+     * @param x",
                "+     * @param y",
                "+     * @param r Radius (to a corner)",
                "+     * ",
                "+     * @throws IOException If the content stream could not be written",
                "+     */",
                "+    void drawDiamond(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "+    {",
                "+        cs.moveTo(x - r, y);",
                "+        cs.lineTo(x, y + r);",
                "+        cs.lineTo(x + r, y);",
                "+        cs.lineTo(x, y - r);",
                "+        cs.closePath();",
                "+    }",
                "+",
                "+    /**",
                "+     * Add a circle shape to the path.",
                "+     *",
                "+     * @param cs Content stream",
                "+     * @param x",
                "+     * @param y",
                "+     * @param r Radius",
                "+     * ",
                "+     * @throws IOException If the content stream could not be written",
                "+     */",
                "+    void addCircle(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "+    {",
                "+        // http://stackoverflow.com/a/2007782/535646",
                "+        float magic = r * 0.551784f;",
                "+        cs.moveTo(x, y + r);",
                "+        cs.curveTo(x + magic, y + r, x + r, y + magic, x + r, y);",
                "+        cs.curveTo(x + r, y - magic, x + magic, y - r, x, y - r);",
                "+        cs.curveTo(x - magic, y - r, x - r, y - magic, x - r, y);",
                "+        cs.curveTo(x - r, y + magic, x - magic, y + r, x, y + r);",
                "+        cs.closePath();",
                "+    }",
                "+",
                "     /**",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "index 36bf7552c..ac6ef2215 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "@@ -36,3 +36,2 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "-    static final double ARROW_ANGLE = Math.toRadians(30);",
                "     static final int FONT_SIZE = 9;",
                "@@ -253,6 +252,5 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "-                // do this here and not before showing the text, or the text would appear in the",
                "-                // interior color",
                "+                // paint the styles here and not before showing the text, or the text would appear",
                "+                // with the interior color",
                "                 boolean hasBackground = cs.setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "-                ",
                "                 drawStyle(annotation.getStartPointEndingStyle(), cs, 0, y, ab.width, hasStroke, hasBackground);",
                "@@ -267,137 +265,2 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "-    private void drawStyle(String style, final PDAppearanceContentStream cs, float x, float y,",
                "-                           float width, boolean hasStroke, boolean hasBackground) throws IOException",
                "-    {",
                "-        switch (style)",
                "-        {",
                "-            case PDAnnotationLine.LE_OPEN_ARROW:",
                "-            case PDAnnotationLine.LE_CLOSED_ARROW:",
                "-                if (Float.compare(x, 0) != 0)",
                "-                {",
                "-                    // ending",
                "-                    drawArrow(cs, x - width, y, -width * 9);",
                "-                }",
                "-                else",
                "-                {",
                "-                    // start",
                "-                    drawArrow(cs, width, y, width * 9);",
                "-                }",
                "-                if (PDAnnotationLine.LE_CLOSED_ARROW.equals(style))",
                "-                {",
                "-                    cs.closePath();",
                "-                }",
                "-                break;",
                "-            case PDAnnotationLine.LE_BUTT:",
                "-                cs.moveTo(x, y - width * 3);",
                "-                cs.lineTo(x, y + width * 3);",
                "-                break;",
                "-            case PDAnnotationLine.LE_DIAMOND:",
                "-                drawDiamond(cs, x, y, width * 3);",
                "-                break;",
                "-            case PDAnnotationLine.LE_SQUARE:",
                "-                cs.addRect(x - width * 3, y - width * 3, width * 6, width * 6);",
                "-                break;",
                "-            case PDAnnotationLine.LE_CIRCLE:",
                "-                addCircle(cs, x, y, width * 3);",
                "-                break;",
                "-            case PDAnnotationLine.LE_R_OPEN_ARROW:",
                "-            case PDAnnotationLine.LE_R_CLOSED_ARROW:",
                "-                if (Float.compare(x, 0) != 0)",
                "-                {",
                "-                    // ending",
                "-                    drawArrow(cs, x + width, y, width * 9);",
                "-                }",
                "-                else",
                "-                {",
                "-                    // start",
                "-                    drawArrow(cs, -width, y, -width * 9);",
                "-                }",
                "-                if (PDAnnotationLine.LE_R_CLOSED_ARROW.equals(style))",
                "-                {",
                "-                    cs.closePath();",
                "-                }",
                "-                break;",
                "-            case PDAnnotationLine.LE_SLASH:",
                "-                // the line is 18 x linewidth at an angle of 60\u00c2\u00b0",
                "-                cs.moveTo(x + (float) (Math.cos(Math.toRadians(60)) * width * 9),",
                "-                          y + (float) (Math.sin(Math.toRadians(60)) * width * 9));",
                "-                cs.lineTo(x + (float) (Math.cos(Math.toRadians(240)) * width * 9),",
                "-                          y + (float) (Math.sin(Math.toRadians(240)) * width * 9));",
                "-                break;",
                "-            default:",
                "-                break;",
                "-        }",
                "-        if (INTERIOR_COLOR_STYLES.contains(style))",
                "-        {",
                "-            cs.drawShape(width, hasStroke, hasBackground);",
                "-        }",
                "-        else if (!PDAnnotationLine.LE_NONE.equals(style))",
                "-        {",
                "-            // need to do this separately, because sometimes /IC is set anyway",
                "-            cs.drawShape(width, hasStroke, false);",
                "-        }",
                "-    }",
                "-",
                "-    /**",
                "-     * Add the two arms of a horizontal arrow.",
                "-     * ",
                "-     * @param cs Content stream",
                "-     * @param x",
                "-     * @param y",
                "-     * @param len The arm length. Positive goes to the right, negative goes to the left.",
                "-     * ",
                "-     * @throws IOException If the content stream could not be written",
                "-     */",
                "-    private void drawArrow(PDAppearanceContentStream cs, float x, float y, float len) throws IOException",
                "-    {",
                "-        // strategy for arrows: angle 30\u00c2\u00b0, arrow arm length = 9 * line width",
                "-        // cos(angle) = x position",
                "-        // sin(angle) = y position",
                "-        // this comes very close to what Adobe is doing",
                "-        cs.moveTo(x + (float) (Math.cos(ARROW_ANGLE) * len), y + (float) (Math.sin(ARROW_ANGLE) * len));",
                "-        cs.lineTo(x, y);",
                "-        cs.lineTo(x + (float) (Math.cos(ARROW_ANGLE) * len), y - (float) (Math.sin(ARROW_ANGLE) * len));",
                "-    }",
                "-",
                "-    /**",
                "-     * Add a square diamond shape (corner on top) to the path.",
                "-     *",
                "-     * @param cs Content stream",
                "-     * @param x",
                "-     * @param y",
                "-     * @param r Radius (to a corner)",
                "-     * ",
                "-     * @throws IOException If the content stream could not be written",
                "-     */",
                "-    private void drawDiamond(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "-    {",
                "-        cs.moveTo(x - r, y);",
                "-        cs.lineTo(x, y + r);",
                "-        cs.lineTo(x + r, y);",
                "-        cs.lineTo(x, y - r);",
                "-        cs.closePath();",
                "-    }",
                "-",
                "-    /**",
                "-     * Add a circle shape to the path.",
                "-     *",
                "-     * @param cs Content stream",
                "-     * @param x",
                "-     * @param y",
                "-     * @param r Radius",
                "-     * ",
                "-     * @throws IOException If the content stream could not be written",
                "-     */",
                "-    private void addCircle(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "-    {",
                "-        // http://stackoverflow.com/a/2007782/535646",
                "-        float magic = r * 0.551784f;",
                "-        cs.moveTo(x, y + r);",
                "-        cs.curveTo(x + magic, y + r, x + r, y + magic, x + r, y);",
                "-        cs.curveTo(x + r, y - magic, x + magic, y - r, x, y - r);",
                "-        cs.curveTo(x - magic, y - r, x - r, y - magic, x - r, y);",
                "-        cs.curveTo(x - r, y + magic, x - magic, y + r, x, y + r);",
                "-        cs.closePath();",
                "-    }",
                "-",
                "     @Override",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "index 74f4bfc06..ebfa3b402 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "@@ -30,7 +30,4 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline;",
                " import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "-import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine;",
                " import static org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine.LE_NONE;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary;",
                "-import static org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler.INTERIOR_COLOR_STYLES;",
                "-import static org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLineAppearanceHandler.ARROW_ANGLE;",
                " import org.apache.pdfbox.util.Matrix;",
                "@@ -159,3 +156,3 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "-                // this must be done after polyline draw, to avoid line crossing a filled shape",
                "+                // paint the styles here and after polyline draw, to avoid line crossing a filled shape",
                "                 if (!LE_NONE.equals(annotation.getStartPointEndingStyle()))",
                "@@ -249,140 +246,2 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "     }",
                "-",
                "-    //TODO refactor to remove double code drawStyle and related",
                "-    // (100% copied from line handler)",
                "-",
                "-    private void drawStyle(String style, final PDAppearanceContentStream cs, float x, float y,",
                "-                           float width, boolean hasStroke, boolean hasBackground) throws IOException",
                "-    {",
                "-        switch (style)",
                "-        {",
                "-            case PDAnnotationLine.LE_OPEN_ARROW:",
                "-            case PDAnnotationLine.LE_CLOSED_ARROW:",
                "-                if (Float.compare(x, 0) != 0)",
                "-                {",
                "-                    // ending",
                "-                    drawArrow(cs, x - width, y, -width * 9);",
                "-                }",
                "-                else",
                "-                {",
                "-                    // start",
                "-                    drawArrow(cs, width, y, width * 9);",
                "-                }",
                "-                if (PDAnnotationLine.LE_CLOSED_ARROW.equals(style))",
                "-                {",
                "-                    cs.closePath();",
                "-                }",
                "-                break;",
                "-            case PDAnnotationLine.LE_BUTT:",
                "-                cs.moveTo(x, y - width * 3);",
                "-                cs.lineTo(x, y + width * 3);",
                "-                break;",
                "-            case PDAnnotationLine.LE_DIAMOND:",
                "-                drawDiamond(cs, x, y, width * 3);",
                "-                break;",
                "-            case PDAnnotationLine.LE_SQUARE:",
                "-                cs.addRect(x - width * 3, y - width * 3, width * 6, width * 6);",
                "-                break;",
                "-            case PDAnnotationLine.LE_CIRCLE:",
                "-                addCircle(cs, x, y, width * 3);",
                "-                break;",
                "-            case PDAnnotationLine.LE_R_OPEN_ARROW:",
                "-            case PDAnnotationLine.LE_R_CLOSED_ARROW:",
                "-                if (Float.compare(x, 0) != 0)",
                "-                {",
                "-                    // ending",
                "-                    drawArrow(cs, x + width, y, width * 9);",
                "-                }",
                "-                else",
                "-                {",
                "-                    // start",
                "-                    drawArrow(cs, -width, y, -width * 9);",
                "-                }",
                "-                if (PDAnnotationLine.LE_R_CLOSED_ARROW.equals(style))",
                "-                {",
                "-                    cs.closePath();",
                "-                }",
                "-                break;",
                "-            case PDAnnotationLine.LE_SLASH:",
                "-                // the line is 18 x linewidth at an angle of 60\u00c2\u00b0",
                "-                cs.moveTo(x + (float) (Math.cos(Math.toRadians(60)) * width * 9),",
                "-                          y + (float) (Math.sin(Math.toRadians(60)) * width * 9));",
                "-                cs.lineTo(x + (float) (Math.cos(Math.toRadians(240)) * width * 9),",
                "-                          y + (float) (Math.sin(Math.toRadians(240)) * width * 9));",
                "-                break;",
                "-            default:",
                "-                break;",
                "-        }",
                "-        if (INTERIOR_COLOR_STYLES.contains(style))",
                "-        {",
                "-            cs.drawShape(width, hasStroke, hasBackground);",
                "-        }",
                "-        else if (!PDAnnotationLine.LE_NONE.equals(style))",
                "-        {",
                "-            // need to do this separately, because sometimes /IC is set anyway",
                "-            cs.drawShape(width, hasStroke, false);",
                "-        }",
                "-    }",
                "-",
                "-    /**",
                "-     * Add the two arms of a horizontal arrow.",
                "-     * ",
                "-     * @param cs Content stream",
                "-     * @param x",
                "-     * @param y",
                "-     * @param len The arm length. Positive goes to the right, negative goes to the left.",
                "-     * ",
                "-     * @throws IOException If the content stream could not be written",
                "-     */",
                "-    private void drawArrow(PDAppearanceContentStream cs, float x, float y, float len) throws IOException",
                "-    {",
                "-        // strategy for arrows: angle 30\u00c2\u00b0, arrow arm length = 9 * line width",
                "-        // cos(angle) = x position",
                "-        // sin(angle) = y position",
                "-        // this comes very close to what Adobe is doing",
                "-        cs.moveTo(x + (float) (Math.cos(ARROW_ANGLE) * len), y + (float) (Math.sin(ARROW_ANGLE) * len));",
                "-        cs.lineTo(x, y);",
                "-        cs.lineTo(x + (float) (Math.cos(ARROW_ANGLE) * len), y - (float) (Math.sin(ARROW_ANGLE) * len));",
                "-    }",
                "-",
                "-    /**",
                "-     * Add a square diamond shape (corner on top) to the path.",
                "-     *",
                "-     * @param cs Content stream",
                "-     * @param x",
                "-     * @param y",
                "-     * @param r Radius (to a corner)",
                "-     * ",
                "-     * @throws IOException If the content stream could not be written",
                "-     */",
                "-    private void drawDiamond(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "-    {",
                "-        cs.moveTo(x - r, y);",
                "-        cs.lineTo(x, y + r);",
                "-        cs.lineTo(x + r, y);",
                "-        cs.lineTo(x, y - r);",
                "-        cs.closePath();",
                "-    }",
                "-",
                "-    /**",
                "-     * Add a circle shape to the path.",
                "-     *",
                "-     * @param cs Content stream",
                "-     * @param x",
                "-     * @param y",
                "-     * @param r Radius",
                "-     * ",
                "-     * @throws IOException If the content stream could not be written",
                "-     */",
                "-    private void addCircle(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "-    {",
                "-        // http://stackoverflow.com/a/2007782/535646",
                "-        float magic = r * 0.551784f;",
                "-        cs.moveTo(x, y + r);",
                "-        cs.curveTo(x + magic, y + r, x + r, y + magic, x + r, y);",
                "-        cs.curveTo(x + r, y - magic, x + magic, y - r, x, y - r);",
                "-        cs.curveTo(x - magic, y - r, x - r, y - magic, x - r, y);",
                "-        cs.curveTo(x - r, y + magic, x - magic, y + r, x, y + r);",
                "-        cs.closePath();",
                "-    }",
                " }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "656ad4104ce39521d4040b08826b9bf729a91c57",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523900987,
            "hunks": 17,
            "message": "[maven-release-plugin] prepare release 1.8.14 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/1.8@1829305 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/ant/pom.xml b/ant/pom.xml",
                "index 8ac09774b..a748e9097 100644",
                "--- a/ant/pom.xml",
                "+++ b/ant/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.14-SNAPSHOT</version>",
                "+    <version>1.8.14</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/app/pom.xml b/app/pom.xml",
                "index a77629018..d92ee8482 100644",
                "--- a/app/pom.xml",
                "+++ b/app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.14-SNAPSHOT</version>",
                "+    <version>1.8.14</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/examples/pom.xml b/examples/pom.xml",
                "index 3bfb8beff..6934a644d 100644",
                "--- a/examples/pom.xml",
                "+++ b/examples/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.14-SNAPSHOT</version>",
                "+    <version>1.8.14</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/fontbox/pom.xml b/fontbox/pom.xml",
                "index 2713b99dc..ac21d2020 100644",
                "--- a/fontbox/pom.xml",
                "+++ b/fontbox/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.14-SNAPSHOT</version>",
                "+    <version>1.8.14</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/jempbox/pom.xml b/jempbox/pom.xml",
                "index ad65c38fd..2d8ea5c43 100644",
                "--- a/jempbox/pom.xml",
                "+++ b/jempbox/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.14-SNAPSHOT</version>",
                "+    <version>1.8.14</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/lucene/pom.xml b/lucene/pom.xml",
                "index 22f3efc4e..4ed039065 100644",
                "--- a/lucene/pom.xml",
                "+++ b/lucene/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.14-SNAPSHOT</version>",
                "+    <version>1.8.14</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index f50b5fb99..677b6a4b0 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -31,3 +31,3 @@",
                "   <artifactId>pdfbox-parent</artifactId>",
                "-  <version>1.8.14-SNAPSHOT</version>",
                "+  <version>1.8.14</version>",
                "   <packaging>pom</packaging>",
                "@@ -321,5 +321,5 @@",
                "   <scm>",
                "-    <connection>scm:svn:http://svn.apache.org/repos/asf/maven/pom/branches/1.8/pdfbox-parent</connection>",
                "-    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/maven/pom/branches/1.8/pdfbox-parent</developerConnection>",
                "-    <url>http://svn.apache.org/viewvc/maven/pom/branches/1.8/pdfbox-parent</url>",
                "+    <connection>scm:svn:http://svn.apache.org/repos/asf/maven/pom/tags/1.8.14/pdfbox-parent</connection>",
                "+    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/maven/pom/tags/1.8.14/pdfbox-parent</developerConnection>",
                "+    <url>http://svn.apache.org/viewvc/maven/pom/tags/1.8.14/pdfbox-parent</url>",
                "   </scm>",
                "diff --git a/pdfbox/pom.xml b/pdfbox/pom.xml",
                "index 7c050baff..03c86c52b 100644",
                "--- a/pdfbox/pom.xml",
                "+++ b/pdfbox/pom.xml",
                "@@ -25,3 +25,3 @@",
                "         <artifactId>pdfbox-parent</artifactId>",
                "-        <version>1.8.14-SNAPSHOT</version>",
                "+        <version>1.8.14</version>",
                "         <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index 71f4fcc77..bcd3617a6 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.14-SNAPSHOT</version>",
                "+    <version>1.8.14</version>",
                "     <relativePath>parent/pom.xml</relativePath>",
                "@@ -36,8 +36,8 @@",
                "     <connection>",
                "-      scm:svn:http://svn.apache.org/repos/asf/pdfbox/branches/1.8",
                "+      scm:svn:http://svn.apache.org/repos/asf/pdfbox/tags/1.8.14",
                "     </connection>",
                "     <developerConnection>",
                "-      scm:svn:https://svn.apache.org/repos/asf/pdfbox/branches/1.8",
                "+      scm:svn:https://svn.apache.org/repos/asf/pdfbox/tags/1.8.14",
                "     </developerConnection>",
                "-    <url>http://svn.apache.org/viewvc/pdfbox/branches/1.8</url>",
                "+    <url>http://svn.apache.org/viewvc/pdfbox/tags/1.8.14</url>",
                "   </scm>",
                "diff --git a/preflight-app/pom.xml b/preflight-app/pom.xml",
                "index 48ba66e1b..49464a5ae 100644",
                "--- a/preflight-app/pom.xml",
                "+++ b/preflight-app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.14-SNAPSHOT</version>",
                "+    <version>1.8.14</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/preflight/pom.xml b/preflight/pom.xml",
                "index 7731012a7..15e8ec381 100644",
                "--- a/preflight/pom.xml",
                "+++ b/preflight/pom.xml",
                "@@ -28,3 +28,3 @@",
                " \t\t<artifactId>pdfbox-parent</artifactId>",
                "-\t\t<version>1.8.14-SNAPSHOT</version>",
                "+\t\t<version>1.8.14</version>",
                " \t\t<relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/war/pom.xml b/war/pom.xml",
                "index 0bf5f0e7b..bedaa496e 100644",
                "--- a/war/pom.xml",
                "+++ b/war/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.14-SNAPSHOT</version>",
                "+    <version>1.8.14</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/xmpbox/pom.xml b/xmpbox/pom.xml",
                "index 039db8267..59af6eb8d 100644",
                "--- a/xmpbox/pom.xml",
                "+++ b/xmpbox/pom.xml",
                "@@ -29,3 +29,3 @@",
                " \t\t<artifactId>pdfbox-parent</artifactId>",
                "-\t\t<version>1.8.14-SNAPSHOT</version>",
                "+\t\t<version>1.8.14</version>",
                " \t\t<relativePath>../parent/pom.xml</relativePath>"
            ],
            "changed_files": [
                "ant/pom.xml",
                "app/pom.xml",
                "examples/pom.xml",
                "fontbox/pom.xml",
                "jempbox/pom.xml",
                "lucene/pom.xml",
                "parent/pom.xml",
                "pdfbox/pom.xml",
                "pom.xml",
                "preflight-app/pom.xml",
                "preflight/pom.xml",
                "war/pom.xml",
                "xmpbox/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [
                [
                    "no-tag",
                    "d24d2fa3234b678eec36c45bb0bb8d38b46dedc6"
                ]
            ],
            "tags": [
                "1.8.14",
                "1.8.15",
                "1.8.16",
                "1.8.17"
            ],
            "matched_rules": [
                {
                    "id": "COMMIT_HAS_TWINS",
                    "message": "This commit has one or more twins.",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "97568988e2514f1c5aced9c93cef82c0a408cdf6",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526743307,
            "hunks": 5,
            "message": "PDFBOX-3353: move styles sets up to abstract class because it will also be used by polyline handler git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831900 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "index 94556f985..72626ee53 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "@@ -21,2 +21,5 @@ import java.awt.geom.AffineTransform;",
                " import java.io.IOException;",
                "+import java.util.Collections;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                "@@ -30,2 +33,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationSquareCircle",
                " import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary;",
                "@@ -44,3 +48,35 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "     private final PDAnnotation annotation;",
                "-    ",
                "+",
                "+    /**",
                "+     * Line ending styles where the line has to be drawn shorter (minus line width).",
                "+     */",
                "+    protected static final Set<String> SHORT_STYLES = createShortStyles();",
                "+",
                "+    /**",
                "+     * Line ending styles where there is an interior color.",
                "+     */",
                "+    protected static final Set<String> INTERIOR_COLOR_STYLES = createInteriorColorStyles();",
                "+",
                "+    private static Set<String> createShortStyles()",
                "+    {",
                "+        Set<String> shortStyles = new HashSet<>();",
                "+        shortStyles.add(PDAnnotationLine.LE_OPEN_ARROW);",
                "+        shortStyles.add(PDAnnotationLine.LE_CLOSED_ARROW);",
                "+        shortStyles.add(PDAnnotationLine.LE_SQUARE);",
                "+        shortStyles.add(PDAnnotationLine.LE_CIRCLE);",
                "+        shortStyles.add(PDAnnotationLine.LE_DIAMOND);",
                "+        return Collections.unmodifiableSet(shortStyles);",
                "+    }",
                "+",
                "+    private static Set<String> createInteriorColorStyles()",
                "+    {",
                "+        Set<String> interiorColorStyles = new HashSet<>();",
                "+        interiorColorStyles.add(PDAnnotationLine.LE_CLOSED_ARROW);",
                "+        interiorColorStyles.add(PDAnnotationLine.LE_CIRCLE);",
                "+        interiorColorStyles.add(PDAnnotationLine.LE_DIAMOND);",
                "+        interiorColorStyles.add(PDAnnotationLine.LE_R_CLOSED_ARROW);",
                "+        interiorColorStyles.add(PDAnnotationLine.LE_SQUARE);",
                "+        return Collections.unmodifiableSet(interiorColorStyles);",
                "+    }",
                "+",
                "     public PDAbstractAppearanceHandler(PDAnnotation annotation)",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "index 51aaca1b4..340de6643 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "@@ -19,4 +19,2 @@ package org.apache.pdfbox.pdmodel.interactive.annotation.handlers;",
                " import java.io.IOException;",
                "-import java.util.HashSet;",
                "-import java.util.Set;",
                " import org.apache.commons.logging.Log;",
                "@@ -41,27 +39,2 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "-    /**",
                "-     * styles where the line has to be drawn shorter (minus line width).",
                "-     */",
                "-    private static final Set<String> SHORT_STYLES = new HashSet<>();",
                "-",
                "-    /**",
                "-     * styles where there is an interior color.",
                "-     */",
                "-    private static final Set<String> INTERIOR_COLOR_STYLES = new HashSet<>();",
                "-",
                "-    static",
                "-    {",
                "-        SHORT_STYLES.add(PDAnnotationLine.LE_OPEN_ARROW);",
                "-        SHORT_STYLES.add(PDAnnotationLine.LE_CLOSED_ARROW);",
                "-        SHORT_STYLES.add(PDAnnotationLine.LE_SQUARE);",
                "-        SHORT_STYLES.add(PDAnnotationLine.LE_CIRCLE);",
                "-        SHORT_STYLES.add(PDAnnotationLine.LE_DIAMOND);",
                "-",
                "-        INTERIOR_COLOR_STYLES.add(PDAnnotationLine.LE_CLOSED_ARROW);",
                "-        INTERIOR_COLOR_STYLES.add(PDAnnotationLine.LE_CIRCLE);",
                "-        INTERIOR_COLOR_STYLES.add(PDAnnotationLine.LE_DIAMOND);",
                "-        INTERIOR_COLOR_STYLES.add(PDAnnotationLine.LE_R_CLOSED_ARROW);",
                "-        INTERIOR_COLOR_STYLES.add(PDAnnotationLine.LE_SQUARE);",
                "-    }",
                "-",
                "     public PDLineAppearanceHandler(PDAnnotation annotation)"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c745b2217ecc5d60c625321db56a4e49173f78e8",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523478190,
            "hunks": 1,
            "message": "PDFBOX-4071: add option to use KCMS git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/1.8@1828933 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/pom.xml b/pdfbox/pom.xml",
                "index 2e5cadccd..7c050baff 100644",
                "--- a/pdfbox/pom.xml",
                "+++ b/pdfbox/pom.xml",
                "@@ -136,3 +136,3 @@",
                "                 <configuration>",
                "-                    <argLine>-Xmx128m</argLine>",
                "+                    <argLine>-Xmx128m -Dsun.java2d.cmm=sun.java2d.cmm.kcms.KcmsServiceProvider</argLine>",
                "                     <includes>"
            ],
            "changed_files": [
                "pdfbox/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.8.14",
                "1.8.15",
                "1.8.16",
                "1.8.17"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d7f5d548ac1d0bcb6443d5642036f7bee719684d",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529687862,
            "hunks": 1,
            "message": "PDFBOX-3353: add constants git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834147 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "index 913c49a0e..4dcf1b9e8 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "@@ -99,3 +99,18 @@ public class PDAnnotationText extends PDAnnotationMarkup",
                "      */",
                "-    public static final String NAME_RIGHT_POINTER = \"RightPointer\";        ",
                "+    public static final String NAME_RIGHT_POINTER = \"RightPointer\";",
                "+",
                "+    /**",
                "+     * Constant for the name of a crosshairs annotation.",
                "+     */",
                "+    public static final String NAME_UP_ARROW = \"UpArrow\";        ",
                "+",
                "+    /**",
                "+     * Constant for the name of a crosshairs annotation.",
                "+     */",
                "+    public static final String NAME_UP_LEFT_ARROW = \"UpLeftArrow\";        ",
                "+",
                "+    /**",
                "+     * Constant for the name of a crosshairs annotation.",
                "+     */",
                "+    public static final String NAME_CROSS_HAIRS = \"CrossHairs\";        "
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "dab190b906da7d0b2f30523a2b461d37f7d12dff",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526757317,
            "hunks": 15,
            "message": "PDFBOX-3353: draw line endings git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831914 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "index 7be318260..74f4bfc06 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "@@ -30,3 +30,8 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolyline;",
                " import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine;",
                "+import static org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationLine.LE_NONE;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDBorderStyleDictionary;",
                "+import static org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAbstractAppearanceHandler.INTERIOR_COLOR_STYLES;",
                "+import static org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDLineAppearanceHandler.ARROW_ANGLE;",
                "+import org.apache.pdfbox.util.Matrix;",
                "@@ -86,6 +91,7 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "         }",
                "-        rect.setLowerLeftX(Math.min(minX - ab.width / 2, rect.getLowerLeftX()));",
                "-        rect.setLowerLeftY(Math.min(minY - ab.width / 2, rect.getLowerLeftY()));",
                "-        rect.setUpperRightX(Math.max(maxX + ab.width, rect.getUpperRightX()));",
                "-        rect.setUpperRightY(Math.max(maxY + ab.width, rect.getUpperRightY()));",
                "+        // arrow length is 9 * width at about 30\u00c2\u00b0 => 10 * width seems to be enough",
                "+        rect.setLowerLeftX(Math.min(minX - ab.width * 10, rect.getLowerLeftX()));",
                "+        rect.setLowerLeftY(Math.min(minY - ab.width * 10, rect.getLowerLeftY()));",
                "+        rect.setUpperRightX(Math.max(maxX + ab.width * 10, rect.getUpperRightX()));",
                "+        rect.setUpperRightY(Math.max(maxY + ab.width * 10, rect.getUpperRightY()));",
                "         annotation.setRectangle(rect);",
                "@@ -96,3 +102,5 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "             {",
                "+                boolean hasBackground = cs.setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "                 setOpacity(cs, annotation.getConstantOpacity());",
                "+                boolean hasStroke = cs.setStrokingColorOnDemand(color);",
                "@@ -114,6 +122,5 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                             // modify coordinate to shorten the segment",
                "+                            // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "                             float x1 = pathsArray[2];",
                "                             float y1 = pathsArray[3];",
                "-",
                "-                            // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "                             float len = (float) (Math.sqrt(Math.pow(x - x1, 2) + Math.pow(y - y1, 2)));",
                "@@ -127,11 +134,11 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     }",
                "-                    else if (i == pathsArray.length / 2 - 1)",
                "+                    else",
                "                     {",
                "-                        if (SHORT_STYLES.contains(annotation.getEndPointEndingStyle()))",
                "+                        if (i == pathsArray.length / 2 - 1 &&",
                "+                            SHORT_STYLES.contains(annotation.getEndPointEndingStyle()))",
                "                         {",
                "                             // modify coordinate to shorten the segment",
                "+                            // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "                             float x0 = pathsArray[pathsArray.length - 4];",
                "                             float y0 = pathsArray[pathsArray.length - 3];",
                "-",
                "-                            // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "                             float len = (float) (Math.sqrt(Math.pow(x0 - x, 2) + Math.pow(y0 - y, 2)));",
                "@@ -145,15 +152,37 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     }",
                "-                    else",
                "-                    {",
                "-                        cs.lineTo(x, y);",
                "-                    }",
                "                 }",
                "-                //TODO line endings (LE) are missing",
                "-                // How it could be done by reusing some of the code from the line handler",
                "-                // 1) do a transform so that first and last \"arms\" are imagined flat",
                "-                // (like in line handler)",
                "-                // 2) refactor + reuse the line handler code that draws the ending shapes",
                "+                cs.stroke();",
                "+",
                "+                // do a transform so that first and last \"arms\" are imagined flat, like in line handler",
                "                 // the alternative would be to apply the transform to the LE shapes directly,",
                "                 // which would be more work and produce code difficult to understand",
                "-                cs.stroke();",
                "+",
                "+                // this must be done after polyline draw, to avoid line crossing a filled shape",
                "+                if (!LE_NONE.equals(annotation.getStartPointEndingStyle()))",
                "+                {",
                "+                    // check only needed to avoid q cm Q if LE_NONE",
                "+                    float x2 = pathsArray[2];",
                "+                    float y2 = pathsArray[3];",
                "+                    float x1 = pathsArray[0];",
                "+                    float y1 = pathsArray[1];",
                "+                    cs.saveGraphicsState();",
                "+                    double angle = Math.atan2(y2 - y1, x2 - x1);",
                "+                    cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "+                    drawStyle(annotation.getStartPointEndingStyle(), cs, 0, 0, ab.width, hasStroke, hasBackground);",
                "+                    cs.restoreGraphicsState();",
                "+                }",
                "+",
                "+                if (!LE_NONE.equals(annotation.getEndPointEndingStyle()))",
                "+                {",
                "+                    // check only needed to avoid q cm Q if LE_NONE",
                "+                    float x1 = pathsArray[pathsArray.length - 4];",
                "+                    float y1 = pathsArray[pathsArray.length - 3];",
                "+                    float x2 = pathsArray[pathsArray.length - 2];",
                "+                    float y2 = pathsArray[pathsArray.length - 1];",
                "+                    // save / restore not needed because it's the last one",
                "+                    double angle = Math.atan2(y2 - y1, x2 - x1);",
                "+                    cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "+                    float lineLength = (float) Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));",
                "+                    drawStyle(annotation.getEndPointEndingStyle(), cs, lineLength, 0, ab.width, hasStroke, hasBackground);",
                "+                }",
                "             }",
                "@@ -220,2 +249,140 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "     }",
                "+",
                "+    //TODO refactor to remove double code drawStyle and related",
                "+    // (100% copied from line handler)",
                "+",
                "+    private void drawStyle(String style, final PDAppearanceContentStream cs, float x, float y,",
                "+                           float width, boolean hasStroke, boolean hasBackground) throws IOException",
                "+    {",
                "+        switch (style)",
                "+        {",
                "+            case PDAnnotationLine.LE_OPEN_ARROW:",
                "+            case PDAnnotationLine.LE_CLOSED_ARROW:",
                "+                if (Float.compare(x, 0) != 0)",
                "+                {",
                "+                    // ending",
                "+                    drawArrow(cs, x - width, y, -width * 9);",
                "+                }",
                "+                else",
                "+                {",
                "+                    // start",
                "+                    drawArrow(cs, width, y, width * 9);",
                "+                }",
                "+                if (PDAnnotationLine.LE_CLOSED_ARROW.equals(style))",
                "+                {",
                "+                    cs.closePath();",
                "+                }",
                "+                break;",
                "+            case PDAnnotationLine.LE_BUTT:",
                "+                cs.moveTo(x, y - width * 3);",
                "+                cs.lineTo(x, y + width * 3);",
                "+                break;",
                "+            case PDAnnotationLine.LE_DIAMOND:",
                "+                drawDiamond(cs, x, y, width * 3);",
                "+                break;",
                "+            case PDAnnotationLine.LE_SQUARE:",
                "+                cs.addRect(x - width * 3, y - width * 3, width * 6, width * 6);",
                "+                break;",
                "+            case PDAnnotationLine.LE_CIRCLE:",
                "+                addCircle(cs, x, y, width * 3);",
                "+                break;",
                "+            case PDAnnotationLine.LE_R_OPEN_ARROW:",
                "+            case PDAnnotationLine.LE_R_CLOSED_ARROW:",
                "+                if (Float.compare(x, 0) != 0)",
                "+                {",
                "+                    // ending",
                "+                    drawArrow(cs, x + width, y, width * 9);",
                "+                }",
                "+                else",
                "+                {",
                "+                    // start",
                "+                    drawArrow(cs, -width, y, -width * 9);",
                "+                }",
                "+                if (PDAnnotationLine.LE_R_CLOSED_ARROW.equals(style))",
                "+                {",
                "+                    cs.closePath();",
                "+                }",
                "+                break;",
                "+            case PDAnnotationLine.LE_SLASH:",
                "+                // the line is 18 x linewidth at an angle of 60\u00c2\u00b0",
                "+                cs.moveTo(x + (float) (Math.cos(Math.toRadians(60)) * width * 9),",
                "+                          y + (float) (Math.sin(Math.toRadians(60)) * width * 9));",
                "+                cs.lineTo(x + (float) (Math.cos(Math.toRadians(240)) * width * 9),",
                "+                          y + (float) (Math.sin(Math.toRadians(240)) * width * 9));",
                "+                break;",
                "+            default:",
                "+                break;",
                "+        }",
                "+        if (INTERIOR_COLOR_STYLES.contains(style))",
                "+        {",
                "+            cs.drawShape(width, hasStroke, hasBackground);",
                "+        }",
                "+        else if (!PDAnnotationLine.LE_NONE.equals(style))",
                "+        {",
                "+            // need to do this separately, because sometimes /IC is set anyway",
                "+            cs.drawShape(width, hasStroke, false);",
                "+        }",
                "+    }",
                "+",
                "+    /**",
                "+     * Add the two arms of a horizontal arrow.",
                "+     * ",
                "+     * @param cs Content stream",
                "+     * @param x",
                "+     * @param y",
                "+     * @param len The arm length. Positive goes to the right, negative goes to the left.",
                "+     * ",
                "+     * @throws IOException If the content stream could not be written",
                "+     */",
                "+    private void drawArrow(PDAppearanceContentStream cs, float x, float y, float len) throws IOException",
                "+    {",
                "+        // strategy for arrows: angle 30\u00c2\u00b0, arrow arm length = 9 * line width",
                "+        // cos(angle) = x position",
                "+        // sin(angle) = y position",
                "+        // this comes very close to what Adobe is doing",
                "+        cs.moveTo(x + (float) (Math.cos(ARROW_ANGLE) * len), y + (float) (Math.sin(ARROW_ANGLE) * len));",
                "+        cs.lineTo(x, y);",
                "+        cs.lineTo(x + (float) (Math.cos(ARROW_ANGLE) * len), y - (float) (Math.sin(ARROW_ANGLE) * len));",
                "+    }",
                "+",
                "+    /**",
                "+     * Add a square diamond shape (corner on top) to the path.",
                "+     *",
                "+     * @param cs Content stream",
                "+     * @param x",
                "+     * @param y",
                "+     * @param r Radius (to a corner)",
                "+     * ",
                "+     * @throws IOException If the content stream could not be written",
                "+     */",
                "+    private void drawDiamond(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "+    {",
                "+        cs.moveTo(x - r, y);",
                "+        cs.lineTo(x, y + r);",
                "+        cs.lineTo(x + r, y);",
                "+        cs.lineTo(x, y - r);",
                "+        cs.closePath();",
                "+    }",
                "+",
                "+    /**",
                "+     * Add a circle shape to the path.",
                "+     *",
                "+     * @param cs Content stream",
                "+     * @param x",
                "+     * @param y",
                "+     * @param r Radius",
                "+     * ",
                "+     * @throws IOException If the content stream could not be written",
                "+     */",
                "+    private void addCircle(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "+    {",
                "+        // http://stackoverflow.com/a/2007782/535646",
                "+        float magic = r * 0.551784f;",
                "+        cs.moveTo(x, y + r);",
                "+        cs.curveTo(x + magic, y + r, x + r, y + magic, x + r, y);",
                "+        cs.curveTo(x + r, y - magic, x + magic, y - r, x, y - r);",
                "+        cs.curveTo(x - magic, y - r, x - r, y - magic, x - r, y);",
                "+        cs.curveTo(x - r, y + magic, x - magic, y + r, x, y + r);",
                "+        cs.closePath();",
                "+    }",
                " }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "156003b56776cfeba3116b1f8a73337b297a1b13",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524336114,
            "hunks": 1,
            "message": "PDFBOX-4071: add override git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829741 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/HeaderTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/HeaderTable.java",
                "index 42c8b277d..a9ba6c9d4 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/HeaderTable.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/HeaderTable.java",
                "@@ -73,2 +73,3 @@ public class HeaderTable extends TTFTable",
                "      */",
                "+    @Override",
                "     public void read(TrueTypeFont ttf, TTFDataStream data) throws IOException"
            ],
            "changed_files": [
                "fontbox/src/main/java/org/apache/fontbox/ttf/HeaderTable.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "231a05e789db84f7653c7b07fe5b88b2054fea93",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532798312,
            "hunks": 16,
            "message": "PDFBOX-3353: special handling for very small widths: don't draw borders, but draw the line, line ending shapes must be calculated based on size 1 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1836936 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "index 3e7310564..ee03faee1 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "@@ -96,2 +96,7 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "+        // observed with diagonal line of AnnotationSample.Standard.pdf",
                "+        // for line endings, very small widths must be treated as size 1.",
                "+        // However the border of the line ending shapes is not drawn.",
                "+        float lineEndingSize = (ab.width < 1e-5) ? 1 : ab.width;",
                "+",
                "         // add/substract with, font height, and arrows",
                "@@ -100,6 +105,6 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "         //TODO find better way to calculate padding",
                "-        rect.setLowerLeftX(Math.min(minX - Math.max(ab.width * 10, Math.abs(llo+ll+lle)), rect.getLowerLeftX()));",
                "-        rect.setLowerLeftY(Math.min(minY - Math.max(ab.width * 10, Math.abs(llo+ll+lle)), rect.getLowerLeftY()));",
                "-        rect.setUpperRightX(Math.max(maxX + Math.max(ab.width * 10, Math.abs(llo+ll+lle)), rect.getUpperRightX()));",
                "-        rect.setUpperRightY(Math.max(maxY + Math.max(ab.width * 10, Math.abs(llo+ll+lle)), rect.getUpperRightY()));",
                "+        rect.setLowerLeftX(Math.min(minX - Math.max(lineEndingSize * 10, Math.abs(llo+ll+lle)), rect.getLowerLeftX()));",
                "+        rect.setLowerLeftY(Math.min(minY - Math.max(lineEndingSize * 10, Math.abs(llo+ll+lle)), rect.getLowerLeftY()));",
                "+        rect.setUpperRightX(Math.max(maxX + Math.max(lineEndingSize * 10, Math.abs(llo+ll+lle)), rect.getUpperRightX()));",
                "+        rect.setUpperRightY(Math.max(maxY + Math.max(lineEndingSize * 10, Math.abs(llo+ll+lle)), rect.getUpperRightY()));",
                "@@ -183,3 +188,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 {",
                "-                    cs.moveTo(ab.width, y);",
                "+                    cs.moveTo(lineEndingSize, y);",
                "                 }",
                "@@ -200,4 +205,4 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "-                    cs.lineTo(xOffset - ab.width, y);",
                "-                    cs.moveTo(lineLength - xOffset + ab.width, y);",
                "+                    cs.lineTo(xOffset - lineEndingSize, y);",
                "+                    cs.moveTo(lineLength - xOffset + lineEndingSize, y);",
                "                 }",
                "@@ -205,3 +210,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 {",
                "-                    cs.lineTo(lineLength - ab.width, y);",
                "+                    cs.lineTo(lineLength - lineEndingSize, y);",
                "                 }",
                "@@ -211,3 +216,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 }",
                "-                cs.drawShape(ab.width, hasStroke, false);",
                "+                cs.drawShape(lineEndingSize, hasStroke, false);",
                "@@ -233,3 +238,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     cs.lineTo(0 + lineLength / 2, y + captionVerticalOffset);",
                "-                    cs.drawShape(ab.width, hasStroke, false);",
                "+                    cs.drawShape(lineEndingSize, hasStroke, false);",
                "                 }",
                "@@ -240,3 +245,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 {",
                "-                    cs.moveTo(ab.width, y);",
                "+                    cs.moveTo(lineEndingSize, y);",
                "                 }",
                "@@ -248,3 +253,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 {",
                "-                    cs.lineTo(lineLength - ab.width, y);",
                "+                    cs.lineTo(lineLength - lineEndingSize, y);",
                "                 }",
                "@@ -254,6 +259,6 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 }",
                "-                cs.drawShape(ab.width, hasStroke, false);",
                "+                cs.drawShape(lineEndingSize, hasStroke, false);",
                "             }",
                "             cs.restoreGraphicsState();",
                "-",
                "+        ",
                "             // paint the styles here and not before showing the text, or the text would appear",
                "@@ -262,2 +267,10 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "+            // observed with diagonal line of file AnnotationSample.Standard.pdf",
                "+            // when width is very small, the border of the line ending shapes ",
                "+            // is not drawn.",
                "+            if (ab.width < 1e-5)",
                "+            {",
                "+                hasStroke = false;",
                "+            }",
                "+",
                "             // check for LE_NONE only needed to avoid q cm Q for that case",
                "@@ -269,3 +282,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "-                    drawStyle(annotation.getStartPointEndingStyle(), cs, 0, y, ab.width, hasStroke, hasBackground);",
                "+                    drawStyle(annotation.getStartPointEndingStyle(), cs, 0, y, lineEndingSize, hasStroke, hasBackground);",
                "                 }",
                "@@ -280,3 +293,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     cs.transform(Matrix.getTranslateInstance(xx1, yy1));",
                "-                    drawStyle(annotation.getStartPointEndingStyle(), cs, 0, 0, ab.width, hasStroke, hasBackground);",
                "+                    drawStyle(annotation.getStartPointEndingStyle(), cs, 0, 0, lineEndingSize, hasStroke, hasBackground);",
                "                 }",
                "@@ -296,3 +309,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     cs.transform(Matrix.getRotateInstance(angle, x1, y1));",
                "-                    drawStyle(annotation.getEndPointEndingStyle(), cs, lineLength, y, ab.width, hasStroke, hasBackground);",
                "+                    drawStyle(annotation.getEndPointEndingStyle(), cs, lineLength, y, lineEndingSize, hasStroke, hasBackground);",
                "                 }",
                "@@ -307,3 +320,3 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     cs.transform(Matrix.getTranslateInstance(xx2, yy2));",
                "-                    drawStyle(annotation.getEndPointEndingStyle(), cs, 0, 0, ab.width, hasStroke, hasBackground);",
                "+                    drawStyle(annotation.getEndPointEndingStyle(), cs, 0, 0, lineEndingSize, hasStroke, hasBackground);",
                "                 }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "273aa2a81340fcc982cd867d1d1776fcfb892575",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526743409,
            "hunks": 3,
            "message": "PDFBOX-3353: modify coordinate of line ending if there is a short style; don't do anything if path array is smaller than 4 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831901 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "index 160f39289..fe8ab0b7e 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "@@ -59,3 +59,3 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "         float[] pathsArray = annotation.getVertices();",
                "-        if (pathsArray == null)",
                "+        if (pathsArray == null || pathsArray.length < 4)",
                "         {",
                "@@ -111,4 +111,36 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     {",
                "+                        if (SHORT_STYLES.contains(annotation.getStartPointEndingStyle()))",
                "+                        {",
                "+                            // modify coordinate to shorten the segment",
                "+                            float x1 = pathsArray[2];",
                "+                            float y1 = pathsArray[3];",
                "+",
                "+                            // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "+                            float len = (float) (Math.sqrt(Math.pow(x - x1, 2) + Math.pow(y - y1, 2)));",
                "+                            if (Float.compare(len, 0) != 0)",
                "+                            {",
                "+                                x += (x1 - x) / len * ab.width;",
                "+                                y += (y1 - y) / len * ab.width;",
                "+                            }",
                "+                        }",
                "                         cs.moveTo(x, y);",
                "                     }",
                "+                    else if (i == pathsArray.length / 2 - 1)",
                "+                    {",
                "+                        if (SHORT_STYLES.contains(annotation.getEndPointEndingStyle()))",
                "+                        {",
                "+                            // modify coordinate to shorten the segment",
                "+                            float x0 = pathsArray[pathsArray.length - 4];",
                "+                            float y0 = pathsArray[pathsArray.length - 3];",
                "+",
                "+                            // https://stackoverflow.com/questions/7740507/extend-a-line-segment-a-specific-distance",
                "+                            float len = (float) (Math.sqrt(Math.pow(x0 - x, 2) + Math.pow(y0 - y, 2)));",
                "+                            if (Float.compare(len, 0) != 0)",
                "+                            {",
                "+                                x -= (x - x0) / len * ab.width;",
                "+                                y -= (y - y0) / len * ab.width;",
                "+                            }",
                "+                        }",
                "+                        cs.lineTo(x, y);",
                "+                    }",
                "                     else"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "594e42213d970aef4bec38d2e9802bef0a1df0e1",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528141979,
            "hunks": 1,
            "message": "PDFBOX-3353: add a //TODO for the work not done git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832888 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "index 00ba5c394..589cb7911 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "@@ -253,2 +253,5 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "             boolean hasBackground = cs.setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "+            //TODO support non-angled styles. This is more difficult than in the other handlers",
                "+            // because the lines do not always go from (x1,y1) to (x2,y2) due to the leader lines",
                "+            // when the \"y\" value above is not 0.",
                "             drawStyle(annotation.getStartPointEndingStyle(), cs, 0, y, ab.width, hasStroke, hasBackground);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "f26f397e05ef27763568566791449dac80e5657c",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1526748884,
            "hunks": 15,
            "message": "PDFBOX-3353: refactor, extract line ending style drawing git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831909 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "index 7bff8b71b..36bf7552c 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java",
                "@@ -256,110 +256,83 @@ public class PDLineAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 boolean hasBackground = cs.setNonStrokingColorOnDemand(annotation.getInteriorColor());",
                "-                String startPointEndingStyle = annotation.getStartPointEndingStyle();",
                "-                switch (startPointEndingStyle)",
                "+                ",
                "+                drawStyle(annotation.getStartPointEndingStyle(), cs, 0, y, ab.width, hasStroke, hasBackground);",
                "+                drawStyle(annotation.getEndPointEndingStyle(), cs, lineLength, y, ab.width, hasStroke, hasBackground);",
                "+            }",
                "+        }",
                "+        catch (IOException ex)",
                "+        {",
                "+            LOG.error(ex);",
                "+        }",
                "+    }",
                "+",
                "+    private void drawStyle(String style, final PDAppearanceContentStream cs, float x, float y,",
                "+                           float width, boolean hasStroke, boolean hasBackground) throws IOException",
                "+    {",
                "+        switch (style)",
                "+        {",
                "+            case PDAnnotationLine.LE_OPEN_ARROW:",
                "+            case PDAnnotationLine.LE_CLOSED_ARROW:",
                "+                if (Float.compare(x, 0) != 0)",
                "                 {",
                "-                    case PDAnnotationLine.LE_OPEN_ARROW:",
                "-                    case PDAnnotationLine.LE_CLOSED_ARROW:",
                "-                        drawArrow(cs, ab.width, y, ab.width * 9);",
                "-                        if (PDAnnotationLine.LE_CLOSED_ARROW.equals(startPointEndingStyle))",
                "-                        {",
                "-                            cs.closePath();",
                "-                        }",
                "-                        break;",
                "-                    case PDAnnotationLine.LE_BUTT:",
                "-                        cs.moveTo(0, y - ab.width * 3);",
                "-                        cs.lineTo(0, y + ab.width * 3);",
                "-                        break;",
                "-                    case PDAnnotationLine.LE_DIAMOND:",
                "-                        drawDiamond(cs, 0, y, ab.width * 3);",
                "-                        break;",
                "-                    case PDAnnotationLine.LE_SQUARE:",
                "-                        cs.addRect(0 - ab.width * 3, y - ab.width * 3, ab.width * 6, ab.width * 6);",
                "-                        break;",
                "-                    case PDAnnotationLine.LE_CIRCLE:",
                "-                        addCircle(cs, 0, y, ab.width * 3);",
                "-                        break;",
                "-                    case PDAnnotationLine.LE_R_OPEN_ARROW:",
                "-                    case PDAnnotationLine.LE_R_CLOSED_ARROW:",
                "-                        drawArrow(cs, -ab.width, y, -ab.width * 9);",
                "-                        if (PDAnnotationLine.LE_R_CLOSED_ARROW.equals(startPointEndingStyle))",
                "-                        {",
                "-                            cs.closePath();",
                "-                        }",
                "-                        break;",
                "-                    case PDAnnotationLine.LE_SLASH:",
                "-                        // the line is 18 x linewidth at an angle of 60\u00c2\u00b0",
                "-                        cs.moveTo((float) (Math.cos(Math.toRadians(60)) * ab.width * 9),",
                "-                              y + (float) (Math.sin(Math.toRadians(60)) * ab.width * 9));",
                "-                        cs.lineTo((float) (Math.cos(Math.toRadians(240)) * ab.width * 9),",
                "-                              y + (float) (Math.sin(Math.toRadians(240)) * ab.width * 9));",
                "-                        break;",
                "-                    default:",
                "-                        break;",
                "+                    // ending",
                "+                    drawArrow(cs, x - width, y, -width * 9);",
                "                 }",
                "-                if (INTERIOR_COLOR_STYLES.contains(startPointEndingStyle))",
                "+                else",
                "                 {",
                "-                    cs.drawShape(ab.width, hasStroke, hasBackground);",
                "+                    // start",
                "+                    drawArrow(cs, width, y, width * 9);",
                "                 }",
                "-                else if (!PDAnnotationLine.LE_NONE.equals(startPointEndingStyle))",
                "+                if (PDAnnotationLine.LE_CLOSED_ARROW.equals(style))",
                "                 {",
                "-                    // need to do this separately, because sometimes /IC is set anyway",
                "-                    cs.drawShape(ab.width, hasStroke, false);",
                "+                    cs.closePath();",
                "                 }",
                "-",
                "-                String endPointEndingStyle = annotation.getEndPointEndingStyle();",
                "-                switch (endPointEndingStyle)",
                "+                break;",
                "+            case PDAnnotationLine.LE_BUTT:",
                "+                cs.moveTo(x, y - width * 3);",
                "+                cs.lineTo(x, y + width * 3);",
                "+                break;",
                "+            case PDAnnotationLine.LE_DIAMOND:",
                "+                drawDiamond(cs, x, y, width * 3);",
                "+                break;",
                "+            case PDAnnotationLine.LE_SQUARE:",
                "+                cs.addRect(x - width * 3, y - width * 3, width * 6, width * 6);",
                "+                break;",
                "+            case PDAnnotationLine.LE_CIRCLE:",
                "+                addCircle(cs, x, y, width * 3);",
                "+                break;",
                "+            case PDAnnotationLine.LE_R_OPEN_ARROW:",
                "+            case PDAnnotationLine.LE_R_CLOSED_ARROW:",
                "+                if (Float.compare(x, 0) != 0)",
                "                 {",
                "-                    case PDAnnotationLine.LE_OPEN_ARROW:",
                "-                    case PDAnnotationLine.LE_CLOSED_ARROW:",
                "-                        drawArrow(cs, lineLength - ab.width, y, -ab.width * 9);",
                "-                        if (PDAnnotationLine.LE_CLOSED_ARROW.equals(endPointEndingStyle))",
                "-                        {",
                "-                            cs.closePath();",
                "-                        }",
                "-                        break;",
                "-                    case PDAnnotationLine.LE_BUTT:",
                "-                        cs.moveTo(lineLength, y - ab.width * 3);",
                "-                        cs.lineTo(lineLength, y + ab.width * 3);",
                "-                        break;",
                "-                    case PDAnnotationLine.LE_DIAMOND:",
                "-                        drawDiamond(cs, lineLength, y, ab.width * 3);",
                "-                        break;",
                "-                    case PDAnnotationLine.LE_SQUARE:",
                "-                        cs.addRect(lineLength - ab.width * 3, y - ab.width * 3, ab.width * 6, ab.width * 6);",
                "-                        break;",
                "-                    case PDAnnotationLine.LE_CIRCLE:",
                "-                        addCircle(cs, lineLength, y, ab.width * 3);",
                "-                        break;",
                "-                    case PDAnnotationLine.LE_R_OPEN_ARROW:",
                "-                    case PDAnnotationLine.LE_R_CLOSED_ARROW:",
                "-                        drawArrow(cs, lineLength + ab.width, y, ab.width * 9);",
                "-                        if (PDAnnotationLine.LE_R_CLOSED_ARROW.equals(endPointEndingStyle))",
                "-                        {",
                "-                            cs.closePath();",
                "-                        }",
                "-                        break;",
                "-                    case PDAnnotationLine.LE_SLASH:",
                "-                        // the line is 18 x linewidth at an angle of 60\u00c2\u00b0",
                "-                        cs.moveTo(lineLength + (float) (Math.cos(Math.toRadians(60)) * ab.width * 9),",
                "-                                           y + (float) (Math.sin(Math.toRadians(60)) * ab.width * 9));",
                "-                        cs.lineTo(lineLength + (float) (Math.cos(Math.toRadians(240)) * ab.width * 9),",
                "-                                           y + (float) (Math.sin(Math.toRadians(240)) * ab.width * 9));",
                "-                        break;",
                "-                    default:",
                "-                        break;",
                "+                    // ending",
                "+                    drawArrow(cs, x + width, y, width * 9);",
                "                 }",
                "-                if (INTERIOR_COLOR_STYLES.contains(endPointEndingStyle))",
                "+                else",
                "                 {",
                "-                    cs.drawShape(ab.width, hasStroke, hasBackground);",
                "+                    // start",
                "+                    drawArrow(cs, -width, y, -width * 9);",
                "                 }",
                "-                else if (!PDAnnotationLine.LE_NONE.equals(endPointEndingStyle))",
                "+                if (PDAnnotationLine.LE_R_CLOSED_ARROW.equals(style))",
                "                 {",
                "-                    // need to do this separately, because sometimes /IC is set anyway",
                "-                    cs.drawShape(ab.width, hasStroke, false);",
                "+                    cs.closePath();",
                "                 }",
                "-            }",
                "+                break;",
                "+            case PDAnnotationLine.LE_SLASH:",
                "+                // the line is 18 x linewidth at an angle of 60\u00c2\u00b0",
                "+                cs.moveTo(x + (float) (Math.cos(Math.toRadians(60)) * width * 9),",
                "+                          y + (float) (Math.sin(Math.toRadians(60)) * width * 9));",
                "+                cs.lineTo(x + (float) (Math.cos(Math.toRadians(240)) * width * 9),",
                "+                          y + (float) (Math.sin(Math.toRadians(240)) * width * 9));",
                "+                break;",
                "+            default:",
                "+                break;",
                "         }",
                "-        catch (IOException ex)",
                "+        if (INTERIOR_COLOR_STYLES.contains(style))",
                "         {",
                "-            LOG.error(ex);",
                "+            cs.drawShape(width, hasStroke, hasBackground);",
                "+        }",
                "+        else if (!PDAnnotationLine.LE_NONE.equals(style))",
                "+        {",
                "+            // need to do this separately, because sometimes /IC is set anyway",
                "+            cs.drawShape(width, hasStroke, false);",
                "         }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDLineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "67925623ac739bc262f3d0c30cbc6fbb175eba1e",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528481576,
            "hunks": 3,
            "message": "PDFBOX-3353: add constant for /Circle git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833198 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "index 9576df314..7311feaec 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "@@ -71,2 +71,7 @@ public class PDAnnotationText extends PDAnnotationMarkup",
                "+    /**",
                "+     * Constant for the name of a circle annotation.",
                "+     */",
                "+    public static final String NAME_CIRCLE = \"Circle\";",
                "+",
                "     /**",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index a4d003c6c..9f6772fab 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -55,3 +55,3 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 !PDAnnotationText.NAME_INSERT.equals(annotation.getName()) &&",
                "-                !\"Circle\".equals(annotation.getName()))",
                "+                !PDAnnotationText.NAME_CIRCLE.equals(annotation.getName()))",
                "         {",
                "@@ -86,3 +86,3 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     break;",
                "-                case \"Circle\": //TODO constant",
                "+                case PDAnnotationText.NAME_CIRCLE:",
                "                     drawCircles(contentStream, bbox);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "28bb54800e4339b0a1a44dce7b628ca77ba57bc9",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530117361,
            "hunks": 3,
            "message": "PDFBOX-3353: correct drawing of /Paragraph, no donut effect there git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834520 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index 6cc503e4a..2a9eeabf6 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -342,3 +342,2 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-    //TODO this is mostly identical to drawHelp, except for scale, translation and symbol",
                "     private void drawParagraph(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "@@ -380,5 +379,5 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         contentStream.restoreGraphicsState();",
                "-        // draw the outer circle counterclockwise to fill area between circle and \"?\"",
                "-        drawCircle2(contentStream, min / 2, min / 2, min / 2 - 1);",
                "         contentStream.fillAndStroke();",
                "+        drawCircle(contentStream, min / 2, min / 2, min / 2 - 1);",
                "+        contentStream.stroke();",
                "     }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "ff7eec4f24f6ec5aafa58ec11f9a0f6901bda5b7",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530728360,
            "hunks": 1,
            "message": "PDFBOX-4071: remove unused import git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1835075 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java",
                "index ec521ad01..69d9e6384 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java",
                "@@ -20,3 +20,2 @@ import java.awt.geom.GeneralPath;",
                " import java.io.File;",
                "-import java.io.FileInputStream;",
                " import java.io.IOException;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d227e0f677b3244c1f39dcd6c58e19993feea58e",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528632673,
            "hunks": 10,
            "message": "PDFBOX-3353: support /Help git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833278 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index aeaf70abe..41e9a55b1 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -17,3 +17,8 @@ package org.apache.pdfbox.pdmodel.interactive.annotation.handlers;",
                "+import java.awt.geom.AffineTransform;",
                "+import java.awt.geom.GeneralPath;",
                "+import java.awt.geom.PathIterator;",
                " import java.io.IOException;",
                "+import java.util.HashSet;",
                "+import java.util.Set;",
                " import org.apache.commons.logging.Log;",
                "@@ -22,2 +27,3 @@ import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                " import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                "+import org.apache.pdfbox.pdmodel.font.PDType1Font;",
                " import org.apache.pdfbox.pdmodel.graphics.blend.BlendMode;",
                "@@ -27,2 +33,3 @@ import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                " import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText;",
                "+import org.apache.pdfbox.util.Matrix;",
                "@@ -36,2 +43,13 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "+    private static final Set<String> SUPPORTED_NAMES = new HashSet<>();",
                "+",
                "+    static",
                "+    {",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_NOTE);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_INSERT);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_CROSS);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_HELP);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_CIRCLE);",
                "+    }",
                "+",
                "     public PDTextAppearanceHandler(PDAnnotation annotation)",
                "@@ -53,8 +71,5 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         PDAnnotationText annotation = (PDAnnotationText) getAnnotation();",
                "-        if (!PDAnnotationText.NAME_NOTE.equals(annotation.getName()) &&",
                "-                !PDAnnotationText.NAME_INSERT.equals(annotation.getName()) &&",
                "-                !PDAnnotationText.NAME_CROSS.equals(annotation.getName()) &&",
                "-                !PDAnnotationText.NAME_CIRCLE.equals(annotation.getName()))",
                "+        if (!SUPPORTED_NAMES.contains(annotation.getName()))",
                "         {",
                "-            //TODO Comment, Key, Help, NewParagraph, Paragraph",
                "+            //TODO Comment, Key, NewParagraph, Paragraph",
                "             return;",
                "@@ -77,3 +92,3 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             setOpacity(contentStream, annotation.getConstantOpacity());",
                "-            ",
                "+",
                "             PDRectangle rect = getRectangle();",
                "@@ -96,3 +111,5 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     break;",
                "-",
                "+                case PDAnnotationText.NAME_HELP:",
                "+                    drawHelp(contentStream, bbox);",
                "+                    break;",
                "                 default:",
                "@@ -206,2 +223,70 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "+    private void drawHelp(final PDAppearanceContentStream contentStream, PDRectangle bbox)",
                "+            throws IOException",
                "+    {",
                "+        float min = Math.min(bbox.getWidth(), bbox.getHeight());",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(1);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+",
                "+        // Adobe first fills a white circle with CA ca 0.6, so do we",
                "+        contentStream.saveGraphicsState();",
                "+        contentStream.setLineWidth(1);",
                "+        PDExtendedGraphicsState gs = new PDExtendedGraphicsState();",
                "+        gs.setAlphaSourceFlag(false);",
                "+        gs.setStrokingAlphaConstant(0.6f);",
                "+        gs.setNonStrokingAlphaConstant(0.6f);",
                "+        gs.setBlendMode(BlendMode.NORMAL);",
                "+        contentStream.setGraphicsStateParameters(gs);",
                "+        contentStream.setNonStrokingColor(1f);",
                "+        drawCircle2(contentStream, min / 2, min / 2, min / 2 - 1);",
                "+        contentStream.fill();",
                "+        contentStream.restoreGraphicsState();",
                "+",
                "+        contentStream.saveGraphicsState();",
                "+        // rescale so that \"?\" fits into circle and move \"?\" to circle center",
                "+        // values gathered by trial and error",
                "+        contentStream.transform(Matrix.getScaleInstance(0.001f * min / 2.25f, 0.001f * min / 2.25f));",
                "+        contentStream.transform(Matrix.getTranslateInstance(540, 375));",
                "+",
                "+        // we get the shape of an Helvetica \"?\" and use that one.",
                "+        // Adobe uses a different font (which one?), or created the shape from scratch.",
                "+        GeneralPath path = PDType1Font.HELVETICA.getPath(\"question\");",
                "+        PathIterator it = path.getPathIterator(new AffineTransform());",
                "+        double[] coords = new double[6];",
                "+        while (!it.isDone())",
                "+        {",
                "+            int type = it.currentSegment(coords);",
                "+            switch (type)",
                "+            {",
                "+                case PathIterator.SEG_CLOSE:",
                "+                    contentStream.closePath();",
                "+                    break;",
                "+                case PathIterator.SEG_CUBICTO:",
                "+                    contentStream.curveTo((float) coords[0], (float) coords[1], (float) coords[2],",
                "+                                          (float) coords[3], (float) coords[4], (float) coords[5]);",
                "+                    break;",
                "+                case PathIterator.SEG_QUADTO:",
                "+                    contentStream.curveTo1((float) coords[0], (float) coords[1], (float) coords[2], (float) coords[3]);",
                "+                    // not sure whether curveTo1 or curveTo2 is to be used here",
                "+                    break;",
                "+                case PathIterator.SEG_LINETO:",
                "+                    contentStream.lineTo((float) coords[0], (float) coords[1]);",
                "+                    break;",
                "+                case PathIterator.SEG_MOVETO:",
                "+                    contentStream.moveTo((float) coords[0], (float) coords[1]);",
                "+                    break;",
                "+                default:",
                "+                    break;",
                "+            }",
                "+            it.next();",
                "+        }",
                "+        contentStream.restoreGraphicsState();",
                "+        // draw the outer circle counterclockwise to fill area between circle and \"?\"",
                "+        drawCircle2(contentStream, min / 2, min / 2, min / 2 - 1);",
                "+        contentStream.fillAndStroke();",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c124b3f87812f47614db0b620453ab7012167762",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524335986,
            "hunks": 7,
            "message": "PDFBOX-4189: Sonar fixes: use try-with-resources, use private constructor, reformat, use diamond git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829739 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "index 221549918..915cd09a4 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "@@ -41,2 +41,5 @@ public class BengaliPdfGenerationHelloWorld",
                " {",
                "+    private BengaliPdfGenerationHelloWorld()",
                "+    {        ",
                "+    }",
                "@@ -75,6 +78,4 @@ public class BengaliPdfGenerationHelloWorld",
                "-        PDDocument doc = new PDDocument();",
                "-        try",
                "+        try (PDDocument doc = new PDDocument())",
                "         {",
                "-",
                "             PDPage page1 = new PDPage();",
                "@@ -86,21 +87,22 @@ public class BengaliPdfGenerationHelloWorld",
                "-            PDPageContentStream contents = new PDPageContentStream(doc, page1);",
                "-            contents.beginText();",
                "-            contents.setFont(font, 12);",
                "-            contents.newLineAtOffset(10, 750);",
                "-            contents.showText(BANGLA_TEXT_1);",
                "-            contents.newLineAtOffset(0, -50);",
                "-            contents.showText(BANGLA_TEXT_2);",
                "-            contents.newLineAtOffset(0, -30);",
                "-            contents.showText(BANGLA_TEXT_3);",
                "-            contents.endText();",
                "-",
                "-            PDImageXObject pdImage = PDImageXObject",
                "-                    .createFromFile(BengaliPdfGenerationHelloWorld.class",
                "-                            .getResource(",
                "-                                    \"/org/apache/pdfbox/resources/ttf/bengali-correct-text.png\")",
                "-                            // getFile() doesn't work if there is a space in the path",
                "-                            .toURI().getPath(), doc);",
                "-            contents.drawImage(pdImage, 0, 300, pdImage.getWidth(), pdImage.getHeight());",
                "-            contents.close();",
                "+            try (PDPageContentStream contents = new PDPageContentStream(doc, page1))",
                "+            {",
                "+                contents.beginText();",
                "+                contents.setFont(font, 12);",
                "+                contents.newLineAtOffset(10, 750);",
                "+                contents.showText(BANGLA_TEXT_1);",
                "+                contents.newLineAtOffset(0, -50);",
                "+                contents.showText(BANGLA_TEXT_2);",
                "+                contents.newLineAtOffset(0, -30);",
                "+                contents.showText(BANGLA_TEXT_3);",
                "+                contents.endText();",
                "+                ",
                "+                PDImageXObject pdImage = PDImageXObject",
                "+                        .createFromFile(BengaliPdfGenerationHelloWorld.class",
                "+                                .getResource(",
                "+                                        \"/org/apache/pdfbox/resources/ttf/bengali-correct-text.png\")",
                "+                                // getFile() doesn't work if there is a space in the path",
                "+                                .toURI().getPath(), doc);",
                "+                contents.drawImage(pdImage, 0, 300, pdImage.getWidth(), pdImage.getHeight());",
                "+            }",
                "@@ -108,6 +110,2 @@ public class BengaliPdfGenerationHelloWorld",
                "         }",
                "-        finally",
                "-        {",
                "-            doc.close();",
                "-        }",
                "     }",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java",
                "index 1986d0dbd..bdb8adc91 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java",
                "@@ -268,4 +268,3 @@ public class GlyphSubstitutionTable extends TTFTable",
                "             {",
                "-                subTables[i] = readLigatureSubstitutionSubtable(data,",
                "-                        offset + subTableOffets[i]);",
                "+                subTables[i] = readLigatureSubstitutionSubtable(data, offset + subTableOffets[i]);",
                "             }",
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/CompoundCharacterTokenizer.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/CompoundCharacterTokenizer.java",
                "index e24828d1b..41a5e652e 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/CompoundCharacterTokenizer.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/CompoundCharacterTokenizer.java",
                "@@ -49,3 +49,3 @@ public class CompoundCharacterTokenizer",
                "     {",
                "-        List<String> tokens = new ArrayList<String>();",
                "+        List<String> tokens = new ArrayList<>();"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/GlyphSubstitutionTable.java",
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/CompoundCharacterTokenizer.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "570778fc1a920ba02d31dbeab671efe78a275f7b",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529612758,
            "hunks": 6,
            "message": "PDFBOX-3353: support /Star, /Check, /RightArrow and /RightPointer git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834053 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "index 6d234de46..913c49a0e 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "@@ -80,2 +80,22 @@ public class PDAnnotationText extends PDAnnotationMarkup",
                "     public static final String NAME_CROSS = \"Cross\";",
                "+    ",
                "+    /**",
                "+     * Constant for the name of a star annotation.",
                "+     */",
                "+    public static final String NAME_STAR = \"Star\";",
                "+",
                "+    /**",
                "+     * Constant for the name of a check annotation.",
                "+     */",
                "+    public static final String NAME_CHECK = \"Check\";",
                "+",
                "+    /**",
                "+     * Constant for the name of a right arrow annotation.",
                "+     */",
                "+    public static final String NAME_RIGHT_ARROW = \"RightArrow\";",
                "+",
                "+    /**",
                "+     * Constant for the name of a right pointer annotation.",
                "+     */",
                "+    public static final String NAME_RIGHT_POINTER = \"RightPointer\";        ",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index 6211ffe18..5424c61b5 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -55,2 +55,6 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         SUPPORTED_NAMES.add(PDAnnotationText.NAME_NEW_PARAGRAPH);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_CHECK);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_STAR);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_RIGHT_ARROW);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_RIGHT_POINTER);",
                "     }",
                "@@ -122,2 +126,14 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     break;",
                "+                case PDAnnotationText.NAME_STAR:",
                "+                    drawStar(annotation, contentStream);",
                "+                    break;",
                "+                case PDAnnotationText.NAME_CHECK:",
                "+                    drawCheck(annotation, contentStream);",
                "+                    break;",
                "+                case PDAnnotationText.NAME_RIGHT_ARROW:",
                "+                    drawRightArrow(annotation, contentStream);",
                "+                    break;",
                "+                case PDAnnotationText.NAME_RIGHT_POINTER:",
                "+                    drawRightPointer(annotation, contentStream);",
                "+                    break;",
                "                 default:",
                "@@ -299,3 +315,3 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         contentStream.transform(Matrix.getScaleInstance(0.001f * min / 2.25f, 0.001f * min / 2.25f));",
                "-        contentStream.transform(Matrix.getTranslateInstance(555, 375));",
                "+        contentStream.transform(Matrix.getTranslateInstance(500, 375));",
                "@@ -312,3 +328,3 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "     //TODO this is mostly identical to drawHelp, except for scale, translation and symbol",
                "-     private void drawParagraph(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "+    private void drawParagraph(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "             throws IOException",
                "@@ -380,2 +396,112 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "+    private void drawStar(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "+            throws IOException",
                "+    {",
                "+        PDRectangle bbox = adjustRectAndBBox(annotation, 20, 19);",
                "+",
                "+        float min = Math.min(bbox.getWidth(), bbox.getHeight());",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(1);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+",
                "+        contentStream.transform(Matrix.getScaleInstance(0.001f * min / 0.8f, 0.001f * min / 0.8f));",
                "+",
                "+        // we get the shape of a Zapf Dingbats star (0x2605) and use that one.",
                "+        // Adobe uses a different font (which one?), or created the shape from scratch.",
                "+        GeneralPath path = PDType1Font.ZAPF_DINGBATS.getPath(\"a35\");",
                "+        addPath(contentStream, path);",
                "+        contentStream.fillAndStroke();",
                "+    }",
                "+",
                "+    //TODO this is mostly identical to drawStar, except for scale, translation and symbol",
                "+    private void drawCheck(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "+            throws IOException",
                "+    {",
                "+        PDRectangle bbox = adjustRectAndBBox(annotation, 20, 19);",
                "+",
                "+        float min = Math.min(bbox.getWidth(), bbox.getHeight());",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(1);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+",
                "+        contentStream.transform(Matrix.getScaleInstance(0.001f * min / 0.8f, 0.001f * min / 0.8f));",
                "+        contentStream.transform(Matrix.getTranslateInstance(0, 50));",
                "+",
                "+        // we get the shape of a Zapf Dingbats check (0x2714) and use that one.",
                "+        // Adobe uses a different font (which one?), or created the shape from scratch.",
                "+        GeneralPath path = PDType1Font.ZAPF_DINGBATS.getPath(\"a20\");",
                "+        addPath(contentStream, path);",
                "+        contentStream.fillAndStroke();",
                "+    }",
                "+",
                "+    //TODO this is mostly identical to drawStar, except for scale, translation and symbol",
                "+    private void drawRightPointer(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "+            throws IOException",
                "+    {",
                "+        PDRectangle bbox = adjustRectAndBBox(annotation, 20, 17);",
                "+",
                "+        float min = Math.min(bbox.getWidth(), bbox.getHeight());",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(1);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+",
                "+        contentStream.transform(Matrix.getScaleInstance(0.001f * min / 0.8f, 0.001f * min / 0.8f));",
                "+        contentStream.transform(Matrix.getTranslateInstance(0, 50));",
                "+",
                "+        // we get the shape of a Zapf Dingbats right pointer (0x27A4) and use that one.",
                "+        // Adobe uses a different font (which one?), or created the shape from scratch.",
                "+        GeneralPath path = PDType1Font.ZAPF_DINGBATS.getPath(\"a174\");",
                "+        addPath(contentStream, path);",
                "+        contentStream.fillAndStroke();",
                "+    }",
                "+",
                "+    private void drawRightArrow(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "+            throws IOException",
                "+    {",
                "+        PDRectangle bbox = adjustRectAndBBox(annotation, 20, 20);",
                "+",
                "+        float min = Math.min(bbox.getWidth(), bbox.getHeight());",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(1);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+",
                "+        // Adobe first fills a white circle with CA ca 0.6, so do we",
                "+        contentStream.saveGraphicsState();",
                "+        contentStream.setLineWidth(1);",
                "+        PDExtendedGraphicsState gs = new PDExtendedGraphicsState();",
                "+        gs.setAlphaSourceFlag(false);",
                "+        gs.setStrokingAlphaConstant(0.6f);",
                "+        gs.setNonStrokingAlphaConstant(0.6f);",
                "+        gs.setBlendMode(BlendMode.NORMAL);",
                "+        contentStream.setGraphicsStateParameters(gs);",
                "+        contentStream.setNonStrokingColor(1f);",
                "+        drawCircle2(contentStream, min / 2, min / 2, min / 2 - 1);",
                "+        contentStream.fill();",
                "+        contentStream.restoreGraphicsState();",
                "+",
                "+        contentStream.saveGraphicsState();",
                "+        // rescale so that the glyph fits into circle and move it to circle center",
                "+        // values gathered by trial and error",
                "+        contentStream.transform(Matrix.getScaleInstance(0.001f * min / 1.3f, 0.001f * min / 1.3f));",
                "+        contentStream.transform(Matrix.getTranslateInstance(200, 300));",
                "+",
                "+        // we get the shape of a Zapf Dingbats right arrow and use that one.",
                "+        // Adobe uses a different font (which one?), or created the shape from scratch.",
                "+        GeneralPath path = PDType1Font.ZAPF_DINGBATS.getPath(\"a160\");",
                "+        addPath(contentStream, path);",
                "+        contentStream.restoreGraphicsState();",
                "+        // surprisingly, this one not counterclockwise.",
                "+        drawCircle(contentStream, min / 2, min / 2, min / 2 - 1);",
                "+        contentStream.fillAndStroke();",
                "+    }",
                "+",
                "+",
                "     private void addPath(final PDAppearanceContentStream contentStream, GeneralPath path) throws IOException"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cbae566275035cc60a14324d465a633e5262433f",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532366099,
            "hunks": 1,
            "message": "PDFBOX-4071: use latest plugin version git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1836508 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 134f56ba2..9541dd891 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -276,3 +276,3 @@",
                "                     <artifactId>maven-bundle-plugin</artifactId>",
                "-                    <version>3.5.0</version>",
                "+                    <version>3.5.1</version>",
                "                 </plugin>"
            ],
            "changed_files": [
                "parent/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "cfe35b1f6a0ce755cf5933818cdf0b0e37f7a86d",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530116504,
            "hunks": 4,
            "message": "PDFBOX-3353: support /UpArrow and /UpLeftArrow git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834518 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index 8d58eff54..6cc503e4a 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -60,2 +60,4 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         SUPPORTED_NAMES.add(PDAnnotationText.NAME_CROSS_HAIRS);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_UP_ARROW);",
                "+        SUPPORTED_NAMES.add(PDAnnotationText.NAME_UP_LEFT_ARROW);",
                "     }",
                "@@ -83,3 +85,3 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "             // BBox values:",
                "-            // key 18 18",
                "+            // Key 13 18",
                "             // Comment 18 18",
                "@@ -142,2 +144,8 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     break;",
                "+                case PDAnnotationText.NAME_UP_ARROW:",
                "+                    drawUpArrow(annotation, contentStream);",
                "+                    break;",
                "+                case PDAnnotationText.NAME_UP_LEFT_ARROW:",
                "+                    drawUpLeftArrow(annotation, contentStream);",
                "+                    break;",
                "                 default:",
                "@@ -494,2 +502,44 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "+    private void drawUpArrow(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "+                 throws IOException",
                "+    {",
                "+        adjustRectAndBBox(annotation, 17, 20);",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(1);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+",
                "+        contentStream.moveTo(1, 7);",
                "+        contentStream.lineTo(5, 7);",
                "+        contentStream.lineTo(5, 1);",
                "+        contentStream.lineTo(12, 1);",
                "+        contentStream.lineTo(12, 7);",
                "+        contentStream.lineTo(16, 7);",
                "+        contentStream.lineTo(8.5f, 19);",
                "+        contentStream.closeAndFillAndStroke();",
                "+    }",
                "+",
                "+    private void drawUpLeftArrow(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "+                 throws IOException",
                "+    {",
                "+        adjustRectAndBBox(annotation, 17, 17);",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(1);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+        ",
                "+        contentStream.transform(Matrix.getRotateInstance(Math.toRadians(45), 8, -4));",
                "+",
                "+        contentStream.moveTo(1, 7);",
                "+        contentStream.lineTo(5, 7);",
                "+        contentStream.lineTo(5, 1);",
                "+        contentStream.lineTo(12, 1);",
                "+        contentStream.lineTo(12, 7);",
                "+        contentStream.lineTo(16, 7);",
                "+        contentStream.lineTo(8.5f, 19);",
                "+        contentStream.closeAndFillAndStroke();",
                "+    }",
                "+    ",
                "     private void drawRightArrow(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "d5d125124360820c6ef799320b8457fb4537d182",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529610393,
            "hunks": 2,
            "message": "PDFBOX-3353: HELVETICA_BOLD looks better git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834049 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index c4776034d..6211ffe18 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -301,5 +301,5 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        // we get the shape of an Helvetica \"?\" and use that one.",
                "+        // we get the shape of an Helvetica bold \"?\" and use that one.",
                "         // Adobe uses a different font (which one?), or created the shape from scratch.",
                "-        GeneralPath path = PDType1Font.HELVETICA.getPath(\"question\");",
                "+        GeneralPath path = PDType1Font.HELVETICA_BOLD.getPath(\"question\");",
                "         addPath(contentStream, path);"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "630de0b0eac6d6ca9d457f41c9b80ecb967708a9",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529735154,
            "hunks": 3,
            "message": "PDFBOX-3353: correct comments, add some thought for future refactoring git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1834180 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index a510d19b1..2e5708ed6 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -425,2 +425,4 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "     //TODO this is mostly identical to drawStar, except for scale, translation and symbol",
                "+    // maybe use a table with all values and draw from there",
                "+    // this could also optionally use outer circle",
                "     private void drawCheck(PDAnnotationText annotation, final PDAppearanceContentStream contentStream)",
                "@@ -485,3 +487,3 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        // we get the shape of a Zapf Dingbats right pointer (0x27A4) and use that one.",
                "+        // we get the shape of a Symbol crosshair (0x2295) and use that one.",
                "         // Adobe uses a different font (which one?), or created the shape from scratch.",
                "@@ -524,3 +526,3 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        // we get the shape of a Zapf Dingbats right arrow and use that one.",
                "+        // we get the shape of a Zapf Dingbats right arrow (0x2794) and use that one.",
                "         // Adobe uses a different font (which one?), or created the shape from scratch."
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c9f4ee13fb90cfad12c5a32e74f90285985db84f",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528392434,
            "hunks": 4,
            "message": "PDFBOX-3353: create handler for text annotation and support Note git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833130 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "index 415f6ef73..9576df314 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "@@ -20,2 +20,4 @@ import org.apache.pdfbox.cos.COSDictionary;",
                " import org.apache.pdfbox.cos.COSName;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAppearanceHandler;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDTextAppearanceHandler;",
                "@@ -28,2 +30,3 @@ public class PDAnnotationText extends PDAnnotationMarkup",
                " {",
                "+    private PDAppearanceHandler customAppearanceHandler;",
                "@@ -173,2 +176,25 @@ public class PDAnnotationText extends PDAnnotationMarkup",
                "+    /**",
                "+     * Set a custom appearance handler for generating the annotations appearance streams.",
                "+     * ",
                "+     * @param appearanceHandler",
                "+     */",
                "+    public void setCustomAppearanceHandler(PDAppearanceHandler appearanceHandler)",
                "+    {",
                "+        customAppearanceHandler = appearanceHandler;",
                "+    }",
                "+",
                "+    @Override",
                "+    public void constructAppearances()",
                "+    {",
                "+        if (customAppearanceHandler == null)",
                "+        {",
                "+            PDTextAppearanceHandler appearanceHandler = new PDTextAppearanceHandler(this);",
                "+            appearanceHandler.generateAppearanceStreams();",
                "+        }",
                "+        else",
                "+        {",
                "+            customAppearanceHandler.generateAppearanceStreams();",
                "+        }",
                "+    }",
                " }",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "new file mode 100644",
                "index 000000000..b76e2e372",
                "--- /dev/null",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -0,0 +1,115 @@",
                "+/*",
                "+ * Copyright 2018 The Apache Software Foundation.",
                "+ *",
                "+ * Licensed under the Apache License, Version 2.0 (the \"License\");",
                "+ * you may not use this file except in compliance with the License.",
                "+ * You may obtain a copy of the License at",
                "+ *",
                "+ *      http://www.apache.org/licenses/LICENSE-2.0",
                "+ *",
                "+ * Unless required by applicable law or agreed to in writing, software",
                "+ * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "+ * See the License for the specific language governing permissions and",
                "+ * limitations under the License.",
                "+ */",
                "+package org.apache.pdfbox.pdmodel.interactive.annotation.handlers;",
                "+",
                "+import java.io.IOException;",
                "+import org.apache.commons.logging.Log;",
                "+import org.apache.commons.logging.LogFactory;",
                "+import org.apache.pdfbox.pdmodel.PDAppearanceContentStream;",
                "+import org.apache.pdfbox.pdmodel.common.PDRectangle;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText;",
                "+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;",
                "+",
                "+/**",
                "+ *",
                "+ * @author Tilman Hausherr",
                "+ */",
                "+public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "+{",
                "+    private static final Log LOG = LogFactory.getLog(PDTextAppearanceHandler.class);",
                "+",
                "+    public PDTextAppearanceHandler(PDAnnotation annotation)",
                "+    {",
                "+        super(annotation);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void generateAppearanceStreams()",
                "+    {",
                "+        generateNormalAppearance();",
                "+        generateRolloverAppearance();",
                "+        generateDownAppearance();",
                "+    }",
                "+",
                "+    @Override",
                "+    public void generateNormalAppearance()",
                "+    {",
                "+        PDAnnotationText annotation = (PDAnnotationText) getAnnotation();",
                "+        if (!PDAnnotationText.NAME_NOTE.equals(annotation.getName()))",
                "+        {",
                "+            //TODO Comment, Key, Help, NewParagraph, Paragraph, Insert",
                "+            return;",
                "+        }",
                "+",
                "+        try (PDAppearanceContentStream contentStream = getNormalAppearanceAsContentStream())",
                "+        {",
                "+            boolean hasBackground = contentStream.setNonStrokingColorOnDemand(getColor());",
                "+            setOpacity(contentStream, annotation.getConstantOpacity());",
                "+            ",
                "+            //TODO find out what Adobe chooses if color is missing",
                "+",
                "+            PDRectangle rect = getRectangle();",
                "+            PDAppearanceStream appearanceStream = annotation.getNormalAppearanceStream();",
                "+            PDRectangle bbox = rect.createRetranslatedRectangle();",
                "+            appearanceStream.setBBox(bbox);",
                "+",
                "+            switch (annotation.getName())",
                "+            {",
                "+                case PDAnnotationText.NAME_NOTE:",
                "+                    drawNote(contentStream, bbox, hasBackground);",
                "+                    break;",
                "+",
                "+                default:",
                "+                    break;",
                "+            }",
                "+",
                "+        }",
                "+        catch (IOException e)",
                "+        {",
                "+            LOG.error(e);",
                "+        }",
                "+",
                "+    }",
                "+",
                "+    private void drawNote(final PDAppearanceContentStream contentStream, PDRectangle bbox, boolean hasBackground)",
                "+            throws IOException",
                "+    {",
                "+        contentStream.setLineJoinStyle(1); // round edge",
                "+        contentStream.addRect(1, 1, bbox.getWidth() - 2,  bbox.getHeight() - 2);",
                "+        contentStream.moveTo(bbox.getWidth() / 4,         bbox.getHeight() / 7 * 2);",
                "+        contentStream.lineTo(bbox.getWidth() * 3 / 4 - 1, bbox.getHeight() / 7 * 2);",
                "+        contentStream.moveTo(bbox.getWidth() / 4,         bbox.getHeight() / 7 * 3);",
                "+        contentStream.lineTo(bbox.getWidth() * 3 / 4 - 1, bbox.getHeight() / 7 * 3);",
                "+        contentStream.moveTo(bbox.getWidth() / 4,         bbox.getHeight() / 7 * 4);",
                "+        contentStream.lineTo(bbox.getWidth() * 3 / 4 - 1, bbox.getHeight() / 7 * 4);",
                "+        contentStream.moveTo(bbox.getWidth() / 4,         bbox.getHeight() / 7 * 5);",
                "+        contentStream.lineTo(bbox.getWidth() * 3 / 4 - 1, bbox.getHeight() / 7 * 5);",
                "+        contentStream.drawShape(1, true, hasBackground);",
                "+    }",
                "+",
                "+    @Override",
                "+    public void generateRolloverAppearance()",
                "+    {",
                "+        // No rollover appearance generated",
                "+    }",
                "+",
                "+    @Override",
                "+    public void generateDownAppearance()",
                "+    {",
                "+        // No down appearance generated",
                "+    }",
                "+}"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "1d34c55e23ce459d4cda435c16b49e24f5df0c6c",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528481842,
            "hunks": 5,
            "message": "PDFBOX-3353: rename methods in line with existing ones git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833199 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "index 7f80bdcdf..1300770d9 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "@@ -290,3 +290,3 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "             case PDAnnotationLine.LE_CIRCLE:",
                "-                addCircle(cs, x, y, width * 3);",
                "+                drawCircle(cs, x, y, width * 3);",
                "                 break;",
                "@@ -376,3 +376,3 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "      */",
                "-    void addCircle(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "+    void drawCircle(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "     {",
                "@@ -399,3 +399,3 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "      */",
                "-    void addCircle2(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "+    void drawCircle2(PDAppearanceContentStream cs, float x, float y, float r) throws IOException",
                "     {",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index 9f6772fab..5e0241496 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -148,3 +148,3 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         contentStream.setNonStrokingColor(1f);",
                "-        addCircle(contentStream, bbox.getWidth() / 2, bbox.getHeight() / 2, smallR);",
                "+        drawCircle(contentStream, bbox.getWidth() / 2, bbox.getHeight() / 2, smallR);",
                "         contentStream.fill();",
                "@@ -153,4 +153,4 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "         contentStream.setLineWidth(0.59f); // value from Adobe",
                "-        addCircle(contentStream, bbox.getWidth() / 2, bbox.getHeight() / 2, smallR);",
                "-        addCircle2(contentStream, bbox.getWidth() / 2, bbox.getHeight() / 2, largeR);",
                "+        drawCircle(contentStream, bbox.getWidth() / 2, bbox.getHeight() / 2, smallR);",
                "+        drawCircle2(contentStream, bbox.getWidth() / 2, bbox.getHeight() / 2, largeR);",
                "         contentStream.fillAndStroke();"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "6ed7ca7336fa8776d35347f0d4c242f0a756f048",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528548071,
            "hunks": 2,
            "message": "PDFBOX-4071: java coding convention, first static class variables, then constructor, then methods git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833232 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "index 338ff8fcf..620bb669a 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java",
                "@@ -32,46 +32,2 @@ public abstract class BlendMode",
                " {",
                "-    /**",
                "-     * Determines the blend mode from the BM entry in the COS ExtGState.",
                "-     *",
                "-     * @param cosBlendMode name or array",
                "-     * @return blending mode",
                "-     */",
                "-    public static BlendMode getInstance(COSBase cosBlendMode)",
                "-    {",
                "-        BlendMode result = null;",
                "-        if (cosBlendMode instanceof COSName)",
                "-        {",
                "-            result = BLEND_MODES.get(cosBlendMode);",
                "-        }",
                "-        else if (cosBlendMode instanceof COSArray)",
                "-        {",
                "-            COSArray cosBlendModeArray = (COSArray) cosBlendMode;",
                "-            for (int i = 0; i < cosBlendModeArray.size(); i++)",
                "-            {",
                "-                result = BLEND_MODES.get(cosBlendModeArray.getObject(i));",
                "-                if (result != null)",
                "-                {",
                "-                    break;",
                "-                }",
                "-            }",
                "-        }",
                "-",
                "-        if (result != null)",
                "-        {",
                "-            return result;",
                "-        }",
                "-        return BlendMode.NORMAL;",
                "-    }",
                "-    ",
                "-    /**",
                "-     * Determines the blend mode name from the BM object.",
                "-     *",
                "-     * @param bm Blend mode.",
                "-     * @return name of blend mode.",
                "-     */",
                "-    public static COSName getCOSName(BlendMode bm)",
                "-    {",
                "-        return BLEND_MODE_NAMES.get(bm);",
                "-    }",
                "-",
                "     public static final SeparableBlendMode NORMAL = new SeparableBlendMode()",
                "@@ -257,2 +213,46 @@ public abstract class BlendMode",
                "+    /**",
                "+     * Determines the blend mode from the BM entry in the COS ExtGState.",
                "+     *",
                "+     * @param cosBlendMode name or array",
                "+     * @return blending mode",
                "+     */",
                "+    public static BlendMode getInstance(COSBase cosBlendMode)",
                "+    {",
                "+        BlendMode result = null;",
                "+        if (cosBlendMode instanceof COSName)",
                "+        {",
                "+            result = BLEND_MODES.get(cosBlendMode);",
                "+        }",
                "+        else if (cosBlendMode instanceof COSArray)",
                "+        {",
                "+            COSArray cosBlendModeArray = (COSArray) cosBlendMode;",
                "+            for (int i = 0; i < cosBlendModeArray.size(); i++)",
                "+            {",
                "+                result = BLEND_MODES.get(cosBlendModeArray.getObject(i));",
                "+                if (result != null)",
                "+                {",
                "+                    break;",
                "+                }",
                "+            }",
                "+        }",
                "+",
                "+        if (result != null)",
                "+        {",
                "+            return result;",
                "+        }",
                "+        return BlendMode.NORMAL;",
                "+    }",
                "+    ",
                "+    /**",
                "+     * Determines the blend mode name from the BM object.",
                "+     *",
                "+     * @param bm Blend mode.",
                "+     * @return name of blend mode.",
                "+     */",
                "+    public static COSName getCOSName(BlendMode bm)",
                "+    {",
                "+        return BLEND_MODE_NAMES.get(bm);",
                "+    }",
                "+",
                "     private static int get255Value(float val)"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "8ea8645ae8b878c9ae77c0b0a21f1091f8801573",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528135573,
            "hunks": 2,
            "message": "PDFBOX-3353: some styles do not rotate with the line, e.g. square and diamond, so add a set constant for angled styles that do rotate, e.g. arrows git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832874 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "index 6b65aa2f6..83a00d9cb 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java",
                "@@ -60,2 +60,7 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "     protected static final Set<String> INTERIOR_COLOR_STYLES = createInteriorColorStyles();",
                "+    ",
                "+    /**",
                "+     * Line ending styles where the shape changes its angle, e.g. arrows.",
                "+     */",
                "+    protected static final Set<String> ANGLED_STYLES = createAngledStyles();",
                "@@ -405,2 +410,14 @@ public abstract class PDAbstractAppearanceHandler implements PDAppearanceHandler",
                "+    private static Set<String> createAngledStyles()",
                "+    {",
                "+        Set<String> angledStyles = new HashSet<>();",
                "+        angledStyles.add(PDAnnotationLine.LE_CLOSED_ARROW);",
                "+        angledStyles.add(PDAnnotationLine.LE_OPEN_ARROW);",
                "+        angledStyles.add(PDAnnotationLine.LE_R_CLOSED_ARROW);",
                "+        angledStyles.add(PDAnnotationLine.LE_R_OPEN_ARROW);",
                "+        angledStyles.add(PDAnnotationLine.LE_BUTT);",
                "+        angledStyles.add(PDAnnotationLine.LE_SLASH);",
                "+        return Collections.unmodifiableSet(angledStyles);",
                "+    }",
                "+",
                "     /**"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAbstractAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "279711b14279243bbe585976816f3a300d9f6417",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1531171390,
            "hunks": 1,
            "message": "PDFBOX-4071: remove unneeded code, expression is never null git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/1.8@1835499 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignature.java b/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignature.java",
                "index d08a469ff..1ff32c985 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignature.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignature.java",
                "@@ -192,6 +192,2 @@ public class CreateSignature implements SignatureInterface",
                "     {",
                "-      if (randomAccessFile!= null) ",
                "-      {",
                "-        randomAccessFile.close();",
                "-      }",
                "       if (scratchFile != null && scratchFile.exists() && !scratchFile.delete())"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignature.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.8.16",
                "1.8.17"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "069984d3b643657dbf757037f1ab4f5041466a47",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527329478,
            "hunks": 1,
            "message": "PDFBOX-3353: remove unused assignment git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832302 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "index 75fd04e72..6738ed733 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java",
                "@@ -94,3 +94,3 @@ public class PDSquareAppearanceHandler extends PDAbstractAppearanceHandler",
                "-                PDRectangle borderBox = null;",
                "+                PDRectangle borderBox;",
                "                 float[] rectDifferences = annotation.getRectDifferences();"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDSquareAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "177005340033939c891927edc0b0b3daa4a07289",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523900550,
            "hunks": 4,
            "message": "PDFBOX-4142: omit md5 checksums, replace SHA-1 with SHA-512, adjust text git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/1.8@1829304 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pom.xml b/pom.xml",
                "index 5b96d706f..71f4fcc77 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -116,3 +116,3 @@",
                "                     </copy>",
                "-                    <checksum algorithm=\"MD5\" fileext=\".md5\">",
                "+                    <checksum algorithm=\"SHA-512\" fileext=\".sha512\">",
                "                       <fileset dir=\"${basedir}/target/${project.version}\">",
                "@@ -122,9 +122,3 @@",
                "                     </checksum>",
                "-                    <checksum algorithm=\"SHA1\" fileext=\".sha\">",
                "-                      <fileset dir=\"${basedir}/target/${project.version}\">",
                "-                        <include name=\"*.zip\" />",
                "-                        <include name=\"*.jar\" />",
                "-                      </fileset>",
                "-                    </checksum>",
                "-                    <checksum file=\"${basedir}/target/${project.version}/pdfbox-${project.version}-src.zip\" algorithm=\"SHA1\" property=\"checksum\" />",
                "+                    <checksum file=\"${basedir}/target/${project.version}/pdfbox-${project.version}-src.zip\" algorithm=\"SHA-512\" property=\"checksum\" />",
                "                     <echo file=\"${basedir}/target/vote.txt\">",
                "@@ -142,3 +136,3 @@ The release candidate is a zip archive of the sources in:",
                "-The SHA1 checksum of the archive is ${checksum}.",
                "+The SHA-512 checksum of the archive is ${checksum}.",
                "@@ -157,2 +151,6 @@ The release candidate has been prepared in:",
                "+Please commit it to",
                "+",
                "+    https://dist.apache.org/repos/dist/dev/pdfbox/${project.version}/",
                "+",
                " A release vote template has been generated for you:"
            ],
            "changed_files": [
                "pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4142": "",
                "SHA-1": "",
                "SHA-512": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.8.14",
                "1.8.15",
                "1.8.16",
                "1.8.17"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4142, SHA-1, SHA-512",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "3d42684056f8af17fef18b23aaf3e31382d3cd6f",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1530634795,
            "hunks": 2,
            "message": "PDFBOX-3353: forgot to close path; increase rectangle padding like Adobe does git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1835003 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "index 29730a10b..7b4c99e31 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java",
                "@@ -87,4 +87,4 @@ public class PDPolygonAppearanceHandler extends PDAbstractAppearanceHandler",
                "-        rect.setLowerLeftX(Math.min(minX - lineWidth / 2, rect.getLowerLeftX()));",
                "-        rect.setLowerLeftY(Math.min(minY - lineWidth / 2, rect.getLowerLeftY()));",
                "+        rect.setLowerLeftX(Math.min(minX - lineWidth, rect.getLowerLeftX()));",
                "+        rect.setLowerLeftY(Math.min(minY - lineWidth, rect.getLowerLeftY()));",
                "         rect.setUpperRightX(Math.max(maxX + lineWidth, rect.getUpperRightX()));",
                "@@ -156,2 +156,3 @@ public class PDPolygonAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 }",
                "+                contentStream.closePath();",
                "             }"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolygonAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a2f44d980e065c4f66004b5ac0711b309af58cec",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1525908281,
            "hunks": 1,
            "message": "PDFBOX-4189: bug fix - subset is empty if both id sets are empty git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1831290 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java b/fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java",
                "index 1e7b4880a..391983452 100755",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java",
                "@@ -992,3 +992,3 @@ public final class TTFSubsetter",
                "     {",
                "-        if (glyphIds.isEmpty() || uniToGID.isEmpty())",
                "+        if (glyphIds.isEmpty() && uniToGID.isEmpty())",
                "         {"
            ],
            "changed_files": [
                "fontbox/src/main/java/org/apache/fontbox/ttf/TTFSubsetter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "acf2c2cca7335881a95e09b16510b01a60426677",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524336082,
            "hunks": 2,
            "message": "PDFBOX-4071: add override, improve message git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829740 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/IndexToLocationTable.java b/fontbox/src/main/java/org/apache/fontbox/ttf/IndexToLocationTable.java",
                "index 181b71753..da39b607f 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/IndexToLocationTable.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/IndexToLocationTable.java",
                "@@ -49,2 +49,3 @@ public class IndexToLocationTable extends TTFTable",
                "      */",
                "+    @Override",
                "     public void read(TrueTypeFont ttf, TTFDataStream data) throws IOException",
                "@@ -66,3 +67,3 @@ public class IndexToLocationTable extends TTFTable",
                "             {",
                "-                throw new IOException( \"Error:TTF.loca unknown offset format.\");",
                "+                throw new IOException( \"Error:TTF.loca unknown offset format: \" + head.getIndexToLocFormat());",
                "             }"
            ],
            "changed_files": [
                "fontbox/src/main/java/org/apache/fontbox/ttf/IndexToLocationTable.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c43f4b2a31b375bce61aef3845138998c543ad55",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1532781393,
            "hunks": 1,
            "message": "PDFBOX-4281: remove Apache Wink dependency, add class from Apache Wink + dependencies git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1836896 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/pom.xml b/examples/pom.xml",
                "index c270176a5..bf47f5026 100644",
                "--- a/examples/pom.xml",
                "+++ b/examples/pom.xml",
                "@@ -87,5 +87,11 @@",
                "     <dependency>",
                "-      <groupId>org.apache.wink</groupId>",
                "-      <artifactId>wink-component-test-support</artifactId>",
                "-      <version>1.4</version>",
                "+      <groupId>javax.servlet</groupId>",
                "+      <artifactId>javax.servlet-api</artifactId>",
                "+      <version>4.0.1</version>",
                "+      <scope>test</scope>",
                "+    </dependency>",
                "+    <dependency>",
                "+      <groupId>org.apache.geronimo.specs</groupId>",
                "+      <artifactId>geronimo-jaxrs_1.1_spec</artifactId>",
                "+      <version>1.0</version>",
                "       <scope>test</scope>"
            ],
            "changed_files": [
                "examples/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4281": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4281",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "c3821388a0da6f86915aa96b1a8cebc605e6c167",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528569477,
            "hunks": 4,
            "message": "PDFBOX-3353: support /Cross git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1833247 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "index 7311feaec..6d234de46 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "@@ -76,2 +76,7 @@ public class PDAnnotationText extends PDAnnotationMarkup",
                "+    /**",
                "+     * Constant for the name of a cross annotation.",
                "+     */",
                "+    public static final String NAME_CROSS = \"Cross\";",
                "+",
                "     /**",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "index 5e0241496..aeaf70abe 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java",
                "@@ -55,2 +55,3 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                 !PDAnnotationText.NAME_INSERT.equals(annotation.getName()) &&",
                "+                !PDAnnotationText.NAME_CROSS.equals(annotation.getName()) &&",
                "                 !PDAnnotationText.NAME_CIRCLE.equals(annotation.getName()))",
                "@@ -86,2 +87,5 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "                     break;",
                "+                case PDAnnotationText.NAME_CROSS:",
                "+                    drawCross(contentStream, bbox);",
                "+                    break;",
                "                 case PDAnnotationText.NAME_CIRCLE:",
                "@@ -171,2 +175,33 @@ public class PDTextAppearanceHandler extends PDAbstractAppearanceHandler",
                "+    private void drawCross(final PDAppearanceContentStream contentStream, PDRectangle bbox)",
                "+            throws IOException",
                "+    {",
                "+        // should be a square, but who knows...",
                "+        float min = Math.min(bbox.getWidth(), bbox.getHeight());",
                "+",
                "+        // small = offset nearest bbox edge",
                "+        // large = offset second nearest bbox edge",
                "+        float small = min / 10;",
                "+        float large = min / 5;",
                "+",
                "+        contentStream.setMiterLimit(4);",
                "+        contentStream.setLineJoinStyle(1);",
                "+        contentStream.setLineCapStyle(0);",
                "+        contentStream.setLineWidth(0.59f); // value from Adobe",
                "+",
                "+        contentStream.moveTo(small, large);",
                "+        contentStream.lineTo(large, small);",
                "+        contentStream.lineTo(min / 2, min / 2 - small);",
                "+        contentStream.lineTo(min - large, small);",
                "+        contentStream.lineTo(min - small, large);",
                "+        contentStream.lineTo(min / 2 + small, min / 2);",
                "+        contentStream.lineTo(min - small, min - large);",
                "+        contentStream.lineTo(min - large, min - small);",
                "+        contentStream.lineTo(min / 2, min / 2 + small);",
                "+        contentStream.lineTo(large, min - small);",
                "+        contentStream.lineTo(small, min - large);",
                "+        contentStream.lineTo(min / 2 - small, min / 2);",
                "+        contentStream.closeAndFillAndStroke();",
                "+    }",
                "+",
                "     @Override"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDTextAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "00f3aa4521b300057238ed418ad957c2f4118065",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527269236,
            "hunks": 3,
            "message": "PDFBOX-4189: Sonar fix git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832255 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "index 8fa6c9337..39c5bbae2 100644",
                "--- a/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "+++ b/examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java",
                "@@ -210,7 +210,6 @@ public class BengaliPdfGenerationHelloWorld",
                "-                if (line.startsWith(\"#\"))",
                "+                if (!line.startsWith(\"#\"))",
                "                 {",
                "-                    continue;",
                "+                    lines.add(line);",
                "                 }",
                "-                lines.add(line);",
                "             }"
            ],
            "changed_files": [
                "examples/src/main/java/org/apache/pdfbox/examples/pdmodel/BengaliPdfGenerationHelloWorld.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "5ef99ad81b8d020c710511954e29a42e05fe2dcb",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1527269108,
            "hunks": 1,
            "message": "PDFBOX-3353: remove double code git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832254 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "index ebfa3b402..d9ae0fbe8 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java",
                "@@ -103,3 +103,2 @@ public class PDPolylineAppearanceHandler extends PDAbstractAppearanceHandler",
                "-                cs.setStrokingColor(color);",
                "                 if (ab.dashArray != null)"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDPolylineAppearanceHandler.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-3353": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-3353",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "a93450cfcae7ff12faccbf1df2a4f0e4557622c3",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1528130277,
            "hunks": 2,
            "message": "PDFBOX-4071: remove unused assignment git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832870 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java",
                "index df9dd603b..8c5effaf8 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java",
                "@@ -231,3 +231,3 @@ public class PlainTextFormatter",
                "     {",
                "-        float wordWidth = 0f;",
                "+        float wordWidth;",
                "diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainTextFormatter.java b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainTextFormatter.java",
                "index 0fa2d5ee6..efa7741d1 100644",
                "--- a/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainTextFormatter.java",
                "+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainTextFormatter.java",
                "@@ -231,3 +231,3 @@ class PlainTextFormatter",
                "     {",
                "-        float wordWidth = 0f;",
                "+        float wordWidth;"
            ],
            "changed_files": [
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.java",
                "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PlainTextFormatter.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4071": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4071",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "aa56c9446e681fb243cd0db198a590320d7fdf49",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1524836229,
            "hunks": 3,
            "message": "PDFBOX-4189: fix SonarQube pet peeve (variable hides a field) git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1830353 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java",
                "index 7c9feaefb..396a9b549 100644",
                "--- a/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java",
                "+++ b/fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java",
                "@@ -204,3 +204,3 @@ public class GsubWorkerForBengali implements GsubWorker",
                "     {",
                "-        Map<Integer, BeforeAndAfterSpanComponent> beforeAndAfterSpanGlyphIds = new HashMap<>();",
                "+        Map<Integer, BeforeAndAfterSpanComponent> result = new HashMap<>();",
                "@@ -208,3 +208,3 @@ public class GsubWorkerForBengali implements GsubWorker",
                "         {",
                "-            beforeAndAfterSpanGlyphIds.put(",
                "+            result.put(",
                "                     getGlyphId(beforeAndAfterSpanComponent.originalCharacter),",
                "@@ -213,3 +213,3 @@ public class GsubWorkerForBengali implements GsubWorker",
                "-        return Collections.unmodifiableMap(beforeAndAfterSpanGlyphIds);",
                "+        return Collections.unmodifiableMap(result);",
                "     }"
            ],
            "changed_files": [
                "fontbox/src/main/java/org/apache/fontbox/ttf/gsub/GsubWorkerForBengali.java"
            ],
            "message_reference_content": [],
            "jira_refs": {
                "PDFBOX-4189": ""
            },
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": [
                {
                    "id": "BUG_IN_MESSAGE",
                    "message": "The commit message references some bug tracking ticket: PDFBOX-4189",
                    "relevance": 2
                }
            ]
        },
        {
            "commit_id": "161d67f7108b7abda85aab397b236258a3502889",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523896912,
            "hunks": 1,
            "message": "prepare for 1.8.14 release git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/1.8@1829296 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/pdfbox/build.xml b/pdfbox/build.xml",
                "index ed22180c9..0fb2d4c9b 100644",
                "--- a/pdfbox/build.xml",
                "+++ b/pdfbox/build.xml",
                "@@ -30,3 +30,3 @@",
                "-    <property name=\"project.version\" value=\"1.8.13\" />",
                "+    <property name=\"project.version\" value=\"1.8.14\" />"
            ],
            "changed_files": [
                "pdfbox/build.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.8.14",
                "1.8.15",
                "1.8.16",
                "1.8.17"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a2fd9e2c9fa60c4cd46306a28fa95f93dc1fb604",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529348901,
            "hunks": 16,
            "message": "[maven-release-plugin] prepare release 2.0.10 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1833753 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/app/pom.xml b/app/pom.xml",
                "index d9f8855bf..e5adcbef9 100644",
                "--- a/app/pom.xml",
                "+++ b/app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.10-SNAPSHOT</version>",
                "+    <version>2.0.10</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/debugger-app/pom.xml b/debugger-app/pom.xml",
                "index 71eb1798f..acf31fc39 100644",
                "--- a/debugger-app/pom.xml",
                "+++ b/debugger-app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.10-SNAPSHOT</version>",
                "+    <version>2.0.10</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/debugger/pom.xml b/debugger/pom.xml",
                "index 7f03b7cdf..6faddeccd 100644",
                "--- a/debugger/pom.xml",
                "+++ b/debugger/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.10-SNAPSHOT</version>",
                "+    <version>2.0.10</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/examples/pom.xml b/examples/pom.xml",
                "index b641d1be1..3e199a72e 100644",
                "--- a/examples/pom.xml",
                "+++ b/examples/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.10-SNAPSHOT</version>",
                "+    <version>2.0.10</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/fontbox/pom.xml b/fontbox/pom.xml",
                "index 38b9b380f..ffa689b1c 100644",
                "--- a/fontbox/pom.xml",
                "+++ b/fontbox/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.10-SNAPSHOT</version>",
                "+    <version>2.0.10</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 74dfe953b..7200d42ef 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -31,3 +31,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.10-SNAPSHOT</version>",
                "+    <version>2.0.10</version>",
                "     <packaging>pom</packaging>",
                "@@ -429,5 +429,5 @@",
                "   <scm>",
                "-    <connection>scm:svn:http://svn.apache.org/repos/asf/maven/pom/branches/2.0/pdfbox-parent</connection>",
                "-    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/maven/pom/branches/2.0/pdfbox-parent</developerConnection>",
                "-    <url>http://svn.apache.org/viewvc/maven/pom/branches/2.0/pdfbox-parent</url>",
                "+    <connection>scm:svn:http://svn.apache.org/repos/asf/maven/pom/tags/2.0.10/pdfbox-parent</connection>",
                "+    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/maven/pom/tags/2.0.10/pdfbox-parent</developerConnection>",
                "+    <url>http://svn.apache.org/viewvc/maven/pom/tags/2.0.10/pdfbox-parent</url>",
                "   </scm>",
                "diff --git a/pdfbox/pom.xml b/pdfbox/pom.xml",
                "index 1d8bd38d8..4cf0b1940 100644",
                "--- a/pdfbox/pom.xml",
                "+++ b/pdfbox/pom.xml",
                "@@ -25,3 +25,3 @@",
                "         <artifactId>pdfbox-parent</artifactId>",
                "-        <version>2.0.10-SNAPSHOT</version>",
                "+        <version>2.0.10</version>",
                "         <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index 491ec68a9..01fe29b31 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.10-SNAPSHOT</version>",
                "+    <version>2.0.10</version>",
                "     <relativePath>parent/pom.xml</relativePath>",
                "@@ -36,8 +36,8 @@",
                "     <connection>",
                "-      scm:svn:http://svn.apache.org/repos/asf/pdfbox/branches/2.0",
                "+      scm:svn:http://svn.apache.org/repos/asf/pdfbox/tags/2.0.10",
                "     </connection>",
                "     <developerConnection>",
                "-      scm:svn:https://svn.apache.org/repos/asf/pdfbox/branches/2.0",
                "+      scm:svn:https://svn.apache.org/repos/asf/pdfbox/tags/2.0.10",
                "     </developerConnection>",
                "-    <url>http://svn.apache.org/viewvc/pdfbox/branches/2.0</url>",
                "+    <url>http://svn.apache.org/viewvc/pdfbox/tags/2.0.10</url>",
                "   </scm>",
                "diff --git a/preflight-app/pom.xml b/preflight-app/pom.xml",
                "index 84d52213d..00b67fe2d 100644",
                "--- a/preflight-app/pom.xml",
                "+++ b/preflight-app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.10-SNAPSHOT</version>",
                "+    <version>2.0.10</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/preflight/pom.xml b/preflight/pom.xml",
                "index 5e8d7c775..8b73fde57 100644",
                "--- a/preflight/pom.xml",
                "+++ b/preflight/pom.xml",
                "@@ -28,3 +28,3 @@",
                " \t\t<artifactId>pdfbox-parent</artifactId>",
                "-\t\t<version>2.0.10-SNAPSHOT</version>",
                "+\t\t<version>2.0.10</version>",
                " \t\t<relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/tools/pom.xml b/tools/pom.xml",
                "index 37f81352e..d7f038039 100644",
                "--- a/tools/pom.xml",
                "+++ b/tools/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.10-SNAPSHOT</version>",
                "+    <version>2.0.10</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/xmpbox/pom.xml b/xmpbox/pom.xml",
                "index c365bee98..aba5ad314 100644",
                "--- a/xmpbox/pom.xml",
                "+++ b/xmpbox/pom.xml",
                "@@ -29,3 +29,3 @@",
                " \t\t<artifactId>pdfbox-parent</artifactId>",
                "-\t\t<version>2.0.10-SNAPSHOT</version>",
                "+\t\t<version>2.0.10</version>",
                " \t\t<relativePath>../parent/pom.xml</relativePath>"
            ],
            "changed_files": [
                "app/pom.xml",
                "debugger-app/pom.xml",
                "debugger/pom.xml",
                "examples/pom.xml",
                "fontbox/pom.xml",
                "parent/pom.xml",
                "pdfbox/pom.xml",
                "pom.xml",
                "preflight-app/pom.xml",
                "preflight/pom.xml",
                "tools/pom.xml",
                "xmpbox/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10",
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "898aa0f4b8d5fe94dd84961dba59c5d08c2be600",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529948694,
            "hunks": 0,
            "message": "[maven-release-plugin] copy for tag 1.8.15 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/tags/1.8.15@1834352 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.8.15"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "e0af8f4fdbe867d065099dbab6629da4ad957e9e",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523716510,
            "hunks": 1,
            "message": "replaced oraclejdk7 with openjdk7 as the oracle version is no longer supported git-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1829148 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/.travis.yml b/.travis.yml",
                "index 8ec4faa61..22c784485 100644",
                "--- a/.travis.yml",
                "+++ b/.travis.yml",
                "@@ -23,3 +23,3 @@ jdk:",
                "   - oraclejdk8",
                "-  - oraclejdk7",
                "+  - openjdk7"
            ],
            "changed_files": [
                ".travis.yml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "3.0.0",
                "3.0.0-RC1",
                "3.0.0-alpha2",
                "3.0.0-alpha3",
                "3.0.0-beta1",
                "3.0.1",
                "3.0.2"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "3d4846fbb72b6ec57b8dcd8bd36760402c8217fa",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529950955,
            "hunks": 16,
            "message": "[maven-release-plugin] prepare release 2.0.11 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1834357 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/app/pom.xml b/app/pom.xml",
                "index 3b63ef8c3..be401960c 100644",
                "--- a/app/pom.xml",
                "+++ b/app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/debugger-app/pom.xml b/debugger-app/pom.xml",
                "index 05db6b613..fb0ad541f 100644",
                "--- a/debugger-app/pom.xml",
                "+++ b/debugger-app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/debugger/pom.xml b/debugger/pom.xml",
                "index b62f9c818..626d3c719 100644",
                "--- a/debugger/pom.xml",
                "+++ b/debugger/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/examples/pom.xml b/examples/pom.xml",
                "index 8b73b5b69..aac6580d2 100644",
                "--- a/examples/pom.xml",
                "+++ b/examples/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/fontbox/pom.xml b/fontbox/pom.xml",
                "index 9c1bbc6ff..027b01f9f 100644",
                "--- a/fontbox/pom.xml",
                "+++ b/fontbox/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index b0c39228e..745f2286b 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -31,3 +31,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "     <packaging>pom</packaging>",
                "@@ -429,5 +429,5 @@",
                "   <scm>",
                "-    <connection>scm:svn:http://svn.apache.org/repos/asf/maven/pom/branches/2.0/pdfbox-parent</connection>",
                "-    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/maven/pom/branches/2.0/pdfbox-parent</developerConnection>",
                "-    <url>http://svn.apache.org/viewvc/maven/pom/branches/2.0/pdfbox-parent</url>",
                "+    <connection>scm:svn:http://svn.apache.org/repos/asf/maven/pom/tags/2.0.11/pdfbox-parent</connection>",
                "+    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/maven/pom/tags/2.0.11/pdfbox-parent</developerConnection>",
                "+    <url>http://svn.apache.org/viewvc/maven/pom/tags/2.0.11/pdfbox-parent</url>",
                "   </scm>",
                "diff --git a/pdfbox/pom.xml b/pdfbox/pom.xml",
                "index be6303e39..5788f62ea 100644",
                "--- a/pdfbox/pom.xml",
                "+++ b/pdfbox/pom.xml",
                "@@ -25,3 +25,3 @@",
                "         <artifactId>pdfbox-parent</artifactId>",
                "-        <version>2.0.11-SNAPSHOT</version>",
                "+        <version>2.0.11</version>",
                "         <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index 13c40e96a..bb5300b5d 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "     <relativePath>parent/pom.xml</relativePath>",
                "@@ -36,8 +36,8 @@",
                "     <connection>",
                "-      scm:svn:http://svn.apache.org/repos/asf/pdfbox/branches/2.0",
                "+      scm:svn:http://svn.apache.org/repos/asf/pdfbox/tags/2.0.11",
                "     </connection>",
                "     <developerConnection>",
                "-      scm:svn:https://svn.apache.org/repos/asf/pdfbox/branches/2.0",
                "+      scm:svn:https://svn.apache.org/repos/asf/pdfbox/tags/2.0.11",
                "     </developerConnection>",
                "-    <url>http://svn.apache.org/viewvc/pdfbox/branches/2.0</url>",
                "+    <url>http://svn.apache.org/viewvc/pdfbox/tags/2.0.11</url>",
                "   </scm>",
                "diff --git a/preflight-app/pom.xml b/preflight-app/pom.xml",
                "index cc1b043fa..a8733a59b 100644",
                "--- a/preflight-app/pom.xml",
                "+++ b/preflight-app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/preflight/pom.xml b/preflight/pom.xml",
                "index dc12a0117..f7eb5a9af 100644",
                "--- a/preflight/pom.xml",
                "+++ b/preflight/pom.xml",
                "@@ -28,3 +28,3 @@",
                " \t\t<artifactId>pdfbox-parent</artifactId>",
                "-\t\t<version>2.0.11-SNAPSHOT</version>",
                "+\t\t<version>2.0.11</version>",
                " \t\t<relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/tools/pom.xml b/tools/pom.xml",
                "index ab26ab8b6..821dff855 100644",
                "--- a/tools/pom.xml",
                "+++ b/tools/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>2.0.11-SNAPSHOT</version>",
                "+    <version>2.0.11</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/xmpbox/pom.xml b/xmpbox/pom.xml",
                "index 142025bf8..5f8b41f63 100644",
                "--- a/xmpbox/pom.xml",
                "+++ b/xmpbox/pom.xml",
                "@@ -29,3 +29,3 @@",
                " \t\t<artifactId>pdfbox-parent</artifactId>",
                "-\t\t<version>2.0.11-SNAPSHOT</version>",
                "+\t\t<version>2.0.11</version>",
                " \t\t<relativePath>../parent/pom.xml</relativePath>"
            ],
            "changed_files": [
                "app/pom.xml",
                "debugger-app/pom.xml",
                "debugger/pom.xml",
                "examples/pom.xml",
                "fontbox/pom.xml",
                "parent/pom.xml",
                "pdfbox/pom.xml",
                "pom.xml",
                "preflight-app/pom.xml",
                "preflight/pom.xml",
                "tools/pom.xml",
                "xmpbox/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.11",
                "2.0.12",
                "2.0.13",
                "2.0.14",
                "2.0.15",
                "2.0.16",
                "2.0.17",
                "2.0.18",
                "2.0.19",
                "2.0.20",
                "2.0.21",
                "2.0.22",
                "2.0.23",
                "2.0.24",
                "2.0.25",
                "2.0.26",
                "2.0.27",
                "2.0.28",
                "2.0.29",
                "2.0.30",
                "2.0.31",
                "2.0.32"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "82544a7acecdd25f4156225bf96feef0c804953b",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1523900232,
            "hunks": 13,
            "message": "rollback 1.8.14 release preparation git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/1.8@1829302 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/ant/pom.xml b/ant/pom.xml",
                "index e61e4f675..8ac09774b 100644",
                "--- a/ant/pom.xml",
                "+++ b/ant/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.14-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/app/pom.xml b/app/pom.xml",
                "index 2e220897c..a77629018 100644",
                "--- a/app/pom.xml",
                "+++ b/app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.14-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/examples/pom.xml b/examples/pom.xml",
                "index 5a637b743..3bfb8beff 100644",
                "--- a/examples/pom.xml",
                "+++ b/examples/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.14-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/fontbox/pom.xml b/fontbox/pom.xml",
                "index 5e4913eff..2713b99dc 100644",
                "--- a/fontbox/pom.xml",
                "+++ b/fontbox/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.14-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/jempbox/pom.xml b/jempbox/pom.xml",
                "index 1920365b4..ad65c38fd 100644",
                "--- a/jempbox/pom.xml",
                "+++ b/jempbox/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.14-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/lucene/pom.xml b/lucene/pom.xml",
                "index 53f5d2567..22f3efc4e 100644",
                "--- a/lucene/pom.xml",
                "+++ b/lucene/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.14-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 93d0066d5..f50b5fb99 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -31,3 +31,3 @@",
                "   <artifactId>pdfbox-parent</artifactId>",
                "-  <version>1.8.15-SNAPSHOT</version>",
                "+  <version>1.8.14-SNAPSHOT</version>",
                "   <packaging>pom</packaging>",
                "diff --git a/pdfbox/pom.xml b/pdfbox/pom.xml",
                "index cc2a1f99e..7c050baff 100644",
                "--- a/pdfbox/pom.xml",
                "+++ b/pdfbox/pom.xml",
                "@@ -25,3 +25,3 @@",
                "         <artifactId>pdfbox-parent</artifactId>",
                "-        <version>1.8.15-SNAPSHOT</version>",
                "+        <version>1.8.14-SNAPSHOT</version>",
                "         <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index 0375a4c22..5b96d706f 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.14-SNAPSHOT</version>",
                "     <relativePath>parent/pom.xml</relativePath>",
                "diff --git a/preflight-app/pom.xml b/preflight-app/pom.xml",
                "index f9dc36763..48ba66e1b 100644",
                "--- a/preflight-app/pom.xml",
                "+++ b/preflight-app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.14-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/preflight/pom.xml b/preflight/pom.xml",
                "index a05c3c885..7731012a7 100644",
                "--- a/preflight/pom.xml",
                "+++ b/preflight/pom.xml",
                "@@ -28,3 +28,3 @@",
                " \t\t<artifactId>pdfbox-parent</artifactId>",
                "-\t\t<version>1.8.15-SNAPSHOT</version>",
                "+\t\t<version>1.8.14-SNAPSHOT</version>",
                " \t\t<relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/war/pom.xml b/war/pom.xml",
                "index cff876942..0bf5f0e7b 100644",
                "--- a/war/pom.xml",
                "+++ b/war/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.14-SNAPSHOT</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/xmpbox/pom.xml b/xmpbox/pom.xml",
                "index fb5399bbc..039db8267 100644",
                "--- a/xmpbox/pom.xml",
                "+++ b/xmpbox/pom.xml",
                "@@ -29,3 +29,3 @@",
                " \t\t<artifactId>pdfbox-parent</artifactId>",
                "-\t\t<version>1.8.15-SNAPSHOT</version>",
                "+\t\t<version>1.8.14-SNAPSHOT</version>",
                " \t\t<relativePath>../parent/pom.xml</relativePath>"
            ],
            "changed_files": [
                "ant/pom.xml",
                "app/pom.xml",
                "examples/pom.xml",
                "fontbox/pom.xml",
                "jempbox/pom.xml",
                "lucene/pom.xml",
                "parent/pom.xml",
                "pdfbox/pom.xml",
                "pom.xml",
                "preflight-app/pom.xml",
                "preflight/pom.xml",
                "war/pom.xml",
                "xmpbox/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.8.14",
                "1.8.15",
                "1.8.16",
                "1.8.17"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "a625e6e1aa6df28a1b345501eefcc5be62a463d2",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529348914,
            "hunks": 0,
            "message": "[maven-release-plugin] copy for tag 2.0.10 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/tags/2.0.10@1833754 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.10"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "10569b242fca628db93f5a7f5b2cfe7a046fc636",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529950968,
            "hunks": 0,
            "message": "[maven-release-plugin] copy for tag 2.0.11 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/tags/2.0.11@1834358 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [],
            "changed_files": [],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "2.0.11"
            ],
            "matched_rules": []
        },
        {
            "commit_id": "d23be8652f6485fabfbbea7344b0a05dbac3242a",
            "repository": "https://github.com/apache/pdfbox",
            "timestamp": 1529948681,
            "hunks": 17,
            "message": "[maven-release-plugin] prepare release 1.8.15 git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/1.8@1834351 13f79535-47bb-0310-9956-ffa450edef68",
            "diff": [
                "diff --git a/ant/pom.xml b/ant/pom.xml",
                "index e61e4f675..a678fdac4 100644",
                "--- a/ant/pom.xml",
                "+++ b/ant/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.15</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/app/pom.xml b/app/pom.xml",
                "index 2e220897c..6a78d641d 100644",
                "--- a/app/pom.xml",
                "+++ b/app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.15</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/examples/pom.xml b/examples/pom.xml",
                "index 5a637b743..81fc04a5e 100644",
                "--- a/examples/pom.xml",
                "+++ b/examples/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.15</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/fontbox/pom.xml b/fontbox/pom.xml",
                "index 5e4913eff..47da4c91f 100644",
                "--- a/fontbox/pom.xml",
                "+++ b/fontbox/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.15</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/jempbox/pom.xml b/jempbox/pom.xml",
                "index 1920365b4..80e766c7f 100644",
                "--- a/jempbox/pom.xml",
                "+++ b/jempbox/pom.xml",
                "@@ -23,3 +23,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.15</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/lucene/pom.xml b/lucene/pom.xml",
                "index 53f5d2567..f26937c54 100644",
                "--- a/lucene/pom.xml",
                "+++ b/lucene/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.15</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/parent/pom.xml b/parent/pom.xml",
                "index 70fbf26fe..0c0dbfa4e 100644",
                "--- a/parent/pom.xml",
                "+++ b/parent/pom.xml",
                "@@ -31,3 +31,3 @@",
                "   <artifactId>pdfbox-parent</artifactId>",
                "-  <version>1.8.15-SNAPSHOT</version>",
                "+  <version>1.8.15</version>",
                "   <packaging>pom</packaging>",
                "@@ -321,5 +321,5 @@",
                "   <scm>",
                "-    <connection>scm:svn:http://svn.apache.org/repos/asf/maven/pom/branches/1.8/pdfbox-parent</connection>",
                "-    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/maven/pom/branches/1.8/pdfbox-parent</developerConnection>",
                "-    <url>http://svn.apache.org/viewvc/maven/pom/branches/1.8/pdfbox-parent</url>",
                "+    <connection>scm:svn:http://svn.apache.org/repos/asf/maven/pom/tags/1.8.15/pdfbox-parent</connection>",
                "+    <developerConnection>scm:svn:https://svn.apache.org/repos/asf/maven/pom/tags/1.8.15/pdfbox-parent</developerConnection>",
                "+    <url>http://svn.apache.org/viewvc/maven/pom/tags/1.8.15/pdfbox-parent</url>",
                "   </scm>",
                "diff --git a/pdfbox/pom.xml b/pdfbox/pom.xml",
                "index cc2a1f99e..29788276c 100644",
                "--- a/pdfbox/pom.xml",
                "+++ b/pdfbox/pom.xml",
                "@@ -25,3 +25,3 @@",
                "         <artifactId>pdfbox-parent</artifactId>",
                "-        <version>1.8.15-SNAPSHOT</version>",
                "+        <version>1.8.15</version>",
                "         <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/pom.xml b/pom.xml",
                "index a9254568c..b28c065cc 100644",
                "--- a/pom.xml",
                "+++ b/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.15</version>",
                "     <relativePath>parent/pom.xml</relativePath>",
                "@@ -36,8 +36,8 @@",
                "     <connection>",
                "-      scm:svn:http://svn.apache.org/repos/asf/pdfbox/branches/1.8",
                "+      scm:svn:http://svn.apache.org/repos/asf/pdfbox/tags/1.8.15",
                "     </connection>",
                "     <developerConnection>",
                "-      scm:svn:https://svn.apache.org/repos/asf/pdfbox/branches/1.8",
                "+      scm:svn:https://svn.apache.org/repos/asf/pdfbox/tags/1.8.15",
                "     </developerConnection>",
                "-    <url>http://svn.apache.org/viewvc/pdfbox/branches/1.8</url>",
                "+    <url>http://svn.apache.org/viewvc/pdfbox/tags/1.8.15</url>",
                "   </scm>",
                "diff --git a/preflight-app/pom.xml b/preflight-app/pom.xml",
                "index f9dc36763..0d55d5f8f 100644",
                "--- a/preflight-app/pom.xml",
                "+++ b/preflight-app/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.15</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/preflight/pom.xml b/preflight/pom.xml",
                "index a05c3c885..eccdf62ab 100644",
                "--- a/preflight/pom.xml",
                "+++ b/preflight/pom.xml",
                "@@ -28,3 +28,3 @@",
                " \t\t<artifactId>pdfbox-parent</artifactId>",
                "-\t\t<version>1.8.15-SNAPSHOT</version>",
                "+\t\t<version>1.8.15</version>",
                " \t\t<relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/war/pom.xml b/war/pom.xml",
                "index cff876942..b647f52a4 100644",
                "--- a/war/pom.xml",
                "+++ b/war/pom.xml",
                "@@ -25,3 +25,3 @@",
                "     <artifactId>pdfbox-parent</artifactId>",
                "-    <version>1.8.15-SNAPSHOT</version>",
                "+    <version>1.8.15</version>",
                "     <relativePath>../parent/pom.xml</relativePath>",
                "diff --git a/xmpbox/pom.xml b/xmpbox/pom.xml",
                "index fb5399bbc..bbdf06167 100644",
                "--- a/xmpbox/pom.xml",
                "+++ b/xmpbox/pom.xml",
                "@@ -29,3 +29,3 @@",
                " \t\t<artifactId>pdfbox-parent</artifactId>",
                "-\t\t<version>1.8.15-SNAPSHOT</version>",
                "+\t\t<version>1.8.15</version>",
                " \t\t<relativePath>../parent/pom.xml</relativePath>"
            ],
            "changed_files": [
                "ant/pom.xml",
                "app/pom.xml",
                "examples/pom.xml",
                "fontbox/pom.xml",
                "jempbox/pom.xml",
                "lucene/pom.xml",
                "parent/pom.xml",
                "pdfbox/pom.xml",
                "pom.xml",
                "preflight-app/pom.xml",
                "preflight/pom.xml",
                "war/pom.xml",
                "xmpbox/pom.xml"
            ],
            "message_reference_content": [],
            "jira_refs": {},
            "ghissue_refs": {},
            "cve_refs": [],
            "twins": [],
            "tags": [
                "1.8.15",
                "1.8.16",
                "1.8.17"
            ],
            "matched_rules": []
        }
    ]
}
